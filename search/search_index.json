{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Game Development Notes","text":"<p>site build: site live: ikrima.dev site repo: github.com/ikrima/gamedevguide</p>"},{"location":"#wut-is-this","title":"Wut is this","text":"<p>These are my personal notes from the past 4 years that I'm transforming from our internal dev onboarding guide.</p> <p>I'm aiming to process about one section a day since the conversion from onenote/evernote/confluence is lossy and needs a final human pass to clean up little niggles.</p> <p>You can subscribe to the repo for updates</p>"},{"location":"#site-build-instructions","title":"Site Build Instructions","text":"<ul> <li>Originally built with gatsby, migrating to mkdocs</li> <li>My notes related to the webdev of the site are in the gitrepo/docs folder</li> <li>Webdev is pita. I never use the live site anymore so ymmv; your best bet experience is cloning and opening locally</li> <li>I use and \u2728 recommend \u2728 obsidian; no affiliation, it's just free, fast, sparks joy with zero setup (just open the notes folder)</li> <li>foam or vscode are also great alternatives</li> <li>or for the lazy, vscode.dev//gamedevguide or github.dev//gamedevguide</li> </ul>"},{"location":"#current-conversion-status","title":"Current Conversion Status","text":"<p>Restarting of rationalizing all notes/guides into one place...</p> <ul> <li> Programming</li> <li> Graphics</li> <li> OneNote</li> <li> Notion</li> <li> export to obsidian</li> <li> clean and integrate</li> </ul>"},{"location":"#finished-conversion","title":"Finished Conversion","text":"<ul> <li> Conversion scripts from onenote/trillium to custom central store</li> <li> Houdini</li> <li> UE4</li> <li> Environment Setup</li> <li> Build Guide</li> <li> Packaging</li> <li> Source Control</li> <li> Gameplay</li> <li> Editor Extensions</li> <li> Tooling</li> <li> Engine Programming</li> <li> Rendering</li> </ul>"},{"location":"blog/","title":"Index","text":""},{"location":"blog/ecs-flecs-ue4/","title":"Bringing ECS to UE4: My experience with flecs","text":"<p>Over the last couple of years, I've been using flecs to bring ECS to UE4. Wanted to jot some thoughts, mainly as a reminder to myself of useful design principles but also share my experience with others for anyone in the same boat.</p>"},{"location":"blog/ecs-flecs-ue4/#tldr-on-why-flecs-sparks-joy","title":"TLDR on why flecs sparks joy","text":"<ul> <li>It Just Works\u2122</li> <li>Well designed minimalist API =&gt; easy to integrate + easy to extend</li> <li>C99 so easy to integrate with UE4's complex build system</li> <li>Amazing community + active development =&gt; fast turnaround</li> </ul>"},{"location":"blog/ecs-flecs-ue4/#it-just-works","title":"It Just Works","text":"<ul> <li>Initially using it for ECS for gameplay to simplify netcode</li> <li>Overwatch GDC talk flipped my opinion of ECS a couple years back</li> <li>rolled my own \"quick &amp; dirty\" but quickly became a support issue/time sink</li> <li>Since I'm slowly transitioning into GrumpyOldProgrammer\u2122 stage that complains about how broken everything is, I was reluctant to use a 3<sup>rd</sup> party lib</li> <li>Don't want to subsume tech debt of the lib</li> <li>Always thinking about the \"debugging release stopping bug at 4 am, hours before go-live\" scenario. Horrible position to be in but order of magnitude worse when it's in some third party lib</li> <li>Pleasantly surprised at flecs on this ie code quality, robustness and ofc, perf</li> </ul>"},{"location":"blog/ecs-flecs-ue4/#minimal-apic99","title":"Minimal api/C99","text":"<ul> <li>imho, sign of a well designed lib is linear cost of using lib features vs. api cost. Most of time it's either</li> <li>logarithmic: super complicated to do basic things but once you summit the cliff, complexity plateus</li> <li>exponential: super easy to get going but a cliff once you start wanting to do meaningful stuff</li> <li>I've found flecs to be pretty close to linear</li> <li>Turn off all the things!: Usually I start with a lib and try to use the minimal feature set to satisfy why I wanted the lib in the first place. Was pleasantly surprised with flecs that it was relatively easy to do this. I didn't have to pay the (dev) cost of figuring out any of it's feature set to get some simple systems running</li> <li>The other green flag was how easy it was to default to \"manual\" mode for most things e.g. manual timestep, manual staging, manual triggering of systems.<ul> <li>Very important when integrating with very complicated codebases with lots of legacy code like UE4 like dealing with UE4's UObjects</li> <li>Seems obvious but subtle to get right while balancing api complexity &amp; being bug free bc complexity grows combinatorially with every new flag/option.</li> </ul> </li> <li>Over time, started to incorporate more and more features, often replacing simpler ones I'd already sketched out</li> <li>Minimal API =&gt; easy to integrate</li> <li>UE4's very complicated and often times forced to wrestle with how to get UE4 \"out of the way\"</li> <li>Other libs I perused where either of suspect code quality or relied on too much C++ bullshittery.</li> <li>Even with solid lib, am very cautious with complex \"mandatory batteries included\" libs after years of being burned by UE4 integration gremlins. For ex, here's some OTOH things I ask<ul> <li>How will I get it to deal with UObjects/AActors/UComponents and all their wonderful peculiarities wrt allocation, ticking, execution</li> <li>How will I deal with integrating it with Slate for editor UI?</li> <li>Will it play nicely with UE4's builtin dev/debug utilities like perf counters, etc?</li> <li>Will it play well with other plugins that extend those things (ex VTune or custom memory trackers)?</li> <li>Will it compile? \ud83e\udd23 Playing nicely with UHT/UBT is non-trivial.</li> <li>How likely will it play nicely with future UE4 engine updates?</li> <li>If I run into a weird nightmare edgecase, most likely imposed by UE4, how easy will I be able to contort the library to workaround it? Can't count number of times I ran into a problem that could be fixed with a couple line change in UE4 but at a deep base layer and then forced into a herculean effort to get a 3<sup>rd</sup> party lib working</li> </ul> </li> <li>For those with a physics bg, another complexity piece is that programming is \"Hamiltonian, not euclidean\". You have to consider the whole path, not just the distance from where you started and where you wanted to end up. Ex: Entt is pretty solid but was immediately no-go given it's liberal use of C++ bullshittery advanced features \ud83d\ude1c<ul> <li>I remember one of the VS2019 updates fixed a compiler bug that was crashing a plugin while introducing a new one that broke the latest UE4 version that an artist needed bc of some new feature. That is programmer hell \ud83e\udd26\u200d\u2640\ufe0f</li> <li>Even though, I've replicated a lot of Entt's feature sets over time, sometimes even braving C++ bullshit (inevitably always ending in regret and questioning one's life choices), I wouldn't want to be forced into paying an upfront cost to all that complexity. Especially because at the start, I don't know what features I'll end up needing or not</li> </ul> </li> </ul>"},{"location":"blog/ecs-flecs-ue4/#community","title":"Community","text":"<ul> <li>Libraries are much more than the code; they're more akin to micro-platforms/ecosystems. More active =&gt;</li> <li>more likely other people have run into bug, question, workaround</li> <li>faster turnaround for bug fixes/workarounds</li> </ul> <p>Flecs has been stellar on this front. Also, the discord is full of great people. Since I'm turning into a GrumpyOldDev\u2122, I usually try to avoid online communities but that discord is refreshing in that it's full of decent people who also know what they're talking about + know what they don't and humble enough to admit.</p> <p>I doubt flecs will escape Eternal September forever but right now it's pretty great</p>"},{"location":"blog/ecs-flecs-ue4/#conclusion","title":"Conclusion","text":"<p>For me personally, flecs is in a small handful of libs that SparkJoy\u2122 like imgui or sokol.</p> <p>This is getting long so I'll save it for another post on how I've (ab)used flecs:</p> <ul> <li>Ability system</li> <li>Network debugger</li> <li>Deterministic GGPO netcode</li> <li>abusing it to hack in language features like open polymorphic types or expression algebras</li> </ul>"},{"location":"blog/radiative-nonexponential-media-src/","title":"Source code: A radiative transfer framework for non-exponential media","text":"<p>https://github.com/tunabrain/tungsten/commit/98b366d5ddd43eaa9ee476a12ae364bedda2f94e</p> <p>I just released the full source code of our paper \"A radiative transfer framework for non-exponential media\" Grab it here on github: https://twitter.com/tunabrain/status/1068544688448249859</p>"},{"location":"design/art-resources/","title":"Art Resources","text":"<p>Masters of Anatomy: An Anatomy Book drawn by animators, illustrators and comic-book artists who have worked for Disney, Pixar, Dream Works, Marvel and DC. </p>"},{"location":"design/ux-design/","title":"UX Design","text":""},{"location":"design/ux-design/#learning-resources","title":"Learning Resources","text":"<ul> <li>Untools: collection of thinking tools and frameworks to help you solve problems, make decisions and understand systems</li> <li>Brett Victor Reading List</li> <li>Handbook of Graph Drawing and Visualization: a broad survey of graph drawing techniques</li> <li>PDF version</li> <li>Laws of UX</li> <li>Material Design</li> <li>Material Design Foundation</li> <li>Material Theme Builder</li> <li>Google Fonts Knowledge</li> <li>Apple Human Interface Guidelines</li> <li>Practical Typography</li> <li>Type Wolf: typography checklist</li> </ul>"},{"location":"design/ux-design/#dev-resources","title":"Dev Resources","text":"<ul> <li>What The Font: font identification/finder</li> <li>Wappalyzer: web stack analyzer</li> <li>Color Name &amp; Hue</li> <li>Name That Color</li> </ul>"},{"location":"design/ux-design/#design-references","title":"Design References","text":"<ul> <li>Future of Coding or Programming: Project Comparison</li> <li>Whole Code Catalog: detailed &amp; extensive survey from Steve Krouse's research for programming language startup (Dark)</li> <li>Nodesign.dev: Tools and resources for non artistic developers</li> </ul>"},{"location":"dev-notes/","title":"General Development Notes","text":"<p>Assorted notes on general development</p>"},{"location":"dev-notes/_assets/tagless-final-interp-cpp/","title":"Tagless final interp cpp","text":"C++<pre><code>// From https://i.cs.hku.hk/~bruno/oa/\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;memory&gt;\nusing namespace std;\n\n/*\n * This program has used some C++11 features to get rid of manual memory management. \n * \n * If you prefer the older C++ version, do the follwing steps:\n * 1. Switch all \"EvalPtr\" to \"Eval *\"; do the same to \"PPrintPtr\"\n *    WARNING: you need to do some additional cleanup for those newed objects\n * 2. Replace \"make_shared&lt;Closure&gt;\" with \"new Closure\"\n * 3. Substitude \"to_string\" to some other ways of converting int to string\n */\n\n// Initial object algebra interface for expressions: integers and addition\ntemplate &lt;typename E&gt; \nclass ExpAlg\n{\n  public:\n    virtual E lit(int x) = 0;\n    virtual E add(E e1, E e2) = 0;\n};\n\n// An object algebra implementing that interface (evaluation)\n\n// The evaluation interface\nclass Eval \n{\n  public:\n    virtual int eval() = 0;\n};\ntypedef shared_ptr&lt;Eval&gt; EvalPtr;\n\nclass EvalLit : public Eval {\n  public:\n    EvalLit(int x) : _x(x) {}\n\n    virtual int eval() {\n      return _x;\n    }\n  private:\n    int _x;\n};\n\nclass EvalAdd : public Eval {\n  public:\n    EvalAdd(EvalPtr l, EvalPtr r) : _l(l), _r(r) {}\n\n    virtual int eval() {\n      return _l-&gt;eval() + _r-&gt;eval();\n    }\n  private:\n    EvalPtr _l;\n    EvalPtr _r;\n};\n\n// The object algebra\nclass EvalExpAlg : virtual public ExpAlg&lt;EvalPtr&gt;\n{\n  public:\n    virtual EvalPtr lit(int x) {\n      return make_shared&lt;EvalLit&gt;(x);\n    }\n\n    virtual EvalPtr add(EvalPtr e1, EvalPtr e2) {\n      return make_shared&lt;EvalAdd&gt;(e1, e2);\n    }\n};\n\n// Evolution 1: Adding subtraction\ntemplate&lt;typename E&gt;\nclass SubExpAlg : virtual public ExpAlg&lt;E&gt;\n{\n  public:\n    virtual E sub(E e1, E e2) = 0;\n};\n\nclass EvalSub : public Eval {\n  public:\n    EvalSub(EvalPtr l, EvalPtr r)\n      : _l(l), _r(r) {}\n\n    int eval() {\n      return _l-&gt;eval() - _r-&gt;eval();\n    }\n  private:\n    EvalPtr _l;\n    EvalPtr _r;\n};\n\n// Updating evaluation:\nclass EvalSubExpAlg : public EvalExpAlg, public SubExpAlg&lt;EvalPtr&gt;\n{\n  public:\n    virtual EvalPtr sub(EvalPtr e1, EvalPtr e2) {\n      return make_shared&lt;EvalSub&gt;(e1, e2);\n    }\n};\n\n\n// Evolution 2: Adding pretty printing\nclass PPrint \n{\n  public:\n    virtual string print() = 0;\n};\n\ntypedef shared_ptr&lt;PPrint&gt; PPrintPtr;\n\nclass PrintLit : public PPrint\n{\n  public:\n    PrintLit(int x) : _x(x) {}\n\n    virtual string print() {\n      return to_string(_x);\n    }\n  private:\n    int _x;\n};\n\nclass PrintAdd : public PPrint \n{\n  public:\n    PrintAdd(PPrintPtr e1, PPrintPtr e2)\n      : _e1(e1), _e2(e2) {}\n\n    virtual string print() {\n      return _e1-&gt;print() + \" + \" + _e2-&gt;print();\n    }\n\n  private:\n    PPrintPtr _e1;\n    PPrintPtr _e2;\n};\n\nclass PrintSub : public PPrint\n{\n  public:\n    PrintSub(PPrintPtr e1, PPrintPtr e2)\n      : _e1(e1), _e2(e2) {}\n    virtual string print() {\n      return _e1-&gt;print() + \" - \" + _e2-&gt;print();\n    }\n  private:\n    PPrintPtr _e1;\n    PPrintPtr _e2;\n};\n\nclass PrintExpAlg : virtual public SubExpAlg&lt;PPrintPtr&gt;\n{\n  public:\n    virtual PPrintPtr lit(int x) {\n      return make_shared&lt;PrintLit&gt;(x);\n    }    \n\n    virtual PPrintPtr add(PPrintPtr e1, PPrintPtr e2) {\n      return make_shared&lt;PrintAdd&gt;(e1, e2);\n    }\n\n    virtual PPrintPtr sub(PPrintPtr e1, PPrintPtr e2) {\n      return make_shared&lt;PrintSub&gt;(e1, e2);\n    }\n};\n\n// An alternative object algebra for pretty printing\nclass PrintExpAlg2 : virtual public SubExpAlg&lt;string&gt;\n{\n  public:\n    virtual string lit(int x) {\n      return to_string(x);\n    }    \n\n    virtual string add(string e1, string e2) {\n      return e1 + \" + \" + e2;\n    }\n\n    virtual string sub(string e1, string e2) {\n      return e1 + \" - \" + e2;\n    }\n};\n\n// Testing\n\n\n// An expression using the basic ExpAlg\ntemplate&lt;typename E&gt;\nE exp1(ExpAlg&lt;E&gt;&amp; alg) {\n  return alg.add(alg.lit(3), alg.lit(4));\n}\n\n// An expression using subtraction too\ntemplate&lt;typename E&gt;\nE exp2(SubExpAlg&lt;E&gt;&amp; alg) {\n  return alg.sub(exp1(alg), alg.lit(4));\n}\n\nint main() {\n  // Some object algebras:\n  EvalExpAlg ea;\n  EvalSubExpAlg esa;\n  PrintExpAlg pa;\n  PrintExpAlg2 pa2;\n\n  EvalPtr ev = exp1(esa);\n\n  // But calling ea with exp2 is an error\n  // EvalPtr ev_bad = exp2(ea);\n\n  cout &lt;&lt; \"Evaluation of exp1 \\\"\" &lt;&lt; exp1(pa)-&gt;print() &lt;&lt; \"\\\" is: \" &lt;&lt; ev-&gt;eval() &lt;&lt; endl;\n  cout &lt;&lt; \"Evaluation of exp2 \\\"\" &lt;&lt; exp2(pa)-&gt;print() &lt;&lt; \"\\\" is: \" &lt;&lt; exp2(esa)-&gt;eval() &lt;&lt; endl;\n  cout &lt;&lt; \"The alternative pretty printer works nicely too!\\n\" \n     &lt;&lt; \"exp1: \" &lt;&lt; exp1(pa2) &lt;&lt; \"\\n\"\n     &lt;&lt; \"exp2: \" &lt;&lt; exp2(pa2);\n}\n</code></pre>"},{"location":"dev-notes/assembly/asm-cheatsheet/","title":"Assembly Cheatsheet","text":""},{"location":"dev-notes/assembly/asm-cheatsheet/#register-conventions","title":"Register conventions","text":"<ul> <li>General registers</li> <li>Data registers: used for arithmetic, logical, and other operations<ul> <li>AX: the primary accumulator</li> <li>BX: base register</li> <li>CX: count register</li> <li>DX: data register</li> </ul> </li> <li>Pointer registers<ul> <li>IP: Instruction Pointer</li> <li>SP: Stack Pointer</li> <li>BP: Base Pointer</li> </ul> </li> <li>Index registers</li> <li>Control registers</li> <li>Segment registers</li> </ul>"},{"location":"dev-notes/assembly/asm-cheatsheet/#general-purpose-registers","title":"General Purpose Registers","text":"Register Usage Description <code>rax/r0</code> accumulator used for input/output and most arithmetic instructions return value holds function return value syscall number holds syscall number argument for syscall instruction <code>rbx/r3</code> base for index addressing used as memory address base for indexed addressing <code>rcx/r1</code> counter for iteration used for holding loop count in loops this storing <code>this</code> pointer in c++ <code>rdx/r2</code> data used in arithmetic and I/O operations <code>rdi/r7</code> destination index used in stream operations e.g. <code>stosb</code> <code>rsi/r6</code> source index used in stream operations e.g. <code>lodsb</code> <code>rsp/r4</code> Stack pointer points to the top of the stack <code>rbp/r5</code> Frame pointer points to the frame's base of stack <code>rn</code> Numbered (n=8..15) <code>xmm0-15</code> 128 bit floating point <code>rip</code> instruction pointer points to next instruction to execute"},{"location":"dev-notes/assembly/asm-cheatsheet/#control-registers","title":"Control Registers","text":"Register Description CF carry flag condition code register ZF zero flag condition code register SF sign flag condition code register OF overflow flag condition code register <ul> <li>Condition Code registers are single bit registers</li> <li>implicitly set by arithmetic instructions<ul> <li>Ex: <code>addl a,b</code> where t is result value</li> <li>CF set if unsigned overflow</li> <li>ZF set if result is zero</li> <li>SF set if result &lt; 0</li> <li>OF set if signed overflow <code>(a&gt;0 &amp;&amp; b&gt;0 &amp;&amp; t&lt;0) || (a&lt;0 &amp;&amp; b&lt;0 &amp;&amp; t&gt;=0)</code></li> </ul> </li> <li>explicitly set by compare instruction<ul> <li><code>cmp a,b</code> uses sets same flags as <code>a-b</code> instruction but without setting destination</li> </ul> </li> </ul>"},{"location":"dev-notes/assembly/asm-cheatsheet/#segment-registers","title":"Segment Registers","text":"Register Description CS Code segment SS Stack segment DS Data segment ES Extra data segment FS Points to Thread Information Block (TIB) GS Extra data segment"},{"location":"dev-notes/assembly/asm-cheatsheet/#register-operands","title":"Register Operands","text":"Operand Description Immediate numeric constant value 0x234 or 48 Register general purpose register <code>rax</code> Memory value stored at [reg + reg*scale + offset] address scale is 1, 2, 4, or 8 only value stored at [offset] <code>[2344]</code> value stored at [reg] <code>[rax+4]</code> or C analogue of <code>*(rax+4)</code> value stored at [reg + offset] <code>[rax+4]</code> or C analogue of <code>*(rax+4)</code> value stored at [reg + reg*scale] <code>[rax+4]</code> or C analogue of <code>*(rax+4)</code> value stored at [reg + reg*scale + offset ] <code>[rax+rbx*4]</code> or C analogue of <code>*(rbx*4+rax)</code> Register Data Suffix Definition instruction 8 bits  (byte) b <code>db</code> 16 bits (word) w <code>dw</code> 32 bits (dword) l <code>dd</code> 64 bits (qword) ll <code>ddq</code>/<code>do</code> float <code>dd</code> double <code>dq</code> extended precision <code>dt</code> <ul> <li>NOTE: dst can never be an immediate</li> <li>NOTE: src and dst can't both be memory operands</li> <li>NOTE: some assemblers will legalize memory operands through simple algebraic transform</li> <li>e.g. <code>[rax*5] =&gt; [rax*4+rax]</code></li> </ul>"},{"location":"dev-notes/assembly/asm-cheatsheet/#instructions","title":"Instructions","text":""},{"location":"dev-notes/assembly/asm-cheatsheet/#common-instructions","title":"Common Instructions","text":"<p>For more common instructions, check out the Stanford CS107 list</p> Instruction Arguments Explanation mov src, dst dst = src add src, dst dst += src sub src, dst dst -= src cmp a, b b-a set flags jmp label jump to label je label jump if equal (ZF=1) jne label jump not equal (ZF=0) jg label jump &gt; (ZF=0) push src add to top of stack pop dst remove top from stack call fn push %rip, jmp to fn ret pop %rip"},{"location":"dev-notes/assembly/asm-cheatsheet/#conditionals","title":"Conditionals","text":"<p><code>cmp op1, op2</code> -&gt; mimics <code>sub op1, op2</code> but only changes the zero and carry flag for comparing</p> <ul> <li> <p>Prefixes</p> </li> <li> <p><code>j~ x</code>:       jump to x if ~</p> </li> <li><code>cmov~ x, y</code>: conditional mov x, y if ~</li> <li><code>setc~ x</code>:    set x to 1 if ~, x is 8 bit reg</li> <li> <p>Many suffixes</p> </li> <li> <p><code>a</code>:  above, &gt;</p> </li> <li><code>ae</code>: above or equal, &gt;=</li> <li><code>b</code>:  below, &lt;</li> <li><code>be</code>: below or equal, &lt;=</li> <li><code>e</code>:  equal, =</li> <li><code>ne</code>: not equal, !=</li> </ul>"},{"location":"dev-notes/assembly/asm-cheatsheet/#calling-convention","title":"Calling Convention","text":""},{"location":"dev-notes/assembly/asm-cheatsheet/#linuxos-x","title":"Linux/OS X","text":"<ul> <li>function parameters passed in registers</li> <li>ints/pointers: <code>rdi</code>, <code>rsi</code>, <code>rdx</code>, <code>rcx</code>, <code>r8</code>, <code>r9</code></li> <li>floats/doubles: <code>xmm0</code>, <code>xmm1</code>, <code>xmm2</code>, <code>xmm3</code>, <code>xmm4</code>, <code>xmm5</code>, <code>xmm6</code>, <code>xmm7</code></li> <li>additional parameters get pushed on the stack in reverse order (must be cleaned up by caller)</li> <li>return values are stored in <code>rax/xmm0</code> for int/float</li> <li>stack pointer <code>rsp</code> must be aligned to 16-byte boundary before invocation</li> <li>call instruction pushes the return address (8 bytes) which unaligns <code>rsp</code></li> <li>must manually align by pushing or subtracting 8 from <code>rsp</code></li> <li>callee-saved registers: <code>rbp</code>, <code>rbx</code>, <code>r12</code>, <code>r13</code>, <code>r14</code>, <code>r15</code></li> </ul> GAS<pre><code>extern putchar\nmov rdi,'H' ; function parameter: one char to print\ncall putchar\n</code></pre>"},{"location":"dev-notes/assembly/asm-cheatsheet/#windows","title":"Windows","text":"<ul> <li>function parameters passed in registers: <code>rcx</code>, <code>rdx</code>, <code>r8</code>, <code>r9</code></li> <li>must allocate 32 bytes of shadow stack space</li> <li>callee-saved registers: <code>rbx</code>, <code>rbp</code>, <code>rdi</code>, <code>rsi</code>, <code>rsp</code>, <code>r12</code>, <code>r13</code>, <code>r14</code>, <code>r15</code>, <code>xmm6..xmm15</code></li> </ul> GAS<pre><code>sub rsp,32+8; parameter area, and stack alignment\nextern putchar\nmov rcx,'H' ; function parameter: one char to print\ncall putchar\nadd rsp,32+8 ; clean up stack\n</code></pre>"},{"location":"dev-notes/assembly/asm-cheatsheet/#reference","title":"Reference","text":"<p>NASM Tutorial Some Assembly Required: An approachable introduction to assembly</p>"},{"location":"dev-notes/clang/clang-cheatsheet/","title":"Clang Cheatsheet","text":""},{"location":"dev-notes/clang/clang-cheatsheet/#misc-gotchas","title":"Misc Gotchas","text":"<ul> <li>Compile c file as C++: <code>clang -xc++ \"filename\" -std=c++14</code></li> <li>note <code>-xc++</code> must come before file list</li> <li><code>clang</code> driver won't automatically link C++ <code>stdlib</code>; must pass <code>-stdlib=libc++</code></li> <li>Treating <code>.h</code> files as C++ headers (to get around <code>#pragma once</code> warning)</li> <li>pass <code>-xc++-header</code></li> <li>for <code>clang-cl</code>, <code>/clang:-xc++-header</code></li> <li>NOTE: don't pass <code>-xc++</code> and <code>-xc++-header</code></li> <li>NOTE: might have ordering issues in <code>compile_commands.json</code> so be sure to use --</li> <li>Additional info<ul> <li>https://github.com/clangd/clangd/issues/777</li> <li>https://github.com/clangd/clangd/issues/555</li> <li>Compile C++ header files with clang-cl that have a .h extension</li> </ul> </li> </ul>"},{"location":"dev-notes/clang/clang-libtooling-ast/","title":"Clang/LibTooling AST Notes","text":"<p>Source Reference: https://github.com/pr0g/clang-experiments/blob/main/examples/clang-ast-notes.md</p> <p>P. Goldsborough \u201cclang-useful: Building useful tools with LLVM and clang for fun and profit\"</p>"},{"location":"dev-notes/clang/clang-libtooling-ast/#types","title":"Types","text":"<ul> <li>Stmt (statement)</li> <li>examples: if</li> <li>Decl (declaration)</li> <li>examples: class, variable, function, enum, values, names,fields, variables</li> <li>Expr (expression)</li> <li>derives from statement</li> <li>Type (types)</li> <li>type declaration</li> <li>qual type - includes const and volatile specifiers</li> </ul>"},{"location":"dev-notes/clang/clang-libtooling-ast/#clang-tooling","title":"Clang Tooling","text":"<ul> <li>libClang (c interface)</li> <li>stable api</li> <li>libTooling</li> </ul>"},{"location":"dev-notes/clang/clang-libtooling-ast/#libclang","title":"libClang","text":"<ul> <li>cursors - a pointer to a node</li> <li>no base class for all types of nodes (no AST node)</li> <li>in C++ visitation class is used</li> <li>has built in code completion</li> <li>codeCompleteAt (insert a special marker in the AST)</li> <li>has a pythonAPI</li> <li>very high level</li> <li>usually easier to achieve things with libClang</li> </ul>"},{"location":"dev-notes/clang/clang-libtooling-ast/#libtooling","title":"libTooling","text":"<ul> <li>c++ library</li> <li>more powerful</li> <li>clang tidy<ul> <li>could add a new plugin to clang-tidy</li> </ul> </li> <li>clang plugin<ul> <li>dynamic libraries that you build and link into clang when you run it</li> <li>could put it into your build tool, check for linter errorsetc</li> </ul> </li> <li>clang tool<ul> <li>standalone executable with clang as a library</li> <li>has a main function</li> <li>more power</li> </ul> </li> </ul>"},{"location":"dev-notes/clang/clang-libtooling-ast/#info","title":"Info","text":"<ul> <li>AST Dump - dump out whole AST</li> </ul>"},{"location":"dev-notes/clang/clang-libtooling-ast/#demoexample","title":"Demo/Example","text":"<ul> <li>Create an index (<code>CIIndex</code>) - a structure that will manage all your translation units for you</li> <li><code>clang_parseTranslationUnit</code> - important function, gives you back the AST (does all the parsing)</li> <li><code>CXTranslationUnit</code> - cursor as well</li> <li><code>clang_visitChildren</code> - does the actual visitation (walks the AST)</li> <li>takes <code>data</code> (<code>void*</code>) data includes filter and the lines (includes some predicates)</li> <li>pattern (regular expression)</li> <li><code>clang_getCursorKind</code> - kind of cursor (e.g. filter for functions)<ul> <li>every cursor has a kind - it is the c abstraction for decl, statement, expression etc...</li> </ul> </li> <li><code>clang_Location_isInSystemHeader</code> - to skip all system headers</li> <li><code>clang_getCursorSpelling</code> - name of the function/class</li> <li><code>clang_getSpellingLocation</code> - find where in the file is this cursor, returns line number, column number and file</li> <li><code>CXChildVisit_Recurse</code> - continue recursing AST</li> <li><code>CXChildVisit_Continue</code> - continue to the next sibling</li> <li><code>CXChildVisit_Break</code> - stop at this point</li> <li>libtooling</li> <li>clang tool is made up of three things, an Action, a Consumer and a Callback</li> <li>an Action allows you to access the AST at different steps during the compilation<ul> <li>e.g. <code>BeginSourceFileAction</code> - access file name among other things</li> <li>also <code>EndSourceFileAction</code> and <code>ExecuteAction</code> (in between)</li> <li>can print something at the end</li> <li>Consumer - little boilerplate, creates a matcher - good at finding a specific node in the AST</li> <li>has macros where you can define what you're looking for (e.g. functions)</li> <li><code>HandleTranslationUnit</code> - run our handler on the AST</li> <li>At this point the AST is already parsed</li> <li>Handler - called for every node that matches</li> <li>mccabe index example</li> <li><code>buildCFG</code> - builds a graph consisting of basic blocks</li> <li>computer number of nodes and edges</li> <li>clang Diagnostics (can use for your own tool) - Emitting Diagnostics in Clang</li> <li>create a diagnostics engine in clang</li> </ul> </li> <li>include sorting (using the preprocessor)<ul> <li><code>BeginInvokeAction</code> - called before any source file is touched</li> <li>can override <code>InclusionDirective</code> in class deriving from <code>clang::PPCallbacks</code></li> <li><code>Rewriter.ReplaceText</code> - begin/end</li> <li><code>clang::FixItHint</code> - describe some way of fixing a problem</li> </ul> </li> </ul>"},{"location":"dev-notes/clang/clang-libtooling-ast/#closing","title":"Closing","text":"<ul> <li><code>clangd</code> - language server (clang as a service)</li> <li>code completion, linting etc...</li> <li>references</li> <li>eli.thegreenplace.net</li> <li>clang.llvm.org/docs/InternalsManual.html</li> <li>llvm.org/docs/ProgrammersManual.html</li> <li>goldsborough.me &amp; github.com/goldsborough</li> <li>github.com/peter-can-talk/cppnow-2017</li> </ul>"},{"location":"dev-notes/clang/clang-libtooling-ast/#clang-refactoring-talk","title":"Clang Refactoring Talk","text":"<p>Fred Tingaud \u201cHow to Refactor Millions of Line of Code Without Alienating your Colleagues\u201d</p> <ul> <li>clang tidy search foe specific clang-tidy nodes</li> <li>Clang Tidy Matcher C++<pre><code>registerMatchers(MatchFiner* finder) { finder-&gt;addMatcher(MY_MATCHER...); }\nvirtual void check(const MatchFinder::MatchResult&amp; result)\n</code></pre></li> </ul>"},{"location":"dev-notes/clang/clang-libtooling-ast/#clang-tidy-check-talk","title":"Clang Tidy Check Talk","text":"<p>CPPP 2019 - Adding a New clang-tidy Check by the Practice - J\u00e9r\u00e9my Demeule</p> <ul> <li> <p>clang-query</p> </li> <li> <p>(commands)</p> </li> <li><code>set output diag</code></li> <li><code>enable output detailed-ast</code></li> <li><code>match translationUnitDecl</code></li> <li><code>match functionDecl</code></li> <li><code>match varDecl</code></li> <li><code>match functionDecl (hasName(\"hello\"))</code></li> <li>(introduce alias)<ul> <li><code>let &lt;name&gt; hasAncestor(functionDecl(hasName(\"&lt;name&gt;\")))</code></li> <li><code>match callExpr(callee(functionDecl(hasName(\"&lt;name&gt;\"))))</code></li> </ul> </li> <li> <p>clang-tools-extra/clang-tidy</p> </li> <li> <p><code>./add_new_check.py &lt;category&gt; &lt;name&gt;</code></p> </li> <li> <p>(in code - clang-tidy check)</p> </li> <li> <p><code>::registerMatchers</code></p> </li> <li> <p><code>(::check)</code></p> </li> <li> <p><code>const auto* matcherExpr = Result.Node.getNodeAss&lt;CallExpr&gt;(\"name\");</code></p> </li> <li><code>diag(MatchExpr-&gt;getExprLoc(), \"message\");</code></li> <li> <p>use .bind to give matcher a name</p> </li> <li> <p><code>run-clang-tidy.py -clang-tidy-binary &lt;path/to/exe&gt; -checks ...</code></p> </li> </ul>"},{"location":"dev-notes/clojure/clj-meander/","title":"Meander","text":""},{"location":"dev-notes/clojure/clj-meander/#common-patterns","title":"Common Patterns","text":""},{"location":"dev-notes/clojure/clj-meander/#capture-variable-from-pattern-match","title":"Capture Variable From Pattern Match","text":"<ul> <li>How to capture a variable from a pattern match? Use <code>:as</code> Clojure<pre><code>(def a_opprmdefblk [(ophirPrmDef :inBoneTrk ctidChannel #{:EArg-In})\n                    (ophirPrmDef :inoutBoneTrk ctidChannel #{:EArg-In :EArg-Out})\n                    (ophirPrmDef :outBoneTrk ctidChannel #{:EArg-Out})])\n(m/search\n a_opprmdefblk\n [(m/or {:argFlags #{:EArg-Out} :as !argOut}\n        {:argFlags #{:EArg-In} :as !argIn})\n  ...]\n {:opmirArgIn !argIn\n  :opmirArgOut !argOut})\n</code></pre></li> </ul>"},{"location":"dev-notes/clojure/clj-meander/#sequence-transformation","title":"Sequence Transformation","text":"<ul> <li>Desired Result</li> </ul> Clojure<pre><code>;EBNF\nns &lt;= \"obj\" | \"oppas\" | \"dc\"\nsegattr &lt;= [\"/\"] \"@\" alphanumeric\nsegobj  &lt;= [\"/\"] alphanumeric\nxpath   &lt;= ns (segattr|segobj) {(segattr|segobj)}\n\n; Input\n\"obj:/myobj/mychild/@myattrib\"\n;; Result =&gt;\n{:ns :obj,\n:xsegs\n({:segkind :seg-chld, :segpath \"\"}\n  {:segkind :seg-chld, :segpath \"myobj\"}\n  {:segkind :seg-chld, :segpath \"mychild\"}\n  {:segkind :seg-attr, :segpath \"@myattrib\"})}\n</code></pre> <ul> <li> <p>What this shows:</p> </li> <li> <p>Input: a tokenized string</p> </li> <li>Make sure tokens match order pattern (<code>nstoken xseg {xseg}</code> )</li> <li> <p>Transform each of the tokens based on the token Clojure<pre><code>nstoken =&gt;\n  case \"obj\": :objstore\n  default: (keyword nstoken)\n</code></pre></p> </li> <li> <p>Normal Clojure</p> </li> </ul> Clojure<pre><code>(defn initOppath-clj [axpath]\n    (let [nsandpath (str/split axpath #\"[:]\" 2)\n          nsstr (first nsandpath)\n          pathtokens (-&gt;\n                      nsandpath\n                      (nth 1)\n                      (str/split #\"[/]\"))]\n      {:ns (case nsstr\n             \"op\"    :op\n             \"obj\"   :obj\n             \"oppas\" :oppas)\n       :xsegs (map\n               #(if (= (first %1) \\@)\n                  (-&gt;OppathSeg :seg-attr %1)\n                  (-&gt;OppathSeg :seg-chld %1))\n               pathtokens)}))\n</code></pre> <ul> <li> <p>Meander</p> </li> <li> <p>Naive attempt: </p> Clojure<pre><code>(defn initOppath-m1 [axpath]\n  (let [axptokens (str/split axpath #\"[/:]\")]\n    {:ns (m/match (first axptokens)\n           (m/and ?ns (m/or \"op\" \"obj\" \"oppas\"))\n           (keyword ?ns))\n     :xsegs (map\n             #(if (= (first %1) \\@)\n                (-&gt;OppathSeg :seg-attr %1)\n                (-&gt;OppathSeg :seg-chld %1))\n             (rest axptokens))}))\n</code></pre> </li> <li> <p>Second Attempt: Better but a nitpick is the functional transformation is on the pattern matching clause where conceptually feels like it should go in the generation part</p> Clojure<pre><code>(defn initOppath-m2 [axpath]\n      (m/match (str/split axpath #\"[/:]\")\n        (m/with [%segattr (m/pred #(= (first %1) \\@)    (m/app #(-&gt;OppathSeg :seg-attr %1) !seg))\n                 %segobj  (m/pred #(not= (first %1) \\@) (m/app #(-&gt;OppathSeg :seg-chld %1) !seg))]\n                [(m/re #\"obj|oppas|dc\" ?ns)\n                 . (m/or %segobj %segattr) ...])\n        {:ns (keyword ?ns) :xsegs !seg}))        \n</code></pre> </li> <li> <p>Cleaner Solution Use a helper to construct the xseg:</p> Clojure<pre><code>(defn make-xseg [val]\n  (m/rewrite val\n    (m/re #\"@.*\" ?val)\n    {:kind :seg-attr :val ?val}\n\n    (m/re #\"[^@].*\" ?val)\n    {:kind :seg-chld :val ?val}\n\n    ?val\n    {:kind :unknown :val ?val}))\n\n\n(m/rewrite [\"oppas\" \"obj1\" \"@attr1\" \"@attr2\" \"obj2\"]\n  [(m/re #\"obj|oppas|dc\" ?ns) . !segs ...]\n  {:ns (m/keyword ?ns)\n   :xsegs [(m/app make-xseg !segs) ...]})\n;; =&gt;\n{:ns :oppas,\n :xsegs\n [{:kind :seg-chld, :val \"obj1\"}\n  {:kind :seg-attr, :val \"@attr1\"}\n  {:kind :seg-attr, :val \"@attr2\"}\n  {:kind :seg-chld, :val \"obj2\"}]}\n</code></pre> </li> <li> <p>Concise Using Recursion: The second uses <code>m/cata</code> on the left or right side:</p> <ul> <li>Left side</li> </ul> Clojure<pre><code>(m/rewrite [\"oppas\" \"obj1\" \"@attr1\" \"@attr2\" \"obj2\"]\n  [(m/re #\"obj|oppas|dc\" ?ns) . (m/cata !segs) ...]\n  {:ns (m/keyword ?ns)\n   :xsegs [!segs ...]}\n\n  (m/re #\"@.*\" ?val)\n  {:kind :seg-attr :val ?val}\n\n  (m/re #\"[^@].*\" ?val)\n  {:kind :seg-chld :val ?val}\n\n  ?val\n  {:kind :unknown :val ?val})\n</code></pre> <ul> <li>Right side</li> </ul> Clojure<pre><code>(m/rewrite [\"oppas\" \"obj1\" \"@attr1\" \"@attr2\" \"obj2\"]\n  [(m/re #\"obj|oppas|dc\" ?ns) . !segs ...]\n  {:ns (m/keyword ?ns)\n   :xsegs [(m/cata !segs) ...]}\n\n  (m/re #\"@.*\" ?val)\n  {:kind :seg-attr :val ?val}\n\n  (m/re #\"[^@].*\" ?val)\n  {:kind :seg-chld :val ?val}\n\n  ?val\n  {:kind :unknown :val ?val})\n</code></pre> </li> <li> <p>Final Solution: Cata on the right side can be used to construct a value to be recursively rewritten. It\u2019s the dual of the left.</p> Clojure<pre><code>(m/rewrite [\"oppas\" \"obj1\" \"@attr1\" \"@attr2\" \"obj2\"]\n  [(m/re #\"obj|oppas|dc\" ?ns) . !segs ...]\n  {:ns (m/keyword ?ns)\n   :xsegs [(m/cata ($EXAMPLE !segs)) ...]}\n\n  ($EXAMPLE (m/re #\"@.*\" ?val))\n  {:kind :seg-attr :val ?val}\n\n  ($EXAMPLE (m/re #\"[^@].*\" ?val))\n\n  {:kind :seg-chld :val ?val}\n\n  ($EXAMPLE ?val)\n  {:kind :unknown :val ?val})\n;; =&gt;\n{:ns :oppas,\n :xsegs\n [{:kind :seg-chld, :val \"obj1\"}\n  {:kind :seg-attr, :val \"@attr1\"}\n  {:kind :seg-attr, :val \"@attr2\"}\n  {:kind :seg-chld, :val \"obj2\"}]}\n</code></pre> </li> </ul>"},{"location":"dev-notes/clojure/clj-meander/#split-stream-based-on-filter-and-project-1-to-many","title":"Split stream based on filter and project   (1-to-many)","text":"<ul> <li>Pseudo code:</li> </ul> Clojure<pre><code>filter(\n  (predA? x) =&gt; (projA x) :as !projAseq\n  (predB? x) =&gt; (projB x) :as !projBseq\n)\n</code></pre> <ul> <li>Clojure Code</li> </ul> Clojure<pre><code>;; Test Data\n(def arglist [{:name :inBoneTrk    :argFlags #{:EArg-In}}\n              {:name :inoutBoneTrk :argFlags #{:EArg-In :EArg-Out}}\n              {:name :outBoneTrk   :argFlags #{:EArg-Out}}])\n;; Using match\n(m/match\n arglist\n  [(m/or {:argFlags #{:EArg-Out} :as !argOut}\n         {:argFlags #{:EArg-In} :as !argIn})\n   ...]\n  {:opmirArgIn !argIn\n   :opmirArgOut !argOut})\n;; =&gt;\n{:opmirArgIn  [{:name     :inBoneTrk\n                :argFlags #{:EArg-In}}]\n :opmirArgOut [{:name     :inoutBoneTrk\n                :argFlags #{:EArg-Out :EArg-In}} \n               {:name     :outBoneTrk\n                :argFlags #{:EArg-Out}}]}\n</code></pre> <ul> <li>Now let's use m/search to see the difference</li> </ul> Clojure<pre><code>(m/search\n arglist\n [(m/or {:argFlags #{:EArg-Out} :as !argOut}\n        {:argFlags #{:EArg-In} :as !argIn})\n  ...]\n {:opmirArgIn !argIn\n  :opmirArgOut !argOut})\n;; =&gt;\n({:opmirArgIn [{:name :inBoneTrk, :argFlags #{:EArg-In}}]\n  :opmirArgOut [{:name :inoutBoneTrk, :argFlags #{:EArg-Out :EArg-In}} \n                {:name :outBoneTrk, :argFlags #{:EArg-Out}}]}\n {:opmirArgIn [{:name :inBoneTrk, :argFlags #{:EArg-In}} \n               {:name :inoutBoneTrk, :argFlags #{:EArg-Out :EArg-In}}]\n  :opmirArgOut [{:name :outBoneTrk, :argFlags #{:EArg-Out}}]})\n</code></pre> <ul> <li>Now let's look using m/scan</li> </ul> Clojure<pre><code>(m/search\n arglist\n (m/scan {:argFlags #{:EArg-In} :as ?argIn})\n ?argIn)\n;; =&gt;\n({:name     :inBoneTrk\n  :argFlags #{:EArg-In}} \n {:name     :inoutBoneTrk\n  :argFlags #{:EArg-Out :EArg-In}})\n</code></pre> <ul> <li>Now let's look at m/scan with a memory variable</li> </ul> Clojure<pre><code>(m/search\n arglist\n (m/scan {:argFlags #{:EArg-In} :as !argIn})\n !argIn)\n;; =&gt;\n([{:name     :inBoneTrk\n   :argFlags #{:EArg-In}}]\n [{:name     :inoutBoneTrk\n   :argFlags #{:EArg-Out :EArg-In}}])\n</code></pre>"},{"location":"dev-notes/clojure/clj-meander/#todo","title":"TODO","text":"<ul> <li>How to do EBNF like production rules.  Ex:  Clojure<pre><code>token ::= (:arg-in|:arg-out) ?argname\npseudocode-result:: (str (emit-in ?arg-attr)|emit-out :arg-attr) ?argname)    \n</code></pre></li> </ul>"},{"location":"dev-notes/clojure/clj-overview/","title":"Clojure","text":""},{"location":"dev-notes/clojure/clj-overview/#learning-resources","title":"Learning Resources","text":"<ul> <li>Crash course: https://dev.to/adasomg/10-life-changing-minutes-with-clojure-windows-3ofl</li> <li>Syntax in 15 mins: https://github.com/shaunlebron/ClojureScript-Syntax-in-15-minutes</li> <li>Brave Clojure: https://www.braveclojure.com/do-things/</li> <li>S-expressions http://www.buildyourownlisp.com/chapter9_s_expressions</li> <li>Clojure for DSL: https://purelyfunctional.tv/courses/domain-specific-languages-in-clojure/</li> <li>Rich Hickey talks: https://github.com/matthiasn/talk-transcripts</li> <li>Get going fast</li> <li>https://medium.com/@daniel.oliver.king/a-clojure-development-environment-that-gets-out-of-your-way-c11e6711ead3</li> <li>https://medium.com/@daniel.oliver.king/getting-work-done-in-clojure-the-building-blocks-39ad82796926</li> <li>https://medium.com/@daniel.oliver.king/getting-real-work-done-in-clojure-application-development-683c8129a313</li> </ul>"},{"location":"dev-notes/clojure/clj-overview/#calva-bindings","title":"Calva Bindings","text":"<p>(C=ctrl,A=Alt)</p> <ul> <li>C-A-c entr =&gt; loading current file &amp; dependencies</li> <li>C-A-c v =&gt; eval current form inline</li> <li>C-A-c spc =&gt; eval current top level form</li> <li>C-w =&gt; grow selection</li> <li>Aldd C-A modifier to second chord to send to repl. Ex: C-A-c C-A-v</li> </ul>"},{"location":"dev-notes/clojure/clj-overview/#environment","title":"Environment","text":"<ul> <li>VSCode extension: https://calva.io/</li> <li>Summary of vscode for clojure: https://www.admiralbumblebee.com/programming/2020/01/04/Six-months-VS-Code.html</li> <li>Runtimes:</li> <li>ClojureCLR: https://github.com/clojure/clojure-clr/tree/newframework</li> <li>ClojureCLR fork for Unity: https://github.com/arcadia-unity/clojure-clr</li> <li>Magic Compiler: https://github.com/nasser/magic</li> <li>ClojureCLR nREPL: https://github.com/arcadia-unity/Arcadia/blob/master/Editor/NRepl.cs</li> </ul>"},{"location":"dev-notes/clojure/clj-overview/#general-notes","title":"General Notes","text":"<ul> <li>vectors,maps are functions</li> </ul> Clojure<pre><code>() [] {} #{} ;lists,vector,maps,sets\n=&gt; (def v [\"a\" \"vector\"]) ;; square brackets denote vectors\n=&gt; (v 0) ;; a function just like \"nth\". Interesting.\n\"a\"\n\n;; keyword is a first-class value type in clojure\n=&gt; (def m {:key \"value\", :another-key \"almost like js right?\"})\n=&gt; (type :key)\nclojure.lang.Keyword\n</code></pre> <ul> <li> <p>symbols (== identifiers) are values i.e. take up memory</p> </li> <li> <p><code>'author</code> =&gt; get at symbol</p> </li> <li> <p>vars (== symbol to value bindings) are also values</p> </li> <li> <p><code>#'author</code> =&gt; get at var </p> <ul> <li><code>binding</code> expr for rebind value temporarily inside this scope</li> <li>must mark with <code>^:dynamic</code> meta data</li> <li>convention is to name var with <code>**</code> Clojure<pre><code>(def ^:dynamic *debug-enabled* false)\n(defn debug [msg]\n  (if *debug-enabled*\n    (println msg)))\n(binding [*debug-enabled* true]\n    (debug \"Calling that darned function\")\n    (some-troublesome-function-that-needs-logging)\n    (debug \"Back from that darned function\"))\n</code></pre></li> </ul> </li> </ul>"},{"location":"dev-notes/clojure/clj-overview/#debugging","title":"Debugging","text":"<ul> <li><code>(pst)</code> -&gt; print callstack</li> </ul>"},{"location":"dev-notes/clojure/clj-overview/#dslcompiler","title":"DSL/Compiler","text":""},{"location":"dev-notes/clojure/clj-overview/#dslcompiler_1","title":"DSL/Compiler","text":"<ul> <li> <p>reader: parser that should use treesitter for</p> </li> <li> <p>clojure.tools.analyzer: generates AST from clojure syntax. syntax form -&gt; node hashmap</p> </li> <li> <p>ferret</p> </li> <li> <p>Tools/libs</p> </li> <li> <p>clojure.tools.analyzer: https://github.com/clojure/tools.analyzer</p> </li> <li>https://github.com/stuartsierra/dependency</li> <li>Terra (Lua metaprogramming layer over C ): http://terralang.org/</li> <li>Gamma  (clj &gt; glsl compiler): https://github.com/kovasb/gamma</li> <li>https://github.com/thi-ng/shadergraph</li> <li>tree shaping<ul> <li>Instaparse: https://github.com/Engelberg/instaparse</li> <li>https://lambdaisland.com/blog/2018-11-26-art-tree-shaping-clojure-zip</li> <li>https://clojuredocs.org/clojure.core/tree-seq</li> <li>https://github.com/clojure/core.match</li> <li>clojure enlive</li> </ul> </li> <li>treesitter implementations: <ul> <li>https://github.com/sogaiu/tree-sitter-clojure</li> <li>https://www.reddit.com/r/Clojure/comments/fkc6uv/is_anyone_working_on_a_treesitter_parser_for/fksmf67?utm_source=share&amp;utm_medium=web2x</li> <li>https://github.com/oakmac/tree-sitter-clojure</li> </ul> </li> </ul>"},{"location":"dev-notes/clojure/clj-overview/#meander","title":"Meander","text":""},{"location":"dev-notes/clojure/clj-overview/#meander_1","title":"Meander","text":""},{"location":"dev-notes/clojure/clj-overview/#common-patterns","title":"Common Patterns","text":""},{"location":"dev-notes/clojure/clj-overview/#capture-variable-from-pattern-match","title":"Capture Variable From Pattern Match","text":"<ul> <li>How to capture a variable from a pattern match? Use <code>:as</code> Clojure<pre><code>(def a_opprmdefblk [(ophirPrmDef :inBoneTrk ctidChannel #{:EArg-In})\n                    (ophirPrmDef :inoutBoneTrk ctidChannel #{:EArg-In :EArg-Out})\n                    (ophirPrmDef :outBoneTrk ctidChannel #{:EArg-Out})])\n(m/search\n a_opprmdefblk\n [(m/or {:argFlags #{:EArg-Out} :as !argOut}\n        {:argFlags #{:EArg-In} :as !argIn})\n  ...]\n {:opmirArgIn !argIn\n  :opmirArgOut !argOut})\n</code></pre></li> </ul>"},{"location":"dev-notes/clojure/clj-overview/#sequence-transformation","title":"Sequence Transformation","text":"<ul> <li>Desired Result</li> </ul> Clojure<pre><code>;EBNF\nns &lt;= \"obj\" | \"oppas\" | \"dc\"\nsegattr &lt;= [\"/\"] \"@\" alphanumeric\nsegobj  &lt;= [\"/\"] alphanumeric\nxpath   &lt;= ns (segattr|segobj) {(segattr|segobj)}\n\n; Input\n\"obj:/myobj/mychild/@myattrib\"\n;; Result =&gt;\n{:ns :obj,\n:xsegs\n({:segkind :seg-chld, :segpath \"\"}\n  {:segkind :seg-chld, :segpath \"myobj\"}\n  {:segkind :seg-chld, :segpath \"mychild\"}\n  {:segkind :seg-attr, :segpath \"@myattrib\"})}\n</code></pre> <ul> <li> <p>What this shows:</p> </li> <li> <p>Input: a tokenized string</p> </li> <li>Make sure tokens match order pattern (<code>nstoken xseg {xseg}</code> )</li> <li> <p>Transform each of the tokens based on the token Clojure<pre><code>nstoken =&gt;\n  case \"obj\": :objstore\n  default: (keyword nstoken)\n</code></pre></p> </li> <li> <p>Normal Clojure</p> </li> </ul> Clojure<pre><code>(defn initOppath-clj [axpath]\n    (let [nsandpath (str/split axpath #\"[:]\" 2)\n          nsstr (first nsandpath)\n          pathtokens (-&gt;\n                      nsandpath\n                      (nth 1)\n                      (str/split #\"[/]\"))]\n      {:ns (case nsstr\n             \"op\"    :op\n             \"obj\"   :obj\n             \"oppas\" :oppas)\n       :xsegs (map\n               #(if (= (first %1) \\@)\n                  (-&gt;OppathSeg :seg-attr %1)\n                  (-&gt;OppathSeg :seg-chld %1))\n               pathtokens)}))\n</code></pre> <ul> <li> <p>Meander</p> </li> <li> <p>Naive attempt: </p> Clojure<pre><code>(defn initOppath-m1 [axpath]\n  (let [axptokens (str/split axpath #\"[/:]\")]\n    {:ns (m/match (first axptokens)\n           (m/and ?ns (m/or \"op\" \"obj\" \"oppas\"))\n           (keyword ?ns))\n     :xsegs (map\n             #(if (= (first %1) \\@)\n                (-&gt;OppathSeg :seg-attr %1)\n                (-&gt;OppathSeg :seg-chld %1))\n             (rest axptokens))}))\n</code></pre> </li> <li> <p>Second Attempt: Better but a nitpick is the functional transformation is on the pattern matching clause where conceptually feels like it should go in the generation part</p> Clojure<pre><code>(defn initOppath-m2 [axpath]\n      (m/match (str/split axpath #\"[/:]\")\n        (m/with [%segattr (m/pred #(= (first %1) \\@)    (m/app #(-&gt;OppathSeg :seg-attr %1) !seg))\n                 %segobj  (m/pred #(not= (first %1) \\@) (m/app #(-&gt;OppathSeg :seg-chld %1) !seg))]\n                [(m/re #\"obj|oppas|dc\" ?ns)\n                 . (m/or %segobj %segattr) ...])\n        {:ns (keyword ?ns) :xsegs !seg}))        \n</code></pre> </li> <li> <p>Cleaner Solution Use a helper to construct the xseg:</p> Clojure<pre><code>(defn make-xseg [val]\n  (m/rewrite val\n    (m/re #\"@.*\" ?val)\n    {:kind :seg-attr :val ?val}\n\n    (m/re #\"[^@].*\" ?val)\n    {:kind :seg-chld :val ?val}\n\n    ?val\n    {:kind :unknown :val ?val}))\n\n\n(m/rewrite [\"oppas\" \"obj1\" \"@attr1\" \"@attr2\" \"obj2\"]\n  [(m/re #\"obj|oppas|dc\" ?ns) . !segs ...]\n  {:ns (m/keyword ?ns)\n   :xsegs [(m/app make-xseg !segs) ...]})\n;; =&gt;\n{:ns :oppas,\n :xsegs\n [{:kind :seg-chld, :val \"obj1\"}\n  {:kind :seg-attr, :val \"@attr1\"}\n  {:kind :seg-attr, :val \"@attr2\"}\n  {:kind :seg-chld, :val \"obj2\"}]}\n</code></pre> </li> <li> <p>Concise Using Recursion: The second uses <code>m/cata</code> on the left or right side:</p> <ul> <li>Left side</li> </ul> Clojure<pre><code>(m/rewrite [\"oppas\" \"obj1\" \"@attr1\" \"@attr2\" \"obj2\"]\n  [(m/re #\"obj|oppas|dc\" ?ns) . (m/cata !segs) ...]\n  {:ns (m/keyword ?ns)\n   :xsegs [!segs ...]}\n\n  (m/re #\"@.*\" ?val)\n  {:kind :seg-attr :val ?val}\n\n  (m/re #\"[^@].*\" ?val)\n  {:kind :seg-chld :val ?val}\n\n  ?val\n  {:kind :unknown :val ?val})\n</code></pre> <ul> <li>Right side</li> </ul> Clojure<pre><code>(m/rewrite [\"oppas\" \"obj1\" \"@attr1\" \"@attr2\" \"obj2\"]\n  [(m/re #\"obj|oppas|dc\" ?ns) . !segs ...]\n  {:ns (m/keyword ?ns)\n   :xsegs [(m/cata !segs) ...]}\n\n  (m/re #\"@.*\" ?val)\n  {:kind :seg-attr :val ?val}\n\n  (m/re #\"[^@].*\" ?val)\n  {:kind :seg-chld :val ?val}\n\n  ?val\n  {:kind :unknown :val ?val})\n</code></pre> </li> <li> <p>Final Solution: Cata on the right side can be used to construct a value to be recursively rewritten. It\u2019s the dual of the left.</p> Clojure<pre><code>(m/rewrite [\"oppas\" \"obj1\" \"@attr1\" \"@attr2\" \"obj2\"]\n  [(m/re #\"obj|oppas|dc\" ?ns) . !segs ...]\n  {:ns (m/keyword ?ns)\n   :xsegs [(m/cata ($EXAMPLE !segs)) ...]}\n\n  ($EXAMPLE (m/re #\"@.*\" ?val))\n  {:kind :seg-attr :val ?val}\n\n  ($EXAMPLE (m/re #\"[^@].*\" ?val))\n\n  {:kind :seg-chld :val ?val}\n\n  ($EXAMPLE ?val)\n  {:kind :unknown :val ?val})\n;; =&gt;\n{:ns :oppas,\n :xsegs\n [{:kind :seg-chld, :val \"obj1\"}\n  {:kind :seg-attr, :val \"@attr1\"}\n  {:kind :seg-attr, :val \"@attr2\"}\n  {:kind :seg-chld, :val \"obj2\"}]}\n</code></pre> </li> </ul>"},{"location":"dev-notes/clojure/clj-overview/#split-stream-based-on-filter-and-project-1-to-many","title":"Split stream based on filter and project   (1-to-many)","text":"<ul> <li>Pseudo code:</li> </ul> Clojure<pre><code>filter(\n  (predA? x) =&gt; (projA x) :as !projAseq\n  (predB? x) =&gt; (projB x) :as !projBseq\n)\n</code></pre> <ul> <li>Clojure Code</li> </ul> Clojure<pre><code>;; Test Data\n(def arglist [{:name :inBoneTrk    :argFlags #{:EArg-In}}\n              {:name :inoutBoneTrk :argFlags #{:EArg-In :EArg-Out}}\n              {:name :outBoneTrk   :argFlags #{:EArg-Out}}])\n;; Using match\n(m/match\n arglist\n  [(m/or {:argFlags #{:EArg-Out} :as !argOut}\n         {:argFlags #{:EArg-In} :as !argIn})\n   ...]\n  {:opmirArgIn !argIn\n   :opmirArgOut !argOut})\n;; =&gt;\n{:opmirArgIn  [{:name     :inBoneTrk\n                :argFlags #{:EArg-In}}]\n :opmirArgOut [{:name     :inoutBoneTrk\n                :argFlags #{:EArg-Out :EArg-In}} \n               {:name     :outBoneTrk\n                :argFlags #{:EArg-Out}}]}\n</code></pre> <ul> <li>Now let's use m/search to see the difference</li> </ul> Clojure<pre><code>(m/search\n arglist\n [(m/or {:argFlags #{:EArg-Out} :as !argOut}\n        {:argFlags #{:EArg-In} :as !argIn})\n  ...]\n {:opmirArgIn !argIn\n  :opmirArgOut !argOut})\n;; =&gt;\n({:opmirArgIn [{:name :inBoneTrk, :argFlags #{:EArg-In}}]\n  :opmirArgOut [{:name :inoutBoneTrk, :argFlags #{:EArg-Out :EArg-In}} \n                {:name :outBoneTrk, :argFlags #{:EArg-Out}}]}\n {:opmirArgIn [{:name :inBoneTrk, :argFlags #{:EArg-In}} \n               {:name :inoutBoneTrk, :argFlags #{:EArg-Out :EArg-In}}]\n  :opmirArgOut [{:name :outBoneTrk, :argFlags #{:EArg-Out}}]})\n</code></pre> <ul> <li>Now let's look using m/scan</li> </ul> Clojure<pre><code>(m/search\n arglist\n (m/scan {:argFlags #{:EArg-In} :as ?argIn})\n ?argIn)\n;; =&gt;\n({:name     :inBoneTrk\n  :argFlags #{:EArg-In}} \n {:name     :inoutBoneTrk\n  :argFlags #{:EArg-Out :EArg-In}})\n</code></pre> <ul> <li>Now let's look at m/scan with a memory variable</li> </ul> Clojure<pre><code>(m/search\n arglist\n (m/scan {:argFlags #{:EArg-In} :as !argIn})\n !argIn)\n;; =&gt;\n([{:name     :inBoneTrk\n   :argFlags #{:EArg-In}}]\n [{:name     :inoutBoneTrk\n   :argFlags #{:EArg-Out :EArg-In}}])\n</code></pre>"},{"location":"dev-notes/clojure/clj-overview/#todo","title":"TODO","text":"<ul> <li>How to do EBNF like production rules.  Ex:  Clojure<pre><code>token ::= (:arg-in|:arg-out) ?argname\npseudocode-result:: (str (emit-in ?arg-attr)|emit-out :arg-attr) ?argname)    \n</code></pre></li> </ul>"},{"location":"dev-notes/clojure/dsl-compilers/","title":"Dsl compilers","text":""},{"location":"dev-notes/clojure/dsl-compilers/#dslcompiler","title":"DSL/Compiler","text":"<ul> <li> <p>reader: parser that should use treesitter for</p> </li> <li> <p>clojure.tools.analyzer: generates AST from clojure syntax. syntax form -&gt; node hashmap</p> </li> <li> <p>ferret</p> </li> <li> <p>Tools/libs</p> </li> <li> <p>clojure.tools.analyzer: https://github.com/clojure/tools.analyzer</p> </li> <li>https://github.com/stuartsierra/dependency</li> <li>Terra (Lua metaprogramming layer over C ): http://terralang.org/</li> <li>Gamma  (clj &gt; glsl compiler): https://github.com/kovasb/gamma</li> <li>https://github.com/thi-ng/shadergraph</li> <li>tree shaping<ul> <li>Instaparse: https://github.com/Engelberg/instaparse</li> <li>https://lambdaisland.com/blog/2018-11-26-art-tree-shaping-clojure-zip</li> <li>https://clojuredocs.org/clojure.core/tree-seq</li> <li>https://github.com/clojure/core.match</li> <li>clojure enlive</li> </ul> </li> <li>treesitter implementations: <ul> <li>https://github.com/sogaiu/tree-sitter-clojure</li> <li>https://www.reddit.com/r/Clojure/comments/fkc6uv/is_anyone_working_on_a_treesitter_parser_for/fksmf67?utm_source=share&amp;utm_medium=web2x</li> <li>https://github.com/oakmac/tree-sitter-clojure</li> </ul> </li> </ul>"},{"location":"dev-notes/comp-sci/comp-sci-overview/","title":"Computer Science Theory","text":""},{"location":"dev-notes/comp-sci/comp-sci-overview/#data-structures","title":"Data Structures","text":"<p>Open Data Structures: excellent resource for fast TLDR explanations</p>"},{"location":"dev-notes/comp-sci/databases-overview/","title":"Database Learning Resources","text":"<ul> <li> <p>chidb: a book in the vein of crafting interpreters on databases</p> <p>chidb is a didactic relational database management system (RDBMS) designed for teaching how a RDBMS is built internally, from the data organization in files all the way up to the SQL parser and query optimizer. The design of chidb is based on SQLite, with several simplifying assumptions that make it possible to develop a complete chidb implementation over the course of a quarter or semester. One of the key similarities is that chidb uses a single file to store all its information (database metadata, tables, and indexes). In fact, the chidb file format is a subset of SQLite, meaning that well-formed chidb files will also be well-formed SQLite files (the opposite, though, is not necessarily true).</p> </li> <li> <p>Database Internals: A deep-dive into how distributed data systems work</p> </li> <li>The Design and Implementation of Modern Column-Oriented Database Systems</li> <li>Implement Sqlite clone</li> </ul>"},{"location":"dev-notes/cpp/api-hooking/","title":"API Hooking","text":"<p>http://zfx.info/viewtopic.php?f=4&amp;t=2625</p> <p>http://www.ownedcore.com/forums/world-of-warcraft/world-of-warcraft-bots-programs/wow-memory-editing/299810-c-tutorial-how-become-endscene-hooker.html http://spazzarama.com/2010/03/29/screen-capture-with-direct3d-api-hooks/ http://spazzarama.com/2011/03/14/c-screen-capture-and-overlays-for-direct3d-9-10-and-11-using-api-hooks/</p>"},{"location":"dev-notes/cpp/cpp-libraries-frameworks/","title":"Libraries &amp; Frameworks","text":""},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#core-frameworks","title":"Core Frameworks","text":""},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#kitchensink-frameworks","title":"Kitchensink Frameworks","text":"<ul> <li>https://github.com/facebook/folly</li> <li>https://abseil.io/</li> <li>https://github.com/bkaradzic/bx</li> <li>https://github.com/septag/sx</li> <li>MUtils Useful C++</li> <li>Misc C Headers</li> <li>bitsquid foundation library</li> <li>foundation lib: rpmalloc's author's foundation lib</li> </ul>"},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#allocators","title":"Allocators","text":"<ul> <li>rpmalloc</li> <li>mimalloc</li> </ul>"},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#core-libs","title":"Core Libs","text":"<ul> <li>Filesystem: https://icculus.org/physfs/</li> <li>Immutable Data Structures: https://sinusoid.es/immer/introduction.html</li> <li>Python Binding: https://github.com/pybind/pybind11</li> </ul>"},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#containers","title":"Containers","text":"<ul> <li>EASTL</li> <li>https://github.com/hogliux/semimap</li> <li>https://github.com/serge-sans-paille/frozen</li> <li>https://github.com/lemire/EWAHBoolArray</li> <li>https://github.com/RoaringBitmap/CRoaring</li> </ul>"},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#hashing","title":"Hashing","text":"<ul> <li>Fast hash tables https://abseil.io/about/design/swisstables</li> <li>https://github.com/cmuratori/meow_hash</li> <li>xxHash</li> </ul>"},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#reflection","title":"Reflection","text":"<ul> <li>https://cista.rocks/</li> <li>https://github.com/Manu343726/ctti CTTI Compile Time Type Information</li> <li>https://github.com/apolukhin/magic_get</li> <li>https://github.com/Neargye/nameof</li> <li>https://github.com/onqtam/cmake-reflection-template</li> <li>https://github.com/preshing/FlexibleReflection/tree/part1</li> <li>RTTR</li> <li>https://github.com/TheLartians/StaticTypeInfo Compile time type info</li> <li>Compile-time type info using constexpr</li> <li>Refureku: C++ reflection library based on Kodgen</li> <li>Kodgen: C++ parser &amp; codegen</li> <li>clReflect: C++ Reflection using clang</li> </ul>"},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#c-templates","title":"C++ Templates","text":"<ul> <li>https://github.com/TartanLlama/optional</li> <li>https://github.com/TartanLlama/expected</li> <li>https://github.com/TartanLlama/tl</li> <li>https://github.com/tacticalmelonfarmer/cxl</li> <li>https://github.com/doom/meta</li> <li>https://github.com/boostorg/callable_traits</li> <li>Function type traits: https://github.com/kennytm/utils/blob/master/traits.hpp</li> </ul>"},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#c-utilities","title":"C++ Utilities","text":"<ul> <li>Functional programming: https://github.com/Dobiasd/FunctionalPlus</li> <li>https://github.com/Neargye/magic_enum</li> <li>Global Static  objects: https://github.com/graphitemaster/0xABAD1DEA</li> <li>Asset Lib: https://github.com/gpakosz/PPK_ASSERT</li> <li>Debug Print Expression Macros: ocs.google.com/</li> </ul>"},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#type-erasure","title":"Type erasure","text":"<ul> <li>boost te</li> <li>dyno</li> <li>liberasure</li> <li>Facebook Poly</li> <li>dynamix</li> </ul>"},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#devdebug","title":"Dev/Debug","text":""},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#cpumemory-profilers","title":"CPU/Memory Profilers","text":"<ul> <li>Tracy Profiler</li> <li>https://github.com/milostosic/MTuner</li> <li>https://www.puredevsoftware.com/mempro/Features.htm</li> </ul>"},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#multi-threading","title":"Multi-Threading","text":""},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#taskjob-system","title":"Task/Job System","text":"<ul> <li>Taskflow Task library: https://github.com/taskflow/taskflow</li> </ul>"},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#coroutines","title":"Coroutines","text":"<ul> <li>libaco - A blazing fast and lightweight C asymmetric coroutine library</li> <li>https://github.com/Tencent/libco</li> <li>Stackless coroutine</li> </ul>"},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#serialization","title":"Serialization","text":"<ul> <li>https://cista.rocks/</li> <li>https://uscilab.github.io/cereal/</li> </ul>"},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#json","title":"Json","text":"<ul> <li>JSON5 - JSON for Humans: https://github.com/json5/json5</li> <li>https://github.com/Tencent/rapidjson</li> </ul>"},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#math","title":"Math","text":""},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#general","title":"General","text":"<ul> <li>Math library: https://github.com/nfrechette/rtm</li> <li>cglm - better version of glm</li> <li>Procedural math tricks: https://github.com/zalo/MathUtilities -  grab bag of some of the neat math and physics tricks</li> <li>Curves Library: https://github.com/ethz-asl/curves/tree/master/curves/include/curves</li> <li>Splines/Curves library: https://github.com/andrewwillmott/splines-lib</li> </ul>"},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#geometry","title":"Geometry","text":"<ul> <li>libigl - header only C++ geometry processing library</li> <li>geometry-central - from Keenan Crane/GeometryProcess lab, containing implementations of Keenan's papers</li> </ul>"},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#database","title":"Database","text":"<ul> <li>https://github.com/LMDB/lmdb</li> <li>https://mozilla.github.io/firefox-browser-architecture/text/0015-rkv.html</li> <li>https://dgraph.io/blog/post/badger-lmdb-boltdb/</li> <li>https://github.com/LMDB/sqlightning</li> <li>https://github.com/erthink/libmdbx</li> <li>https://github.com/google/leveldb</li> <li>https://realm.io/</li> <li>dntree - an example implementation that shows how LDAP DNs can be stored in an lmdb database, structured as a hierarchical adjecency list</li> <li>sqlite orm</li> </ul>"},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#computegpu","title":"Compute/GPU","text":"<ul> <li>https://github.com/imageworks/OpenShadingLanguage</li> <li>slang</li> <li>falcor</li> <li>https://github.com/xelatihy/yocto-gl</li> <li>Blitz++ Multi-Dimensional Array Library: https://github.com/blitzpp/blitz</li> <li>https://github.com/mitsuba-renderer/enoki</li> </ul>"},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#data-flowgraph","title":"Data Flow/Graph","text":"<ul> <li>https://github.com/FlexCoreLib/flexcore</li> <li>https://github.com/cross-platform/dspatch</li> </ul>"},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#networking","title":"Networking","text":"<ul> <li>https://github.com/Qihoo360/evpp</li> </ul>"},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#platform","title":"Platform","text":""},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#app-support","title":"App Support","text":"<ul> <li>Update patching, https://wyday.com/</li> <li>Logging: https://github.com/amrayn/easyloggingpp/tree/master</li> <li>Logging https://github.com/gabime/spdlog</li> </ul>"},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#os-support","title":"OS Support","text":"<ul> <li>Windows Implementation Libraries: https://github.com/microsoft/wil</li> <li>Api Hooking: https://github.com/microsoft/Detours</li> </ul>"},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#hot-reload","title":"Hot reload","text":"<ul> <li>Windows PE file parser: https://github.com/serge1/COFFI</li> <li>Blink - function level runtime patching with pdb+COFF reader, linker, etc</li> <li>Run code from object files:</li> <li>http://h3.gd/posts/how-not-to-use-dlls/</li> <li>https://github.com/h3r2tic/relocdll</li> <li>CR - single file header-only live reload solution for C, written in C++</li> </ul>"},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#animation","title":"Animation","text":""},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#libs","title":"Libs","text":"<ul> <li>Ozz Animation Library</li> <li>Animation Compression https://github.com/nfrechette/acl</li> </ul>"},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#skinning","title":"Skinning","text":"<ul> <li>https://github.com/sansumbrella/Choreograph</li> <li>https://github.com/CMU-Perceptual-Computing-Lab/openpose</li> <li>Dem Bones: Skinning Decomposition</li> <li>https://github.com/damian0815/skellington</li> <li>Fast and Efficient Skinning of Animated Meshes</li> <li>Implementation: https://github.com/tneumann/skinning_decomposition_kavan</li> <li>Sparse Localized Deformation Components</li> <li>http://www.drematrix.de/publications/sparse-localized-deformation-components/</li> <li>https://github.com/tneumann/splocs</li> </ul>"},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#compilers","title":"Compilers","text":""},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#parallel-programming","title":"Parallel Programming","text":"<ul> <li>https://github.com/thrust/thrust (also https://developer.nvidia.com/thrust)</li> <li>https://github.com/nlguillemot/CppSPMD</li> <li>SPIRV to ISPC: https://twitter.com/tim_jones/status/1006208754004553728</li> <li>spir-v-to-ispc-convert-gpu-compute-to-the-cpu</li> <li>Taichi Programming Language http://taichi.graphics/</li> </ul>"},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#algebraic-effects","title":"Algebraic Effects","text":"<ul> <li>libhandler: algebraic effects and handlers in portable C99</li> <li>libmprompt: robust multi-prompt delimited control and effect handlers in C/C++</li> </ul>"},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#parsing","title":"Parsing","text":"<ul> <li>https://tree-sitter.github.io/tree-sitter/ - incremental parser</li> <li>https://github.com/orangeduck/mpc - parser combinator</li> <li>http://www.buildyourownlisp.com/contents</li> <li>https://github.com/TheLartians/Parser</li> <li>https://github.com/taocpp/PEGTL</li> <li>https://github.com/yhirose/cpp-peglib</li> <li>https://github.com/codeplea/tinyexpr</li> <li>https://github.com/foonathan/cppast</li> </ul>"},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#gpuhlslcompute-specific","title":"GPU/HLSL/Compute Specific","text":"<ul> <li>https://github.com/Celtoys/ComputeBridge</li> <li>Shader debugger: https://github.com/dfranx/SHADERed</li> <li>Shader Writer &amp; Shader AST https://github.com/DragonJoker/ShaderWriter</li> <li>HLSL Shader Parser/AST:</li> <li>https://github.com/dfranx/hlslparser</li> <li>https://github.com/Nomoresleep/hlslparser</li> <li>https://github.com/Thekla/hlslparser</li> <li>https://github.com/dfranx/glsl-parser</li> </ul>"},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#code-genjitvm","title":"Code Gen/JIT/VM","text":"<ul> <li>TinyC Compiler: https://bellard.org/tcc/</li> <li>Detours: https://github.com/microsoft/Detours</li> <li>DynamoRIO: dynamic binary instrumentation https://dynamorio.org/</li> <li>Reflective DLL Injection: https://github.com/rokups/ReflectiveLdr</li> <li>https://github.com/BitFunnel/NativeJIT</li> <li>Zig: https://andrewkelley.me/post/zig-cc-powerful-drop-in-replacement-gcc-clang.html</li> <li>https://github.com/dfranx/aGen</li> <li>https://github.com/dfranx/BlueVM</li> <li>https://github.com/RuntimeCompiledCPlusPlus/RuntimeCompiledCPlusPlus/wiki/Alternatives</li> <li>AngelScript: https://www.angelcode.com/angelscript/documentation.html</li> <li>JIT</li> <li>http://www.llpe.org/</li> <li>EasyJit<ul> <li>https://github.com/jmmartinez/easy-just-in-time</li> <li>https://blog.quarkslab.com/easyjit-just-in-time-compilation-for-c.html</li> </ul> </li> <li>C/C++ live compilers<ul> <li>https://github.com/anael-seghezzi/ctoy#ctoy</li> <li>https://root.cern.ch/cling</li> <li>https://github.com/onqtam/rcrl</li> <li>https://github.com/procedural/c_interactive</li> </ul> </li> <li>Xbyak: C++ interface for JIT assembler</li> <li>DynAsm: LuaJIT preprocessor and tiny runtime library for creating assemblers and JIT compilers in C or C++</li> </ul>"},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#decompiler","title":"Decompiler","text":"<ul> <li>RetDec</li> <li>COFFI</li> <li>Ghidra</li> <li>Software Reverse Engineering with Ghidra: video tutorial series</li> <li>Introduction to Decompiling C++ with Ghidra: abridged version of above</li> <li>Binary Ninja</li> <li>IDA Pro Decompiler Plugin</li> <li>HexRaysCodeXplorer</li> <li>Radare2</li> <li>Redare2 Book</li> <li>Reko</li> </ul>"},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#debugger","title":"Debugger","text":"<ul> <li>https://github.com/dfranx/ShaderDebugger</li> <li>Backtrace/Stacktrace: https://github.com/ianlancetaylor/libbacktrace</li> </ul>"},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#ui","title":"UI","text":""},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#libs_1","title":"Libs","text":"<ul> <li>https://sinusoid.es/lager/index.html</li> <li>ImGui</li> <li>Manual: https://pthom.github.io/imgui_manual_online/manual/imgui_manual.html</li> <li>Net/Remote ImGui: https://github.com/sammyfreg/netImgui</li> </ul>"},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#editors","title":"Editors","text":"<ul> <li>https://github.com/JSandusky/Blocks</li> <li>https://github.com/farbrausch/fr_public</li> <li>VSCode's Monaco Editor https://microsoft.github.io/monaco-editor/index.html</li> <li>Text Engine https://github.com/xi-editor/xi-editor</li> <li>Light Table: https://github.com/LightTable/LightTable/tree/master</li> <li>https://github.com/mikesart/gpuvis</li> <li>https://github.com/directus/directus</li> </ul>"},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#apps","title":"Apps","text":"<ul> <li>Imogen: https://github.com/CedricGuillemet/Imogen</li> <li>Blocks: https://github.com/JSandusky/Blocks</li> </ul>"},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#widgets","title":"Widgets","text":""},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#general-widgets","title":"General Widgets","text":"<ul> <li>ImGui Useful Widget collection</li> <li>Graphing/Plotting: https://github.com/epezent/implot</li> <li>Imgui widget collection:</li> <li>https://github.com/ocornut/imgui/wiki</li> <li>https://github.com/ocornut/imgui/labels/useful widgets</li> <li>https://github.com/Flix01/imgui/wiki/ImGui-Addons-Branch-Home</li> <li>Progress bar: https://github.com/ocornut/imgui/issues/1901</li> <li>PIE Menu: https://github.com/ocornut/imgui/issues/434</li> <li>Knobs: https://github.com/ocornut/imgui/issues/942</li> <li>Toggle Button: https://github.com/ocornut/imgui/issues/1537</li> <li>Alternating listview: https://github.com/ocornut/imgui/labels/useful widgets</li> <li>Pinned Tooltip: https://github.com/ocornut/imgui/issues/1345</li> <li>Filebrowser: https://github.com/AirGuanZ/imgui-filebrowser</li> </ul>"},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#editor-widgets","title":"Editor Widgets","text":"<ul> <li>https://github.com/nlguillemot/arcball_camera</li> <li>https://github.com/nlguillemot/flythrough_camera</li> <li>https://github.com/glampert/debug-draw</li> <li>Gizmo:</li> <li>ImGuizmo (3d translation/rotation Gizmo) https://github.com/CedricGuillemet/ImGuizmo</li> <li>imGuiZMO.quat (3d translation/rotation Gizmo) https://github.com/BrutPitt/imGuIZMO.quat</li> </ul>"},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#animation-widgets","title":"Animation Widgets","text":"<ul> <li>Bezier/Curve Editors: https://github.com/ocornut/imgui/issues/786</li> <li>Sequencer: https://github.com/CedricGuillemet/ImGuizmo</li> <li>Sequentity: https://github.com/alanjfs/sequentity</li> </ul>"},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#property-editor","title":"Property editor","text":"<ul> <li>Imgui demo file</li> <li>https://gitlab.com/LIONant/properties</li> <li>https://alejandrohitti.com/projects/code-samples/entity-inspection/</li> <li>https://github.com/Csabix/imgui/tree/master/auto</li> </ul>"},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#text-editors","title":"Text Editors","text":"<ul> <li>https://github.com/cmaughan/zep</li> <li>https://github.com/BalazsJako/ImGuiColorTextEdit</li> </ul>"},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#debug-widgets","title":"Debug Widgets","text":"<ul> <li>Plotting widget: https://github.com/soulthreads/imgui-plot</li> <li>FlameGraphs: https://github.com/bwrsandman/imgui-flame-graph</li> <li>Metrics Widgets: https://github.com/GameTechDev/MetricsGui</li> </ul>"},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#styling","title":"Styling","text":"<ul> <li>imgui-spectrum</li> </ul>"},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#misc","title":"Misc","text":"<ul> <li>Excellent collection of useful nuggets/gems: https://github.com/CedricGuillemet/Imogen/projects/1</li> <li>https://github.com/Cmdu76/AwesomeCppGameDev</li> <li>https://awesomecpp.com/</li> <li>http://fffaraz.github.io/awesome-cpp/#debug</li> <li>https://github.com/raizam/gamedev_libraries</li> <li>https://github.com/betsegaw/windowwalker</li> <li>C++ Best Practices &amp; Conventions: https://lefticus.gitbooks.io/cpp-best-practices/content/</li> <li>C++ Project Layout: https://api.csswg.org/bikeshed/?force=1&amp;url=https://raw.githubusercontent.com/vector-of-bool/pitchfork/develop/data/spec.bs</li> </ul>"},{"location":"dev-notes/cpp/cpp-libraries-frameworks/#tipstricksgems","title":"Tips/Tricks/Gems","text":"<ul> <li><code>_ReturnAddress()</code> for debugging: http://www.virtualdub.org/blog/pivot/entry.php?id=181</li> <li>Functional Property Modifiers</li> <li>https://twitter.com/Donzanoid/status/1164274159171584001</li> <li>https://gist.github.com/dwilliamson/8fb72ed4be7b5022b856eb4ff2d05d04</li> </ul>"},{"location":"dev-notes/cpp/crt-init/","title":"CRT Initialization","text":""},{"location":"dev-notes/cpp/crt-init/#default-dll-entry-point-_dllmaincrtstartup","title":"Default DLL entry point _DllMainCRTStartup","text":"<p>In Windows, all DLLs can contain an optional entry-point function, usually called <code>DllMain</code>, that is called for both initialization and termination. This gives you an opportunity to allocate or release additional resources as needed. Windows calls the entry-point function in four situations: process attach, process detach, thread attach, and thread detach. </p> <ul> <li>process attach When a DLL is loaded into a process address space, either when an application that uses it is loaded, or when the application requests the DLL at runtime, the operating system creates a separate copy of the DLL data</li> <li>Thread attach occurs when the process the DLL is loaded in creates a new thread</li> <li>Thread detach occurs when the thread terminates, and process detach is when the DLL is no longer required and is released by an application. </li> </ul> <p>The operating system makes a separate call to the DLL entry point for each of these events, passing a reason argument for each event type. For example, the OS sends <code>DLL_PROCESS_ATTACH</code> as the reason argument to signal process attach. The VCRuntime library provides an entry-point function called <code>_DllMainCRTStartup</code> to handle default initialization and termination operations</p> <p>On process attach, the <code>_DllMainCRTStartup</code> function </p> <ul> <li>sets up buffer security checks</li> <li>initializes the CRT and other libraries</li> <li>initializes run-time type information</li> <li>initializes and calls constructors for static and non-local data</li> <li>initializes thread-local storage, increments an internal static counter for each attach</li> <li>and then calls a user- or library-supplied <code>DllMain</code>    On process detach, the function goes through these steps in reverse. </li> <li>It calls <code>DllMain</code></li> <li>decrements the internal counter</li> <li>calls destructors</li> <li>calls CRT termination functions and registered <code>atexit</code> functions</li> <li>notifies any other libraries of termination   When the attachment counter goes to zero, the function returns <code>FALSE</code> to indicate to Windows that the DLL can be unloaded.    The <code>_DllMainCRTStartup</code> function is also called during thread attach and thread detach. In these cases, the VCRuntime code does no additional initialization or termination on its own, and just calls <code>DllMain</code> to pass the message along   If <code>DllMain</code> returns <code>FALSE</code> from process attach, signaling failure, <code>_DllMainCRTStartup</code> calls <code>DllMain</code> again and passes <code>DLL_PROCESS_DETACH</code> as the reason argument, then goes through the rest of the termination process.</li> </ul>"},{"location":"dev-notes/cpp/crt-init/#reference","title":"Reference","text":"<ul> <li>Detailed how to override MSVC CRT's initialization</li> <li>DllMainCRTStartup</li> <li>https://stackoverflow.com/questions/1583193/what-functions-does-winmaincrtstartup-perform</li> <li>https://stackoverflow.com/questions/22934206/what-is-the-difference-between-main-and-maincrtstartup</li> <li>https://stackoverflow.com/questions/36187320/maincrtstartup-vs-wmaincrtstartup</li> <li>http://zetcode.com/gui/winapi/main/</li> <li>https://internals.rust-lang.org/t/windows-does-rust-need-the-x86-x64-c-runtime-to-be-initalized/11581/7</li> <li>https://docs.microsoft.com/en-us/cpp/build/reference/entry-entry-point-symbol?view=vs-2019</li> <li>https://docs.microsoft.com/en-us/cpp/build/run-time-library-behavior?view=vs-2019</li> <li>http://coderdreambook.blogspot.com/2013/11/md-vs-mt-options-to-use-run-time-library.html</li> <li>MSVC CRT Initialization</li> </ul>"},{"location":"dev-notes/cpp/hot-reload/","title":"Hot-reload","text":"<ul> <li>Link Obj into main: http://h3.gd/posts/how-not-to-use-dlls/</li> <li>DLL reload: https://ourmachinery.com/post/dll-hot-reloading-in-theory-and-practice/</li> <li>More advanced: https://blog.molecular-matters.com/2014/05/10/using-runtime-compiled-c-code-as-a-scripting-language-under-the-hood/</li> <li>PE/COFF/exe file parsing lib: https://github.com/trailofbits/pe-parse</li> <li>Simpler: https://github.com/serge1/COFFI</li> <li>Reference: https://github.com/jnastarot/enma_pe</li> <li>Reference: Position independent dll https://github.com/rokups/ReflectiveLdr</li> </ul>"},{"location":"dev-notes/dev-workflow/cmder/","title":"Cmder Cheatsheet","text":""},{"location":"dev-notes/dev-workflow/cmder/#setup","title":"Setup","text":"<ul> <li>set <code>CMDER</code> environment variables</li> </ul> Batchfile<pre><code>setx CMDER_ROOT         C:/tools/cmdermini\nsetx ConEmuDir          C:/tools/cmdermini/vendor/conemu-maximus5\nsetx CMDER_USER_CONFIG  \"%USERPROFILE%/cmder_config\"\n</code></pre> <ul> <li><code>user_profile.cmd</code>: add utf8 support</li> </ul> Batchfile<pre><code>chcp 65001 \n</code></pre> <ul> <li>check unicode</li> </ul> Batchfile<pre><code>ConEmuC -CheckUnicode\ncmd /c %ConEmuDir%/ConEmu/Addons/utf-8-test.cmd\n</code></pre> <ul> <li><code>git status</code> is abysmal on windows; disable the cmder from using it by adding to git config</li> </ul> INI<pre><code>[cmder]\nstatus    = false  # Opt out of Git status for 'ALL' Cmder supported shells.\ncmdstatus = false  # Opt out of Git status for 'Cmd.exe' shells.\npsstatus  = false  # Opt out of Git status for 'Powershell.exe and 'Pwsh.exe' shells.\nshstatus  = false  # Opt out of Git status for 'bash.exe' shells.\n</code></pre>"},{"location":"dev-notes/dev-workflow/cmder/#vscode","title":"VSCode","text":"<ul> <li><code>vscode_init_args.cmd</code>: user profile script to configure vscode terminal</li> <li>called by <code>cmdermini\\vendor\\bin\\vscode_init.cmd</code> which looks in <code>%cmder_user_bin%\\vscode_init_args.cmd</code> or <code>%CMDER_ROOT%\\bin\\vscode_init_args.cmd</code></li> </ul>"},{"location":"dev-notes/dev-workflow/git-commands/","title":"Git Commands","text":""},{"location":"dev-notes/dev-workflow/git-commands/#git-config","title":"Git Config","text":"<ul> <li>Git Config Best Practice</li> <li> <p>Show Options Bash<pre><code>git config --list --show-origin # all variables with origin i.e. file, standard input, blob, command line\ngit config --list --show-scope  # all variables with scope i.e. worktree, local, global, system, command\ngit config --list --system      # system-wide variables i.e. from git installation folder\ngit config --list --global      # global variables i.e. from ~/.gitconfig\ngit config --list --local       # repository variables i.e. from .git/config\n</code></pre></p> </li> <li> <p>Diff tool config INI<pre><code># Submodule settings\n[alias]\n  ssync = git submodule sync --recursive &amp;&amp; git submodule update --init --recursive\n  spull = !git pull &amp;&amp; git submodule sync --recursive &amp;&amp; git submodule update --init --recursive\n  spush = push --recurse-submodules=on-demand\n[diff]\n  submodule = log # clearer container diffs when referenced submodule commits changed\n[status]\n  submoduleSummary = true # git status is useful again when a referenced submodule commit changed\n\n# Diff tool settings\n[difftool \"araxis\"]\n  path = 'C:/Program Files/Araxis/Araxis Merge/compare.exe'\n[mergetool \"araxis\"]\n  path = 'C:/Program Files/Araxis/Araxis Merge/Compare.exe'\n  cmd  = \\C:/Program Files/Araxis/Araxis Merge/Compare.exe\\ '$REMOTE' '$BASE' '$LOCAL' '$MERGED'\n[difftool \"beyondcompare\"]\n  path = 'C:/Program Files/Beyond Compare 4/bcomp.exe'\n  cmd  = 'C:/Program Files/Beyond Compare 4/bcomp.exe' '$LOCAL' '$REMOTE'\n[mergetool \"beyondcompare\"]\n  path = 'C:/Program Files/Beyond Compare 4/bcomp.exe'\n  cmd  = 'C:/Program Files/Beyond Compare 4/bcomp.exe' '$LOCAL' '$REMOTE' '$BASE' '$MERGED'\n</code></pre></p> </li> </ul>"},{"location":"dev-notes/dev-workflow/git-commands/#git-fetchclone","title":"Git Fetch/Clone","text":"<ul> <li>Clone with specific line-endings</li> </ul> Bash<pre><code>git clone --config core.autocrlf=false https://github.com/batiati/mustache-zig\n</code></pre> <ul> <li>Re-normalize line-endings</li> </ul> Bash<pre><code>git add --renormalize .\ngit status\ngit commit -m \"Introduce end-of-line normalization\"\n</code></pre> <ul> <li>Shallow clone (Reference)</li> </ul> Bash<pre><code>git clone url --single-branch\n# shallow clone only the remote primary\ngit clone url --single-branch\n# shallow clone up to depth\ngit clone url --depth 1 #implies --single-branch\n# shallow clone up to date\ngit fetch --prune origin --verbose --shallow-since=2022-02-26\n</code></pre> <ul> <li>Unshallow</li> </ul> Bash<pre><code># unshallow the current branch\ngit fetch --unshallow\n\n# unshallow all the branches\ngit config remote.origin.fetch +refs/heads/*:refs/remotes/origin/*\ngit fetch --unshallow\n</code></pre>"},{"location":"dev-notes/dev-workflow/git-commands/#git-submodule","title":"Git Submodule","text":"<ul> <li>initialize repo with submodule</li> </ul> Bash<pre><code># init repo with submodules\ngit submodule update --init --recursive\n\n# sync repo with submodules\ngit submodule sync --recursive &amp;&amp; git submodule update --init --recursive\n\n# shallow clone with submodules up to depth\ngit clone --depth 1 [repo_url]\ngit submodule init\ngit submodule update --depth 1\n</code></pre> <ul> <li>add new submodule</li> </ul> Bash<pre><code># add new submodule with tracking branch\ngit submodule add -b [branch_name] [repo_url] [path/to/submod]\ngit submodule update --remote\n\n# add shallow submodule\ngit submodule add --depth 1 [repo_url] [path/to/submod]\ngit config -f .gitmodules submodule.[path/to/submod].shallow true\ngit config -f .gitmodules submodule.[path/to/submod].branch [branch_name]\n</code></pre> <ul> <li>modify existing submodule</li> </ul> Bash<pre><code># change existing submodule tracking branch\ngit submodule set-branch -b [branch_name] -- [path/to/submod]\n\n# move submodule\ngit mv [old/path/to/submod] [new/path/to/submod]\n</code></pre> <ul> <li>remove submodule</li> </ul> Bash<pre><code>git rm [path/to/submod] &amp;&amp; git commit\n</code></pre> <ul> <li> <p>[!info] can be undone with <code>git revert</code> submodule's .git directory (e.g. <code>.git/modules/[path/to/submod]</code>) is not removed to make possible past commit checkout without requiring fetching from another repository (Reference)</p> </li> <li> <p>remove submodules completely</p> </li> </ul> Bash<pre><code>git submodule deinit -f [path/to/submod] # remove the submodule entry from .git/config\nrm -rf .git/modules/[path/to/submod]     # remove the submodule directory from the superproject's .git/modules directory\ngit rm -f [path/to/submod]               # remove the entry in .gitmodules and submodule directory located at [path/to/submod]\n</code></pre>"},{"location":"dev-notes/dev-workflow/git-commands/#git-diffing","title":"Git Diffing","text":"<ul> <li>Diff working tree</li> </ul> Bash<pre><code># Diff working tree vs commit; Use '--' for working tree e.g.\ngit difftool --dir-diff HEAD --\n\n# Diff across branches\ngit difftool 4.17..bebylon -- /d/UnrealEngine/Engine/Source/Runtime/Renderer/Private/BasePassRendering.cpp\ngit difftool --dir-diff release ~HEAD\n\n# Diff folders between history or two different commits\ngit difftool --dir-diff 27990a4451cf9458b280c9be027af41898721791~1 27990a4451cf9458b280c9be027af41898721791\n</code></pre> <ul> <li>Diff staged changes</li> </ul> Bash<pre><code># Diff staged changes vs working directory\ngit difftool --dir-diff\n# Diff staged changes vs HEAD\ngit difftool --dir-diff --staged\n</code></pre>"},{"location":"dev-notes/dev-workflow/git-commands/#git-commit-history-manipulation","title":"Git Commit History Manipulation","text":"<ul> <li>Undo last commit (Reference)</li> </ul> Bash<pre><code>git reset --soft 'HEAD^'\n</code></pre> <ul> <li>Force clean local repository (including deleting unchecked in files) (Reference)</li> </ul> Bash<pre><code>git clean -d -x -f\n</code></pre> <ul> <li>Create patch containing all commits in current but not in the master branch (Reference)</li> </ul> Bash<pre><code>git format-patch origin/master --stdout &gt; mypatch.patch\n</code></pre> <ul> <li>GitExtensions: filter a set of branches</li> </ul> Bash<pre><code>Bebylon* --remotes=upstream/release* --remotes=upstream/dev*\n</code></pre> <ul> <li>Merge with force accept theirs (Reference)</li> </ul> Bash<pre><code>git checkout branch_new\ngit merge -s ours branch_old\ngit checkout branch_old\ngit merge branch_new\n</code></pre> <ul> <li> <p>Remove a folder/file from history</p> </li> <li> <p>Reference:</p> <ul> <li>http://stackoverflow.com/questions/10067848/remove-folder-and-its-contents-from-git-githubs-history</li> <li>https://confluence.atlassian.com/display/BITBUCKET/Maintaining+a+Git+Repository</li> <li>https://help.github.com/articles/remove-sensitive-data</li> </ul> </li> <li>Undo/redo a commit (Reference)</li> </ul> Bash<pre><code># You want to nuke commit C and never see it again\ngit reset --hard HEAD~1\n# Undo your commit but leave your files and your index [(Reference)](http://www.gitguys.com/topics/whats-the-deal-with-the-git-index)\ngit reset --soft HEAD~1\n</code></pre> <ul> <li>Remove all untracked files and directories. (<code>-f</code> is force, <code>-d</code> is remove directories)</li> </ul> Bash<pre><code>git clean -fd\n</code></pre> <ul> <li>Remove ignored files as well (Reference)</li> </ul> Bash<pre><code>git clean -fdx\n</code></pre> <ul> <li>Squash/Merge previous two commits (Reference)</li> </ul> Bash<pre><code>git rebase -i HEAD~2\n# Then select squash for the second commit\n</code></pre> <ul> <li>To move folders into a different folders in git (Reference)</li> </ul> Bash<pre><code>git filter-branch --tree-filter 'mkdir -p /path/to/tmp; mv * /path/to/tmp; mkdir subdir; mv /path/to/tmp/* subdir/' --tag-name-filter cat --prune-empty -- --all\n</code></pre> <ul> <li>Rebase against another branch overriding conflicts with your own branch changes (Reference)</li> </ul> Bash<pre><code># assuming branch-a is our current version\n#   ours:   branch-b\n#   theirs: branch-a\ngit rebase -Xtheirs branch-b\n</code></pre> <p>[!danger] <code>-Xtheirs</code> and <code>-Xours</code> are counterintuitive For rebase: <code>-Xtheirs</code> refers to your local current branch that you want to replay ontop of the master branch. For merge: <code>-Xours</code> refers to the local branch.</p>"},{"location":"dev-notes/dev-workflow/git-commands/#git-p4","title":"Git-P4","text":""},{"location":"dev-notes/dev-workflow/git-commands/#tldr","title":"TLDR","text":"<ul> <li>you need to use python 2.7</li> <li>you can use this to sync from perforce to a git and back (it's brittle)</li> <li>when doing git clone, you have to specify to use client spec <code>git p4 clone //depot/main/BBR/Source . --use-client-spec</code></li> <li>can also exclude paths and have multiple depot paths</li> <li> <p>with different directory structures, you can reformat patch files: https://stackoverflow.com/questions/931882/how-to-apply-a-git-patch-from-one-repository-to-another Bash<pre><code>$ cat patch_file | git am   \\\n        -p1                 \\ # remove 1 leading directory ('static/')\n        --directory='lib/'    # prepend 'lib/'\n</code></pre></p> </li> <li> <p>you can also cherry pick commits directly (git will automatically resolve the different path )</p> </li> <li>remember to have your git-p4 repo in a separate directory from your actual p4 directory</li> <li>you can merge unrelated git histories with <code>git merge myotherbranch --allow-unrelated-histories</code></li> <li>use these <code>git config -e</code> settings INI<pre><code>[git-p4]\nskipSubmitEdit = true\nuseclientspec = true\n</code></pre></li> </ul>"},{"location":"dev-notes/dev-workflow/git-commands/#install-instructions","title":"Install instructions","text":"<ul> <li>Needs python 2.7</li> <li><code>git config --global alias.p4 !\"python 'C:/Program Files (x86)/Git/mingw32/libexec/git-core/git-p4'\"</code></li> </ul>"},{"location":"dev-notes/dev-workflow/git-commands/#using","title":"Using","text":"<ul> <li> <p>Set P4 Vars: Bash<pre><code>set P4PORT=public.perforce.com:1666\nset P4USER=yourusername\nset P4PASSWD=yourpassword\n</code></pre></p> </li> <li> <p>Clone repo: <code>git p4 clone --detect-branches //depot/perforce_software/p4jenkins</code></p> </li> <li>Submit: <code>git p4 submit</code></li> </ul>"},{"location":"dev-notes/dev-workflow/git-commands/#more-info","title":"More Info","text":"<ul> <li>Reference</li> <li>https://www.paraesthesia.com/archive/2016/10/27/migrating-perforce-to-git-in-windows/</li> <li>https://zzz.buzz/2016/04/30/git-p4-on-windows/</li> <li>https://www.atlassian.com/git/tutorials/git-p4</li> </ul>"},{"location":"dev-notes/dev-workflow/ini-formats/","title":"INI Formats","text":"<p>Source</p>"},{"location":"dev-notes/dev-workflow/ini-formats/#commonly-used-formats","title":"Commonly used formats","text":""},{"location":"dev-notes/dev-workflow/ini-formats/#a-clone-of-ini_default_format-that-gets-rid-of-comments-and-disabled-entries","title":"A clone of <code>INI_DEFAULT_FORMAT</code> that gets rid of comments and disabled entries","text":"C<pre><code>#define INI_DEFAULT_FORMAT_IC \\\n  ((IniFormat) { \\\n    .delimiter_symbol = INI_EQUALS, \\\n    .case_sensitive = false, \\\n    .semicolon_marker = INI_IGNORE, \\\n    .hash_marker = INI_IGNORE, \\\n    .section_paths = INI_ABSOLUTE_AND_RELATIVE, \\\n    .multiline_nodes = INI_MULTILINE_EVERYWHERE, \\\n    .no_single_quotes = false, \\\n    .no_double_quotes = false, \\\n    .no_spaces_in_names = false, \\\n    .implicit_is_not_empty = false, \\\n    .do_not_collapse_values = false, \\\n    .preserve_empty_quotes = false, \\\n    .disabled_after_space = false, \\\n    .disabled_can_be_implicit = false \\\n  })\n\n/*  `ini_fton(INI_DEFAULT_FORMAT_IC)` returns `2621`  */\n</code></pre>"},{"location":"dev-notes/dev-workflow/ini-formats/#a-clone-of-ini_unixlike_format-that-gets-rid-of-comments-and-disabled-entries","title":"A clone of <code>INI_UNIXLIKE_FORMAT</code> that gets rid of comments and disabled entries","text":"C<pre><code>#define INI_UNIXLIKE_FORMAT_IC \\\n  ((IniFormat) { \\\n    .delimiter_symbol = INI_ANY_SPACE, \\\n    .case_sensitive = false, \\\n    .semicolon_marker = INI_IGNORE, \\\n    .hash_marker = INI_IGNORE, \\\n    .section_paths = INI_ABSOLUTE_AND_RELATIVE, \\\n    .multiline_nodes = INI_MULTILINE_EVERYWHERE, \\\n    .no_single_quotes = false, \\\n    .no_double_quotes = false, \\\n    .no_spaces_in_names = false, \\\n    .implicit_is_not_empty = false, \\\n    .do_not_collapse_values = false, \\\n    .preserve_empty_quotes = false, \\\n    .disabled_after_space = false, \\\n    .disabled_can_be_implicit = false \\\n  })\n\n/*  `ini_fton(INI_UNIXLIKE_FORMAT_IC)` returns `2560`  */\n</code></pre>"},{"location":"dev-notes/dev-workflow/ini-formats/#a-format-fast-to-parse","title":"A format fast to parse","text":"C<pre><code>#define INI_FAST_FORMAT \\\n  ((IniFormat) { \\\n    .delimiter_symbol = INI_EQUALS, \\\n    .case_sensitive = false, \\\n    .semicolon_marker = INI_IGNORE, \\\n    .hash_marker = INI_IGNORE, \\\n    .section_paths = INI_ABSOLUTE_AND_RELATIVE, \\\n    .multiline_nodes = INI_NO_MULTILINE, \\\n    .no_single_quotes = false, \\\n    .no_double_quotes = false, \\\n    .no_spaces_in_names = false, \\\n    .implicit_is_not_empty = false, \\\n    .do_not_collapse_values = true, \\\n    .preserve_empty_quotes = true, \\\n    .disabled_after_space = false, \\\n    .disabled_can_be_implicit = false \\\n  })\n\n/*  `ini_fton(INI_FAST_FORMAT)` returns `3197501`  */\n</code></pre>"},{"location":"dev-notes/dev-workflow/ini-formats/#known-formats","title":"Known Formats","text":""},{"location":"dev-notes/dev-workflow/ini-formats/#gnu-unix","title":"GNU, Unix","text":""},{"location":"dev-notes/dev-workflow/ini-formats/#etcnsswitchconf","title":"<code>/etc/nsswitch.conf</code>","text":"C<pre><code>#define NSSWITCH_CONF_FORMAT \\\n    ((IniFormat) { \\\n        .delimiter_symbol = INI_COLON, \\\n        .case_sensitive = false, \\\n        .semicolon_marker = INI_IS_NOT_A_MARKER, \\\n        .hash_marker = INI_DISABLED_OR_COMMENT, \\\n        .multiline_nodes = INI_NO_MULTILINE, \\\n        .section_paths = INI_NO_SECTIONS, \\\n        .no_single_quotes = true, \\\n        .no_double_quotes = true, \\\n        .no_spaces_in_names = true, \\\n        .implicit_is_not_empty = false, \\\n        .do_not_collapse_values = false, \\\n        .preserve_empty_quotes = false, \\\n        .disabled_after_space = false, \\\n        .disabled_can_be_implicit = false \\\n    })\n\n/*  `ini_fton(NSSWITCH_CONF_FORMAT)` returns `521146`  */\n</code></pre>"},{"location":"dev-notes/dev-workflow/ini-formats/#etcgnunetconf","title":"<code>/etc/gnunet.conf</code>","text":"C<pre><code>/*  Original parser: https://git.gnunet.org/gnunet.git/tree/src/util/configuration.c  */\n#define GNUNET_CONF_FORMAT \\\n  ((IniFormat) { \\\n    .delimiter_symbol = INI_EQUALS, \\\n    .case_sensitive = true, \\\n    .semicolon_marker = INI_IS_NOT_A_MARKER, \\\n    .hash_marker = INI_DISABLED_OR_COMMENT, \\\n    .section_paths = INI_ONE_LEVEL_ONLY, \\\n    .multiline_nodes = INI_NO_MULTILINE, \\\n    .no_single_quotes = true, \\\n    .no_double_quotes = false, \\\n    .no_spaces_in_names = false, \\\n    .implicit_is_not_empty = false, \\\n    .do_not_collapse_values = false, \\\n    .preserve_empty_quotes = false, \\\n    .disabled_after_space = false, \\\n    .disabled_can_be_implicit = false \\\n  })\n\n/*  `ini_fton(GNUNET_CONF_FORMAT)` returns `123837`  */\n</code></pre>"},{"location":"dev-notes/dev-workflow/ini-formats/#etcrsyncdconf","title":"<code>/etc/rsyncd.conf</code>","text":"C<pre><code>/*  Original parser: https://github.com/WayneD/rsync/blob/master/params.c  */\n#define RSYNCD_CONF_FORMAT \\\n  ((IniFormat) { \\\n    .delimiter_symbol = INI_EQUALS, \\\n    .case_sensitive = true, \\\n    .semicolon_marker = INI_DISABLED_OR_COMMENT, \\\n    .hash_marker = INI_DISABLED_OR_COMMENT, \\\n    .section_paths = INI_ONE_LEVEL_ONLY, \\\n    .multiline_nodes = INI_MULTILINE_EVERYWHERE, \\\n    .no_single_quotes = true, \\\n    .no_double_quotes = true, \\\n    .no_spaces_in_names = false, \\\n    .implicit_is_not_empty = false, \\\n    .do_not_collapse_values = false, \\\n    .preserve_empty_quotes = false, \\\n    .disabled_after_space = false, \\\n    .disabled_can_be_implicit = false \\\n  })\n\n/*  `ini_fton(RSYNCD_CONF_FORMAT)` returns `204989`  */\n</code></pre>"},{"location":"dev-notes/dev-workflow/ini-formats/#systemd-services-tmpfiles-etc","title":"systemd (services, <code>tmpfiles</code>, etc.)","text":"C<pre><code>/*  Original parser: https://github.com/systemd/systemd/blob/main/src/shared/conf-parser.c  */\n#define SYSTEMD_CONF_FORMAT \\\n  ((IniFormat) { \\\n    .delimiter_symbol = INI_EQUALS, \\\n    .case_sensitive = true, \\\n    .semicolon_marker = INI_DISABLED_OR_COMMENT, \\\n    .hash_marker = INI_DISABLED_OR_COMMENT, \\\n    .section_paths = INI_ONE_LEVEL_ONLY, \\\n    .multiline_nodes = INI_MULTILINE_EVERYWHERE, \\\n    .no_single_quotes = false, \\\n    .no_double_quotes = false, \\\n    .no_spaces_in_names = false, \\\n    .implicit_is_not_empty = false, \\\n    .do_not_collapse_values = false, \\\n    .preserve_empty_quotes = false, \\\n    .disabled_after_space = false, \\\n    .disabled_can_be_implicit = false \\\n  })\n\n/*  `ini_fton(SYSTEMD_CONF_FORMAT)` returns `8381`  */\n</code></pre>"},{"location":"dev-notes/dev-workflow/ini-formats/#etcsambasmbconf","title":"<code>/etc/samba/smb.conf</code>","text":"C<pre><code>/*  Original parser: https://github.com/ndevilla/iniparser  */\n#define SAMBA_CONF_FORMAT \\\n    ((IniFormat) { \\\n        .delimiter_symbol = INI_EQUALS, \\\n        .case_sensitive = false, \\\n        .semicolon_marker = INI_DISABLED_OR_COMMENT, \\\n        .hash_marker = INI_ONLY_COMMENT, \\\n        .multiline_nodes = INI_NO_MULTILINE, \\\n        .section_paths = INI_ABSOLUTE_ONLY, \\\n        .no_single_quotes = false, \\\n        .no_double_quotes = false, \\\n        .no_spaces_in_names = false, \\\n        .implicit_is_not_empty = false, \\\n        .do_not_collapse_values = false, \\\n        .preserve_empty_quotes = false, \\\n        .disabled_after_space = true, \\\n        .disabled_can_be_implicit = false \\\n    })\n\n/*  `ini_fton(SAMBA_CONF_FORMAT)` returns `4248637`  */\n</code></pre>"},{"location":"dev-notes/dev-workflow/ini-formats/#etcpacmanconf","title":"<code>/etc/pacman.conf</code>","text":"C<pre><code>/*  Original parser: https://gitlab.archlinux.org/pacman/pacman/-/blob/master/src/common/ini.c  */\n#define PACMAN_CONF_FORMAT \\\n    ((IniFormat) { \\\n        .delimiter_symbol = INI_EQUALS, \\\n        .case_sensitive = true, \\\n        .semicolon_marker = INI_IS_NOT_A_MARKER, \\\n        .hash_marker = INI_DISABLED_OR_COMMENT, \\\n        .multiline_nodes = INI_NO_MULTILINE, \\\n        .section_paths = INI_ABSOLUTE_ONLY, \\\n        .no_single_quotes = true, \\\n        .no_double_quotes = true, \\\n        .no_spaces_in_names = false, \\\n        .implicit_is_not_empty = true, \\\n        .do_not_collapse_values = false, \\\n        .preserve_empty_quotes = false, \\\n        .disabled_after_space = false, \\\n        .disabled_can_be_implicit = true \\\n    })\n\n/*  `ini_fton(PACMAN_CONF_FORMAT)` returns `9163709`  */\n</code></pre>"},{"location":"dev-notes/dev-workflow/ini-formats/#pulseaudio-etcpulsedaemonconf-etcpulseclientconf-etc","title":"PulseAudio (<code>/etc/pulse/daemon.conf</code>, <code>/etc/pulse/client.conf</code>, etc.)","text":"C<pre><code>/*  Original parser: https://gitlab.freedesktop.org/pulseaudio/pulseaudio/-/blob/master/src/daemon/daemon-conf.c  */\n#define PULSEAUDIO_CONF_FORMAT \\\n  ((IniFormat) { \\\n    .delimiter_symbol = INI_EQUALS, \\\n    .case_sensitive = true, \\\n    .semicolon_marker = INI_DISABLED_OR_COMMENT, \\\n    .hash_marker = INI_ONLY_COMMENT, \\\n    .section_paths = INI_NO_SECTIONS, \\\n    .multiline_nodes = INI_NO_MULTILINE, \\\n    .no_single_quotes = true, \\\n    .no_double_quotes = true, \\\n    .no_spaces_in_names = false, \\\n    .implicit_is_not_empty = false, \\\n    .do_not_collapse_values = false, \\\n    .preserve_empty_quotes = false, \\\n    .disabled_after_space = true, \\\n    .disabled_can_be_implicit = false \\\n  })\n\n/*  `ini_fton(PULSEAUDIO_CONF_FORMAT)` returns `4453565`  */\n</code></pre>"},{"location":"dev-notes/dev-workflow/ini-formats/#microsoft-windows","title":"Microsoft Windows","text":""},{"location":"dev-notes/dev-workflow/ini-formats/#windows-ini-files","title":"Windows INI files","text":"C<pre><code>/*  Original parser: Winbase.h (no source code available)  */\n#define WINDOWS_API_FORMAT \\\n    ((IniFormat) { \\\n        .delimiter_symbol = INI_EQUALS, \\\n        .case_sensitive = false, \\\n        .semicolon_marker = INI_DISABLED_OR_COMMENT, \\\n        .hash_marker = INI_IS_NOT_A_MARKER, \\\n        .section_paths = INI_ABSOLUTE_ONLY, \\\n        .multiline_nodes = INI_NO_MULTILINE, \\\n        .no_single_quotes = false, \\\n        .no_double_quotes = false, \\\n        .no_spaces_in_names = false, \\\n        .implicit_is_not_empty = false, \\\n        .do_not_collapse_values = false, \\\n        .preserve_empty_quotes = false, \\\n        .disabled_after_space = false, \\\n        .disabled_can_be_implicit = false \\\n    })\n\n/*  `ini_fton(WINDOWS_API_FORMAT)` returns `56381`  */\n</code></pre>"},{"location":"dev-notes/dev-workflow/ini-formats/#os-agnostic","title":"OS agnostic","text":""},{"location":"dev-notes/dev-workflow/ini-formats/#editorconfig-editorconfig-files","title":"EditorConfig (<code>.editorconfig</code> files)","text":"C<pre><code>/*  Original parser: https://github.com/benhoyt/inih  */\n/*\n NOTE: **inih** uses an exotic syntax for multi-line entries. The\n  library however is used only in the C implementation of\n  **EditorConfig**, while for other languages other INI libraries\n  are used. Unless they switched the multi-line feature off,\n  writing multi-line `.editorconfig` files will likely create\n  chaos in the framework; therefore we assume that\n  **EditorConfig** does not support multi-line entries at all.\n*/\n#define EDITORCONFIG_FORMAT \\\n  ((IniFormat) { \\\n    .delimiter_symbol = INI_EQUALS, \\\n    .case_sensitive = false, \\\n    .semicolon_marker = INI_DISABLED_OR_COMMENT, \\\n    .hash_marker = INI_DISABLED_OR_COMMENT, \\\n    .section_paths = INI_ABSOLUTE_ONLY, \\\n    .multiline_nodes = INI_NO_MULTILINE, \\\n    .no_single_quotes = true, \\\n    .no_double_quotes = true, \\\n    .no_spaces_in_names = false, \\\n    .implicit_is_not_empty = false, \\\n    .do_not_collapse_values = true, \\\n    .preserve_empty_quotes = false, \\\n    .disabled_after_space = false, \\\n    .disabled_can_be_implicit = false \\\n  })\n\n/*  `/*  `ini_fton(EDITORCONFIG_FORMAT)` returns `1298493`  */\n</code></pre>"},{"location":"dev-notes/dev-workflow/misc-workflow/","title":"Dev Workflow","text":"<p>https://www.conventionalcommits.org/ https://semver.org/</p>"},{"location":"dev-notes/dev-workflow/regex-cheatsheet/","title":"Regex Cheatsheet","text":""},{"location":"dev-notes/dev-workflow/regex-cheatsheet/#common-regex-patterns","title":"Common Regex Patterns","text":"<ul> <li> <p>not: <code>[^abc]</code> e.g. any character except  <code>a</code>, <code>b</code>, or <code>c</code></p> </li> <li> <p>preceededBy/startsWith: <code>(?&lt;=a)b</code>: find+capture the first <code>expr b</code> that is preceeded by <code>expr a</code> i.e. positive lookbehind</p> </li> </ul> JavaScript<pre><code>/(?&lt;=foo)bar/\n\"foobar\"   =&gt; captures 'bar'\n\"fffoobar\" =&gt; captures 'bar'\n\"fuubar\"   =&gt; false\n</code></pre> <ul> <li>!preceededBy/!startsWith: <code>(?&lt;!a)b</code>: find+capture the first <code>expr b</code> that is not preceeded by <code>expr a</code> i.e. negative lookbehind</li> </ul> JavaScript<pre><code>/(?&lt;!not)foo/\n\"notfoo\"    =&gt; false\n\"not foo\"   =&gt; captures 'foo'\n\"foo\"       =&gt; captures 'foo'\n\"foobaz\"    =&gt; captures 'foo'\n</code></pre> <ul> <li>followedBy/endsWith: <code>a(?=b)</code>: find+capture the first <code>expr a</code> that is followed by <code>expr b</code> i.e. positive lookahead</li> </ul> JavaScript<pre><code>/foo(?=bar)/\n\"foobar\"    =&gt; captures 'foo' \n\"foobaz\"    =&gt; false\n\"fffoobaz\"  =&gt; false\n</code></pre> <ul> <li>!followedBy/!endsWith: <code>a(?!b)</code>: find+capture the first <code>expr a</code> that is not followed by <code>expr b</code> i.e. negative lookahead</li> </ul> JavaScript<pre><code>/foo(?!bar)/\n\"foobar\"   =&gt; false\n\"foobaz\"   =&gt; captures 'foo'\n\"fffoobaz\" =&gt; captures 'foo'\n</code></pre> <ul> <li>more misc examples</li> </ul> JavaScript<pre><code>/(?&lt;!if\\s|static\\s)constexpr/.match([\"if constexpr\", \"static constexpr\", \"constexpr\"]) =&gt; ['constexpr','constexpr', false]\n/\\/\\/(?! zig fmt: on|\\/).*/\n</code></pre>"},{"location":"dev-notes/dev-workflow/regex-cheatsheet/#useful-links","title":"Useful  Links","text":"<ul> <li>regex101</li> <li>regex debugger</li> </ul>"},{"location":"dev-notes/dev-workflow/vcpkg/","title":"Vcpkg Cheatsheet","text":"<ul> <li>update:</li> <li>short version: <code>git pull &amp;&amp; bootstrap-vcpkg.bat -disableMetrics</code></li> <li> <p>safer version: Bash<pre><code>cd &lt;vcpkg_root&gt;\nvcpkg list &gt; installed_ports.txt  # save a list of all installed ports somewhere \ngit pull\nnukedir installed/\nbootstrap-vcpkg.bat -disableMetrics # reinstall all ports:triplets you need\nvcpkg install &lt;...&gt; \n</code></pre></p> </li> <li> Text Only<pre><code> &gt; \n &gt; \\[!warning\\] `vcpkg upgrade/update` command is discouraged\n &gt; it's not transactional\n &gt; generally not needed but might need to re-integrate i.e. `vcpkg integrate remove/install`\n</code></pre> </li> </ul>"},{"location":"dev-notes/devbox/devbox-benchmarks/","title":"Gamedev Environment Part IV: Optimizing Unreal Engine Builds, Visual Studio, and Final Benchmarks","text":"<p>TLDR: Optimal config for UE4</p> <ul> <li>[2990WX|Optane|Stashed]::UBT Parallel Executor   [UE4|DevEditor]</li> <li>Clean: 720s</li> <li>Build (no changes): 5.3s (wtf)</li> <li>Clean + Rebuild (with caching): 120s</li> </ul>"},{"location":"dev-notes/devbox/devbox-benchmarks/#ssd-results","title":"SSD results","text":"<p>Here you can see the optane driver really shining with 4k unthreaded single queue depth random read/write latency. This is just amazing.</p> <p>However, it performs just ok for high sequential block access (which can be threaded with quedepths of 32 in practice) </p> <p>Here's the SSDx4 in Raid-0 and a single SSD </p>"},{"location":"dev-notes/devbox/devbox-benchmarks/#other-benchmarks","title":"Other benchmarks","text":"<p>Indigo Benchmark </p> <p>AIDA Cache &amp; Memtest Benchmark </p>"},{"location":"dev-notes/devbox/devbox-benchmarks/#ue4-build-times","title":"UE4 build times","text":"<p>Machines:</p> <ul> <li>2990WX: -3.8ghz -64gb</li> <li>1950: -3.8ghz -32GB</li> <li>i7-5960X: -3.0ghz -64gb</li> </ul> <p>Configs tested:</p> <ul> <li>{UBT, Fastbuild}</li> <li>{PCH,NoPCH}</li> <li>{NonUnity, AdaptiveUnity, Unity}</li> <li>{NoCaching, Fastbuild caching, stashed.io)</li> <li>{local caching, distributed}</li> </ul> <p>Result: Using Fastbuild ended up being marginally better than just single threadripper + compiler caching</p> <p>Fastbuild requires NoPCH (necessary bc compiler bug) which creates way more work that cancels out the benefit of distributed machines. Also, it was a PITA to get working</p> <p>I guess if you had enough machines it could win out. Also, probably my fastbuild generator could be made better but I got so frustrated with a million things going wrong by the end I was just hate programming that extension. Will through up on github</p> <p>stashed.io doesn't distribute its compiler cache without some extra work (have fun symlinking everything so paths match). BUT, by far this is the biggest win especially since it's ZERO config. Literally three clicks and you're automatically running</p> <p>So for optimal(simplicity x build times), I just use my single threadripper machine + local compiler caching on my raid-0 4x SSD. I also love this because rolling it out to distributed team and we don't have to wrestle with how to get them multiple machines.</p> <p>Here's all the results:</p> <ul> <li> <p>LLVM: 14min to compile these settings from llvm-project monorepo </p> </li> <li> <p>UE4 Build Benchmark Results: (a bit disorganized bc I only realized halfway through to save them to post)</p> </li> <li> <p>Optane Drive</p> </li> <li> <p>Full Build Text Only<pre><code>4&gt;Deploying UE4Editor Win64 Development...\n4&gt;Total build time: 723.65 seconds (Parallel executor: 671.36 seconds)\n========== Build: 4 succeeded, 0 failed, 0 up-to-date, 0 skipped ==========\n</code></pre></p> </li> <li> <p>No-Change Build optane: 4.89 seconds Text Only<pre><code>4&gt;Deploying UE4Editor Win64 Development...\n4&gt;Total build time: 105.59 seconds (Parallel executor: 53.23 seconds)\n========== Build: 4 succeeded, 0 failed, 0 up-to-date, 0 skipped ==========\n</code></pre></p> </li> <li> <p>Raid SSD</p> </li> <li> <p>Full Build Text Only<pre><code>4&gt;Deploying UE4Editor Win64 Development...\n4&gt;Total build time: 726.04 seconds (Parallel executor: 673.76 seconds)\n========== Build: 4 succeeded, 0 failed, 0 up-to-date, 0 skipped ==========\n</code></pre></p> </li> <li> <p>Clean Rebuild Text Only<pre><code>120s\n</code></pre></p> </li> <li> <p>No Change Text Only<pre><code>4.5s\n</code></pre></p> </li> <li> <p>Raid SSD+PCH+Fastbuild:</p> </li> <li> <p>Full Build: Text Only<pre><code>4&gt;--- Summary -----------------------------------------------------\n4&gt;                                 /----- Cache -----\\\n4&gt;Build:          Seen    Built   Hit     Miss    Store   CPU\n4&gt; - File       : 30920   1904    -       -       -       0.138s\n4&gt; - Library    : 608     608     -       -       -       9m 51.041s\n4&gt; - Object     : 1298    1298    0       1258    1258    17h:43m 25.496s\n4&gt; - Alias      : 1       1       -       -       -       0.000s\n4&gt; - Exe        : 2       2       -       -       -       4.061s\n4&gt; - Compiler   : 2       2       -       -       -       0.015s\n4&gt; - DLL        : 607     607     -       -       -       46m 53.033s\n4&gt; - ObjectList : 1281    1281    -       -       -       0.000s\n4&gt;Cache:\n4&gt; - Hits       : 0 (0.0 %)\n4&gt; - Misses     : 1258\n4&gt; - Stores     : 1258\n4&gt;Time:\n4&gt; - Real       : 19m 33.634s\n4&gt; - Local CPU  : 18h:40m 13.781s (57.3:1)\n4&gt; - Remote CPU : 9h:38m 48.820s (29.6:1)\n4&gt;-----------------------------------------------------------------\n4&gt;FBuild: OK: all\n4&gt;Time: 19m 33.960s\n4&gt;Object Linking Finished. Execution Time: 1174113\n4&gt;[0/4] Copy tbb.dll\n4&gt;[1/4] Copy libfbxsdk.dll\n4&gt;[2/4] Copy embree.2.14.0.dll\n4&gt;[3/4] Copy tbbmalloc.dll\n4&gt;Deploying UE4Editor Win64 Development...\n4&gt;Total build time: 1240.24 seconds (FASTBuild executor: 1181.72 seconds)\n========== Build: 4 succeeded, 0 failed, 0 up-to-date, 0 skipped ==========\n</code></pre></p> </li> <li> <p>Clean PCH Rebuild + Fastbuild: Text Only<pre><code>4&gt;FBuild: OK: all\n4&gt;Time: 3m 31.833s\n4&gt;Object Linking Finished. Execution Time: 211988\n4&gt;Deploying UE4Editor Win64 Development...\n4&gt;Total build time: 265.33 seconds (FASTBuild executor: 219.53 seconds)\n========== Build: 4 succeeded, 0 failed, 0 up-to-date, 0 skipped ==========\n</code></pre></p> </li> <li> <p>Raid SSD+Fastbuild, ProcMult x2, FBuildCaching, Ryzen2,Ryzen, Talon, bebytal-02, bDisableDebugInfoForGeneratedCode, disablepch, bAdaptiveUnityDisablesPCH=true, (with monitor and upping core counts of slave machines)</p> </li> <li> <p>Full Build: Text Only<pre><code>2&gt;--- Summary -----------------------------------------------------\n2&gt;                                 /----- Cache -----\\\n2&gt;Build:          Seen    Built   Hit     Miss    Store   CPU\n2&gt; - File       : 30316   1318    -       -       -       0.000s\n2&gt; - Object     : 1306    1306    0       1300    1300    10h:28m 39.656s\n2&gt; - Alias      : 1       1       -       -       -       0.000s\n2&gt; - Compiler   : 2       2       -       -       -       0.015s\n2&gt; - ObjectList : 946     946     -       -       -       0.000s\n2&gt;Cache:\n2&gt; - Hits       : 0 (0.0 %)\n2&gt; - Misses     : 1300\n2&gt; - Stores     : 1300\n2&gt;Time:\n2&gt; - Real       : 11m 56.823s\n2&gt; - Local CPU  : 10h:28m 39.672s (52.6:1)\n2&gt; - Remote CPU : 5h:15m 15.848s (26.4:1)\n2&gt;-----------------------------------------------------------------\n2&gt;FBuild: OK: all\n2&gt;Time: 11m 57.013s\n2&gt;Object Compilation Finished. Execution Time: 717136\n2&gt;Linking Objects\n2&gt;Dispatching FastBuild: FastBuildRootPath: C:/knl_v/VFBuild/FBuild/FBuild.exe\n</code></pre></p> </li> <li> <p>Clean + Rebuild with FBuildCache Text Only<pre><code>4&gt;--- Summary -----------------------------------------------------\n4&gt;                                 /----- Cache -----\\\n4&gt;Build:          Seen    Built   Hit     Miss    Store   CPU\n4&gt; - Exec       : 1217    1217    -       -       -       30m 18.027s\n4&gt; - File       : 2       2       -       -       -       0.000s\n4&gt; - Alias      : 1       1       -       -       -       0.000s\n4&gt;Cache:\n4&gt; - Hits       : 0 (0.0 %)\n4&gt; - Misses     : 0\n4&gt; - Stores     : 0\n4&gt;Time:\n4&gt; - Real       : 46.344s\n4&gt; - Local CPU  : 30m 18.027s (39.2:1)\n4&gt; - Remote CPU : 0.000s (0.0:1)\n4&gt;-----------------------------------------------------------------\n4&gt;FBuild: OK: all\n4&gt;Time: 46.495s\n4&gt;Object Linking Finished. Execution Time: 46547\n4&gt;[0/4] Copy libfbxsdk.dll\n4&gt;[1/4] Copy embree.2.14.0.dll\n4&gt;[2/4] Copy tbb.dll\n4&gt;[3/4] Copy tbbmalloc.dll\n4&gt;Deploying UE4Editor Win64 Development...\n4&gt;Total build time: 205.04 seconds (FASTBuild executor: 141.20 seconds)\n========== Build: 4 succeeded, 0 failed, 0 up-to-date, 0 skipped ==========\n</code></pre></p> </li> <li> <p>DISORGANIZED DATA: one-off build timings</p> </li> <li> <p>Parallel Executor, ProcMult x2</p> Text Only<pre><code>4&gt;Deploying UE4Editor Win64 DebugGame...\n4&gt;Total build time: 704.91 seconds (Parallel executor: 644.47 seconds)\n========== Build: 4 succeeded, 0 failed, 0 up-to-date, 0 skipped ==========\n</code></pre> </li> <li> <p>Fastbuild, ProcMult x2, Ryzen2</p> Text Only<pre><code>4&gt;--- Summary -----------------------------------------------------\n4&gt;                                 /----- Cache -----\\\n4&gt;Build:          Seen    Built   Hit     Miss    Store   CPU\n4&gt; - CopyFile   : 613     613     -       -       -       4.676s\n4&gt; - File       : 30861   1907    -       -       -       0.047s\n4&gt; - Library    : 608     608     -       -       -       3m 18.427s\n4&gt; - Object     : 1298    1298    0       1296    1296    1 days, 6h:33m 15.914s\n4&gt; - Alias      : 1       1       -       -       -       0.000s\n4&gt; - Exe        : 609     609     -       -       -       38m 17.797s\n4&gt; - Compiler   : 2       2       -       -       -       0.019s\n4&gt; - ObjectList : 1281    1281    -       -       -       0.000s\n4&gt;Cache:\n4&gt; - Hits       : 0 (0.0 %)\n4&gt; - Misses     : 1296\n4&gt; - Stores     : 1296\n4&gt;Time:\n4&gt; - Real       : 30m 2.555s\n4&gt; - Local CPU  : 1 days, 7h:14m 56.875s (62.4:1)\n4&gt; - Remote CPU : 0.000s (0.0:1)\n4&gt;-----------------------------------------------------------------\n4&gt;FBuild: OK: all\n4&gt;Time: 30m 2.879s\n4&gt;Deploying UE4Editor Win64 DebugGame...\n4&gt;Total build time: 1856.14 seconds (FASTBuild executor: 1804.41 seconds)\n4&gt;Done building project \"UE4.vcxproj\".\n========== Build: 4 succeeded, 0 failed, 0 up-to-date, 0 skipped ==========\n</code></pre> </li> <li> <p>Fastbuild, ProcMult x2, Ryzen2, Ryzen, Talon</p> Text Only<pre><code>4&gt;--- Summary -----------------------------------------------------\n4&gt;                                 /----- Cache -----\\\n4&gt;Build:          Seen    Built   Hit     Miss    Store   CPU\n4&gt; - CopyFile   : 613     613     -       -       -       8.156s\n4&gt; - File       : 30861   1907    -       -       -       0.011s\n4&gt; - Library    : 608     608     -       -       -       3m 4.705s\n4&gt; - Object     : 1298    1298    0       1279    0       15h:2m 40.969s\n4&gt; - Alias      : 1       1       -       -       -       0.000s\n4&gt; - Exe        : 609     609     -       -       -       36m 54.247s\n4&gt; - Compiler   : 2       2       -       -       -       0.019s\n4&gt; - ObjectList : 1281    1281    -       -       -       0.002s\n4&gt;Cache:\n4&gt; - Hits       : 0 (0.0 %)\n4&gt; - Misses     : 1279\n4&gt; - Stores     : 0\n4&gt;Time:\n4&gt; - Real       : 17m 6.968s\n4&gt; - Local CPU  : 15h:42m 48.109s (55.1:1)\n4&gt; - Remote CPU : 11h:2m 47.324s (38.7:1)\n4&gt;-----------------------------------------------------------------\n4&gt;FBuild: OK: all\n4&gt;Time: 17m 7.294s\n4&gt;Deploying UE4Editor Win64 DebugGame...\n4&gt;Total build time: 1092.92 seconds (FASTBuild executor: 1028.85 seconds)\n4&gt;Done building project \"UE4.vcxproj\".\n========== Build: 4 succeeded, 0 failed, 0 up-to-date, 0 skipped ==========\n</code></pre> </li> <li> <p>Fastbuild-new, 4x, Ryzen2</p> Text Only<pre><code>2&gt;--- Summary -----------------------------------------------------\n2&gt;                                 /----- Cache -----\\\n2&gt;Build:          Seen    Built   Hit     Miss    Store   CPU\n2&gt; - Exec       : 1217    1217    -       -       -       21m 23.757s\n2&gt; - File       : 2       2       -       -       -       0.000s\n2&gt; - Alias      : 1       1       -       -       -       0.000s\n2&gt;Cache:\n2&gt; - Hits       : 0 (0.0 %)\n2&gt; - Misses     : 0\n2&gt; - Stores     : 0\n2&gt;Time:\n2&gt; - Real       : 53.633s\n2&gt; - Local CPU  : 21m 23.757s (23.9:1)\n2&gt; - Remote CPU : 0.000s (0.0:1)\n2&gt;-----------------------------------------------------------------\n2&gt;FBuild: OK: all\n2&gt;Time: 53.781s\n2&gt;Object Linking Finished. Execution Time: 53841\n2&gt;Deploying UE4Editor Win64 Development...\n2&gt;Total build time: 750.04 seconds (FASTBuild executor: 702.27 seconds)\n========== Build: 2 succeeded, 0 failed, 2 up-to-date, 0 skipped ==========\n</code></pre> </li> </ul>"},{"location":"dev-notes/devbox/devbox-hw-guide/","title":"Devbox Hardware Guide","text":"<p>TLDR: Threadripper 2 high-end dev/workstation build guide covering:</p> <ul> <li>2990 vs 1950x perf numbers</li> <li>compatibility issues</li> <li>@UnrealEngine fastbuild integration</li> <li>my poor mans' automating/baremetal provisioning</li> <li>the programs I use</li> </ul> <p>After many years of holding out, I finally had to upgrade my dev machine to Win10 so figured it was as good a time to refresh my machine + consolidate the studio machines. Here's the rat hole I went down for two weeks chasing compat issues, msvc compiler bugs, and solutions</p> <p>Here's everything that finally worked together: Key parts:</p> <ul> <li>2990WX that can be comfortably overclocked to 3.8ghz</li> <li>64 gb RAM overclocked to 2933</li> <li>Main drive: Intel Optane</li> <li>If money isn't an issue, I can't recommend enough the intel optane drive for main + ssd raid for second drive. It's like an order of mag faster and makes day to day feel transformative</li> <li>What're the build improvements for optane?<ul> <li>I'd say depends on what baseline is. Assuming src is built on optane drive: Optane vs HD - massive benefit Optane vs. SSD vs Raid-0 SSD - hard to say sans measuring. I noticed a massive improvement but that's colored by the terrible amd raid driver issue</li> <li>Also depends on CPU (32-core beast vs 4 core) &amp; how multi-threaded your build is (msvc 2015 horrible, msvc2017 decent, fastbuild/incredibuild is great) That would all affect how much of a bottleneck your disk is going to be but really would need to measure since too many factors</li> <li>Biggest benefit of optane is insanely fast (3x more than next fastest ssd) random access read/writes with 4k blocks, 1 thread, quedepth 1. Net result is making it the primary drive makes windows \"feel\" a lot snappier</li> </ul> </li> <li>Fast block storage drive: Raid-0 NVMe SSD x4</li> </ul> <p>Ryzen has lots of PCI lanes but mobo pcie slots are not all x16. Lots of trial &amp; error but optimal cfg:</p> <ul> <li>2080ti goes in top PCIe</li> <li>1070 goes in 2<sup>nd</sup> PCIe</li> <li>Why A Second Card? Mainly for live shader debugging/register inspection on single machine + I had a spare card. Other hopeful benefit is for mgpgpu stuff (houdini cloth sims) but I don't have concrete evidence lots of programs written for that outside of RedShift + Octane</li> <li>ASRock M2 Raid card in slot3 (need x16 for Raid-0 SSD)</li> <li>Optane in bottom</li> <li>Airflow setup in pic </li> </ul>"},{"location":"dev-notes/devbox/devbox-hw-guide/#compatibility-gremlins","title":"Compatibility gremlins","text":"<p>/u/AMD_Robert's reddit posts are a treasure trove of detailed technical information</p>"},{"location":"dev-notes/devbox/devbox-hw-guide/#hpet","title":"HPET","text":"<ul> <li>Make sure <code>HPET = default</code></li> </ul> <p>[!note]- <code>HPET default</code> &gt;= <code>HPET off</code> &gt;&gt; <code>HPET on</code> (causes inordinate perf problems)</p> <ul> <li>several system timing sources, primarily <code>TSC</code> and <code>HPET</code></li> <li><code>TSC</code>: truly low overhead timing source using a CPU register to operate</li> <li><code>HPET</code>: guaranteed timing source but high overhead</li> <li>OS may mark <code>TSC</code> as unstable/not to be trusted so system falls back to <code>HPET</code></li> <li>might be normal behavior because CPU was designed that way</li> <li>might be BIOS bug e.g. it writes to the register in an incorrect way, throwing the TSC sync off from the beginning of the boot process</li> <li>force disabling <code>HPET</code> in bios and force enabling unstable <code>TSC</code> causes a different set of problems</li> <li>causes issues with graphics and overall stability</li> <li>distorts the system's understanding of time, possibly resulting invalid performance data</li> <li>might prevent <code>HPET</code> sync induced stutters, but prevents <code>TSC</code> from syncing leading to global desynchronization overtime</li> <li>kernel developer thoughts on HPET</li> <li>HPET vs PMT</li> </ul> <ul> <li>HPET default</li> </ul> Batchfile<pre><code>bcdedit /deletevalue useplatformclock\n</code></pre> <ul> <li>HPET off</li> </ul> Batchfile<pre><code>bcdedit /deletevalue useplatformclock\nbcdedit /set disabledynamictick yes\n</code></pre> <ul> <li>HPET on</li> </ul> Batchfile<pre><code>bcdedit /set useplatformclock true\nbcdedit /set disabledynamictick no\n</code></pre> <ul> <li>Credit to @SebAaltonen for root causing this</li> </ul> <p>Finally found a solution to my Threadripper performance woes. If I disable HPET (bcdedit /deletevalue useplatformclock) I get 2x SSD iOPS boost, UE4 editor with RenderDoc plugin active has 4x higher frame rate and VTune becomes usable. Visual Studio stalls are also reduced.</p>"},{"location":"dev-notes/devbox/devbox-hw-guide/#raid-0-nvme-ssd","title":"Raid-0 NVMe SSD","text":"<p>Do not install AMD Raid Xpert2 driver/chipset. It's atrocious; use the standard windows one. Means you can't have your OS on an SSD raid but Optane is better anyway</p> <p>Details: ASRock Ultra Quad M.2 Card &amp; AMD RAIDXpert Benchmark</p>"},{"location":"dev-notes/devbox/devbox-hw-guide/#houdini-170","title":"Houdini 17.0","text":"<p>Houdini 17.0 will crash with nVidia drivers have a clash and houdini won't recognize your cards as cuda devices. This has been fixed in the latest drivers</p>"},{"location":"dev-notes/devbox/devbox-hw-guide/#memory","title":"Memory","text":"<ul> <li>Rule of thumb is 2gb per core. For building UE4, I have to limit number of threads &lt; 64 as I run out of memory and stuff starts paging out to disk</li> <li>Intel Optane drive is so fast it took me a bit to discover since the perf didn't tank an order of magnitude</li> <li>Get Samsung B-Die &amp; buy kits together as mfg only guarantees timings for kits (eg get a kit of 16gbx4 vs 4 separate 16gb of same model) (benzhaomin.github.io/bdiefinder/)</li> <li>TR needs fast memory (also NUMA arch with only 4 mem channels for 8 dies)</li> <li>Reliably can only OC up to 2933mhz (officially 2133 iirc)</li> <li>conjecture Past certain point, pushing memspeed is net loss esp. since hw errors induced from very tight memory/CPU timings &gt;&gt; latency stalls from CPU requesting memory in a Quad Channel config</li> </ul>"},{"location":"dev-notes/devbox/devbox-hw-guide/#overclocking","title":"Overclocking","text":""},{"location":"dev-notes/devbox/devbox-hw-guide/#easy-mode","title":"Easy Mode","text":"<p>AMD made it really easy with RyzenMaster</p> <ul> <li>Allows you to control clock settings</li> <li>Whether to force turn on or use Precision Boost Override 2 and define range of dynamic scaling</li> <li>NOTE: Some settings dont persist on restart</li> </ul> <p>Precision Boost Overdrive 2 seems pretty great and allows for dynamic scaling switching at a much granular timeslice</p> <p>Dynamic Local Mode which is auto-pinning your threads to core die that has local memory access to deal with NUMA arch of ryzen</p> <p>I'm always suspect of these things but windows scheduler def. has issues. More on that later</p>"},{"location":"dev-notes/devbox/devbox-hw-guide/#medium-mode-what-i-use","title":"Medium Mode (what I use)","text":"<p>Dead simple:</p> <ul> <li>Just set clock multiplier to 38</li> <li>CPU voltage at 1.25</li> <li>Memory to 2933 with 1.35v</li> <li>NOTE: TR has a thermal ceiling of 69\u00b0 before it'll start throttling</li> </ul> <p>Here's a beginner's guide to overclocking</p>"},{"location":"dev-notes/devbox/devbox-hw-guide/#expert-mode","title":"Expert mode","text":"<p>Here's a Overclocking Threadripper Guide. Some advanced notes:</p> <ul> <li>Use Ryzen Timing Checker</li> <li>DRAM calculator to push your memory overclock to extreme   (imho, this is a losing proposition and not worth the effort)</li> <li>Here's a tutorial: </li> </ul>"},{"location":"dev-notes/devbox/devbox-hw-guide/#oc-software","title":"OC software","text":""},{"location":"dev-notes/devbox/devbox-hw-guide/#tools","title":"Tools","text":"<ul> <li>HWInfo: Best detailed info on all sorts of sensors &amp; summary rolled into one</li> <li>GPU Caps Viewer: GPU capabilities</li> </ul>"},{"location":"dev-notes/devbox/devbox-hw-guide/#benchmark","title":"Benchmark","text":"<ul> <li>CPU: Aida64Extreme, CineBench, Indigo Benchmark</li> <li>SSD: Anvil SSD, ATTO, CrystalDiskMark</li> </ul>"},{"location":"dev-notes/devbox/devbox-hw-guide/#stability","title":"Stability","text":"<ul> <li>PassmarkBurnIn</li> <li>AidaExtreme </li> </ul> <p>BIG Shout out to @Level1Techs; hands down the best hw channel for technical people: </p>"},{"location":"dev-notes/devbox/devbox-tech-sites/","title":"Developer Tech Sites &amp; Resources","text":""},{"location":"dev-notes/devbox/devbox-tech-sites/#privacy-resources","title":"Privacy Resources","text":"<ul> <li>JustGetMyData</li> <li>JustDeleteMe</li> <li>JustWhatsTheData</li> <li>Privacy Guides</li> <li>Privacy Tools</li> </ul>"},{"location":"dev-notes/devbox/devbox-tech-sites/#non-spammy-reviews","title":"Non-Spammy Reviews","text":"<ul> <li>ghacks</li> <li>AlternativeTo</li> <li>Slant</li> <li>ProductHunt</li> <li>RTINGS</li> <li>Wccftech</li> </ul>"},{"location":"dev-notes/devbox/devbox-tech-sites/#research-resources","title":"Research Resources","text":""},{"location":"dev-notes/devbox/devbox-tech-sites/#research-papersscience-journals","title":"Research Papers/Science Journals","text":"<p>Guide To Finding Science Papers </p> <ul> <li>Resources:</li> <li>OA.mg</li> <li>PaperPanda Chrome Extension</li> <li>Unpaywall Chrome Extension</li> <li>LibGen</li> <li>Sci-Hub</li> <li>arXiv</li> <li>/r/Scholar/</li> <li>Z-Lib</li> </ul>"},{"location":"dev-notes/devbox/devbox-tech-sites/#internet-search","title":"Internet Search","text":"<ul> <li>gwern's Internet Search Tips: advanced tips and tricks for effective Internet research of papers/books, with real-world examples</li> </ul>"},{"location":"dev-notes/devbox/devbox-win-optimization/","title":"Devbox Windows OS Optimization","text":"<p>TLDR: Setting your CPU affinity off of Core 0/1 sometimes gets you a big perf boost. Windows scheduler was not designed with high NUMA core counts in mind You can use powershell scripts (<code>start /affinity [mask] [executable]</code>) or if you're like me, use ProcessLasso</p>"},{"location":"dev-notes/devbox/devbox-win-optimization/#windows-scheduler-pains","title":"Windows Scheduler Pains","text":"<p>Was seeing some very terrible performance behavior on TR2 where it was worse than TR1 or other small core count CPUs. After investigating on the net, turns out there's lots of contention on Core 0/1 with Windows</p> <p>Also bizarre that even in cases where an app/benchmark was using all cores, there was still a noticeable perf improvement. Not sure about internals of windows scheduler but even in NUMA aware mode, there seems to be a benefit in explicitly pinning PIDS</p> <p>AMD added Dynamic Local Mode to auto pin threads to the die with fastest local memory access based on CPU usage. Here's the memory layout of TR2 and more details from AMD on Dynamic Local Mode </p> <p>conjecture Possible causes for schedule wars: context switches sys calls post-spectre world are expensive (iirc, intel hard flushes l1 cache). Possible that context switching on pinned PIDs does not due this but this is more for @markrussinovich or @BruceDawson0xB domain</p> <p>Also interesting seeing the PCIe channel access to the numa nodes. Here's an lstopo diagram (which runs on windows too!) </p> <p>For more detailed deep dives:</p> <ul> <li>CPU 0: Playing Scheduler Wars with AMD's Threadripper 2990WX</li> <li>@Level1Techs </li> </ul> <p>Finally, at least on my mobo, changing DRAM memory interleaving and interleaving size didn't make a perf impact but caveat I didn't extensively test</p>"},{"location":"dev-notes/devbox/devbox-win-optimization/#latency","title":"Latency","text":"<ul> <li> <p>Windows Settings</p> </li> <li> <p>\u2b50 Graphics \u2192 Hardware GPU Scheduling: On</p> </li> <li>\u26a0 Graphics \u2192 Variable Refresh Rate:   On</li> <li>\u26a0 Gaming \u2192 GameMode:                  On</li> <li> <p>Nvidia Control Panel</p> </li> <li> <p>\u2b50 Manage 3D Settings \u2192 Power management mode:  Prefer maximum Performance</p> </li> <li>\u26a0 Manage 3D Settings \u2192 Low Latency mode:       Ultra</li> <li>\u26a0 Setup G-SYNC \u2192 Enable G-Sync:                Fullscreen</li> <li> <p>Resources</p> </li> <li> <p>https://www.nvidia.com/en-us/geforce/guides/gfecnt/202010/system-latency-optimization-guide</p> </li> <li>https://devblogs.microsoft.com/directx/os-variable-refresh-rate/</li> <li>https://devblogs.microsoft.com/directx/hardware-accelerated-gpu-scheduling/</li> <li>https://blurbusters.com</li> </ul>"},{"location":"dev-notes/devbox/devbox-win-optimization/#advanced-windows-tweaks","title":"Advanced Windows Tweaks","text":"<ul> <li>https://djdallmann.github.io/GamingPCSetup/</li> <li>https://sites.google.com/view/melodystweaks/basictweaks</li> </ul>"},{"location":"dev-notes/devbox/devbox-win-tools/","title":"Developer Tools For Windows","text":"Legend \u2b50 how must have it is to me strike-through recommended in past but discommend now"},{"location":"dev-notes/devbox/devbox-win-tools/#windows-privacy","title":"Windows Privacy","text":"<ul> <li>\u2b50\u2b50\u2b50 privacy.sexy: open-source tool to enforce privacy &amp; security best-practices on Windows and macOS</li> <li>github repo</li> <li>\u2b50\u2b50 O&amp;O ShutUp10++: Free antispy tool for Windows 10 and 11</li> <li>\u2b50\u2b50 O&amp;O AppBuster: uninstall useless preinstalled windows apps/bloatware</li> <li>WPD: windows privacy dashboard</li> </ul>"},{"location":"dev-notes/devbox/devbox-win-tools/#making-windows-tolerable","title":"Making Windows tolerable","text":"<ul> <li>\u2b50 Chocolatey: package manager for windows</li> <li>\u2b50 Keypirinha: launcher like alfred/quicksilver</li> <li>\u2b50 Cmder: terminal emulator</li> <li>\u2b50 Everything: fast search</li> <li>\u2b50 Rapidee: environment vars editor</li> <li>\u2b50 7PlusTaskbarTweaker: saner taskbar settings</li> <li>\u2b50 MS PowerToys: better window manager and other niceties</li> <li>\u2b50 XYplorer: better and performant file manager</li> <li>\u2b50 uBlock Origin: ad block</li> <li>\u2b50 Sioyek: PDF viewer designed for reading research papers and technical books</li> <li>\u2b50 BleachBit: disk space cleaner, Privacy Manager and System Optimizer</li> <li>\u2b50 Safing Portmaster: excellent firewall</li> <li>WizTree: fast disk space analyzer</li> <li>BCUninstaller: bulk program uninstaller with advanced automation</li> <li>Remote Desktop Connection Manager</li> <li>1Password: password manager with better integration across mobile apps/sites</li> <li>Adobe Creative Cloud Uninstaller</li> <li>if you install adobe stuff, do yourself a favor and remove the 12 services they install for lulz even when you're not using any adobe product </li> <li>you can uninstall CreativeCloud desktop app while keeping photoshop/premiere/etc</li> <li>Firefox</li> <li>Tree Style Tab Extension: Tree column view of all your tabs</li> <li>Stylus Extension: make youtube distraction free and remove notifications/likes showing up on page</li> <li>Clover: Tabs in explorer</li> <li>\u2b50 Display Fusion: virtualize desktop; use it to split my 33\" monitor into two virtual monitors</li> <li>Duet + iPad Pro 3<sup>rd</sup> Gen + Pencil: Turn my iPad Pro into a Cintiq</li> </ul>"},{"location":"dev-notes/devbox/devbox-win-tools/#media-apps","title":"Media Apps","text":"<ul> <li>\u2b50 yt-dlp: youtube-dl fork with additional features and fixes for downloading videos</li> <li>YouTube Transcript: web-based youtube transcripts</li> <li>yt-wsp: script to transcribe live stream VODs using<ul> <li>whisper.cpp: OpenAI Whisper C/C++ port</li> </ul> </li> <li>yt-whisper: automatic youtube subtitle generation</li> <li>LosslessCut: swiss army knife of lossless video/audio editing</li> <li>ScreenToGif: screen capture</li> </ul>"},{"location":"dev-notes/devbox/devbox-win-tools/#dcc","title":"DCC","text":"<ul> <li>\u2b50\u2b50\u2b50 Houdini: Deserves its own post but hands down my favorite program in recent memory. It's more like a platform with a built in DCC app. I use it for prototyping, machine learning, math visualization, everything</li> <li>\u2b50\u2b50\u2b50 PureRef: This is a god send for pulling references</li> <li>KeyframePro: video player for animators; allows markups and stuff</li> <li>3D Max: what I started with</li> <li>Maya: only use it enough to get around</li> <li>Marvelous Designer: for clothes</li> <li>RedShift: for renders; fast GPU + constant development unlike Octane</li> <li>Photoshop/Premiere</li> </ul>"},{"location":"dev-notes/devbox/devbox-win-tools/#sysadminpoor-mans-devops","title":"SysAdmin/Poor man's devops","text":"<ul> <li>\u2b50\u2b50\u2b50 SysInternals: Awesome set of windows sys tools</li> <li>\u2b50\u2b50\u2b50 AllTools: another awesome set of sysadmin tools by Pavel Yosifovich of Windows Internals fame</li> <li>\u2b50\u2b50\u2b50 SystemInformer: Built on sysinternals, it's a user friendly taskmanager/process explorer replacement</li> <li>\u2b50\u2b50 TotalRegistry: advanced registry editor by Pavel Yosifovich</li> <li>\u2b50\u2b50 O&amp;O RegEditor: better registry editor</li> <li>\u2b50 Rohitab Api Monitor: Amazingly well written; use it for api hooking</li> <li>Fermion: UI wrapper for Frida, a dynamic instrumentation toolkit</li> <li>NTLite: I use it to help my ghetto bare metal provisioning for windows</li> <li>Powershell: Powershell Desired State Configuration for poor man provisioning</li> <li>boxstarter</li> </ul>"},{"location":"dev-notes/devbox/devbox-win-tools/#researchpersonal-productivity","title":"Research/Personal Productivity","text":"<ul> <li>\u2b50\u2b50\u2b50 RescueTime: Auto track where my time goes</li> <li>\u2b50\u2b50\u2b50 Houdini</li> <li>\u2b50\u2b50\u2b50 Workflowy: tasking software</li> <li>\u2b50\u2b50\u2b50 Obsidian: Knowledge management alternate since OneNote isn't progressing</li> <li>Trillium: Currently trying this out as my onenote replacement</li> <li>Notion: Knowledge management alternate since OneNote isnt progressing</li> <li>\u2b50 Diigo: Knowledge repository integrated with google search</li> <li>\u2b50 Mathematica: Preferred it over matlab but has annoying learning curve</li> <li>Geogebra: powerful Math graphing calculator</li> <li>Desmos: online only Math graphing calculator</li> <li>Mathcha: math notebook bc screw latex; it's 2018</li> <li>SpeedCrunch: cli driven, high precision scientific calculator</li> <li>Qalculate!: multi-purpose desktop calculator</li> <li>OneNote: This was such an amazing program but hasn't seen much innovation in 4 years I've abandoned this since it's been rotting over the last 4 years.</li> <li>Mendeley: Knowledge repository for papers (where I store all my Siggraph papers) Turned to shit post Elsevier acquisition</li> </ul>"},{"location":"dev-notes/devbox/devbox-win-tools/#programming","title":"Programming","text":"<ul> <li>\u2b50\u2b50\u2b50 liveplusplus: imho, absolute necessity with UE4. Makes iteration bearable with fast hotreload. With plugin, you can get up &amp; running in 2 mins</li> <li>BeyondCompare</li> <li>Sublime Text</li> <li>Sublime Merge/Git Extensions</li> <li>UIForETW: Use this over Very Sleepy; pays dividends</li> <li>VS2017:</li> <li>\u2b50 visualassist: Makes large C++ codebases manageable</li> <li>Visual Commander: easy scriptable modification of VS UI (eg: autoattach to ue4 process with a button)</li> <li>Debug Single Thread</li> <li>RenderDoc</li> <li>Nvidia Nsight Graphics/PIX</li> <li>WinDbg: still has features vs debugger doesnt</li> <li>VSCode: Okay, I was a hater/skeptic but now I'm drinking the koolade. It's replacing sublime for me bc it's almost as fast/snappy</li> <li>vcpkg: C++ library manager that surprisingly works</li> <li>PVS Studio: Static Analyzer</li> </ul>"},{"location":"dev-notes/devbox/devbox-win-tools/#scripting","title":"Scripting","text":"<ul> <li>Python: MiniConda3 distro. Libs I use as python novice</li> <li>\u2b50 click: Make easy CLI apps</li> <li>\u2b50 cogapp: use it for our inline C++ codegen</li> <li>\u2b50 boltons</li> <li>\u2b50 glom</li> <li>colorama</li> <li>winregistry</li> <li>requests</li> <li>pybars3</li> <li>hsluv</li> <li>p4python</li> <li>Powershell</li> <li>Shadershop: Dont use it bc its proof of concept but wanted to sneak it here so someone can fully flesh it out. Silly in 2018 we still have to do this in our heads (but real motivation is my brain is getting older and can't do it as well anymore #MathIsASportForTheYoung)</li> </ul>"},{"location":"dev-notes/devbox/devbox-win-tools/#more-resources","title":"More Resources","text":"<ul> <li>other good lists</li> <li>@kenpex's Tools That I Use</li> <li>Scott Hanselman's Ultimate Developer and Power Users Tool List for Windows</li> <li>Curated List of Windows Utilities</li> <li>Portapps: collection of portable applications for Windows</li> </ul>"},{"location":"dev-notes/homelab/selfhost-backup/","title":"SelfHost Backup Guide","text":""},{"location":"dev-notes/homelab/selfhost-backup/#overview","title":"Overview","text":"<ul> <li>What do you use for backup?</li> </ul> <p>[!quote] restic: If you are comfortable at the command line, my choice of backup for Linux/NAS devices is restic for data. Makes a repo of the data and stores it incrementally so you can go back through time and pick which backup you want. You mentioned you don't need cloud, but if you ever wanted it, restic is also powerful because it connects to rclone and that can be sent to a myriad of cloud providers</p> <p>syncthing: To backup important data on my widows clients I have a NAS where all of the important stuff goes (and it is backed up with restic), and I use syncthing for those whom don't have access to the NAS on their LAN. I also use Syncthing for the users that cannot be trained to use the NAS. Syncthing uses the NAS as its backend storage, which then of course is backed up with restic</p> <p>rsync to USB drive: I no longer do this becuase I went to restic/rclone to have a 3<sup>rd</sup> copy of my data and have it be offsite, but before I had that, I would monthly take a USB drive called my ColdBackup and stored in my firebox and stored offsite and then just use rsync to move the data to the USB drive.</p> <p>general advice: Keep as much of the data as you can in ONE location, then just backup that one location. This is exactly what I do with my NAS (which is ZFS underneath it, but that is outside the scope of backup) and it just makes life so much easier with it all in one place.</p> <p>Consider cloud as well if privacy is your only concern. Resctic/rlcone has a way (which I do use) where everything is encrypted before it ever goes to them. So I don't worry about that aspect of it. If cost for cloud is your concern, that is a real concern you have to think about.</p> <p>I have actually been trying to find some like minded people like myself that would want to data swap with me, where I keep my encrypted backups on their servers and they keep theirs on mine. I will find them eventually and move from cloud myself very likely.</p> <ul> <li>What is the benefit of using duplicity/restic/borg over rclone</li> </ul> <p>[!quote] Rclone/syncthing/resilio/etc are sync tools.</p> <p>Duplicacy/duplicity/borg/restic/Kopia/etc are backup tools.</p> <p>The instrumental difference is obviously versioning and snapshot history. (Yes, you can have rudimentary versioning with rclone too, but it's just that - rudimentary per file full copies in a separate folder - good luck trying to restore consistent state from that). Backup tools provide you a way back machine to recover coherent state of your data arbitrary amount of time in the past, and do it efficiently minimizing storage space and bandwidth required.</p> <p>If you don't want to go to all nitty gritty details go by intent: if you want backup - use backup tools. If you want sync - use sync tools. Sync is not a backup for obvious reasons.</p> <p>The exception could be backup of immutable and incompressible data - like photos and videos where change always means corruption and the nature of the data does not lend itself to deduplication. Then you can get away with rclone versioning - to protect good version from being overwritten with a bad one. But then you have two solitons to maintain - much as well backup everything together with a proper backup app.</p>"},{"location":"dev-notes/homelab/selfhost-guide/","title":"SelfHost Guide","text":""},{"location":"dev-notes/homelab/selfhost-guide/#resources","title":"Resources","text":"<ul> <li>Self Hosting Guide</li> <li>Awesome Selfhosted</li> <li>Awesome Sysadmin</li> <li>degoogle</li> <li>Awesome Privacy</li> <li>/r/truenas</li> <li>/r/selfhosted</li> </ul>"},{"location":"dev-notes/homelab/selfhost-guide/#hardware","title":"Hardware","text":"<ul> <li>/r/homelabsales</li> <li>Homelab Hardware Recommendations Guide</li> <li>Hardware Buying Guide: Tips For Not Getting Ripped Off</li> </ul>"},{"location":"dev-notes/homelab/zfs-cheatsheet/","title":"ZFS Cheatsheet","text":""},{"location":"dev-notes/homelab/zfs-cheatsheet/#resources","title":"Resources","text":""},{"location":"dev-notes/homelab/zfs-cheatsheet/#highlevel-guides","title":"Highlevel Guides","text":"<ul> <li>ZFS 101: understanding ZFS storage and performance</li> <li>ZFS Guide for starters and advanced users: concepts, pool config, tuning, troubleshooting</li> <li>ZFS Administration</li> <li>Understanding ZFS vdev Types</li> </ul>"},{"location":"dev-notes/homelab/zfs-cheatsheet/#detail-guides","title":"Detail Guides","text":"<ul> <li> <p>A Detailed Guide to TrueNAS and OpenZFS</p> </li> <li> <p>Zero to TrueNAS as Fast as Possible: A highly-distilled TrueNAS guide that gets straight to the point and aims to provide the basic understanding necessary to get started</p> </li> <li>Hardware for CORE and SCALE: A guide to optimal hardware selection for any size TrueNAS system from a 1 TiB simple home server to 10 PiB of enterprise-class flash</li> <li>OpenZFS: The Final Word in File Systems: A deep-dive into nearly every aspect of OpenZFS administration and a closer look at many of the mechanisms that make ZFS the final word in file system</li> <li>OpenZFS Capacity Calculator: A calculator application and guide on how to precisely determine the usable capacity and several other metrics of a ZFS storage pool</li> <li>RAID Reliability Calculator: A calculator and guide that lets you determine and compare the probability of a pool failure given a certain RAID layout and disk failure rate</li> <li>RAIDZ Allocation Overhead: A deep dive into the causes and the math behind RAIDZ allocation overhead including advise on how to minimize this on your own OpenZFS pool</li> <li>ZFS Performance Overview: A discussion of how different OpenZFS pool designs and vdev layouts impact storage performance, reliability, and capacity</li> <li> <p>ixsystems</p> </li> <li> <p>ZFS Storage Pool Layout on Pool Performance</p> <ul> <li>Choosing The Right ZFS Pool Layout</li> <li><code>IOPS = 1000 / (AverageSeekTime + AverageLatency)</code> where values expressed in <code>ms</code></li> <li><code>Latency_HDD = 0.5 * (1/RPM) * 60000ms</code></li> <li><code>Latency_SSD ~= 0.1ms</code></li> <li>HDD disk <code>IOPS</code> depends on time disk platter takes to spin halfway around e.g. <code>T/2 = 1/2\u22c5\u03c9</code></li> <li>SSD does not have rotating platters</li> <li><code>Average Seek Time</code>/<code>Average Latency</code> can be found in manufacturer datasheet/product manual (e.g. IronWolf)</li> <li><code>HDD      ~= 55 to 180 IOPS</code></li> <li><code>SATA_SSD ~= 3,000 to 40,000 IOPS</code></li> <li><code>NVMe_SSD ~= 100,000 to 500,000 IOPS</code></li> </ul> </li> <li>Featured resources<ul> <li>Resources List including Detailed Hardware and System Build Notes (plus new user advice / help)</li> <li>Hard Drive Burn-in Testing</li> </ul> </li> <li>How to: Backup to local disks</li> <li> <p>Practical ZFS</p> </li> <li> <p>mercenary_sysadmin's comments: /r/zfs moderator/domain expert who frequently answers questions</p> </li> <li>ZFS: You should use mirror vdevs, not RAIDZ</li> <li>ZFS RAIDZ stripe width, or: How I Learned to Stop Worrying and Love RAIDZ</li> </ul>"},{"location":"dev-notes/homelab/zfs-cheatsheet/#zfs-on-unraid","title":"ZFS on Unraid","text":"<ul> <li>Unraid-zfs 6.12.3: My setup, more things I learned along the way</li> <li>Things I have learned with zfs on unraid 6.12</li> <li>Unraid-Zfs: what is an dataset?</li> </ul>"},{"location":"dev-notes/homelab/zfs-cheatsheet/#overview","title":"Overview","text":""},{"location":"dev-notes/homelab/zfs-cheatsheet/#terminology-reference","title":"Terminology Reference","text":"<ul> <li>Vdev: ZFS virtual device, a group of one or more disks usually with some redundancy like mirroring or RAIDZ.</li> <li>Mirror vdev: Every disk in the vdev gets an identical copy of all data. Usually consists of 2 disks but can have more.</li> <li>RAIDZ1: Like RAID5, some number of data disks plus one parity disk (N+1).</li> <li>RAIDZ2: Like RAID6, some number of data disks plus two parity disks (N+2).</li> <li>RAIDZ3: Some number of data disks plus three parity disks (N+3).</li> <li>zpool: The logical ZFS volume or array consisting of one or more vdevs.</li> <li>Resilver: ZFS term for rebuilding a pool after a drive fails and is replaced.</li> <li>Scrub: Automatic scan of a pool to verify checksums and correct data corruption.</li> <li>Dataset: The logical container where ZFS stores data. There are four types of datasets: file systems, volumes, snapshots, and bookmarks. \"Dataset\" can also refer to a file system dataset.</li> <li>Zvol: Shorthand for a volume dataset. A zvol acts as a raw block device. ZFS carves out a chunk of disk space to be used by block sharing protocols like iSCSI.</li> <li>ARC: Adaptive Replacement Cache, the algorithm used by ZFS to cache data. Also refers to the cache itself which exists in a system's main memory. The ARC is shared by all pools on a system.</li> <li>L2ARC: A second tier of cache under the ARC. Despite its name, L2ARC uses a simple ring buffer algorithm and is typically deployed on one or more fast SSDs. L2ARCs are assigned per pool.</li> <li>ZIL: The ZFS intent log. Stable storage that acts as a temporary landing zone for incoming sync writes. Every pool has a ZIL regardless of whether the pool has a SLOG.</li> <li>SLOG: A separate device for the ZFS intent log (s**parate **log device, hence SLOG device). Added to a pool as a fast SSD if it's handling latency-sensitive sync writes. Like the L2ARC, it is assigned per pool.</li> <li>Snapshot: A read-only historical reference copy of a dataset. Only consumes space based on changed data since the snapshot was taken.</li> <li>Clone: A mounted, read/write copy of a snapshot. Can be used to recover files from a snapshot or to provide a new, separate working set of data.</li> </ul>"},{"location":"dev-notes/homelab/zfs-cheatsheet/#details","title":"Details","text":"<p><code>devices</code> -&gt; <code>vdevs</code>  -&gt; <code>zpool</code>  -&gt; <code>datasets</code></p> <ul> <li> <p><code>zpool</code>: top-level ZFS structure </p> </li> <li> <p>roughly analogous to JBOD with complex distribution mechanism      &gt;       &gt; [!danger] redundancy is at the <code>vdev</code> not <code>zpool</code> level      &gt; losing a <code>vdev</code> =&gt; losing the entire <code>zpool</code>. There is absolutely no redundancy at the <code>zpool</code> level</p> </li> <li> <p>common misconception that ZFS \"stripes\" writes across the pool</p> <ul> <li>writes are mostly distributed across <code>vdevs</code> w.r.t their available free space</li> <li>ensures all <code>vdevs</code> will theoretically become full at the same time</li> </ul> </li> <li><code>zpools</code> cannot share <code>vdevs</code> with one another</li> <li> <p><code>vdev</code>: virtual device </p> </li> <li> <p>consists of one or more real <code>devices</code></p> </li> <li>mostly used for plain storage, but special vdevs exist (e.g. <code>CACHE</code>, <code>LOG</code>, <code>SPECIAL</code>)</li> <li><code>single-device</code>: cannot survive any failure; if used as storage or <code>SPECIAL</code>, failure will take the entire <code>zpool</code> down with it</li> <li><code>mirror</code>: each block is stored on every device in the vdev</li> <li><code>RAIDz1-3</code>: diagonal parity RAID where n is # of max disk failures</li> <li> <p><code>device</code>: just a random-access block device i.e. SSD/HDD</p> </li> <li> <p>simple raw file useful alternative block devices for testing/practice</p> </li> <li> <p><code>dataset</code>: roughly analogous to a standard, mounted filesystem</p> </li> <li> <p>has its own set of underlying properties e.g. <code>quota</code></p> </li> <li><code>dataset properties</code><ul> <li><code>recordsize</code>: upper limit on how big chunks ZFS allocates to disk</li> <li><code>128k</code> default</li> <li>datasets with purely small stuff benefit from lower recordsize while large media datasets work just fine with 1M or higher</li> <li>You can split a 1MB file into 256 pieces or use a large 1M box</li> <li>HDD loves large blocks but reading/writing the whole MB just to change a bit somewhere in the middle is far from efficient</li> <li><code>compression</code>: sets compression algorithm</li> <li><code>LZ4</code> is default; really fast (GB/s per core) compared to achieved compression</li> <li><code>ZSTD</code> is the new and fancy kid on the block and very efficient</li> <li><code>GZIP</code> is available too, but slow</li> <li>recomend to use compression</li> <li><code>atime</code>: you want to turn this off immediately unless you absolutely need atime</li> <li><code>casesensitivity</code>: useful when dealing with Windows clients and everything where case sensitivity may become a problem</li> <li><code>sync</code>: consult the SLOG paragraph above on why you may want to change sync</li> <li><code>copies</code>: you can store multiple copies of data in a dataset</li> <li>like a RAID1 on a single disk but only within this dataset</li> <li>useful for very important data or when you don't have redundancy in the first place but still want self-healing of corrupt data</li> <li>doesn't protect against drive failure</li> <li><code>mountpoint</code>: where you want the dataset to be mounted in the system</li> <li><code>primarycache</code>/<code>secondarycache</code>: you can exclude datasets from cache</li> <li>or exclude everything by default and only allow some datasets to use cache</li> <li>primary being ARC and secondary being L2ARC</li> </ul> </li> <li> <p><code>zvol</code>: roughly analogous to a <code>dataset</code> without filesystem</p> </li> <li> <p><code>blocks</code>: all data/metadata is stored in blocks </p> </li> <li> <p><code>recordsize property</code>: max block size in <code>dataset</code></p> </li> <li>files composed of one or more blocks; block references only one file's data</li> <li> <p><code>ashift property</code>: the binary exponent which represents sector size e.g. <code>ashift=9</code> =&gt; <code>sector size = 2^9 = 512 bytes</code>      &gt;       &gt; [!danger] many disks lie about what their sector size causing an astronomical read/write amplification penalty      &gt; For Samsung EVO SSD which should have <code>ashift=13</code> but reports <code>ashift=9</code></p> </li> <li> <p><code>sectors</code>: smallest physical unit that can be written to or read from its underlying device </p> </li> <li> <p>most disks use 4KiB sectors with some SSDs using 8KiB sectors</p> </li> </ul>"},{"location":"dev-notes/homelab/zfs-cheatsheet/#tuning","title":"Tuning","text":"<ul> <li> <p>ZFS Performance: RAIDz1 vs mirroring</p> </li> <li> <p>ZFS Raidz Performance, Capacity and Integrity</p> </li> <li> <p>ZFS Record Sizes for Different Workloads</p> </li> <li> <p>Battle testing ZFS, Btrfs and mdadm+dm-integrity</p> </li> <li> <p>ZFS tuning cheat sheet</p> </li> <li> <p>Pro tip, don't go crazy with datasets; nifty for snapshots and zfs-send/receive-ing, but they are their own filesystems.</p> </li> </ul> <p>[!note]+ Moving files/folders across <code>datasets</code> requires <code>copy+delete</code> even if <code>datasets</code> are nested/in same <code>zpool</code> Analogous to moving data across drives in windows (e.g. <code>fooFolder</code> from <code>c:\\</code> to <code>d:\\</code>) Bad: <code>/tv/</code>, <code>/movies/</code>, <code>/downloads/</code> as separate <code>datasets</code> Good: <code>/media/</code> dataset with folders <code>/media/tv/</code>, <code>/media/movies/</code>, <code>/media/downloads/</code></p> <ul> <li>Improve performance when browsing millions of files in ZFS by setting arc_meta_min</li> </ul> <p>[!quote] If you have a lot of files, like hundreds of thousands or millions photos on hard drives, there's a setting in ZFS you can change to improve performance when indexing or browsing the files.</p> <p>Going through my 682,000 files went 64 seconds to only 5 seconds. It's amazing. ZFS usually keeps metadata cached in ARC but it's not very smart when ARC gets full. You can set <code>arc_meta_min</code> to large enough to hold all the metadata, and then fill the arc metadata cache, so this will improve performance for rsync, find, or anything that scans through all the files and folders.</p> <p>I can even scan and navigate the entire directory tree with the disks spun down, it's like the Dynamix cache dirs plugin but way better.</p> <p>On unraid, you can do this</p> <ol> <li>Run a command to scan all files, eg. <code>ls -lahR /mnt/zpool/ &gt; /dev/null</code> and see how long it takes (minutes)</li> <li><code>cat /proc/spl/kstat/zfs/arcstats</code> and check how much <code>arc_meta_used</code> (if it's close to <code>arc_meta_max</code> then maybe increase your arc size and try again)</li> <li>Scan all files again and see how much faster it is (few seconds)</li> <li>Copy large file (several GB) from the ZFS share to your PC</li> <li>Scan all files again, if the times are all about the same then stop here because this won't help, but if it's slow then continue</li> <li>Make <code>zfs_arc_meta_min</code> a bigger number than your <code>arc_meta_used</code> in step 2 by doing <code>echo 3088630576 &gt;&gt; /sys/module/zfs/parameters/zfs_arc_meta_min</code> with your number</li> <li>Try steps 1 - 5 again, scanning should be always fast now</li> <li>To make the setting permanent, create/edit <code>/boot/config/modprobe.d/zfs.conf</code> and put <code>options zfs zfs_arc_meta_min=3088630576</code> there with your number</li> </ol> <ul> <li> <p><code>recordsize</code>: general rules of thumb</p> </li> <li> <p><code>1M</code>:  Sequential workloads</p> </li> <li><code>1M</code>:  General-purpose file sharing/storage</li> <li><code>1M</code>:  BitTorrent download folders</li> <li><code>64K</code>: KVM virtual machines using Qcow2 file-based storage</li> <li><code>16K</code>: MySQL/InnoDB</li> <li><code>8K</code>:  PostgreSQL</li> </ul>"},{"location":"dev-notes/homelab/zfs-for-dummies/","title":"ZFS for Dummies","text":"<p>As mentioned on previous posts, I have spent the past few weeks dealing with a ZFS crash on my FreeNAS install. Because of that, not only was I forced to learn how to troubleshoot ZFS, but I also had to learn how to setup new volumes and come up with new backup strategies (between a few other things).</p> <p>This was a great opportunity for me to learn more about ZFS (because I new \u2018nada\u2019 to start with). And I\u2019m happy to share some of the knowledge that I gathered with you on this post.</p> <p>Please keep in mind that I don\u2019t consider myself an expert on ZFS (not even close), but I will try to make things simple and easy to understand for someone, who like me, is just getting started with ZFS.</p>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#about-zfs","title":"About ZFS","text":"","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#what-is-zfs-and-its-history","title":"What is ZFS and It\u2019s History","text":"<p>ZFS is a local filesystem (i.e.: ext4, NTFS, exfat) and logical volume manager (i.e.: LVM on Linux) created by Sun Microsystems. ZFS was published under an open source license until Oracle bought Sun Microsystems and closed source the license. Because the source code was already in the open and ported to different OSs, eventually a project called \u2018OpenZFS\u2019 was created, and that is the core code that is used on most Unix like systems today (Linux, FreeBSD, etc.).</p>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#zfs-components","title":"ZFS Components","text":"","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#vdev","title":"vdev","text":"<p>A vdev is composed of one or more physical drives (can also be of things other than hard drive, like files). They can be combined together in mirrors or RAIDZs.</p> <p></p> <p>\ud83d\udca1 TIP: There are 7 different types of vdevs, and some of them (like host spare, L2ARC and ZIL) are very important.</p>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#pool","title":"Pool","text":"<p>A pool is composed of one or more vdevs and they usually contain a volume or a dataset (which you create after creating the pool). You create/define your vdevs when you create a pool (with the <code>zpool</code> command which we\u2019ll see later). This allows you to mix vdev types together to achieve other RAIDZ levels (see example below):</p> <p></p>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#datasets","title":"Datasets","text":"<p>Dataset is the filesystem part of ZFS (so far we\u2019ve seen the LVM components). Here you can define user access, quotas, compression, snapshots, etc\u2026</p>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#volume","title":"Volume","text":"<p>Volume is the brother of datasets but in a block device representation. It provides some of the features that datasets have, but not all. Volumes can be useful to run other filesystems on top of ZFS, or to export iSCSI extents.</p>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#raidz-types","title":"RAIDZ Types","text":"<ul> <li>Dynamic/Simple Stripe (RAID0) - Distributes data without parity. Loosing a device means loosing all data</li> <li>MIRROR (RAID1) - Mirrored drives. Used with 2 to 4 disks (or more)</li> <li>RAIDZ-1 (RAID5) - Distributes parity along with the data and can lose one physical drive before a raid failure. RAIDZ requires at least 3 disks</li> <li>RAIDZ-2 (RAID6) - Distributes parity along with the data and can lose up to 2 physical drives. RAIDZ-2 requires at least 4 disks</li> <li>RAIDZ-3 - Distributes parity along with the data and can lose up to 3 physical drives. RAIDZ-3 requires at least 4, but should be used with no less than 5 disks</li> </ul>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#commands","title":"Commands","text":"<p>Let\u2019s take a look at the most common commands for handling ZFS pools and filesystem. We\u2019ll use <code>/dev/sdx</code> to refer to device names, but keep in mind that using the device UUID is preferred in order to avoid boot issues due to device name changes.</p>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#1zfs-pool-commands","title":"1.ZFS Pool Commands","text":"<p>These are the commands related to creating vdevs and pools. We will be looking at:</p> <ul> <li><code>zpool create</code> - Create a pool (and vdevs)</li> <li><code>zpool status</code> - Displays pool status</li> <li><code>zpool list</code> - List pool and it\u2019s details</li> <li><code>zpool history</code> - Shows history of commands for zpool</li> <li><code>zpool import</code>- Imports and mounts pool</li> <li><code>zpool export</code> - Exports and unmounts pool</li> <li><code>zpool destroy</code> - Destroy pool and all filesystems</li> <li><code>zpool scrub</code> - Starts scrub of pool</li> </ul>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#11creating-a-pool-and-vdevs","title":"1.1.Creating a Pool (and vdevs)","text":"<p>To create a new pool we use the <code>zpool create</code> command. We specify the pool name and the device we want to use.</p> <p>It\u2019s basic usage is:</p> Text Only<pre><code># zpool create [pool] [devices]\n</code></pre> <p>Now let\u2019s look at different examples for this command.</p>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#create-a-pool-on-a-single-disk","title":"Create a pool on a single disk","text":"<p>The command below creates a pool on a single disk.</p> Text Only<pre><code># zpool create tank /dev/sdb  \n</code></pre>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#create-a-dynamic-stripe-pool-on-3-disks","title":"Create a dynamic stripe pool on 3 disks","text":"<p>Remember that dynamic stripe is the same as RAID0 and that it has no parity.</p> Text Only<pre><code># zpool create tank /dev/sdb /dev/sdc /dev/sdd\n</code></pre> <p>We can view the new pool with <code>zpool status</code></p> Text Only<pre><code>root@ubuntu-vm:~# zpool status\n  pool: tank\n state: ONLINE\n  scan: none requested\nconfig:\n\nNAME        STATE     READ WRITE CKSUM\ntank        ONLINE       0     0     0\n  sdb       ONLINE       0     0     0\n  sdc       ONLINE       0     0     0\n  sdd       ONLINE       0     0     0\n\nerrors: No known data errors\n</code></pre> <p>Note that the pool name is \u2018tank\u2019 and the vdevs are \u2018sdb\u2019, \u2018sdc\u2019 and \u2018sdd\u2019</p>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#create-a-mirrorred-pool-on-2-disks","title":"Create a mirrorred pool on 2 disks","text":"Text Only<pre><code># zpool create tank mirror sdb sdc\n</code></pre> <p>Note that I can omit <code>/dev</code> and give the device name. Let\u2019s view the result.</p> Text Only<pre><code># zpool status\n  pool: tank\n state: ONLINE\n  scan: none requested\nconfig:\n\nNAME        STATE     READ WRITE CKSUM\ntank        ONLINE       0     0     0\n  mirror-0  ONLINE       0     0     0\n    sdb     ONLINE       0     0     0\n    sdc     ONLINE       0     0     0\n\nerrors: No known data errors\n</code></pre> <p>Our vdev is \u2018mirror-0\u2019 and our pool is tank.</p>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#create-a-raid-z-pool","title":"Create a RAID-Z pool","text":"Text Only<pre><code># zpool create tank raidz sdb sdc sdd\n</code></pre> <p>And the result indicating that my vdev is RAIDZ1.</p> Text Only<pre><code>root@ubuntu-vm:~# zpool status\n  pool: tank\n state: ONLINE\n  scan: none requested\nconfig:\n\nNAME        STATE     READ WRITE CKSUM\ntank        ONLINE       0     0     0\n  raidz1-0  ONLINE       0     0     0\n    sdb     ONLINE       0     0     0\n    sdc     ONLINE       0     0     0\n    sdd     ONLINE       0     0     0\n\nerrors: No known data errors\n</code></pre> <p>You can use the same command to create RAIDZ2,3 pools.</p> Text Only<pre><code># zpool create [pool name] raidz[1,2,3] [devices]\n</code></pre>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#specifying-a-default-mount-point-for-the-pool","title":"Specifying a default mount point for the pool","text":"<p>You can also specify the default mount point for the pool by using the <code>-m</code> flag as you create it.</p> Text Only<pre><code># zpool create tank -m /mnt/tank mirror sdb sdc\n</code></pre> <p>We can see that our new pool was created and mounted at <code>/mnt/tank</code></p> Text Only<pre><code># zfs list\nNAME   USED  AVAIL     REFER  MOUNTPOINT\ntank    99K  4.36G       24K  /mnt/tank\n</code></pre> <p>\ud83d\udca1 TIP: Also read up on the <code>zpool add</code> command.</p>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#12getting-pool-status","title":"1.2.Getting Pool Status","text":"<p>After we create a new pool it\u2019s automatically imported into our system. As we have seen before, we can view details of the pool with the <code>zpool status</code> command.</p> Text Only<pre><code># zpool status tank\n  pool: tank\n state: ONLINE\n  scan: none requested\nconfig:\n\nNAME        STATE     READ WRITE CKSUM\ntank        ONLINE       0     0     0\n  mirror-0  ONLINE       0     0     0\n    sdb     ONLINE       0     0     0\n    sdc     ONLINE       0     0     0\n\nerrors: No known data errors\n</code></pre> <p>Some of the fields we did not look before are:</p> <ul> <li><code>state:</code> Indicates if pool is online or not</li> <li><code>status:</code> Additional information about the pool</li> <li><code>action:</code> Indicates if there are any pending actions for the pool</li> <li><code>scan:</code> If a scrub is in progress or the last scrub run status</li> <li><code>errors:</code> Indicates if there are any problems with the pool</li> </ul> <p>For example:</p> Text Only<pre><code># zpool status tank\n  pool: tank\n state: ONLINE\nstatus: Some supported features are not enabled on the pool. The pool can\n        still be used, but some features are unavailable.\naction: Enable all features using 'zpool upgrade'. Once this is done,\n        the pool may no longer be accessible by software that does not support\n        the features. See zpool-features(7) for details.\n  scan: scrub repaired 0 in 0 days 03:37:12 with 0 errors on Wed Oct 28 03:37:13 2020\nconfig:\n\nNAME        STATE     READ WRITE CKSUM\ntank        ONLINE       0     0     0\n  mirror-0  ONLINE       0     0     0\n    sdb     ONLINE       0     0     0\n    sdc     ONLINE       0     0     0\n\nerrors: No known data errors\n</code></pre> <p>Another example:</p> Text Only<pre><code># zpool status -v tank\n  pool: tank\n state: ONLINE\nstatus: One or more devices has experienced an error resulting in data\n    corruption.  Applications may be affected.\naction: Restore the file in question if possible.  Otherwise restore the\n    entire pool from backup.\n   see: http://illumos.org/msg/ZFS-8000-8A\n  scan: scrub repaired 0 in 0 days 04:21:43 with 0 errors on Sun Feb 23 04:21:45 2020\nconfig:\n\nNAME        STATE     READ WRITE CKSUM\ntank        ONLINE       0     0     0\n  mirror-0  ONLINE       0     0     0\n    sdb     ONLINE       0     0     0\n    sdc     ONLINE       0     0     0\n\nerrors: Permanent errors have been detected in the following files:\n\n        tank:&lt;0xdcca&gt;\n</code></pre>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#13listing-pools","title":"1.3.Listing Pools","text":"<p>As we have seen before, we can view some details of the pool with the <code>zpool status</code> command. But there are other commands, like <code>zpool list</code> that can give us information about the pool.</p> Text Only<pre><code># zpool list {pool name}\n</code></pre> <p>On the example below, we look at the details for our mirrored tank pool:</p> Text Only<pre><code># zpool list\nNAME   SIZE  ALLOC   FREE  CKPOINT  EXPANDSZ   FRAG    CAP  DEDUP    HEALTH  ALTROOT\ntank  4.50G   117K  4.50G        -         -     0%     0%  1.00x    ONLINE  -\n</code></pre>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#14show-pool-history","title":"1.4.Show Pool History","text":"<p>This is another useful command that displays the history of commands that were executed against a pool from it\u2019s creation (of course only commands that make changes to the pool\u2019s configuration).</p> Text Only<pre><code># zpool history tank\nHistory for 'tank':\n2020-11-02.15:02:53 zpool create tank -m /mnt/tank mirror sdb sdc\n2020-11-02.15:50:43 zpool scrub tank\n2020-11-02.15:53:30 zfs set compression=lz4 tank\n2020-11-02.15:54:03 zpool scrub tank\n</code></pre>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#15importing-pools","title":"1.5.Importing Pools","text":"<p>Usually after creating a pool it\u2019s set to import and mount automatically, but you may encounter scenarios where you need to manually import a pool (like when troubleshooting or after re-imaging a system).</p> <p>Note that the import command will also mount the pool.</p>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#lists-pools-available-to-import","title":"Lists pools available to import","text":"<p>Running the <code>zpool import</code> command without a pool name will show you a list of pools that can be imported.</p> <p>Example of when no pools are available to be imported.</p> Text Only<pre><code>root@ubuntu-vm:~# zpool import\nno pools available to import\n</code></pre> <p>Here we have a pool that can be imported.</p> Text Only<pre><code>root@ubuntu-vm:~# zpool import\n   pool: tank\n     id: 2008489828128587072\n  state: ONLINE\n action: The pool can be imported using its name or numeric identifier.\n config:\n\ntank        ONLINE\n  mirror-0  ONLINE\n    sdb     ONLINE\n    sdc     ONLINE\n</code></pre>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#importing-the-pool","title":"Importing the pool","text":"<p>Give the command a pool name and it will be imported.</p> Text Only<pre><code>root@ubuntu-vm:~# zpool import tank\n\nroot@ubuntu-vm:~# zpool list\nNAME   SIZE  ALLOC   FREE  CKPOINT  EXPANDSZ   FRAG    CAP  DEDUP    HEALTH  ALTROOT\ntank  4.50G   147K  4.50G        -         -     0%     0%  1.00x    ONLINE  -\n</code></pre> <p>You can also import all available pools by using the <code>-a</code> option.</p> Text Only<pre><code># zpool import -a\n</code></pre>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#importing-a-pool-with-an-alternate-root-location","title":"Importing a Pool with an Alternate Root Location","text":"<p>Use the <code>-R</code> flag to mount the pool to an alternate root location. Note that this is not the mount path for the pool, but an alternate root folder.</p> <p><code>tank</code> is by default configured to be mounted at <code>/mnt/tank</code></p> Text Only<pre><code>root@ubuntu-vm:~# zpool import -R /mnt/tank2 tank\n\nroot@ubuntu-vm:~# zfs list\nNAME   USED  AVAIL     REFER  MOUNTPOINT\ntank   117K  4.36G       24K  /mnt/tank2/mnt/tank\n</code></pre>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#16exporting-the-pool","title":"1.6.Exporting the Pool","text":"<p>As expected, this is the opposite of the import command. The export command attempts to unmount any mounted file systems within the pool before continuing.</p> Text Only<pre><code># zpool export [pool name]\n</code></pre> <p>For example:</p> Text Only<pre><code>root@ubuntu-vm:~# zpool export tank\n\nroot@ubuntu-vm:~# zpool list\nno pools available\n</code></pre> <p>If any of the file systems fail to unmount you can forcefully unmount them by using the <code>-f</code> option. However, if ZFS volumes exist and are in use, even with <code>-f</code> it will fail to export.</p>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#17destroyingdeleting-pools","title":"1.7.Destroying/Deleting Pools","text":"<p>We can use the <code>zpool destroy</code> command to delete pools and all its child datasets and/or volumes.</p> <p>\u26a0\ufe0f WARNING: This will delete all your data, including any snapshots your may have.</p> Text Only<pre><code>root@ubuntu-vm:~# zpool destroy tank\n\nroot@ubuntu-vm:~# zpool list\nno pools available\n\nroot@ubuntu-vm:~# zpool import\nno pools available to import\n</code></pre>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#18scrubbing-pools","title":"1.8.Scrubbing Pools","text":"<p>ZFS scrub checks every block in a pool against its known checksum to make sure that the data is valid. If you have vdevs with parity, ZFS scrub will also repair the data using healthy data from other disks. Scrubs should run on a schedule to make sure your systems stays healthy.</p>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#initiating-a-scrub","title":"Initiating a scrub","text":"<p>Initiating a scrub of a pool is as simple as running:</p> Text Only<pre><code># zpool scrub [pool]\n</code></pre>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#checking-the-status-of-a-scrub","title":"Checking the status of a scrub","text":"<p>You can check the status of a scrub with <code>zpool status</code> and looking for messages in the \u2018scan\u2019 section.</p> Text Only<pre><code>root@ubuntu-vm:/mnt/tank# zpool status tank\n  pool: tank\n state: ONLINE\n  scan: scrub repaired 0B in 0 days 00:00:03 with 0 errors on Tue Nov  3 16:26:23 2020\nconfig:\n\nNAME        STATE     READ WRITE CKSUM\ntank        ONLINE       0     0     0\n  mirror-0  ONLINE       0     0     0\n    sdb     ONLINE       0     0     0\n    sdc     ONLINE       0     0     0\n\nerrors: No known data errors\n</code></pre>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#stopping-a-scrub","title":"Stopping a scrub","text":"<p>Use the <code>-s</code> flag.</p> Text Only<pre><code># zpool scrub -s [pool]\n</code></pre>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#2zfs-filesystem-commands","title":"2.ZFS Filesystem Commands","text":"<p>Now we will look at the commands that will help us work with filesystems (datasets) and volumes. We will concentrate more on the filesystem side of things and will not cover volumes.</p> <p>The commands we will review are:</p> <ul> <li><code>zfs create</code> - Creates a new volume or filesystem</li> <li><code>zfs mount/umount</code> - Mounts the filesystem</li> <li><code>zfs list</code> - Lists datasets and snapshots</li> <li><code>zfs get/set</code> - Gets configuration and sets configuration for the dataset</li> <li><code>zfs snapshot</code> - Handles snapshots</li> <li><code>zfs diff</code> - Used to compare data between snapshot</li> <li><code>zfs rollback</code> - Rolls back a snapshot</li> <li><code>zfs send/recv</code> - Sends a snapshot as a stream of data</li> <li><code>zfs destroy</code> - Deletes datasets and snapshots</li> </ul>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#21-creating-datasets","title":"2.1. Creating Datasets","text":"<p>We can create datasets with the <code>zfs create</code> command. Here we create \u2018dataset1\u2019 as child of the \u2018tank\u2019 dataset (that was created automatically with the <code>zpool create</code> command).</p> Text Only<pre><code>root@ubuntu-vm:~# zfs create tank/dataset1\n\nroot@ubuntu-vm:~# zfs list\nNAME            USED  AVAIL     REFER  MOUNTPOINT\ntank            145K  9.36G     30.6K  /tank\ntank/dataset1  30.6K  9.36G     30.6K  /tank/dataset1\n</code></pre>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#creating-missing-parent-datasets","title":"Creating missing parent datasets","text":"<p>We can also create missing parent datasets with the <code>-p</code> flag (similar to <code>mkdir -p</code>).</p> Text Only<pre><code>root@ubuntu-vm:~# zfs create tank/dataset1/childset1/childset2\ncannot create 'tank/dataset1/childset1/childset2': parent does not exist\n\nroot@ubuntu-vm:~# zfs create -p tank/dataset1/childset1/childset2\n\nroot@ubuntu-vm:~# zfs list\nNAME                                USED  AVAIL     REFER  MOUNTPOINT\ntank                                249K  9.36G     30.6K  /tank\ntank/dataset1                      30.6K  9.36G     30.6K  /tank/dataset1\ntank/dataset1/childset1            61.3K  9.36G     30.6K  /tank/dataset1/childset1\ntank/dataset1/childset1/childset2  30.6K  9.36G     30.6K  /tank/dataset1/childset1/childset2\n</code></pre>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#22-mounting-filesystems-datasets","title":"2.2. Mounting Filesystems (Datasets)","text":"<p>We can use the <code>zfs mount/unmount</code> commands to view the current mount points as well as mounting/unmounting filesystems.</p>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#viewing-current-mounted-filesystems","title":"Viewing current mounted filesystems","text":"<p>Without any arguments, <code>zfs mount</code> will display all mounted zfs filesystems and their respective mount points (without the child datasets).</p> Text Only<pre><code>root@ubuntu-vm:~# zfs mount\ntank                            /tank\n</code></pre>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#mounting-filesystems","title":"Mounting filesystems","text":"<p>Use <code>zfs mount [pool|dataset]</code> to mount filesystems. On the example below we use <code>zfs mount</code> to establish that no datasets are mounted, and then we mount the \u2018tank\u2019 dataset and confirm that is mounted with <code>zfs mount</code>.</p> Text Only<pre><code>root@ubuntu-vm:~# zfs mount\n\nroot@ubuntu-vm:~# zfs mount tank\n\nroot@ubuntu-vm:~# zfs mount\ntank                            /tank\n</code></pre> <p>Use the <code>-a</code> option to mount all filesystems.</p>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#mount-a-child-dataset","title":"Mount a child dataset","text":"<p>You can also mount a child dataset without the parent datasets. For example, here we confirm that \u2018tank\u2019 is not mounted, then we look at the available datasets, and we execute the command to mount the <code>tank/dataset2/childset2</code> dataset only.</p> Text Only<pre><code>root@ubuntu-vm:~# zfs mount\n\nroot@ubuntu-vm:~# zfs list\nNAME                                USED  AVAIL     REFER  MOUNTPOINT\ntank                                249K  9.36G     30.6K  /tank\ntank/dataset1                      30.6K  9.36G     30.6K  /tank/dataset1\ntank/dataset2                      91.9K  9.36G     30.6K  /tank/dataset2\ntank/dataset2/childset2            61.3K  9.36G     30.6K  /tank/dataset2/childset2\ntank/dataset2/childset2/childset2  30.6K  9.36G     30.6K  /tank/dataset2/childset2/childset2\n\nroot@ubuntu-vm:~# zfs mount tank/dataset2/childset2\n\nroot@ubuntu-vm:~# zfs mount\ntank/dataset2/childset2         /tank/dataset2/childset2\n</code></pre> <p>Note that this will create the required path in the OS filesystem to mount the child dataset. If you decide to mount the parent dataset later you may run into a <code>directory is not empty</code> error because of the created directories.</p>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#unmounting-filesystems","title":"Unmounting filesystems","text":"<p>Run<code>zfs unmount</code> and specify the dataset name.</p> Text Only<pre><code>root@ubuntu-vm:~# zfs mount\ntank                            /tank\n\nroot@ubuntu-vm:~# zfs unmount tank\n\nroot@ubuntu-vm:~# zfs mount\n</code></pre>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#23-listing-filesystems-datasets","title":"2.3. Listing Filesystems (Datasets)","text":"<p>You can list the dataset by running <code>zfs list [dataset name]</code>.</p> Text Only<pre><code>root@ubuntu-vm:~# zfs list tank\nNAME   USED  AVAIL     REFER  MOUNTPOINT\ntank   253K  9.36G     30.6K  /tank\n</code></pre> <p>And you can also specify the mount point as an argument.</p> Text Only<pre><code>root@ubuntu-vm:~# zfs list /tank\nNAME   USED  AVAIL     REFER  MOUNTPOINT\ntank   253K  9.36G     30.6K  /tank\n</code></pre> <p>If run without a dataset name, <code>zfs list</code> will show all datasets in the system recursively.</p> Text Only<pre><code>root@ubuntu-vm:~# zfs list\nNAME                                USED  AVAIL     REFER  MOUNTPOINT\ntank                                253K  9.36G     30.6K  /tank\ntank/dataset1                      30.6K  9.36G     30.6K  /tank/dataset1\ntank/dataset2                      91.9K  9.36G     30.6K  /tank/dataset2\ntank/dataset2/childset2            61.3K  9.36G     30.6K  /tank/dataset2/childset2\ntank/dataset2/childset2/childset2  30.6K  9.36G     30.6K  /tank/dataset2/childset2/childset2\n</code></pre> <p>\ud83d\udca1 TIP: when specifying a dataset name you can also use the <code>-r</code> flag to display the dataset recursively.</p>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#24-getting-and-setting-dataset-properties","title":"2.4. Getting and Setting Dataset Properties","text":"<p>Properties control the behavior of filesystems, volumes, snapshots, and clones. ZFS properties can look similar to mount options.</p>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#getting-a-list-of-all-the-properties-for-a-dataset","title":"Getting a list of all the properties for a dataset","text":"Text Only<pre><code># zfs get all [dataset]\n</code></pre>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#getting-the-current-value-for-a-specific-property","title":"Getting the current value for a specific property","text":"Text Only<pre><code>root@ubuntu-vm:~# zfs get compression tank\nNAME  PROPERTY     VALUE     SOURCE\ntank  compression  off       default\n</code></pre>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#setting-a-property-value","title":"Setting a property value","text":"<p>Use the <code>zfs set</code> command.</p> Text Only<pre><code>root@ubuntu-vm:~# zfs set compression=lz4 tank\n\nroot@ubuntu-vm:~# zfs get compression tank\nNAME  PROPERTY     VALUE     SOURCE\ntank  compression  lz4       local\n</code></pre>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#25-creating-snapshots","title":"2.5. Creating Snapshots","text":"<p>Snapshots allow you to save the state of a filesystem to a current point in time, without duplicating storage (files are not copied). It flags existing data as \u00abread-only\u00bb while allowing new data to be added to the filesystem without affecting the existing data blocks that are protected by the snapshot (the whole process is a bit more complicated than this).</p> <p>Let\u2019s take a look at the image below as an example. You have a filesystem with existing data (Data A) and you take a snapshot (snapshot 1). Then you make some changes, add new files (Data B) and take another snapshot (snapthot 2). After that you make even more changes (Data C).</p> <p></p> <p>Snapshot 1 protects the original data (Data A), while snapshot 2 protects Data Changes (B) as well as the original data (Data A). So you can delete snapshot 1 and data (A) will still be protected.</p> <p></p> <p>Note: The amount of data used for the snapshots is very small because we are not copying the files, but instead the filesystem top-level metadata block indicating the they belong to a snapshot.</p> <p>And here are a few scenarios of what happens when you delete files and snapshots:</p> <p></p> <p>Snapshots are great for testing software development, or creating a failsafe before an upgrade. But by no means they should be considered (by itself) as a backup or DR solution.</p>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#creating-a-snapshot","title":"Creating a snapshot","text":"Text Only<pre><code>zfs snapshot create [pool/dataset@snapshot_name]\n</code></pre> <p>For example:</p> Text Only<pre><code>root@ubuntu-vm:~# zfs snapshot tank/dataset1@snapshot1\n\nroot@ubuntu-vm:~# zfs list -t snapshot\nNAME                   USED  AVAIL     REFER  MOUNTPOINT\ntank/dataset1@snapshot1  17.3K      -     3.00G  -\n</code></pre>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#creating-recursive-snapshots","title":"Creating recursive snapshots","text":"<p>If you have multiple child datasets, you can either create one snapshot of the top-level dataset (usually the pool name), or use the <code>-r</code> flag to create snapshots recursively.</p> <p>Snapshot of the main dataset:</p> Text Only<pre><code>root@ubuntu-vm:~# zfs snapshot tank@snapshot-master\n\nroot@ubuntu-vm:~# zfs list -t snapshot\nNAME                   USED  AVAIL     REFER  MOUNTPOINT\ntank@snapshot-master     0B      -     30.6K  -\n</code></pre> <p>Recursive snapshot:</p> Text Only<pre><code>root@ubuntu-vm:~# zfs snapshot -r tank@recursive\n\nroot@ubuntu-vm:~# zfs list -t snapshot\nNAME                      USED  AVAIL     REFER  MOUNTPOINT\ntank@recursive              0B      -     30.6K  -\ntank/dataset1@recursive     0B      -     3.00G  -\n</code></pre>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#listing-snapshots","title":"Listing snapshots","text":"<p>Use <code>zfs list -t snapshot</code>.</p> Text Only<pre><code>root@ubuntu-vm:~# zfs list -t snapshot\nNAME                      USED  AVAIL     REFER  MOUNTPOINT\ntank@recursive              0B      -     30.6K  -\ntank/dataset1@recursive     0B      -     3.00G  -\n</code></pre>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#26-comparing-snapshots","title":"2.6. Comparing Snapshots","text":"<p>You can use <code>zfs diff</code> to compare snapshots.</p> Text Only<pre><code># zfs diff [older snapshot] [newer snapshot]\n</code></pre> <p>For example:</p> Text Only<pre><code>root@ubuntu-vm:# zfs diff tank@initial tank@second\n+/mnt/tank/file-1.txt\n+/mnt/tank/file-2.txt\n+/mnt/tank/file-3.txt\nM/mnt/tank/\n</code></pre>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#27-restoring-a-snapshot","title":"2.7. Restoring a Snapshot","text":"<p>Restore a snapshots with <code>zfs rollback</code>. Note that restoring a snapshot will delete all files that were created after the snapshot (as we saw in our example). It will also delete any newer snapshots (you will be asked to use the <code>-r</code> option to rollback and delete newer snapshots).</p> Text Only<pre><code>zfs rollback [pool/dataset@snapshot_name]\n</code></pre>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#29-sending-and-receiving-snapshots","title":"2.9. Sending and Receiving Snapshots","text":"<p>One of the best features of ZFS is \u2018ZFS send\u2019. It allows you send snapshots as a stream of data. This is a great way replicate a snapshot and it\u2019s dataset to a file, another pool or even to another system via SSH. Amazing no!</p> <p>Let\u2019s look at the example below. We have 2 pools in our system named \u2018tank\u2019 and \u2018backup\u2019.</p> Text Only<pre><code>root@ubuntu-vm:~# zpool list\nNAME     SIZE  ALLOC   FREE  CKPOINT  EXPANDSZ   FRAG    CAP  DEDUP    HEALTH  ALTROOT\ntank       9G  1.50G  7.50G        -         -     0%    16%  1.00x    ONLINE  -\nbackup  4.50G   104K  4.50G        -         -     0%     0%  1.00x    ONLINE  -\n</code></pre> <p>In our tank pool we have a dataset for our Movies.</p> Text Only<pre><code>root@ubuntu-vm:/tank/Movies# zfs list -r tank\nNAME          USED  AVAIL     REFER  MOUNTPOINT\ntank         1.50G  7.22G       24K  /tank\ntank/Movies  1.50G  7.22G     1.50G  /tank/Movies\n</code></pre> <p>Before we can send this data we need create a snapshot:</p> Text Only<pre><code>root@ubuntu-vm:~# zfs snapshot tank/Movies@$(date '+%Y-%m-%d_%H-%M')\n\nroot@ubuntu-vm:~# zfs list -t snapshot\nNAME                           USED  AVAIL     REFER  MOUNTPOINT\ntank/Movies@2020-11-03_15-29     0B      -     1.50G  -\n</code></pre> <p>And now we can send our snapshot to our backup pool with <code>zfs send/recv</code>.</p> Text Only<pre><code>root@ubuntu-vm:~# zfs send tank/Movies@2020-11-03_15-29 | zfs recv backup/Movies\n</code></pre> <p>And let\u2019s confirm that it worked.</p> Text Only<pre><code>root@ubuntu-vm:~# zfs list\nNAME            USED  AVAIL     REFER  MOUNTPOINT\nbackup         1.50G  2.86G       24K  /backup\nbackup/Movies  1.50G  2.86G     1.50G  /backup/Movies\ntank           1.50G  7.22G       24K  /tank\ntank/Movies    1.50G  7.22G     1.50G  /tank/Movies\n\nroot@ubuntu-vm:~# zfs list -t snapshot\nNAME                             USED  AVAIL     REFER  MOUNTPOINT\nbackup/Movies@2020-11-03_15-29     0B      -     1.50G  -\ntank/Movies@2020-11-03_15-29       0B      -     1.50G  -\n</code></pre> <p>\ud83d\udca1 TIP: It\u2019s worth to look into all the options and use cases for ZFS send. Combined with RAIDZs and snapshots, it can help you make your filesystem almost indestructible.</p>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#210-destroying-filesystems-datasets-and-snapshots","title":"2.10. Destroying Filesystems (Datasets) and Snapshots","text":"","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#destroying-datasets","title":"Destroying datasets","text":"<p>To destroy a dataset, use <code>zfs destroy</code> (the <code>-r</code> flag also works here).</p> Text Only<pre><code>zfs destroy [pool/dataset]\n</code></pre>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#destroying-snapshots","title":"Destroying snapshots","text":"<p>To destroy a snapshot, also use the <code>zfs destroy</code> command (and the <code>-r</code> flag also works here).</p> Text Only<pre><code>zfs destroy [pool/dataset@snapshot_name]\n</code></pre>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/homelab/zfs-for-dummies/#conclusion","title":"Conclusion","text":"<p>While we covered a lot of different topics and commands on ZFS, in reality, we really only scratched the surface on what ZFS can do. If you want to learn more about ZFS I\u2019ve added a few links below with some great reading.</p> <p>References and additional reading:</p> <ul> <li>FreeBSD Mastery: ZFS - https://www.goodreads.com/book/show/25595471-freebsd-mastery</li> <li>Ubuntu Wiki - https://wiki.ubuntu.com/ZFS</li> <li>Zpool Administration - https://pthree.org/2012/04/17/install-zfs-on-debian-gnulinux/</li> <li>ZFS Build - http://www.zfsbuild.com/</li> <li>ZFS Features and Terminology - https://www.freebsd.org/doc/handbook/zfs-term.html</li> <li>Klennet Storage Software - https://www.klennet.com/zfs-recovery/zfs-basics.aspx</li> </ul>","tags":["ZFS","FreeBSD","Linux"]},{"location":"dev-notes/imgui/imgui-debugging/","title":"Debugging","text":""},{"location":"dev-notes/imgui/imgui-debugging/#metrics-window","title":"Metrics Window","text":"<p>Many internal state and tools are exposed in the Metrics window. To access the Metrics window:</p> <ul> <li>Call <code>ShowMetricsWindow()</code></li> </ul>"},{"location":"dev-notes/imgui/imgui-debugging/#using-beginbeginchild","title":"Using Begin/BeginChild","text":"<ul> <li> <p>You can omit <code>Begin()</code>/<code>End()</code>, widgets will be created into an implicit \"Debug\" window.</p> </li> <li> <p>You can call <code>Begin()</code> multiple times to append to a same window from different place.</p> </li> <li> <p>Use <code>Begin()</code>/<code>BeginChild()</code> to put yourself back into the context of another window (see #270</p> </li> </ul> <p>An interesting trick that isn't obvious is that you can use Begin() just to put yourself into the context of that window. So here I want to react to the user inputting an address to scroll to, I use BeginChild() again on the child that I've already drawn so I can use SetScrollFromPosY() on it</p> C++<pre><code>ImGui::BeginChild(\"##scrolling\", ImVec2(0, -ImGui::GetFrameHeightWithSpacing()));\n// ...(draw main content)\nImGui::EndChild();\n// And then much later in the main window, get back into child context to change scrolling offset\nImGui::BeginChild(\"##scrolling\");\nImGui::SetScrollFromPosY(ImGui::GetCursorStartPos().y + (goto_addr / Rows) * line_height);\nImGui::End();\n</code></pre>"},{"location":"dev-notes/imgui/imgui-multiviewport/","title":"Multi-Viewport","text":"<ul> <li> <p>https://greich.com/2019/03/02/imgui-multiple-viewports/</p> </li> <li> <p>https://github.com/ocornut/imgui/issues/1542#issuecomment-595852032</p> </li> <li> <p>Viewports Added <code>ImGui::GetMainViewport()</code> as a way to get the bounds and work area of the host display. (#3789, #1542)</p> </li> <li> <p>In <code>master</code> branch or without multi-viewports feature enabled:</p> <ul> <li><code>GetMainViewport()-&gt;Pos</code> is always <code>== (0,0)</code></li> <li><code>GetMainViewport()-&gt;Size</code> is always <code>== io.DisplaySize</code></li> </ul> </li> <li>In <code>docking</code> branch and with the multi-viewports feature enabled:<ul> <li><code>GetMainViewport()</code> will return information from your host Platform Window.</li> <li>In the future, we will support a \"no main viewport\" mode and this may return bounds of your main monitor.</li> </ul> </li> <li>For forward compatibility with multi-viewports/multi-monitors:<ul> <li>Code using (0,0) as a way to signify \"upper-left of the host window\" should use <code>GetMainViewport()-&gt;Pos</code>.</li> <li>Code using <code>io.DisplaySize</code> as a way to signify \"size of the host window\" should use <code>GetMainViewport()-&gt;Size</code>.</li> </ul> </li> <li>We are also exposing a work area in <code>ImGuiViewport</code> (<code>WorkPos</code>, <code>WorkSize</code> vs <code>Pos</code>, <code>Size</code> for full area):<ul> <li>For a Platform Window, the work area is generally the full area minus space used by menu-bars.</li> <li>For a Platform Monitor, the work area is generally the full area minus space used by task-bars.</li> </ul> </li> <li>All of this has been the case in 'docking' branch for a long time. What we've done is merely merging     a small chunk of the multi-viewport logic into 'master' to standardize some concepts ahead of time.</li> </ul>"},{"location":"dev-notes/imgui/imgui-multiviewport/#enabling-multi-viewports","title":"Enabling Multi-Viewports","text":"<ul> <li> <p>Steps to use multi-viewports in your application, when using a default backend from the examples/ folder:</p> </li> <li> <p>Application: Enable feature with <code>io.ConfigFlags |= ImGuiConfigFlags_ViewportsEnable</code>.</p> </li> <li>Backend: The backend initialization will setup all necessary ImGuiPlatformIO's functions and update monitors info every frame.</li> <li>Application: In your main loop, call ImGui::UpdatePlatformWindows(), ImGui::RenderPlatformWindowsDefault() after EndFrame() or Render().</li> <li>Application: Fix absolute coordinates used in ImGui::SetWindowPos() or ImGui::SetNextWindowPos() calls.</li> <li> <p>Steps to use multi-viewports in your application, when using a custom backend:</p> </li> <li> <p>Important: THIS IS NOT EASY TO DO and comes with many subtleties not described here!</p> <ul> <li>It's also an experimental feature, so some of the requirements may evolve.</li> <li>Consider using default backends if you can. Either way, carefully follow and refer to examples/ backends for details.</li> </ul> </li> <li>Application: Enable feature with <code>io.ConfigFlags |= ImGuiConfigFlags_ViewportsEnable</code>.</li> <li>Backend: Hook ImGuiPlatformIO's <code>Platform_*</code> and <code>Renderer_*</code> callbacks (see below).<ul> <li>Set <code>io.BackendFlags |= ImGuiBackendFlags_PlatformHasViewports</code> and <code>io.BackendFlags |= ImGuiBackendFlags_PlatformHasViewports</code>.</li> <li>Update ImGuiPlatformIO's Monitors list every frame.</li> <li>Update MousePos every frame, in absolute coordinates.</li> </ul> </li> <li>Application: In your main loop, call ImGui::UpdatePlatformWindows(), ImGui::RenderPlatformWindowsDefault() after EndFrame() or Render().<ul> <li>You may skip calling RenderPlatformWindowsDefault() if its API is not convenient for your needs. Read comments below.</li> </ul> </li> <li>Application: Fix absolute coordinates used in ImGui::SetWindowPos() or ImGui::SetNextWindowPos() calls.</li> </ul>"},{"location":"dev-notes/imgui/imgui-multiviewport/#details","title":"Details","text":"<ul> <li> <p><code>ImGui::RenderPlatformWindowsDefault()</code>:</p> </li> <li> <p>This function is a mostly a helper for the common-most cases, and to facilitate using default backends. You can check its simple source code to understand what it does.</p> </li> <li>It basically iterates secondary viewports and call 4 functions that are setup in ImGuiPlatformIO, if available: <code>Platform_RenderWindow(), Renderer_RenderWindow(), Platform_SwapBuffers(), Renderer_SwapBuffers()</code><ul> <li>Those functions pointers exists only for the benefit of <code>RenderPlatformWindowsDefault()</code></li> </ul> </li> <li>If you have very specific rendering needs (e.g. flipping multiple swap-chain simultaneously, unusual sync/threading issues, etc.), you can ignore <code>RenderPlatformWindowsDefault()</code> and write customized code to perform your rendering<ul> <li>You can decide to setup the platform_io's <code>*RenderWindow</code> and <code>*SwapBuffers</code> pointers and call your functions through those pointers,</li> <li>You cay decide to never setup those pointers and call your code directly.</li> <li>They are a convenience, not an obligatory interface.</li> </ul> </li> <li> <p>IMPORTANT: When multi-viewports are enabled (with <code>io.ConfigFlags |= ImGuiConfigFlags_ViewportsEnable</code>), all coordinates/positions will be in your natural OS coordinates space. It means that:</p> </li> <li> <p>Reference to hard-coded positions such as in SetNextWindowPos(ImVec2(0,0)) are probably not what you want anymore.     Use GetMainViewport()-&gt;Pos to offset hard-coded positions, e.g. SetNextWindowPos(GetMainViewport()-&gt;Pos).</p> </li> <li>Likewise io.MousePos and GetMousePos() will use OS coordinates.     If you query mouse positions to interact with non-imgui coordinates you will need to offset them.     e.g. subtract GetWindowViewport()-&gt;Pos.</li> <li> <p>Render function: the ImDrawData structure now contains <code>DisplayPos</code> and <code>DisplaySize</code> fields.   To support multi-viewport, you need to use those values when creating your orthographic projection matrix.   Use <code>draw_data-&gt;DisplaySize</code> instead of <code>io.DisplaySize</code>, and <code>draw_data-&gt;DisplayPos</code> instead of (0,0) as the upper-left point.   You need to subtract <code>draw_data-&gt;DisplayPos</code> from your scissor rectangles to convert them from global coordinates to frame-buffer coordinates.</p> </li> <li> <p>IO: Moved IME support functions from io.ImeSetInputScreenPosFn, io.ImeWindowHandle to the PlatformIO api.</p> </li> <li> <p>IO: Removed io.DisplayVisibleMin, io.DisplayVisibleMax settings (they were marked obsoleted, used to clip within the (0,0)..(DisplaySize) range).</p> </li> </ul>"},{"location":"dev-notes/linux/art-of-command-line/","title":"The Art of Command Line","text":"<ul> <li>original source</li> </ul> <p>Note: I'm planning to revise this and looking for a new co-author to help with expanding this into a more comprehensive guide. While it's very popular, it could be broader and a bit deeper. If you like to write and are close to being an expert on this material and willing to consider helping, please drop me a note at josh (0x40) holloway.com. \u2013jlevy, Holloway. Thank you!</p> <p>Fluency on the command line is a skill often neglected or considered arcane, but it improves your flexibility and productivity as an engineer in both obvious and subtle ways. This is a selection of notes and tips on using the command-line that we've found useful when working on Linux. Some tips are elementary, and some are fairly specific, sophisticated, or obscure. This page is not long, but if you can use and recall all the items here, you know a lot.</p> <p>This work is the result of many authors and translators. Some of this originally appeared on Quora, but it has since moved to GitHub, where people more talented than the original author have made numerous improvements. Please submit a question if you have a question related to the command line. Please contribute if you see an error or something that could be better!</p>"},{"location":"dev-notes/linux/art-of-command-line/#meta","title":"Meta","text":"<p>Scope:</p> <ul> <li>This guide is for both beginners and experienced users. The goals are breadth (everything important), specificity (give concrete examples of the most common case), and brevity (avoid things that aren't essential or digressions you can easily look up elsewhere). Every tip is essential in some situation or significantly saves time over alternatives.</li> <li>This is written for Linux, with the exception of the \"macOS only\" and \"Windows only\" sections. Many of the other items apply or can be installed on other Unices or macOS (or even Cygwin).</li> <li>The focus is on interactive Bash, though many tips apply to other shells and to general Bash scripting.</li> <li>It includes both \"standard\" Unix commands as well as ones that require special package installs -- so long as they are important enough to merit inclusion.</li> </ul> <p>Notes:</p> <ul> <li>To keep this to one page, content is implicitly included by reference. You're smart enough to look up more detail elsewhere once you know the idea or command to Google. Use <code>apt</code>, <code>yum</code>, <code>dnf</code>, <code>pacman</code>, <code>pip</code> or <code>brew</code> (as appropriate) to install new programs.</li> <li>Use Explainshell to get a helpful breakdown of what commands, options, pipes etc. do.</li> </ul>"},{"location":"dev-notes/linux/art-of-command-line/#basics","title":"Basics","text":"<ul> <li> <p>Learn basic Bash. Actually, type <code>man bash</code> and at least skim the whole thing; it's pretty easy to follow and not that long. Alternate shells can be nice, but Bash is powerful and always available (learning only zsh, fish, etc., while tempting on your own laptop, restricts you in many situations, such as using existing servers).</p> </li> <li> <p>Learn at least one text-based editor well. The <code>nano</code> editor is one of the simplest for basic editing (opening, editing, saving, searching). However, for the power user in a text terminal, there is no substitute for Vim (<code>vi</code>), the hard-to-learn but venerable, fast, and full-featured editor. Many people also use the classic Emacs, particularly for larger editing tasks. (Of course, any modern software developer working on an extensive project is unlikely to use only a pure text-based editor and should also be familiar with modern graphical IDEs and tools.)</p> </li> <li> <p>Finding documentation:</p> </li> <li> <p>Know how to read official documentation with <code>man</code> (for the inquisitive, <code>man man</code> lists the section numbers, e.g. 1 is \"regular\" commands, 5 is files/conventions, and 8 are for administration). Find man pages with <code>apropos</code>.</p> </li> <li>Know that some commands are not executables, but Bash builtins, and that you can get help on them with <code>help</code> and <code>help -d</code>. You can find out whether a command is an executable, shell builtin or an alias by using <code>type command</code>.</li> <li><code>curl cheat.sh/command</code> will give a brief \"cheat sheet\" with common examples of how to use a shell command.</li> <li> <p>Learn about redirection of output and input using <code>&gt;</code> and <code>&lt;</code> and pipes using <code>|</code>. Know <code>&gt;</code> overwrites the output file and <code>&gt;&gt;</code> appends. Learn about stdout and stderr.</p> </li> <li> <p>Learn about file glob expansion with <code>*</code> (and perhaps <code>?</code> and <code>[</code>...<code>]</code>) and quoting and the difference between double <code>\"</code> and single <code>'</code> quotes. (See more on variable expansion below.)</p> </li> <li> <p>Be familiar with Bash job management: <code>&amp;</code>, ctrl-z, ctrl-c, <code>jobs</code>, <code>fg</code>, <code>bg</code>, <code>kill</code>, etc.</p> </li> <li> <p>Know <code>ssh</code>, and the basics of passwordless authentication, via <code>ssh-agent</code>, <code>ssh-add</code>, etc.</p> </li> <li> <p>Basic file management: <code>ls</code> and <code>ls -l</code> (in particular, learn what every column in <code>ls -l</code> means), <code>less</code>, <code>head</code>, <code>tail</code> and <code>tail -f</code> (or even better, <code>less +F</code>), <code>ln</code> and <code>ln -s</code> (learn the differences and advantages of hard versus soft links), <code>chown</code>, <code>chmod</code>, <code>du</code> (for a quick summary of disk usage: <code>du -hs *</code>). For filesystem management, <code>df</code>, <code>mount</code>, <code>fdisk</code>, <code>mkfs</code>, <code>lsblk</code>. Learn what an inode is (<code>ls -i</code> or <code>df -i</code>).</p> </li> <li> <p>Basic network management: <code>ip</code> or <code>ifconfig</code>, <code>dig</code>, <code>traceroute</code>, <code>route</code>.</p> </li> <li> <p>Learn and use a version control management system, such as <code>git</code>.</p> </li> <li> <p>Know regular expressions well, and the various flags to <code>grep</code>/<code>egrep</code>. The <code>-i</code>, <code>-o</code>, <code>-v</code>, <code>-A</code>, <code>-B</code>, and <code>-C</code> options are worth knowing.</p> </li> <li> <p>Learn to use <code>apt-get</code>, <code>yum</code>, <code>dnf</code> or <code>pacman</code> (depending on distro) to find and install packages. And make sure you have <code>pip</code> to install Python-based command-line tools (a few below are easiest to install via <code>pip</code>).</p> </li> </ul>"},{"location":"dev-notes/linux/art-of-command-line/#everyday-use","title":"Everyday use","text":"<ul> <li> <p>In Bash, use Tab to complete arguments or list all available commands and ctrl-r to search through command history (after pressing, type to search, press ctrl-r repeatedly to cycle through more matches, press Enter to execute the found command, or hit the right arrow to put the result in the current line to allow editing).</p> </li> <li> <p>In Bash, use ctrl-w to delete the last word, and ctrl-u to delete the content from current cursor back to the start of the line. Use alt-b and alt-f to move by word, ctrl-a to move cursor to beginning of line,  ctrl-e to move cursor to end of line, ctrl-k to kill to the end of the line, ctrl-l to clear the screen. See <code>man readline</code> for all the default keybindings in Bash. There are a lot. For example alt-. cycles through previous arguments, and alt-* expands a glob.</p> </li> <li> <p>Alternatively, if you love vi-style key-bindings, use <code>set -o vi</code> (and <code>set -o emacs</code> to put it back).</p> </li> <li> <p>For editing long commands, after setting your editor (for example <code>export EDITOR=vim</code>), ctrl-x ctrl-e will open the current command in an editor for multi-line editing. Or in vi style, escape-v.</p> </li> <li> <p>To see recent commands, use <code>history</code>. Follow with <code>!n</code> (where <code>n</code> is the command number) to execute again. There are also many abbreviations you can use, the most useful probably being <code>!$</code> for last argument and <code>!!</code> for last command (see \"HISTORY EXPANSION\" in the man page). However, these are often easily replaced with ctrl-r and alt-..</p> </li> <li> <p>Go to your home directory with <code>cd</code>. Access files relative to your home directory with the <code>~</code> prefix (e.g. <code>~/.bashrc</code>). In <code>sh</code> scripts refer to the home directory as <code>$HOME</code>.</p> </li> <li> <p>To go back to the previous working directory: <code>cd -</code>.</p> </li> <li> <p>If you are halfway through typing a command but change your mind, hit alt-# to add a <code>#</code> at the beginning and enter it as a comment (or use ctrl-a, #, enter). You can then return to it later via command history.</p> </li> <li> <p>Use <code>xargs</code> (or <code>parallel</code>). It's very powerful. Note you can control how many items execute per line (<code>-L</code>) as well as parallelism (<code>-P</code>). If you're not sure if it'll do the right thing, use <code>xargs echo</code> first. Also, <code>-I{}</code> is handy. Examples:</p> </li> </ul> Bash<pre><code>      find . -name '*.py' | xargs grep some_function\n      cat hosts | xargs -I{} ssh root@{} hostname\n</code></pre> <ul> <li> <p><code>pstree -p</code> is a helpful display of the process tree.</p> </li> <li> <p>Use <code>pgrep</code> and <code>pkill</code> to find or signal processes by name (<code>-f</code> is helpful).</p> </li> <li> <p>Know the various signals you can send processes. For example, to suspend a process, use <code>kill -STOP [pid]</code>. For the full list, see <code>man 7 signal</code></p> </li> <li> <p>Use <code>nohup</code> or <code>disown</code> if you want a background process to keep running forever.</p> </li> <li> <p>Check what processes are listening via <code>netstat -lntp</code> or <code>ss -plat</code> (for TCP; add <code>-u</code> for UDP) or <code>lsof -iTCP -sTCP:LISTEN -P -n</code> (which also works on macOS).</p> </li> <li> <p>See also <code>lsof</code> and <code>fuser</code> for open sockets and files.</p> </li> <li> <p>See <code>uptime</code> or <code>w</code> to know how long the system has been running.</p> </li> <li> <p>Use <code>alias</code> to create shortcuts for commonly used commands. For example, <code>alias ll='ls -latr'</code> creates a new alias <code>ll</code>.</p> </li> <li> <p>Save aliases, shell settings, and functions you commonly use in <code>~/.bashrc</code>, and arrange for login shells to source it. This will make your setup available in all your shell sessions.</p> </li> <li> <p>Put the settings of environment variables as well as commands that should be executed when you login in <code>~/.bash_profile</code>. Separate configuration will be needed for shells you launch from graphical environment logins and <code>cron</code> jobs.</p> </li> <li> <p>Synchronize your configuration files (e.g. <code>.bashrc</code> and <code>.bash_profile</code>) among various computers with Git.</p> </li> <li> <p>Understand that care is needed when variables and filenames include whitespace. Surround your Bash variables with quotes, e.g. <code>\"$FOO\"</code>. Prefer the <code>-0</code> or <code>-print0</code> options to enable null characters to delimit filenames, e.g. <code>locate -0 pattern | xargs -0 ls -al</code> or <code>find / -print0 -type d | xargs -0 ls -al</code>. To iterate on filenames containing whitespace in a for loop, set your IFS to be a newline only using <code>IFS=$'\\n'</code>.</p> </li> <li> <p>In Bash scripts, use <code>set -x</code> (or the variant <code>set -v</code>, which logs raw input, including unexpanded variables and comments) for debugging output. Use strict modes unless you have a good reason not to: Use <code>set -e</code> to abort on errors (nonzero exit code). Use <code>set -u</code> to detect unset variable usages. Consider <code>set -o pipefail</code> too, to abort on errors within pipes (though read up on it more if you do, as this topic is a bit subtle). For more involved scripts, also use <code>trap</code> on EXIT or ERR. A useful habit is to start a script like this, which will make it detect and abort on common errors and print a message:</p> </li> </ul> Bash<pre><code>      set -euo pipefail\n      trap \"echo 'error: Script failed: see failed command above'\" ERR\n</code></pre> <ul> <li>In Bash scripts, subshells (written with parentheses) are convenient ways to group commands. A common example is to temporarily move to a different working directory, e.g.</li> </ul> Bash<pre><code>      # do something in current dir\n      (cd /some/other/dir &amp;&amp; other-command)\n      # continue in original dir\n</code></pre> <ul> <li> <p>In Bash, note there are lots of kinds of variable expansion. Checking a variable exists: <code>${name:?error message}</code>. For example, if a Bash script requires a single argument, just write <code>input_file=${1:?usage: $0 input_file}</code>. Using a default value if a variable is empty: <code>${name:-default}</code>. If you want to have an additional (optional) parameter added to the previous example, you can use something like <code>output_file=${2:-logfile}</code>. If <code>$2</code> is omitted and thus empty, <code>output_file</code> will be set to <code>logfile</code>. Arithmetic expansion: <code>i=$(( (i + 1) % 5 ))</code>. Sequences: <code>{1..10}</code>. Trimming of strings: <code>${var%suffix}</code> and <code>${var#prefix}</code>. For example if <code>var=foo.pdf</code>, then <code>echo ${var%.pdf}.txt</code> prints <code>foo.txt</code>.</p> </li> <li> <p>Brace expansion using <code>{</code>...<code>}</code> can reduce having to re-type similar text and automate combinations of items.  This is helpful in examples like <code>mv foo.{txt,pdf} some-dir</code> (which moves both files), <code>cp somefile{,.bak}</code> (which expands to <code>cp somefile somefile.bak</code>) or <code>mkdir -p test-{a,b,c}/subtest-{1,2,3}</code> (which expands all possible combinations and creates a directory tree). Brace expansion is performed before any other expansion.</p> </li> <li> <p>The order of expansions is: brace expansion; tilde expansion, parameter and variable expansion, arithmetic expansion, and command substitution (done in a left-to-right fashion); word splitting; and filename expansion. (For example, a range like <code>{1..20}</code> cannot be expressed with variables using <code>{$a..$b}</code>. Use <code>seq</code> or a <code>for</code> loop instead, e.g., <code>seq $a $b</code> or <code>for((i=a; i&lt;=b; i++)); do ... ; done</code>.)</p> </li> <li> <p>The output of a command can be treated like a file via <code>&lt;(some command)</code> (known as process substitution). For example, compare local <code>/etc/hosts</code> with a remote one:</p> </li> </ul> Bash<pre><code>      diff /etc/hosts &lt;(ssh somehost cat /etc/hosts)\n</code></pre> <ul> <li>When writing scripts you may want to put all of your code in curly braces. If the closing brace is missing, your script will be prevented from executing due to a syntax error. This makes sense when your script is going to be downloaded from the web, since it prevents partially downloaded scripts from executing:</li> </ul> Bash<pre><code>{\n      # Your code here\n}\n</code></pre> <ul> <li>A \"here document\" allows redirection of multiple lines of input as if from a file:</li> </ul> Text Only<pre><code>cat &lt;&lt;EOF\ninput\non multiple lines\nEOF\n</code></pre> <ul> <li> <p>In Bash, redirect both standard output and standard error via: <code>some-command &gt;logfile 2&gt;&amp;1</code> or <code>some-command &amp;&gt;logfile</code>. Often, to ensure a command does not leave an open file handle to standard input, tying it to the terminal you are in, it is also good practice to add <code>&lt;/dev/null</code>.</p> </li> <li> <p>Use <code>man ascii</code> for a good ASCII table, with hex and decimal values. For general encoding info, <code>man unicode</code>, <code>man utf-8</code>, and <code>man latin1</code> are helpful.</p> </li> <li> <p>Use <code>screen</code> or <code>tmux</code> to multiplex the screen, especially useful on remote ssh sessions and to detach and re-attach to a session. <code>byobu</code> can enhance screen or tmux by providing more information and easier management. A more minimal alternative for session persistence only is <code>dtach</code>.</p> </li> <li> <p>In ssh, knowing how to port tunnel with <code>-L</code> or <code>-D</code> (and occasionally <code>-R</code>) is useful, e.g. to access web sites from a remote server.</p> </li> <li> <p>It can be useful to make a few optimizations to your ssh configuration; for example, this <code>~/.ssh/config</code> contains settings to avoid dropped connections in certain network environments, uses compression (which is helpful with scp over low-bandwidth connections), and multiplex channels to the same server with a local control file:</p> </li> </ul> Text Only<pre><code>      TCPKeepAlive=yes\n      ServerAliveInterval=15\n      ServerAliveCountMax=6\n      Compression=yes\n      ControlMaster auto\n      ControlPath /tmp/%r@%h:%p\n      ControlPersist yes\n</code></pre> <ul> <li> <p>A few other options relevant to ssh are security sensitive and should be enabled with care, e.g. per subnet or host or in trusted networks: <code>StrictHostKeyChecking=no</code>, <code>ForwardAgent=yes</code></p> </li> <li> <p>Consider <code>mosh</code> an alternative to ssh that uses UDP, avoiding dropped connections and adding convenience on the road (requires server-side setup).</p> </li> <li> <p>To get the permissions on a file in octal form, which is useful for system configuration but not available in <code>ls</code> and easy to bungle, use something like</p> </li> </ul> Bash<pre><code>      stat -c '%A %a %n' /etc/timezone\n</code></pre> <ul> <li> <p>For interactive selection of values from the output of another command, use <code>percol</code> or <code>fzf</code>.</p> </li> <li> <p>For interaction with files based on the output of another command (like <code>git</code>), use <code>fpp</code> (PathPicker).</p> </li> <li> <p>For a simple web server for all files in the current directory (and subdirs), available to anyone on your network, use: <code>python -m SimpleHTTPServer 7777</code> (for port 7777 and Python 2) and <code>python -m http.server 7777</code> (for port 7777 and Python 3).</p> </li> <li> <p>For running a command as another user, use <code>sudo</code>. Defaults to running as root; use <code>-u</code> to specify another user. Use <code>-i</code> to login as that user (you will be asked for your password).</p> </li> <li> <p>For switching the shell to another user, use <code>su username</code> or <code>su - username</code>. The latter with \"-\" gets an environment as if another user just logged in. Omitting the username defaults to root. You will be asked for the password of the user you are switching to.</p> </li> <li> <p>Know about the 128K limit on command lines. This \"Argument list too long\" error is common when wildcard matching large numbers of files. (When this happens alternatives like <code>find</code> and <code>xargs</code> may help.)</p> </li> <li> <p>For a basic calculator (and of course access to Python in general), use the <code>python</code> interpreter. For example,</p> </li> </ul> Text Only<pre><code>&gt;&gt;&gt; 2+3\n5\n</code></pre>"},{"location":"dev-notes/linux/art-of-command-line/#processing-files-and-data","title":"Processing files and data","text":"<ul> <li> <p>To locate a file by name in the current directory, <code>find . -iname '*something*'</code> (or similar). To find a file anywhere by name, use <code>locate something</code> (but bear in mind <code>updatedb</code> may not have indexed recently created files).</p> </li> <li> <p>For general searching through source or data files, there are several options more advanced or faster than <code>grep -r</code>, including (in rough order from older to newer) <code>ack</code>, <code>ag</code> (\"the silver searcher\"), and <code>rg</code> (ripgrep).</p> </li> <li> <p>To convert HTML to text: <code>lynx -dump -stdin</code></p> </li> <li> <p>For Markdown, HTML, and all kinds of document conversion, try <code>pandoc</code>. For example, to convert a Markdown document to Word format: <code>pandoc README.md --from markdown --to docx -o temp.docx</code></p> </li> <li> <p>If you must handle XML, <code>xmlstarlet</code> is old but good.</p> </li> <li> <p>For JSON, use <code>jq</code>. For interactive use, also see <code>jid</code> and <code>jiq</code>.</p> </li> <li> <p>For YAML, use <code>shyaml</code>.</p> </li> <li> <p>For Excel or CSV files, csvkit provides <code>in2csv</code>, <code>csvcut</code>, <code>csvjoin</code>, <code>csvgrep</code>, etc.</p> </li> <li> <p>For Amazon S3, <code>s3cmd</code> is convenient and <code>s4cmd</code> is faster. Amazon's <code>aws</code> and the improved <code>saws</code> are essential for other AWS-related tasks.</p> </li> <li> <p>Know about <code>sort</code> and <code>uniq</code>, including uniq's <code>-u</code> and <code>-d</code> options -- see one-liners below. See also <code>comm</code>.</p> </li> <li> <p>Know about <code>cut</code>, <code>paste</code>, and <code>join</code> to manipulate text files. Many people use <code>cut</code> but forget about <code>join</code>.</p> </li> <li> <p>Know about <code>wc</code> to count newlines (<code>-l</code>), characters (<code>-m</code>), words (<code>-w</code>) and bytes (<code>-c</code>).</p> </li> <li> <p>Know about <code>tee</code> to copy from stdin to a file and also to stdout, as in <code>ls -al | tee file.txt</code>.</p> </li> <li> <p>For more complex calculations, including grouping, reversing fields, and statistical calculations, consider <code>datamash</code>.</p> </li> <li> <p>Know that locale affects a lot of command line tools in subtle ways, including sorting order (collation) and performance. Most Linux installations will set <code>LANG</code> or other locale variables to a local setting like US English. But be aware sorting will change if you change locale. And know i18n routines can make sort or other commands run many times slower. In some situations (such as the set operations or uniqueness operations below) you can safely ignore slow i18n routines entirely and use traditional byte-based sort order, using <code>export LC_ALL=C</code>.</p> </li> <li> <p>You can set a specific command's environment by prefixing its invocation with the environment variable settings, as in <code>TZ=Pacific/Fiji date</code>.</p> </li> <li> <p>Know basic <code>awk</code> and <code>sed</code> for simple data munging. See One-liners for examples.</p> </li> <li> <p>To replace all occurrences of a string in place, in one or more files:</p> </li> </ul> Bash<pre><code>      perl -pi.bak -e 's/old-string/new-string/g' my-files-*.txt\n</code></pre> <ul> <li>To rename multiple files and/or search and replace within files, try <code>repren</code>. (In some cases the <code>rename</code> command also allows multiple renames, but be careful as its functionality is not the same on all Linux distributions.)</li> </ul> Bash<pre><code>      # Full rename of filenames, directories, and contents foo -&gt; bar:\n      repren --full --preserve-case --from foo --to bar .\n      # Recover backup files whatever.bak -&gt; whatever:\n      repren --renames --from '(.*)\\.bak' --to '\\1' *.bak\n      # Same as above, using rename, if available:\n      rename 's/\\.bak$//' *.bak\n</code></pre> <ul> <li>As the man page says, <code>rsync</code> really is a fast and extraordinarily versatile file copying tool. It's known for synchronizing between machines but is equally useful locally. When security restrictions allow, using <code>rsync</code> instead of <code>scp</code> allows recovery of a transfer without restarting from scratch. It also is among the fastest ways to delete large numbers of files:</li> </ul> Bash<pre><code>mkdir empty &amp;&amp; rsync -r --delete empty/ some-dir &amp;&amp; rmdir some-dir\n</code></pre> <ul> <li> <p>For monitoring progress when processing files, use <code>pv</code>, <code>pycp</code>, <code>pmonitor</code>, <code>progress</code>, <code>rsync --progress</code>, or, for block-level copying, <code>dd status=progress</code>.</p> </li> <li> <p>Use <code>shuf</code> to shuffle or select random lines from a file.</p> </li> <li> <p>Know <code>sort</code>'s options. For numbers, use <code>-n</code>, or <code>-h</code> for handling human-readable numbers (e.g. from <code>du -h</code>). Know how keys work (<code>-t</code> and <code>-k</code>). In particular, watch out that you need to write <code>-k1,1</code> to sort by only the first field; <code>-k1</code> means sort according to the whole line. Stable sort (<code>sort -s</code>) can be useful. For example, to sort first by field 2, then secondarily by field 1, you can use <code>sort -k1,1 | sort -s -k2,2</code>.</p> </li> <li> <p>If you ever need to write a tab literal in a command line in Bash (e.g. for the -t argument to sort), press ctrl-v [Tab] or write <code>$'\\t'</code> (the latter is better as you can copy/paste it).</p> </li> <li> <p>The standard tools for patching source code are <code>diff</code> and <code>patch</code>. See also <code>diffstat</code> for summary statistics of a diff and <code>sdiff</code> for a side-by-side diff. Note <code>diff -r</code> works for entire directories. Use <code>diff -r tree1 tree2 | diffstat</code> for a summary of changes. Use <code>vimdiff</code> to compare and edit files.</p> </li> <li> <p>For binary files, use <code>hd</code>, <code>hexdump</code> or <code>xxd</code> for simple hex dumps and <code>bvi</code>, <code>hexedit</code> or <code>biew</code> for binary editing.</p> </li> <li> <p>Also for binary files, <code>strings</code> (plus <code>grep</code>, etc.) lets you find bits of text.</p> </li> <li> <p>For binary diffs (delta compression), use <code>xdelta3</code>.</p> </li> <li> <p>To convert text encodings, try <code>iconv</code>. Or <code>uconv</code> for more advanced use; it supports some advanced Unicode things. For example:</p> </li> </ul> Bash<pre><code>      # Displays hex codes or actual names of characters (useful for debugging):\n      uconv -f utf-8 -t utf-8 -x '::Any-Hex;' &lt; input.txt\n      uconv -f utf-8 -t utf-8 -x '::Any-Name;' &lt; input.txt\n      # Lowercase and removes all accents (by expanding and dropping them):\n      uconv -f utf-8 -t utf-8 -x '::Any-Lower; ::Any-NFD; [:Nonspacing Mark:] &gt;; ::Any-NFC;' &lt; input.txt &gt; output.txt\n</code></pre> <ul> <li> <p>To split files into pieces, see <code>split</code> (to split by size) and <code>csplit</code> (to split by a pattern).</p> </li> <li> <p>Date and time: To get the current date and time in the helpful ISO 8601 format, use <code>date -u +\"%Y-%m-%dT%H:%M:%SZ\"</code> (other options are problematic). To manipulate date and time expressions, use <code>dateadd</code>, <code>datediff</code>, <code>strptime</code> etc. from <code>dateutils</code>.</p> </li> <li> <p>Use <code>zless</code>, <code>zmore</code>, <code>zcat</code>, and <code>zgrep</code> to operate on compressed files.</p> </li> <li> <p>File attributes are settable via <code>chattr</code> and offer a lower-level alternative to file permissions. For example, to protect against accidental file deletion the immutable flag:  <code>sudo chattr +i /critical/directory/or/file</code></p> </li> <li> <p>Use <code>getfacl</code> and <code>setfacl</code> to save and restore file permissions. For example:</p> </li> </ul> Bash<pre><code>   getfacl -R /some/path &gt; permissions.txt\n   setfacl --restore=permissions.txt\n</code></pre> <ul> <li>To create empty files quickly, use <code>truncate</code> (creates sparse file), <code>fallocate</code> (ext4, xfs, btrfs and ocfs2 filesystems), <code>xfs_mkfile</code> (almost any filesystems, comes in xfsprogs package), <code>mkfile</code> (for Unix-like systems like Solaris, Mac OS).</li> </ul>"},{"location":"dev-notes/linux/art-of-command-line/#system-debugging","title":"System debugging","text":"<ul> <li> <p>For web debugging, <code>curl</code> and <code>curl -I</code> are handy, or their <code>wget</code> equivalents, or the more modern <code>httpie</code>.</p> </li> <li> <p>To know current cpu/disk status, the classic tools are <code>top</code> (or the better <code>htop</code>), <code>iostat</code>, and <code>iotop</code>. Use <code>iostat -mxz 15</code> for basic CPU and detailed per-partition disk stats and performance insight.</p> </li> <li> <p>For network connection details, use <code>netstat</code> and <code>ss</code>.</p> </li> <li> <p>For a quick overview of what's happening on a system, <code>dstat</code> is especially useful. For broadest overview with details, use <code>glances</code>.</p> </li> <li> <p>To know memory status, run and understand the output of <code>free</code> and <code>vmstat</code>. In particular, be aware the \"cached\" value is memory held by the Linux kernel as file cache, so effectively counts toward the \"free\" value.</p> </li> <li> <p>Java system debugging is a different kettle of fish, but a simple trick on Oracle's and some other JVMs is that you can run <code>kill -3 &lt;pid&gt;</code> and a full stack trace and heap summary (including generational garbage collection details, which can be highly informative) will be dumped to stderr/logs. The JDK's <code>jps</code>, <code>jstat</code>, <code>jstack</code>, <code>jmap</code> are useful. SJK tools are more advanced.</p> </li> <li> <p>Use <code>mtr</code> as a better traceroute, to identify network issues.</p> </li> <li> <p>For looking at why a disk is full, <code>ncdu</code> saves time over the usual commands like <code>du -sh *</code>.</p> </li> <li> <p>To find which socket or process is using bandwidth, try <code>iftop</code> or <code>nethogs</code>.</p> </li> <li> <p>The <code>ab</code> tool (comes with Apache) is helpful for quick-and-dirty checking of web server performance. For more complex load testing, try <code>siege</code>.</p> </li> <li> <p>For more serious network debugging, <code>wireshark</code>, <code>tshark</code>, or <code>ngrep</code>.</p> </li> <li> <p>Know about <code>strace</code> and <code>ltrace</code>. These can be helpful if a program is failing, hanging, or crashing, and you don't know why, or if you want to get a general idea of performance. Note the profiling option (<code>-c</code>), and the ability to attach to a running process (<code>-p</code>). Use trace child option (<code>-f</code>) to avoid missing important calls.</p> </li> <li> <p>Know about <code>ldd</code> to check shared libraries etc \u2014 but never run it on untrusted files.</p> </li> <li> <p>Know how to connect to a running process with <code>gdb</code> and get its stack traces.</p> </li> <li> <p>Use <code>/proc</code>. It's amazingly helpful sometimes when debugging live problems. Examples: <code>/proc/cpuinfo</code>, <code>/proc/meminfo</code>, <code>/proc/cmdline</code>, <code>/proc/xxx/cwd</code>, <code>/proc/xxx/exe</code>, <code>/proc/xxx/fd/</code>, <code>/proc/xxx/smaps</code> (where <code>xxx</code> is the process id or pid).</p> </li> <li> <p>When debugging why something went wrong in the past, <code>sar</code> can be very helpful. It shows historic statistics on CPU, memory, network, etc.</p> </li> <li> <p>For deeper systems and performance analyses, look at <code>stap</code> (SystemTap), <code>perf</code>, and <code>sysdig</code>.</p> </li> <li> <p>Check what OS you're on with <code>uname</code> or <code>uname -a</code> (general Unix/kernel info) or <code>lsb_release -a</code> (Linux distro info).</p> </li> <li> <p>Use <code>dmesg</code> whenever something's acting really funny (it could be hardware or driver issues).</p> </li> <li> <p>If you delete a file and it doesn't free up expected disk space as reported by <code>du</code>, check whether the file is in use by a process: <code>lsof | grep deleted | grep \"filename-of-my-big-file\"</code></p> </li> </ul>"},{"location":"dev-notes/linux/art-of-command-line/#one-liners","title":"One-liners","text":"<p>A few examples of piecing together commands:</p> <ul> <li>It is remarkably helpful sometimes that you can do set intersection, union, and difference of text files via <code>sort</code>/<code>uniq</code>. Suppose <code>a</code> and <code>b</code> are text files that are already uniqued. This is fast, and works on files of arbitrary size, up to many gigabytes. (Sort is not limited by memory, though you may need to use the <code>-T</code> option if <code>/tmp</code> is on a small root partition.) See also the note about <code>LC_ALL</code> above and <code>sort</code>'s <code>-u</code> option (left out for clarity below).</li> </ul> Bash<pre><code>      sort a b | uniq &gt; c   # c is a union b\n      sort a b | uniq -d &gt; c   # c is a intersect b\n      sort a b b | uniq -u &gt; c   # c is set difference a - b\n</code></pre> <ul> <li>Pretty-print two JSON files, normalizing their syntax, then coloring and paginating the result:</li> </ul> Text Only<pre><code>      diff &lt;(jq --sort-keys . &lt; file1.json) &lt;(jq --sort-keys . &lt; file2.json) | colordiff | less -R\n</code></pre> <ul> <li> <p>Use <code>grep . *</code> to quickly examine the contents of all files in a directory (so each line is paired with the filename), or <code>head -100 *</code> (so each file has a heading). This can be useful for directories filled with config settings like those in <code>/sys</code>, <code>/proc</code>, <code>/etc</code>.</p> </li> <li> <p>Summing all numbers in the third column of a text file (this is probably 3X faster and 3X less code than equivalent Python):</p> </li> </ul> Bash<pre><code>      awk '{ x += $3 } END { print x }' myfile\n</code></pre> <ul> <li>To see sizes/dates on a tree of files, this is like a recursive <code>ls -l</code> but is easier to read than <code>ls -lR</code>:</li> </ul> Bash<pre><code>      find . -type f -ls\n</code></pre> <ul> <li>Say you have a text file, like a web server log, and a certain value that appears on some lines, such as an <code>acct_id</code> parameter that is present in the URL. If you want a tally of how many requests for each <code>acct_id</code>:</li> </ul> Bash<pre><code>      egrep -o 'acct_id=[0-9]+' access.log | cut -d= -f2 | sort | uniq -c | sort -rn\n</code></pre> <ul> <li> <p>To continuously monitor changes, use <code>watch</code>, e.g. check changes to files in a directory with <code>watch -d -n 2 'ls -rtlh | tail'</code> or to network settings while troubleshooting your wifi settings with <code>watch -d -n 2 ifconfig</code>.</p> </li> <li> <p>Run this function to get a random tip from this document (parses Markdown and extracts an item):</p> </li> </ul> Bash<pre><code>      function taocl() {\n        curl -s https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README.md |\n          sed '/cowsay[.]png/d' |\n          pandoc -f markdown -t html |\n          xmlstarlet fo --html --dropdtd |\n          xmlstarlet sel -t -v \"(html/body/ul/li[count(p)&gt;0])[$RANDOM mod last()+1]\" |\n          xmlstarlet unesc | fmt -80 | iconv -t US\n      }\n</code></pre>"},{"location":"dev-notes/linux/art-of-command-line/#obscure-but-useful","title":"Obscure but useful","text":"<ul> <li> <p><code>expr</code>: perform arithmetic or boolean operations or evaluate regular expressions</p> </li> <li> <p><code>m4</code>: simple macro processor</p> </li> <li> <p><code>yes</code>: print a string a lot</p> </li> <li> <p><code>cal</code>: nice calendar</p> </li> <li> <p><code>env</code>: run a command (useful in scripts)</p> </li> <li> <p><code>printenv</code>: print out environment variables (useful in debugging and scripts)</p> </li> <li> <p><code>look</code>: find English words (or lines in a file) beginning with a string</p> </li> <li> <p><code>cut</code>, <code>paste</code> and <code>join</code>: data manipulation</p> </li> <li> <p><code>fmt</code>: format text paragraphs</p> </li> <li> <p><code>pr</code>: format text into pages/columns</p> </li> <li> <p><code>fold</code>: wrap lines of text</p> </li> <li> <p><code>column</code>: format text fields into aligned, fixed-width columns or tables</p> </li> <li> <p><code>expand</code> and <code>unexpand</code>: convert between tabs and spaces</p> </li> <li> <p><code>nl</code>: add line numbers</p> </li> <li> <p><code>seq</code>: print numbers</p> </li> <li> <p><code>bc</code>: calculator</p> </li> <li> <p><code>factor</code>: factor integers</p> </li> <li> <p><code>gpg</code>: encrypt and sign files</p> </li> <li> <p><code>toe</code>: table of terminfo entries</p> </li> <li> <p><code>nc</code>: network debugging and data transfer</p> </li> <li> <p><code>socat</code>: socket relay and tcp port forwarder (similar to <code>netcat</code>)</p> </li> <li> <p><code>slurm</code>: network traffic visualization</p> </li> <li> <p><code>dd</code>: moving data between files or devices</p> </li> <li> <p><code>file</code>: identify type of a file</p> </li> <li> <p><code>tree</code>: display directories and subdirectories as a nesting tree; like <code>ls</code> but recursive</p> </li> <li> <p><code>stat</code>: file info</p> </li> <li> <p><code>time</code>: execute and time a command</p> </li> <li> <p><code>timeout</code>: execute a command for specified amount of time and stop the process when the specified amount of time completes.</p> </li> <li> <p><code>lockfile</code>: create semaphore file that can only be removed by <code>rm -f</code></p> </li> <li> <p><code>logrotate</code>: rotate, compress and mail logs.</p> </li> <li> <p><code>watch</code>: run a command repeatedly, showing results and/or highlighting changes</p> </li> <li> <p><code>when-changed</code>: runs any command you specify whenever it sees file changed. See <code>inotifywait</code> and <code>entr</code> as well.</p> </li> <li> <p><code>tac</code>: print files in reverse</p> </li> <li> <p><code>comm</code>: compare sorted files line by line</p> </li> <li> <p><code>strings</code>: extract text from binary files</p> </li> <li> <p><code>tr</code>: character translation or manipulation</p> </li> <li> <p><code>iconv</code> or <code>uconv</code>: conversion for text encodings</p> </li> <li> <p><code>split</code> and <code>csplit</code>: splitting files</p> </li> <li> <p><code>sponge</code>: read all input before writing it, useful for reading from then writing to the same file, e.g., <code>grep -v something some-file | sponge some-file</code></p> </li> <li> <p><code>units</code>: unit conversions and calculations; converts furlongs per fortnight to twips per blink (see also <code>/usr/share/units/definitions.units</code>)</p> </li> <li> <p><code>apg</code>: generates random passwords</p> </li> <li> <p><code>xz</code>: high-ratio file compression</p> </li> <li> <p><code>ldd</code>: dynamic library info</p> </li> <li> <p><code>nm</code>: symbols from object files</p> </li> <li> <p><code>ab</code> or <code>wrk</code>: benchmarking web servers</p> </li> <li> <p><code>strace</code>: system call debugging</p> </li> <li> <p><code>mtr</code>: better traceroute for network debugging</p> </li> <li> <p><code>cssh</code>: visual concurrent shell</p> </li> <li> <p><code>rsync</code>: sync files and folders over SSH or in local file system</p> </li> <li> <p><code>wireshark</code> and <code>tshark</code>: packet capture and network debugging</p> </li> <li> <p><code>ngrep</code>: grep for the network layer</p> </li> <li> <p><code>host</code> and <code>dig</code>: DNS lookups</p> </li> <li> <p><code>lsof</code>: process file descriptor and socket info</p> </li> <li> <p><code>dstat</code>: useful system stats</p> </li> <li> <p><code>glances</code>: high level, multi-subsystem overview</p> </li> <li> <p><code>iostat</code>: Disk usage stats</p> </li> <li> <p><code>mpstat</code>: CPU usage stats</p> </li> <li> <p><code>vmstat</code>: Memory usage stats</p> </li> <li> <p><code>htop</code>: improved version of top</p> </li> <li> <p><code>last</code>: login history</p> </li> <li> <p><code>w</code>: who's logged on</p> </li> <li> <p><code>id</code>: user/group identity info</p> </li> <li> <p><code>sar</code>: historic system stats</p> </li> <li> <p><code>iftop</code> or <code>nethogs</code>: network utilization by socket or process</p> </li> <li> <p><code>ss</code>: socket statistics</p> </li> <li> <p><code>dmesg</code>: boot and system error messages</p> </li> <li> <p><code>sysctl</code>: view and configure Linux kernel parameters at run time</p> </li> <li> <p><code>hdparm</code>: SATA/ATA disk manipulation/performance</p> </li> <li> <p><code>lsblk</code>: list block devices: a tree view of your disks and disk partitions</p> </li> <li> <p><code>lshw</code>, <code>lscpu</code>, <code>lspci</code>, <code>lsusb</code>, <code>dmidecode</code>: hardware information, including CPU, BIOS, RAID, graphics, devices, etc.</p> </li> <li> <p><code>lsmod</code> and <code>modinfo</code>: List and show details of kernel modules.</p> </li> <li> <p><code>fortune</code>, <code>ddate</code>, and <code>sl</code>: um, well, it depends on whether you consider steam locomotives and Zippy quotations \"useful\"</p> </li> </ul>"},{"location":"dev-notes/linux/art-of-command-line/#macos-only","title":"macOS only","text":"<p>These are items relevant only on macOS.</p> <ul> <li> <p>Package management with <code>brew</code> (Homebrew) and/or <code>port</code> (MacPorts). These can be used to install on macOS many of the above commands.</p> </li> <li> <p>Copy output of any command to a desktop app with <code>pbcopy</code> and paste input from one with <code>pbpaste</code>.</p> </li> <li> <p>To enable the Option key in macOS Terminal as an alt key (such as used in the commands above like alt-b, alt-f, etc.), open Preferences -&gt; Profiles -&gt; Keyboard and select \"Use Option as Meta key\".</p> </li> <li> <p>To open a file with a desktop app, use <code>open</code> or <code>open -a /Applications/Whatever.app</code>.</p> </li> <li> <p>Spotlight: Search files with <code>mdfind</code> and list metadata (such as photo EXIF info) with <code>mdls</code>.</p> </li> <li> <p>Be aware macOS is based on BSD Unix, and many commands (for example <code>ps</code>, <code>ls</code>, <code>tail</code>, <code>awk</code>, <code>sed</code>) have many subtle variations from Linux, which is largely influenced by System V-style Unix and GNU tools. You can often tell the difference by noting a man page has the heading \"BSD General Commands Manual.\" In some cases GNU versions can be installed, too (such as <code>gawk</code> and <code>gsed</code> for GNU awk and sed). If writing cross-platform Bash scripts, avoid such commands (for example, consider Python or <code>perl</code>) or test carefully.</p> </li> <li> <p>To get macOS release information, use <code>sw_vers</code>.</p> </li> </ul>"},{"location":"dev-notes/linux/art-of-command-line/#windows-only","title":"Windows only","text":"<p>These items are relevant only on Windows.</p>"},{"location":"dev-notes/linux/art-of-command-line/#ways-to-obtain-unix-tools-under-windows","title":"Ways to obtain Unix tools under Windows","text":"<ul> <li> <p>Access the power of the Unix shell under Microsoft Windows by installing Cygwin. Most of the things described in this document will work out of the box.</p> </li> <li> <p>On Windows 10, you can use Windows Subsystem for Linux (WSL), which provides a familiar Bash environment with Unix command line utilities.</p> </li> <li> <p>If you mainly want to use GNU developer tools (such as GCC) on Windows, consider MinGW and its MSYS package, which provides utilities such as bash, gawk, make and grep. MSYS doesn't have all the features compared to Cygwin. MinGW is particularly useful for creating native Windows ports of Unix tools.</p> </li> <li> <p>Another option to get Unix look and feel under Windows is Cash. Note that only very few Unix commands and command-line options are available in this environment.</p> </li> </ul>"},{"location":"dev-notes/linux/art-of-command-line/#useful-windows-command-line-tools","title":"Useful Windows command-line tools","text":"<ul> <li> <p>You can perform and script most Windows system administration tasks from the command line by learning and using <code>wmic</code>.</p> </li> <li> <p>Native command-line Windows networking tools you may find useful include <code>ping</code>, <code>ipconfig</code>, <code>tracert</code>, and <code>netstat</code>.</p> </li> <li> <p>You can perform many useful Windows tasks by invoking the <code>Rundll32</code> command.</p> </li> </ul>"},{"location":"dev-notes/linux/art-of-command-line/#cygwin-tips-and-tricks","title":"Cygwin tips and tricks","text":"<ul> <li> <p>Install additional Unix programs with the Cygwin's package manager.</p> </li> <li> <p>Use <code>mintty</code> as your command-line window.</p> </li> <li> <p>Access the Windows clipboard through <code>/dev/clipboard</code>.</p> </li> <li> <p>Run <code>cygstart</code> to open an arbitrary file through its registered application.</p> </li> <li> <p>Access the Windows registry with <code>regtool</code>.</p> </li> <li> <p>Note that a <code>C:\\</code> Windows drive path becomes <code>/cygdrive/c</code> under Cygwin, and that Cygwin's <code>/</code> appears under <code>C:\\cygwin</code> on Windows. Convert between Cygwin and Windows-style file paths with <code>cygpath</code>. This is most useful in scripts that invoke Windows programs.</p> </li> </ul>"},{"location":"dev-notes/linux/art-of-command-line/#more-resources","title":"More resources","text":"<ul> <li>awesome-shell: A curated list of shell tools and resources.</li> <li>awesome-osx-command-line: A more in-depth guide for the macOS command line.</li> <li>Strict mode for writing better shell scripts.</li> <li>shellcheck: A shell script static analysis tool. Essentially, lint for bash/sh/zsh.</li> <li>Filenames and Pathnames in Shell: The sadly complex minutiae on how to handle filenames correctly in shell scripts.</li> <li>Data Science at the Command Line: More commands and tools helpful for doing data science, from the book of the same name</li> </ul>"},{"location":"dev-notes/linux/art-of-command-line/#disclaimer","title":"Disclaimer","text":"<p>With the exception of very small tasks, code is written so others can read it. With power comes responsibility. The fact you can do something in Bash doesn't necessarily mean you should! ;)</p>"},{"location":"dev-notes/linux/art-of-command-line/#license","title":"License","text":"<p>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</p>"},{"location":"dev-notes/linux/bash/","title":"Bash Cheatsheet","text":""},{"location":"dev-notes/linux/bash/#resources","title":"Resources","text":"<ul> <li>Devhints Cheatsheet</li> <li>Learn Bash in Y Minutes: short quickstart crash course</li> <li>Bash Scripting 101</li> <li>Bash Beginner Series</li> </ul>"},{"location":"dev-notes/linux/bash/#shell-customization","title":"Shell Customization","text":""},{"location":"dev-notes/linux/bash/#dotfiles","title":"Dotfiles","text":"<ul> <li>more details</li> </ul>"},{"location":"dev-notes/linux/bash/#startup-scripts","title":"Startup Scripts","text":"<ul> <li>simplified flow (reference)</li> </ul> Text Only<pre><code>                    +-----------------+   +------FIRST------+   +-----------------+\n                    |                 |   | ~/.bash_profile |   |                 |\nlogin shell --------&gt;|  /etc/profile   |--&gt;| ~/.bash_login -----&gt;|  ~/.bashrc      |\n                    |                 |   | ~/.profile      |   |                 |\n                    +-----------------+   +-----------------+   +-----------------+\n                    +-----------------+   +-----------------+\n                    |                 |   |                 |\ninteractive shell --&gt;|  /etc/bashrc ------&gt;| ~/.bashrc       |\n                    |                 |   |                 |\n                    +-----------------+   +-----------------+\n                    +-----------------+\n                    |                 |\nlogout shell -------&gt;|  ~/.bash_logout |\n                    |                 |\n                    +-----------------+\n</code></pre> <ul> <li><code>[]--&gt;[]</code>:  automatically sourced by workflow</li> <li><code>[---&gt;[]</code>:  manually sourced by convention</li> <li><code>FIRST</code>:    only first available executed</li> <li><code>echo \"${BASH_SOURCE[0]}\"</code>: use to inspect script's sourcing origins</li> <li>detailed flow (reference)</li> </ul> Interactive Login Non-Interactive Login Interactive Non-Login Non-Interactive Non-Login Script /etc/profile 1 1 /etc/bash.bashrc 1 ~/.bashrc 2 ~/.bash_profile 2.A 2.A ~/.bash_login 2.B 2.B ~/.profile 2.C 2.C BASH_ENV 1 1 ~/.bash_logout 3 3"},{"location":"dev-notes/linux/bash/#variables","title":"Variables","text":"<ul> <li>generally quote your variables unless they contain wildcards to expand or command fragments Bash<pre><code>name=\"John\"\necho $name  # see below\necho \"$name\"\necho \"${name}!\"\nwildcard=\"*.txt\"\noption=\"iv\"\ncp -$options $wildcard /tmp\n</code></pre></li> </ul>"},{"location":"dev-notes/linux/bash/#special-variables","title":"Special Variables","text":"<ul> <li>(Reference)</li> </ul> Expression Description <code>$?</code> Exit status of last task <code>$!</code> PID of last background task <code>$$</code> PID of shell <code>$0</code> Filename of the shell script <code>$_</code> Last argument of the previous command <code>${PIPESTATUS[n]}</code> return value of piped commands (array)"},{"location":"dev-notes/linux/bash/#string-quotes","title":"String Quotes","text":"Bash<pre><code>name=\"John\"\necho \"Hi $name\"  #=&gt; Hi John\necho 'Hi $name'  #=&gt; Hi $name\n</code></pre>"},{"location":"dev-notes/linux/bash/#arrays","title":"Arrays","text":""},{"location":"dev-notes/linux/bash/#array-declaration","title":"Array Declaration","text":"Bash<pre><code>Fruits=('Apple' 'Banana' 'Orange')\n\nFruits[0]=\"Apple\"\nFruits[1]=\"Banana\"\nFruits[2]=\"Orange\"\n</code></pre>"},{"location":"dev-notes/linux/bash/#array-access","title":"Array Access","text":"Bash<pre><code>echo \"${Fruits[0]}\"              # Element #0\necho \"${Fruits[-1]}\"             # Last element\necho \"${Fruits[@]}\"              # All elements, space-separated\necho \"${Fruits[*]}\"              # All elements, space-separated\necho \"${#Fruits[@]}\"             # Number of elements\necho \"${#Fruits}\"                # String length of the 1st element\necho \"${#Fruits[3]}\"             # String length of the Nth element\necho \"${Fruits[@]:3:2}\"          # Range (from position 3, length 2)\necho \"${!Fruits[@]}\"             # Keys of all elements, space-separated\nfor item in \"${Fruits[@]}\"; do   # Array iteration\n  echo \"$item\"\ndone\n</code></pre>"},{"location":"dev-notes/linux/bash/#array-operations","title":"Array Operations","text":"Bash<pre><code>Fruits=(\"${Fruits[@]}\" \"Watermelon\")    # Push\nFruits+=('Watermelon')                  # Also Push\nFruits=( \"${Fruits[@]/Ap*/}\" )          # Remove by regex match\nunset Fruits[2]                         # Remove one item\nFruits=(\"${Fruits[@]}\")                 # Duplicate\nFruits=(\"${Fruits[@]}\" \"${Veggies[@]}\") # Concatenate\nlines=(`cat \"logfile\"`)                 # Read from file\n</code></pre>"},{"location":"dev-notes/linux/bash/#conditionals","title":"Conditionals","text":""},{"location":"dev-notes/linux/bash/#-vs-","title":"<code>[</code> vs <code>[[</code>","text":"<ul> <li><code>[</code>: shell command shorthand for <code>test</code> command</li> <li><code>[[</code>: shell keyword with quality of life nicities</li> <li> <p>integer comparison operators: <code>==</code>,<code>!=</code>,<code>&lt;</code>,<code>&lt;=</code>,<code>&gt;</code>,<code>&gt;=</code> Bash<pre><code>[[ 1 &lt; 2 ]] &amp;&amp; echo \"true\"\n[ 1 \\&lt; 2  ] &amp;&amp; echo \"true\"\n[ 1 -lt 2 ] &amp;&amp; echo \"true\"\n</code></pre></p> </li> <li> <p>logic/grouping operators: <code>&amp;&amp;</code>,<code>||</code>,<code>(</code>,<code>)</code></p> </li> <li>pattern matching: <code>[ $name = *c* ]</code></li> <li>regular expressions: <code>[[ $name =~ ^Ali ]]</code></li> </ul>"},{"location":"dev-notes/linux/bash/#conditions","title":"Conditions","text":"<p>Any program that obeys the same logic (like all base utils, such as <code>grep(1)</code> or <code>ping(1)</code>) can be used as condition, see examples.</p> Condition Description <code>[[ -z STRING ]]</code> Empty string <code>[[ -n STRING ]]</code> Not empty string <code>[[ STRING == STRING ]]</code> Equal <code>[[ STRING != STRING ]]</code> Not Equal <code>[[ NUM -eq NUM ]]</code> Equal <code>[[ NUM -ne NUM ]]</code> Not equal <code>[[ NUM -lt NUM ]]</code> Less than <code>[[ NUM -le NUM ]]</code> Less than or equal <code>[[ NUM -gt NUM ]]</code> Greater than <code>[[ NUM -ge NUM ]]</code> Greater than or equal <code>[[ STRING =~ STRING ]]</code> Regexp <code>(( NUM &lt; NUM ))</code> Numeric conditions <code>[[ -o noclobber ]]</code> If OPTIONNAME is enabled <code>[[ ! EXPR ]]</code> Not <code>[[ X &amp;&amp; Y ]]</code> And `[[ X"},{"location":"dev-notes/linux/bash/#file-conditions","title":"File Conditions","text":"Condition Description <code>[ -e FILE ](../../%20-e%20FILE%20 \" -e FILE \")</code> Exists <code>[ -r FILE ](../../%20-r%20FILE%20 \" -r FILE \")</code> Readable <code>[ -h FILE ](../../%20-h%20FILE%20 \" -h FILE \")</code> Symlink <code>[ -d FILE ](../../%20-d%20FILE%20 \" -d FILE \")</code> Directory <code>[ -w FILE ](../../%20-w%20FILE%20 \" -w FILE \")</code> Writable <code>[ -s FILE ](../../%20-s%20FILE%20 \" -s FILE \")</code> Size is &gt; 0 bytes <code>[ -f FILE ](../../%20-f%20FILE%20 \" -f FILE \")</code> File <code>[ -x FILE ](../../%20-x%20FILE%20 \" -x FILE \")</code> Executable <code>[ FILE1 -nt FILE2 ](../../%20FILE1%20-nt%20FILE2%20 \" FILE1 -nt FILE2 \")</code> 1 is more recent than 2 <code>[ FILE1 -ot FILE2 ](../../%20FILE1%20-ot%20FILE2%20 \" FILE1 -ot FILE2 \")</code> 2 is more recent than 1 <code>[ FILE1 -ef FILE2 ](../../%20FILE1%20-ef%20FILE2%20 \" FILE1 -ef FILE2 \")</code> Same files"},{"location":"dev-notes/linux/bash/#examples","title":"Examples","text":"Bash<pre><code># String\nif [ -z \"$string\" ](../../%20-z%20%22%24string%22%20 \" -z \"$string\" \"); then\n  echo \"String is empty\"\nelif [ -n \"$string\" ](../../%20-n%20%22%24string%22%20 \" -n \"$string\" \"); then\n  echo \"String is not empty\"\nelse\n  echo \"This never happens\"\nfi\n</code></pre> Bash<pre><code># Combinations\nif [[ X &amp;&amp; Y ]]; then\n  ...\nfi\n</code></pre> Bash<pre><code># Equal\nif [[ \"$A\" == \"$B\" ]]\n</code></pre> Bash<pre><code># Regex\nif [[ \"A\" =~ . ]]\n</code></pre> Bash<pre><code>if (( $a &lt; $b )); then\n   echo \"$a is smaller than $b\"\nfi\n</code></pre> Bash<pre><code>if [[ -e \"file.txt\" ]]; then\n  echo \"file exists\"\nfi\n</code></pre>"},{"location":"dev-notes/linux/bash/#command-execution","title":"Command Execution","text":""},{"location":"dev-notes/linux/bash/#shell-execution","title":"Shell Execution","text":"Bash<pre><code>echo \"I'm in $(pwd)\"\necho \"I'm in `pwd`\"  # deprecated\n# Same\n</code></pre>"},{"location":"dev-notes/linux/bash/#conditional-execution","title":"Conditional Execution","text":"Bash<pre><code>git commit &amp;&amp; git push\ngit commit || echo \"Commit failed\"\n</code></pre>"},{"location":"dev-notes/linux/bash/#command-substitution","title":"Command substitution","text":"<p>(Reference)</p>"},{"location":"dev-notes/linux/bash/#strict-mode","title":"Strict Mode","text":"<ul> <li>Reference</li> </ul> Bash<pre><code>set -euo pipefail\nIFS=$'\\n\\t'\n</code></pre>"},{"location":"dev-notes/linux/bash/#parameter-expansions","title":"Parameter Expansions","text":""},{"location":"dev-notes/linux/bash/#basic-examples","title":"Basic Examples","text":"Bash<pre><code>name=\"John\"\necho \"${name}\"\necho \"${name/J/j}\"    #=&gt; \"john\" (substitution)\necho \"${name:0:2}\"    #=&gt; \"Jo\" (slicing)\necho \"${name::2}\"     #=&gt; \"Jo\" (slicing)\necho \"${name::-1}\"    #=&gt; \"Joh\" (slicing)\necho \"${name:(-1)}\"   #=&gt; \"n\" (slicing from right)\necho \"${name:(-2):1}\" #=&gt; \"h\" (slicing from right)\necho \"${food:-Cake}\"  #=&gt; $food or \"Cake\"\n</code></pre> Bash<pre><code>length=2\necho \"${name:0:length}\"  #=&gt; \"Jo\"\n</code></pre>"},{"location":"dev-notes/linux/bash/#expanded-examples","title":"Expanded Examples","text":"<ul> <li>(Reference)</li> </ul> Bash<pre><code>str=\"/path/to/foo.cpp\"\necho \"${str%.cpp}\"    # /path/to/foo\necho \"${str%.cpp}.o\"  # /path/to/foo.o\necho \"${str%/*}\"      # /path/to\n\necho \"${str##*.}\"     # cpp (extension)\necho \"${str##*/}\"     # foo.cpp (basepath)\n\necho \"${str#*/}\"      # path/to/foo.cpp\necho \"${str##*/}\"     # foo.cpp\n\necho \"${str/foo/bar}\" # /path/to/bar.cpp\n</code></pre> Bash<pre><code>str=\"Hello world\"\necho \"${str:6:5}\"   # \"world\"\necho \"${str: -5:5}\"  # \"world\"\n</code></pre> Bash<pre><code>src=\"/path/to/foo.cpp\"\nbase=${src##*/}   #=&gt; \"foo.cpp\" (basepath)\ndir=${src%$base}  #=&gt; \"/path/to/\" (dirpath)\n</code></pre>"},{"location":"dev-notes/linux/bash/#substitution","title":"Substitution","text":"Code Description <code>${foo%suffix}</code> Remove suffix <code>${foo#prefix}</code> Remove prefix <code>${foo%%suffix}</code> Remove long suffix <code>${foo/%suffix}</code> Remove long suffix <code>${foo##prefix}</code> Remove long prefix <code>${foo/#prefix}</code> Remove long prefix <code>${foo/from/to}</code> Replace first match <code>${foo//from/to}</code> Replace all <code>${foo/%from/to}</code> Replace suffix <code>${foo/#from/to}</code> Replace prefix"},{"location":"dev-notes/linux/bash/#comments","title":"Comments","text":"Bash<pre><code># Single line comment\n</code></pre> Bash<pre><code>: '\nThis is a\nmulti line\ncomment\n'\n</code></pre>"},{"location":"dev-notes/linux/bash/#substrings","title":"Substrings","text":"Expression Description <code>${foo:0:3}</code> Substring (position, length) <code>${foo:(-3):3}</code> Substring from the right"},{"location":"dev-notes/linux/bash/#length","title":"Length","text":"Expression Description <code>${#foo}</code> Length of <code>$foo</code>"},{"location":"dev-notes/linux/bash/#manipulation","title":"Manipulation","text":"Bash<pre><code>str=\"HELLO WORLD!\"\necho \"${str,}\"   #=&gt; \"hELLO WORLD!\" (lowercase 1st letter)\necho \"${str,,}\"  #=&gt; \"hello world!\" (all lowercase)\n\nstr=\"hello world!\"\necho \"${str^}\"   #=&gt; \"Hello world!\" (uppercase 1st letter)\necho \"${str^^}\"  #=&gt; \"HELLO WORLD!\" (all uppercase)\n</code></pre>"},{"location":"dev-notes/linux/bash/#default-values","title":"Default values","text":"Expression Description <code>${foo:-val}</code> <code>$foo</code>, or <code>val</code> if unset (or null) <code>${foo:=val}</code> Set <code>$foo</code> to <code>val</code> if unset (or null) <code>${foo:+val}</code> <code>val</code> if <code>$foo</code> is set (and not null) <code>${foo:?message}</code> Show error message and exit if <code>$foo</code> is unset (or null) <p>[!note] Omitting the <code>:</code> removes the (non)nullity checks e.g. <code>${foo-val}</code> expands to <code>val</code> if unset otherwise <code>$foo</code></p>"},{"location":"dev-notes/linux/bash/#loops","title":"Loops","text":""},{"location":"dev-notes/linux/bash/#basic-for-loop","title":"Basic for loop","text":"Bash<pre><code>for i in /etc/rc.*; do\n  echo \"$i\"\ndone\n</code></pre>"},{"location":"dev-notes/linux/bash/#c-like-for-loop","title":"C-like for loop","text":"Bash<pre><code>for ((i = 0 ; i &lt; 100 ; i++)); do\n  echo \"$i\"\ndone\n</code></pre>"},{"location":"dev-notes/linux/bash/#ranges","title":"Ranges","text":"Bash<pre><code># Basic\nfor i in {1..5}; do\n  echo \"Welcome $i\"\ndone\n\n# With step size\nfor i in {5..50..5}; do\n  echo \"Welcome $i\"\ndone\n</code></pre>"},{"location":"dev-notes/linux/bash/#reading-lines","title":"Reading lines","text":"Bash<pre><code>while read -r line; do\n  echo \"$line\"\ndone &lt;file.txt\n</code></pre>"},{"location":"dev-notes/linux/bash/#forever","title":"Forever","text":"Bash<pre><code>while true; do\n  ...\ndone\n</code></pre>"},{"location":"dev-notes/linux/bash/#functions","title":"Functions","text":""},{"location":"dev-notes/linux/bash/#defining-functions","title":"Defining functions","text":"Bash<pre><code>myfunc() {\n  echo \"hello $1\"\n}\n</code></pre> Bash<pre><code># Same as above (alternate syntax)\nfunction myfunc() {\n  echo \"hello $1\"\n}\n</code></pre> Bash<pre><code>myfunc \"John\"\n</code></pre>"},{"location":"dev-notes/linux/bash/#returning-values","title":"Returning values","text":"Bash<pre><code>myfunc() {\n  local myresult='some value'\n  echo \"$myresult\"\n}\n</code></pre> Bash<pre><code>result=$(myfunc)\n</code></pre>"},{"location":"dev-notes/linux/bash/#raising-errors","title":"Raising errors","text":"Bash<pre><code>myfunc() {\n  return 1\n}\n</code></pre> Bash<pre><code>if myfunc; then\n  echo \"success\"\nelse\n  echo \"failure\"\nfi\n</code></pre>"},{"location":"dev-notes/linux/bash/#positional-parameters","title":"Positional Parameters","text":"Expression Description <code>$#</code> Number of arguments <code>$*</code> All positional arguments  (as a single word) <code>$@</code> All positional arguments (as separate strings) <code>$1</code> First argument <code>$_</code> Last argument of the previous command <p>[!note] <code>$@</code> and <code>$*</code> must be quoted; unquoted behavior is exactly the same i.e. args as separate strings</p>"},{"location":"dev-notes/linux/bash/#-vs--example","title":"<code>$@</code> vs <code>$*</code> Example","text":"Bash<pre><code>print_params() { \n  echo \"\\$1 = $1\"\n  echo \"\\$2 = $2\"\n  echo \"\\$3 = $3\"\n  echo \"\\$4 = $4\"\n}\npass_params() {\n  echo -e \"\\n\" '$* =&gt;';   print_params $*\n  echo -e \"\\n\" '\"$*\" =&gt;'; print_params \"$*\"\n  echo -e \"\\n\" '$@ =&gt;';   print_params $@\n  echo -e \"\\n\" '\"$@\" =&gt;'; print_params \"$@\"\n}\n\npass_params \"word\" \"words with spaces\"\n$* =&gt;\n  $1 = word\n  $2 = words\n  $3 = with\n  $4 = spaces\n\"$*\" =&gt;\n  $1 = word words with spaces\n  $2 =\n  $3 =\n  $4 =\n$@ =&gt;\n  $1 = word\n  $2 = words\n  $3 = with\n  $4 = spaces\n\"$@\" =&gt;\n  $1 = word\n  $2 = words with spaces\n  $3 =\n  $4 =\n</code></pre>"},{"location":"dev-notes/linux/bash/#special-parameters","title":"Special Parameters","text":"<ul> <li>(Reference)</li> </ul>"},{"location":"dev-notes/linux/bash/#color-formatting","title":"Color Formatting","text":"<ul> <li> <p><code>\\e</code>:  0x1b ascii escape character</p> </li> <li> <p><code>\\e[38;5;(n)m</code>: Select foreground color</p> </li> <li> <p><code>\\e[48;5;(n)m</code>: Select background color</p> </li> <li> <p>0..7:      standard colors (e.g. <code>\\e[30-37m</code>)</p> </li> <li>8..15:     high intensity colors (e.g. <code>\\e[90-97m</code>)</li> <li>16..231:   6 x 6 x 6 cube (216 colors): 16 + 36 x r + 6 x g + b (0 &lt;= r, g, b &lt;= 5)</li> <li>232..255:  grayscale from black to white in 24 steps</li> <li> <p>(Reference)</p> </li> <li> <p>more details</p> </li> </ul>"},{"location":"dev-notes/linux/disk-health/","title":"Disk Health","text":"<p>https://help.ubuntu.com/community/Smartmontools</p> <ul> <li> <p>Failure Trends in a Large Disk Drive Population</p> </li> <li> <p>Google field study covering 100,000+ consumer-grade drives from 12/2005-08/2006</p> </li> <li>correlations between certain S.M.A.R.T. information and annualized failure rates:   ||||   |--|--|--|   |<code>uncorrectable error</code>|<code>198 (0xC6)</code>|after 1<sup>st</sup> error drives are 39x more likely to fail within 60 days|   |<code>reallocation count</code>|<code>5   (0x05)</code>|after 1<sup>st</sup> error drives are 14x more likely to fail within 60 days|   |<code>offline reallocations</code>|<code>196 (0xC4)</code>|after 1<sup>st</sup> error drives are 21x more likely to fail within 60 days|   |<code>probational/current pending sector counts</code>|<code>197 (0xC5)</code>|after 1<sup>st</sup> error drives are 14x more likely to fail within 60 days|   |<code>Temperature</code>||little correlation except at at extremes 40-45\u00b0,&gt;45\u00b0|   |<code>Seek Errors</code>||little correlation|   |<code>CRC Errors</code>||little correlation|   |<code>Power Cycles</code>||little correlation|   |<code>Calibration Retries</code>||little correlation|   |<code>Spin Retries</code>||little correlation|   |<code>Power-on hours</code>||little correlation|   |<code>Vibration</code>||little correlation|</li> </ul> <p>[!warning] Large number of drive failures occur with minimal to no warnings</p> <ul> <li>56% failed drives: zero counts in major <code>SMART</code> errors (<code>scan errors</code>, <code>reallocation count</code>, <code>offline reallocation</code>, <code>probational count</code>)</li> <li>36% failed drives: zero counts in all <code>SMART</code> errors</li> </ul>"},{"location":"dev-notes/linux/linux-basics/","title":"Linux Basics","text":""},{"location":"dev-notes/linux/linux-basics/#resources","title":"Resources","text":""},{"location":"dev-notes/linux/linux-basics/#guides","title":"Guides","text":"<ul> <li>The Art of the Command Line: one-sheet condensed linux study guide</li> <li>Ubuntu Community Documentation: useful beginner series</li> <li>Ultimate Linux Guide for Windows users</li> <li>Learning the Shell</li> <li>DigitalOcean Linux Basics Tutorials: beginner oriented tutorials</li> <li>Introduction to Linux Basics</li> <li>Linux Command Line Primer</li> <li>How To Use <code>ps</code>, <code>kill</code>, <code>nice</code> to Manage Linux Processes</li> </ul>"},{"location":"dev-notes/linux/linux-basics/#references","title":"References","text":"<ul> <li>commandlinefu: command-line gems/one liners</li> <li>archlinux wiki: unusually comprehensive with high signal/noise ratio</li> <li>Introduction to Linux Technology and Philosophy by Jeremy Hajek: (github source)</li> <li>The Linux Command Line by William Shotts</li> <li>Bite Size Linux by Julia Evans</li> <li>Help/Manuals</li> <li>ManKier explain: concise pretty man pages with an API</li> <li>explainshell: match command-line arguments to their help text</li> <li>tldr pages: more concise man pages</li> <li>manned: man page versions across a range of distributions</li> <li>ubuntu: ubuntu man pages and documentation</li> </ul>"},{"location":"dev-notes/linux/linux-basics/#communities","title":"Communities","text":"<ul> <li>/r/linux4noobs</li> <li>/r/bashonubuntuonwindows</li> <li>/r/linuxquestions</li> <li>askubuntu</li> </ul>"},{"location":"dev-notes/linux/linux-basics/#tools","title":"Tools","text":"<ul> <li>Modern Linux Tools</li> </ul>"},{"location":"dev-notes/linux/linux-basics/#filesystem","title":"Filesystem","text":"<ul> <li><code>which</code>: display executable's location</li> <li><code>type</code>: describe a command</li> <li> <p><code>rm</code>: delete directory Bash<pre><code>rm -rf\n</code></pre></p> </li> <li> <p><code>find</code>: find file/directory recursively Bash<pre><code>find . -iname _gsdata_ -exec rm {} +\nfind . -type d -name _gsdata_ -print -exec rm -rfv {} +\nfind . -type f \\( -name .DS_Store -o -name Thumbs.db \\) -print -exec rm {} +\n</code></pre></p> </li> <li> <p><code>tree</code>: show directory structure as tree Bash<pre><code>tree -d [dir]   # list directories only\ntree -ah        # include hidden, human readable\ntree -fp -L &lt;n&gt; # include paths, permissions, limit up to N levels\n</code></pre></p> </li> <li> <p><code>df</code>: display free disk space Bash<pre><code>df -lhT # show usage of all mounted filesystems\n</code></pre></p> </li> <li> <p><code>du</code>: disk usage/size of directory Bash<pre><code>du -sh fooDir/\n</code></pre></p> </li> </ul>"},{"location":"dev-notes/linux/linux-basics/#package-management","title":"Package Management","text":"Command Description <code>apt list --installed</code> list installed <code>pkgs</code> <code>sudo apt policy</code> list installed `repositories' <code>apt show &lt;pkg&gt;</code> show dependencies of <code>pkgs</code> <code>sudo apt install &lt;pkg&gt;</code> install <code>&lt;pkg&gt;</code> <code>sudo apt remove &lt;pkg&gt;</code> uninstall <code>&lt;pkg&gt;</code> <code>sudo apt autoremove</code> uninstall unused dependencies e.g. <code>&lt;pkg&gt;</code> leftover deps that were auto installed but longer required <code>sudo apt purge &lt;pkg&gt;</code> uninstall <code>&lt;pkg&gt;</code> configuration files e.g. located under <code>/etc</code>"},{"location":"dev-notes/linux/linux-basics/#console-management","title":"Console Management","text":"<ul> <li> <p><code>env</code>: print the environment variables</p> </li> <li> <p><code>tail</code>: displays the last part of a file</p> </li> </ul> Bash<pre><code>tail -f [file]      # outputs last lines in realtime\ntail -n 100 [file]  # outputs last n lines\n</code></pre> <ul> <li> <p><code>bind</code>: configure keybinds for terminal</p> </li> <li> <p><code>bind</code>: query keybinds Bash<pre><code>bind -l      # List all bindable readline functions\nbind -v      # List variables and values\nbind -psX    # List keys bound to readline functions, macros, and shell executions\nbind -q &lt;fn&gt; # Query about which keys invoke the named function\n</code></pre></p> </li> <li> <p><code>bind</code>: change keybinds Bash<pre><code>bind -u &lt;fn&gt;                 # Unbind all keys which are bound to the named function\nbind -r &lt;keys&gt;               # Remove the binding for &lt;keys&gt;\nbind -f &lt;filename&gt;           # Read key bindings from &lt;filename&gt;\nbind -x '\"&lt;keys&gt;\": \"&lt;cmds&gt;\"' # Execute &lt;cmds&gt; when &lt;keys&gt; is entered\n</code></pre></p> </li> <li> <p><code>less</code>: console pager   | Navigation Key        | Action                                |   | --------------------- | ------------------------------------- |   | <code>down</code>/<code>up</code>,<code>j</code>/<code>k</code>   | move down/up one line                 |   | <code>space bar</code>/<code>b</code>       | move down/up one page                 |   | <code>left</code>/<code>right</code>        | scroll left/right horizontally        |   | <code>g</code>/<code>G</code>,<code>Home</code>/<code>End</code>  | go to start/end line                  |   | <code>/pattern</code>/<code>?pattern</code> | search forward/backward for <code>pattern</code> |   | <code>n</code>/<code>N</code>               | go to next/previous occurrence        |   | <code>q</code>                   | Quit <code>less</code>                           |</p> </li> </ul>"},{"location":"dev-notes/linux/linux-basics/#networking","title":"Networking","text":"<ul> <li>list connections</li> </ul> Bash<pre><code>netstat --all | head -n 15\nsudo netstat --tcp --udp --listening --program --numeric --extend\n</code></pre> <ul> <li>query interaces</li> </ul> Bash<pre><code>ip a\nnetstat -ie\n</code></pre>"},{"location":"dev-notes/linux/linux-basics/#permissions","title":"Permissions","text":"<ul> <li><code>stat</code>: pretty print stats about file</li> </ul> Bash<pre><code>stat [file]\n</code></pre> <ul> <li><code>permission attributes</code></li> </ul> Text Only<pre><code>.rwxrwxrwx  path/to/file\n\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502 \n\u2514\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2500 file type attribute\n \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502   -: file\n \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502   d: directory\n \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502   l: symbolic link\n \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502   c: character special file representing byte stream device e.g. /dev/null\n \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502   b: block special file representing block stream device e.g. hard drive\n \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\n \u251c\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2500 u: user owner\n \u2514\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2500  r: read\n  \u2514\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2500  w: write\n   \u2514\u2502\u2502\u2502\u2502\u2502\u2502\u2500  x: execute\n    \u2502\u2502\u2502\u2502\u2502\u2502\n    \u251c\u2502\u2502\u2502\u2502\u2502\u2500 g: group owner\n    \u2514\u2502\u2502\u2502\u2502\u2502\u2500  r: read\n     \u2514\u2502\u2502\u2502\u2502\u2500  w: write\n      \u2514\u2502\u2502\u2502\u2500  x: execute\n       \u2502\u2502\u2502\n       \u251c\u2502\u2502\u2500 o: other\n       \u2514\u2502\u2502\u2500  r: read\n        \u2514\u2502\u2500  w: write\n         \u2514\u2500  x: execute\n</code></pre> <ul> <li> <p><code>id</code>:    display user identity</p> </li> <li> <p><code>umask</code>: set the default file permissions</p> </li> <li> <p><code>chmod</code>: change permissions to folders and files</p> </li> </ul> Bash<pre><code>find . -type d -exec chmod 755 {} +\nfind . -type f -exec chmod 644 {} +\n</code></pre> <ul> <li><code>chmod</code> recursively to 775/664</li> </ul> Bash<pre><code>chmod -R a=,a+rX,u+w,g+w /some/path/here\n          ^  ^    ^   ^ adds write to group\n          |  |    | adds write to user\n          |  | adds read to all and execute to all folders (which controls access)\n          | sets all to `000`\n</code></pre> <ul> <li><code>chown</code>: change ownership to user/group recursively</li> </ul> Bash<pre><code>chown -R user:group /some/path/here\n</code></pre>"},{"location":"dev-notes/linux/linux-basics/#process-management","title":"Process Management","text":"<ul> <li> <p><code>id</code>: find UID/GID for user Bash<pre><code>id [username]\n</code></pre></p> </li> <li> <p><code>ps</code>: list running processes Bash<pre><code>ps aux\npstree\n</code></pre></p> </li> <li> <p><code>pkill</code>: kill process by name Bash<pre><code>pkill chrome\n</code></pre></p> </li> </ul>"},{"location":"dev-notes/linux/linux-basics/#services","title":"Services","text":"<ul> <li> <p><code>systemd</code>: initialization system and service manager </p> </li> <li> <p>systemd quickstart guide</p> </li> <li> <p><code>systemctl</code>: manage services/daemons</p> </li> <li> <p>systemctl quickstart guide</p> <ul> <li><code>systemctl start [name.service]</code></li> <li><code>systemctl stop [name.service]</code></li> <li><code>systemctl restart [name.service]</code></li> <li><code>systemctl reload [name.service]</code></li> <li><code>systemctl status [name.service]</code></li> <li><code>systemctl is-active [name.service]</code></li> <li><code>systemctl list-units --type service --all</code></li> <li>unit types</li> </ul> Bash<pre><code>$systemctl list-unit --type=help\nservice   # service\ntarget    # group of units\nmount     # filesystem mountpoint\nautomount # filesystem auto-mountpoint\ndevice    # kernel device names, which you can see in sysfs and udev\npath      # file or directory\nscope     # external processes not started by systemd\nslice     # a management unit of processes\nsnapshot  # systemd saved state\nsocket    # IPC (inter-process communication) socket\nswap      # swap file\ntimer     # systemd timer\n</code></pre> </li> <li> <p>list services</p> Bash<pre><code>systemctl | grep running                                       # Loaded+Active\nsystemctl --no-pager | grep running | column -t                # For more readable output\nsystemctl list-units --no-pager --all                          # Loaded services: Active+Pending+Failed+Inactive+Dependents\nsystemctl list-units --no-pager --all --state=inactive         # Loaded services: Inactive\nsystemctl list-units --no-pager --type=service                 # Loaded services: Active+Pending+Failed\nsystemctl list-units --no-pager --type=service --state=running # Loaded services: Running\nsystemctl list-unit-files --no-pager --type=service            # Installed services: Loaded+Unloaded\n</code></pre> </li> <li> <p>start/stop/restart the specified service</p> Bash<pre><code>systemctl start [service]\nsystemctl stop [service]\nsystemctl restart [service]\n</code></pre> </li> <li> <p>enable/disable service to auto start at boot time</p> Bash<pre><code>systemctl enable [service]\nsystemctl disable [service]\n</code></pre> </li> <li> <p>show/check service current status/runtime information</p> Bash<pre><code>systemctl status [service]\nsystemctl is-active [service]\nsystemctl is-enabled [service]\nsystemctl is-failed [service]\nsystemctl list-dependencies [service]\n</code></pre> </li> </ul>"},{"location":"dev-notes/linux/linux-basics/#diagnostics","title":"Diagnostics","text":"<ul> <li><code>syslog</code>: a protocol for transferring log messages</li> <li> <p><code>dmesg</code>: command that prints kernel logs Bash<pre><code>dmesg -H         # command that prints kernel logs\n</code></pre></p> </li> <li> <p>journalctl: service that collects logs from <code>systemd</code> Bash<pre><code>journalctl                              # all boot log entries\njournalctl -k                           # all boot kernel entries\njournalctl -b                           # current boot entries\njournalctl -b -k                        # current boot kernel entries\njournalctl -b --priority=err            # all error or higher logs since last boot\njournalctl -b --priority=err..warning   # all warning to notice since last boot\n\n# Log Levels\n#  emerg (0): system is unusable\n#  alert (1): action must be taken immediately\n#   crit (2): critical conditions\n#    err (3): error conditions\n#   warn (4): warning conditions\n# notice (5): normal but significant condition\n#   info (6): informational\n#  debug (7): debug-level messages\n</code></pre></p> </li> </ul>"},{"location":"dev-notes/linux/linux-modern-tools/","title":"Modern Linux Tools","text":""},{"location":"dev-notes/linux/linux-modern-tools/#other-resources","title":"Other Resources","text":"<ul> <li>modern unix: modern/faster/saner alternatives to common unix commands</li> <li>new(ish) command line tools</li> <li>book of secret knowledge: various materials/cheatsheets/tools</li> <li>awesome linux software: awesome list of linux apps</li> <li>archlinux utilities: comprehensive list with descriptions</li> </ul>"},{"location":"dev-notes/linux/linux-modern-tools/#cli-replacements","title":"CLI Replacements","text":"<code>bat</code> <code>cat</code> clone with syntax highlighting and <code>git</code> integration <code>exa</code> modern replacement for <code>ls</code>/<code>tree</code>, not maintained <code>eza</code> modern <code>ls</code>/<code>tree</code> based on <code>exa</code> fork <code>lsd</code> next gen <code>ls</code>, backwards compatible <code>delta</code> viewer for <code>git</code> and <code>diff</code> output <code>ncdu</code> intuitive <code>du</code> with ncurses interface <code>dust</code> more intuitive version of <code>du</code> written in rust <code>duf</code> better <code>df</code> alternative <code>broot</code> better <code>tree</code> with navigation support <code>fd</code> simple, fast and user-friendly alternative to <code>find</code> <code>ripgrep</code> extremely fast alternative to <code>grep</code> that respects your gitignore <code>ag</code> code searching tool similar to <code>ack</code>, but faster <code>fzf</code> general purpose command-line fuzzy <code>find</code> <code>bfs</code> breadth-first <code>find</code> alternative <code>mcfly</code> fly through your shell <code>history</code> <code>choose</code> human-friendly and fast alternative to <code>cut</code> and (sometimes) <code>awk</code> <code>jq</code> <code>sed</code> for JSON data <code>sd</code> intuitive find/replace CLI. <code>sed</code> alternative <code>bottom</code> another cross-platform graphical process/system monitor <code>glances</code> <code>top</code>/<code>htop</code> alternative <code>gtop</code> System monitoring dashboard for terminal <code>hyperfine</code> command-line benchmarking tool <code>gping</code> <code>ping</code> with a graph <code>procs</code> <code>ps</code> rust replacement <code>httpie</code> modern, user-friendly command-line HTTP client for the API era <code>curlie</code> power of <code>curl</code>, the ease of use of <code>httpie</code> <code>xh</code> performance focused alternative of <code>httpie</code> <code>zoxide</code> smarter <code>cd</code> command inspired by <code>z</code> <code>micro</code> modern terminal text editor <code>nnn</code> fast lean terminal file manager"},{"location":"dev-notes/linux/linux-modern-tools/#new-cli-tools","title":"New CLI tools","text":"<code>up</code> pipes with instant live preview"},{"location":"dev-notes/linux/linux-modern-tools/#help-tools","title":"Help Tools","text":"<code>ManKier</code> explain shell command with concise pretty man pages <code>tldr</code> concise <code>man</code> pages with practical examples <code>tealdeer</code> <code>tldr</code> fast rust implementation <code>explainshell</code> match command-line arguments to their help text <code>cheat.sh</code> unified <code>cheatsheets</code> with <code>tldr</code> pages"},{"location":"dev-notes/linux/linux-modern-tools/#gui-tools","title":"GUI Tools","text":"<code>baobab</code> gui disk usage analyzer <code>stacer</code> gui system optimizer/monitoring"},{"location":"dev-notes/linux/openssh/","title":"OpenSSH","text":""},{"location":"dev-notes/linux/openssh/#cheatsheet","title":"Cheatsheet","text":"<ul> <li>generate ssh key</li> </ul> Bash<pre><code>mkdir ~/.ssh\nssh-keygen -t ed25519 -C \"[user@server]\" -f ~/.ssh/[server]/id_ed25519\n</code></pre> <ul> <li>create the <code>authorized_keys</code></li> </ul> Bash<pre><code>touch ~/.ssh/authorized_keys\necho \"[public-key-sting]\" &gt;&gt; ~/.ssh/authorized_keys\ntype ~/.ssh/[server]/id_ed25519.pub | ssh [user]@[server] \"cat &gt;&gt; ~/.ssh/authorized_keys\"\n</code></pre> <ul> <li>set permissions/ownership on <code>.ssh</code></li> </ul> Bash<pre><code>chmod 700 -R ~/.ssh\nchmod 600 ~/.ssh/config\nchmod 644 ~/.ssh/*.pub\nchmod 644 ~/.ssh/authorized_keys\nchmod 644 ~/.ssh/known_hosts\nchown [user]:[group] ~/.ssh/authorized_keys\nll -R ~/.ssh | grep 'ssh\\|auth'\n</code></pre> <ul> <li>verify permissions/ownership on <code>.ssh</code></li> </ul> Bash<pre><code>ll -R ~ | grep 'ssh\\|auth'\n</code></pre>"},{"location":"dev-notes/linux/openssh/#ssh-hardening","title":"SSH Hardening","text":"<ul> <li>disable password login in <code>sshd_config</code></li> </ul> Bash<pre><code>sudo vi /etc/ssh/sshd_config\n# uncomment and change: \n  '#PasswordAuthentication yes' -&gt; 'PasswordAuthentication no'\nsudo systemctl restart ssh\n</code></pre> <p>[!danger] Open new SSH season and test login with RSA Keys before closing the existing connection</p> <ul> <li>change default ssh port in <code>sshd_config</code></li> </ul> Bash<pre><code>sudo vi /etc/ssh/sshd_config\n# change line\n  'port 1337'\nsudo systemctl restart ssh\n</code></pre>"},{"location":"dev-notes/linux/openssh/#references","title":"References","text":"<ul> <li>3os Project: technical documentation/guides for DevOps engineers/sysadmins</li> </ul>"},{"location":"dev-notes/linux/rsync/","title":"Rsync","text":""},{"location":"dev-notes/linux/rsync/#rsync-daemon","title":"Rsync Daemon","text":"<ul> <li>for host computers not running <code>SSH</code>/<code>RSH</code>, we can run rsync as a daemon</li> <li>listens on port 873 for incoming connections from other computers</li> </ul> <p>[!danger] not recommended for unsecure networks (e.g. Internet) bc it's unencrypted data transfer</p> <ul> <li> <p>two approaches to running rsync as a daemon</p> </li> <li> <p>launch rsync with <code>--daemon</code> option</p> </li> <li><code>inetd</code>/<code>xinetd</code> to launch/run rsync as a service</li> <li> <p>must configure the file <code>/etc/rsyncd.conf</code> and <code>/etc/rsyncd.secrets</code></p> </li> <li> <p>Reference</p> </li> <li> <p>synchronizing folders with rsync</p> </li> <li>running rsync as a daemon</li> <li>rsync command</li> <li>setting rsync daemon</li> </ul>"},{"location":"dev-notes/linux/rsync/#rsync-options","title":"Rsync Options","text":"<p><code>rsync -avh --info=progress2</code></p> Command Options <code>-axv</code> <code>--archive</code>/<code>-rlptgoD</code>, don't cross file-system boundaries <code>-r</code>: rescursive <code>-l</code>: copies symlinks as symlinks <code>-p</code>: preserves permissions <code>-t</code>: preserves modification times <code>-g</code>: preserves group <code>-o</code>: preserves owner <code>-D</code>: preserves device files <code>-HAXN</code> hardlinks, ACLs, xattrs, crtimes <code>--delete</code> propogate deletes to dst <code>--no-z</code> no compress <code>-P</code> <code>--partial</code>, <code>--progress</code> <code>-ni</code> <code>--dry-run</code>, <code>--itemize-changes</code> <code>-R</code> <code>--relative</code>: transform full paths to server root path relative <code>rsync -av  /foo/bar/baz.c remote:/tmp/ =&gt; /tmp/baz.c</code> <code>rsync -avR /foo/bar/baz.c remote:/tmp/ =&gt; /tmp/foo/bar/baz.c</code> <code>foo</code>,<code>foo/bar</code> (the extra folders) are implied directories <code>--password-file=\"~/rsyncd.secrets\"</code> password file <code>--log-file=\"~/rsyncd.log\"</code> log file <code>-e 'ssh -v -p 223'</code> Use ssh to access subsequent directory <code>rsync://&lt;user&gt;:&lt;pw&gt;@&lt;server&gt;/&lt;module&gt;/path/to/remote</code> source <code>/path/to/local</code> dest"},{"location":"dev-notes/linux/rsync/#understanding-rsync-output","title":"Understanding Rsync Output","text":""},{"location":"dev-notes/linux/rsync/#--itemize-change","title":"--itemize-change","text":"<p>[!example] sample output</p> Bash<pre><code>.d..t..g... ./\n.f...p.g... Something.pdf\n.f.....g... md5sum-2010-02-21.txt\n.f...p.g... prova.rb\n.d.....g... .metadata/\n.f...p.g... .metadata/.lock\n.f...p.g... .metadata/version.ini\n&gt;f+++++++++ Parameter_Usage.txt\n</code></pre> <ul> <li>schema (reference)</li> </ul> Text Only<pre><code>YXcstpoguax  path/to/file\n|||||||||||\n`----------- the type of update being done:\n ||||||||||   &lt;: file is being transferred to the remote host (sent).\n ||||||||||   &gt;: file is being transferred to the local host (received).\n ||||||||||   c: local change/creation for the item, such as:\n ||||||||||      - the creation of a directory\n ||||||||||      - the changing of a symlink,\n ||||||||||      - etc.\n ||||||||||   h: the item is a hard link to another item (requires --hard-links).\n ||||||||||   .: the item is not being updated (though it might have attributes that are being modified).\n ||||||||||   *: means that the rest of the itemized-output area contains a message (e.g. \"deleting\").\n ||||||||||\n `---------- the file type:\n  |||||||||   f for a file,\n  |||||||||   d for a directory,\n  |||||||||   L for a symlink,\n  |||||||||   D for a device,\n  |||||||||   S for a special file (e.g. named sockets and fifos).\n  |||||||||\n  `--------- c: different checksum (for regular files)\n   ||||||||     changed value (for symlink, device, and special file)\n   `-------- s: Size is different\n    `------- t: Modification time is different\n     `------ p: Permission are different\n      `----- o: Owner is different\n       `---- g: Group is different\n        `--- u: The u slot is reserved for future use.\n         `-- a: The ACL information changed\n</code></pre>"},{"location":"dev-notes/linux/rsync/#--infoprogress2","title":"--info=progress2","text":"<p>[!example] sample output</p> Bash<pre><code>105.45M 13% 602.83kB/s 0:02:50 (xfr#495, ir-chk=1020/3825)\n</code></pre> <ul> <li>105.45M     =&gt; destination reconstructed size</li> <li>13%         =&gt; completion percentage e.g. out of 811.15MB source file's total size</li> <li>602.83kB/s  =&gt; file reconstruction rate</li> <li>0:02:50     =&gt; data transfer operation elapsed time</li> <li>xfr#495          =&gt; 495<sup>th</sup> file is being transferred</li> <li>ir-chk=1020/3825 =&gt; 1020 files to check/verify out of 3825 detected running total</li> <li>file count is a running total because rsync starts file transfer during incremental recursion scan</li> <li>ir-chk     =&gt; ongoing incremental recursion check; total file count in file list is still going to increase</li> <li>to-chk     =&gt; finished incremental recursion check; finished computing the full size of the list</li> <li>to-chk=0/N =&gt; whole process finished where N is actual total number of files</li> <li>(reference)</li> </ul>"},{"location":"dev-notes/linux/wsl/","title":"WSL","text":""},{"location":"dev-notes/linux/wsl/#resources","title":"Resources","text":""},{"location":"dev-notes/linux/wsl/#overview","title":"Overview","text":"<ul> <li>awesome-wsl</li> <li>D3D12 GPU Video acceleration</li> </ul>"},{"location":"dev-notes/linux/wsl/#linux-desktop","title":"Linux Desktop","text":"<ul> <li> <p>X410 Guides</p> </li> <li> <p>Enable systemd in WSL2 and have the best Ubuntu GUI desktop experience!</p> </li> <li>Using X410 with WSL2</li> <li> <p>You can start Mate desktop in WSL 2 like this</p> </li> <li> <p>xWSL.cmd (Version 1.5 / 20220718)</p> </li> <li> <p>Ubuntu 20.04 Desktop GUI on WSL 2 on Surface Pro</p> </li> <li> <p>KDE Plasma On WSL On Ubuntu 20.04 On Surface Pro 3</p> </li> <li>Fully Working KDE on Bash on Ubuntu 20.04</li> <li>WSL2 GUI Using VcXsrv: Complete Guide For Beginners</li> <li> <p>wsl-install.sh | Windows 10 WSL Setup Guide</p> </li> <li> <p>Install Desktop GUI for WSL | WSL Enable Desktop Guide</p> </li> <li> <p>What's the easiest way to run GUI apps on Windows Subsystem for Linux?</p> </li> <li> <p>LXQt</p> </li> <li> <p>LXQt on WSLg</p> </li> <li>Launch xfce4 or other desktop in Windows 11 WSLg Ubuntu distro</li> </ul>"},{"location":"dev-notes/linux/wsl/#nvidiacuda","title":"Nvidia/CUDA","text":"<ul> <li>https://ubuntu.com/tutorials/enabling-gpu-acceleration-on-ubuntu-on-wsl2-with-the-nvidia-cuda-platform#3-install-nvidia-cuda-on-ubuntu</li> <li>https://developer.nvidia.com/cuda-downloads?target_os=Linux&amp;target_arch=x86_64&amp;Distribution=WSL-Ubuntu&amp;target_version=2.0&amp;target_type=deb_local</li> </ul>"},{"location":"dev-notes/linux/wsl/#commands","title":"Commands","text":"<code>wsl --list --online</code> list available Linux distributions <code>wsl --list --verbose</code> list installed Linux distributions <code>wsl --unregister [distro]</code> unregister and uninstall wsl distro `wsl --set-default-version [1 2]` <code>wsl --update</code> update WSL <code>wsl --status</code> check WSL status <code>wsl --system</code> launch system distro <code>wsl -d [distro] --exec '...'</code> run command without using the default Linux shell `wsl -d [distro] --shell-type [standard login <code>wsl --debug-shell</code> launch debug shell for diagnostics purposes <code>wsl hostname --all-ip-addresses</code> get all Host IP address `grep -m1 nameserver /etc/resolv.conf awk '{print $2}'` `ip route grep default `ifconfig eth0 grep inet`"},{"location":"dev-notes/linux/wsl/#config","title":"Config","text":""},{"location":"dev-notes/linux/wsl/#wslconf","title":"wsl.conf","text":"<ul> <li><code>/etc/wsl.conf</code>: per-distribution settings for WSL Bash<pre><code>[boot]\nsystemd=true\ncommand=service docker start                                     # Set a command to run when a new WSL instance launches. This example starts the Docker container service\n\n[automount]                                                      # Automatically mount Windows drive when the distribution is launched\nenabled=true                                                     # Set to true will automount fixed drives (C:/ or D:/) with DrvFs under the root directory set above. Set to false means drives won't be mounted automatically, but need to be mounted manually or with fstab.\nroot=/                                                           # Sets the directory where fixed drives will be automatically mounted. This example changes the mount location, so your C-drive would be /c, rather than the default /mnt/c. \noptions=\"metadata,uid=1003,gid=1003,umask=077,fmask=11,case=off\" # DrvFs-specific options can be specified.  \nmountFsTab=true                                                  # Sets the `/etc/fstab` file to be processed when a WSL distribution is launched.\n\n[network]                                                        # Network host settings configure the DNS server used by WSL2\nhostname=DemoHost                                                # change hostname\ngenerateHosts=false                                              # prevent WSL from the default behavior of auto-generating /etc/hosts\ngenerateResolvConf=false                                         # prevent WSL from auto-generating /etc/resolv.conf so that you can create your own ie. nameserver 1.1.1.1\n\n[interop]\nenabled=false                                                    # Set whether WSL supports interop process like launching Windows apps and adding path variables. Setting these to false will block the launch of Windows processes and block adding $PATH environment variables.\nappendWindowsPath=false\n\n[user]\ndefault=DemoUser                                                 # Set the user when launching a distribution with WSL\n</code></pre></li> </ul>"},{"location":"dev-notes/linux/wsl/#wslconfig","title":".wslconfig","text":"<ul> <li><code>%USERPROFILE%/.wslconfig</code>: global settings for WSL2</li> </ul> <code>[wsl2]</code> section default notes <code>kernel</code> Microsoft built kernel provided inbox absolute Windows path to a custom Linux kernel <code>memory</code> 50% Windows total memory capped at 8GB WSL2 VM memory allocation <code>processors</code> Windows logical processors count WSL2 VM logical processors count <code>localhostForwarding</code> <code>true</code> allow Host access (via <code>localhost:port</code>) to WSL2 VM <code>wildcard</code>/<code>localhost</code> ports <code>kernelCommandLine</code> blank additional kernel command line arguments <code>safeMode</code> <code>false</code> disables many features, intended for distro recover recovery <code>swap</code> 25% Windows memory size WSL2 VM swap space size, 0 for no swap file <code>swapFile</code> <code>%USERPROFILE%\\AppData\\Local\\Temp\\swap.vhdx</code> absolute Windows path to the swap virtual hard disk <code>pageReporting</code> <code>true</code> enables Windows to reclaim unused allocated memory frin WSL2 VM <code>guiApplications</code>* <code>true</code> enable <code>WSLg</code>/GUI applications support <code>debugConsole</code>* <code>false</code> enable output console displaying <code>dmesg</code> contents of WSL2 VM <code>nestedVirtualization</code>* <code>true</code> enable other nested VMs to run inside WSL2 <code>vmIdleTimeout</code>* <code>60000</code> WSL2 VM idle milliseconds before it is shut down <code>[experimental]</code> section default opt-in previews of experimental features <code>autoMemoryReclaim</code> <code>disabled</code> Automatically releases cached memory after detecting idle CPU usage. Set to <code>gradual</code> for slow release, and <code>dropcache</code> for instant release of cached memory <code>sparseVhd</code> <code>false</code> When set to true, any newly created VHD will be set to sparse automatically <code>networkingMode</code>** <code>NAT</code> If the value is <code>mirrored</code> then this turns on mirrored networking mode. Default or unrecognized strings result in NAT networking <code>firewall</code>** <code>false</code> Setting this to true allows the Windows Firewall rules, as well as rules specific to Hyper-V traffic, to filter WSL network traffic <code>dnsTunneling</code>** <code>false</code> Changes how DNS requests are proxied from WSL to Windows <code>autoProxy</code>* <code>false</code> Enforces WSL to use Windows\u2019 HTTP proxy information <code>[experimental]</code> section default configures aspects of the experimental settings <code>useWindowsDnsCache</code> ** <code>false</code> (if <code>experimental.dnsTunneling=true</code>) DNS requests tunneled from Linux will bypass cached names within Windows to always put the requests on the wire <code>bestEffortDnsParsing</code> ** <code>false</code> (if <code>experimental.dnsTunneling=true</code>) Windows will extract the question from the DNS request and attempt to resolve it, ignoring the unknown records <code>initialAutoProxyTimeout</code> * <code>1000</code> (if <code>experimental.autoProxy=true</code>) configures WSL wait milliseconds timeout for retrieving HTTP proxy information when starting a WSL container <code>ignoredPorts</code> ** <code>null</code> (if <code>experimental.networkingMode=mirrored</code>) specifies bindable ports for Linux apps even if ports under active use by Windows (e.g. <code>3000,9000,9090</code>); enables unblocking apps using a port for purely Linux side traffic. Ex: port <code>53</code> for Linux Docker Desktop <code>hostAddressLoopback</code> ** <code>false</code> (if <code>experimental.networkingMode=mirrored</code>) enables additional local IP address assigned to Host; allows connectivity Container to Host, or Host to Container <ul> <li><code>path</code> values must be escaped Windows paths e.g: <code>C:\\\\Temp\\\\myCustomKernel</code></li> <li><code>size</code> values must be a size followed by a unit e.g. <code>8GB</code> or <code>512MB</code></li> <li><code>*</code> only for Windows 11</li> <li><code>**</code> only for Windows Insiders Program</li> </ul>"},{"location":"dev-notes/linux/wsl/#wslgconfig","title":".wslgconfig","text":"<ul> <li><code>%USERPROFILE%/.wslgconfig</code>: global settings for WSLg</li> <li>WSLg Configuration/Debug Options</li> </ul>"},{"location":"dev-notes/linux/wsl/#x-window-system","title":"X Window System","text":""},{"location":"dev-notes/linux/wsl/#terminology","title":"Terminology","text":"<ul> <li><code>Window System</code>:       provides an interface between keyboard, mouse, gpu and monitor</li> <li><code>Window Manager</code>:      responsible for window layout, moving, resizing</li> <li><code>Desktop Environment</code>: responsible for common graphical UI elements (e.g. icons, toolbars, wallpapers) through bundle components/applications meant to work with each other</li> <li><code>Display Manager</code>:     graphical login manager responsible for starting login session</li> <li><code>Session Manager</code>:     responsible for persisting/restoring desktop session state i.e. state of window manager/running applications</li> </ul>"},{"location":"dev-notes/linux/wsl/#window-system-vs-window-manager-vs-desktop-environment","title":"Window System vs Window Manager vs Desktop Environment","text":"<p>ELI5 from source</p> <ul> <li> <p>Window System (<code>Xorg</code>/<code>Wayland</code>) talking to Kernel:</p> </li> <li> <p>The entire screen is mine now</p> </li> <li>Only I can draw to it</li> <li>Put it in pretty color mode</li> <li>The entire mouse and keyboard is mine now</li> <li>Only tell me if the mouse or keyboard does anything</li> <li> <p>Programs talking to Window System:</p> </li> <li> <p>Give me a square of screen to draw on</p> </li> <li>How big is that square?</li> <li>Put a white box in that screen square</li> <li>Put a black line in that square</li> <li>Did the mouse just click in my square</li> <li>Where did it click</li> <li>How long for</li> <li>Did it move while it was clicked</li> <li> <p>Window Manager (<code>i3</code>/<code>awesome</code>) talking to Window System:</p> </li> <li> <p>When you make a square for a program, make a extra bit at the top</p> </li> <li>When the mouse clicks and drags that extra bit, move the entire square</li> <li>Put an X in that extra bit</li> <li>If the mouse clickes that X tell the program to stop, and then delete it's square</li> <li>Put an empty box in that extra bit</li> <li>When the mouse clicks that empty box in the extra bit, make the square as BIG as you can</li> <li>Let's pretend there is a line arround the programs square</li> <li>If the mouse clicks and drags that line, change the size of the square, and tell the program it's a different size now</li> <li>Maybe put the title of the program in human words in the extra bit too, humans like that</li> <li> <p>Desktop Environment (<code>kde</code>/<code>gnome</code>) talking to Window System:</p> </li> <li> <p>Draw loads of pretty little pictures on the screen, but behind everything else</p> </li> <li>This picture is a planet with a fox arround it</li> <li>Put the human word 'firefox' under that picture</li> <li>If the mouse clicks twice really fast on that picture, tell me, and I can start the /usr/bin/firefox program</li> <li>HEY, if the mouse ever clicks twice on a picture that is a file, not a program, let me know, I can find the program the mouse needs to open that file</li> <li>Hey, if the user ever taps the <code>super</code> key on the keyboard, let's move ALL the windows side by side, so the mouse can choose the one it wants</li> </ul>"},{"location":"dev-notes/linux/wsl/#x11","title":"X11","text":"<ul> <li><code>X11</code>: client-server system for managing GUI using <code>X protocol</code> (reference)</li> </ul> <p>[!warning] <code>X Server</code> runs on physical/local user machine; <code>X Client</code> runs on server/remote machine</p> <ul> <li><code>X Server</code>: mediates access to displays/input devices e.g. monitors, mice, keyboards</li> <li><code>X Client</code>: client program handles graphical data</li> <li><code>X Display</code>: made up of at least one screen, keyboard, and pointer device</li> <li><code>X11 Forwarding</code>: use <code>X11</code> over <code>SSH</code> because <code>X protocol</code> is plaintext</li> <li> <p><code>$DISPLAY</code>: variable denoting <code>X Display</code> connection for <code>X Client</code></p> </li> <li> <p><code>X Client</code> derives <code>unix</code>/<code>tcp socket</code> connection to display through the <code>X Server</code></p> </li> <li><code>X Server</code> accepts/rejects connection and then forwards the connection to the requested screen</li> <li><code>hostname:display_number.screen_number</code>: format<ul> <li><code>display_number</code>:           must always be explicitly set</li> <li><code>hostname</code>,<code>screen_number</code>: defaults to <code>device_name/unix</code> and <code>0</code></li> <li><code>:0</code>:                       shorthand for  <code>device_name/unix:0.0</code></li> <li><code>unix:0</code>:                   shorthand for <code>device_name/unix:0</code></li> </ul> </li> <li><code>unix</code>/<code>tcp socket</code> associated to display:<ul> <li><code>hostname:n</code>      -&gt; <code>localhost:6000+n</code></li> <li><code>hostname/unix:n</code> -&gt; <code>/tmp/.X11-unix/Xn</code></li> </ul> </li> </ul> <p></p>"},{"location":"dev-notes/linux/wsl/#x11-startup-files","title":"X11 Startup files","text":"<p>Bash Init Scripts and Loading/Execution Order Linux Login Scripts</p> <ul> <li> <p><code>~/.xinitrc</code>: executed in text console mode login</p> </li> <li> <p>executed after logging in by <code>xinit</code> usually invoked via <code>startx</code></p> <ul> <li>first you log in on a text console</li> <li>then you start the GUI with startx</li> </ul> </li> <li>purpose:_ start the GUI part of the session<ul> <li>sets GUI-related settings e.g. key bindings (with <code>xmodmap</code>,<code>xkbcomp</code>), X resources (with <code>xrdb</code>), etc</li> <li>launches session/window manager (possibly as part of a desktop environment)</li> </ul> </li> <li> <p><code>/etc/X11/Xsession</code>: analog to <code>/etc/profile</code> used by login shells</p> </li> <li> <p>executed when <code>X Window System session</code> is started (regardless of using a display manager or startx from a virtual terminal)</p> </li> <li><code>/etc/X11/Xsession.d/*</code>: ordered scripts that get sourced (analog to <code>/etc/profile.d</code>)</li> <li> <p><code>~/.xsession</code>: executed in graphical mode login</p> </li> <li> <p>purpose: starting the GUI session manager and possibly set login-time parameters (e.g. env vars)</p> </li> <li>on termination =&gt; the <code>X session</code> will log out and returned to your display manager login screen</li> <li> <p>Example: Bash<pre><code>#!/bin/sh\n# typical .xsession\n. ~/.profile\n. ~/.xinitrc\n# Start our session manager of choice\nexec x-session-manager\n</code></pre></p> </li> <li> <p><code>~/.xsessionrc</code>: place to set <code>X session</code> specific settings</p> </li> <li> <p>set env vars or run once-off utilities at launch (e.g <code>xrandr</code>/<code>xmodmap</code>)</p> </li> <li>can also use this to source <code>/etc/profile</code> and <code>~/.profile</code></li> <li>does not exist by default so you must create it</li> </ul>"},{"location":"dev-notes/linux/wsl/#debugging","title":"Debugging","text":""},{"location":"dev-notes/linux/wsl/#enable-debug-messages","title":"Enable Debug Messages","text":"<ul> <li><code>.wslconfig</code>: enable WSL2 instance's debug console displaying <code>dmesg</code> output</li> </ul> INI<pre><code>[wsl2]\ndebugConsole=true\n</code></pre> <ul> <li><code>wsl.exe dmesg</code>: manually dump <code>dmesg</code> output</li> </ul>"},{"location":"dev-notes/linux/wsl/#strace-failing-command","title":"Strace Failing Command","text":"<ul> <li>Run the failing command under strace.  Normal command structure is:</li> </ul> Bash<pre><code>strace -ff &lt;command&gt;\n</code></pre> <p>[!note] <code>strace</code> can produce lengthy output. If the generated trace is more than about 20 lines please paste this into a Gist or another paste service and link in the bug.</p> <ul> <li>Example</li> </ul> Bash<pre><code>$ strace traceroute www.microsoft.com\nexecve(\"/usr/bin/traceroute\", [\"traceroute\", \"www.microsoft.com\"], [/* 22 vars */]) = 0\nbrk(0)                                  = 0x7fffdd3bc000\naccess(\"/etc/ld.so.nohwcap\", F_OK)      = -1 ENOENT (No such file or directory)\nmmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f1f4e820000\naccess(\"/etc/ld.so.preload\", R_OK)      = -1 ENOENT (No such file or directory)\n...\n...\n...\n</code></pre>"},{"location":"dev-notes/linux/wsl/#networking-issues","title":"Networking Issues","text":"<ul> <li>Run networking.bat in an administrative command prompt:</li> </ul> Batchfile<pre><code>git clone https://github.com/microsoft/WSL --depth=1 %tmp%\\WSL\ncd %tmp%\\WSL\\diagnostics\nnetworking.bat\n</code></pre> <ul> <li>Once the script execution is completed, include both its output and the generated log file, <code>wsl.etl</code> on the issue.</li> </ul>"},{"location":"dev-notes/linux/wsl/#collect-wsl-logs","title":"Collect WSL Logs","text":"<ul> <li> <p>To collect WSL logs, download and execute collect-wsl-logs.ps1 in an administrative powershell prompt: PowerShell<pre><code>Invoke-WebRequest -UseBasicParsing \"https://raw.githubusercontent.com/microsoft/WSL/master/diagnostics/collect-wsl-logs.ps1\" -OutFile collect-wsl-logs.ps1\nSet-ExecutionPolicy Bypass -Scope Process -Force\n.\\collect-wsl-logs.ps1\n</code></pre></p> </li> <li> <p>The script will output the path of the log file once done</p> </li> </ul>"},{"location":"dev-notes/linux/wsl/#collect-wsl-crashdump","title":"Collect WSL Crashdump","text":"<p>Easiest way to introspect WSL process crash is by collecting a user-mode crash dump.</p> <ul> <li>To enable automatic crash dumps, run the following commands in an elevated command prompt:</li> </ul> Batchfile<pre><code>md C:\\crashes\nreg.exe add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\LocalDumps\" /f\nreg.exe add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\LocalDumps\" /v DumpFolder /t REG_EXPAND_SZ /d C:\\crashes /f\nreg.exe add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\LocalDumps\" /v DumpType /t REG_DWORD /d 2 /f\n</code></pre> <ul> <li> <p>Crash dumps will then automatically be written to C:crashes.</p> </li> <li> <p>Once you're done, crash dump collection can be disabled by running the following command in an elevated command prompt:</p> </li> </ul> Batchfile<pre><code>reg.exe delete \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\LocalDumps\" /f\n</code></pre>"},{"location":"dev-notes/linux/wsl/#collect-wslservice-time-travel-trace","title":"Collect wslservice Time Travel Trace","text":"<p>To collect time travel debugging traces:</p> <ul> <li>Install Windbg preview</li> <li>Open windbg preview as administrator by running <code>windbgx</code> in an elevated command prompt</li> <li>Navigate to <code>file</code> -&gt; <code>Attach to process</code></li> <li>Check <code>Record with Time Travel Debugging</code> (at the bottom right)</li> <li>Check <code>Show processes from all users</code> (at the bottom)</li> <li>Select <code>wslservice.exe</code>. Note, if wslservice.exe is not running, you make it start it with: <code>wsl.exe -l</code></li> <li>Click <code>Configure and Record</code> (write down the folder you chose for the traces)</li> <li>Reproduce the issue</li> <li>Go back to windbg and click <code>Stop and Debug</code></li> <li>Once the trace is done collecting, click <code>Stop Debugging</code> and close Windbg</li> <li>Go to the folder where the trace was colleced, and locate the .run file. It should look like: <code>wslservice*.run</code></li> <li>Share that file on the issue</li> </ul>"},{"location":"dev-notes/mlir/mlir-iree-dialect/","title":"IREE","text":""},{"location":"dev-notes/mlir/mlir-iree-dialect/#overview","title":"Overview","text":"<p>Hierarchy:</p> <ul> <li> <p>Submissions</p> </li> <li> <p>Command Buffers</p> <ul> <li>Commands</li> <li>Dispatches<ul> <li>Subgroups</li> <li>Instructions</li> </ul> </li> </ul> </li> <li> <p>Memory</p> </li> <li> <p>Temporary memory, transient within execution (stack/alloca)</p> </li> <li>Temporary memory across commands, transient within command buffer (arena)</li> <li>Temp memory across command buffers (fenced ringbuffer)</li> <li>Persistent mem<ul> <li>External, long-lived</li> <li>Generational in a ringbuffer</li> <li>Read only/mapped</li> </ul> </li> <li> <p>Schedule hierarchy</p> </li> <li> <p>Input Compute Graph: value semantics</p> </li> <li>Data Flow: data + execution flow; separated from exec ops. defines concurrency domains across<ul> <li>across streams (persistent buffers)</li> <li>within streams (transientt buffers)</li> <li>within dispatches</li> </ul> </li> <li>Alloc Model: allocation + execution model</li> <li>Exec Model: VM exec ops</li> <li>VM: cod</li> </ul>"},{"location":"dev-notes/mlir/mlir-iree-dialect/#memorybuffers","title":"Memory/Buffers","text":"<p>Different allocators for different visibility scopes:</p> <ul> <li>Temporary memory used during execution is purely transient (stack/alloca)</li> <li>Temporary memory used across commands is transient within the command buffer (arena)</li> <li>Temporary memory used across command buffers is fenced (ringbuffer)</li> </ul> <p>Persistent memory can be whatever it needs to be:</p> <ul> <li>External, long-lived</li> <li>Ringbuffer if generational</li> <li>Read-only/mapped</li> </ul> <p>Memory Types:</p> <ul> <li>ptr: Pointer to a typed value.</li> <li>byte_buffer: A constant buffer of mapped host memory.</li> <li>mutable_byte_buffer: A buffer of read-write host memory.</li> </ul> C++<pre><code>signature ::= 'I' length-prefixed(type-sequence)\n              'R' length-prefixed(type-sequence)\n\ntype-sequence ::= (arg-result-type)*\narg-result-type ::= buffer-type\n                  | ref-object-type\n                  | scalar-type\n                  | unrecognized-type\nbuffer-type ::= 'B' length-prefixed(scalar-element-type? dim*)\nscalar-type ::= 'S' length-prefixed(scalar-element-type?)\nscalar-element-type ::= 't' (\n                    '0'  # IEEE float32 (default if not specified)\n                  | '1'  # IEEE float16\n                  | '2'  # IEEE float64\n                  | '3'  # Google bfloat16\n                  | '4'  # Signed int8\n                  | '5'  # Signed int16\n                  | '6'  # Signed int32\n                  | '7'  # Signed int64\n                  | '8'  # Unsigned int8\n                  | '9'  # Unsigned int16\n                  | '10' # Unsigned int32\n                  | '11' # Unsigned int64\n                  )\ndim :: = 'd' integer  # -1 indicates a dynamic dim\nref-object-type ::= 'O' length-prefixed()  # Details TBD\nunrecognized-type ::= 'U' length-prefixed()\n\n# Lexical primitives\ninteger ::= -?[0-9]+\nlength ::= [0-9]+\n# The `length` encodes the length in bytes of `production`, plus 1 for the '!'.\nlength-prefixed(production) ::= length '!' production\nany-byte-sequence ::= &lt;any byte sequence&gt;\n</code></pre> C++<pre><code>// Inspired heavily by the Py_buffer type.\n// See: https://docs.python.org/3/c-api/buffer.html\nstruct BufferDescription {\n  ScalarType element_type;\n  // For contiguous arrays, this is is the length of the underlying memory.\n  // For non-contiguous, this is the size of the buffer if it were copied\n  // to a contiguous representation.\n  size_t len;\n  // Number of dims and strides.\n  size_t ndim;\n  int* shape;\n  int* strides;\n};\n\n// Mirrors the 'buffer-type' production in the above grammar.\nstruct SignatureBufferType;\n\n// Oracle which combines signature metadata with a user-provided, materialized\n// BufferDescription to derive a BufferDescription that is compatible for\n// invocation. Returns an updated buffer description if the original is\n// not compatible or fully specified.\n// This can be used in a couple of ways:\n//   a) On function invocation to determine whether a provided buffer can be\n//      used as-is or needs to be converted (copied).\n//   b) To provide a factory function to the host language to create a\n//      compatible buffer.\noptional&lt;BufferDescription&gt; BufferDescriptionOracle(\n    DeviceContext*, SignatureBufferType, BufferDescription)\n  throws UnsupportedBufferException;\n</code></pre> C++<pre><code>Operation definition\n    flow.dispatch.entry (::mlir::iree_compiler::IREE::Flow::DispatchEntryOp)\n        Attributes:\n    flow.dispatch (::mlir::iree_compiler::IREE::Flow::DispatchOp)\n        Attributes:\n        Operands:\n        Results:\n    flow.dispatch.region (::mlir::iree_compiler::IREE::Flow::DispatchRegionOp)\n        Operands:\n        Results:\n    flow.ex.stream.fragment (::mlir::iree_compiler::IREE::Flow::ExStreamFragmentOp)\n        Operands:\n        Results:\n    flow.executable_end (::mlir::iree_compiler::IREE::Flow::ExecutableEndOp)\n    flow.executable (::mlir::iree_compiler::IREE::Flow::ExecutableOp)\n        Attributes:\n    flow.return (::mlir::iree_compiler::IREE::Flow::ReturnOp)\n        Operands:\n    flow.tensor.clone (::mlir::iree_compiler::IREE::Flow::TensorCloneOp)\n        Operands:\n        Results:\n    flow.tensor.load (::mlir::iree_compiler::IREE::Flow::TensorLoadOp)\n        Operands:\n        Results:\n    flow.tensor.reshape (::mlir::iree_compiler::IREE::Flow::TensorReshapeOp)\n        Operands:\n        Results:\n    flow.tensor.slice (::mlir::iree_compiler::IREE::Flow::TensorSliceOp)\n        Operands:\n        Results:\n    flow.tensor.splat (::mlir::iree_compiler::IREE::Flow::TensorSplatOp)\n        Operands:\n        Results:\n    flow.tensor.store (::mlir::iree_compiler::IREE::Flow::TensorStoreOp)\n        Operands:\n        Results:\n    flow.tensor.trace (::mlir::iree_compiler::IREE::Flow::TensorTraceOp)\n        Attributes:\n        Operands:\n    flow.tensor.update (::mlir::iree_compiler::IREE::Flow::TensorUpdateOp)\n        Operands:\n        Results:\n    flow.variable.address (::mlir::iree_compiler::IREE::Flow::VariableAddressOp)\n        Attributes:\n        Results:\n    flow.variable.load.indirect (::mlir::iree_compiler::IREE::Flow::VariableLoadIndirectOp)\n        Operands:\n        Results:\n    flow.variable.load (::mlir::iree_compiler::IREE::Flow::VariableLoadOp)\n        Attributes:\n        Results:\n    flow.variable (::mlir::iree_compiler::IREE::Flow::VariableOp)\n        Attributes:\n    flow.variable.store.indirect (::mlir::iree_compiler::IREE::Flow::VariableStoreIndirectOp)\n        Operands:\n    flow.variable.store (::mlir::iree_compiler::IREE::Flow::VariableStoreOp)\n        Attributes:\n        Operands:\n</code></pre>"},{"location":"dev-notes/mlir/mlir-useful-code-snippets/","title":"MLIR Useful API/Code Snippets","text":""},{"location":"dev-notes/mlir/mlir-useful-code-snippets/#ir-traversal","title":"IR Traversal","text":"<ul> <li>RegionUtils.h: utilities for usedef traversal</li> <li><code>CallGraph</code>: generate callgraph of <code>CallOpInterface</code> and <code>CallableOpInterface</code> ops</li> <li>Block::findAncestorOpInBlock:  Returns 'op' if 'op' lies in this block, or otherwise finds the ancestor operation of 'op' that lies in this block. Returns nullptr if the latter fails.</li> </ul>"},{"location":"dev-notes/mlir/mlir-useful-code-snippets/#conversionpass-utils","title":"Conversion/Pass Utils","text":"<ul> <li>populateDecomposeCallGraphTypesPatterns: get types along callgraph edges; used in bufferize passes</li> <li>getEffectsOnSymbol(): override to specify sideeffects on symbols</li> <li>CallOpInterfaceLowering: good examples of lowering/conversio</li> <li>Function Signature rewriting</li> <li>https://github.com/google/iree/blob/main/iree/compiler/Dialect/Shape/Utils/TypeConversion.h</li> <li>https://llvm.discourse.group/t/rewriting-function-calls-and-signatures/1953/4</li> </ul>"},{"location":"dev-notes/mlir/mlir-useful-code-snippets/#graph-algorithms","title":"Graph Algorithms","text":"<ul> <li><code>scc_iterator</code>: generate strongly connected nodes</li> <li><code>ReversePostOrderTraversal</code></li> <li><code>GraphTraits</code>: traits class to specialize to be able to use llvm graph algorithms</li> <li><code>DirectedGraph</code>: directed graph class</li> <li><code>GraphWriter</code>: graph emitter</li> <li>BreadthFirstIterator.h</li> </ul>"},{"location":"dev-notes/mlir/mlir-useful-code-snippets/#misc-code-fragments","title":"Misc Code Fragments","text":"C++<pre><code>struct BarePtrFuncOpConversion;\ngetBranchSuccessorArgument()\nverifyBranchSuccessorOperands()\nverifyTypesAlongControlFlowEdges()\n\nRegionSuccessor::getSuccessor()\nRegionSuccessor::isParent()\nRegionSuccessor::getSuccessorInputs()\n\nstruct CallOpSignatureConversion;\n     \nstruct TileAndVectorizeWorkgroups : public PassWrapper&lt;TileAndVectorizeWorkgroups, FunctionPass&gt; {\n  void getDependentDialects(DialectRegistry &amp;registry) const override {\n    registry.insert&lt;linalg::LinalgDialect, AffineDialect, scf::SCFDialect,\n                    vector::VectorDialect&gt;();\n  }\n}; \n    \n/// Distribute linalg ops among iree.workgroup logical threads.\nstd::unique_ptr&lt;OperationPass&lt;ModuleOp&gt;&gt; createLinalgTileAndDistributePass();\n\n/// Vectorize linalg ops executed in the same iree.workgroup.\nstd::unique_ptr&lt;FunctionPass&gt; createLinalgTileAndVectorizeWorkgroupsPass();\n    \n    \nmlir::createFuncBufferizePass();    \n    struct FuncBufferize;\n\nLinalgop::DeduplicateInputs\n</code></pre>"},{"location":"dev-notes/nim/nim-cheatsheet/","title":"Nim Cheatsheet","text":""},{"location":"dev-notes/nim/nim-cheatsheet/#resources","title":"Resources","text":"<ul> <li>Tuts</li> <li>https://nim-lang.org/docs/tut3.html</li> <li>Debugging: https://github.com/pragmagic/vscode-nim/issues/65</li> <li>Nim In Actionn: Metaprogramming - https://livebook.manning.com/book/nim-in-action/chapter-9/</li> <li>Disabling GC: https://forum.nim-lang.org/t/5238</li> <li>Nim for C Programmers: https://github.com/nim-lang/Nim/wiki/Nim-for-C-programmers</li> <li>Nim Html DSL: https://github.com/flyx/emerald</li> <li>Nim2C: https://github.com/nim-lang/c2nim/blob/master/doc/c2nim.rst</li> <li>Picasso - multithreading runtime https://github.com/nim-lang/RFCs/issues/160</li> <li>Nim language creator: https://www.youtube.com/watch?v=-9SGIB946lw</li> <li>DSL stuff</li> <li>pattern matching https://github.com/alehander92/gara</li> <li>alternate: http://andreaferretti.github.io/patty/</li> </ul>"},{"location":"dev-notes/nim/nim-cheatsheet/#macro-codegen","title":"Macro Codegen","text":"<ul> <li> <p>dumpTree, dumpAstGen, dumpLisp, dump</p> </li> <li> <p>expandMacros</p> </li> <li> <p>treeRepr, repr, lispRepr</p> </li> </ul> Python<pre><code>macro myAssert(arg: untyped): untyped =\n  echo arg.treeRepr\n</code></pre> <ul> <li> <p>see generated code Python<pre><code>macro myAssert(arg: untyped): untyped =\n# all node kind identifiers are prefixed with \"nnk\"\n  arg.expectKind nnkInfix\n  arg.expectLen 3\n  # operator as string literal\n  let op  = newLit(\" \" &amp; arg[0].repr &amp; \" \")\n  let lhs = arg[1]\n  let rhs = arg[2]\n\n  result = quote do:\n    if not `arg`:\n      raise newException(AssertionError,$`lhs` &amp; `op` &amp; $`rhs`)\n  echo result.repr\n</code></pre></p> </li> <li> <p>staticRead &amp; staticExec to read files/process at compile time</p> </li> <li> <p><code>do notation</code> multiple code blocks to macros https://nim-lang.org/docs/manual_experimental.html#do-notation</p> </li> <li> <p>parseStmt &amp; parseExpr</p> </li> <li> <p><code>getAst</code> (pass macro or template), <code>quote do:</code> pass statements/expressions, code inside the body of quote can be substituted by surrounding it with backticks.</p> </li> <li> <p>extraction from ast nodes</p> </li> <li> <p>name(x) - name of proc</p> </li> <li>body(x) - body</li> <li>createProcType</li> <li>typeof</li> </ul> <p></p>"},{"location":"dev-notes/nim/nim-cheatsheet/#nim-script","title":"Nim Script","text":"<ul> <li>runtime eval of nim subset</li> <li>https://nim-lang.github.io/Nim/nims.html</li> <li>https://peterme.net/how-to-embed-nimscript-into-a-nim-program-embedding-nimscript-pt-2.html</li> </ul>"},{"location":"dev-notes/nim/nim-cheatsheet/#references","title":"References","text":"<ul> <li>https://livebook.manning.com/book/nim-in-action/chapter-9/304</li> <li>https://flenniken.net/blog/nim-macros/</li> <li>https://nim-by-example.github.io/macros/</li> <li>https://nim-lang.org/blog/2018/06/07/create-a-simple-macro.html</li> <li>https://hookrace.net/blog/introduction-to-metaprogramming-in-nim/#macros</li> </ul>"},{"location":"dev-notes/nim/nim-cheatsheet/#nim-dsl","title":"Nim DSL","text":"<ul> <li>https://github.com/mratsim/compute-graph-optim</li> <li>https://github.com/numforge/laser/tree/master/laser/lux_compiler</li> <li>https://github.com/numforge/laser/tree/master/laser/lux_compiler/core</li> <li>https://github.com/numforge/laser/blob/master/laser/lux_compiler/core/lux_types.nim#L14-L132</li> <li>https://github.com/mratsim/compute-graph-optim/blob/master/arraymancer_discussion_347.md#semantic-pass-and-the-extension-problem</li> <li>https://github.com/mratsim/trace-of-radiance/blob/master/trace_of_radiance/support/emulate_classes_with_ADTs.nim</li> <li>https://github.com/mratsim/trace-of-radiance/blob/master/trace_of_radiance/physics/materials.nim#L91-L96</li> <li>https://github.com/mratsim/trace-of-radiance/blob/master/trace_of_radiance/physics/core.nim#L24-L28</li> </ul>"},{"location":"dev-notes/nim/nim-cheatsheet/#useful-librarieslinks","title":"Useful Libraries/links","text":"<ul> <li> <p>https://github.com/zevv/npeg</p> </li> <li> <p>https://nim-lang.org/docs/nimc.html#compiler-usage-generated-c-code-directory</p> </li> <li> <p>https://github.com/nim-lang/c2nim/blob/master/doc/c2nim.rst#embedding-nim-code</p> </li> <li> <p>https://github.com/nim-lang/c2nim/blob/master/doc/c2nim.rst#embedding-nim-code</p> </li> <li> <p>https://github.com/nimterop/nimterop</p> </li> <li> <p>https://github.com/nimterop/nimterop/wiki/Wrappers</p> </li> <li> <p>Parsing</p> </li> <li> <p>https://github.com/loloicci/nimly</p> </li> <li>https://forum.nim-lang.org/t/3881</li> <li> <p>Learning</p> </li> <li> <p>Basics https://nim-lang.org/learn.html https://livebook.manning.com/book/nim-in-action/chapter-8/45 https://nim-lang.org/docs/theindex.html#toSeq https://nim-lang.org/docs/manual.html#types-object-variants https://nim-lang.org/docs/nimc.html https://nim-lang.org/docs/manual_experimental.html https://nim-lang.org/docs/nims.html https://nim-lang.org/docs/tut1.html#basic-types-strings https://nim-lang.org/docs/tut2.html#object-oriented-programming-inheritance https://nim-lang.org/docs/tut3.html#introduction-code-blocks-as-arguments https://scripter.co/notes/nim/#accessing-tuple-fields https://scripter.co/notes/nim-fmt/#fmt-and-amp https://scripter.co/notes/string-fns-nim-vs-python/#starts-ends-with https://nim-lang.org/docs/typetraits.html#genericHead%2Ctypedesc https://nim-lang.org/docs/sugar.html https://nim-lang.org/docs/sexp.html#SexpParser https://nim-lang.org/docs/tables.html#initOrderedTable https://nim-lang.org/docs/macros.html#children.i%2CNimNode https://nim-lang.org/docs/filters.html https://nim-lang.org/docs/tables.html#OrderedTable https://nim-lang.org/docs/typeinfo.html#fields.i%2CAny https://github.com/zero-functional/zero-functional#filter https://github.com/zero-functional/zero-functional/blob/master/test.nim https://github.com/zer0-star/matsuri https://github.com/zer0-star/matsuri/blob/master/examples/figures.nim https://github.com/alehander92/gara https://github.com/nim-lang/Nim/wiki/Tips-and-tricks https://totallywearingpants.com/posts/nim-language-highlights/</p> </li> <li>Meta programming<ul> <li>https://nim-by-example.github.io/macros/</li> <li>https://flenniken.net/blog/nim-macros/</li> <li>https://livebook.manning.com/book/nim-in-action/chapter-9/1</li> <li>https://nim-lang.org/blog/2018/06/07/create-a-simple-macro.html</li> <li>https://hookrace.net/blog/introduction-to-metaprogramming-in-nim/#macros</li> <li>https://nim-lang.github.io/Nim/nims.html</li> <li>https://peterme.net/how-to-embed-nimscript-into-a-nim-program-embedding-nimscript-pt-2.html</li> </ul> </li> </ul>"},{"location":"dev-notes/nodejs/nodejs-cheatsheet/","title":"NodeJS Cheatsheet","text":""},{"location":"dev-notes/nodejs/nodejs-cheatsheet/#nvm","title":"Nvm","text":"<ul> <li>nvm-windows: hassle free install means on windows</li> <li>npm-check-updates: utility package for major version package upgrades</li> <li>install/upgrade <code>nvm</code>, <code>node</code>, <code>npm</code>, <code>yarn</code>, <code>TypeScript</code> Bash<pre><code>nvm install [version]\nnvm use [version]\nnpm install -g npm@latest\nnpm install -g npm-check-updates@latest\nnpm install -g typescript@latest\nncu -g --deprecated\n</code></pre></li> </ul>"},{"location":"dev-notes/nodejs/nodejs-cheatsheet/#nvm_1","title":"nvm","text":"Command Desc <code>nvm list available</code> list available node versions to install <code>nvm install [version]</code> install node version; NOTE: global npm modules are not shared so must be reinstalled <code>nvm use [version]</code> switch node version <code>nvm current</code> info on currently selected node version"},{"location":"dev-notes/nodejs/nodejs-cheatsheet/#npm","title":"npm","text":"Command Desc <code>npm install -g npm@latest</code> upgrade npm to the latest version <code>npm update [--omit=dev --package-lock=false]</code> minor version package upgrade + package-lock.json <code>npm cache verify</code> verify npm cache <code>npm -g list</code> list globally installed packages <code>npm cache clean [-force]</code> clean npm cache <code>npm outdated</code> find outdated packages `npm run [-d --verbose]` <code>npm config ls -l</code> show all defaults"},{"location":"dev-notes/nodejs/nodejs-cheatsheet/#ncu","title":"ncu","text":"Command Desc <code>ncu</code> 'what if' version of <code>ncu -u</code> i.e. won't modify package.json <code>ncu -g [--deprecated]</code> find global outdated + deprecated packages <code>ncu -u &amp;&amp; npm update</code> major version package upgrade + package.json version hints <code>ncu -i [--deprecated]</code> interactive version of <code>ncu -u</code>"},{"location":"dev-notes/nodejs/nodejs-cheatsheet/#references","title":"References","text":"<ul> <li>Update Node.js dependencies</li> </ul>"},{"location":"dev-notes/optimization/cpp-optimizing-guide/","title":"C++ Optimization Guide","text":"<ul> <li>Agner Fog C++ Optimization Guide</li> <li>MSVC Auto-Vectorizer aliasing rules, cookbook, &amp; notes</li> <li>Auto-Vectorizer Cookbook</li> <li>https://docs.microsoft.com/en-us/archive/blogs/nativeconcurrency/auto-vectorizer-in-visual-studio-2012-overview</li> <li>Matters Computational: Ideas, Algorithms, Source Code</li> <li>FXT library accompanying library of low-level algorithms and demos</li> </ul>"},{"location":"dev-notes/prog-lang-theory/plt-analysis/","title":"Programming Language Theory: Analysis","text":""},{"location":"dev-notes/prog-lang-theory/plt-analysis/#static-single-assignment","title":"Static Single Assignment","text":"<p>Each variable is (statically, syntactically) assigned only once</p>"},{"location":"dev-notes/prog-lang-theory/plt-analysis/#ssa-forms","title":"SSA Forms","text":"<p>Conceptually, there's only one true SSA form - the maximal one. All others are optimizations that generate fewer \u03c6 functions, so fewer need to be removed later</p> <ul> <li>Minimality Axis: continuum between fully maximal SSA to fully minimal</li> <li>Fully maximal: split every variable at every basic-block boundary, and put \u03c6-functions for every variable in every block<ul> <li>crude but most intuitive form for construction with simplest algorithms for both phi insertion and variable renaming phases</li> <li>renaming could process blocks in arbitrary order </li> </ul> </li> <li>Optimized maximal: avoiding placing phi functions in blocks with a single predecessor<ul> <li>reduces the number of phi functions but complicates renaming</li> <li>requires processing predecessor first for each such single-predecessor block</li> </ul> </li> <li>Minimal for reducible CFGs<ul> <li>Some algorithms (e.g. optimized for simplicity) naturally produce minimal form only for reducible CFGs. </li> <li>Applied to non-reducible CFGs, they may generate extra Phi functions</li> <li>There're usually extensions to such algorithms to generate minimal form even for non-reducible CFGs too (but such extensions may add noticeable complexity to otherwise \"simple\" algorithm)</li> </ul> </li> <li>Fully minimal: no superfluous phi functions based only on graph properties of the CFG</li> <li>Prunedness Axis:</li> <li>Pruned: No dead \u03c6 functions<ul> <li>Minimal form can still phi functions which reference variables which are not actually used in the rest of the program</li> <li>problematic because they artificially extend live ranges of referenced variables. </li> <li>also defines new variables which aren't really live</li> <li>Two obvious way to achieve this: </li> <li>perform live variable analysis prior to SSA construction and use it to avoid placing dead phi functions; </li> <li>run dead code elimination (DCE) pass after the construction (which requires live variable analysis first, this time on SSA form of the program already)</li> <li>pruned SSA construction is more expensive than just the minimal form</li> <li>if we will run DCE pass on anyway, we don't need to be concerned to construct pruned form, as we will get it after the DCE pass \"for free\".</li> </ul> </li> <li>Semi-pruned: an attempt to reduce \u03a6 functions without incurring high cost of computing live variable information<ul> <li>compromise between fully pruned and minimal form, sometimes called \"Briggs-Minimal\" form</li> <li>if a variable is never live upon entry into a basic block, it never needs a \u03a6 function</li> <li>during SSA construction, \u03a6 functions for any \"block-local\" variables are omitted</li> </ul> </li> <li>Not pruned</li> </ul>"},{"location":"dev-notes/prog-lang-theory/plt-basic-concepts/","title":"Programming Language Theory: Basic Concepts","text":"<ul> <li>syntax: form of programs i.e. arrangement of expressions, commands, declarations, and other constructs that constitute well-formed program</li> <li>semantics: meaning of programs: how a well-formed program may be expected to behave when executed on a computer</li> <li>pragmatics: intended way language to be used in practice</li> <li>Front-end Phases</li> <li>lexer: lexical analysis: text \u2192 tokens: tokenize character stream into tokens</li> <li>parser: syntax analysis: tokens \u2192 CST: build concrete syntax tree based on grammar from tokens</li> <li>semantic analyzer: semantic analysis: CST \u2192 IR: build intermediate representation<ul> <li>build AST: reduce CST into abstract syntax tree</li> <li>annotate AST: decorate AST with semantic attributes (e.g type, scope)</li> <li>static analysis: enforce static language semantics</li> <li>create IR: create intermediate representation, possibly annotated with dynamic semantics</li> </ul> </li> </ul>"},{"location":"dev-notes/prog-lang-theory/plt-basic-concepts/#language-constructs","title":"Language Constructs","text":"<ul> <li>programs manipulate symbols, which are named values with a type, through operations expressed by language semantics using a type system</li> <li>the language semantics typically defined in a bottom-up fashion</li> <li>values</li> <li>identifiers</li> <li>entities<ul> <li>variables</li> <li>constants</li> <li>types</li> </ul> </li> <li>expressions</li> <li>statements</li> <li>compound statements</li> <li>methods</li> <li>program</li> </ul>"},{"location":"dev-notes/prog-lang-theory/plt-basic-concepts/#intrinsicmeta-constructs","title":"Intrinsic/Meta Constructs","text":"<ul> <li>identifier: a unique name within a given environment context</li> <li>attribute: semantic aspect</li> <li> <p>may be static (compile time determined) or dynamic (determined at execution time) C++<pre><code>int x;\ntype     := static\nvalue    := dynamic\nlocation := static if global variable, otherwise dynamic\n</code></pre></p> </li> <li> <p>some common attributes</p> <ul> <li>type attribute: type identifier of entity</li> <li>literal attribute: value that has no memory</li> <li>location attribute: address of storage cell in store</li> <li>visibility qualifier attribute: determines if a identifier can be reached outside of its scope (e.g. field/method names in C++)</li> <li>also for variable shadowing precedence</li> <li>qualifiers may be needed to make otherwise invisible names to be visible in a scope. Eg:<ul> <li>local var superceding global var</li> <li>names in other packages</li> <li>private members in classes</li> </ul> </li> </ul> </li> <li>entity: collection of attributes that define semantics of a language construct.</li> <li>entity category: defines type of language entity i.e. set of attributes + supported operations</li> <li>simple implementation treats entities as sumtypes with entity category as the sumtype tag</li> <li>some common entities:<ul> <li>constant entities: type attribute, value attribute</li> <li>variable entities: type attribute, location attribute</li> <li>function entities: signature attribute, implementation attribute</li> </ul> </li> <li>symbol: identifier used as a typed reference to program entities minimally containing</li> <li> <p>analogue of pointers to values</p> analogue pointer symbol semantic reference to value reference to program entity representation 64bit integer string denotes memory address entity type points to values of type T points to entities of entity category C dereferencing based on pointer type + runtime state e.g. memory address in heap, offset in stack frame, device handle, etc based on name binding + environment context using unbound instance behavior pointer is uninit or null =&gt; null-deref/wild-pointer crash symbol binding is not in scope =&gt; compilation error if static scoped language/runtime crash if dynamic scope </li> <li> <p>identifier attribute: (possibly scope qualified) name of symbol</p> </li> <li> <p>entity category: language entity tag implies set of attributes to expect</p> </li> </ul>"},{"location":"dev-notes/prog-lang-theory/plt-basic-concepts/#homoiconicity","title":"Homoiconicity","text":"<ul> <li> <p>homoiconic languages require the language constructs to also be in the type system to be able to support \"code as data\" manipulations</p> </li> <li> <p>symbol table: abstract data structure maintaining/mapping symbol \u2192 entity bindings</p> </li> <li>Example of Julia<ul> <li>how julia is homoiconic?</li> <li>what is a julia symbol?</li> </ul> </li> </ul>"},{"location":"dev-notes/prog-lang-theory/plt-basic-concepts/#valuestypes","title":"Values/Types","text":"<ul> <li>value: an abstraction of an entity that can be manipulated by a program</li> <li>first class citizen: can be parameter, returned from method, and assigned to variable (ex: int type)</li> <li>second class citizen: can be parameter, but not returned from method or assigned to variable</li> <li>third class citizen: can't be parameter</li> <li>type: a set (in the math sense) of values with supported set of operations</li> <li>primitive types: set of values that can't be decomposed into simpler values e.g. int, bool, char, symbol</li> <li>compound types: constructed from other types using type constructor expression<ul> <li>product types: cartesian product of types</li> <li>untagged: tuple, components identified by index</li> <li>tagged: associated identifier with each component</li> <li>sum types: set union of types</li> <li>function types: T1 \u2192 T2 is a function type takes one argument of type T1 and returns type T2</li> <li>array types: <code>array(elememtType,range)</code></li> <li>pointer types: <code>ptr(elementType)</code></li> <li>recursive type: defined in terms of itself</li> </ul> </li> <li>type system: groups values into types</li> <li>statically typed: each variable and expression has a fixed type (implying all operands can be type-checked at compile-time)</li> <li>dynamically typed: values have fixed types, but variables &amp; expressions have no fixed types<ul> <li>every time operand is computed could yield a value of a different type</li> <li>operands must be type-checked after they are computed, but before performing the operation</li> </ul> </li> <li>type equivalence:<ul> <li>Structural equivalence: two types have same identical type expressions</li> <li>array ranges usually not considered as part of the type</li> <li>record labels are considered part of the type</li> <li>Name equivalence: have the same identifier</li> <li>Declaration equivalence: declarations lead back to the same original type expression by a series of redeclarations</li> </ul> </li> </ul>"},{"location":"dev-notes/prog-lang-theory/plt-basic-concepts/#expressions","title":"Expressions","text":"<ul> <li>expression: a construct that will be evaluated to yield a value</li> <li>literals: denotes a fixed value of some type</li> <li>constructions: expression that constructs a composite value from its component values</li> <li>function calls: computes a result by applying a method to one or more arguments<ul> <li>usually of form <code>F(E1,...,En)</code>: F =&gt; the method, E1...En =&gt; expressions evaluated for each argument</li> <li>operator may be thought of as denoting a function</li> </ul> </li> <li>conditional expressions</li> <li>iterative expressions</li> <li>constant and variable accesses</li> <li>expressions with side effects</li> <li>block expressions</li> </ul>"},{"location":"dev-notes/prog-lang-theory/plt-basic-concepts/#statements","title":"Statements","text":"<ul> <li>statements: construct to execute to update variables i.e. commands</li> <li>primitive statements:<ul> <li>noop: useful mainly for conditionals (e.g. C++ <code>;</code>)</li> <li>assignments: usually form `V = E;\u2019 E =&gt; expression yielding a value, V =&gt; variable access yielding variable reference (i.e. storage location)</li> <li>method invocation:</li> </ul> </li> <li>composite statements:<ul> <li>sequential</li> <li>collateral</li> <li>conditional</li> <li>iterative</li> </ul> </li> <li>NOTE: language should provide all or most of the above; additional statement forms indication language is probably bloated</li> </ul>"},{"location":"dev-notes/prog-lang-theory/plt-basic-concepts/#variables","title":"Variables","text":"<ul> <li> <p>variable: an entity that abstracts a storage location  in an abstract store that contains a value with lifetime, assignment, &amp; equality semantics</p> </li> <li> <p>terminology:</p> <ul> <li>they are units of memory; often bound to a symbolic name but they do not have a \"name\"</li> <li>aliasing: is when multiple symbols reference the same variable i.e. storage location</li> <li>they don't have a type; variables are containers for storing values and the value they point to has a type. language semantics dictate whether variable can be assigned a new value of a different type</li> <li>l-value: the variable's unique location in the store e.g. heap memory address</li> <li>r-value: the actual value</li> <li>assignment: syntactic sugar around addressing/dereferencing + load/store from associated store C++<pre><code>x = y       := store_update(x.attr['loc'], y.attr['val'])\noperator&amp;() := x.attr['loc']\noperator*() := store_deref(x.attr['loc'])\n</code></pre></li> </ul> </li> <li> <p>assignment semantics: how assigning a composite value to a variable</p> <ul> <li>copy semantics: copies all components of the composite value into the corresponding components of the composite variable</li> <li>reference semantics: the composite variable contain a pointer (or reference) to the composite value</li> <li> <p>equality semantics: should be consistent with assignment semantics</p> </li> <li> <p>copy semantics: equality tests whether corresponding components of the two composite values are equal</p> </li> <li>reference semantics: equality tests whether the pointers to the two composite values are equal</li> <li> <p>lifetime semantics: interval between creation/allocation and destruction/deallocated</p> </li> <li> <p>storage space must be allocated before lifetime start and deallocated after lifetime end</p> </li> <li>global variable: lifetime is the program\u2019s run-time.</li> <li>local variable: lifetime is an activation of a block</li> <li>heap variable: lifetime is arbitrary, but is bounded by the program\u2019s run-time</li> <li>persistent variable: lifetime is arbitrary, and may transcend the run-time of any particular program (e.g. file)</li> <li>symbolic constants: immutable unaddressable values i.e. r-values</li> </ul> </li> <li> <p>implementation detail if/where they are stored is</p> <ul> <li>for performance, might be opcode encoded immediate literal</li> <li>for memory efficiency, stored in program text segment</li> <li>for runtime debugging, might be local variable or stored in data segment</li> </ul> </li> <li>literal: unnamed symbolic constant</li> </ul>"},{"location":"dev-notes/prog-lang-theory/plt-basic-concepts/#storage","title":"Storage","text":"<ul> <li> <p>store: abstract model of where variables reside composed of storage cells with unique location</p> </li> <li> <p>storable value: the atomic unit that can be stored</p> <ul> <li>usually primitive values and pointers are storable e.g. primitive values,pointers</li> <li>composite values are not e.g. structs, arrays, unions, objects</li> </ul> </li> <li>storage cell: abstraction of atomic addressable unit with semantic (location,status,content)<ul> <li>status: either allocated or unallocated</li> <li>location: unique address to reference this cell</li> <li>content: for allocated cells either storable value or undefined</li> <li>NOTE: implementation may implicitly define these (e.g. storage cells in stack frame implicitly allocated, location usually implicit)</li> </ul> </li> <li>dereferencing: operation that yielding current content of reference</li> <li> <p>pointer:  entity that abstracts how a store addresses typed storage cells</p> </li> <li> <p>i.e. <code>(loc: typeof(store::address) where typeof(store_val) == ptr_type)</code></p> </li> <li>note:  usually heap memory address but not always. ex: generational handles, graphics handles, os file handles</li> </ul>"},{"location":"dev-notes/prog-lang-theory/plt-basic-concepts/#implementation","title":"Implementation","text":"<ul> <li>variable lifetime usually determines storage space allocation</li> <li>global variables storage: static allocation<ul> <li>allocation performed at compile time. Compiler translates all names to corresponding location in the code generated by it</li> <li>Ex: all global and static variables in C/C++/Java</li> </ul> </li> <li>local variables storage: stack allocation in activation frames<ul> <li>needed in any language that supports the notion of local variables for methods.</li> <li>Examples: all local variables in C/C++/Java methods and blocks</li> <li>implementation: compiler translates all names to relative offsets from a \"activation frame location\" of current scope</li> </ul> </li> <li>heap variables storage: dynamic allocation<ul> <li>explicit allocation, freeing e.g., `malloc/free/new/delete``</li> <li>explicit allocation, automatic free Java</li> <li>automatic allocation, automatic free Lisp, OCAML</li> </ul> </li> </ul>"},{"location":"dev-notes/prog-lang-theory/plt-basic-concepts/#bindings","title":"Bindings","text":"<ul> <li> <p>environment context: (possibly named) set of bindings that expressions/statements are interpreted in</p> </li> <li> <p>scope: program text over which declaration/binding is active</p> </li> <li> <p>symbol's visibility attribute: determines if a identifier can be reached outside of its scope (e.g. field/method names in C++)</p> </li> <li>namespaces: named scope and used to qualify an identifier for reference</li> <li>static scoping: associations are determined at compile time</li> <li>dynamic scoping: associations are determined at runtime<ul> <li>usually confusing and doesn't mesh with statically typed languages</li> <li>algebraic effects are an approach to solve downsides of dynamic scoping</li> </ul> </li> <li>Usually one of:<ul> <li>global</li> <li>package or module</li> <li>file</li> <li>class</li> <li>method</li> <li>block</li> </ul> </li> <li> <p>block: construct that delimits the scope of any declarations within it</p> </li> <li> <p>name resolution: determining which entity name refers to in a given environment context i.e. dereferencing</p> </li> <li> <p>binding: mapping of identifier to an entity and it's associated attributes (e.g. value, variable, etc)</p> </li> <li> <p>binding time: when the attribute can be computed</p> <ul> <li>(static) definition time: e.g. boolean, char, type, etc.</li> <li>(static) implementation time: e.g. maxint, float, etc.</li> <li>(static) compile time: e.g. value of n in <code>const int n = 5;</code></li> <li>(static) link time: e.g. definition of function f in <code>extern int f();</code></li> <li>(static) load time: e.g. location of a global variable i.e. memory address</li> <li>(dynamic) execution time: e.g. location, value of variable</li> </ul> </li> <li>binding storage: determined by binding time<ul> <li>symbol table: identifier \u2192 static attributes like type</li> <li>environment context: identifier \u2192 location</li> <li>memory: location \u2192 value</li> </ul> </li> <li>binding/entity lifetime: important distinction<ul> <li>several key events between between names and their associated entity</li> <li>entity creation/destruction for different entity types like variables, methods, types, etc</li> <li>binding entity creation/destruction</li> <li>binding reactivation/deactivation</li> <li>binding lifetime: time between the creation and the destruction of a identifier-to-entity binding</li> <li>entity lifetime: time between the creation and destruction of an object is the object's lifetime.</li> <li>entity lifetime != binding lifetime</li> <li>binding lifetime &lt; entity lifetime: in pass-by-ref variable to method, the param_name\u2192variable binding &lt; variable binding</li> <li>binding lifetime &gt; entity lifetime: in use-after-free bug, identifier-to-entity binding &gt; object</li> </ul> </li> <li> <p>declarations are constructs that bind identifiers to entities in specific environment context denoted by scopes delimited by blocks</p> </li> <li> <p>declaration: construct that will be elaborated to produce bindings</p> <ul> <li>all declarations produce bindings</li> <li>may have side effects e.g. creating variables</li> <li>type declarations: binds an identifier to a type (may define a new type or bind an identifier to an existing type e.g. typedef)</li> <li>constant declarations: binds an identifier to a constant value.</li> <li>variable declarations: creates a single variable and binds an identifier to that variable</li> <li>variable renaming: rebinding that allows an identifier to bind to an existing variable</li> <li>variable rebinding: change binding of an existing identifier</li> <li>method definitions: binds an identifier to a method</li> </ul> </li> <li>definition: for a declaration whose only effect is to produce bindings</li> </ul>"},{"location":"dev-notes/prog-lang-theory/plt-basic-concepts/#context-vs-scope-vs-lifetime","title":"Context Vs. Scope Vs Lifetime","text":"<ul> <li>environment context is delimitation of the program with a set of active name bindings</li> <li>a property of program that may be static or dynamic</li> <li>static context portion of program text (aka lexical context)</li> <li>execution context consists of current execution point's lexical context plus additional runtime state such as the call stack (aka execution/runtime/calling/dynamic context)</li> <li>scope of binding: program region where name is bound to an entity</li> <li>it is the visibility of the entity</li> <li>it's unambiguous with static scoping but not dynamic scoping</li> <li>it may not coincide with other scopes. ex: with closures, program may enter/leave a given extent multiple times</li> <li>most commonly it's when a given name can refer to a given variable i.e. when a declaration is in effect but can</li> <li>scope of variable describes where in program text it may be bound</li> <li>is a property of the variable name binding</li> <li>the variable's name scope affects its lifetime</li> <li>entrance/exit into its scope typically begins/ends its lifetime</li> <li>lifetime/extent of a variable describes where in program execution it has meaningful value</li> <li>is a runtime property of the variable itself</li> <li>is a subset of scope and may or may not overlap<ul> <li>a name can be bound to a variable but variable's value has not been allocated/assigned. (bug if name binding dereferenced before)</li> <li>a variable may exist but be inaccessible e.g. memory leak bug</li> <li>accessible but not via the given name in given context e.g. persistent value like file</li> <li>binding scope might come into context/out of context repeatedly while variable lifetime is active e.g. closures or static local variable lifetime is duration of program, but</li> </ul> </li> </ul>"},{"location":"dev-notes/prog-lang-theory/plt-basic-concepts/#implementation_1","title":"Implementation","text":"<ul> <li>symbol table: names\u2192attributes: - data structure maintaining bindings of names to</li> <li>conventionally static attributes</li> <li>needs to efficiently handle identifier lookup in presence of scope changes</li> <li>usually implemented with hash table + scope stack<ul> <li>hashtable handles identifier \u2192 attribute lookup</li> <li>top of stack is current scope, bottom is outermost</li> </ul> </li> <li>environment context: (runtime) mapping of variable identifier to location</li> <li>binding_of: fn(scope,identifier)-&gt;location</li> <li>Ex: <code>binding_of(\"local_var_foo\") := env.current_scope.stack_bp + local_var_foo.attr[\"stackOffset\"]</code></li> <li>dynamic language features require more complicated environment context (e.g. walking up activation records for dynamic scoping)</li> <li>store: runtime equivalent of symbol table (i.e. memory). defines semantics:</li> <li>value_at: fn(location) \u2192 value : how a location attribute is resolved to a value</li> <li>value_update: fn(location,new_val): how a value attribute is copied</li> </ul>"},{"location":"dev-notes/prog-lang-theory/plt-basic-concepts/#functions","title":"Functions","text":"<ul> <li> <p>formal parameter: identifier through which a method can access an argument</p> </li> <li> <p>argument/actual parameter: value or entity that is passed to a method</p> </li> <li> <p>calling convention: low level implementation detail of how methods receive/return parameters e.g.</p> </li> <li> <p>where (parameters, return values, return addresses, scope links,etc) are placed (registers,stack, memory,etc)</p> </li> <li>coordination details between caller/callee on how new environment context is created and restored between invocation/return</li> <li> <p>parameter semantics: how formal parameter is associated to corresponding argument</p> </li> <li> <p>copy parameter semantics: binds the formal parameter to a local variable that contains a copy of the argument</p> <ul> <li>copy-in parameter: (aka pass-by-value) corresponds to an (initialized) variable declaration where identifier is bound to variable</li> <li>on invocation, a local variable is created &amp; initialized with the argument value</li> <li>side effects to local variable only visible within function scope</li> <li>copy-out parameter: (aka pass-by-result) no corresponding declaration form</li> <li>argument must be a variable</li> <li>on invocation, a local variable is created but not initialized.</li> <li>on return, local variable\u2019s final value is assigned to the argument variable</li> <li>copy-inout parameter: (aka pass-by-copy-restore) no corresponding declaration form</li> <li>the argument must be a variable</li> <li>on invocation, a local variable is created and initialized with the argument variable\u2019s current value</li> <li>on return, local variable\u2019s final value is assigned back to the argument variable</li> </ul> </li> <li>reference parameter semantics: (aka pass-by-ref) binds the formal parameter directly to the argument itself<ul> <li>constant parameter: corresponds to a constant definition where an identifier is bound to a first-class value</li> <li>argument must be a value</li> <li>formal parameter bound to the argument value during method</li> <li>Thus any inspection of FP is actually an indirect inspection of the argument value</li> <li>variable parameter: corresponds to a variable renaming definition where identifier is bound to an existing variable</li> <li>argument must be a variable</li> <li>formal parameter bound to the argument variable during method</li> <li>Thus any inspection (or updating) of FP is actually an indirect inspection (or updating) of the argument variable</li> </ul> </li> </ul>"},{"location":"dev-notes/prog-lang-theory/plt-basic-concepts/#implementation_2","title":"Implementation","text":"<ul> <li>activation frame: bookkeeping data necessary for evaluation of current method</li> <li>space for all local variables</li> <li>space for return address (where execution should resume on exit from the current method)</li> <li>other info such as parameter values, etc.</li> <li>calling convention: semantics of how activation record stack is managed on entry/exit</li> <li>function prologue/epilogue: compiler inserted sections into functions that implement activation record push/pop on entry/exit in accordance with calling convention</li> </ul>"},{"location":"dev-notes/prog-lang-theory/plt-basic-concepts/#control-flow","title":"Control Flow","text":"<ul> <li>sequencer construct to transfer control to destination; can implement variety of control flows, with multiple entries and/or multiple exits</li> <li>jump: sequencer transferring control to a point denoted by label<ul> <li>Ex: <code>jump Foo;</code></li> </ul> </li> <li>escape: sequencer terminating execution of a textually enclosing statement or method<ul> <li>allows for single-entry multi-exit control flows</li> <li>Ex: <code>break;</code></li> </ul> </li> </ul>"},{"location":"dev-notes/prog-lang-theory/plt-basic-concepts/#implementation_3","title":"Implementation","text":"<ul> <li>jump/escape must be handle control transfer differently depending on environment context</li> <li>within block: nothing to manage</li> <li>out of block: must destroy block's local variables before control transfer</li> <li>out of method: the method\u2019s activation frame must be popped off the stack before control transfer</li> </ul>"},{"location":"dev-notes/prog-lang-theory/plt-basic-concepts/#insights","title":"Insights","text":"<ul> <li>Error messages are the user interface to your programming language</li> <li>Most powerful thing you have is flow-control in a language</li> <li>Don't make types at compile time</li> <li>Type Completeness Principle: No operation should be arbitrarily restricted in the types of its operands</li> <li>motivation: suggests that all types in the language should have equal status</li> <li>good example: <code>boolean and</code> operation: argument restriction to bool types is bc intentional not arbitrary</li> <li>bad example: language not allowing functions to be passed as parameters</li> <li>Qualification Principle: It is possible to include a block in any syntactic category, provided that the constructs in that syntactic category specify some kind of computation</li> <li>ex: block expression/statement: where block local declarations are only visible to block expressions/statements</li> <li>ex: block declaration: where local declarations D are only used for elaborating subdeclarations E<ul> <li>essentially distinguishes between private (local) and public subdeclarations</li> <li>usually disguised as classes/packages, but naked support is uncommon</li> <li>used extensively in Zig where <code>pub</code> keyword delimits what is public or not</li> </ul> </li> <li>The Abstraction Principle: It is possible to design procedures that abstract over any syntactic category, provided only that the constructs in that syntactic category specify some kind of computation.</li> <li>motivation: encourage abstraction over other syntactic categories such as abstracting over declarations, types</li> <li>ex: pure function: abstracts over an expression<ul> <li>has a body that is an expression</li> <li>invocation is an expression that will yield a result by evaluating the function procedure\u2019s body</li> </ul> </li> <li>ex: method: abstracts over a statements<ul> <li>body that is a statement</li> <li>invocation is a statement that will update variables by executing the proper procedure\u2019s body</li> </ul> </li> <li>ex: selector procedure: abstracting over a variable access (aka property getters/setters)<ul> <li>body is a variable access</li> <li>invocation yields a variable by evaluating the selector procedure\u2019s body</li> </ul> </li> <li>Correspondence Principle: For each form of declaration there exists a corresponding parameter semantics</li> <li>motivation: programmers can easily and reliably generalize blocks into procedures.</li> <li>converse is not always true (e.g. copy-out/copy-inout)</li> <li>ex: copy-in parameter: corresponds to an (initialized) variable declaration where identifier is bound to variable</li> <li>ex: constant parameter: corresponds to a constant definition. In each case, an identifier is bound to a first-class value</li> <li>ex: variable parameter: corresponds to a variable renaming definition where identifier is bound to an existing variable</li> </ul>"},{"location":"dev-notes/prog-lang-theory/plt-basic-concepts/#reference-material","title":"Reference Material","text":"<ul> <li>Pragmatics oriented resources</li> <li>Ray Toal has excellent notes from his compiler courses<ul> <li>Languages and Automata I</li> <li>Languages and Automata II</li> <li>Programming Language Semantics</li> </ul> </li> <li>Language Implementation Patterns book</li> <li>Programming Language Design Concepts: great easily grokkable, pragmatic guide on programming language concepts without heavy theory</li> <li>Tiny Compiler: ultra-simplified example of all the major pieces of a modern compiler written in easy to read JavaScript</li> <li>Crafting Interpreters: great practical guide of building end to end interpreter</li> <li>Compiler Construction: The Art of Niklaus Wirth</li> <li>Incremental approach to compiler construction<ul> <li>An Incremental Approach to Compiler Construction</li> <li>Essentials of Compilation: The Incremental Nanopass Approach</li> </ul> </li> <li>Theory oriented resources</li> <li>Programming Language Pragmatics<ul> <li>the most comprehensive book to understand contemporary programming languages</li> <li>discusses different aspects, of everything from C# to OCaml, and even the different kinds of programming languages such as functional and logical ones.</li> <li>covers the several steps and parts of the implementation, such as an intermediate language, linking, virtual machines, etc</li> </ul> </li> <li>Design Concepts in Programming Languages: detailed reference for programming language design theory space, how the different programming languages behave and why</li> <li>Programming language resources</li> <li>Domain Specific Languages</li> <li>DSL Guide/Resources</li> <li>Domain-Specific Languages book</li> <li>DSL Engineering: Designing, Implementing and Using Domain-Specific Languages: good practical guide, covers things like debugging, editor services, etc</li> <li>DSL course: course on creating DSL with language bench</li> </ul>"},{"location":"dev-notes/prog-lang-theory/plt-compiler-design/","title":"Programming Language Theory: Compiler design","text":""},{"location":"dev-notes/prog-lang-theory/plt-compiler-design/#meta-tracing","title":"Meta Tracing","text":""},{"location":"dev-notes/prog-lang-theory/plt-compiler-design/#idea","title":"Idea","text":"<p>Write an interpreter and get a JIT for free by trace the execution of an interpreter and JIT the trace</p> <ul> <li>Insight: interpreter is simply a large loop: load the next instruction, perform the associated actions, go back to the beginning of the loop.</li> <li>In Practice: bimodal performance leads people to prefer method based JITs instead</li> </ul>"},{"location":"dev-notes/prog-lang-theory/plt-compiler-design/#details","title":"Details","text":"<p>VM consists of two interpreters: language interpreter and tracing interpreter</p> <ul> <li>language interpreter</li> <li>normal interpreter of language</li> <li>tracing interpreter</li> <li>second representation of the interpreter that creates traces</li> <li>when a hot loop is detected, insert marker</li> <li>on next loop execution, tracing interpreter used to record each action</li> <li>the execution trace is then JIT'ed into machine code that subsequent loop executions will use</li> <li>tracing interpreter automatically inserts guard checks to verify trace preconditions/code-paths taken match the JIT'ed code</li> <li>if guard fails, execution falls back to the tracing interpreter for the rest of that bytecode, and then back to the language interpreter</li> <li>only need two meta functions for the JIT<ul> <li><code>can_enter_jit</code>: mark hot loop entry and generate machine code</li> <li><code>jit_merge_point</code>: mark when it can switch to an existing machine code version of a loop.</li> </ul> </li> </ul>"},{"location":"dev-notes/prog-lang-theory/plt-compiler-design/#issues","title":"Issues","text":"<ul> <li>unpredictable performance (very bimodal, either super fast or super slow)</li> <li>great for tight, non-branchy code terrible at branchy code</li> <li>optimizing only single code-path at a time</li> <li>if a trace guard fails<ul> <li>execution must use the very slow tracing interpreter for remainder of bytecode (might be very long)</li> <li>then switch back to the language interpreter for subsequent bytecode</li> </ul> </li> <li>fundamental issue is that no way of knowing which code is likely to branch unpredictably until it actually does so</li> <li>Example: AST type checker, calling a function <code>_preorder(x)</code> which, using reflection, dispatches to a function which can handle that AST type</li> </ul>"},{"location":"dev-notes/prog-lang-theory/plt-compiler-design/#references","title":"References","text":"<ul> <li>Detailed Explanation</li> </ul>"},{"location":"dev-notes/prog-lang-theory/plt-compiler-design/#lua","title":"Lua","text":"<ul> <li>Allocation Sinking: http://wiki.luajit.org/Allocation-Sinking-Optimization</li> <li>Mike Pall Comments on LuaJIT &amp; tracing JIT compilers:</li> <li>http://lambda-the-ultimate.org/node/3851</li> <li>https://www.reddit.com/user/mikemike/comments</li> </ul>"},{"location":"dev-notes/prog-lang-theory/plt-compiler-design/#query-based-compilers","title":"Query Based Compilers","text":""},{"location":"dev-notes/prog-lang-theory/plt-compiler-design/#overview","title":"Overview","text":"<p>Instead of linear batch pass, implement compiler as a database that can be queried</p> <ul> <li>queries e.g. <code>type_of</code> are implemented as deterministic pure functions that explicitly declare their dependencies/outputs</li> <li>compilation becomes just a big pure function</li> <li>aim is to allow for incremental computation</li> <li>internally,</li> <li>just a big lazily constructed data dependency DAG</li> <li>queries are memoized for performance</li> <li>simple idea but lots of complex nuance implementation around memoization<ul> <li>dependency/partial change tracking</li> <li>caching</li> <li>efficient result cloning e.g. structural sharing</li> <li>cycle detection</li> <li>enforcing determinism</li> <li>etc</li> </ul> </li> </ul>"},{"location":"dev-notes/prog-lang-theory/plt-compiler-design/#references_1","title":"References","text":"<ul> <li>rustcc</li> <li>Detailed Design Doc</li> <li>Overview And Use in Sixten</li> <li>Salsa: a generic framework for on-demand, incrementalized computation. Inspired by adapton, glimmer, and rustc's query system.</li> </ul>"},{"location":"dev-notes/prog-lang-theory/plt-compiler-design/#symbolic-assembly","title":"Symbolic Assembly","text":"<p>Symbolic Assembly: Using Clojure to Meta-program Bytecode - Ramsey Nasser: https://www.youtube.com/watch?v=eDad1pvwX34 The Language of the Language: Comparing compiler construction in Clojure and F# - Ramsey Nasser https://www.youtube.com/watch?v=t8usj1fN9rs</p>"},{"location":"dev-notes/prog-lang-theory/plt-compiler-design/#example-repos","title":"Example Repos","text":"<ul> <li>Symbolic bytecode</li> <li>https://github.com/nasser/mage</li> <li>https://github.com/nasser/magic</li> <li>https://github.com/kovasb/gamma</li> </ul>"},{"location":"dev-notes/prog-lang-theory/plt-expression-problem/","title":"Type Expression Problem","text":""},{"location":"dev-notes/prog-lang-theory/plt-expression-problem/#overview","title":"Overview","text":"<p>It refers to the difficulty of writing data abstractions that can be easily extended with both new operations and new data variants.</p> <ul> <li>if your abstraction is function oriented (e.g. functional languages), adding new operations (functions) is easy but adding new data variants (types) is difficult</li> <li>if your abstraction is type oriented (e.g. OOP), adding new data variants (classes) is easy but operations is difficult</li> </ul>"},{"location":"dev-notes/prog-lang-theory/plt-expression-problem/#trivial-example","title":"Trivial Example","text":"<p>Consider implementing a language for arithmetic expressions (e.g.: <code>1 + 2, 4 * 5, (8 + 3) * 4</code>) So, there is an initial set of features comprised by the initial types of expressions and operations over those expressions.</p> <ul> <li>Initial feature set</li> <li>Types of expressions: Integer literals, addition.</li> <li>Operations: Evaluation of expressions.</li> <li>Evolution 1: Add a new type of expressions. For example, subtraction.</li> <li>Evolution 2: Add a new operation. For example pretty printing.</li> </ul> <p>Note that there is a lot more that can be done in terms of evolution, but those two basic evolutions serve to illustrate the essence of the problem.</p>"},{"location":"dev-notes/prog-lang-theory/plt-expression-problem/#requirements-for-a-solution","title":"Requirements for a solution","text":"<ul> <li>Extensibility in both dimensions: A solution must allow the addition of new data variants and new operations and support extending existing operations</li> <li>Strong static type safety: A solution must prevent applying an operation to a data variant which it cannot handle using static checks</li> <li>No modification or duplication: Existing code must not be modified nor duplicated</li> <li>Separate compilation and type-checking: Safety checks or compilation steps must not be deferred until link or runtime</li> <li>Independent extensibility: It should be possible to combine independently developed extensions so that they can be used jointly</li> </ul> <p>Expression Problem: another formulation https://oleksandrmanzyuk.wordpress.com/2014/06/18/from-object-algebras-to-finally-tagless-interpreters-2/</p>"},{"location":"dev-notes/prog-lang-theory/plt-expression-problem/#object-algebras","title":"Object Algebras","text":"<p>We begin again by considering the language containing only literals and addition. It is going to be described by an interface</p> C++<pre><code>interface ExpAlg&lt;T&gt; {\n  T lit(int n);\n  T add(T x, T y);\n}\n</code></pre> <ul> <li>similar to Visitor interface.</li> <li>key difference:  interface is going to play a completely different role. <code>ExpAlg&lt;T&gt;</code> is an interface of an abstract factory for creating expressions.</li> </ul> <p>For example, the expression (1 + (2 + 3)) is represented as follows</p> C++<pre><code>&lt;T&gt; T e1(ExpAlg&lt;T&gt; f) {\n  return f.add(\n    f.lit(1),\n    f.add(\n      f.lit(2),\n      f.lit(3)));\n}\n</code></pre> <p>it is represented as a function taking as an argument an object <code>f</code> implementing the interface <code>ExpAlg&lt;T&gt;</code> (i.e., a concrete factory) and returning a value of type <code>T</code>. The body of the function simply calls the methods <code>lit</code> and <code>add</code> of the factory <code>f</code> in a suitable order with suitable arguments.</p> <p>This representation allows us to vary the concrete factory <code>f</code> thus interpreting the expression <code>e1</code> in different ways.</p> <p>Let us see how this works in the case of evaluation of expressions.</p> <p>First of all, we introduce an interface <code>Eval</code> of \u201cobjects that can be evaluated\u201d:</p> C++<pre><code>interface Eval { int eval(); }\n</code></pre> <p>Next we define a concrete factory <code>EvalExp</code>, which is going to manufacture expression that can be evaluated:</p> C++<pre><code>class EvalExp implements ExpAlg&lt;Eval&gt; {\n  Eval lit(final int n) {\n    return new Eval() {\n      int eval() {\n        return n;\n      }\n    };\n  }\n  Eval add(final Eval x, final Eval y) {\n    return new Eval() {\n      int eval() {\n        return x.eval() + y.eval();\n      }\n    };\n  }\n}\n</code></pre> <p>let us think how we could add multiplication to our language.</p> <p>We could add a new method <code>mul</code> to the interface <code>ExpAlg&lt;T&gt;</code>, but then the implementation of the concrete factory <code>EvalExp</code> would require changes, which is precisely what we would like to avoid.</p> <p>Instead, we introduce a new interface <code>MulAlg&lt;T&gt;</code> that extends the interface <code>ExpAlg&lt;T&gt;</code> and adds a new method <code>mul</code> to it:</p> C++<pre><code>interface MulAlg&lt;T&gt; extends ExpAlg&lt;T&gt; {\n  T mul(T x, T y);\n}\n</code></pre> <p>Expressions containing multiplication are now going to be represented as functions taking as an argument objects implementing the extended interface <code>MulAlg&lt;T&gt;</code>. For example, the expression <code>(4 * (5 + 6))</code> will be represented as follows:</p> C++<pre><code>&lt;T&gt; T e2(MulAlg&lt;T&gt; f) {\n  return f.mul(\n    f.lit(4),\n    f.add(\n      f.lit(5),\n      f.lit(6)));\n}\n</code></pre> <p>To extend the implementation of evaluation of expressions to expressions containing multiplication we define a new concrete factory <code>EvalMul</code> that implements the interface <code>MulAlg&lt;Eval&gt;</code> and inherits from the factory <code>EvalExp</code> implementations of the methods <code>lit</code> and <code>add</code>:</p> C++<pre><code>class EvalMul extends EvalExp implements MulAlg&lt;Eval&gt; {\n  Eval mul(final Eval x, final Eval y) {\n    return new Eval() {\n      int eval() {\n        return x.eval() * y.eval();\n      }\n    };\n  }\n}\n</code></pre> <p>We can now pass an instance of the factory <code>EvalMul</code> into the expression <code>e2</code>, get back an object that can be evaluated, and compute its value by calling the <code>eval</code> method:</p> C++<pre><code>int v2 = e2(new EvalMul()).eval();\n</code></pre> <p>Note that we are not touching any existing code: we are defining new interfaces and classes and use inheritance to avoid duplication.</p>"},{"location":"dev-notes/prog-lang-theory/plt-expression-problem/#references","title":"References","text":"<ul> <li>Extensibility for the Masses: Practical Extensibility with Object Algebras</li> <li>Solving the expression problem in Python with object algebras</li> </ul>"},{"location":"dev-notes/prog-lang-theory/plt-interpreters/","title":"Interpreters","text":""},{"location":"dev-notes/prog-lang-theory/plt-interpreters/#tagless-shallow-embedding-approach-to-interpreters","title":"Tagless Shallow embedding approach to interpreters","text":"<ul> <li>TLDR: Use closures as AST nodes \u2192 interpreter becomes library</li> <li>Describe language grammar as functions that take a free-bound \"evaluator\" function param instead of data types (a \"final algebra\"/\"object algebra\")</li> <li>\u2714: Performance (no tag dispatch), allows for partial evaluation extension, and expression problem solution</li> <li>Explanations:</li> <li>ELIU in C# https://higherlogics.blogspot.com/2008/09/mostly-tagless-interpreters-in-c.html</li> <li>http://lambda-the-ultimate.org/node/4572</li> <li>Papers: http://okmij.org/ftp/tagless-final/JFP.pdf http://www.cs.utexas.edu/~wcook/Drafts/2012/ecoop2012.pdf</li> <li>Sample implementations:</li> <li> <p>Simple C++ example</p> C++<pre><code>// From https://i.cs.hku.hk/~bruno/oa/\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;memory&gt;\nusing namespace std;\n\n/*\n * This program has used some C++11 features to get rid of manual memory management. \n * \n * If you prefer the older C++ version, do the follwing steps:\n * 1. Switch all \"EvalPtr\" to \"Eval *\"; do the same to \"PPrintPtr\"\n *    WARNING: you need to do some additional cleanup for those newed objects\n * 2. Replace \"make_shared&lt;Closure&gt;\" with \"new Closure\"\n * 3. Substitude \"to_string\" to some other ways of converting int to string\n */\n\n// Initial object algebra interface for expressions: integers and addition\ntemplate &lt;typename E&gt; \nclass ExpAlg\n{\n  public:\n    virtual E lit(int x) = 0;\n    virtual E add(E e1, E e2) = 0;\n};\n\n// An object algebra implementing that interface (evaluation)\n\n// The evaluation interface\nclass Eval \n{\n  public:\n    virtual int eval() = 0;\n};\ntypedef shared_ptr&lt;Eval&gt; EvalPtr;\n\nclass EvalLit : public Eval {\n  public:\n    EvalLit(int x) : _x(x) {}\n\n    virtual int eval() {\n      return _x;\n    }\n  private:\n    int _x;\n};\n\nclass EvalAdd : public Eval {\n  public:\n    EvalAdd(EvalPtr l, EvalPtr r) : _l(l), _r(r) {}\n\n    virtual int eval() {\n      return _l-&gt;eval() + _r-&gt;eval();\n    }\n  private:\n    EvalPtr _l;\n    EvalPtr _r;\n};\n\n// The object algebra\nclass EvalExpAlg : virtual public ExpAlg&lt;EvalPtr&gt;\n{\n  public:\n    virtual EvalPtr lit(int x) {\n      return make_shared&lt;EvalLit&gt;(x);\n    }\n\n    virtual EvalPtr add(EvalPtr e1, EvalPtr e2) {\n      return make_shared&lt;EvalAdd&gt;(e1, e2);\n    }\n};\n\n// Evolution 1: Adding subtraction\ntemplate&lt;typename E&gt;\nclass SubExpAlg : virtual public ExpAlg&lt;E&gt;\n{\n  public:\n    virtual E sub(E e1, E e2) = 0;\n};\n\nclass EvalSub : public Eval {\n  public:\n    EvalSub(EvalPtr l, EvalPtr r)\n      : _l(l), _r(r) {}\n\n    int eval() {\n      return _l-&gt;eval() - _r-&gt;eval();\n    }\n  private:\n    EvalPtr _l;\n    EvalPtr _r;\n};\n\n// Updating evaluation:\nclass EvalSubExpAlg : public EvalExpAlg, public SubExpAlg&lt;EvalPtr&gt;\n{\n  public:\n    virtual EvalPtr sub(EvalPtr e1, EvalPtr e2) {\n      return make_shared&lt;EvalSub&gt;(e1, e2);\n    }\n};\n\n\n// Evolution 2: Adding pretty printing\nclass PPrint \n{\n  public:\n    virtual string print() = 0;\n};\n\ntypedef shared_ptr&lt;PPrint&gt; PPrintPtr;\n\nclass PrintLit : public PPrint\n{\n  public:\n    PrintLit(int x) : _x(x) {}\n\n    virtual string print() {\n      return to_string(_x);\n    }\n  private:\n    int _x;\n};\n\nclass PrintAdd : public PPrint \n{\n  public:\n    PrintAdd(PPrintPtr e1, PPrintPtr e2)\n      : _e1(e1), _e2(e2) {}\n\n    virtual string print() {\n      return _e1-&gt;print() + \" + \" + _e2-&gt;print();\n    }\n\n  private:\n    PPrintPtr _e1;\n    PPrintPtr _e2;\n};\n\nclass PrintSub : public PPrint\n{\n  public:\n    PrintSub(PPrintPtr e1, PPrintPtr e2)\n      : _e1(e1), _e2(e2) {}\n    virtual string print() {\n      return _e1-&gt;print() + \" - \" + _e2-&gt;print();\n    }\n  private:\n    PPrintPtr _e1;\n    PPrintPtr _e2;\n};\n\nclass PrintExpAlg : virtual public SubExpAlg&lt;PPrintPtr&gt;\n{\n  public:\n    virtual PPrintPtr lit(int x) {\n      return make_shared&lt;PrintLit&gt;(x);\n    }    \n\n    virtual PPrintPtr add(PPrintPtr e1, PPrintPtr e2) {\n      return make_shared&lt;PrintAdd&gt;(e1, e2);\n    }\n\n    virtual PPrintPtr sub(PPrintPtr e1, PPrintPtr e2) {\n      return make_shared&lt;PrintSub&gt;(e1, e2);\n    }\n};\n\n// An alternative object algebra for pretty printing\nclass PrintExpAlg2 : virtual public SubExpAlg&lt;string&gt;\n{\n  public:\n    virtual string lit(int x) {\n      return to_string(x);\n    }    \n\n    virtual string add(string e1, string e2) {\n      return e1 + \" + \" + e2;\n    }\n\n    virtual string sub(string e1, string e2) {\n      return e1 + \" - \" + e2;\n    }\n};\n\n// Testing\n\n\n// An expression using the basic ExpAlg\ntemplate&lt;typename E&gt;\nE exp1(ExpAlg&lt;E&gt;&amp; alg) {\n  return alg.add(alg.lit(3), alg.lit(4));\n}\n\n// An expression using subtraction too\ntemplate&lt;typename E&gt;\nE exp2(SubExpAlg&lt;E&gt;&amp; alg) {\n  return alg.sub(exp1(alg), alg.lit(4));\n}\n\nint main() {\n  // Some object algebras:\n  EvalExpAlg ea;\n  EvalSubExpAlg esa;\n  PrintExpAlg pa;\n  PrintExpAlg2 pa2;\n\n  EvalPtr ev = exp1(esa);\n\n  // But calling ea with exp2 is an error\n  // EvalPtr ev_bad = exp2(ea);\n\n  cout &lt;&lt; \"Evaluation of exp1 \\\"\" &lt;&lt; exp1(pa)-&gt;print() &lt;&lt; \"\\\" is: \" &lt;&lt; ev-&gt;eval() &lt;&lt; endl;\n  cout &lt;&lt; \"Evaluation of exp2 \\\"\" &lt;&lt; exp2(pa)-&gt;print() &lt;&lt; \"\\\" is: \" &lt;&lt; exp2(esa)-&gt;eval() &lt;&lt; endl;\n  cout &lt;&lt; \"The alternative pretty printer works nicely too!\\n\" \n     &lt;&lt; \"exp1: \" &lt;&lt; exp1(pa2) &lt;&lt; \"\\n\"\n     &lt;&lt; \"exp2: \" &lt;&lt; exp2(pa2);\n}\n</code></pre> </li> <li> <p>Implementations in different languages: https://i.cs.hku.hk/~bruno/oa/</p> </li> <li>C# (2008)<ul> <li>Snippet: http://lambda-the-ultimate.org/node/4572#comment-72110</li> <li>More complete: http://lambda-the-ultimate.org/node/2569#comment-43805</li> <li>Expanded Version (2009): https://higherlogics.blogspot.com/2009/06/mobile-code-in-c-via-finally-tagless.html</li> <li>Advanced Query language in C#: https://higherlogics.blogspot.com/2019/09/building-query-dsl-in-c.html</li> </ul> </li> <li> <p>Snippet with Pratt parser (http://lambda-the-ultimate.org/node/4572#comment-72110)</p> <ul> <li>Syntax to semantic constructors</li> </ul> C#<pre><code>interface IMathSemantics&lt;T&gt;\n{\n  T Int(string lit);\n  T Add(T lhs, T rhs);\n  T Sub(T lhs, T rhs);\n  T Mul(T lhs, T rhs);\n  T Div(T lhs, T rhs);\n  T Pow(T lhs, T rhs);\n  T Neg(T arg);\n  T Pos(T arg);\n  T Fact(T arg);\n}\n\nclass MathGrammar&lt;T&gt; : Grammar&lt;T&gt;\n{\n  public MathGrammar(IMathSemantics&lt;T&gt; math)\n  {\n  Infix(\"+\", 10, math.Add);   Infix(\"-\", 10, math.Sub);\n  Infix(\"*\", 20, math.Mul);   Infix(\"/\", 20, math.Div);\n  InfixR(\"^\", 30, math.Pow);  Postfix(\"!\", 30, math.Fact);\n  Prefix(\"-\", 100, math.Neg); Prefix(\"+\", 100, math.Pos);\n\n  Group(\"(\", \")\", int.MaxValue);\n  Match(\"(digit)\", char.IsDigit, 0, math.Int);\n  SkipWhile(char.IsWhiteSpace);\n  }\n}\n</code></pre> <ul> <li>Interpreter</li> </ul> C#<pre><code>sealed class MathInterpreter : IMathSemantics\n{\npublic int Int(string lit) { return int.Parse(lit); }\npublic int Add(int lhs, int rhs) { return lhs + rhs; }\npublic int Sub(int lhs, int rhs) { return lhs - rhs; }\npublic int Mul(int lhs, int rhs) { return lhs * rhs; }\npublic int Div(int lhs, int rhs) { return lhs / rhs; }\npublic int Pow(int lhs, int rhs) { return (int)Math.Pow(lhs, rhs); }\npublic int Neg(int arg) { return -arg; }\npublic int Pos(int arg) { return arg; }\npublic int Fact(int arg) { return arg == 0 || arg == 1 ? 1 : arg * Fact(arg - 1); }\n}\n</code></pre> <ul> <li>Extending abstract semantics to support local bindings:</li> </ul> C#<pre><code>interface IEquationSemantics&lt;T&gt; : IMathSemantics&lt;T&gt;\n{\n  T Var(string name);\n  T Let(T x, T value, T body);\n}\nclass EquationParser&lt;T&gt; : MathGrammar&lt;T&gt;\n{\n  public EquationParser(IEquationSemantics&lt;T&gt; eq) : base(eq)\n  {\n    Match(\"(ident)\", char.IsLetter, 0, eq.Var);\n    TernaryPrefix(\"let\", \"=\", \"in\", 90, eq.Let);\n  }\n}\n</code></pre> </li> </ul>"},{"location":"dev-notes/prog-lang-theory/plt-lenses-transducers-effects/","title":"Lenses, Transducers, and Algebraic Effects","text":""},{"location":"dev-notes/prog-lang-theory/plt-lenses-transducers-effects/#homomorphisms","title":"Homomorphisms","text":"<p>Homomorphisms are a structure preserving map between two algebraic structures of the same type (e.g. two groups, vector spaces, etc.) that preserves the operations of the structures</p> <ul> <li>suppose \\(f: A \\to B\\) is a homomorphism between two sets \\(A\\), \\(B\\)</li> <li>suppose \\(\\cdot\\) is an operation of the structure (e.g. a binary operation)</li> <li>\\(f(x\\cdot y)=f(x)\\cdot f(y)\\) for every pair \\(x\\), \\(y\\) of elements of \\(A\\)</li> </ul> <p>Common examples</p> <ul> <li>linear maps: homomorphisms of vector spaces</li> <li>isomorphism: a subset of homomorphisms that also have an inverse</li> <li>homomorphic encryption: is a form of encryption that permits users to perform computations on its encrypted data without first decrypting it</li> </ul>"},{"location":"dev-notes/prog-lang-theory/plt-lenses-transducers-effects/#functors","title":"Functors","text":"<ul> <li> <p>Functors are structure preserving maps between Categories</p> </li> <li> <p>Functors are functions that lift functions to a context</p> </li> <li> <p>Functors compose as functions</p> </li> <li> <p>Functors == Homomorphisms</p> </li> </ul> <p>You are correct, functors are the structure preserving entities between categories. They could have been called homomorphisms. I don't know much about the reason for the terminology used, but I think that Mac Lane and Eilenberg, when inventing category theory, borrowed terminology from philosophy where category and functor are known (at least to some) Polymorphism is common in mathematics. For instance, the structure preserving entities between topological spaces are called continuous rather than homomorphisms. And an invertible continuous function with continuous inverse is called a homeomorphism rather than an isomorphism. A structure preserving entity between vectors spaces is called a linear transformation. A structure preserving mappings between metric spaces is called a short map. And an invertible one is called an isometry rather than an isomorphism. Clearly, historical reasons play a role.</p> <ul> <li>Connections to transducers   &gt;On the fancy Haskell lens hierarchy (hackage.haskell.org/package/lens) we have the notion of a fold or a \"getter which touches multiple items\".   &gt;The existence of a fold for a type like <code>Fold s a</code> indicates that we can extract from the type <code>s</code> some number (0 to many) <code>a</code> values in sequence. This is the idea of \"Foldable\" in Haskell.   &gt;Given a foldable type <code>s</code> and a transducer we execute the transducer by passing the \"build\" reducer in and then \"visiting\" each value <code>a</code> inside of <code>s</code> with the reducer that   &gt;the transducer returns (modulo the early stopping bit which is just sort of a Clojure-specific optimization).   &gt;Essentially, the transducer is a notion of \"visitation\" which is invariant to how the final summary is constructed\u2014essentially the same thing that's captured in the \"getter which touches multiple items\" of a Fold.   &gt;So there really ought to be a way to treat any specter optic as a possibly very limited transducer. Essentially, the \"read\" component of a lens will correspond pretty directly.   &gt;We can also see this by remembering that any pure transducer is semantically equivalent to a function <code>a -&gt; [b]</code> which you can read as a way of finding 0-to-many <code>b</code> values \"inside\" of <code>a</code>.</li> </ul>"},{"location":"dev-notes/prog-lang-theory/plt-lenses-transducers-effects/#lenses","title":"Lenses","text":"<ul> <li>a composable getter: whole \u2192 part &amp; setter: (whole, part) \u2192 whole</li> <li>\"Lens\" because you're \"zooming\" into a part</li> <li>Only looks complicated bc of var Laarhoven style lenses which define the getter &amp; setter in one function and uses clever functor tricks to extract getter/setter</li> <li>Protocol/Key operations:</li> <li>get ( == \"view\")</li> <li>set ( == \"set\")</li> <li>update (== \"over\"):  same as set except takes in a f: part \u2192 part that allows updating based on existing part value<ul> <li>Why? The performant but less readable version of a lens relies on view &amp; over, where set is defined using the const functor &amp; over</li> </ul> </li> <li>Why?</li> <li>Decouple state shape dependencies, especially in UI. Instead of littering your codebase with code that dives deep into the shape of a particular object, import a lens. If you later need to change the state shape, you can do so in the lens, and none of the code that depends on the lens will need to change.</li> <li>Immutable &amp; composable niceness (getters are easy, but how do you do setters)?</li> </ul> <p>Lenses allow you to abstract state shape behind getters and setters.</p> <p>This follows the principle that a small change in requirements should require only a small change in the system.</p> <ul> <li>Sensible explanation https://sinusoid.es/lager/lenses.html https://medium.com/@reidev275/composable-immutable-property-access-with-lenses-in-typescript-798da4ddc30e https://medium.com/javascript-scene/lenses-b85976cb0534</li> </ul>"},{"location":"dev-notes/prog-lang-theory/plt-lenses-transducers-effects/#code-explanation","title":"Code Explanation","text":"<ul> <li>suboptimal but readable version</li> </ul> Haskell<pre><code>export interface Lens&lt;A, B&gt; {\n  get(a: A): B;\n  set(b: B, a: A): A;\n}\n\nexport const compose = &lt;A, B, C&gt;(x: Lens&lt;A, B&gt;, y: Lens&lt;B, C&gt;): Lens&lt;A, C&gt; =&gt; ({\n  get: (a: A) =&gt; y.get(x.get(a)),\n  set: (c: C, a: A) =&gt; {\n    const b: B = x.get(a);\n    const b2: B = y.set(c, b);\n    return x.set(b2, a);\n  }\n});\n</code></pre> <ul> <li>Usual Haskell implementation but expanded out</li> </ul> Haskell<pre><code>get(w): p =\n  return w.p\n\nupdate :: (p -&gt; p) -&gt; w -&gt; w\nupdate(P: p-&gt;p, w): w =\n  w` = w\n  w`.p = P(w.p)\n  return w\n\nset :: Lens s a -&gt; a -&gt; s -&gt; s\nset l a s = update l (const a) s\n\ncompose :: Lens l t -&gt; Lens w l -&gt; Lens w t\ncompose lt wl = Lens\n  { get = (w,t) -&gt; t : lt.get( wl.get(w) )\n  , update = f(t-&gt;t), w: wl.update(f,w) . lt.update(f,t)\n  }\n\ng.f =&gt;\n  composeGet&lt;glens,flens&gt;(w) = \n    return flens.get(glens.get(w))\n\n  composeUpdate&lt;glens,flens&gt;(T: fp-&gt;fp, gw): gw =  \n    auto fpupdateCurry = [T](gp): gp = \n      # fw == gp\n      return flens.update(T, gp)\n\n    glens.update(\n      fpupdateCurry,\n      gw)\n</code></pre>"},{"location":"dev-notes/prog-lang-theory/plt-lenses-transducers-effects/#transducers","title":"Transducers","text":"<p>A transducer is an object that incrementally transforms one (potentially infinite) sequence of elements into another sequence; effectively \"state machines\" involving (Reference)</p> <ul> <li>starting the transducer to get an initial state</li> <li>repeatedly updating that state by either consuming an element from the input sequence or by emitting an element to the output sequence</li> <li>when input is exhausted, the transducer enters a half closed state where it may emit more output elements but it will never consume more input elements</li> <li>when the transducer stops emitting elements, its finisher is called to clean up any resources held in the final transduction state.</li> <li>Optionally, a transducer may half close early, before the input sequence is fully consumed</li> </ul>"},{"location":"dev-notes/prog-lang-theory/plt-lenses-transducers-effects/#algebraic-effects","title":"Algebraic Effects","text":"<p>ELI5: generalized <code>catch/throw</code> with value semantics i.e. you can pass around a catch block</p> <ul> <li>WHAT: Delimited continuations for humans</li> <li>WHY: Effect systems decomplect where, what, and how</li> <li>HOW: By these semantics</li> <li>all semantics are strongly typed value semantics i.e. can be passed around as values</li> <li>delimited continuations as strongly typed interfaces (~=  defining an \"<code>Exception</code>\" type)</li> <li>semantics for scoped signaling (~= message passing) of an effect (~= <code>throw</code>)</li> <li>semantics for specifying scoped implementations of effects (~= handlers)</li> <li>semantics for resuming from an implementation</li> </ul>"},{"location":"dev-notes/prog-lang-theory/plt-lenses-transducers-effects/#details","title":"Details","text":"<ul> <li>Types: what <code>func()</code> computes</li> <li>Constrain world inside your function</li> <li>Handled by callee</li> <li>Effects: how <code>func()</code> computes</li> <li>Constrain world outside</li> <li>Handled by caller</li> <li>motivation:</li> <li>gives you the power of virtualization at the expression level (e.g. can easily write a debugger that way)</li> <li>you get static strong typing for dynamic things like callbacks</li> <li>can actually be implemented with delimited continuations</li> <li>mostly aimed towards statically typed languages like Haskell as a replacement of monad transformers, which has both cognitive and performance benefits</li> <li>analogies/concept similarities</li> <li>syscalls<ul> <li>C program puts stuff away in mem/registers, and tells kernel comeback and resume me when you're done</li> <li>entire program is a continuation</li> <li>the process is delimited continuation</li> <li>syscall are parameterized side-effects</li> <li>the process is a parameters (e.g. <code>fork</code>  the program continues twice)</li> </ul> </li> <li>virtualization<ul> <li>works by mocking syscall table</li> <li>means can isolate side-effects and create a functional world for that process</li> <li>algebraic effects give you the power of virtualization at the expression level</li> <li>so you can virtualize any function like any process</li> </ul> </li> <li>common lisp condition system: decouple the treatment of exceptional situations (or conditions) into three orthogonal roles:<ul> <li>signaling the condition (akin to \u201cthrowing\u201d),</li> <li>handling the condition (akin to \u201ccatching\u201d),</li> <li>recovering from the condition (which has no resemblance in popular languages).</li> <li>The signaler, the handler, and the recoverer can be three disjoint bodies of code sitting in different parts of your call stack.</li> </ul> </li> <li>interpreters<ul> <li>Tagless final algebras are another much more popular alternative that has been proven very effective in practical software.</li> <li>In tagless final, one writes composable DSLs (which are just records of functions) with the nature and interpretation of effects left abstract.</li> <li>One then writes interpreters which interpret the DSL, giving meaning to the effects. This achieves the same fundamental goals as algebraic effects, but just using the ordinary language features of static FP languages.</li> </ul> </li> </ul>"},{"location":"dev-notes/prog-lang-theory/plt-lenses-transducers-effects/#walkthrough","title":"Walkthrough","text":"Haskell<pre><code>type choice = effect\n  operation decide : unit -&gt; bool\nend\n\nlet c = new choice\n\nhandle\n  let x = (if c#decide () then 10 else 20) in\n  let y = (if c#decide () then 0  else  5) in\n    x - y\nwith\n| c#decide () k -&gt; k true\n</code></pre> <ul> <li><code>effect</code> definition</li> <li>\"interface\" defining supported operations</li> <li>dictates the \"type\"</li> <li><code>effect</code> must be instanced to use</li> <li>needed because we may want to use same result of effect in multiple places</li> <li><code>effect</code> used in a scoped evaluation context</li> <li>is a scoped \"implementation\" of <code>effect</code> interfaces</li> <li>important! <code>c#effect()</code> invocation is through typed message passing, not function invocation</li> </ul>"},{"location":"dev-notes/prog-lang-theory/plt-lenses-transducers-effects/#fs-effect-handlers","title":"F#'s Effect handlers","text":"<ul> <li>TLDR: Allow user plug in a definition of <code>yield</code>  and be able to call <code>resume</code> within <code>yield</code> block to resume continuation</li> <li>Are really just delimited continuations) but seem better/more ergonomic than transducers: http://mikeinnes.github.io/2020/06/12/transducers.html</li> <li>Very much similar to <code>async/await</code></li> </ul>"},{"location":"dev-notes/prog-lang-theory/plt-lenses-transducers-effects/#motivating-examples","title":"Motivating Examples","text":"F#<pre><code>sum = 0\nhandle {\n  mapping(f, xs)\n} with yield(x) {\n  sum += x\n  resume()\n}\nreturn sum\n</code></pre> F#<pre><code>// Concat\nfor x in xs { yield(x) }\nfor y in ys { yield(y) }\n// Interleave\nfor (x, y) in zip(xs, ys) {\n  yield(x)\n  yield(y)\n}\n// Cartesian Product\nfor x in xs {\n  for y in ys {\n    yield((x, y))\n  }\n}\n</code></pre> F#<pre><code>ys = handle {\n  mapping(f, xs)\n  nil\n} with yield(x) {\n  cons(x, LazySeq(resume))\n}\n</code></pre> F#<pre><code>// Take while\nfor x in xs {\n  if f(x) {\n    yield(x)\n  } else {\n    break\n  }\n}\n</code></pre> F#<pre><code>// Dedupe\nlast = nil\nfor x in xs {\n  if x != last {\n    yield(x)\n  }\n  last = x\n}\n</code></pre>"},{"location":"dev-notes/prog-lang-theory/plt-lenses-transducers-effects/#references","title":"References","text":"<ul> <li>ELIU presentation: https://speakerdeck.com/paperswelove/brandon-bloom-on-programming-with-algebraic-effects-and-handlers-by-andrej-bauer-and-matija-pretnar</li> <li>https://github.com/brandonbloom/eclj</li> <li>More in style of CommonLisp's condition system: https://github.com/clojureman/special</li> <li>https://lilac.town/writing/effects-in-clojure/</li> <li>From Scratch Tutorial in javascript:</li> <li>https://gist.github.com/yelouafi/57825fdd223e5337ba0cd2b6ed757f53</li> <li>https://gist.github.com/yelouafi/bbc559aef92f00d9682b8d0531a36503</li> <li>https://gist.github.com/yelouafi/7261da07c97c5e6322da3894f6ea60e2</li> <li>https://gist.github.com/yelouafi/5f8550b887ab7ffcf3284602330bd37d</li> </ul>"},{"location":"dev-notes/prog-lang-theory/plt-misc-resources/","title":"Programming Language Theory: Misc Resources","text":"<ul> <li>awesome compilers</li> <li>Very Thorough Link Dump</li> <li>YAIR: Yet Another Intermediate Representation from sheredom/Neil Henning (Unity compiler)</li> <li>Resources for Amateur Compiler Writers</li> <li>Name Resolution</li> <li>Uniting Language Embedding for Fast and Friendly DSLs</li> <li>Thesis</li> <li>Nim Memory Model</li> <li>Continuations</li> <li>http://people.csail.mit.edu/gregs/ll1-discuss-archive-html/msg03277.html</li> <li>http://wingolog.org/archives/2015/07/27/cps-soup</li> <li>http://mlton.org/pipermail/mlton/2003-January/023054.html</li> <li>JIT in python</li> <li>Interpreter</li> <li>https://francisstokes.wordpress.com/2017/08/16/programming-language-from-scratch/</li> <li>https://github.com/Lel-Language/Lisp-esque-language</li> <li>Category Theory in 15 minutes</li> </ul>"},{"location":"dev-notes/prog-lang-theory/plt-parsing/","title":"Programming Language Theory: Parsing","text":""},{"location":"dev-notes/prog-lang-theory/plt-parsing/#parsingasts","title":"Parsing/ASTs","text":"<ul> <li>Different AST types</li> <li>Homogenous: one type of node <code>class ASTNode</code></li> <li>Normalized Heterogenous: <code>class Expr : public ASTNode { vector&lt;ASTNode*&gt; children; };</code></li> <li>Irregular Heterogenous: named nodes <code>class BinaryExpr : public Expr { Expr* left, right; };</code></li> <li>Tree walkers</li> <li>Tree Grammar: use grammar to generate walkers<ul> <li>Forced visitation order</li> <li>useful for when every subtree must be touched (like codegen)</li> </ul> </li> <li>Tree Pattern Matcher: specifies patterns we care about<ul> <li>different phases of application care about different parts of tree</li> <li>decouples order we apply tree patterns from tree patterns themselves</li> <li>useful for term re-writing (change multiply to simd multiply)</li> </ul> </li> <li>Traversal orders</li> <li>Preorder</li> <li>In-order</li> <li>Postorder</li> </ul>"},{"location":"dev-notes/prog-lang-theory/plt-parsing/#insights","title":"Insights","text":"<ul> <li>split Tokenizing from Parsing</li> <li>LR/LLR/etc is overcomplication. Just write parsers like normal code</li> </ul>"},{"location":"dev-notes/prog-lang-theory/plt-parsing/#treesitter","title":"TreeSitter","text":"<ul> <li>Also cross-reference notes in depot: <code>tolva/exp/tree-sitter-dc/README.md</code></li> <li>Explanatory: Clojure</li> <li>Medium Complexity: Godot script</li> <li>https://github.com/PrestonKnopp/tree-sitter-gdscript</li> <li>https://github.com/PrestonKnopp/tree-sitter-godot-resource</li> <li>https://github.com/PrestonKnopp/language-gdscript</li> <li>Simple: Markdown/YAML:</li> <li>https://github.com/ikatyang/tree-sitter-markdown</li> <li>https://github.com/ikatyang/tree-sitter-yaml</li> <li>Awesome Treesitter</li> </ul>"},{"location":"dev-notes/python/conda/","title":"Conda Cheatsheet","text":""},{"location":"dev-notes/python/conda/#pip","title":"Pip","text":"Command Desc <code>pip show &lt;PKG&gt;</code> show installed version of <code>&lt;PKG&gt;</code> <code>pcu requirements.txt</code> what if version of <code>pip-check-updates</code> i.e. won't modify <code>requirements.txt</code> <code>pcu requirements.txt -u</code> update requirements.txt  package file <code>pcu requirements.txt -i</code> interactive version of <code>pip-check-updates</code>"},{"location":"dev-notes/python/conda/#conda","title":"Conda","text":"Command Desc Managing Environments <code>conda info</code> get version info <code>conda create --name &lt;ENV&gt; python=3.10</code> create new environment with package list <code>conda env create --name &lt;ENV&gt; --file env.yml</code> create new environment from file <code>conda env remove --name &lt;ENV&gt; --all</code> delete an entire environment <code>conda activate &lt;ENV&gt;</code>/<code>conda deactivate</code> activate/deactivate environment <code>conda list --explicit &gt; spec.txt</code> produce an environment spec file <code>conda env export --from-history &gt; env.yml</code> export environment to file Managing Packages <code>conda install &lt;PKG&gt;==&lt;VER&gt;</code> install specific package version <code>conda install --file requirements.txt</code> install from requirements file <code>conda update conda</code> update conda base <code>conda update python</code> update python version <code>conda update anaconda</code> update all packages to latest stable + compatible version of Anaconda <code>conda update -n base conda</code> update base conda environment <code>conda env update -n &lt;ENV&gt; --file env.yml --prune</code> update environment from file and uninstall unused dependencies"},{"location":"dev-notes/python/conda/#migrating-environments","title":"Migrating Environments","text":"<ul> <li>Using <code>conda-minify</code> to export minimal environment Bash<pre><code>conda install conda-minify -c jamespreed\nconda-minify --name &lt;ENV&gt; [--relax] [--how [full|minor]] [--file ./test_env.yml]\n</code></pre></li> </ul>"},{"location":"dev-notes/python/conda/#mamba","title":"Mamba","text":"Command Desc Managing Environments <code>mamba info</code> get version info <code>mamba env list</code> list environments <code>mamba create -n &lt;ENV&gt; &lt;PKG&gt;</code> create an environment <code>mamba env create --file env.yml</code> import an environment <code>mamba env export -n &lt;ENV&gt; --no-builds</code> show details of environment <code>mamba env export -n &lt;ENV&gt; &gt; env.yml</code> export an environment <code>mamba env remove -n &lt;ENV&gt;</code> remove an environment <code>mamba env update -n &lt;ENV&gt; --file env.yml --prune</code> update environment from file/uninstall unused dependencies <code>mamba create --name CLONE_ENV_NAME --clone &lt;ENV&gt;</code> clone an existing environment <code>mamba activate &lt;ENV&gt;</code>/<code>mamba deactivate</code> activate/deactivate environment Managing Packages <code>mamba install -n &lt;ENV&gt; &lt;PKG&gt;</code> install package <code>mamba update --all</code> update mamba, base env, etc <code>mamba update -n base mamba</code> update mamba base <code>mamba update -n &lt;ENV&gt; --all</code> update package <code>mamba remove -n &lt;ENV&gt; &lt;PKG&gt;</code> removing a package <code>mamba repoquery search &lt;PKG&gt;</code> finding a package <code>mamba repoquery depends &lt;PKG&gt; [--recursive]</code> show pkg direct/transitive dependencies <code>mamba repoquery depends -t &lt;PKG&gt;</code> show pkg transitive dependencies as tree <code>mamba repoquery whoneeds &lt;PKG&gt;</code> show pkg dependants i.e. inverse of depends <code>mamba repoquery whoneeds -t &lt;PKG&gt;</code> show pkg dependants as tree"},{"location":"dev-notes/python/conda/#references","title":"References","text":"<ul> <li>Conda Official Cheatsheet</li> <li>conda manage environments</li> <li>mamba quickstart</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/","title":"Comprehensive Python Cheatsheet","text":"<p>This is a cached version the awesome gto76 Cheatsheet</p> Contents Subjects Collections List, Dictionary, Set, Tuple, Range, Enumerate, Iterator, Generator Types Type, String, Regular_Exp, Format, Numbers, Combinatorics, Datetime Syntax Args, Inline, Import, Decorator, Class, Duck_Types, Enum, Exception System Exit, Print, Input, Command_Line_Arguments, Open, Path, OS_Commands Data JSON, Pickle, CSV, SQLite, Bytes, Struct, Array, Memory_View, Deque Advanced Threading, Operator, Introspection, Metaprograming, Eval, Coroutines Libraries Progress_Bar, Plot, Table, Curses, Logging, Scraping, Web, Profile, NumPy, Image, Audio, Games, Data"},{"location":"dev-notes/python/py-cheatsheet/#main","title":"Main","text":"Python<pre><code>if __name__ == '__main__':     # Runs main() if file wasn't imported.\n    main()\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#list","title":"List","text":"Python<pre><code>&lt;list&gt; = &lt;list&gt;[&lt;slice&gt;]       # Or: &lt;list&gt;[from_inclusive : to_exclusive : \u00b1step]\n</code></pre> Python<pre><code>&lt;list&gt;.append(&lt;el&gt;)            # Or: &lt;list&gt; += [&lt;el&gt;]\n&lt;list&gt;.extend(&lt;collection&gt;)    # Or: &lt;list&gt; += &lt;collection&gt;\n</code></pre> Python<pre><code>&lt;list&gt;.sort()                  # Sorts in ascending order.\n&lt;list&gt;.reverse()               # Reverses the list in-place.\n&lt;list&gt; = sorted(&lt;collection&gt;)  # Returns a new sorted list.\n&lt;iter&gt; = reversed(&lt;list&gt;)      # Returns reversed iterator.\n</code></pre> Python<pre><code>sum_of_elements  = sum(&lt;collection&gt;)\nelementwise_sum  = [sum(pair) for pair in zip(list_a, list_b)]\nsorted_by_second = sorted(&lt;collection&gt;, key=lambda el: el[1])\nsorted_by_both   = sorted(&lt;collection&gt;, key=lambda el: (el[1], el[0]))\nflatter_list     = list(itertools.chain.from_iterable(&lt;list&gt;))\nproduct_of_elems = functools.reduce(lambda out, el: out * el, &lt;collection&gt;)\nlist_of_chars    = list(&lt;str&gt;)\n</code></pre> <ul> <li>For details about sorted(), min() and max() see sortable.</li> <li>Module operator provides functions itemgetter() and mul() that offer the same functionality as lambda expressions above.</li> </ul> Python<pre><code>&lt;list&gt;.insert(&lt;int&gt;, &lt;el&gt;)     # Inserts item at index and moves the rest to the right.\n&lt;el&gt;  = &lt;list&gt;.pop([&lt;int&gt;])    # Removes and returns item at index or from the end.\n&lt;int&gt; = &lt;list&gt;.count(&lt;el&gt;)     # Returns number of occurrences. Also works on strings.\n&lt;int&gt; = &lt;list&gt;.index(&lt;el&gt;)     # Returns index of the first occurrence or raises ValueError.\n&lt;list&gt;.remove(&lt;el&gt;)            # Removes first occurrence of the item or raises ValueError.\n&lt;list&gt;.clear()                 # Removes all items. Also works on dictionary and set.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#dictionary","title":"Dictionary","text":"Python<pre><code>&lt;view&gt; = &lt;dict&gt;.keys()                          # Coll. of keys that reflects changes.\n&lt;view&gt; = &lt;dict&gt;.values()                        # Coll. of values that reflects changes.\n&lt;view&gt; = &lt;dict&gt;.items()                         # Coll. of key-value tuples that reflects chgs.\n</code></pre> Python<pre><code>value  = &lt;dict&gt;.get(key, default=None)          # Returns default if key is missing.\nvalue  = &lt;dict&gt;.setdefault(key, default=None)   # Returns and writes default if key is missing.\n&lt;dict&gt; = collections.defaultdict(&lt;type&gt;)        # Returns a dict with default value of type.\n&lt;dict&gt; = collections.defaultdict(lambda: 1)     # Returns a dict with default value 1.\n</code></pre> Python<pre><code>&lt;dict&gt; = dict(&lt;collection&gt;)                     # Creates a dict from coll. of key-value pairs.\n&lt;dict&gt; = dict(zip(keys, values))                # Creates a dict from two collections.\n&lt;dict&gt; = dict.fromkeys(keys [, value])          # Creates a dict from collection of keys.\n</code></pre> Python<pre><code>&lt;dict&gt;.update(&lt;dict&gt;)                           # Adds items. Replaces ones with matching keys.\nvalue = &lt;dict&gt;.pop(key)                         # Removes item or raises KeyError.\n{k for k, v in &lt;dict&gt;.items() if v == value}    # Returns set of keys that point to the value.\n{k: v for k, v in &lt;dict&gt;.items() if k in keys}  # Returns a dictionary, filtered by keys.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#counter","title":"Counter","text":"Python<pre><code>&gt;&gt;&gt; from collections import Counter\n&gt;&gt;&gt; colors = ['blue', 'blue', 'blue', 'red', 'red']\n&gt;&gt;&gt; counter = Counter(colors)\n&gt;&gt;&gt; counter['yellow'] += 1\nCounter({'blue': 3, 'red': 2, 'yellow': 1})\n&gt;&gt;&gt; counter.most_common()[0]\n('blue', 3)\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#set","title":"Set","text":"Python<pre><code>&lt;set&gt; = set()                                   # `{}` returns a dictionary.\n</code></pre> Python<pre><code>&lt;set&gt;.add(&lt;el&gt;)                                 # Or: &lt;set&gt; |= {&lt;el&gt;}\n&lt;set&gt;.update(&lt;collection&gt; [, ...])              # Or: &lt;set&gt; |= &lt;set&gt;\n</code></pre> Python<pre><code>&lt;set&gt;  = &lt;set&gt;.union(&lt;coll.&gt;)                   # Or: &lt;set&gt; | &lt;set&gt;\n&lt;set&gt;  = &lt;set&gt;.intersection(&lt;coll.&gt;)            # Or: &lt;set&gt; &amp; &lt;set&gt;\n&lt;set&gt;  = &lt;set&gt;.difference(&lt;coll.&gt;)              # Or: &lt;set&gt; - &lt;set&gt;\n&lt;set&gt;  = &lt;set&gt;.symmetric_difference(&lt;coll.&gt;)    # Or: &lt;set&gt; ^ &lt;set&gt;\n&lt;bool&gt; = &lt;set&gt;.issubset(&lt;coll.&gt;)                # Or: &lt;set&gt; &lt;= &lt;set&gt;\n&lt;bool&gt; = &lt;set&gt;.issuperset(&lt;coll.&gt;)              # Or: &lt;set&gt; &gt;= &lt;set&gt;\n</code></pre> Python<pre><code>&lt;el&gt; = &lt;set&gt;.pop()                              # Raises KeyError if empty.\n&lt;set&gt;.remove(&lt;el&gt;)                              # Raises KeyError if missing.\n&lt;set&gt;.discard(&lt;el&gt;)                             # Doesn't raise an error.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#frozen-set","title":"Frozen Set","text":"<ul> <li>Is immutable and hashable.</li> <li>That means it can be used as a key in a dictionary or as an element in a set.</li> </ul> Python<pre><code>&lt;frozenset&gt; = frozenset(&lt;collection&gt;)\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#tuple","title":"Tuple","text":"<p>Tuple is an immutable and hashable list.</p> Python<pre><code>&lt;tuple&gt; = ()                                # Empty tuple.\n&lt;tuple&gt; = (&lt;el&gt;,)                           # Or: &lt;el&gt;,\n&lt;tuple&gt; = (&lt;el_1&gt;, &lt;el_2&gt; [, ...])          # Or: &lt;el_1&gt;, &lt;el_2&gt; [, ...]\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#named-tuple","title":"Named Tuple","text":"<p>Tuple's subclass with named elements.</p> Python<pre><code>&gt;&gt;&gt; from collections import namedtuple\n&gt;&gt;&gt; Point = namedtuple('Point', 'x y')\n&gt;&gt;&gt; p = Point(1, y=2)\nPoint(x=1, y=2)\n&gt;&gt;&gt; p[0]\n1\n&gt;&gt;&gt; p.x\n1\n&gt;&gt;&gt; getattr(p, 'y')\n2\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#range","title":"Range","text":"<p>Immutable and hashable sequence of integers.</p> Python<pre><code>&lt;range&gt; = range(stop)                       # range(to_exclusive)\n&lt;range&gt; = range(start, stop)                # range(from_inclusive, to_exclusive)\n&lt;range&gt; = range(start, stop, \u00b1step)         # range(from_inclusive, to_exclusive, \u00b1step_size)\n</code></pre> Python<pre><code>&gt;&gt;&gt; [i for i in range(3)]\n[0, 1, 2]\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#enumerate","title":"Enumerate","text":"Python<pre><code>for i, el in enumerate(&lt;collection&gt; [, i_start]):\n    ...\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#iterator","title":"Iterator","text":"Python<pre><code>&lt;iter&gt; = iter(&lt;collection&gt;)                 # `iter(&lt;iter&gt;)` returns unmodified iterator.\n&lt;iter&gt; = iter(&lt;function&gt;, to_exclusive)     # A sequence of return values until 'to_exclusive'.\n&lt;el&gt;   = next(&lt;iter&gt; [, default])           # Raises StopIteration or returns 'default' on end.\n&lt;list&gt; = list(&lt;iter&gt;)                       # Returns a list of iterator's remaining elements.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#itertools","title":"Itertools","text":"Python<pre><code>from itertools import count, repeat, cycle, chain, islice\n</code></pre> Python<pre><code>&lt;iter&gt; = count(start=0, step=1)             # Returns updated value endlessly. Accepts floats.\n&lt;iter&gt; = repeat(&lt;el&gt; [, times])             # Returns element endlessly or 'times' times.\n&lt;iter&gt; = cycle(&lt;collection&gt;)                # Repeats the sequence endlessly.\n</code></pre> Python<pre><code>&lt;iter&gt; = chain(&lt;coll_1&gt;, &lt;coll_2&gt; [, ...])  # Empties collections in order (figuratively).\n&lt;iter&gt; = chain.from_iterable(&lt;coll&gt;)        # Empties collections inside a collection in order.\n</code></pre> Python<pre><code>&lt;iter&gt; = islice(&lt;coll&gt;, to_exclusive)         # Only returns first 'to_exclusive' elements.\n&lt;iter&gt; = islice(&lt;coll&gt;, from_inclusive, ...)  # `to_exclusive, +step_size`. Indices can be None.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#generator","title":"Generator","text":"<ul> <li>Any function that contains a yield statement returns a generator.</li> <li>Generators and iterators are interchangeable.</li> </ul> Python<pre><code>def count(start, step):\n    while True:\n        yield start\n        start += step\n</code></pre> Python<pre><code>&gt;&gt;&gt; counter = count(10, 2)\n&gt;&gt;&gt; next(counter), next(counter), next(counter)\n(10, 12, 14)\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#type","title":"Type","text":"<ul> <li>Everything is an object.</li> <li>Every object has a type.</li> <li>Type and class are synonymous.</li> </ul> Python<pre><code>&lt;type&gt; = type(&lt;el&gt;)                          # Or: &lt;el&gt;.__class__\n&lt;bool&gt; = isinstance(&lt;el&gt;, &lt;type&gt;)            # Or: issubclass(type(&lt;el&gt;), &lt;type&gt;)\n</code></pre> Python<pre><code>&gt;&gt;&gt; type('a'), 'a'.__class__, str\n(&lt;class 'str'&gt;, &lt;class 'str'&gt;, &lt;class 'str'&gt;)\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#some-types-do-not-have-built-in-names-so-they-must-be-imported","title":"Some types do not have built-in names, so they must be imported","text":"Python<pre><code>from types import FunctionType, MethodType, LambdaType, GeneratorType, ModuleType\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#abstract-base-classes","title":"Abstract Base Classes","text":"<p>Each abstract base class specifies a set of virtual subclasses. These classes are then recognized by isinstance() and issubclass() as subclasses of the ABC, although they are really not. ABC can also manually decide whether or not a specific class is its virtual subclass, usually based on which methods the class has implemented. For instance, Iterable ABC looks for method iter(), while Collection ABC looks for iter(), contains() and len().</p> Python<pre><code>&gt;&gt;&gt; from collections.abc import Iterable, Collection, Sequence\n&gt;&gt;&gt; isinstance([1, 2, 3], Iterable)\nTrue\n</code></pre> Text Only<pre><code>+------------------+------------+------------+------------+\n|                  |  Iterable  | Collection |  Sequence  |\n+------------------+------------+------------+------------+\n| list, range, str |    yes     |    yes     |    yes     |\n| dict, set        |    yes     |    yes     |            |\n| iter             |    yes     |            |            |\n+------------------+------------+------------+------------+\n</code></pre> Python<pre><code>&gt;&gt;&gt; from numbers import Number, Complex, Real, Rational, Integral\n&gt;&gt;&gt; isinstance(123, Number)\nTrue\n</code></pre> Text Only<pre><code>+--------------------+----------+----------+----------+----------+----------+\n|                    |  Number  |  Complex |   Real   | Rational | Integral |\n+--------------------+----------+----------+----------+----------+----------+\n| int                |   yes    |   yes    |   yes    |   yes    |   yes    |\n| fractions.Fraction |   yes    |   yes    |   yes    |   yes    |          |\n| float              |   yes    |   yes    |   yes    |          |          |\n| complex            |   yes    |   yes    |          |          |          |\n| decimal.Decimal    |   yes    |          |          |          |          |\n+--------------------+----------+----------+----------+----------+----------+\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#string","title":"String","text":"Python<pre><code>&lt;str&gt;  = &lt;str&gt;.strip()                       # Strips all whitespace characters from both ends.\n&lt;str&gt;  = &lt;str&gt;.strip('&lt;chars&gt;')              # Strips all passed characters from both ends.\n</code></pre> Python<pre><code>&lt;list&gt; = &lt;str&gt;.split()                       # Splits on one or more whitespace characters.\n&lt;list&gt; = &lt;str&gt;.split(sep=None, maxsplit=-1)  # Splits on 'sep' str at most 'maxsplit' times.\n&lt;list&gt; = &lt;str&gt;.splitlines(keepends=False)    # On [\\n\\r\\f\\v\\x1c-\\x1e\\x85\\u2028\\u2029] and \\r\\n.\n&lt;str&gt;  = &lt;str&gt;.join(&lt;coll_of_strings&gt;)       # Joins elements using string as a separator.\n</code></pre> Python<pre><code>&lt;bool&gt; = &lt;sub_str&gt; in &lt;str&gt;                  # Checks if string contains a substring.\n&lt;bool&gt; = &lt;str&gt;.startswith(&lt;sub_str&gt;)         # Pass tuple of strings for multiple options.\n&lt;bool&gt; = &lt;str&gt;.endswith(&lt;sub_str&gt;)           # Pass tuple of strings for multiple options.\n&lt;int&gt;  = &lt;str&gt;.find(&lt;sub_str&gt;)               # Returns start index of the first match or -1.\n&lt;int&gt;  = &lt;str&gt;.index(&lt;sub_str&gt;)              # Same, but raises ValueError if missing.\n</code></pre> Python<pre><code>&lt;str&gt;  = &lt;str&gt;.replace(old, new [, count])   # Replaces 'old' with 'new' at most 'count' times.\n&lt;str&gt;  = &lt;str&gt;.translate(&lt;table&gt;)            # Use `str.maketrans(&lt;dict&gt;)` to generate table.\n</code></pre> Python<pre><code>&lt;str&gt;  = chr(&lt;int&gt;)                          # Converts int to Unicode character.\n&lt;int&gt;  = ord(&lt;str&gt;)                          # Converts Unicode character to int.\n</code></pre> <ul> <li>Also: <code>'lstrip()'</code>, <code>'rstrip()'</code> and <code>'rsplit()'</code>.</li> <li>Also: <code>'lower()'</code>, <code>'upper()'</code>, <code>'capitalize()'</code> and <code>'title()'</code>.</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#property-methods","title":"Property Methods","text":"Text Only<pre><code>+---------------+------------+----------+----------+----------+----------+\n|               | [ !#$%...] | [a-zA-Z] |  [\u00bc\u00bd\u00be]   |  [\u00b2\u00b3\u00b9]   |  [0-9]   |\n+---------------+------------+----------+----------+----------+----------+\n| isprintable() |   yes      |   yes    |   yes    |   yes    |   yes    |\n| isalnum()     |            |   yes    |   yes    |   yes    |   yes    |\n| isnumeric()   |            |          |   yes    |   yes    |   yes    |\n| isdigit()     |            |          |          |   yes    |   yes    |\n| isdecimal()   |            |          |          |          |   yes    |\n+---------------+------------+----------+----------+----------+----------+\n</code></pre> <ul> <li>Also: <code>'isspace()'</code> checks for <code>'[ \\t\\n\\r\\f\\v\\x1c-\\x1f\\x85\\u2000...]'</code>.</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#regex","title":"Regex","text":"Python<pre><code>import re\n&lt;str&gt;   = re.sub(&lt;regex&gt;, new, text, count=0)  # Substitutes all occurrences with 'new'.\n&lt;list&gt;  = re.findall(&lt;regex&gt;, text)            # Returns all occurrences as strings.\n&lt;list&gt;  = re.split(&lt;regex&gt;, text, maxsplit=0)  # Use brackets in regex to include the matches.\n&lt;Match&gt; = re.search(&lt;regex&gt;, text)             # Searches for first occurrence of the pattern.\n&lt;Match&gt; = re.match(&lt;regex&gt;, text)              # Searches only at the beginning of the text.\n&lt;iter&gt;  = re.finditer(&lt;regex&gt;, text)           # Returns all occurrences as Match objects.\n</code></pre> <ul> <li>Argument 'new' can be a function that accepts a Match object and returns a string.</li> <li>Search() and match() return None if they can't find a match.</li> <li>Argument <code>'flags=re.IGNORECASE'</code> can be used with all functions.</li> <li>Argument <code>'flags=re.MULTILINE'</code> makes <code>'^'</code> and <code>'$'</code> match the start/end of each line.</li> <li>Argument <code>'flags=re.DOTALL'</code> makes dot also accept the <code>'\\n'</code>.</li> <li>Use <code>r'\\1'</code> or <code>'\\\\1'</code> for backreference (<code>'\\1'</code> returns a character with octal code 1).</li> <li>Add <code>'?'</code> after <code>'*'</code> and <code>'+'</code> to make them non-greedy.</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#match-object","title":"Match Object","text":"Python<pre><code>&lt;str&gt;   = &lt;Match&gt;.group()                      # Returns the whole match. Also group(0).\n&lt;str&gt;   = &lt;Match&gt;.group(1)                     # Returns part in the first bracket.\n&lt;tuple&gt; = &lt;Match&gt;.groups()                     # Returns all bracketed parts.\n&lt;int&gt;   = &lt;Match&gt;.start()                      # Returns start index of the match.\n&lt;int&gt;   = &lt;Match&gt;.end()                        # Returns exclusive end index of the match.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#special-sequences","title":"Special Sequences","text":"Python<pre><code>'\\d' == '[0-9]'                                # Matches decimal characters.\n'\\w' == '[a-zA-Z0-9_]'                         # Matches alphanumerics and underscore.\n'\\s' == '[ \\t\\n\\r\\f\\v]'                        # Matches whitespaces.\n</code></pre> <ul> <li>By default, decimal characters, alphanumerics and whitespaces from all alphabets are matched unless <code>'flags=re.ASCII'</code> argument is used.</li> <li>As shown above, it restricts all special sequence matches to the first 128 characters and prevents <code>'\\s'</code> from accepting <code>'[\\x1c-\\x1f]'</code> (the so-called separator characters).</li> <li>Use a capital letter for negation (all non-ASCII characters will be matched when used in combination with ASCII flag).</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#format","title":"Format","text":"Python<pre><code>&lt;str&gt; = f'{&lt;el_1&gt;}, {&lt;el_2&gt;}'            # Curly brackets can also contain expressions.\n&lt;str&gt; = '{}, {}'.format(&lt;el_1&gt;, &lt;el_2&gt;)  # Or: '{0}, {a}'.format(&lt;el_1&gt;, a=&lt;el_2&gt;)\n&lt;str&gt; = '%s, %s' % (&lt;el_1&gt;, &lt;el_2&gt;)      # Redundant and inferior C style formatting.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#attributes","title":"Attributes","text":"Python<pre><code>&gt;&gt;&gt; Person = collections.namedtuple('Person', 'name height')\n&gt;&gt;&gt; person = Person('Jean-Luc', 187)\n&gt;&gt;&gt; f'{person.height}'\n'187'\n&gt;&gt;&gt; '{p.height}'.format(p=person)\n'187'\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#general-options","title":"General Options","text":"Python<pre><code>{&lt;el&gt;:&lt;10}                               # '&lt;el&gt;      '\n{&lt;el&gt;:^10}                               # '   &lt;el&gt;   '\n{&lt;el&gt;:&gt;10}                               # '      &lt;el&gt;'\n{&lt;el&gt;:.&lt;10}                              # '&lt;el&gt;......'\n{&lt;el&gt;:0}                                 # '&lt;el&gt;'\n</code></pre> <ul> <li>Options can be generated dynamically: <code>f'{&lt;el&gt;:{&lt;str/int&gt;}[...]}'</code>.</li> <li>Adding <code>'!r'</code> before the colon converts object to string by calling its repr() method.</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#strings","title":"Strings","text":"Python<pre><code>{'abcde':10}                             # 'abcde     '\n{'abcde':10.3}                           # 'abc       '\n{'abcde':.3}                             # 'abc'\n{'abcde'!r:10}                           # \"'abcde'   \"\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#numbers","title":"Numbers","text":"Python<pre><code>{123456:10}                              # '    123456'\n{123456:10,}                             # '   123,456'\n{123456:10_}                             # '   123_456'\n{123456:+10}                             # '   +123456'\n{123456:=+10}                            # '+   123456'\n{123456: }                               # ' 123456'\n{-123456: }                              # '-123456'\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#floats","title":"Floats","text":"Python<pre><code>{1.23456:10.3}                           # '      1.23'\n{1.23456:10.3f}                          # '     1.235'\n{1.23456:10.3e}                          # ' 1.235e+00'\n{1.23456:10.3%}                          # '  123.456%'\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#comparison-of-presentation-types","title":"Comparison of presentation types","text":"Text Only<pre><code>+--------------+----------------+----------------+----------------+----------------+\n|              |    {&lt;float&gt;}   |   {&lt;float&gt;:f}  |   {&lt;float&gt;:e}  |   {&lt;float&gt;:%}  |\n+--------------+----------------+----------------+----------------+----------------+\n|  0.000056789 |   '5.6789e-05' |    '0.000057'  | '5.678900e-05' |    '0.005679%' |\n|  0.00056789  |   '0.00056789' |    '0.000568'  | '5.678900e-04' |    '0.056789%' |\n|  0.0056789   |   '0.0056789'  |    '0.005679'  | '5.678900e-03' |    '0.567890%' |\n|  0.056789    |   '0.056789'   |    '0.056789'  | '5.678900e-02' |    '5.678900%' |\n|  0.56789     |   '0.56789'    |    '0.567890'  | '5.678900e-01' |   '56.789000%' |\n|  5.6789      |   '5.6789'     |    '5.678900'  | '5.678900e+00' |  '567.890000%' |\n| 56.789       |  '56.789'      |   '56.789000'  | '5.678900e+01' | '5678.900000%' |\n+--------------+----------------+----------------+----------------+----------------+\n</code></pre> Text Only<pre><code>+--------------+----------------+----------------+----------------+----------------+\n|              |  {&lt;float&gt;:.2}  |  {&lt;float&gt;:.2f} |  {&lt;float&gt;:.2e} |  {&lt;float&gt;:.2%} |\n+--------------+----------------+----------------+----------------+----------------+\n|  0.000056789 |    '5.7e-05'   |      '0.00'    |   '5.68e-05'   |      '0.01%'   |\n|  0.00056789  |    '0.00057'   |      '0.00'    |   '5.68e-04'   |      '0.06%'   |\n|  0.0056789   |    '0.0057'    |      '0.01'    |   '5.68e-03'   |      '0.57%'   |\n|  0.056789    |    '0.057'     |      '0.06'    |   '5.68e-02'   |      '5.68%'   |\n|  0.56789     |    '0.57'      |      '0.57'    |   '5.68e-01'   |     '56.79%'   |\n|  5.6789      |    '5.7'       |      '5.68'    |   '5.68e+00'   |    '567.89%'   |\n| 56.789       |    '5.7e+01'   |     '56.79'    |   '5.68e+01'   |   '5678.90%'   |\n+--------------+----------------+----------------+----------------+----------------+\n</code></pre> <ul> <li>When both rounding up and rounding down are possible, the one that returns result with even last digit is chosen. That makes <code>'{6.5:.0f}'</code> a <code>'6'</code> and <code>'{7.5:.0f}'</code> an <code>'8'</code>.</li> <li>This rule only effects numbers that can be represented exactly by a float (<code>.5</code>, <code>.25</code>, ...).</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#ints","title":"Ints","text":"Python<pre><code>{90:c}                                   # 'Z'\n{90:b}                                   # '1011010'\n{90:X}                                   # '5A'\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#numbers_1","title":"Numbers","text":"Python<pre><code>&lt;int&gt;      = int(&lt;float/str/bool&gt;)       # Or: math.floor(&lt;float&gt;)\n&lt;float&gt;    = float(&lt;int/str/bool&gt;)       # Or: &lt;real&gt;e\u00b1&lt;int&gt;\n&lt;complex&gt;  = complex(real=0, imag=0)     # Or: &lt;real&gt; \u00b1 &lt;real&gt;j\n&lt;Fraction&gt; = fractions.Fraction(0, 1)    # Or: Fraction(numerator=0, denominator=1)\n&lt;Decimal&gt;  = decimal.Decimal(&lt;str/int&gt;)  # Or: Decimal((sign, digits, exponent))\n</code></pre> <ul> <li><code>'int(&lt;str&gt;)'</code> and <code>'float(&lt;str&gt;)'</code> raise ValueError on malformed strings.</li> <li>Decimal numbers are stored exactly, unlike most floats where <code>'1.1 + 2.2 != 3.3'</code>.</li> <li>Floats can be compared with: <code>'math.isclose(&lt;float&gt;, &lt;float&gt;)'</code>.</li> <li>Precision of decimal operations is set with: <code>'decimal.getcontext().prec = &lt;int&gt;'</code>.</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#basic-functions","title":"Basic Functions","text":"Python<pre><code>&lt;num&gt; = pow(&lt;num&gt;, &lt;num&gt;)                # Or: &lt;num&gt; ** &lt;num&gt;\n&lt;num&gt; = abs(&lt;num&gt;)                       # &lt;float&gt; = abs(&lt;complex&gt;)\n&lt;num&gt; = round(&lt;num&gt; [, \u00b1ndigits])        # `round(126, -1) == 130`\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#math","title":"Math","text":"Python<pre><code>from math import e, pi, inf, nan, isinf, isnan\nfrom math import sin, cos, tan, asin, acos, atan, degrees, radians\nfrom math import log, log10, log2\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#statistics","title":"Statistics","text":"Python<pre><code>from statistics import mean, median, variance, stdev, quantiles, groupby\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#random","title":"Random","text":"Python<pre><code>from random import random, randint, choice, shuffle, gauss, seed\n\n&lt;float&gt; = random()                       # A float inside [0, 1).\n&lt;int&gt;   = randint(from_inc, to_inc)      # An int inside [from_inc, to_inc].\n&lt;el&gt;    = choice(&lt;sequence&gt;)             # Keeps the sequence intact.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#bin-hex","title":"Bin, Hex","text":"Python<pre><code>&lt;int&gt; = \u00b10b&lt;bin&gt;                         # Or: \u00b10x&lt;hex&gt;\n&lt;int&gt; = int('\u00b1&lt;bin&gt;', 2)                 # Or: int('\u00b1&lt;hex&gt;', 16)\n&lt;int&gt; = int('\u00b10b&lt;bin&gt;', 0)               # Or: int('\u00b10x&lt;hex&gt;', 0)\n&lt;str&gt; = bin(&lt;int&gt;)                       # Returns '[-]0b&lt;bin&gt;'.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#bitwise-operators","title":"Bitwise Operators","text":"Python<pre><code>&lt;int&gt; = &lt;int&gt; &amp; &lt;int&gt;                    # And (0b1100 &amp; 0b1010 == 0b1000).\n&lt;int&gt; = &lt;int&gt; | &lt;int&gt;                    # Or  (0b1100 | 0b1010 == 0b1110).\n&lt;int&gt; = &lt;int&gt; ^ &lt;int&gt;                    # Xor (0b1100 ^ 0b1010 == 0b0110).\n&lt;int&gt; = &lt;int&gt; &lt;&lt; n_bits                  # Left shift. Use &gt;&gt; for right.\n&lt;int&gt; = ~&lt;int&gt;                           # Not. Also -&lt;int&gt; - 1.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#combinatorics","title":"Combinatorics","text":"<ul> <li>Every function returns an iterator.</li> <li>If you want to print the iterator, you need to pass it to the list() function first!</li> </ul> Python<pre><code>from itertools import product, combinations, combinations_with_replacement, permutations\n</code></pre> Python<pre><code>&gt;&gt;&gt; product([0, 1], repeat=3)\n[(0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1), ..., (1, 1, 1)]\n</code></pre> Python<pre><code>&gt;&gt;&gt; product('abc', 'abc')                    #   a  b  c\n[('a', 'a'), ('a', 'b'), ('a', 'c'),         # a x  x  x\n ('b', 'a'), ('b', 'b'), ('b', 'c'),         # b x  x  x\n ('c', 'a'), ('c', 'b'), ('c', 'c')]         # c x  x  x\n</code></pre> Python<pre><code>&gt;&gt;&gt; combinations('abc', 2)                   #   a  b  c\n[('a', 'b'), ('a', 'c'),                     # a .  x  x\n ('b', 'c')]                                 # b .  .  x\n</code></pre> Python<pre><code>&gt;&gt;&gt; combinations_with_replacement('abc', 2)  #   a  b  c\n[('a', 'a'), ('a', 'b'), ('a', 'c'),         # a x  x  x\n ('b', 'b'), ('b', 'c'),                     # b .  x  x\n ('c', 'c')]                                 # c .  .  x\n</code></pre> Python<pre><code>&gt;&gt;&gt; permutations('abc', 2)                   #   a  b  c\n[('a', 'b'), ('a', 'c'),                     # a .  x  x\n ('b', 'a'), ('b', 'c'),                     # b x  .  x\n ('c', 'a'), ('c', 'b')]                     # c x  x  .\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#datetime","title":"Datetime","text":"<ul> <li>Module 'datetime' provides 'date' <code>&lt;D&gt;</code>, 'time' <code>&lt;T&gt;</code>, 'datetime' <code>&lt;DT&gt;</code> and 'timedelta' <code>&lt;TD&gt;</code> classes. All are immutable and hashable.</li> <li>Time and datetime objects can be 'aware' <code>&lt;a&gt;</code>, meaning they have defined timezone, or 'naive' <code>&lt;n&gt;</code>, meaning they don't.</li> <li>If object is naive, it is presumed to be in the system's timezone.</li> </ul> Python<pre><code>from datetime import date, time, datetime, timedelta\nfrom dateutil.tz import UTC, tzlocal, gettz, datetime_exists, resolve_imaginary\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#constructors","title":"Constructors","text":"Python<pre><code>&lt;D&gt;  = date(year, month, day)               # Only accepts valid dates from 1 to 9999 AD.\n&lt;T&gt;  = time(hour=0, minute=0, second=0)     # Also: `microsecond=0, tzinfo=None, fold=0`.\n&lt;DT&gt; = datetime(year, month, day, hour=0)   # Also: `minute=0, second=0, microsecond=0, ...`.\n&lt;TD&gt; = timedelta(weeks=0, days=0, hours=0)  # Also: `minutes=0, seconds=0, microsecond=0`.\n</code></pre> <ul> <li>Use <code>'&lt;D/DT&gt;.weekday()'</code> to get the day of the week as an int, with Monday being 0.</li> <li><code>'fold=1'</code> means the second pass in case of time jumping back for one hour.</li> <li>Timedelta normalizes arguments to \u00b1days, seconds (&lt; 86 400) and microseconds (&lt; 1M).</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#now","title":"Now","text":"Python<pre><code>&lt;D/DTn&gt;  = D/DT.today()                     # Current local date or naive datetime.\n&lt;DTn&gt;    = DT.utcnow()                      # Naive datetime from current UTC time.\n&lt;DTa&gt;    = DT.now(&lt;tzinfo&gt;)                 # Aware datetime from current tz time.\n</code></pre> <ul> <li>To extract time use <code>'&lt;DTn&gt;.time()'</code>, <code>'&lt;DTa&gt;.time()'</code> or <code>'&lt;DTa&gt;.timetz()'</code>.</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#timezone","title":"Timezone","text":"Python<pre><code>&lt;tzinfo&gt; = UTC                              # UTC timezone. London without DST.\n&lt;tzinfo&gt; = tzlocal()                        # Local timezone. Also gettz().\n&lt;tzinfo&gt; = gettz('&lt;Continent&gt;/&lt;City&gt;')      # 'Continent/City_Name' timezone or None.\n&lt;DTa&gt;    = &lt;DT&gt;.astimezone(&lt;tzinfo&gt;)        # Datetime, converted to the passed timezone.\n&lt;Ta/DTa&gt; = &lt;T/DT&gt;.replace(tzinfo=&lt;tzinfo&gt;)  # Unconverted object with a new timezone.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#encode","title":"Encode","text":"Python<pre><code>&lt;D/T/DT&gt; = D/T/DT.fromisoformat('&lt;iso&gt;')    # Object from ISO string. Raises ValueError.\n&lt;DT&gt;     = DT.strptime(&lt;str&gt;, '&lt;format&gt;')   # Datetime from str, according to format.\n&lt;D/DTn&gt;  = D/DT.fromordinal(&lt;int&gt;)          # D/DTn from days since the Gregorian NYE 1.\n&lt;DTn&gt;    = DT.fromtimestamp(&lt;real&gt;)         # Local time DTn from seconds since the Epoch.\n&lt;DTa&gt;    = DT.fromtimestamp(&lt;real&gt;, &lt;tz.&gt;)  # Aware datetime from seconds since the Epoch.\n</code></pre> <ul> <li>ISO strings come in following forms: <code>'YYYY-MM-DD'</code>, <code>'HH:MM:SS.mmmuuu[\u00b1HH:MM]'</code>, or both separated by an arbitrary character. All parts following hours are optional.</li> <li>Python uses the Unix Epoch: <code>'1970-01-01 00:00 UTC'</code>, <code>'1970-01-01 01:00 CET'</code>, ...</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#decode","title":"Decode","text":"Python<pre><code>&lt;str&gt;    = &lt;D/T/DT&gt;.isoformat(sep='T')      # Also: `timespec='auto/hours/minutes/seconds/...'`.\n&lt;str&gt;    = &lt;D/T/DT&gt;.strftime('&lt;format&gt;')    # Custom string representation.\n&lt;int&gt;    = &lt;D/DT&gt;.toordinal()               # Days since Gregorian NYE 1, ignoring time and tz.\n&lt;float&gt;  = &lt;DTn&gt;.timestamp()                # Seconds since the Epoch, from DTn in local tz.\n&lt;float&gt;  = &lt;DTa&gt;.timestamp()                # Seconds since the Epoch, from aware datetime.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#format_1","title":"Format","text":"Python<pre><code>&gt;&gt;&gt; dt = datetime.strptime('2015-05-14 23:39:00.00 +2000', '%Y-%m-%d %H:%M:%S.%f %z')\n&gt;&gt;&gt; dt.strftime(\"%A, %dth of %B '%y, %I:%M%p %Z\")\n\"Thursday, 14th of May '15, 11:39PM UTC+02:00\"\n</code></pre> <ul> <li><code>'%Z'</code> only accepts <code>'UTC/GMT'</code> and local timezone's code. <code>'%z'</code> also accepts <code>'\u00b1HH:MM'</code>.</li> <li>For abbreviated weekday and month use <code>'%a'</code> and <code>'%b'</code>.</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#arithmetics","title":"Arithmetics","text":"Python<pre><code>&lt;D/DT&gt;   = &lt;D/DT&gt;  \u00b1 &lt;TD&gt;                   # Returned datetime can fall into missing hour.\n&lt;TD&gt;     = &lt;D/DTn&gt; - &lt;D/DTn&gt;                # Returns the difference, ignoring time jumps.\n&lt;TD&gt;     = &lt;DTa&gt;   - &lt;DTa&gt;                  # Ignores time jumps if they share tzinfo object.\n&lt;TD&gt;     = &lt;TD&gt;    * &lt;real&gt;                 # Also: &lt;TD&gt; = abs(&lt;TD&gt;) and &lt;TD&gt; = &lt;TD&gt; \u00b1% &lt;TD&gt;.\n&lt;float&gt;  = &lt;TD&gt;    / &lt;TD&gt;                   # How many weeks/years there are in TD. Also //.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#arguments","title":"Arguments","text":""},{"location":"dev-notes/python/py-cheatsheet/#inside-function-call","title":"Inside Function Call","text":"Python<pre><code>func(&lt;positional_args&gt;)                           # func(0, 0)\nfunc(&lt;keyword_args&gt;)                              # func(x=0, y=0)\nfunc(&lt;positional_args&gt;, &lt;keyword_args&gt;)           # func(0, y=0)\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#inside-function-definition","title":"Inside Function Definition","text":"Python<pre><code>def func(&lt;nondefault_args&gt;): ...                  # def func(x, y): ...\ndef func(&lt;default_args&gt;): ...                     # def func(x=0, y=0): ...\ndef func(&lt;nondefault_args&gt;, &lt;default_args&gt;): ...  # def func(x, y=0): ...\n</code></pre> <ul> <li>Default values are evaluated when function is first encountered in the scope.</li> <li>Any mutation of a mutable default value will persist between invocations.</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#splat-operator","title":"Splat Operator","text":""},{"location":"dev-notes/python/py-cheatsheet/#inside-function-call_1","title":"Inside Function Call","text":"<p>Splat expands a collection into positional arguments, while splatty-splat expands a dictionary into keyword arguments.</p> Python<pre><code>args   = (1, 2)\nkwargs = {'x': 3, 'y': 4, 'z': 5}\nfunc(*args, **kwargs)\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#is-the-same-as","title":"Is the same as","text":"Python<pre><code>func(1, 2, x=3, y=4, z=5)\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#inside-function-definition_1","title":"Inside Function Definition","text":"<p>Splat combines zero or more positional arguments into a tuple, while splatty-splat combines zero or more keyword arguments into a dictionary.</p> Python<pre><code>def add(*a):\n    return sum(a)\n</code></pre> Python<pre><code>&gt;&gt;&gt; add(1, 2, 3)\n6\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#legal-argument-combinations","title":"Legal argument combinations","text":"Python<pre><code>def f(*, x, y, z): ...          # f(x=1, y=2, z=3)\ndef f(x, *, y, z): ...          # f(x=1, y=2, z=3) | f(1, y=2, z=3)\ndef f(x, y, *, z): ...          # f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3)\n</code></pre> Python<pre><code>def f(*args): ...               # f(1, 2, 3)\ndef f(x, *args): ...            # f(1, 2, 3)\ndef f(*args, z): ...            # f(1, 2, z=3)\n</code></pre> Python<pre><code>def f(**kwargs): ...            # f(x=1, y=2, z=3)\ndef f(x, **kwargs): ...         # f(x=1, y=2, z=3) | f(1, y=2, z=3)\ndef f(*, x, **kwargs): ...      # f(x=1, y=2, z=3)\n</code></pre> Python<pre><code>def f(*args, **kwargs): ...     # f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3) | f(1, 2, 3)\ndef f(x, *args, **kwargs): ...  # f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3) | f(1, 2, 3)\ndef f(*args, y, **kwargs): ...  # f(x=1, y=2, z=3) | f(1, y=2, z=3)\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#other-uses","title":"Other Uses","text":"Python<pre><code>&lt;list&gt;  = [*&lt;coll.&gt; [, ...]]    # Or: list(&lt;collection&gt;) [+ ...]\n&lt;tuple&gt; = (*&lt;coll.&gt;, [...])     # Or: tuple(&lt;collection&gt;) [+ ...]\n&lt;set&gt;   = {*&lt;coll.&gt; [, ...]}    # Or: set(&lt;collection&gt;) [| ...]\n&lt;dict&gt;  = {**&lt;dict&gt; [, ...]}    # Or: dict(**&lt;dict&gt; [, ...])\n</code></pre> Python<pre><code>head, *body, tail = &lt;coll.&gt;     # Head or tail can be omitted.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#inline","title":"Inline","text":""},{"location":"dev-notes/python/py-cheatsheet/#lambda","title":"Lambda","text":"Python<pre><code>&lt;func&gt; = lambda: &lt;return_value&gt;                     # A single statement function.\n&lt;func&gt; = lambda &lt;arg_1&gt;, &lt;arg_2&gt;: &lt;return_value&gt;    # Also accepts default arguments.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#comprehensions","title":"Comprehensions","text":"Python<pre><code>&lt;list&gt; = [i+1 for i in range(10)]                   # Or: [1, 2, ..., 10]\n&lt;iter&gt; = (i for i in range(10) if i &gt; 5)            # Or: iter([6, 7, 8, 9])\n&lt;set&gt;  = {i+5 for i in range(10)}                   # Or: {5, 6, ..., 14}\n&lt;dict&gt; = {i: i*2 for i in range(10)}                # Or: {0: 0, 1: 2, ..., 9: 18}\n</code></pre> Python<pre><code>&gt;&gt;&gt; [l+r for l in 'abc' for r in 'abc']\n['aa', 'ab', 'ac', ..., 'cc']\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#map-filter-reduce","title":"Map, Filter, Reduce","text":"Python<pre><code>&lt;iter&gt; = map(lambda x: x + 1, range(10))            # Or: iter([1, 2, ..., 10])\n&lt;iter&gt; = filter(lambda x: x &gt; 5, range(10))         # Or: iter([6, 7, 8, 9])\n&lt;obj&gt;  = reduce(lambda out, x: out + x, range(10))  # Or: 45\n</code></pre> <ul> <li>Reduce must be imported from the functools module.</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#any-all","title":"Any, All","text":"Python<pre><code>&lt;bool&gt; = any(&lt;collection&gt;)                          # Is `bool(el)` True for any element.\n&lt;bool&gt; = all(&lt;collection&gt;)                          # Is True for all elements or empty.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#conditional-expression","title":"Conditional Expression","text":"Python<pre><code>&lt;obj&gt; = &lt;exp&gt; if &lt;condition&gt; else &lt;exp&gt;             # Only one expression gets evaluated.\n</code></pre> Python<pre><code>&gt;&gt;&gt; [a if a else 'zero' for a in (0, 1, 2, 3)]\n['zero', 1, 2, 3]\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#named-tuple-enum-dataclass","title":"Named Tuple, Enum, Dataclass","text":"Python<pre><code>from collections import namedtuple\nPoint = namedtuple('Point', 'x y')                  # Creates a tuple's subclass.\npoint = Point(0, 0)                                 # Returns its instance.\n</code></pre> Python<pre><code>from enum import Enum\nDirection = Enum('Direction', 'n e s w')            # Creates an enum.\ndirection = Direction.n                             # Returns its member.\n</code></pre> Python<pre><code>from dataclasses import make_dataclass\nPlayer = make_dataclass('Player', ['loc', 'dir'])   # Creates a class.\nplayer = Player(point, direction)                   # Returns its instance.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#imports","title":"Imports","text":"Python<pre><code>import &lt;module&gt;            # Imports a built-in or '&lt;module&gt;.py'.\nimport &lt;package&gt;           # Imports a built-in or '&lt;package&gt;/__init__.py'.\nimport &lt;package&gt;.&lt;module&gt;  # Imports a built-in or '&lt;package&gt;/&lt;module&gt;.py'.\n</code></pre> <ul> <li>Package is a collection of modules, but it can also define its own objects.</li> <li>On a filesystem this corresponds to a directory of Python files with an optional init script.</li> <li>Running <code>'import &lt;package&gt;'</code> does not automatically provide access to the package's modules unless they are explicitly imported in its init script.</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#closure","title":"Closure","text":"<p>We have/get a closure in Python when:</p> <ul> <li>A nested function references a value of its enclosing function and then</li> <li>the enclosing function returns the nested function.</li> </ul> Python<pre><code>def get_multiplier(a):\n    def out(b):\n        return a * b\n    return out\n</code></pre> Python<pre><code>&gt;&gt;&gt; multiply_by_3 = get_multiplier(3)\n&gt;&gt;&gt; multiply_by_3(10)\n30\n</code></pre> <ul> <li>If multiple nested functions within enclosing function reference the same value, that value gets shared.</li> <li>To dynamically access function's first free variable use <code>'&lt;function&gt;.__closure__[0].cell_contents'</code>.</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#partial","title":"Partial","text":"Python<pre><code>from functools import partial\n&lt;function&gt; = partial(&lt;function&gt; [, &lt;arg_1&gt;, &lt;arg_2&gt;, ...])\n</code></pre> Python<pre><code>&gt;&gt;&gt; import operator as op\n&gt;&gt;&gt; multiply_by_3 = partial(op.mul, 3)\n&gt;&gt;&gt; multiply_by_3(10)\n30\n</code></pre> <ul> <li>Partial is also useful in cases when function needs to be passed as an argument because it enables us to set its arguments beforehand.</li> <li>A few examples being: <code>'defaultdict(&lt;function&gt;)'</code>, <code>'iter(&lt;function&gt;, to_exclusive)'</code> and dataclass's <code>'field(default_factory=&lt;function&gt;)'</code>.</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#non-local","title":"Non-Local","text":"<p>If variable is being assigned to anywhere in the scope, it is regarded as a local variable, unless it is declared as a 'global' or a 'nonlocal'.</p> Python<pre><code>def get_counter():\n    i = 0\n    def out():\n        nonlocal i\n        i += 1\n        return i\n    return out\n</code></pre> Python<pre><code>&gt;&gt;&gt; counter = get_counter()\n&gt;&gt;&gt; counter(), counter(), counter()\n(1, 2, 3)\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#decorator","title":"Decorator","text":"<ul> <li>A decorator takes a function, adds some functionality and returns it.</li> <li>It can be any callable, but is usually implemented as a function that returns a closure.</li> </ul> Python<pre><code>@decorator_name\ndef function_that_gets_passed_to_decorator():\n    ...\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#debugger-example","title":"Debugger Example","text":"<p>Decorator that prints function's name every time the function is called.</p> Python<pre><code>from functools import wraps\n\ndef debug(func):\n    @wraps(func)\n    def out(*args, **kwargs):\n        print(func.__name__)\n        return func(*args, **kwargs)\n    return out\n\n@debug\ndef add(x, y):\n    return x + y\n</code></pre> <ul> <li>Wraps is a helper decorator that copies the metadata of the passed function (func) to the function it is wrapping (out).</li> <li>Without it <code>'add.__name__'</code> would return <code>'out'</code>.</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#lru-cache","title":"LRU Cache","text":"<p>Decorator that caches function's return values. All function's arguments must be hashable.</p> Python<pre><code>from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef fib(n):\n    return n if n &lt; 2 else fib(n-2) + fib(n-1)\n</code></pre> <ul> <li>Default size of the cache is 128 values. Passing <code>'maxsize=None'</code> makes it unbounded.</li> <li>CPython interpreter limits recursion depth to 1000 by default. To increase it use <code>'sys.setrecursionlimit(&lt;depth&gt;)'</code>.</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#parametrized-decorator","title":"Parametrized Decorator","text":"<p>A decorator that accepts arguments and returns a normal decorator that accepts a function.</p> Python<pre><code>from functools import wraps\n\ndef debug(print_result=False):\n    def decorator(func):\n        @wraps(func)\n        def out(*args, **kwargs):\n            result = func(*args, **kwargs)\n            print(func.__name__, result if print_result else '')\n            return result\n        return out\n    return decorator\n\n@debug(print_result=True)\ndef add(x, y):\n    return x + y\n</code></pre> <ul> <li>Using only <code>'@debug'</code> to decorate the add() function would not work here, because debug would then receive the add() function as a 'print_result' argument. Decorators can however manually check if the argument they received is a function and act accordingly.</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#class","title":"Class","text":"Python<pre><code>class &lt;name&gt;:\n    def __init__(self, a):\n        self.a = a\n    def __repr__(self):\n        class_name = self.__class__.__name__\n        return f'{class_name}({self.a!r})'\n    def __str__(self):\n        return str(self.a)\n\n    @classmethod\n    def get_class_name(cls):\n        return cls.__name__\n</code></pre> <ul> <li>Return value of repr() should be unambiguous and of str() readable.</li> <li>If only repr() is defined, it will also be used for str().</li> <li>Methods decorated with <code>'@staticmethod'</code> do not receive 'self' nor 'cls' as their first arg.</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#str-use-cases","title":"Str() use cases","text":"Python<pre><code>print(&lt;el&gt;)\nf'{&lt;el&gt;}'\nlogging.warning(&lt;el&gt;)\ncsv.writer(&lt;file&gt;).writerow([&lt;el&gt;])\nraise Exception(&lt;el&gt;)\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#repr-use-cases","title":"Repr() use cases","text":"Python<pre><code>print/str/repr([&lt;el&gt;])\nf'{&lt;el&gt;!r}'\nZ = dataclasses.make_dataclass('Z', ['a']); print/str/repr(Z(&lt;el&gt;))\n&gt;&gt;&gt; &lt;el&gt;\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#constructor-overloading","title":"Constructor Overloading","text":"Python<pre><code>class &lt;name&gt;:\n    def __init__(self, a=None):\n        self.a = a\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#inheritance","title":"Inheritance","text":"Python<pre><code>class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age  = age\n\nclass Employee(Person):\n    def __init__(self, name, age, staff_num):\n        super().__init__(name, age)\n        self.staff_num = staff_num\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#multiple-inheritance","title":"Multiple Inheritance","text":"Python<pre><code>class A: pass\nclass B: pass\nclass C(A, B): pass\n</code></pre> <p>MRO determines the order in which parent classes are traversed when searching for a method or an attribute:</p> Python<pre><code>&gt;&gt;&gt; C.mro()\n[&lt;class 'C'&gt;, &lt;class 'A'&gt;, &lt;class 'B'&gt;, &lt;class 'object'&gt;]\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#property","title":"Property","text":"<p>Pythonic way of implementing getters and setters.</p> Python<pre><code>class Person:\n    @property\n    def name(self):\n        return ' '.join(self._name)\n\n    @name.setter\n    def name(self, value):\n        self._name = value.split()\n</code></pre> Python<pre><code>&gt;&gt;&gt; person = Person()\n&gt;&gt;&gt; person.name = '\\t Guido  van Rossum \\n'\n&gt;&gt;&gt; person.name\n'Guido van Rossum'\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#dataclass","title":"Dataclass","text":"<p>Decorator that automatically generates init(), repr() and eq() special methods.</p> Python<pre><code>from dataclasses import dataclass, field\n\n@dataclass(order=False, frozen=False)\nclass &lt;class_name&gt;:\n    &lt;attr_name_1&gt;: &lt;type&gt;\n    &lt;attr_name_2&gt;: &lt;type&gt; = &lt;default_value&gt;\n    &lt;attr_name_3&gt;: list/dict/set = field(default_factory=list/dict/set)\n</code></pre> <ul> <li>Objects can be made sortable with <code>'order=True'</code> and immutable with <code>'frozen=True'</code>.</li> <li>For object to be hashable, all attributes must be hashable and 'frozen' must be True.</li> <li>Function field() is needed because <code>'&lt;attr_name&gt;: list = []'</code> would make a list that is shared among all instances. Its 'default_factory' argument can be any callable.</li> <li>For attributes of arbitrary type use <code>'typing.Any'</code>.</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#inline_1","title":"Inline","text":"Python<pre><code>from dataclasses import make_dataclass\n&lt;class&gt; = make_dataclass('&lt;class_name&gt;', &lt;coll_of_attribute_names&gt;)\n&lt;class&gt; = make_dataclass('&lt;class_name&gt;', &lt;coll_of_tuples&gt;)\n&lt;tuple&gt; = ('&lt;attr_name&gt;', &lt;type&gt; [, &lt;default_value&gt;])\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#rest-of-type-annotations-cpython-interpreter-ignores-them-all","title":"Rest of type annotations (CPython interpreter ignores them all)","text":"Python<pre><code>def func(&lt;arg_name&gt;: &lt;type&gt; [= &lt;obj&gt;]) -&gt; &lt;type&gt;: ...\n&lt;var_name&gt;: typing.List/Set/Iterable/Sequence/Optional[&lt;type&gt;]\n&lt;var_name&gt;: typing.Dict/Tuple/Union[&lt;type&gt;, ...]\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#slots","title":"Slots","text":"<p>Mechanism that restricts objects to attributes listed in 'slots' and significantly reduces their memory footprint.</p> Python<pre><code>class MyClassWithSlots:\n    __slots__ = ['a']\n    def __init__(self):\n        self.a = 1\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#copy","title":"Copy","text":"Python<pre><code>from copy import copy, deepcopy\n&lt;object&gt; = copy(&lt;object&gt;)\n&lt;object&gt; = deepcopy(&lt;object&gt;)\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#duck-types","title":"Duck Types","text":"<p>A duck type is an implicit type that prescribes a set of special methods. Any object that has those methods defined is considered a member of that duck type.</p>"},{"location":"dev-notes/python/py-cheatsheet/#comparable","title":"Comparable","text":"<ul> <li>If eq() method is not overridden, it returns <code>'id(self) == id(other)'</code>, which is the same as <code>'self is other'</code>.</li> <li>That means all objects compare not equal by default.</li> <li>Only the left side object has eq() method called, unless it returns NotImplemented, in which case the right object is consulted. False is returned if both return NotImplemented.</li> <li>Ne() automatically works on any object that has eq() defined.</li> </ul> Python<pre><code>class MyComparable:\n    def __init__(self, a):\n        self.a = a\n    def __eq__(self, other):\n        if isinstance(other, type(self)):\n            return self.a == other.a\n        return NotImplemented\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#hashable","title":"Hashable","text":"<ul> <li>Hashable object needs both hash() and eq() methods and its hash value should never change.</li> <li>Hashable objects that compare equal must have the same hash value, meaning default hash() that returns <code>'id(self)'</code> will not do.</li> <li>That is why Python automatically makes classes unhashable if you only implement eq().</li> </ul> Python<pre><code>class MyHashable:\n    def __init__(self, a):\n        self._a = a\n    @property\n    def a(self):\n        return self._a\n    def __eq__(self, other):\n        if isinstance(other, type(self)):\n            return self.a == other.a\n        return NotImplemented\n    def __hash__(self):\n        return hash(self.a)\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#sortable","title":"Sortable","text":"<ul> <li>With 'total_ordering' decorator, you only need to provide eq() and one of lt(), gt(), le() or ge() special methods and the rest will be automatically generated.</li> <li>Functions sorted() and min() only require lt() method, while max() only requires gt(). However, it is best to define them all so that confusion doesn't arise in other contexts.</li> <li>When two lists, strings or dataclasses are compared, their values get compared in order until a pair of unequal values is found. The comparison of this two values is then returned. The shorter sequence is considered smaller in case of all values being equal.</li> </ul> Python<pre><code>from functools import total_ordering\n\n@total_ordering\nclass MySortable:\n    def __init__(self, a):\n        self.a = a\n    def __eq__(self, other):\n        if isinstance(other, type(self)):\n            return self.a == other.a\n        return NotImplemented\n    def __lt__(self, other):\n        if isinstance(other, type(self)):\n            return self.a &lt; other.a\n        return NotImplemented\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#iterator_1","title":"Iterator","text":"<ul> <li>Any object that has methods next() and iter() is an iterator.</li> <li>Next() should return next item or raise StopIteration.</li> <li>Iter() should return 'self'.</li> </ul> Python<pre><code>class Counter:\n    def __init__(self):\n        self.i = 0\n    def __next__(self):\n        self.i += 1\n        return self.i\n    def __iter__(self):\n        return self\n</code></pre> Python<pre><code>&gt;&gt;&gt; counter = Counter()\n&gt;&gt;&gt; next(counter), next(counter), next(counter)\n(1, 2, 3)\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#python-has-many-different-iterator-objects","title":"Python has many different iterator objects","text":"<ul> <li>Sequence iterators returned by the iter() function, such as list_iterator and set_iterator.</li> <li>Objects returned by the itertools module, such as count, repeat and cycle.</li> <li>Generators returned by the generator functions and generator expressions.</li> <li>File objects returned by the open() function, etc.</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#callable","title":"Callable","text":"<ul> <li>All functions and classes have a call() method, hence are callable.</li> <li>When this Cheatsheet uses <code>'&lt;function&gt;'</code> as an argument, it actually means <code>'&lt;callable&gt;'</code>.</li> </ul> Python<pre><code>class Counter:\n    def __init__(self):\n        self.i = 0\n    def __call__(self):\n        self.i += 1\n        return self.i\n</code></pre> Python<pre><code>&gt;&gt;&gt; counter = Counter()\n&gt;&gt;&gt; counter(), counter(), counter()\n(1, 2, 3)\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#context-manager","title":"Context Manager","text":"<ul> <li>Enter() should lock the resources and optionally return an object.</li> <li>Exit() should release the resources.</li> <li>Any exception that happens inside the with block is passed to the exit() method.</li> <li>If it wishes to suppress the exception it must return a true value.</li> </ul> Python<pre><code>class MyOpen:\n    def __init__(self, filename):\n        self.filename = filename\n    def __enter__(self):\n        self.file = open(self.filename)\n        return self.file\n    def __exit__(self, exc_type, exception, traceback):\n        self.file.close()\n</code></pre> Python<pre><code>&gt;&gt;&gt; with open('test.txt', 'w') as file:\n...     file.write('Hello World!')\n&gt;&gt;&gt; with MyOpen('test.txt') as file:\n...     print(file.read())\nHello World!\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#iterable-duck-types","title":"Iterable Duck Types","text":""},{"location":"dev-notes/python/py-cheatsheet/#iterable","title":"Iterable","text":"<ul> <li>Only required method is iter(). It should return an iterator of object's items.</li> <li>Contains() automatically works on any object that has iter() defined.</li> </ul> Python<pre><code>class MyIterable:\n    def __init__(self, a):\n        self.a = a\n    def __iter__(self):\n        return iter(self.a)\n    def __contains__(self, el):\n        return el in self.a\n</code></pre> Python<pre><code>&gt;&gt;&gt; obj = MyIterable([1, 2, 3])\n&gt;&gt;&gt; [el for el in obj]\n[1, 2, 3]\n&gt;&gt;&gt; 1 in obj\nTrue\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#collection","title":"Collection","text":"<ul> <li>Only required methods are iter() and len(). Len() should return the number of items.</li> <li>This Cheatsheet actually means <code>'&lt;iterable&gt;'</code> when it uses <code>'&lt;collection&gt;'</code>.</li> <li>I chose not to use the name 'iterable' because it sounds scarier and more vague than 'collection'. The only drawback of this decision is that a reader could think a certain function doesn't accept iterators when it does, since iterators are the only built-in objects that are iterable but are not collections.</li> </ul> Python<pre><code>class MyCollection:\n    def __init__(self, a):\n        self.a = a\n    def __iter__(self):\n        return iter(self.a)\n    def __contains__(self, el):\n        return el in self.a\n    def __len__(self):\n        return len(self.a)\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#sequence","title":"Sequence","text":"<ul> <li>Only required methods are len() and getitem().</li> <li>Getitem() should return an item at the passed index or raise IndexError.</li> <li>Iter() and contains() automatically work on any object that has getitem() defined.</li> <li>Reversed() automatically works on any object that has len() and getitem() defined.</li> </ul> Python<pre><code>class MySequence:\n    def __init__(self, a):\n        self.a = a\n    def __iter__(self):\n        return iter(self.a)\n    def __contains__(self, el):\n        return el in self.a\n    def __len__(self):\n        return len(self.a)\n    def __getitem__(self, i):\n        return self.a[i]\n    def __reversed__(self):\n        return reversed(self.a)\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#discrepancies-between-glossary-definitions-and-abstract-base-classes","title":"Discrepancies between glossary definitions and abstract base classes","text":"<ul> <li>Glossary defines iterable as any object with iter() or getitem() and sequence as any object with getitem() and len(). It does not define collection.</li> <li>Passing ABC Iterable to isinstance() or issubclass() checks whether object/class has method iter(), while ABC Collection checks for iter(), contains() and len().</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#abc-sequence","title":"ABC Sequence","text":"<ul> <li>It's a richer interface than the basic sequence.</li> <li>Extending it generates iter(), contains(), reversed(), index() and count().</li> <li>Unlike <code>'abc.Iterable'</code> and <code>'abc.Collection'</code>, it is not a duck type. That is why <code>'issubclass(MySequence, abc.Sequence)'</code> would return False even if MySequence had all the methods defined. It however recognizes list, tuple, range, str, bytes, bytearray, memoryview and deque, because they are registered as Sequence's virtual subclasses.</li> </ul> Python<pre><code>from collections import abc\n\nclass MyAbcSequence(abc.Sequence):\n    def __init__(self, a):\n        self.a = a\n    def __len__(self):\n        return len(self.a)\n    def __getitem__(self, i):\n        return self.a[i]\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#table-of-required-and-automatically-available-special-methods","title":"Table of required and automatically available special methods","text":"Text Only<pre><code>+------------+------------+------------+------------+--------------+\n|            |  Iterable  | Collection |  Sequence  | abc.Sequence |\n+------------+------------+------------+------------+--------------+\n| iter()     |    REQ     |    REQ     |    Yes     |     Yes      |\n| contains() |    Yes     |    Yes     |    Yes     |     Yes      |\n| len()      |            |    REQ     |    REQ     |     REQ      |\n| getitem()  |            |            |    REQ     |     REQ      |\n| reversed() |            |            |    Yes     |     Yes      |\n| index()    |            |            |            |     Yes      |\n| count()    |            |            |            |     Yes      |\n+------------+------------+------------+------------+--------------+\n</code></pre> <ul> <li>Other ABCs that generate missing methods are: MutableSequence, Set, MutableSet, Mapping and MutableMapping.</li> <li>Names of their required methods are stored in <code>'&lt;abc&gt;.__abstractmethods__'</code>.</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#enum","title":"Enum","text":"Python<pre><code>from enum import Enum, auto\n</code></pre> Python<pre><code>class &lt;enum_name&gt;(Enum):\n    &lt;member_name_1&gt; = &lt;value_1&gt;\n    &lt;member_name_2&gt; = &lt;value_2_a&gt;, &lt;value_2_b&gt;\n    &lt;member_name_3&gt; = auto()\n</code></pre> <ul> <li>If there are no numeric values before auto(), it returns 1.</li> <li>Otherwise it returns an increment of the last numeric value.</li> </ul> Python<pre><code>&lt;member&gt; = &lt;enum&gt;.&lt;member_name&gt;                 # Returns a member.\n&lt;member&gt; = &lt;enum&gt;['&lt;member_name&gt;']              # Returns a member or raises KeyError.\n&lt;member&gt; = &lt;enum&gt;(&lt;value&gt;)                      # Returns a member or raises ValueError.\n&lt;str&gt;    = &lt;member&gt;.name                        # Returns member's name.\n&lt;obj&gt;    = &lt;member&gt;.value                       # Returns member's value.\n</code></pre> Python<pre><code>list_of_members = list(&lt;enum&gt;)\nmember_names    = [a.name for a in &lt;enum&gt;]\nmember_values   = [a.value for a in &lt;enum&gt;]\nrandom_member   = random.choice(list(&lt;enum&gt;))\n</code></pre> Python<pre><code>def get_next_member(member):\n    members = list(member.__class__)\n    index   = (members.index(member) + 1) % len(members)\n    return members[index]\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#inline_2","title":"Inline","text":"Python<pre><code>Cutlery = Enum('Cutlery', 'fork knife spoon')\nCutlery = Enum('Cutlery', ['fork', 'knife', 'spoon'])\nCutlery = Enum('Cutlery', {'fork': 1, 'knife': 2, 'spoon': 3})\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#user-defined-functions-cannot-be-values-so-they-must-be-wrapped","title":"User-defined functions cannot be values, so they must be wrapped","text":"Python<pre><code>from functools import partial\nLogicOp = Enum('LogicOp', {'AND': partial(lambda l, r: l and r),\n                           'OR':  partial(lambda l, r: l or r)})\n</code></pre> <ul> <li>Member names are in all caps because trying to access a member that is named after a reserved keyword raises SyntaxError.</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#exceptions","title":"Exceptions","text":"Python<pre><code>try:\n    &lt;code&gt;\nexcept &lt;exception&gt;:\n    &lt;code&gt;\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#complex-example","title":"Complex Example","text":"Python<pre><code>try:\n    &lt;code_1&gt;\nexcept &lt;exception_a&gt;:\n    &lt;code_2_a&gt;\nexcept &lt;exception_b&gt;:\n    &lt;code_2_b&gt;\nelse:\n    &lt;code_2_c&gt;\nfinally:\n    &lt;code_3&gt;\n</code></pre> <ul> <li>Code inside the <code>'else'</code> block will only be executed if <code>'try'</code> block had no exceptions.</li> <li>Code inside the <code>'finally'</code> block will always be executed (unless a signal is received).</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#catching-exceptions","title":"Catching Exceptions","text":"Python<pre><code>except &lt;exception&gt;: ...\nexcept &lt;exception&gt; as &lt;name&gt;: ...\nexcept (&lt;exception&gt;, [...]): ...\nexcept (&lt;exception&gt;, [...]) as &lt;name&gt;: ...\n</code></pre> <ul> <li>Also catches subclasses of the exception.</li> <li>Use <code>'traceback.print_exc()'</code> to print the error message to stderr.</li> <li>Use <code>'print(&lt;name&gt;)'</code> to print just the cause of the exception (its arguments).</li> <li>Use <code>'logging.exception(&lt;message&gt;)'</code> to log the exception.</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#raising-exceptions","title":"Raising Exceptions","text":"Python<pre><code>raise &lt;exception&gt;\nraise &lt;exception&gt;()\nraise &lt;exception&gt;(&lt;el&gt; [, ...])\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#re-raising-caught-exception","title":"Re-raising caught exception","text":"Python<pre><code>except &lt;exception&gt; as &lt;name&gt;:\n    ...\n    raise\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#exception-object","title":"Exception Object","text":"Python<pre><code>arguments = &lt;name&gt;.args\nexc_type  = &lt;name&gt;.__class__\nfilename  = &lt;name&gt;.__traceback__.tb_frame.f_code.co_filename\nfunc_name = &lt;name&gt;.__traceback__.tb_frame.f_code.co_name\nline      = linecache.getline(filename, &lt;name&gt;.__traceback__.tb_lineno)\ntraceback = ''.join(traceback.format_tb(&lt;name&gt;.__traceback__))\nerror_msg = ''.join(traceback.format_exception(exc_type, &lt;name&gt;, &lt;name&gt;.__traceback__))\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#built-in-exceptions","title":"Built-in Exceptions","text":"Text Only<pre><code>BaseException\n +-- SystemExit                   # Raised by the sys.exit() function.\n +-- KeyboardInterrupt            # Raised when the user hits the interrupt key (ctrl-c).\n +-- Exception                    # User-defined exceptions should be derived from this class.\n      +-- ArithmeticError         # Base class for arithmetic errors.\n      |    +-- ZeroDivisionError  # Raised when dividing by zero.\n      +-- AssertionError          # Raised by `assert &lt;exp&gt;` if expression returns false value.\n      +-- AttributeError          # Raised when an attribute is missing.\n      +-- EOFError                # Raised by input() when it hits end-of-file condition.\n      +-- LookupError             # Raised when a look-up on a collection fails.\n      |    +-- IndexError         # Raised when a sequence index is out of range.\n      |    +-- KeyError           # Raised when a dictionary key or set element is missing.\n      +-- MemoryError             # Out of memory. Could be too late to start deleting vars.\n      +-- NameError               # Raised when an object is missing.\n      +-- OSError                 # Errors such as \u201cfile not found\u201d or \u201cdisk full\u201d (see Open).\n      |    +-- FileNotFoundError  # When a file or directory is requested but doesn't exist.\n      +-- RuntimeError            # Raised by errors that don't fall into other categories.\n      |    +-- RecursionError     # Raised when the maximum recursion depth is exceeded.\n      +-- StopIteration           # Raised by next() when run on an empty iterator.\n      +-- TypeError               # Raised when an argument is of wrong type.\n      +-- ValueError              # When an argument is of right type but inappropriate value.\n           +-- UnicodeError       # Raised when encoding/decoding strings to/from bytes fails.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#collections-and-their-exceptions","title":"Collections and their exceptions","text":"Text Only<pre><code>+-----------+------------+------------+------------+\n|           |    List    |    Set     |    Dict    |\n+-----------+------------+------------+------------+\n| getitem() | IndexError |            |  KeyError  |\n| pop()     | IndexError |  KeyError  |  KeyError  |\n| remove()  | ValueError |  KeyError  |            |\n| index()   | ValueError |            |            |\n+-----------+------------+------------+------------+\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#useful-built-in-exceptions","title":"Useful built-in exceptions","text":"Python<pre><code>raise TypeError('Argument is of wrong type!')\nraise ValueError('Argument is of right type but inappropriate value!')\nraise RuntimeError('None of above!')\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#user-defined-exceptions","title":"User-defined Exceptions","text":"Python<pre><code>class MyError(Exception): pass\nclass MyInputError(MyError): pass\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#exit","title":"Exit","text":"<p>Exits the interpreter by raising SystemExit exception.</p> Python<pre><code>import sys\nsys.exit()                        # Exits with exit code 0 (success).\nsys.exit(&lt;el&gt;)                    # Prints to stderr and exits with 1.\nsys.exit(&lt;int&gt;)                   # Exits with passed exit code.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#print","title":"Print","text":"Python<pre><code>print(&lt;el_1&gt;, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n</code></pre> <ul> <li>Use <code>'file=sys.stderr'</code> for messages about errors.</li> <li>Use <code>'flush=True'</code> to forcibly flush the stream.</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#pretty-print","title":"Pretty Print","text":"Python<pre><code>from pprint import pprint\npprint(&lt;collection&gt;, width=80, depth=None, compact=False, sort_dicts=True)\n</code></pre> <ul> <li>Levels deeper than 'depth' get replaced by '...'.</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#input","title":"Input","text":"<p>Reads a line from user input or pipe if present.</p> Python<pre><code>&lt;str&gt; = input(prompt=None)\n</code></pre> <ul> <li>Trailing newline gets stripped.</li> <li>Prompt string is printed to the standard output before reading input.</li> <li>Raises EOFError when user hits EOF (ctrl-d/ctrl-z\u23ce) or input stream gets exhausted.</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#command-line-arguments","title":"Command Line Arguments","text":"Python<pre><code>import sys\nscripts_path = sys.argv[0]\narguments    = sys.argv[1:]\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#argument-parser","title":"Argument Parser","text":"Python<pre><code>from argparse import ArgumentParser, FileType\np = ArgumentParser(description=&lt;str&gt;)\np.add_argument('-&lt;short_name&gt;', '--&lt;name&gt;', action='store_true')  # Flag.\np.add_argument('-&lt;short_name&gt;', '--&lt;name&gt;', type=&lt;type&gt;)          # Option.\np.add_argument('&lt;name&gt;', type=&lt;type&gt;, nargs=1)                    # First argument.\np.add_argument('&lt;name&gt;', type=&lt;type&gt;, nargs='+')                  # Remaining arguments.\np.add_argument('&lt;name&gt;', type=&lt;type&gt;, nargs='*')                  # Optional arguments.\nargs  = p.parse_args()                                            # Exits on error.\nvalue = args.&lt;name&gt;\n</code></pre> <ul> <li>Use <code>'help=&lt;str&gt;'</code> to set argument description that will be displayed in help message.</li> <li>Use <code>'default=&lt;el&gt;'</code> to set the default value.</li> <li>Use <code>'type=FileType(&lt;mode&gt;)'</code> for files. Accepts 'encoding', but 'newline' is None.</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#open","title":"Open","text":"<p>Opens the file and returns a corresponding file object.</p> Python<pre><code>&lt;file&gt; = open(&lt;path&gt;, mode='r', encoding=None, newline=None)\n</code></pre> <ul> <li><code>'encoding=None'</code> means that the default encoding is used, which is platform dependent. Best practice is to use <code>'encoding=\"utf-8\"'</code> whenever possible.</li> <li><code>'newline=None'</code> means all different end of line combinations are converted to 'n' on read, while on write all 'n' characters are converted to system's default line separator.</li> <li><code>'newline=\"\"'</code> means no conversions take place, but input is still broken into chunks by readline() and readlines() on every 'n', 'r' and 'rn'.</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#modes","title":"Modes","text":"<ul> <li><code>'r'</code> - Read (default).</li> <li><code>'w'</code> - Write (truncate).</li> <li><code>'x'</code> - Write or fail if the file already exists.</li> <li><code>'a'</code> - Append.</li> <li><code>'w+'</code> - Read and write (truncate).</li> <li><code>'r+'</code> - Read and write from the start.</li> <li><code>'a+'</code> - Read and write from the end.</li> <li><code>'t'</code> - Text mode (default).</li> <li><code>'b'</code> - Binary mode (<code>'br'</code>, <code>'bw'</code>, <code>'bx'</code>, ...).</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#exceptions_1","title":"Exceptions","text":"<ul> <li><code>'FileNotFoundError'</code> can be raised when reading with <code>'r'</code> or <code>'r+'</code>.</li> <li><code>'FileExistsError'</code> can be raised when writing with <code>'x'</code>.</li> <li><code>'IsADirectoryError'</code> and <code>'PermissionError'</code> can be raised by any.</li> <li><code>'OSError'</code> is the parent class of all listed exceptions.</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#file-object","title":"File Object","text":"Python<pre><code>&lt;file&gt;.seek(0)                      # Moves to the start of the file.\n&lt;file&gt;.seek(offset)                 # Moves 'offset' chars/bytes from the start.\n&lt;file&gt;.seek(0, 2)                   # Moves to the end of the file.\n&lt;bin_file&gt;.seek(\u00b1offset, &lt;anchor&gt;)  # Anchor: 0 start, 1 current position, 2 end.\n</code></pre> Python<pre><code>&lt;str/bytes&gt; = &lt;file&gt;.read(size=-1)  # Reads 'size' chars/bytes or until EOF.\n&lt;str/bytes&gt; = &lt;file&gt;.readline()     # Returns a line or empty string/bytes on EOF.\n&lt;list&gt;      = &lt;file&gt;.readlines()    # Returns a list of remaining lines.\n&lt;str/bytes&gt; = next(&lt;file&gt;)          # Returns a line using buffer. Do not mix.\n</code></pre> Python<pre><code>&lt;file&gt;.write(&lt;str/bytes&gt;)           # Writes a string or bytes object.\n&lt;file&gt;.writelines(&lt;collection&gt;)     # Writes a coll. of strings or bytes objects.\n&lt;file&gt;.flush()                      # Flushes write buffer. Runs every 4096/8192 B.\n</code></pre> <ul> <li>Methods do not add or strip trailing newlines, even writelines().</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#read-text-from-file","title":"Read Text from File","text":"Python<pre><code>def read_file(filename):\n    with open(filename, encoding='utf-8') as file:\n        return file.readlines()\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#write-text-to-file","title":"Write Text to File","text":"Python<pre><code>def write_to_file(filename, text):\n    with open(filename, 'w', encoding='utf-8') as file:\n        file.write(text)\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#paths","title":"Paths","text":"Python<pre><code>from os import getcwd, path, listdir, scandir\nfrom glob import glob\n</code></pre> Python<pre><code>&lt;str&gt;  = getcwd()                   # Returns the current working directory.\n&lt;str&gt;  = path.join(&lt;path&gt;, ...)     # Joins two or more pathname components.\n&lt;str&gt;  = path.abspath(&lt;path&gt;)       # Returns absolute path.\n</code></pre> Python<pre><code>&lt;str&gt;  = path.basename(&lt;path&gt;)      # Returns final component of the path.\n&lt;str&gt;  = path.dirname(&lt;path&gt;)       # Returns path without the final component.\n&lt;tup.&gt; = path.splitext(&lt;path&gt;)      # Splits on last period of the final component.\n</code></pre> Python<pre><code>&lt;list&gt; = listdir(path='.')          # Returns filenames located at path.\n&lt;list&gt; = glob('&lt;pattern&gt;')          # Returns paths matching the wildcard pattern.\n</code></pre> Python<pre><code>&lt;bool&gt; = path.exists(&lt;path&gt;)        # Or: &lt;Path&gt;.exists()\n&lt;bool&gt; = path.isfile(&lt;path&gt;)        # Or: &lt;DirEntry/Path&gt;.is_file()\n&lt;bool&gt; = path.isdir(&lt;path&gt;)         # Or: &lt;DirEntry/Path&gt;.is_dir()\n</code></pre> Python<pre><code>&lt;stat&gt; = os.stat(&lt;path&gt;)              # Or: &lt;DirEntry/Path&gt;.stat()\n&lt;real&gt; = &lt;stat&gt;.st_mtime/st_size/...  # Modification time, size in bytes, ...\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#direntry","title":"DirEntry","text":"<p>Unlike listdir(), scandir() returns DirEntry objects that cache isfile, isdir and on Windows also stat information, thus significantly increasing the performance of code that requires it.</p> Python<pre><code>&lt;iter&gt; = scandir(path='.')          # Returns DirEntry objects located at path.\n&lt;str&gt;  = &lt;DirEntry&gt;.path            # Returns whole path as a string.\n&lt;str&gt;  = &lt;DirEntry&gt;.name            # Returns final component as a string.\n&lt;file&gt; = open(&lt;DirEntry&gt;)           # Opens the file and returns a file object.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#path-object","title":"Path Object","text":"Python<pre><code>from pathlib import Path\n</code></pre> Python<pre><code>&lt;Path&gt; = Path(&lt;path&gt; [, ...])       # Accepts strings, Paths and DirEntry objects.\n&lt;Path&gt; = &lt;path&gt; / &lt;path&gt; [/ ...]    # First or second path must be a Path object.\n</code></pre> Python<pre><code>&lt;Path&gt; = Path()                     # Returns relative cwd. Also Path('.').\n&lt;Path&gt; = Path.cwd()                 # Returns absolute cwd. Also Path().resolve().\n&lt;Path&gt; = Path.home()                # Returns user's home directory (absolute).\n&lt;Path&gt; = Path(__file__).resolve()   # Returns script's path if cwd wasn't changed.\n</code></pre> Python<pre><code>&lt;Path&gt; = &lt;Path&gt;.parent              # Returns Path without the final component.\n&lt;str&gt;  = &lt;Path&gt;.name                # Returns final component as a string.\n&lt;str&gt;  = &lt;Path&gt;.stem                # Returns final component without extension.\n&lt;str&gt;  = &lt;Path&gt;.suffix              # Returns final component's extension.\n&lt;tup.&gt; = &lt;Path&gt;.parts               # Returns all components as strings.\n</code></pre> Python<pre><code>&lt;iter&gt; = &lt;Path&gt;.iterdir()           # Returns directory contents as Path objects.\n&lt;iter&gt; = &lt;Path&gt;.glob('&lt;pattern&gt;')   # Returns Paths matching the wildcard pattern.\n</code></pre> Python<pre><code>&lt;str&gt;  = str(&lt;Path&gt;)                # Returns path as a string.\n&lt;file&gt; = open(&lt;Path&gt;)               # Also &lt;Path&gt;.read/write_text/bytes().\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#os-commands","title":"OS Commands","text":"Python<pre><code>import os, shutil, subprocess\n</code></pre> Python<pre><code>os.chdir(&lt;path&gt;)                 # Changes the current working directory.\nos.mkdir(&lt;path&gt;, mode=0o777)     # Creates a directory. Mode is in octal.\nos.makedirs(&lt;path&gt;, mode=0o777)  # Creates all path's dirs. Also: `exist_ok=False`.\n</code></pre> Python<pre><code>shutil.copy(from, to)            # Copies the file. 'to' can exist or be a dir.\nshutil.copytree(from, to)        # Copies the directory. 'to' must not exist.\n</code></pre> Python<pre><code>os.rename(from, to)              # Renames/moves the file or directory.\nos.replace(from, to)             # Same, but overwrites 'to' if it exists.\n</code></pre> Python<pre><code>os.remove(&lt;path&gt;)                # Deletes the file.\nos.rmdir(&lt;path&gt;)                 # Deletes the empty directory.\nshutil.rmtree(&lt;path&gt;)            # Deletes the directory.\n</code></pre> <ul> <li>Paths can be either strings, Paths or DirEntry objects.</li> <li>Functions report OS related errors by raising either OSError or one of its subclasses.</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#shell-commands","title":"Shell Commands","text":"Python<pre><code>&lt;pipe&gt; = os.popen('&lt;command&gt;')   # Executes command in sh/cmd and returns its stdout pipe.\n&lt;str&gt;  = &lt;pipe&gt;.read(size=-1)    # Reads 'size' chars or until EOF. Also readline/s().\n&lt;int&gt;  = &lt;pipe&gt;.close()          # Closes the pipe. Returns None on success, int on error.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#sends-1--1-to-the-basic-calculator-and-captures-its-output","title":"Sends '1 + 1' to the basic calculator and captures its output","text":"Python<pre><code>&gt;&gt;&gt; subprocess.run('bc', input='1 + 1\\n', capture_output=True, text=True)\nCompletedProcess(args='bc', returncode=0, stdout='2\\n', stderr='')\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#sends-testin-to-the-basic-calculator-running-in-standard-mode-and-saves-its-output-to-testout","title":"Sends test.in to the basic calculator running in standard mode and saves its output to test.out","text":"Python<pre><code>&gt;&gt;&gt; from shlex import split\n&gt;&gt;&gt; os.popen('echo 1 + 1 &gt; test.in')\n&gt;&gt;&gt; subprocess.run(split('bc -s'), stdin=open('test.in'), stdout=open('test.out', 'w'))\nCompletedProcess(args=['bc', '-s'], returncode=0)\n&gt;&gt;&gt; open('test.out').read()\n'2\\n'\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#json","title":"JSON","text":"<p>Text file format for storing collections of strings and numbers.</p> Python<pre><code>import json\n&lt;str&gt;    = json.dumps(&lt;object&gt;)    # Converts object to JSON string.\n&lt;object&gt; = json.loads(&lt;str&gt;)       # Converts JSON string to object.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#read-object-from-json-file","title":"Read Object from JSON File","text":"Python<pre><code>def read_json_file(filename):\n    with open(filename, encoding='utf-8') as file:\n        return json.load(file)\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#write-object-to-json-file","title":"Write Object to JSON File","text":"Python<pre><code>def write_to_json_file(filename, an_object):\n    with open(filename, 'w', encoding='utf-8') as file:\n        json.dump(an_object, file, ensure_ascii=False, indent=2)\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#pickle","title":"Pickle","text":"<p>Binary file format for storing Python objects.</p> Python<pre><code>import pickle\n&lt;bytes&gt;  = pickle.dumps(&lt;object&gt;)  # Converts object to bytes object.\n&lt;object&gt; = pickle.loads(&lt;bytes&gt;)   # Converts bytes object to object.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#read-object-from-file","title":"Read Object from File","text":"Python<pre><code>def read_pickle_file(filename):\n    with open(filename, 'rb') as file:\n        return pickle.load(file)\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#write-object-to-file","title":"Write Object to File","text":"Python<pre><code>def write_to_pickle_file(filename, an_object):\n    with open(filename, 'wb') as file:\n        pickle.dump(an_object, file)\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#csv","title":"CSV","text":"<p>Text file format for storing spreadsheets.</p> Python<pre><code>import csv\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#read","title":"Read","text":"Python<pre><code>&lt;reader&gt; = csv.reader(&lt;file&gt;)       # Also: `dialect='excel', delimiter=','`.\n&lt;list&gt;   = next(&lt;reader&gt;)           # Returns next row as a list of strings.\n&lt;list&gt;   = list(&lt;reader&gt;)           # Returns a list of remaining rows.\n</code></pre> <ul> <li>File must be opened with a <code>'newline=\"\"'</code> argument, or newlines embedded inside quoted fields will not be interpreted correctly!</li> <li>To print the spreadsheet to the console use Tabulate library.</li> <li>For XML and binary Excel files (xlsx, xlsm and xlsb) use Pandas library.</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#write","title":"Write","text":"Python<pre><code>&lt;writer&gt; = csv.writer(&lt;file&gt;)       # Also: `dialect='excel', delimiter=','`.\n&lt;writer&gt;.writerow(&lt;collection&gt;)     # Encodes objects using `str(&lt;el&gt;)`.\n&lt;writer&gt;.writerows(&lt;coll_of_coll&gt;)  # Appends multiple rows.\n</code></pre> <ul> <li>File must be opened with a <code>'newline=\"\"'</code> argument, or 'r' will be added in front of every 'n' on platforms that use 'rn' line endings!</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#parameters","title":"Parameters","text":"<ul> <li><code>'dialect'</code> - Master parameter that sets the default values. String or a Dialect object.</li> <li><code>'delimiter'</code> - A one-character string used to separate fields.</li> <li><code>'quotechar'</code> - Character for quoting fields that contain special characters.</li> <li><code>'doublequote'</code> - Whether quotechars inside fields are/get doubled or escaped.</li> <li><code>'skipinitialspace'</code> - Is space character at the start of the field stripped by the reader.</li> <li><code>'lineterminator'</code> - How writer terminates rows. Reader is hardcoded to 'n', 'r', 'rn'.</li> <li><code>'quoting'</code> - 0: As necessary, 1: All, 2: All but numbers which are read as floats, 3: None.</li> <li><code>'escapechar'</code> - Character for escaping quotechars if doublequote is False.</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#dialects","title":"Dialects","text":"Text Only<pre><code>+------------------+--------------+--------------+--------------+\n|                  |     excel    |   excel-tab  |     unix     |\n+------------------+--------------+--------------+--------------+\n| delimiter        |       ','    |      '\\t'    |       ','    |\n| quotechar        |       '\"'    |       '\"'    |       '\"'    |\n| doublequote      |      True    |      True    |      True    |\n| skipinitialspace |     False    |     False    |     False    |\n| lineterminator   |    '\\r\\n'    |    '\\r\\n'    |      '\\n'    |\n| quoting          |         0    |         0    |         1    |\n| escapechar       |      None    |      None    |      None    |\n+------------------+--------------+--------------+--------------+\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#read-rows-from-csv-file","title":"Read Rows from CSV File","text":"Python<pre><code>def read_csv_file(filename, dialect='excel'):\n    with open(filename, encoding='utf-8', newline='') as file:\n        return list(csv.reader(file, dialect))\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#write-rows-to-csv-file","title":"Write Rows to CSV File","text":"Python<pre><code>def write_to_csv_file(filename, rows, dialect='excel'):\n    with open(filename, 'w', encoding='utf-8', newline='') as file:\n        writer = csv.writer(file, dialect)\n        writer.writerows(rows)\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#sqlite","title":"SQLite","text":"<p>A server-less database engine that stores each database into a separate file.</p>"},{"location":"dev-notes/python/py-cheatsheet/#connect","title":"Connect","text":"<p>Opens a connection to the database file. Creates a new file if path doesn't exist.</p> Python<pre><code>import sqlite3\n&lt;conn&gt; = sqlite3.connect(&lt;path&gt;)                # Also ':memory:'.\n&lt;conn&gt;.close()                                  # Closes the connection.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#read_1","title":"Read","text":"<p>Returned values can be of type str, int, float, bytes or None.</p> Python<pre><code>&lt;cursor&gt; = &lt;conn&gt;.execute('&lt;query&gt;')            # Can raise a subclass of sqlite3.Error.\n&lt;tuple&gt;  = &lt;cursor&gt;.fetchone()                  # Returns next row. Also next(&lt;cursor&gt;).\n&lt;list&gt;   = &lt;cursor&gt;.fetchall()                  # Returns remaining rows. Also list(&lt;cursor&gt;).\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#write_1","title":"Write","text":"Python<pre><code>&lt;conn&gt;.execute('&lt;query&gt;')                       # Can raise a subclass of sqlite3.Error.\n&lt;conn&gt;.commit()                                 # Saves all changes since the last commit.\n&lt;conn&gt;.rollback()                               # Discards all changes since the last commit.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#or","title":"Or","text":"Python<pre><code>with &lt;conn&gt;:                                    # Exits the block with commit() or rollback(),\n    &lt;conn&gt;.execute('&lt;query&gt;')                   # depending on whether any exception occurred.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#placeholders","title":"Placeholders","text":"<ul> <li>Passed values can be of type str, int, float, bytes, None, bool, datetime.date or datetime.datetime.</li> <li>Bools will be stored and returned as ints and dates as ISO formatted strings.</li> </ul> Python<pre><code>&lt;conn&gt;.execute('&lt;query&gt;', &lt;list/tuple&gt;)         # Replaces '?'s in query with values.\n&lt;conn&gt;.execute('&lt;query&gt;', &lt;dict/namedtuple&gt;)    # Replaces ':&lt;key&gt;'s with values.\n&lt;conn&gt;.executemany('&lt;query&gt;', &lt;coll_of_above&gt;)  # Runs execute() multiple times.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#example","title":"Example","text":"<p>Values are not actually saved in this example because <code>'conn.commit()'</code> is omitted!</p> Python<pre><code>&gt;&gt;&gt; conn = sqlite3.connect('test.db')\n&gt;&gt;&gt; conn.execute('CREATE TABLE person (person_id INTEGER PRIMARY KEY, name, height)')\n&gt;&gt;&gt; conn.execute('INSERT INTO person VALUES (NULL, ?, ?)', ('Jean-Luc', 187)).lastrowid\n1\n&gt;&gt;&gt; conn.execute('SELECT * FROM person').fetchall()\n[(1, 'Jean-Luc', 187)]\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#mysql","title":"MySQL","text":"<p>Has a very similar interface, with differences listed below.</p> Python<pre><code># $ pip3 install mysql-connector\nfrom mysql import connector\n&lt;conn&gt;   = connector.connect(host=&lt;str&gt;, ...)   # `user=&lt;str&gt;, password=&lt;str&gt;, database=&lt;str&gt;`.\n&lt;cursor&gt; = &lt;conn&gt;.cursor()                      # Only cursor has execute() method.\n&lt;cursor&gt;.execute('&lt;query&gt;')                     # Can raise a subclass of connector.Error.\n&lt;cursor&gt;.execute('&lt;query&gt;', &lt;list/tuple&gt;)       # Replaces '%s's in query with values.\n&lt;cursor&gt;.execute('&lt;query&gt;', &lt;dict/namedtuple&gt;)  # Replaces '%(&lt;key&gt;)s's with values.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#bytes","title":"Bytes","text":"<p>Bytes object is an immutable sequence of single bytes. Mutable version is called bytearray.</p> Python<pre><code>&lt;bytes&gt; = b'&lt;str&gt;'                          # Only accepts ASCII characters and \\x00-\\xff.\n&lt;int&gt;   = &lt;bytes&gt;[&lt;index&gt;]                  # Returns an int in range from 0 to 255.\n&lt;bytes&gt; = &lt;bytes&gt;[&lt;slice&gt;]                  # Returns bytes even if it has only one element.\n&lt;bytes&gt; = &lt;bytes&gt;.join(&lt;coll_of_bytes&gt;)     # Joins elements using bytes as a separator.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#encode_1","title":"Encode","text":"Python<pre><code>&lt;bytes&gt; = bytes(&lt;coll_of_ints&gt;)             # Ints must be in range from 0 to 255.\n&lt;bytes&gt; = bytes(&lt;str&gt;, 'utf-8')             # Or: &lt;str&gt;.encode('utf-8')\n&lt;bytes&gt; = &lt;int&gt;.to_bytes(n_bytes, ...)      # `byteorder='little/big', signed=False`.\n&lt;bytes&gt; = bytes.fromhex('&lt;hex&gt;')            # Hex pairs can be separated by whitespaces.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#decode_1","title":"Decode","text":"Python<pre><code>&lt;list&gt;  = list(&lt;bytes&gt;)                     # Returns ints in range from 0 to 255.\n&lt;str&gt;   = str(&lt;bytes&gt;, 'utf-8')             # Or: &lt;bytes&gt;.decode('utf-8')\n&lt;int&gt;   = int.from_bytes(&lt;bytes&gt;, ...)      # `byteorder='little/big', signed=False`.\n'&lt;hex&gt;' = &lt;bytes&gt;.hex()                     # Returns hex pairs. Accepts `sep=&lt;str&gt;`.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#read-bytes-from-file","title":"Read Bytes from File","text":"Python<pre><code>def read_bytes(filename):\n    with open(filename, 'rb') as file:\n        return file.read()\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#write-bytes-to-file","title":"Write Bytes to File","text":"Python<pre><code>def write_bytes(filename, bytes_obj):\n    with open(filename, 'wb') as file:\n        file.write(bytes_obj)\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#struct","title":"Struct","text":"<ul> <li>Module that performs conversions between a sequence of numbers and a bytes object.</li> <li>System\u2019s type sizes, byte order, and alignment rules are used by default.</li> </ul> Python<pre><code>from struct import pack, unpack\n&lt;bytes&gt; = pack('&lt;format&gt;', &lt;el_1&gt; [, ...])  # Packages arguments into bytes object.\n&lt;tuple&gt; = unpack('&lt;format&gt;', &lt;bytes&gt;)       # Use iter_unpack() for iterator of tuples.\n</code></pre> Python<pre><code>&gt;&gt;&gt; pack('&gt;hhl', 1, 2, 3)\nb'\\x00\\x01\\x00\\x02\\x00\\x00\\x00\\x03'\n&gt;&gt;&gt; unpack('&gt;hhl', b'\\x00\\x01\\x00\\x02\\x00\\x00\\x00\\x03')\n(1, 2, 3)\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#format_2","title":"Format","text":""},{"location":"dev-notes/python/py-cheatsheet/#for-standard-type-sizes-and-manual-alignment-padding-start-format-string-with","title":"For standard type sizes and manual alignment (padding) start format string with","text":"<ul> <li><code>'='</code> - System's byte order (usually little-endian).</li> <li><code>'&lt;'</code> - Little-endian.</li> <li><code>'&gt;'</code> - Big-endian (also <code>'!'</code>).</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#besides-numbers-pack-and-unpack-also-support-bytes-objects-as-part-of-the-sequence","title":"Besides numbers, pack() and unpack() also support bytes objects as part of the sequence","text":"<ul> <li><code>'c'</code> - A bytes object with a single element. For pad byte use <code>'x'</code>.</li> <li><code>'&lt;n&gt;s'</code> - A bytes object with n elements.</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#integer-types-use-a-capital-letter-for-unsigned-type-minimum-and-standard-sizes-are-in-brackets","title":"Integer types. Use a capital letter for unsigned type. Minimum and standard sizes are in brackets","text":"<ul> <li><code>'b'</code> - char (1/1)</li> <li><code>'h'</code> - short (2/2)</li> <li><code>'i'</code> - int (2/4)</li> <li><code>'l'</code> - long (4/4)</li> <li><code>'q'</code> - long long (8/8)</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#floating-point-types","title":"Floating point types","text":"<ul> <li><code>'f'</code> - float (4/4)</li> <li><code>'d'</code> - double (8/8)</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#array","title":"Array","text":"<p>List that can only hold numbers of a predefined type. Available types and their minimum sizes in bytes are listed above. Sizes and byte order are always determined by the system.</p> Python<pre><code>from array import array\n&lt;array&gt; = array('&lt;typecode&gt;', &lt;collection&gt;)    # Array from collection of numbers.\n&lt;array&gt; = array('&lt;typecode&gt;', &lt;bytes&gt;)         # Array from bytes object.\n&lt;array&gt; = array('&lt;typecode&gt;', &lt;array&gt;)         # Treats array as a sequence of numbers.\n&lt;bytes&gt; = bytes(&lt;array&gt;)                       # Or: &lt;array&gt;.tobytes()\n&lt;file&gt;.write(&lt;array&gt;)                          # Writes array to the binary file.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#memory-view","title":"Memory View","text":"<ul> <li>A sequence object that points to the memory of another object.</li> <li>Each element can reference a single or multiple consecutive bytes, depending on format.</li> <li>Order and number of elements can be changed with slicing.</li> <li>Casting only works between char and other types and uses system's sizes.</li> <li>Byte order is always determined by the system.</li> </ul> Python<pre><code>&lt;mview&gt; = memoryview(&lt;bytes/bytearray/array&gt;)  # Immutable if bytes, else mutable.\n&lt;real&gt;  = &lt;mview&gt;[&lt;index&gt;]                     # Returns an int or a float.\n&lt;mview&gt; = &lt;mview&gt;[&lt;slice&gt;]                     # Mview with rearranged elements.\n&lt;mview&gt; = &lt;mview&gt;.cast('&lt;typecode&gt;')           # Casts memoryview to the new format.\n&lt;mview&gt;.release()                              # Releases the object's memory buffer.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#decode_2","title":"Decode","text":"Python<pre><code>&lt;bytes&gt; = bytes(&lt;mview&gt;)                       # Returns a new bytes object.\n&lt;bytes&gt; = &lt;bytes&gt;.join(&lt;coll_of_mviews&gt;)       # Joins mviews using bytes object as sep.\n&lt;array&gt; = array('&lt;typecode&gt;', &lt;mview&gt;)         # Treats mview as a sequence of numbers.\n&lt;file&gt;.write(&lt;mview&gt;)                          # Writes mview to the binary file.\n</code></pre> Python<pre><code>&lt;list&gt;  = list(&lt;mview&gt;)                        # Returns a list of ints or floats.\n&lt;str&gt;   = str(&lt;mview&gt;, 'utf-8')                # Treats mview as a bytes object.\n&lt;int&gt;   = int.from_bytes(&lt;mview&gt;, ...)         # `byteorder='little/big', signed=False`.\n'&lt;hex&gt;' = &lt;mview&gt;.hex()                        # Treats mview as a bytes object.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#deque","title":"Deque","text":"<p>A thread-safe list with efficient appends and pops from either side. Pronounced \"deck\".</p> Python<pre><code>from collections import deque\n&lt;deque&gt; = deque(&lt;collection&gt;, maxlen=None)\n</code></pre> Python<pre><code>&lt;deque&gt;.appendleft(&lt;el&gt;)                       # Opposite element is dropped if full.\n&lt;deque&gt;.extendleft(&lt;collection&gt;)               # Collection gets reversed.\n&lt;el&gt; = &lt;deque&gt;.popleft()                       # Raises IndexError if empty.\n&lt;deque&gt;.rotate(n=1)                            # Rotates elements to the right.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#threading","title":"Threading","text":"<ul> <li>CPython interpreter can only run a single thread at a time.</li> <li>That is why using multiple threads won't result in a faster execution, unless at least one of the threads contains an I/O operation.</li> </ul> Python<pre><code>from threading import Thread, RLock, Semaphore, Event, Barrier\nfrom concurrent.futures import ThreadPoolExecutor\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#thread","title":"Thread","text":"Python<pre><code>&lt;Thread&gt; = Thread(target=&lt;function&gt;)           # Use `args=&lt;collection&gt;` to set the arguments.\n&lt;Thread&gt;.start()                               # Starts the thread.\n&lt;bool&gt; = &lt;Thread&gt;.is_alive()                   # Checks if the thread has finished executing.\n&lt;Thread&gt;.join()                                # Waits for the thread to finish.\n</code></pre> <ul> <li>Use <code>'kwargs=&lt;dict&gt;'</code> to pass keyword arguments to the function.</li> <li>Use <code>'daemon=True'</code>, or the program will not be able to exit while the thread is alive.</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#lock","title":"Lock","text":"Python<pre><code>&lt;lock&gt; = RLock()                               # Lock that can only be released by acquirer.\n&lt;lock&gt;.acquire()                               # Waits for the lock to be available.\n&lt;lock&gt;.release()                               # Makes the lock available again.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#or_1","title":"Or","text":"Python<pre><code>with &lt;lock&gt;:                                   # Enters the block by calling acquire(),\n    ...                                        # and exits it with release().\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#semaphore-event-barrier","title":"Semaphore, Event, Barrier","text":"Python<pre><code>&lt;Semaphore&gt; = Semaphore(value=1)               # Lock that can be acquired by 'value' threads.\n&lt;Event&gt;     = Event()                          # Method wait() blocks until set() is called.\n&lt;Barrier&gt;   = Barrier(n_times)                 # Wait() blocks until it's called n_times.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#thread-pool-executor","title":"Thread Pool Executor","text":"<ul> <li>Object that manages thread execution.</li> <li>An object with the same interface called ProcessPoolExecutor provides true parallelism by running a separate interpreter in each process. All arguments must be pickable.</li> </ul> Python<pre><code>&lt;Exec&gt; = ThreadPoolExecutor(max_workers=None)  # Or: `with ThreadPoolExecutor() as &lt;name&gt;: ...`\n&lt;Exec&gt;.shutdown(wait=True)                     # Blocks until all threads finish executing.\n</code></pre> Python<pre><code>&lt;iter&gt; = &lt;Exec&gt;.map(&lt;func&gt;, &lt;args_1&gt;, ...)     # A multithreaded and non-lazy map().\n&lt;Futr&gt; = &lt;Exec&gt;.submit(&lt;func&gt;, &lt;arg_1&gt;, ...)   # Starts a thread and returns its Future object.\n&lt;bool&gt; = &lt;Futr&gt;.done()                         # Checks if the thread has finished executing.\n&lt;obj&gt;  = &lt;Futr&gt;.result()                       # Waits for thread to finish and returns result.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#queue","title":"Queue","text":"<p>A thread-safe FIFO queue. For LIFO queue use LifoQueue.</p> Python<pre><code>from queue import Queue\n&lt;Queue&gt; = Queue(maxsize=0)\n</code></pre> Python<pre><code>&lt;Queue&gt;.put(&lt;el&gt;)                              # Blocks until queue stops being full.\n&lt;Queue&gt;.put_nowait(&lt;el&gt;)                       # Raises queue.Full exception if full.\n&lt;el&gt; = &lt;Queue&gt;.get()                           # Blocks until queue stops being empty.\n&lt;el&gt; = &lt;Queue&gt;.get_nowait()                    # Raises queue.Empty exception if empty.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#operator","title":"Operator","text":"<p>Module of functions that provide the functionality of operators.</p> Python<pre><code>import operator as op\n&lt;el&gt;      = op.add/sub/mul/truediv/floordiv/mod(&lt;el&gt;, &lt;el&gt;)  # +, -, *, /, //, %\n&lt;int/set&gt; = op.and_/or_/xor(&lt;int/set&gt;, &lt;int/set&gt;)            # &amp;, |, ^\n&lt;bool&gt;    = op.eq/ne/lt/le/gt/ge(&lt;sortable&gt;, &lt;sortable&gt;)     # ==, !=, &lt;, &lt;=, &gt;, &gt;=\n&lt;func&gt;    = op.itemgetter/attrgetter/methodcaller(&lt;obj&gt;)     # [index/key], .name, .name()\n</code></pre> Python<pre><code>elementwise_sum  = map(op.add, list_a, list_b)\nsorted_by_second = sorted(&lt;collection&gt;, key=op.itemgetter(1))\nsorted_by_both   = sorted(&lt;collection&gt;, key=op.itemgetter(1, 0))\nproduct_of_elems = functools.reduce(op.mul, &lt;collection&gt;)\nunion_of_sets    = functools.reduce(op.or_, &lt;coll_of_sets&gt;)\nfirst_element    = op.methodcaller('pop', 0)(&lt;list&gt;)\n</code></pre> <ul> <li>Binary operators require objects to have and(), or(), xor() and invert() special methods, unlike logical operators that work on all types of objects.</li> <li>Also: <code>'&lt;bool&gt; = &lt;bool&gt; &amp;|^ &lt;bool&gt;'</code> and <code>'&lt;int&gt; = &lt;bool&gt; &amp;|^ &lt;int&gt;'</code>.</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#introspection","title":"Introspection","text":"<p>Inspecting code at runtime.</p>"},{"location":"dev-notes/python/py-cheatsheet/#variables","title":"Variables","text":"Python<pre><code>&lt;list&gt; = dir()                             # Names of local variables (incl. functions).\n&lt;dict&gt; = vars()                            # Dict of local variables. Also locals().\n&lt;dict&gt; = globals()                         # Dict of global variables.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#attributes_1","title":"Attributes","text":"Python<pre><code>&lt;list&gt; = dir(&lt;object&gt;)                     # Names of object's attributes (incl. methods).\n&lt;dict&gt; = vars(&lt;object&gt;)                    # Dict of writable attributes. Also &lt;obj&gt;.__dict__.\n&lt;bool&gt; = hasattr(&lt;object&gt;, '&lt;attr_name&gt;')  # Checks if getattr() raises an AttributeError.\nvalue  = getattr(&lt;object&gt;, '&lt;attr_name&gt;')  # Raises AttributeError if attribute is missing.\nsetattr(&lt;object&gt;, '&lt;attr_name&gt;', value)    # Only works on objects with '__dict__' attribute.\ndelattr(&lt;object&gt;, '&lt;attr_name&gt;')           # Same. Also `del &lt;object&gt;.&lt;attr_name&gt;`.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#parameters_1","title":"Parameters","text":"Python<pre><code>&lt;Sig&gt;  = inspect.signature(&lt;function&gt;)     # Function's Signature object.\n&lt;dict&gt; = &lt;Sig&gt;.parameters                  # Dict of Parameter objects.\n&lt;memb&gt; = &lt;Param&gt;.kind                      # Member of ParameterKind enum.\n&lt;obj&gt;  = &lt;Param&gt;.default                   # Default value or &lt;Param&gt;.empty.\n&lt;type&gt; = &lt;Param&gt;.annotation                # Type or &lt;Param&gt;.empty.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#metaprogramming","title":"Metaprogramming","text":"<p>Code that generates code.</p>"},{"location":"dev-notes/python/py-cheatsheet/#type_1","title":"Type","text":"<p>Type is the root class. If only passed an object it returns its type (class). Otherwise it creates a new class.</p> Python<pre><code>&lt;class&gt; = type('&lt;class_name&gt;', &lt;tuple_of_parents&gt;, &lt;dict_of_class_attributes&gt;)\n</code></pre> Python<pre><code>&gt;&gt;&gt; Z = type('Z', (), {'a': 'abcde', 'b': 12345})\n&gt;&gt;&gt; z = Z()\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#meta-class","title":"Meta Class","text":"<p>A class that creates classes.</p> Python<pre><code>def my_meta_class(name, parents, attrs):\n    attrs['a'] = 'abcde'\n    return type(name, parents, attrs)\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#or_2","title":"Or","text":"Python<pre><code>class MyMetaClass(type):\n    def __new__(cls, name, parents, attrs):\n        attrs['a'] = 'abcde'\n        return type.__new__(cls, name, parents, attrs)\n</code></pre> <ul> <li>New() is a class method that gets called before init(). If it returns an instance of its class, then that instance gets passed to init() as a 'self' argument.</li> <li>It receives the same arguments as init(), except for the first one that specifies the desired type of the returned instance (MyMetaClass in our case).</li> <li>Like in our case, new() can also be called directly, usually from a new() method of a child class (<code>def __new__(cls): return super().__new__(cls)</code>).</li> <li>The only difference between the examples above is that my_meta_class() returns a class of type type, while MyMetaClass() returns a class of type MyMetaClass.</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#metaclass-attribute","title":"Metaclass Attribute","text":"<p>Right before a class is created it checks if it has the 'metaclass' attribute defined. If not, it recursively checks if any of his parents has it defined and eventually comes to type().</p> Python<pre><code>class MyClass(metaclass=MyMetaClass):\n    b = 12345\n</code></pre> Python<pre><code>&gt;&gt;&gt; MyClass.a, MyClass.b\n('abcde', 12345)\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#type-diagram","title":"Type Diagram","text":"Python<pre><code>type(MyClass) == MyMetaClass         # MyClass is an instance of MyMetaClass.\ntype(MyMetaClass) == type            # MyMetaClass is an instance of type.\n</code></pre> Text Only<pre><code>+-------------+-------------+\n|   Classes   | Metaclasses |\n+-------------+-------------|\n|   MyClass --&gt; MyMetaClass |\n|             |     v       |\n|    object -----&gt; type &lt;+  |\n|             |     ^ +--+  |\n|     str ----------+       |\n+-------------+-------------+\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#inheritance-diagram","title":"Inheritance Diagram","text":"Python<pre><code>MyClass.__base__ == object           # MyClass is a subclass of object.\nMyMetaClass.__base__ == type         # MyMetaClass is a subclass of type.\n</code></pre> Text Only<pre><code>+-------------+-------------+\n|   Classes   | Metaclasses |\n+-------------+-------------|\n|   MyClass   | MyMetaClass |\n|      v      |     v       |\n|    object &lt;----- type     |\n|      ^      |             |\n|     str     |             |\n+-------------+-------------+\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#eval","title":"Eval","text":"Python<pre><code>&gt;&gt;&gt; from ast import literal_eval\n&gt;&gt;&gt; literal_eval('[1, 2, 3]')\n[1, 2, 3]\n&gt;&gt;&gt; literal_eval('1 + 2')\nValueError: malformed node or string\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#coroutines","title":"Coroutines","text":"<ul> <li>Coroutines have a lot in common with threads, but unlike threads, they only give up control when they call another coroutine and they don\u2019t use as much memory.</li> <li>Coroutine definition starts with <code>'async'</code> and its call with <code>'await'</code>.</li> <li><code>'asyncio.run(&lt;coroutine&gt;)'</code> is the main entry point for asynchronous programs.</li> <li>Functions wait(), gather() and as_completed() can be used when multiple coroutines need to be started at the same time.</li> <li>Asyncio module also provides its own Queue, Event, Lock and Semaphore classes.</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#runs-a-terminal-game-where-you-control-an-asterisk-that-must-avoid-numbers","title":"Runs a terminal game where you control an asterisk that must avoid numbers","text":"Python<pre><code>import asyncio, collections, curses, curses.textpad, enum, random\n\nP = collections.namedtuple('P', 'x y')         # Position\nD = enum.Enum('D', 'n e s w')                  # Direction\nW, H = 15, 7                                   # Width, Height\n\ndef main(screen):\n    curses.curs_set(0)                         # Makes cursor invisible.\n    screen.nodelay(True)                       # Makes getch() non-blocking.\n    asyncio.run(main_coroutine(screen))        # Starts running asyncio code.\n\nasync def main_coroutine(screen):\n    state = {'*': P(0, 0), **{id_: P(W//2, H//2) for id_ in range(10)}}\n    moves = asyncio.Queue()\n    coros = (*(random_controller(id_, moves) for id_ in range(10)),\n             human_controller(screen, moves), model(moves, state), view(state, screen))\n    await asyncio.wait(coros, return_when=asyncio.FIRST_COMPLETED)\n\nasync def random_controller(id_, moves):\n    while True:\n        d = random.choice(list(D))\n        moves.put_nowait((id_, d))\n        await asyncio.sleep(random.triangular(0.01, 0.65))\n\nasync def human_controller(screen, moves):\n    while True:\n        ch = screen.getch()\n        key_mappings = {258: D.s, 259: D.n, 260: D.w, 261: D.e}\n        if ch in key_mappings:\n            moves.put_nowait(('*', key_mappings[ch]))\n        await asyncio.sleep(0.005)\n\nasync def model(moves, state):\n    while state['*'] not in (state[id_] for id_ in range(10)):\n        id_, d = await moves.get()\n        x, y   = state[id_]\n        deltas = {D.n: P(0, -1), D.e: P(1, 0), D.s: P(0, 1), D.w: P(-1, 0)}\n        state[id_] = P((x + deltas[d].x) % W, (y + deltas[d].y) % H)\n\nasync def view(state, screen):\n    offset = P(curses.COLS//2 - W//2, curses.LINES//2 - H//2)\n    while True:\n        screen.erase()\n        curses.textpad.rectangle(screen, offset.y-1, offset.x-1, offset.y+H, offset.x+W)\n        for id_, p in state.items():\n            screen.addstr(offset.y + (p.y - state['*'].y + H//2) % H,\n                          offset.x + (p.x - state['*'].x + W//2) % W, str(id_))\n        await asyncio.sleep(0.005)\n\nif __name__ == '__main__':\n    curses.wrapper(main)\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#libraries","title":"Libraries","text":""},{"location":"dev-notes/python/py-cheatsheet/#progress-bar","title":"Progress Bar","text":"Python<pre><code># $ pip3 install tqdm\n&gt;&gt;&gt; from tqdm import tqdm\n&gt;&gt;&gt; from time import sleep\n&gt;&gt;&gt; for el in tqdm([1, 2, 3], desc='Processing'):\n...     sleep(1)\nProcessing: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3/3 [00:03&lt;00:00,  1.00s/it]\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#plot","title":"Plot","text":"Python<pre><code># $ pip3 install matplotlib\nimport matplotlib.pyplot as plt\nplt.plot(&lt;x_data&gt;, &lt;y_data&gt; [, label=&lt;str&gt;])   # Or: plt.plot(&lt;y_data&gt;)\nplt.legend()                                   # Adds a legend.\nplt.savefig(&lt;path&gt;)                            # Saves the figure.\nplt.show()                                     # Displays the figure.\nplt.clf()                                      # Clears the figure.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#table","title":"Table","text":""},{"location":"dev-notes/python/py-cheatsheet/#prints-a-csv-file-as-an-ascii-table","title":"Prints a CSV file as an ASCII table","text":"Python<pre><code># $ pip3 install tabulate\nimport csv, tabulate\nwith open('test.csv', encoding='utf-8', newline='') as file:\n    rows   = csv.reader(file)\n    header = next(rows)\n    table  = tabulate.tabulate(rows, header)\nprint(table)\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#curses","title":"Curses","text":""},{"location":"dev-notes/python/py-cheatsheet/#runs-a-basic-file-explorer-in-the-terminal","title":"Runs a basic file explorer in the terminal","text":"Python<pre><code>from curses import wrapper, ascii, A_REVERSE, KEY_DOWN, KEY_UP, KEY_LEFT, KEY_RIGHT, KEY_ENTER\nfrom os import listdir, path, chdir\n\ndef main(screen):\n    ch, first, selected, paths = 0, 0, 0, listdir()\n    while ch != ascii.ESC:\n        height, _ = screen.getmaxyx()\n        screen.erase()\n        for y, filename in enumerate(paths[first : first+height]):\n            screen.addstr(y, 0, filename, A_REVERSE * (selected == first + y))\n        ch = screen.getch()\n        selected += (ch == KEY_DOWN) - (ch == KEY_UP)\n        selected = max(0, min(len(paths)-1, selected))\n        first += (first &lt;= selected - height) - (first &gt; selected)\n        if ch in [KEY_LEFT, KEY_RIGHT, KEY_ENTER, 10, 13]:\n            new_dir = '..' if ch == KEY_LEFT else paths[selected]\n            if path.isdir(new_dir):\n                chdir(new_dir)\n                first, selected, paths = 0, 0, listdir()\n\nif __name__ == '__main__':\n    wrapper(main)\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#logging","title":"Logging","text":"Python<pre><code># $ pip3 install loguru\nfrom loguru import logger\n</code></pre> Python<pre><code>logger.add('debug_{time}.log', colorize=True)  # Connects a log file.\nlogger.add('error_{time}.log', level='ERROR')  # Another file for errors or higher.\nlogger.&lt;level&gt;('A logging message.')           # Logs to file/s and prints to stderr.\n</code></pre> <ul> <li>Levels: <code>'debug'</code>, <code>'info'</code>, <code>'success'</code>, <code>'warning'</code>, <code>'error'</code>, <code>'critical'</code>.</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#exceptions_2","title":"Exceptions","text":"<p>Exception description, stack trace and values of variables are appended automatically.</p> Python<pre><code>try:\n    ...\nexcept &lt;exception&gt;:\n    logger.exception('An error happened.')\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#rotation","title":"Rotation","text":"<p>Argument that sets a condition when a new log file is created.</p> Python<pre><code>rotation=&lt;int&gt;|&lt;datetime.timedelta&gt;|&lt;datetime.time&gt;|&lt;str&gt;\n</code></pre> <ul> <li><code>'&lt;int&gt;'</code> - Max file size in bytes.</li> <li><code>'&lt;timedelta&gt;'</code> - Max age of a file.</li> <li><code>'&lt;time&gt;'</code> - Time of day.</li> <li><code>'&lt;str&gt;'</code> - Any of above as a string: <code>'100 MB'</code>, <code>'1 month'</code>, <code>'monday at 12:00'</code>, ...</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#retention","title":"Retention","text":"<p>Sets a condition which old log files get deleted.</p> Python<pre><code>retention=&lt;int&gt;|&lt;datetime.timedelta&gt;|&lt;str&gt;\n</code></pre> <ul> <li><code>'&lt;int&gt;'</code> - Max number of files.</li> <li><code>'&lt;timedelta&gt;'</code> - Max age of a file.</li> <li><code>'&lt;str&gt;'</code> - Max age as a string: <code>'1 week, 3 days'</code>, <code>'2 months'</code>, ...</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#scraping","title":"Scraping","text":""},{"location":"dev-notes/python/py-cheatsheet/#scrapes-pythons-url-version-number-and-logo-from-its-wikipedia-page","title":"Scrapes Python's URL, version number and logo from its Wikipedia page","text":"Python<pre><code># $ pip3 install requests beautifulsoup4\nimport requests, bs4, os, sys\n\nWIKI_URL = 'https://en.wikipedia.org/wiki/Python_(programming_language)'\ntry:\n    html       = requests.get(WIKI_URL).text\n    document   = bs4.BeautifulSoup(html, 'html.parser')\n    table      = document.find('table', class_='infobox vevent')\n    python_url = table.find('th', text='Website').next_sibling.a['href']\n    version    = table.find('th', text='Stable release').next_sibling.strings.__next__()\n    logo_url   = table.find('img')['src']\n    logo       = requests.get(f'https:{logo_url}').content\n    filename   = os.path.basename(logo_url)\n    with open(filename, 'wb') as file:\n        file.write(logo)\n    print(f'{python_url}, {version}, file://{os.path.abspath(filename)}')\nexcept requests.exceptions.ConnectionError:\n    print(\"You've got problems with connection.\", file=sys.stderr)\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#web","title":"Web","text":"Python<pre><code># $ pip3 install bottle\nfrom bottle import run, route, static_file, template, post, request, response\nimport json\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#run","title":"Run","text":"Python<pre><code>run(host='localhost', port=8080)        # Runs locally.\nrun(host='0.0.0.0', port=80)            # Runs globally.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#static-request","title":"Static Request","text":"Python<pre><code>@route('/img/&lt;filename&gt;')\ndef send_file(filename):\n    return static_file(filename, root='img_dir/')\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#dynamic-request","title":"Dynamic Request","text":"Python<pre><code>@route('/&lt;sport&gt;')\ndef send_html(sport):\n    return template('&lt;h1&gt;{{title}}&lt;/h1&gt;', title=sport)\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#rest-request","title":"REST Request","text":"Python<pre><code>@post('/&lt;sport&gt;/odds')\ndef send_json(sport):\n    team = request.forms.get('team')\n    response.headers['Content-Type'] = 'application/json'\n    response.headers['Cache-Control'] = 'no-cache'\n    return json.dumps({'team': team, 'odds': [2.09, 3.74, 3.68]})\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#test","title":"Test","text":"Python<pre><code># $ pip3 install requests\n&gt;&gt;&gt; import threading, requests\n&gt;&gt;&gt; threading.Thread(target=run, daemon=True).start()\n&gt;&gt;&gt; url = 'http://localhost:8080/football/odds'\n&gt;&gt;&gt; request_data = {'team': 'arsenal f.c.'}\n&gt;&gt;&gt; response = requests.post(url, data=request_data)\n&gt;&gt;&gt; response.json()\n{'team': 'arsenal f.c.', 'odds': [2.09, 3.74, 3.68]}\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#profiling","title":"Profiling","text":""},{"location":"dev-notes/python/py-cheatsheet/#stopwatch","title":"Stopwatch","text":"Python<pre><code>from time import perf_counter\nstart_time = perf_counter()\n...\nduration_in_seconds = perf_counter() - start_time\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#timing-a-snippet","title":"Timing a Snippet","text":"Python<pre><code>&gt;&gt;&gt; from timeit import timeit\n&gt;&gt;&gt; timeit(\"''.join(str(i) for i in range(100))\",\n...        number=10000, globals=globals(), setup='pass')\n0.34986\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#profiling-by-line","title":"Profiling by Line","text":"Python<pre><code># $ pip3 install line_profiler memory_profiler\n@profile\ndef main():\n    a = [*range(10000)]\n    b = {*range(10000)}\nmain()\n</code></pre> Text Only<pre><code>$ kernprof -lv test.py\nLine #   Hits     Time  Per Hit   % Time  Line Contents\n=======================================================\n     1                                    @profile\n     2                                    def main():\n     3      1    955.0    955.0     43.7      a = [*range(10000)]\n     4      1   1231.0   1231.0     56.3      b = {*range(10000)}\n</code></pre> Text Only<pre><code>$ python3 -m memory_profiler test.py\nLine #         Mem usage      Increment   Line Contents\n=======================================================\n     1        37.668 MiB     37.668 MiB   @profile\n     2                                    def main():\n     3        38.012 MiB      0.344 MiB       a = [*range(10000)]\n     4        38.477 MiB      0.465 MiB       b = {*range(10000)}\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#call-graph","title":"Call Graph","text":""},{"location":"dev-notes/python/py-cheatsheet/#generates-a-png-image-of-the-call-graph-with-highlighted-bottlenecks","title":"Generates a PNG image of the call graph with highlighted bottlenecks","text":"Python<pre><code># $ pip3 install pycallgraph2; apt/brew install graphviz\nimport pycallgraph2 as cg, datetime\n\nfilename = f'profile-{datetime.datetime.now():%Y%m%d_%H%M%S}.png'\ndrawer = cg.output.GraphvizOutput(output_file=filename)\nwith cg.PyCallGraph(drawer):\n    &lt;code_to_be_profiled&gt;\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#numpy","title":"NumPy","text":"<p>Array manipulation mini-language. It can run up to one hundred times faster than the equivalent Python code. An even faster alternative that runs on a GPU is called CuPy.</p> Python<pre><code># $ pip3 install numpy\nimport numpy as np\n</code></pre> Python<pre><code>&lt;array&gt; = np.array(&lt;list/list_of_lists&gt;)                # Returns 1d/2d NumPy array.\n&lt;array&gt; = np.zeros/ones(&lt;shape&gt;)                        # Also np.full(&lt;shape&gt;, &lt;el&gt;).\n&lt;array&gt; = np.arange(from_inc, to_exc, \u00b1step)            # Also np.linspace(start, stop, num).\n&lt;array&gt; = np.random.randint(from_inc, to_exc, &lt;shape&gt;)  # Also np.random.random(&lt;shape&gt;).\n</code></pre> Python<pre><code>&lt;view&gt;  = &lt;array&gt;.reshape(&lt;shape&gt;)                      # Also `&lt;array&gt;.shape = &lt;shape&gt;`.\n&lt;array&gt; = &lt;array&gt;.flatten()                             # Collapses array into one dimension.\n&lt;view&gt;  = &lt;array&gt;.squeeze()                             # Removes dimensions of length one.\n</code></pre> Python<pre><code>&lt;array&gt; = &lt;array&gt;.sum/min/mean/var/std(axis)            # Passed dimension gets aggregated.\n&lt;array&gt; = &lt;array&gt;.argmin(axis)                          # Returns indexes of smallest elements.\n&lt;array&gt; = np.apply_along_axis(&lt;func&gt;, axis, &lt;array&gt;)    # Func can return a scalar or array.\n</code></pre> <ul> <li>Shape is a tuple of dimension sizes. A 100x50 RGB image has shape (50, 100, 3).</li> <li>Axis is an index of the dimension that gets aggregated. Leftmost dimension has index 0. Summing the RGB image along axis 2 will return a greyscale image with shape (50, 100).</li> <li>Passing a tuple of axes will chain the operations like this: <code>'&lt;array&gt;.&lt;method&gt;(axis_1, keepdims=True).&lt;method&gt;(axis_2).squeeze()'</code>.</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#indexing","title":"Indexing","text":"Bash<pre><code>&lt;el&gt;       = &lt;2d_array&gt;[row_index, column_index]        # &lt;3d_a&gt;[table_i, row_i, column_i]\n&lt;1d_view&gt;  = &lt;2d_array&gt;[row_index]                      # &lt;3d_a&gt;[table_i, row_i]\n&lt;1d_view&gt;  = &lt;2d_array&gt;[:, column_index]                # &lt;3d_a&gt;[table_i, :, column_i]\n</code></pre> Bash<pre><code>&lt;1d_array&gt; = &lt;2d_array&gt;[row_indexes, column_indexes]    # &lt;3d_a&gt;[table_is, row_is, column_is]\n&lt;2d_array&gt; = &lt;2d_array&gt;[row_indexes]                    # &lt;3d_a&gt;[table_is, row_is]\n&lt;2d_array&gt; = &lt;2d_array&gt;[:, column_indexes]              # &lt;3d_a&gt;[table_is, :, column_is]\n</code></pre> Bash<pre><code>&lt;2d_bools&gt; = &lt;2d_array&gt; &gt;&lt;== &lt;el&gt;                       # &lt;3d_array&gt; &gt;&lt;== &lt;1d_array&gt;\n&lt;1d_array&gt; = &lt;2d_array&gt;[&lt;2d_bools&gt;]                     # &lt;3d_array&gt;[&lt;2d_bools&gt;]\n</code></pre> <ul> <li>All examples also allow assignments.</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#broadcasting","title":"Broadcasting","text":"<p>Broadcasting is a set of rules by which NumPy functions operate on arrays of different sizes and/or dimensions.</p> Python<pre><code>left  = [[0.1], [0.6], [0.8]]                           # Shape: (3, 1)\nright = [ 0.1 ,  0.6 ,  0.8 ]                           # Shape: (3,)\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#1-if-array-shapes-differ-in-length-left-pad-the-shorter-shape-with-ones","title":"1. If array shapes differ in length, left-pad the shorter shape with ones","text":"Python<pre><code>left  = [[0.1], [0.6], [0.8]]                           # Shape: (3, 1)\nright = [[0.1 ,  0.6 ,  0.8]]                           # Shape: (1, 3) &lt;- !\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#2-if-any-dimensions-differ-in-size-expand-the-ones-that-have-size-1-by-duplicating-their-elements","title":"2. If any dimensions differ in size, expand the ones that have size 1 by duplicating their elements","text":"Python<pre><code>left  = [[0.1,  0.1,  0.1],                             # Shape: (3, 3) &lt;- !\n         [0.6,  0.6,  0.6],\n         [0.8,  0.8,  0.8]]\n\nright = [[0.1,  0.6,  0.8],                             # Shape: (3, 3) &lt;- !\n         [0.1,  0.6,  0.8],\n         [0.1,  0.6,  0.8]]\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#3-if-neither-non-matching-dimension-has-size-1-raise-an-error","title":"3. If neither non-matching dimension has size 1, raise an error","text":""},{"location":"dev-notes/python/py-cheatsheet/#example_1","title":"Example","text":""},{"location":"dev-notes/python/py-cheatsheet/#for-each-point-returns-index-of-its-nearest-point-01-06-08--1-2-1","title":"For each point returns index of its nearest point (<code>[0.1, 0.6, 0.8] =&gt; [1, 2, 1]</code>)","text":"Python<pre><code>&gt;&gt;&gt; points = np.array([0.1, 0.6, 0.8])\n [ 0.1,  0.6,  0.8]\n&gt;&gt;&gt; wrapped_points = points.reshape(3, 1)\n[[ 0.1],\n [ 0.6],\n [ 0.8]]\n&gt;&gt;&gt; distances = wrapped_points - points\n[[ 0. , -0.5, -0.7],\n [ 0.5,  0. , -0.2],\n [ 0.7,  0.2,  0. ]]\n&gt;&gt;&gt; distances = np.abs(distances)\n[[ 0. ,  0.5,  0.7],\n [ 0.5,  0. ,  0.2],\n [ 0.7,  0.2,  0. ]]\n&gt;&gt;&gt; i = np.arange(3)\n[0, 1, 2]\n&gt;&gt;&gt; distances[i, i] = np.inf\n[[ inf,  0.5,  0.7],\n [ 0.5,  inf,  0.2],\n [ 0.7,  0.2,  inf]]\n&gt;&gt;&gt; distances.argmin(1)\n[1, 2, 1]\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#image","title":"Image","text":"Python<pre><code># $ pip3 install pillow\nfrom PIL import Image\n</code></pre> Python<pre><code>&lt;Image&gt; = Image.new('&lt;mode&gt;', (width, height))   # Also: `color=&lt;int/tuple/str&gt;`.\n&lt;Image&gt; = Image.open(&lt;path&gt;)                     # Identifies format based on file contents.\n&lt;Image&gt; = &lt;Image&gt;.convert('&lt;mode&gt;')              # Converts image to the new mode.\n&lt;Image&gt;.save(&lt;path&gt;)                             # Selects format based on the path extension.\n&lt;Image&gt;.show()                                   # Opens image in default preview app.\n</code></pre> Python<pre><code>&lt;int/tuple&gt; = &lt;Image&gt;.getpixel((x, y))           # Returns a pixel.\n&lt;Image&gt;.putpixel((x, y), &lt;int/tuple&gt;)            # Writes a pixel to the image.\n&lt;ImagingCore&gt; = &lt;Image&gt;.getdata()                # Returns a flattened sequence of pixels.\n&lt;Image&gt;.putdata(&lt;list/ImagingCore&gt;)              # Writes a flattened sequence of pixels.\n&lt;Image&gt;.paste(&lt;Image&gt;, (x, y))                   # Writes passed image to the image.\n</code></pre> Bash<pre><code>&lt;2d_array&gt; = np.array(&lt;Image_L&gt;)                 # Creates NumPy array from greyscale image.\n&lt;3d_array&gt; = np.array(&lt;Image_RGB/A&gt;)             # Creates NumPy array from color image.\n&lt;Image&gt;    = Image.fromarray(np.uint8(&lt;array&gt;))  # Use &lt;array&gt;.clip(0, 255) to clip the values.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#modes_1","title":"Modes","text":"<ul> <li><code>'1'</code> - 1-bit pixels, black and white, stored with one pixel per byte.</li> <li><code>'L'</code> - 8-bit pixels, greyscale.</li> <li><code>'RGB'</code> - 3x8-bit pixels, true color.</li> <li><code>'RGBA'</code> - 4x8-bit pixels, true color with transparency mask.</li> <li><code>'HSV'</code> - 3x8-bit pixels, Hue, Saturation, Value color space.</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#examples","title":"Examples","text":""},{"location":"dev-notes/python/py-cheatsheet/#creates-a-png-image-of-a-rainbow-gradient","title":"Creates a PNG image of a rainbow gradient","text":"Python<pre><code>WIDTH, HEIGHT = 100, 100\nn_pixels = WIDTH * HEIGHT\nhues = (255 * i/n_pixels for i in range(n_pixels))\nimg = Image.new('HSV', (WIDTH, HEIGHT))\nimg.putdata([(int(h), 255, 255) for h in hues])\nimg.convert('RGB').save('test.png')\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#adds-noise-to-a-png-image","title":"Adds noise to a PNG image","text":"Python<pre><code>from random import randint\nadd_noise = lambda value: max(0, min(255, value + randint(-20, 20)))\nimg = Image.open('test.png').convert('HSV')\nimg.putdata([(add_noise(h), s, v) for h, s, v in img.getdata()])\nimg.convert('RGB').save('test.png')\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#image-draw","title":"Image Draw","text":"Python<pre><code>from PIL import ImageDraw\n&lt;ImageDraw&gt; = ImageDraw.Draw(&lt;Image&gt;)\n</code></pre> Python<pre><code>&lt;ImageDraw&gt;.point((x, y))                        # Truncates floats into ints.\n&lt;ImageDraw&gt;.line((x1, y1, x2, y2 [, ...]))       # To get anti-aliasing use Image's resize().\n&lt;ImageDraw&gt;.arc((x1, y1, x2, y2), deg1, deg2)    # Always draws in clockwise direction.\n&lt;ImageDraw&gt;.rectangle((x1, y1, x2, y2))          # To rotate use Image's rotate() and paste().\n&lt;ImageDraw&gt;.polygon((x1, y1, x2, y2, ...))       # Last point gets connected to the first.\n&lt;ImageDraw&gt;.ellipse((x1, y1, x2, y2))            # To rotate use Image's rotate() and paste().\n</code></pre> <ul> <li>Use <code>'fill=&lt;color&gt;'</code> to set the primary color.</li> <li>Use <code>'width=&lt;int&gt;'</code> to set the width of lines or contours.</li> <li>Use <code>'outline=&lt;color&gt;'</code> to set the color of the contours.</li> <li>Color can be an int, tuple, <code>'#rrggbb[aa]'</code> string or a color name.</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#animation","title":"Animation","text":""},{"location":"dev-notes/python/py-cheatsheet/#creates-a-gif-of-a-bouncing-ball","title":"Creates a GIF of a bouncing ball","text":"Python<pre><code># $ pip3 install imageio\nfrom PIL import Image, ImageDraw\nimport imageio\n\nWIDTH, HEIGHT, R = 126, 126, 10\nframes = []\nfor velocity in range(1, 16):\n    y = sum(range(velocity))\n    frame = Image.new('L', (WIDTH, HEIGHT))\n    draw  = ImageDraw.Draw(frame)\n    draw.ellipse((WIDTH/2-R, y, WIDTH/2+R, y+R*2), fill='white')\n    frames.append(frame)\nframes += reversed(frames[1:-1])\nimageio.mimsave('test.gif', frames, duration=0.03)\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#audio","title":"Audio","text":"Python<pre><code>import wave\n</code></pre> Python<pre><code>&lt;Wave_read&gt;  = wave.open('&lt;path&gt;', 'rb')        # Opens the WAV file.\nframerate    = &lt;Wave_read&gt;.getframerate()       # Number of frames per second.\nnchannels    = &lt;Wave_read&gt;.getnchannels()       # Number of samples per frame.\nsampwidth    = &lt;Wave_read&gt;.getsampwidth()       # Sample size in bytes.\nnframes      = &lt;Wave_read&gt;.getnframes()         # Number of frames.\n&lt;params&gt;     = &lt;Wave_read&gt;.getparams()          # Immutable collection of above.\n&lt;bytes&gt;      = &lt;Wave_read&gt;.readframes(nframes)  # Returns next 'nframes' frames.\n</code></pre> Python<pre><code>&lt;Wave_write&gt; = wave.open('&lt;path&gt;', 'wb')        # Truncates existing file.\n&lt;Wave_write&gt;.setframerate(&lt;int&gt;)                # 44100 for CD, 48000 for video.\n&lt;Wave_write&gt;.setnchannels(&lt;int&gt;)                # 1 for mono, 2 for stereo.\n&lt;Wave_write&gt;.setsampwidth(&lt;int&gt;)                # 2 for CD quality sound.\n&lt;Wave_write&gt;.setparams(&lt;params&gt;)                # Sets all parameters.\n&lt;Wave_write&gt;.writeframes(&lt;bytes&gt;)               # Appends frames to the file.\n</code></pre> <ul> <li>Bytes object contains a sequence of frames, each consisting of one or more samples.</li> <li>In a stereo signal, the first sample of a frame belongs to the left channel.</li> <li>Each sample consists of one or more bytes that, when converted to an integer, indicate the displacement of a speaker membrane at a given moment.</li> <li>If sample width is one byte, then the integer should be encoded unsigned.</li> <li>For all other sizes, the integer should be encoded signed with little-endian byte order.</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#sample-values","title":"Sample Values","text":"Text Only<pre><code>+-----------+-----------+------+-----------+\n| sampwidth |    min    | zero |    max    |\n+-----------+-----------+------+-----------+\n|     1     |         0 |  128 |       255 |\n|     2     |    -32768 |    0 |     32767 |\n|     3     |  -8388608 |    0 |   8388607 |\n+-----------+-----------+------+-----------+\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#read-float-samples-from-wav-file","title":"Read Float Samples from WAV File","text":"Python<pre><code>def read_wav_file(filename):\n    def get_int(bytes_obj):\n        an_int = int.from_bytes(bytes_obj, 'little', signed=(sampwidth != 1))\n        return an_int - 128 * (sampwidth == 1)\n    with wave.open(filename, 'rb') as file:\n        sampwidth = file.getsampwidth()\n        frames = file.readframes(-1)\n    bytes_samples = (frames[i : i+sampwidth] for i in range(0, len(frames), sampwidth))\n    return [get_int(b) / pow(2, sampwidth * 8 - 1) for b in bytes_samples]\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#write-float-samples-to-wav-file","title":"Write Float Samples to WAV File","text":"Python<pre><code>def write_to_wav_file(filename, float_samples, nchannels=1, sampwidth=2, framerate=44100):\n    def get_bytes(a_float):\n        a_float = max(-1, min(1 - 2e-16, a_float))\n        a_float += sampwidth == 1\n        a_float *= pow(2, sampwidth * 8 - 1)\n        return int(a_float).to_bytes(sampwidth, 'little', signed=(sampwidth != 1))\n    with wave.open(filename, 'wb') as file:\n        file.setnchannels(nchannels)\n        file.setsampwidth(sampwidth)\n        file.setframerate(framerate)\n        file.writeframes(b''.join(get_bytes(f) for f in float_samples))\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#examples_1","title":"Examples","text":""},{"location":"dev-notes/python/py-cheatsheet/#saves-a-440-hz-sine-wave-to-a-mono-wav-file","title":"Saves a 440 Hz sine wave to a mono WAV file","text":"Python<pre><code>from math import pi, sin\nsamples_f = (sin(i * 2 * pi * 440 / 44100) for i in range(100000))\nwrite_to_wav_file('test.wav', samples_f)\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#adds-noise-to-a-mono-wav-file","title":"Adds noise to a mono WAV file","text":"Python<pre><code>from random import random\nadd_noise = lambda value: value + (random() - 0.5) * 0.03\nsamples_f = (add_noise(f) for f in read_wav_file('test.wav'))\nwrite_to_wav_file('test.wav', samples_f)\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#plays-a-wav-file","title":"Plays a WAV file","text":"Python<pre><code># $ pip3 install simpleaudio\nfrom simpleaudio import play_buffer\nwith wave.open('test.wav', 'rb') as file:\n    p = file.getparams()\n    frames = file.readframes(-1)\n    play_buffer(frames, p.nchannels, p.sampwidth, p.framerate)\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#text-to-speech","title":"Text to Speech","text":"Python<pre><code># $ pip3 install pyttsx3\nimport pyttsx3\nengine = pyttsx3.init()\nengine.say('Sally sells seashells by the seashore.')\nengine.runAndWait()\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#synthesizer","title":"Synthesizer","text":""},{"location":"dev-notes/python/py-cheatsheet/#plays-popcorn-by-gershon-kingsley","title":"Plays Popcorn by Gershon Kingsley","text":"Python<pre><code># $ pip3 install simpleaudio\nimport itertools as it, math, struct, simpleaudio\n\nF  = 44100\nP1 = '71\u2669,69\u266a,,71\u2669,66\u266a,,62\u2669,66\u266a,,59\u2669,,'\nP2 = '71\u2669,73\u266a,,74\u2669,73\u266a,,74\u266a,,71\u266a,,73\u2669,71\u266a,,73\u266a,,69\u266a,,71\u2669,69\u266a,,71\u266a,,67\u266a,,71\u2669,,'\nget_pause   = lambda seconds: it.repeat(0, int(seconds * F))\nsin_f       = lambda i, hz: math.sin(i * 2 * math.pi * hz / F)\nget_wave    = lambda hz, seconds: (sin_f(i, hz) for i in range(int(seconds * F)))\nget_hz      = lambda key: 8.176 * 2 ** (int(key) / 12)\nparse_note  = lambda note: (get_hz(note[:2]), 1/4 if '\u2669' in note else 1/8)\nget_samples = lambda note: get_wave(*parse_note(note)) if note else get_pause(1/8)\nsamples_f   = it.chain.from_iterable(get_samples(n) for n in f'{P1},{P1},{P2}'.split(','))\nsamples_b   = b''.join(struct.pack('&lt;h', int(f * 30000)) for f in samples_f)\nsimpleaudio.play_buffer(samples_b, 1, 2, F)\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#pygame","title":"Pygame","text":"Python<pre><code># $ pip3 install pygame\nimport pygame as pg\n\npg.init()\nscreen = pg.display.set_mode((500, 500))\nrect = pg.Rect(240, 240, 20, 20)\nwhile all(event.type != pg.QUIT for event in pg.event.get()):\n    deltas = {pg.K_UP: (0, -1), pg.K_RIGHT: (1, 0), pg.K_DOWN: (0, 1), pg.K_LEFT: (-1, 0)}\n    for ch, is_pressed in enumerate(pg.key.get_pressed()):\n        rect = rect.move(deltas[ch]) if ch in deltas and is_pressed else rect\n    screen.fill((0, 0, 0))\n    pg.draw.rect(screen, (255, 255, 255), rect)\n    pg.display.flip()\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#rectangle","title":"Rectangle","text":"<p>Object for storing rectangular coordinates.</p> Python<pre><code>&lt;Rect&gt; = pg.Rect(x, y, width, height)           # Floats get truncated into ints.\n&lt;int&gt;  = &lt;Rect&gt;.x/y/centerx/centery/...         # Top, right, bottom, left. Allows assignments.\n&lt;tup.&gt; = &lt;Rect&gt;.topleft/center/...              # Topright, bottomright, bottomleft. Same.\n&lt;Rect&gt; = &lt;Rect&gt;.move((x, y))                    # Use move_ip() to move in-place.\n</code></pre> Python<pre><code>&lt;bool&gt; = &lt;Rect&gt;.collidepoint((x, y))            # Checks if rectangle contains a point.\n&lt;bool&gt; = &lt;Rect&gt;.colliderect(&lt;Rect&gt;)             # Checks if two rectangles overlap.\n&lt;int&gt;  = &lt;Rect&gt;.collidelist(&lt;list_of_Rect&gt;)     # Returns index of first colliding Rect or -1.\n&lt;list&gt; = &lt;Rect&gt;.collidelistall(&lt;list_of_Rect&gt;)  # Returns indexes of all colliding rectangles.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#surface","title":"Surface","text":"<p>Object for representing images.</p> Python<pre><code>&lt;Surf&gt; = pg.display.set_mode((width, height))   # Returns a display surface.\n&lt;Surf&gt; = pg.Surface((width, height))            # New RGB surface. RGBA if `flags=pg.SRCALPHA`.\n&lt;Surf&gt; = pg.image.load('&lt;path&gt;')                # Loads the image. Format depends on source.\n&lt;Surf&gt; = &lt;Surf&gt;.subsurface(&lt;Rect&gt;)              # Returns a subsurface.\n</code></pre> Python<pre><code>&lt;Surf&gt;.fill(color)                              # Tuple, Color('#rrggbb[aa]') or Color(&lt;name&gt;).\n&lt;Surf&gt;.set_at((x, y), color)                    # Updates pixel.\n&lt;Surf&gt;.blit(&lt;Surf&gt;, (x, y))                     # Draws passed surface to the surface.\n</code></pre> Python<pre><code>from pygame.transform import scale, ...\n&lt;Surf&gt; = scale(&lt;Surf&gt;, (width, height))         # Returns scaled surface.\n&lt;Surf&gt; = rotate(&lt;Surf&gt;, anticlock_degrees)      # Returns rotated and scaled surface.\n&lt;Surf&gt; = flip(&lt;Surf&gt;, x_bool, y_bool)           # Returns flipped surface.\n</code></pre> Python<pre><code>from pygame.draw import line, ...\nline(&lt;Surf&gt;, color, (x1, y1), (x2, y2), width)  # Draws a line to the surface.\narc(&lt;Surf&gt;, color, &lt;Rect&gt;, from_rad, to_rad)    # Also: ellipse(&lt;Surf&gt;, color, &lt;Rect&gt;, width=0)\nrect(&lt;Surf&gt;, color, &lt;Rect&gt;, width=0)            # Also: polygon(&lt;Surf&gt;, color, points, width=0)\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#font","title":"Font","text":"Python<pre><code>&lt;Font&gt; = pg.font.SysFont('&lt;name&gt;', size)        # Loads the system font or default if missing.\n&lt;Font&gt; = pg.font.Font('&lt;path&gt;', size)           # Loads the TTF file. Pass None for default.\n&lt;Surf&gt; = &lt;Font&gt;.render(text, antialias, color)  # Background color can be specified at the end.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#sound","title":"Sound","text":"Python<pre><code>&lt;Sound&gt; = pg.mixer.Sound('&lt;path&gt;')              # Loads the WAV file.\n&lt;Sound&gt;.play()                                  # Starts playing the sound.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#basic-mario-brothers-example","title":"Basic Mario Brothers Example","text":"Python<pre><code>import collections, dataclasses, enum, io, itertools as it, pygame as pg, urllib.request\nfrom random import randint\n\nP = collections.namedtuple('P', 'x y')          # Position\nD = enum.Enum('D', 'n e s w')                   # Direction\nW, H, MAX_S = 50, 50, P(5, 10)                  # Width, Height, Max speed\n\ndef main():\n    def get_screen():\n        pg.init()\n        return pg.display.set_mode((W*16, H*16))\n    def get_images():\n        url = 'https://gto76.github.io/python-cheatsheet/web/mario_bros.png'\n        img = pg.image.load(io.BytesIO(urllib.request.urlopen(url).read()))\n        return [img.subsurface(get_rect(x, 0)) for x in range(img.get_width() // 16)]\n    def get_mario():\n        Mario = dataclasses.make_dataclass('Mario', 'rect spd facing_left frame_cycle'.split())\n        return Mario(get_rect(1, 1), P(0, 0), False, it.cycle(range(3)))\n    def get_tiles():\n        border = [(x, y) for x in range(W) for y in range(H) if x in [0, W-1] or y in [0, H-1]]\n        platforms = [(randint(1, W-2), randint(2, H-2)) for _ in range(W*H // 10)]\n        return [get_rect(x, y) for x, y in border + platforms]\n    def get_rect(x, y):\n        return pg.Rect(x*16, y*16, 16, 16)\n    run(get_screen(), get_images(), get_mario(), get_tiles())\n\ndef run(screen, images, mario, tiles):\n    clock = pg.time.Clock()\n    while all(event.type != pg.QUIT for event in pg.event.get()):\n        keys = {pg.K_UP: D.n, pg.K_RIGHT: D.e, pg.K_DOWN: D.s, pg.K_LEFT: D.w}\n        pressed = {keys.get(ch) for ch, is_prsd in enumerate(pg.key.get_pressed()) if is_prsd}\n        update_speed(mario, tiles, pressed)\n        update_position(mario, tiles)\n        draw(screen, images, mario, tiles, pressed)\n        clock.tick(28)\n\ndef update_speed(mario, tiles, pressed):\n    x, y = mario.spd\n    x += 2 * ((D.e in pressed) - (D.w in pressed))\n    x -= (x &gt; 0) - (x &lt; 0)\n    y += 1 if D.s not in get_boundaries(mario.rect, tiles) else (D.n in pressed) * -10\n    mario.spd = P(x=max(-MAX_S.x, min(MAX_S.x, x)), y=max(-MAX_S.y, min(MAX_S.y, y)))\n\ndef update_position(mario, tiles):\n    x, y = mario.rect.topleft\n    n_steps = max(abs(s) for s in mario.spd)\n    for _ in range(n_steps):\n        mario.spd = stop_on_collision(mario.spd, get_boundaries(mario.rect, tiles))\n        x, y = x + mario.spd.x / n_steps, y + mario.spd.y / n_steps\n        mario.rect.topleft = x, y\n\ndef get_boundaries(rect, tiles):\n    deltas = {D.n: P(0, -1), D.e: P(1, 0), D.s: P(0, 1), D.w: P(-1, 0)}\n    return {d for d, delta in deltas.items() if rect.move(delta).collidelist(tiles) != -1}\n\ndef stop_on_collision(spd, bounds):\n    return P(x=0 if (D.w in bounds and spd.x &lt; 0) or (D.e in bounds and spd.x &gt; 0) else spd.x,\n             y=0 if (D.n in bounds and spd.y &lt; 0) or (D.s in bounds and spd.y &gt; 0) else spd.y)\n\ndef draw(screen, images, mario, tiles, pressed):\n    def get_marios_image_index():\n        if D.s not in get_boundaries(mario.rect, tiles):\n            return 4\n        return next(mario.frame_cycle) if {D.w, D.e} &amp; pressed else 6\n    screen.fill((85, 168, 255))\n    mario.facing_left = (D.w in pressed) if {D.w, D.e} &amp; pressed else mario.facing_left\n    screen.blit(images[get_marios_image_index() + mario.facing_left * 9], mario.rect)\n    for t in tiles:\n        screen.blit(images[18 if t.x in [0, (W-1)*16] or t.y in [0, (H-1)*16] else 19], t)\n    pg.display.flip()\n\nif __name__ == '__main__':\n    main()\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#pandas","title":"Pandas","text":"Python<pre><code># $ pip3 install pandas matplotlib\nimport pandas as pd\nfrom pandas import Series, DataFrame\nimport matplotlib.pyplot as plt\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#series","title":"Series","text":"<p>Ordered dictionary with a name.</p> Python<pre><code>&gt;&gt;&gt; Series([1, 2], index=['x', 'y'], name='a')\nx    1\ny    2\nName: a, dtype: int64\n</code></pre> Python<pre><code>&lt;Sr&gt; = Series(&lt;list&gt;)                          # Assigns RangeIndex starting at 0.\n&lt;Sr&gt; = Series(&lt;dict&gt;)                          # Takes dictionary's keys for index.\n&lt;Sr&gt; = Series(&lt;dict/Series&gt;, index=&lt;list&gt;)     # Only keeps items with keys specified in index.\n</code></pre> Python<pre><code>&lt;el&gt; = &lt;Sr&gt;.loc[key]                           # Or: &lt;Sr&gt;.iloc[index]\n&lt;Sr&gt; = &lt;Sr&gt;.loc[keys]                          # Or: &lt;Sr&gt;.iloc[indexes]\n&lt;Sr&gt; = &lt;Sr&gt;.loc[from_key : to_key_inclusive]   # Or: &lt;Sr&gt;.iloc[from_i : to_i_exclusive]\n</code></pre> Python<pre><code>&lt;el&gt; = &lt;Sr&gt;[key/index]                         # Or: &lt;Sr&gt;.key\n&lt;Sr&gt; = &lt;Sr&gt;[keys/indexes]                      # Or: &lt;Sr&gt;[&lt;key_range/range&gt;]\n&lt;Sr&gt; = &lt;Sr&gt;[bools]                             # Or: &lt;Sr&gt;.i/loc[bools]\n</code></pre> Python<pre><code>&lt;Sr&gt; = &lt;Sr&gt; &gt;&lt;== &lt;el/Sr&gt;                       # Returns a Series of bools.\n&lt;Sr&gt; = &lt;Sr&gt; +-*/ &lt;el/Sr&gt;                       # Items with non-matching keys get value NaN.\n</code></pre> Python<pre><code>&lt;Sr&gt; = &lt;Sr&gt;.append(&lt;Sr&gt;)                       # Or: pd.concat(&lt;coll_of_Sr&gt;)\n&lt;Sr&gt; = &lt;Sr&gt;.combine_first(&lt;Sr&gt;)                # Adds items that are not yet present.\n&lt;Sr&gt;.update(&lt;Sr&gt;)                              # Updates items that are already present.\n</code></pre> Python<pre><code>&lt;Sr&gt;.plot.line/area/bar/pie/hist()             # Generates a Matplotlib plot.\nplt.show()                                     # Displays the plot. Also plt.savefig(&lt;path&gt;).\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#series--aggregate-transform-map","title":"Series \u2014 Aggregate, Transform, Map","text":"Python<pre><code>&lt;el&gt; = &lt;Sr&gt;.sum/max/mean/idxmax/all()          # Or: &lt;Sr&gt;.agg(lambda &lt;Sr&gt;: &lt;el&gt;)\n&lt;Sr&gt; = &lt;Sr&gt;.rank/diff/cumsum/ffill/interpl()   # Or: &lt;Sr&gt;.agg/transform(lambda &lt;Sr&gt;: &lt;Sr&gt;)\n&lt;Sr&gt; = &lt;Sr&gt;.fillna(&lt;el&gt;)                       # Or: &lt;Sr&gt;.agg/transform/map(lambda &lt;el&gt;: &lt;el&gt;)\n</code></pre> Python<pre><code>&gt;&gt;&gt; sr = Series([1, 2], index=['x', 'y'])\nx    1\ny    2\n</code></pre> Text Only<pre><code>+-----------------+-------------+-------------+---------------+\n|                 |    'sum'    |   ['sum']   | {'s': 'sum'}  |\n+-----------------+-------------+-------------+---------------+\n| sr.apply(...)   |      3      |    sum  3   |     s  3      |\n| sr.agg(...)     |             |             |               |\n+-----------------+-------------+-------------+---------------+\n</code></pre> Text Only<pre><code>+-------------------+-------------+-------------+---------------+\n|                   |    'rank'   |   ['rank']  | {'r': 'rank'} |\n+-------------------+-------------+-------------+---------------+\n| sr.apply(...)     |             |      rank   |               |\n| sr.agg(...)       |     x  1    |   x     1   |    r  x  1    |\n| sr.transform(...) |     y  2    |   y     2   |       y  2    |\n+-------------------+-------------+-------------+---------------+\n</code></pre> <ul> <li>Last result has a hierarchical index. Use <code>'&lt;Sr&gt;[key_1, key_2]'</code> to get its values.</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#dataframe","title":"DataFrame","text":"<p>Table with labeled rows and columns.</p> Python<pre><code>&gt;&gt;&gt; DataFrame([[1, 2], [3, 4]], index=['a', 'b'], columns=['x', 'y'])\n   x  y\na  1  2\nb  3  4\n</code></pre> Python<pre><code>&lt;DF&gt;    = DataFrame(&lt;list_of_rows&gt;)            # Rows can be either lists, dicts or series.\n&lt;DF&gt;    = DataFrame(&lt;dict_of_columns&gt;)         # Columns can be either lists, dicts or series.\n</code></pre> Python<pre><code>&lt;el&gt;    = &lt;DF&gt;.loc[row_key, column_key]        # Or: &lt;DF&gt;.iloc[row_index, column_index]\n&lt;Sr/DF&gt; = &lt;DF&gt;.loc[row_key/s]                  # Or: &lt;DF&gt;.iloc[row_index/es]\n&lt;Sr/DF&gt; = &lt;DF&gt;.loc[:, column_key/s]            # Or: &lt;DF&gt;.iloc[:, column_index/es]\n&lt;DF&gt;    = &lt;DF&gt;.loc[row_bools, column_bools]    # Or: &lt;DF&gt;.iloc[row_bools, column_bools]\n</code></pre> Python<pre><code>&lt;Sr/DF&gt; = &lt;DF&gt;[column_key/s]                   # Or: &lt;DF&gt;.column_key\n&lt;DF&gt;    = &lt;DF&gt;[row_bools]                      # Keeps rows as specified by bools.\n&lt;DF&gt;    = &lt;DF&gt;[&lt;DF_of_bools&gt;]                  # Assigns NaN to False values.\n</code></pre> Python<pre><code>&lt;DF&gt;    = &lt;DF&gt; &gt;&lt;== &lt;el/Sr/DF&gt;                 # Returns DF of bools. Sr is treated as a row.\n&lt;DF&gt;    = &lt;DF&gt; +-*/ &lt;el/Sr/DF&gt;                 # Items with non-matching keys get value NaN.\n</code></pre> Python<pre><code>&lt;DF&gt;    = &lt;DF&gt;.set_index(column_key)           # Replaces row keys with values from a column.\n&lt;DF&gt;    = &lt;DF&gt;.reset_index()                   # Moves row keys to a column named index.\n&lt;DF&gt;    = &lt;DF&gt;.sort_index(ascending=True)      # Sorts rows by row keys.\n&lt;DF&gt;    = &lt;DF&gt;.sort_values(column_key/s)       # Sorts rows by the passed column/s.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#dataframe--merge-join-concat","title":"DataFrame \u2014 Merge, Join, Concat","text":"Python<pre><code>&gt;&gt;&gt; l = DataFrame([[1, 2], [3, 4]], index=['a', 'b'], columns=['x', 'y'])\n   x  y\na  1  2\nb  3  4\n&gt;&gt;&gt; r = DataFrame([[4, 5], [6, 7]], index=['b', 'c'], columns=['y', 'z'])\n   y  z\nb  4  5\nc  6  7\n</code></pre> Text Only<pre><code>+------------------------+---------------+------------+------------+--------------------------+\n|                        |    'outer'    |   'inner'  |   'left'   |       Description        |\n+------------------------+---------------+------------+------------+--------------------------+\n| l.merge(r, on='y',     |    x   y   z  | x   y   z  | x   y   z  | Joins/merges on column.  |\n|            how=...)    | 0  1   2   .  | 3   4   5  | 1   2   .  | Also accepts left_on and |\n|                        | 1  3   4   5  |            | 3   4   5  | right_on parameters.     |\n|                        | 2  .   6   7  |            |            | Uses 'inner' by default. |\n+------------------------+---------------+------------+------------+--------------------------+\n| l.join(r, lsuffix='l', |    x yl yr  z |            | x yl yr  z | Joins/merges on row keys.|\n|           rsuffix='r', | a  1  2  .  . | x yl yr  z | 1  2  .  . | Uses 'left' by default.  |\n|           how=...)     | b  3  4  4  5 | 3  4  4  5 | 3  4  4  5 | If r is a Series, it is  |\n|                        | c  .  .  6  7 |            |            | treated as a column.     |\n+------------------------+---------------+------------+------------+--------------------------+\n| pd.concat([l, r],      |    x   y   z  |     y      |            | Adds rows at the bottom. |\n|           axis=0,      | a  1   2   .  |     2      |            | Uses 'outer' by default. |\n|           join=...)    | b  3   4   .  |     4      |            | A Series is treated as a |\n|                        | b  .   4   5  |     4      |            | column. Use l.append(sr) |\n|                        | c  .   6   7  |     6      |            | to add a row instead.    |\n+------------------------+---------------+------------+------------+--------------------------+\n| pd.concat([l, r],      |    x  y  y  z |            |            | Adds columns at the      |\n|           axis=1,      | a  1  2  .  . | x  y  y  z |            | right end. Uses 'outer'  |\n|           join=...)    | b  3  4  4  5 | 3  4  4  5 |            | by default. A Series is  |\n|                        | c  .  .  6  7 |            |            | treated as a column.     |\n+------------------------+---------------+------------+------------+--------------------------+\n| l.combine_first(r)     |    x   y   z  |            |            | Adds missing rows and    |\n|                        | a  1   2   .  |            |            | columns. Also updates    |\n|                        | b  3   4   5  |            |            | items that contain NaN.  |\n|                        | c  .   6   7  |            |            | R must be a DataFrame.   |\n+------------------------+---------------+------------+------------+--------------------------+\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#dataframe--aggregate-transform-map","title":"DataFrame \u2014 Aggregate, Transform, Map","text":"Python<pre><code>&lt;Sr&gt; = &lt;DF&gt;.sum/max/mean/idxmax/all()          # Or: &lt;DF&gt;.apply/agg(lambda &lt;Sr&gt;: &lt;el&gt;)\n&lt;DF&gt; = &lt;DF&gt;.rank/diff/cumsum/ffill/interpl()   # Or: &lt;DF&gt;.apply/agg/transfrm(lambda &lt;Sr&gt;: &lt;Sr&gt;)\n&lt;DF&gt; = &lt;DF&gt;.fillna(&lt;el&gt;)                       # Or: &lt;DF&gt;.applymap(lambda &lt;el&gt;: &lt;el&gt;)\n</code></pre> <ul> <li>All operations operate on columns by default. Pass <code>'axis=1'</code> to process the rows instead.</li> </ul> Python<pre><code>&gt;&gt;&gt; df = DataFrame([[1, 2], [3, 4]], index=['a', 'b'], columns=['x', 'y'])\n   x  y\na  1  2\nb  3  4\n</code></pre> Text Only<pre><code>+-----------------+-------------+-------------+---------------+\n|                 |    'sum'    |   ['sum']   | {'x': 'sum'}  |\n+-----------------+-------------+-------------+---------------+\n| df.apply(...)   |             |       x  y  |               |\n| df.agg(...)     |     x  4    |  sum  4  6  |     x  4      |\n|                 |     y  6    |             |               |\n+-----------------+-------------+-------------+---------------+\n</code></pre> Text Only<pre><code>+-------------------+-------------+-------------+---------------+\n|                   |    'rank'   |   ['rank']  | {'x': 'rank'} |\n+-------------------+-------------+-------------+---------------+\n| df.apply(...)     |      x  y   |      x    y |        x      |\n| df.agg(...)       |   a  1  1   |   rank rank |     a  1      |\n| df.transform(...) |   b  2  2   | a    1    1 |     b  2      |\n|                   |             | b    2    2 |               |\n+-------------------+-------------+-------------+---------------+\n</code></pre> <ul> <li>Use <code>'&lt;DF&gt;[col_key_1, col_key_2][row_key]'</code> to get the fifth result's values.</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#dataframe--plot-encode-decode","title":"DataFrame \u2014 Plot, Encode, Decode","text":"Python<pre><code>&lt;DF&gt;.plot.line/bar/hist/scatter/box()          # Also: `x=column_key, y=column_key/s`.\nplt.show()                                     # Displays the plot. Also plt.savefig(&lt;path&gt;).\n</code></pre> Python<pre><code>&lt;DF&gt; = pd.read_json/html('&lt;str/path/url&gt;')     # Run `$ pip3 install beautifulsoup4 lxml`.\n&lt;DF&gt; = pd.read_csv/pickle/excel('&lt;path/url&gt;')  # Use `sheet_name=None` to get all Excel sheets.\n&lt;DF&gt; = pd.read_sql('&lt;table/query&gt;', &lt;conn.&gt;)   # Accepts SQLite3 or SQLAlchemy connection.\n&lt;DF&gt; = pd.read_clipboard()                     # Reads a copied table from the clipboard.\n</code></pre> Python<pre><code>&lt;dict&gt; = &lt;DF&gt;.to_dict(['d/l/s/...'])           # Returns columns as dicts, lists or series.\n&lt;str&gt;  = &lt;DF&gt;.to_json/html/csv([&lt;path&gt;])       # Also to_markdown/latex([&lt;path&gt;]).\n&lt;DF&gt;.to_pickle/excel(&lt;path&gt;)                   # Run `$ pip3 install openpyxl` for xlsx files.\n&lt;DF&gt;.to_sql('&lt;table_name&gt;', &lt;connection&gt;)      # Accepts SQLite3 or SQLAlchemy connection.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#groupby","title":"GroupBy","text":"<p>Object that groups together rows of a dataframe based on the value of the passed column.</p> Python<pre><code>&gt;&gt;&gt; df = DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 6]], index=list('abc'), columns=list('xyz'))\n&gt;&gt;&gt; df.groupby('z').get_group(6)\n   x  y\nb  4  5\nc  7  8\n</code></pre> Python<pre><code>&lt;GB&gt; = &lt;DF&gt;.groupby(column_key/s)              # Splits DF into groups based on passed column.\n&lt;DF&gt; = &lt;GB&gt;.apply(&lt;func&gt;)                      # Maps each group. Func can return DF, Sr or el.\n&lt;GB&gt; = &lt;GB&gt;[column_key]                        # Single column GB. All operations return a Sr.\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#groupby--aggregate-transform-map","title":"GroupBy \u2014 Aggregate, Transform, Map","text":"Python<pre><code>&lt;DF&gt; = &lt;GB&gt;.sum/max/mean/idxmax/all()          # Or: &lt;GB&gt;.agg(lambda &lt;Sr&gt;: &lt;el&gt;)\n&lt;DF&gt; = &lt;GB&gt;.rank/diff/cumsum/ffill()           # Or: &lt;GB&gt;.transform(lambda &lt;Sr&gt;: &lt;Sr&gt;)\n&lt;DF&gt; = &lt;GB&gt;.fillna(&lt;el&gt;)                       # Or: &lt;GB&gt;.transform(lambda &lt;Sr&gt;: &lt;Sr&gt;)\n</code></pre> Python<pre><code>&gt;&gt;&gt; gb = df.groupby('z')\n      x  y  z\n3: a  1  2  3\n6: b  4  5  6\n   c  7  8  6\n</code></pre> Text Only<pre><code>+-------------------+-------------+-------------+-------------+---------------+\n|                   |    'sum'    |    'rank'   |   ['rank']  | {'x': 'rank'} |\n+-------------------+-------------+-------------+-------------+---------------+\n| gb.agg(...)       |      x   y  |      x  y   |      x    y |        x      |\n|                   |  z          |   a  1  1   |   rank rank |     a  1      |\n|                   |  3   1   2  |   b  1  1   | a    1    1 |     b  1      |\n|                   |  6  11  13  |   c  2  2   | b    1    1 |     c  2      |\n|                   |             |             | c    2    2 |               |\n+-------------------+-------------+-------------+-------------+---------------+\n| gb.transform(...) |      x   y  |      x  y   |             |               |\n|                   |  a   1   2  |   a  1  1   |             |               |\n|                   |  b  11  13  |   b  1  1   |             |               |\n|                   |  c  11  13  |   c  2  2   |             |               |\n+-------------------+-------------+-------------+-------------+---------------+\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#rolling","title":"Rolling","text":"<p>Object for rolling window calculations.</p> Python<pre><code>&lt;RSr/RDF/RGB&gt; = &lt;Sr/DF/GB&gt;.rolling(win_size)   # Also: `min_periods=None, center=False`.\n&lt;RSr/RDF/RGB&gt; = &lt;RDF/RGB&gt;[column_key/s]        # Or: &lt;RDF/RGB&gt;.column_key\n&lt;Sr/DF&gt;       = &lt;R&gt;.mean/sum/max()             # Or: &lt;R&gt;.apply/agg(&lt;agg_func/str&gt;)\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#plotly","title":"Plotly","text":"Python<pre><code># $ pip3 install plotly kaleido\nfrom plotly.express import line\n&lt;Figure&gt; = line(&lt;DF&gt;, x=&lt;col_name&gt;, y=&lt;col_name&gt;)        # Or: line(x=&lt;list&gt;, y=&lt;list&gt;)\n&lt;Figure&gt;.update_layout(margin=dict(t=0, r=0, b=0, l=0))  # Or: paper_bgcolor='rgba(0, 0, 0, 0)'\n&lt;Figure&gt;.write_html/json/image('&lt;path&gt;')                 # Also: &lt;Figure&gt;.show()\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#covid-deaths-by-continent","title":"Covid deaths by continent","text":"Python<pre><code>covid = pd.read_csv('https://covid.ourworldindata.org/data/owid-covid-data.csv',\n                    usecols=['iso_code', 'date', 'total_deaths', 'population'])\ncontinents = pd.read_csv('https://gist.githubusercontent.com/stevewithington/20a69c0b6d2ff'\n                         '846ea5d35e5fc47f26c/raw/country-and-continent-codes-list-csv.csv',\n                         usecols=['Three_Letter_Country_Code', 'Continent_Name'])\ndf = pd.merge(covid, continents, left_on='iso_code', right_on='Three_Letter_Country_Code')\ndf = df.groupby(['Continent_Name', 'date']).sum().reset_index()\ndf['Total Deaths per Million'] = df.total_deaths * 1e6 / df.population\ndf = df[df.date &gt; '2020-03-14']\ndf = df.rename({'date': 'Date', 'Continent_Name': 'Continent'}, axis='columns')\nline(df, x='Date', y='Total Deaths per Million', color='Continent').show()\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#confirmed-covid-cases-dow-jones-gold-and-bitcoin-price","title":"Confirmed covid cases, Dow Jones, Gold, and Bitcoin price","text":"Python<pre><code>import pandas as pd\nimport plotly.graph_objects as go\n\ndef main():\n    display_data(wrangle_data(*scrape_data()))\n\ndef scrape_data():\n    def scrape_covid():\n        url = 'https://covid.ourworldindata.org/data/owid-covid-data.csv'\n        df = pd.read_csv(url, usecols=['location', 'date', 'total_cases'])\n        return df[df.location == 'World'].set_index('date').total_cases\n    def scrape_yahoo(slug):\n        url = f'https://query1.finance.yahoo.com/v7/finance/download/{slug}' + \\\n              '?period1=1579651200&amp;period2=9999999999&amp;interval=1d&amp;events=history'\n        df = pd.read_csv(url, usecols=['Date', 'Close'])\n        return df.set_index('Date').Close\n    out = scrape_covid(), scrape_yahoo('BTC-USD'), scrape_yahoo('GC=F'), scrape_yahoo('^DJI')\n    return map(pd.Series.rename, out, ['Total Cases', 'Bitcoin', 'Gold', 'Dow Jones'])\n\ndef wrangle_data(covid, bitcoin, gold, dow):\n    df = pd.concat([bitcoin, gold, dow], axis=1)  # Joins columns on dates.\n    df = df.sort_index().interpolate()            # Sorts by date and interpolates NaN-s.\n    df = df.loc['2020-02-23':]                    # Discards rows before '2020-02-23'.\n    df = (df / df.iloc[0]) * 100                  # Calculates percentages relative to day 1.\n    df = df.join(covid)                           # Adds column with covid cases.\n    return df.sort_values(df.index[-1], axis=1)   # Sorts columns by last day's value.\n\ndef display_data(df):\n    figure = go.Figure()\n    for col_name in reversed(df.columns):\n        yaxis = 'y1' if col_name == 'Total Cases' else 'y2'\n        trace = go.Scatter(x=df.index, y=df[col_name], name=col_name, yaxis=yaxis)\n        figure.add_trace(trace)\n    figure.update_layout(\n        yaxis1=dict(title='Total Cases', rangemode='tozero'),\n        yaxis2=dict(title='%', rangemode='tozero', overlaying='y', side='right'),\n        legend=dict(x=1.1),\n        height=450\n    ).show()\n\nif __name__ == '__main__':\n    main()\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#pysimplegui","title":"PySimpleGUI","text":"Python<pre><code># $ pip3 install PySimpleGUI\nimport PySimpleGUI as sg\nlayout = [[sg.Text(\"What's your name?\")], [sg.Input()], [sg.Button('Ok')]]\nwindow = sg.Window('Window Title', layout)\nevent, values = window.read()\nprint(f'Hello {values[0]}!' if event == 'Ok' else '')\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#appendix","title":"Appendix","text":""},{"location":"dev-notes/python/py-cheatsheet/#cython","title":"Cython","text":"<p>Library that compiles Python code into C.</p> Python<pre><code># $ pip3 install cython\nimport pyximport; pyximport.install()\nimport &lt;cython_script&gt;\n&lt;cython_script&gt;.main()\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#definitions","title":"Definitions","text":"<ul> <li>All <code>'cdef'</code> definitions are optional, but they contribute to the speed-up.</li> <li>Script needs to be saved with a <code>'pyx'</code> extension.</li> </ul> Python<pre><code>cdef &lt;ctype&gt; &lt;var_name&gt; = &lt;el&gt;\ncdef &lt;ctype&gt;[n_elements] &lt;var_name&gt; = [&lt;el_1&gt;, &lt;el_2&gt;, ...]\ncdef &lt;ctype/void&gt; &lt;func_name&gt;(&lt;ctype&gt; &lt;arg_name&gt;): ...\n</code></pre> Python<pre><code>cdef class &lt;class_name&gt;:\n    cdef public &lt;ctype&gt; &lt;attr_name&gt;\n    def __init__(self, &lt;ctype&gt; &lt;arg_name&gt;):\n        self.&lt;attr_name&gt; = &lt;arg_name&gt;\n</code></pre> Python<pre><code>cdef enum &lt;enum_name&gt;: &lt;member_name_1&gt;, &lt;member_name_2&gt;, ...\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#pyinstaller","title":"PyInstaller","text":"Bash<pre><code>pip3 install pyinstaller\npyinstaller script.py                        # Compiles into './dist/script' directory.\npyinstaller script.py --onefile              # Compiles into './dist/script' console app.\npyinstaller script.py --windowed             # Compiles into './dist/script' windowed app.\npyinstaller script.py --add-data '&lt;path&gt;:.'  # Adds file to the root of the executable.\n</code></pre> <ul> <li>File paths need to be updated to <code>'os.path.join(sys._MEIPASS, &lt;path&gt;)'</code>.</li> </ul>"},{"location":"dev-notes/python/py-cheatsheet/#basic-script-template","title":"Basic Script Template","text":"Python<pre><code>#!/usr/bin/env python3\n#\n# Usage: .py\n#\n\nfrom sys import argv, exit\nfrom collections import defaultdict, namedtuple\nfrom dataclasses import make_dataclass\nfrom enum import Enum\nimport functools as ft, itertools as it, operator as op, re\n\n\ndef main():\n    pass\n\n\n###\n##  UTIL\n#\n\ndef read_file(filename):\n    with open(filename, encoding='utf-8') as file:\n        return file.readlines()\n\n\nif __name__ == '__main__':\n    main()\n</code></pre>"},{"location":"dev-notes/python/py-cheatsheet/#index","title":"Index","text":"<ul> <li>Only available in the PDF.</li> <li>Ctrl+F / \u2318F is usually sufficient.</li> <li>Searching <code>'#&lt;title&gt;'</code> on the webpage will limit the search to the titles.</li> </ul>"},{"location":"dev-notes/python/py-snippets/","title":"Python Snippets","text":""},{"location":"dev-notes/python/py-snippets/#debug","title":"Debug","text":"<ul> <li> <p>debug module imports and show what is importing the current module Python<pre><code>import inspect\nprint(inspect.getframeinfo(inspect.getouterframes(inspect.currentframe())[1][0])[0])\n</code></pre></p> </li> <li> <p>if it says <code>&lt;importlib frozen&gt;</code>, then it means the import came from <code>importlib.reload(..)</code></p> </li> </ul>"},{"location":"dev-notes/python/py-snippets/#enums","title":"Enums","text":"<ul> <li> <p>declare Python<pre><code>from enum import Enum, auto\nclass DbgCmdType(Enum):\n  Standalone = auto()\n  Toggle     = auto()\n  IntRange   = auto()\n  FloatRange = auto()\n  String     = auto()\n  ComboBox   = auto()\n</code></pre></p> </li> <li> <p>iterate over enums Python<pre><code>((targetTypeEnum.name,targetTypeEnum.value) for targetTypeEnum in UE4TargetType)\n</code></pre></p> </li> </ul>"},{"location":"dev-notes/python/py-snippets/#type-checking","title":"Type Checking","text":"<ul> <li>exact: <code>type(py_obj) is list</code></li> <li>inheritance Checking: <code>isinstance(py_obj, SWidget)</code></li> </ul>"},{"location":"dev-notes/python/py-snippets/#dictionary","title":"Dictionary","text":"<ul> <li>`<code>dict.get(key\\[, default\\])\\</code>: get with optional default fallback</li> <li>merge dictionary Python<pre><code>x = dict(a=1, b=2)\ny = dict(b=3, d=4)\nz = {**x, **y}\n# z := {'a': 1, 'b': 3, 'd': 4}, note that value for `b` is taken from the latter dict.\n</code></pre></li> </ul>"},{"location":"dev-notes/python/py-snippets/#lists","title":"Lists","text":"<ul> <li> <p>unzip or transpose list of tuples Python<pre><code>original = [('a', 1), ('b', 2), ('c', 3), ('d', 4)]\nzip(*original) =&gt; (['a', 'b', 'c', 'd'], [1, 2, 3, 4])\n</code></pre></p> </li> <li> <p>unzip list of Tuples: Python<pre><code>zipper_list = [(1, 'a'), (2, 'b'), (3, 'c')]\nlist_a, list_b = zip(*zipper_list)\n</code></pre></p> </li> <li> <p>flatten list Python<pre><code>a_list = [[1, 2], [3, 4], [5, 6]]\nprint(list(itertools.chain.from_iterable(a_list))) # Output: [1, 2, 3, 4, 5, 6]\nprint(list(itertools.chain(*a_list))) # Output: [1, 2, 3, 4, 5, 6]\n[*[1,2],*[3]] # Output: [1,2,3]\n</code></pre></p> </li> </ul>"},{"location":"dev-notes/python/py-snippets/#list-comprehensions","title":"List Comprehensions","text":"<ul> <li>nested list comprehensions Python<pre><code># Just think in for-loops syntax. So, If I used for loops for the previous flattening, I\u2019d do something like:\n[y for x in non_flat for y in x]\n# equiv to:\nfor x in non_flat:\n  for y in x:\n    y\n</code></pre></li> </ul>"},{"location":"dev-notes/python/py-snippets/#environment","title":"Environment","text":"<ul> <li>Registry updating</li> </ul> Python<pre><code>from winregistry import WinRegistry\nreg = WinRegistry()\nregPath = r\"HKLM\\System\\CurrentControlSet\\Control\\Session Manager\\Environment\"\nreturn reg.read_value(regPath, envVarName)['data']\nregPath = r\"HKCU\\Environment\"\nreg.write_value(regPath, envVarName, value, valTypeStr)['data']\n</code></pre> <ul> <li>get or set environment variables on windows</li> </ul> Python<pre><code>klcommon.getSysEnvVar(envVarName)\nklcommon.setSysEnvVar(envVarName, value, valTypeStr='REG_EXPAND_SZ')\nklcommon.getUserEnvVar(envVarName)\nklcommon.setUserEnvVar(envVarName, value, valTypeStr='REG_EXPAND_SZ')\n</code></pre> <ul> <li>Python interpreter version number</li> </ul> Python<pre><code>import sys\nsys.version_info\nprint(sys.version)\nprint(sys.executable)\nimport os\nprint(os.__file__)\n</code></pre>"},{"location":"dev-notes/python/py-snippets/#path-manipulations","title":"Path Manipulations","text":"<ul> <li> <p>convert to relative Python<pre><code>ue4_asset_dir = '/Game/' + Path(os.path.relpath(capself.animAssetDirPicker.get_directory(), ue.get_content_dir()))\n</code></pre></p> </li> <li> <p>normalize path Python<pre><code>Path('../mydir').absolute()\n</code></pre></p> </li> <li> <p>convert to forward slashes only Python<pre><code>Path(...).as_posix()\n</code></pre></p> </li> <li> <p>join paths together Python<pre><code>Path('/engine')  / Path('/content')\n</code></pre></p> </li> </ul>"},{"location":"dev-notes/python/py-snippets/#directory","title":"Directory","text":"<ul> <li> <p>list directory contents Python<pre><code>import os\nfor file in os.listdir(\"/mydir\"):\n  if file.endswith(\".txt\"):\n    print(file)\n</code></pre></p> </li> <li> <p>list directory contents with filter Python<pre><code>import os\nimport glob\nos.chdir(\"/mydir\")\nfor file in glob.glob(\"*.txt\"):\n  print(file)\n</code></pre></p> </li> <li> <p>iterate directory hierarchy Python<pre><code>import os\nfor root, dirs, files in os.walk(\"/mydir\"):\n  for file in files:\n    if file.endswith(\".txt\"):\n      print os.path.join(root, file)\n</code></pre></p> </li> <li> <p>list immediate child subdirectories Python<pre><code>next(os.walk('.'))[1]\n</code></pre></p> </li> <li> <p>References</p> </li> <li>http://www.diveintopython.net/file_handling/os_module.html</li> <li>https://docs.python.org/2/library/filesys.html</li> <li>https://stackoverflow.com/questions/973473/getting-a-list-of-all-subdirectories-in-the-current-directory</li> </ul>"},{"location":"dev-notes/rust/rust-cheatsheet/","title":"Rust Cheatsheet","text":"<p>rustup is the preferred rust toolchain manager cargo is the rust package manager</p> <ul> <li>automatically installed by rustup</li> </ul>"},{"location":"dev-notes/rust/rust-cheatsheet/#rustup","title":"Rustup","text":"Command Desc <code>rustup install</code> install rust toolchain <code>rustup update</code> update rust toolchain"},{"location":"dev-notes/rust/rust-cheatsheet/#cargo","title":"Cargo","text":"Command Desc <code>cargo build</code> fetch and compile dependencies <code>cargo build -p &lt;PKG&gt; --release --target-dir &lt;DIR&gt; --features &lt;X,Y...&gt; --all-features</code> 'cargo build' PKG with release profile to target DIR with features X,Y,... <code>cargo check</code> 'cargo build' without final code gen step <code>cargo doc</code> build documentation <code>cargo doc --open --document-private-items --no-deps</code> 'cargo doc' including private items and excluding dependencies <code>cargo install</code> install package <code>cargo run</code> run package <code>cargo run -p &lt;PKG&gt; -- &lt;ARGS&gt;</code> run PKG with command line ARGS <code>cargo test</code> compile/runs tests, doc examples, standalone examples <code>cargo tree</code> display package tree <code>cargo tree -e features --depth N</code> show enabled features on each package up to depth N <code>cargo tree --format \"{p} {f}\" --depth N</code> more compact version of above"},{"location":"dev-notes/typescript/ts-cheatsheet/","title":"TypeScript Cheatsheet","text":""},{"location":"dev-notes/typescript/ts-cheatsheet/#resources","title":"Resources","text":"<ul> <li>Typescript Handbook</li> <li>Typescript Type Search: find npm packages with queried type declarations</li> <li>Typescript Playground</li> <li>Typescript Cheatsheet</li> </ul>"},{"location":"dev-notes/typescript/ts-cheatsheet/#highlevel-differences","title":"Highlevel Differences","text":""},{"location":"dev-notes/typescript/ts-cheatsheet/#semantic-departures","title":"Semantic departures","text":"<ul> <li>interfaces are duck typed</li> </ul>"},{"location":"dev-notes/typescript/ts-cheatsheet/#basic-syntax","title":"Basic Syntax","text":""},{"location":"dev-notes/typescript/ts-cheatsheet/#modules","title":"Modules","text":"<ul> <li>defines own scope for declarations (e.g. <code>variables, functions, classes, etc</code> declara declared in a module are not visible outside the module unless they are explicitly exported using one of the <code>export</code> forms. Conversely, to consume a variable, function, class, interface, etc. exported from a different module, it has to be imported using one of the <code>import</code> forms.</li> <li>modules are declarative with inter-dependencies specified in terms of file-level <code>imports/exports</code></li> <li>any file containing a top-level <code>import</code> or <code>export</code> is considered a module; otherwise, treated as a script whose contents are available in the global scope</li> <li>import/export</li> <li> <p>specific decl declaration</p> TypeScript<pre><code>/* IFoo.ts */\nexport const kFoo = 123;               // export 'kFoo' constant\nexport interface IFoo{...};            // export 'IFoo' interface\n\n/* CFoo.ts */\nimport { IFoo } from \"./IFoo\";         // import 'IFoo' interface\nexport class CFoo implements IFoo{...} // export 'CFoo' class\n\n/* CBar.ts */\nexport { CFoo as CFooB } from \"./CFoo\"; // export 'CFooB' class alias of 'CFoo' class\nexport class CBar{...} \n\n/* Test.ts */ \nimport ifm             from \"./IFoo\"; // import IFoo module\nimport { kFoo }        from \"./IFoo\"; // import 'kFoo' constant\nimport type { IFoo }   from \"./IFoo\"; // type only import 'IFoo' interface\nimport { kFoo, type IFoo} from \"./IFoo\"; // Explicitly pull out a value (kFoo) and a type (IFoo) \nimport IFoo = ifm.IFoo;               // type only import statement version\nimport { CFoo as CFA } from \"./CFoo\"; // import 'CFoo' class as 'CFA' class alias\nlet myFoo = new CFA();\nlet myNum = kFoo * rand(); \n</code></pre> </li> <li> <p>combine/wrap in module</p> TypeScript<pre><code>/* FooLib.ts */\nexport * from \"./IFoo\";        // exports 'kFoo' constant, 'IFoo' interface\nexport * from \"./CFoo\";        // exports 'CFoo'  class\nexport * from \"./CBar\";        // exports 'CFooB' class alias of 'CFoo' class, 'CBar' class\nexport * as ifm from \"./IFoo\"; // export 'ifm' module alias of './IFoo' module\nexport * as cfm from \"./CFoo\"; // export 'cfm' module alias of './CFoo' module\nexport * as cbm from \"./CBar\"; // export 'cbm' module alias of './CBar' module\n\n/* Test.ts */ \nimport { kfoo, CFoo, CBar } from \"./FooLib\"; // import 'kFoo' constant, './CFoo' class, './CBar' class\nimport { ifm, cfm, cbm }    from \"./FooLib\"; // import 'ifm' module alias of './IFoo', 'cfm' module alias of './CFoo', 'cbm' module alias of './CBar' module\nlet myNum1  = kFoo * rand(); \nlet myFoo1  = new CFoo(); \nlet myBar1  = new CBar();\nlet myNum2  = ifm.kFoo * rand(); \nlet myFoo2  = new cfm.CFoo(); \nlet myBar2  = new cbm.CBar();\n</code></pre> </li> <li> <p>default export</p> TypeScript<pre><code>/* value    */ export default \"foo\";                     | import v from \"./V\";\n/* function */ export default function (s: string){...}; | import f from \"./F\";\n/* class    */ export default class Klass{...};          | import c from \"./C\";\n</code></pre> </li> </ul>"},{"location":"dev-notes/unraid/unraid-backup/","title":"Unraid Backup Guide","text":""},{"location":"dev-notes/unraid/unraid-backup/#syncthing","title":"Syncthing","text":"<p>Syncthing syncs between folders. restic does backups. rclone syncs to clouds.</p> <p>Each of the tools overlaps with the other, but in true unix fashion, I'll use them for what they were designed for.</p> <p>Files are synced between machines with Syncthing. It is one of the many, almost unknown jewels of Open Source, running in the background with very little overhead and does what it should with few hiccups.</p> <p>Backup of all unix machines (debian, arch) are done with restic to a restic pool on a macOS server with deduplication. That keeps the volume low and the size of the complete backup pool surprisingly small, and allows me to restore things quickly. Not a bare metal restore, though - I don't need those (except on Windows, which is done with Drive Snapshot).</p> <p>Backup of individual folders to the cloud is done with rclone, some of them encrypted, some not (to allow access from other devices like phones and tablets).</p> <p>But I do not copy my backups to the cloud. There is no real reason for me to do so. For one, the backups are still large, and although I do have enough bandwidth, it would still clog the upload for hours at night. Unnecessary. And if I need to do a backup or restore (usually of a few files only) I want it to be fast - to/from a local backup, not from the cloud. So it'll be local anyway and won't save me anything. But most important: A backup is by definition just a duplication of something I have elsewhere anyway. There is little benefit in sync(thing)ing something from A to B (first copy) and back it up to C (second copy) to push it to the cloud (third copy), where I might have it rclone'd it before in encrypted form (forth copy). I'd have the same file four or five times. Three times is plenty.</p> <p>This is also the reason why I haven't commented on your other questions. After decades in the industry, your questions sound like you want to replicate a companys backup strategy for home use, or rather: read an article about it and plan to do it. There are a zillion answers to your (rather newbie sounding) questions, and I am not the one who wants to change your mind that this is overkill and you are overthinking it comically.</p> <p>If you really think you need five backups of each file, go ahead, do it. You'll learn a lot along the way, and that alone is worth it. You might even realize, two, three years down the road, after things have happened (or not) what you really need. And who knows, if things develop as speedy as they have, backups from local machines to cloud storage might even be financially and technically feasible even for home users and then you'll be all set up to take advantage of it.</p>"},{"location":"dev-notes/unraid/unraid-backup/#rclone","title":"RClone","text":""},{"location":"dev-notes/unraid/unraid-backup/#what-is-recommended-when-copying-large-volumes-and-sized-files","title":"What is recommended when copying large volumes and sized files?","text":"<p>source</p> <p>Being relatively new to rclone, is the command below sufficient in achieving the following (with or without encryption)?</p> <ul> <li>Resuming transfers if interrupted</li> <li>Delta transfers</li> <li>Displaying itemized changes</li> <li>Preserving metadata such as permissions, ownership</li> <li>Parallelization</li> </ul> <p>You command will do pretty well at that, though you don't want --stats and --progress (and --stats takes a time unit, eg <code>--stats 10s</code>.</p> <p>Rclone doesn't do delta transfers like rsync (cloud storage doesn't support it in general) nor preserve permissions (same reason). You can quit and restart rclone and it will pick up where it left off. Rclone is very good at parallel transfers.</p> <p>Rclone stores files 1:1 your disk -&gt; cloud storage.</p> <p>If you want a backup program which does do delta transfers and preserve permissions then you could use restic which can use rclone as a backend to store the actual objects.</p> <p>Being relatively new to rclone, is the command below sufficient in achieving the following (with or without encryption)?</p> <ul> <li>Resuming transfers if interrupted</li> <li>Delta transfers</li> <li>Displaying itemized changes</li> <li>Preserving metadata such as permissions, ownership</li> <li>Parallelization</li> </ul> <p>You command will do pretty well at that, though you don't want --stats and --progress (and --stats takes a time unit, eg <code>--stats 10s</code>.</p> <p>Rclone doesn't do delta transfers like rsync (cloud storage doesn't support it in general) nor preserve permissions (same reason). You can quit and restart rclone and it will pick up where it left off. Rclone is very good at parallel transfers.</p> <p>Rclone stores files 1:1 your disk -&gt; cloud storage.</p> <p>If you want a backup program which does do delta transfers and preserve permissions then you could use restic which can use rclone as a backend to store the actual objects.</p> <p>Being relatively new to rclone, is the command below sufficient in achieving the following (with or without encryption)?</p> <ul> <li>Resuming transfers if interrupted</li> <li>Delta transfers</li> <li>Displaying itemized changes</li> <li>Preserving metadata such as permissions, ownership</li> <li>Parallelization</li> </ul> <p>You command will do pretty well at that, though you don't want --stats and --progress (and --stats takes a time unit, eg <code>--stats 10s</code>.</p> <p>Rclone doesn't do delta transfers like rsync (cloud storage doesn't support it in general) nor preserve permissions (same reason). You can quit and restart rclone and it will pick up where it left off. Rclone is very good at parallel transfers.</p> <p>Rclone stores files 1:1 your disk -&gt; cloud storage.</p> <p>If you want a backup program which does do delta transfers and preserve permissions then you could use restic which can use rclone as a backend to store the actual objects.</p>"},{"location":"dev-notes/unraid/unraid-console/","title":"Unraid Console","text":"<p>source</p>"},{"location":"dev-notes/unraid/unraid-console/#basics-of-console-usage","title":"Basics of Console Usage","text":"<ul> <li>If you are new to Linux, start by reading the Terminal   Access page.</li> <li>The commands below usually list a usage note, which is a link to a   'man page'. In Linux, man pages describe the syntax of command   usage, including all options for the command. Linux splits all of   these command line commands into numbered groups, and often lists   the group number with the command, eg. <code>cat(1)</code>. Ignore the   numbers! I think they are just there to confuse those of us who did   not grow up speaking Linux.</li> <li>In some commands, you have to press the Ctrl-C keystroke combination   to break out. In <code>less</code>, use the <code>q</code> key to quit.</li> <li>When a command produces output that is more than can fit on the   physical console, you can use the Shift-PgUp and Shift-PgDn key   combinations to page up and down through the console display,   including what may appear to have scrolled off the top.</li> <li>The commands below are often compared with DOS or Windows console   commands, but even when they appear essentially equivalent, there   can be very subtle differences, not necessarily mentioned below.</li> <li><code>cat</code> - usage and a how to   use</li> <li><code>cat</code> is like the DOS/Windows <code>type</code>, displays a file on     screen. The file is assumed to be all text, and if not, will     usually display garbage.</li> <li><code>cat</code> is used often below, but could easily be replaced by <code>more</code> or <code>less</code> (eg. <code>cat /proc/cpuinfo</code> could be <code>less /proc/cpuinfo</code>)</li> <li><code>more</code> - usage</li> <li><code>more</code> displays text files like <code>cat</code>, but pages them to the     screen. It waits for a keystroke between each page.</li> <li><code>less</code> - usage</li> <li><code>less</code> pages text files like <code>more</code>, but also lets you page     up and down through them (press <code>q</code> to quit).</li> <li><code>ls</code> - usage</li> <li><code>ls</code> is a little like the DOS/Windows <code>dir</code> command, for     displaying directories in different ways, but the syntax is very     different.</li> <li><code>ls -l</code> is a common way to list complete directory entries</li> <li>see the Command Macros     section for more complex examples</li> <li>Note: in the default setup of Unraid, <code>v</code> is an alias for <code>ls -l</code>, so you can replace the <code>ls -l</code> above with just <code>v</code>. It is OK to use the alias, but it is far better to learn     the actual <code>ls -l</code> command in case you are ever in a situation     where the alias does not exist. (nearly every other Linux based     device will NOT have <code>v</code> as an alias for <code>ls -l</code>, and it may     even be aliased to something completely different!)</li> <li><code>cp</code> - usage</li> <li><code>cp</code> is like the DOS/Windows <code>copy</code> command.</li> <li><code>rm</code> - usage</li> <li><code>rm</code> is like the DOS/Windows <code>del</code> command.</li> <li><code>cd</code> - usage and a how to   use</li> <li><code>cd</code> is like the DOS/Windows <code>cd</code> command.</li> <li><code>cd</code> with no parameters changes to the users home directory</li> <li><code>pwd</code> - usage</li> <li><code>pwd</code> displays the users current directory</li> <li><code>mkdir</code> - usage</li> <li><code>mkdir</code> is like the DOS/Windows <code>md</code> command.</li> <li><code>rmdir</code> - usage</li> <li><code>rmdir</code> is like the DOS/Windows <code>rd</code> command.</li> <li><code>chmod</code> - usage</li> <li><code>chmod</code> is a little like the DOS/Windows <code>attrib</code> command,     but the syntax is very different.</li> <li>The Linux system of security and access attributes is very     different to the Windows system. For more help, see this     and this.</li> <li><code>find</code> - usage</li> <li><code>find</code> is used to search for files</li> <li>Example: the command <code>find . -iname \"file*\"</code> will search     the current folder and all sub-folders for files matching <code>file*</code>, using a case-insensitive search.</li> </ul>"},{"location":"dev-notes/unraid/unraid-console/#console-commands-for-hard-drives","title":"Console Commands for Hard Drives","text":"<p>The following commands require the Device ID, which you can get from the \"Main\" tab of your webgui. Locate your drive, then look for the Device ID in parentheses. It is always 3 lowercase letters, beginning with either hd or sd, eg. sda, sdk, hdc, hdg. For simplicity, sdx will be used below, and you will substitute the appropriate Device ID for your drive. (Extra spaces are added for clarity only, only one space is needed.)</p>"},{"location":"dev-notes/unraid/unraid-console/#hdparm","title":"hdparm","text":"<ul> <li>Instruction manual (a Linux MAN page) =&gt; http://linux.die.net/man/8/hdparm</li> </ul> <p>To view the identity and configuration information for a drive (at the console or terminal prompt)</p> <p><code>hdparm  -I  /dev/sdx</code></p> <p>To determine the read speed of a hard drive, the following command can be used. The very last number in MB/sec is the one you want, ignore the rest. Although one run will give you a decent result, for better accuracy, take the average of at least 5 runs. See also Check Harddrive Speed.</p> <p><code>hdparm  -tT  /dev/sdx</code></p>"},{"location":"dev-notes/unraid/unraid-console/#smartctl","title":"smartctl","text":"<ul> <li>Instruction manual (a Linux MAN page) =&gt; http://smartmontools.sourceforge.net/man/smartctl.8.html</li> </ul> <p>To obtain the SMART info for a drive, including some identity and configuration information, and physical statistics and error history. For more information about SMART and <code>smartctl</code>, see here and here and here and here and here.</p> <p><code>smartctl  -a  -d  ata  /dev/sdx</code></p> <p>Some newer drives and disk controllers will not issue a report if you use the \"-d ata\" option, as they are not \"ata\" drives. (in fact, they will respond with an error message instead) Most older disk controllers did require the \"-d ata\" option, even if SATA drives. If the smartctl report works without \"-d ata\" it is OK to leave it off. If you get an error with \"-d ata\", try without it. The basic command would then be</p> <p><code>smartctl -a /dev/sdx</code></p> <p>To copy the SMART report to a file called smart.txt on your Unraid flash drive, that you can copy elsewhere and post to the forums, use the following command. Of course, you can change the file name to what ever you like, for example, smart_Seagate320_2008-12-15.txt.</p> <p><code>smartctl  -a  -d  ata  /dev/sdx  &gt;/boot/smart.txt</code></p> <p>or</p> <p><code>smartctl  -a  -d  ata  /dev/sdx  |  todos  &gt;/boot/smart.txt</code></p> <p>This second form makes it easier to look at the smart.txt file from a Windows workstation, because it adds the standard end-of-lines that are used in Windows.</p> <p>To run a short or long SMART test on a drive, select one of the following commands (short test takes minutes, long test can take several hours depending on size of drive)</p> <p><code>smartctl  -d  ata  -tshort  /dev/sdx</code> <code>smartctl  -d  ata  -tlong  /dev/sdx</code></p> <p>As of Unraid v4.3 final, smartctl is included with Unraid. Prior to this, it needed to be copied to the flash drive, see this for links to obtaining it. If you had to copy it to your flash drive, then the command to execute would be /boot/smartctl instead of just smartctl. For example, the command to get a SMART report would be</p> <p><code>/boot/smartctl  -a  -d  ata  /dev/sdx</code></p>"},{"location":"dev-notes/unraid/unraid-console/#other-hard-drive-commands","title":"other hard drive commands","text":"<p>To view the partitioning of a drive, the drive geometry, and the total number of sectors</p> <p><code>fdisk  -l  -u  /dev/sdx</code></p> <p>To obtain the total number of sectors on a drive</p> <p><code>blockdev  --getsz  /dev/sdx</code></p> <p>To verify how the drive is labeled (note the \"1\" at the end of the command, indicating the first partition on device /dev/sdx)</p> <p><code>vol_id  /dev/sdx1</code></p> <p>Shows you the drives by their model and serial number and the drive device ID (sda, hdc, etc) linked to each</p> <p><code>ls  -l  /dev/disk/by-id</code> <code>-or-</code> <code>ls  -l  /dev/disk/by-id/[au]*  |  grep  -v  part1</code></p> <p>Lists the drive devices that have \"volume labels\", and device ID linked to each. Typically, only the flash drive will have an entry here and it MUST have a volume label of \"UNRAID\" for Unraid to start up properly</p> <p><code>ls  -l  /dev/disk/by-label</code></p> <p>Note: in the default setup of Unraid, <code>v</code> is an alias for <code>ls -l</code>, so you can replace the <code>ls -l</code> above with just <code>v</code>.</p>"},{"location":"dev-notes/unraid/unraid-console/#console-commands-for-networking","title":"Console Commands for Networking","text":"<p>Here are a few networking commands that will provide more info about the driver, about the card, about its configured parameters and speed, and about its connection statistics.</p> <p>Note: The ethtool utility is included in some but not all Unraid distributions. See here for more information about ethtool, and a download link.</p> <ul> <li><code>lsmod</code> - usage</li> <li>lists the installed kernel modules, including your network     driver</li> <li><code>ethtool -i eth0</code> - usage</li> <li>displays the network driver being used by your network chipset     (for eth0), and its version</li> <li><code>ethtool eth0</code></li> <li>displays a number of the settings for your network chipset</li> <li>displays the speed setting, typically \"Speed: 1000 Mb/s\" for a     gigabit connection</li> <li>displays the Wake-on-LAN setting, typically \"Wake-on: g\" if     enabled for 'magic' packet</li> <li><code>ifconfig</code> - usage</li> <li>displays various numeric parameters and statistics for your     networking</li> <li>displays your MAC address, as <code>HWaddr</code></li> <li>displays your local IP, as <code>inet addr</code></li> <li>displays your MTU setting</li> <li>displays assorted transmit and receive statistics, including     errors and collisions</li> <li><code>ethtool -S eth0</code></li> <li>displays more detailed network statistics</li> <li><code>net lookup google.com</code> - usage</li> <li>check for correct nameserver and DNS configuration, should     provide the IP for Google if setup right</li> <li><code>ping -c5 google.com</code> - usage</li> <li>another way to check for correct nameserver configuration (if it     times out, or produces errors, you need to set a nameserver)</li> <li><code>egrep -i \"eth0|rc.inet1|((forcedeth|r8169|e1000|e1000e|sky2|skge|tg3|bcm5700|sk98lin)[ :])|dhcp\" /var/log/syslog</code> - usage</li> <li>displays lines in the system log (/var/log/syslog) affiliated     with networking</li> </ul>"},{"location":"dev-notes/unraid/unraid-console/#console-commands-for-system-management","title":"Console Commands for System Management","text":"<p><code>section needs more work</code></p> <ul> <li> <p><code>tail -f --lines=99 /var/log/syslog</code> - usage</p> </li> <li> <p>Display current end of syslog</p> </li> <li>If you leave the <code>--lines</code> parameter off, it will display the     last 10 lines, which is often all you need. There are many     situations though where at least a page full is useful, perhaps     even 200 (eg. <code>\\--lines=200</code>).</li> <li>It is essentially real time, use Ctrl-C to quit.</li> <li> <p><code>free -l</code> - usage</p> </li> <li> <p>Show current memory usage</p> </li> <li> <p><code>top</code> - usage</p> </li> <li> <p>List processes, with some memory and CPU stats</p> </li> <li> <p><code>ps -eF</code> - usage</p> </li> <li> <p>List processes (similar to top but ...)</p> </li> <li> <p><code>ps -eo size,pid,time,args --sort -size</code> (those are commas not   periods, double hyphen before sort)</p> </li> <li> <p>List the processes on the server and their memory size (first     column) sorted by memory size</p> </li> <li> <p><code>testparm -sv</code> - usage</p> </li> <li> <p>Show system configuration parameters, including security and     permissions</p> </li> <li> <p><code>w</code> - usage</p> </li> <li> <p>Show who is logged on and what they are doing</p> </li> </ul> <p>For excellent descriptions and examples of the use of <code>screen</code> (usage), see here and here. The <code>screen</code> tool allows you to 'detach' a terminal session, to keep it running even if you log out of the terminal session. An interesting example using <code>screen</code> is in the rtorrent thread.</p>"},{"location":"dev-notes/unraid/unraid-console/#to-cleanly-stop-the-array-from-the-command-line","title":"To cleanly Stop the array from the command line","text":"<p>The following section is from 2011, and does NOT take into consideration any of the extra services etc that Unraid has had incorporated since then.</p> <p>To shutdown the server properly from the command prompt, simply type in</p> <p>powerdown</p> <p>To cleanly stop the array from the linux command line prior to a reboot requires the use of several commands in turn. They will stop SAMBA, unmount the disks, and then stop the Unraid server. These commands can be performed on the linux command line as follows:</p> <p><code>/root/samba stop</code></p> <p>Then, for each of your data disks type (note, the command is umount, not unmount. data disk1=/dev/md1, disk2=/dev/md2, etc...):</p> <p><code>umount /dev/md1</code> <code>umount /dev/md2</code> <code>umount /dev/md3</code> <code>umount /dev/md4</code> <code>umount /dev/md5</code> <code>etc...</code></p> <p><code>/root/mdcmd stop</code></p> <p>Note, a disk will not be able to be unmounted if it is busy. It will be busy if it has an open file, or a process whose current directory is located on the disk. If a disk is unable to be unmounted you'll first need to terminate the processes holding it busy before it can be unmounted.</p> <p>To identify processes holding a disk busy you can type:</p> <p><code>fuser -mv /mnt/disk* /mnt/user/*</code></p> <p>To terminate processes holding a disk busy you can type (example is for disk1):</p> <p><code>fuser -mvk /mnt/disk1</code></p> <p>or you can individually terminate individual process IDs by typing</p> <p><code>kill PID</code></p> <p>(where PID = the numeric process ID as printed by the prior <code>fuser -mv</code> command) --Joe L. 16:54, 3 January 2011 (UTC)</p>"},{"location":"dev-notes/unraid/unraid-console/#console-commands-for-files-and-folders","title":"Console Commands for Files and Folders","text":"<p>Many more file and folder commands can be found in the Basics of Console Usage section above.</p> <ul> <li><code>df</code> - usage</li> <li>reports file system disk space usage</li> <li>example: <code>df /var/log</code> reports space usage of the log folder,     in RAM</li> <li><code>mount</code> - usage</li> <li>mounts file systems; makes your files available!</li> <li><code>umount</code> - usage</li> <li>unmounts mounted file systems</li> <li><code>which</code> - usage</li> <li>checks for shell commands that are executable from the system     path</li> </ul>"},{"location":"dev-notes/unraid/unraid-console/#console-commands-for-system-information","title":"Console Commands for System Information","text":"<p>In the commands below, <code>cat</code> is often used to display info, but <code>more</code> and <code>less</code> can be used instead (see Basics of Console Usage section above).</p>"},{"location":"dev-notes/unraid/unraid-console/#cpu-info","title":"CPU Info","text":"<ul> <li><code>lscpu</code> - usage</li> <li>short summary of CPU info</li> <li><code>cat /proc/cpuinfo</code></li> <li>much longer report of all CPU's</li> <li><code>grep --color lm /proc/cpuinfo</code></li> <li>tests for 64 bit compatibility; if your CPU supports 64bit mode,     then 'lm' will be highlighted in the cpuinfo report</li> <li><code>grep --color vmx /proc/cpuinfo</code></li> <li>tests for Intel VT CPU Virtualization Extensions; if your CPU     supports them, then 'vmx' will be highlighted in the cpuinfo     report</li> <li><code>grep --color svm /proc/cpuinfo</code></li> <li>tests for AMD V CPU Virtualization Extensions; if your CPU     supports them, then 'svm' will be highlighted in the cpuinfo     report</li> <li><code>egrep --color 'lm\\|vmx\\|svm' /proc/cpuinfo</code></li> <li>quick way to test all 3 above (thanks WeeboTech!)</li> </ul>"},{"location":"dev-notes/unraid/unraid-console/#memory-info","title":"Memory Info","text":"<ul> <li><code>free</code> - usage</li> <li>abbreviated summary of general memory info</li> <li>Note: be careful putting much importance on low free memory     numbers, as Linux uses memory very differently than Windows</li> <li><code>free -t</code></li> <li>summary of general memory info with totals</li> <li><code>free -mt</code></li> <li>summary of general memory info with totals, all in megabytes</li> <li><code>cat /proc/meminfo</code></li> <li>more complete report of memory usage</li> <li><code>slabtop</code> - usage</li> <li>displays kernel slab cache information in real time</li> <li><code>slabtop -s c</code></li> <li>slabtop display, but sorted by cache size usage</li> <li><code>vmstat</code> - usage</li> <li>displays virtual memory statistics</li> <li><code>vmstat -m</code></li> <li>detailed memory usage</li> </ul>"},{"location":"dev-notes/unraid/unraid-console/#sensor-info","title":"Sensor Info","text":"<ul> <li><code>sensors</code> - usage</li> <li>displays some of available sensor info, may include system, CPU,     and drive temperatures, system voltages, fan speeds and     settings, etc</li> <li><code>sensors-detect</code> - usage</li> <li>analyses system and displays all available sensors and needed     modules, helps configure <code>sensors.conf</code>,     requires Perl installed first</li> </ul>"},{"location":"dev-notes/unraid/unraid-console/#network-info","title":"Network Info","text":"<ul> <li>Please see the Network   section above</li> </ul>"},{"location":"dev-notes/unraid/unraid-console/#other-hardware-info","title":"Other Hardware Info","text":"<p>Note: the following commands may or may not be installed in your release</p> <ul> <li><code>lspci</code> - usage</li> <li>displays information about PCI buses and devices</li> <li><code>lspci -vnn</code></li> <li>displays more verbose information about PCI buses and devices     (add another <code>v</code> (<code>-vvnn</code>) for even more verbose)</li> <li><code>lspci -knn</code></li> <li>displays more information about PCI buses and devices, including     device numbers and assigned kernel modules</li> <li><code>lsscsi</code> - usage</li> <li>displays information about SCSI devices</li> <li><code>lsscsi -vgl</code> (that's a lower case L)</li> <li>displays more verbose information about SCSI devices, including     ATA numbers!</li> <li><code>lsusb</code> - usage</li> <li>displays information about USB buses and the devices connected     to them</li> <li><code>dmidecode</code> - usage</li> <li>displays the raw information from DMI/SMBIOS tables; may contain     info on system manufacturer, motherboard, BIOS, memory,     chipsets, etc</li> <li>some of it is not human readable, and it is very often     unreliable or wrong</li> <li>if you see Invalid entry length (0). DMI table is broken!     Stop., then the DMI tables are bad. Sometimes a BIOS update     will improve them, but not guaranteed.</li> </ul>"},{"location":"dev-notes/unraid/unraid-console/#version-info","title":"Version Info","text":"<ul> <li><code>uname -a</code> - usage</li> <li>displays the Linux kernel version</li> <li><code>grep \"emhttp: unRAID System Management Utility\" /var/log/syslog</code> - usage</li> <li>displays the UnRAID version</li> <li><code>ethtool -i eth0</code> - usage</li> <li>displays the version of the network driver being used by your     network chipset (for eth0)</li> <li><code>openssl version</code> - usage</li> <li>displays the version of OpenSSL, if installed</li> </ul>"},{"location":"dev-notes/unraid/unraid-console/#command-macros","title":"Command Macros","text":"<p>Typing commands at the console command prompt can get tiresome, especially when repetitive. You can use the up and down keys to repeat previous commands, or at least reduce the typing, but Linux provides for command macros, otherwise called a command alias. Below is a sample macro file (with the file name of <code>macros</code>) that you can use and modify. It requires being executed from your <code>go</code> file, so insert a line into <code>/boot/config/go</code> similar to <code>/boot/macros</code>.</p> Bash<pre><code>#!/bin/bash\n\n# set dn like Windows dir/o-d, newest files first\necho \"alias dn='ls -Aogt --group-directories-first --time-style=long-iso'\"&gt;&gt;/etc/profile\n\n# set ds like dn plus Windows dir/s, newest files first, include all subdirs\necho \"alias ds='ls -AogtR --group-directories-first --time-style=long-iso'\"&gt;&gt;/etc/profile\n\n# start tail of syslog with plenty of lines\necho \"alias tale='tail -f --lines=200 /var/log/syslog'\"&gt;&gt;/etc/profile\n\n# an attempt to emulate the old Norton FF (FileFind)\necho \"alias ff='find . -wholename '/proc' -prune -o -name '\"&gt;&gt;/etc/profile\n\n# set screen blanking (if idle for 10 minutes) and monitor to standby (if idle for 30 minutes)\n/bin/setterm -blank 10 -powersave powerdown -powerdown 30\n</code></pre> <p>When these macros are added to <code>/etc/profile</code>, they are available in any console you open, whether by SSH or Telnet or at the physical console on the UnRAID machine.</p> <p>UnRAID already includes one macro - <code>v</code> is aliased to <code>ls -l</code>.</p>"},{"location":"dev-notes/unraid/unraid-docker-troubleshooting/","title":"Unraid Docker Troubleshooting","text":""},{"location":"dev-notes/unraid/unraid-docker-troubleshooting/#general-docker-issues","title":"General Docker Issues","text":"<p>Source</p>"},{"location":"dev-notes/unraid/unraid-docker-troubleshooting/#bridge-network-type-vs-host-network-type","title":"<code>Bridge Network Type</code> vs <code>Host Network Type</code>","text":"<ul> <li>Bridge networking (default): allows the user to map a port from the host to the container (see later questions)</li> <li>Host networking: means the Docker applications ports cannot be defined and are bound to the Host's adapter</li> </ul>"},{"location":"dev-notes/unraid/unraid-docker-troubleshooting/#what-are-volume-mappings-used-for","title":"What are Volume Mappings used for?","text":"<ul> <li> <p>Means of accessing running container's virtual file system from host; defined in two halves:</p> </li> <li> <p>Host Path:        the full path you wish to share with the Docker Container</p> </li> <li>Container Volume: the root folder that will appear INSIDE the Docker Container <p>[!example] volume mapping of <code>/config /mnt/cache/appdata</code> Will create a folder called \"config\" off the root of the Docker Containers file system This folder will contain all files and folders that exist in the hosts path <code>/mnt/cache/appdata</code></p> </li> </ul> <p>[!warning] Always use the Container Volume Path when configuring the Docker application correct:   <code>/data/completed</code> for completed folder, <code>/data/incomplete</code> for incomplete downloads incorrect: <code>/mnt/user/appdata/completed</code> Host Path</p>"},{"location":"dev-notes/unraid/unraid-docker-troubleshooting/#what-are-these-container-volume-paths-used-for","title":"What are these Container Volume Paths used for?","text":"<ul> <li><code>/config</code>: used to store application configuration, such as ini files, db's, cached data, etc</li> <li><code>/data</code>:   used to store downloaded data generated from the Docker application, such as TV Shows, Movies, Games, etc</li> <li><code>/media</code>:  for Docker applications that index data for user consumption, or that require access to your media library to perform post processing e.g. Plex</li> </ul>"},{"location":"dev-notes/unraid/unraid-docker-troubleshooting/#what-are-port-mappings-used-for","title":"What are Port Mappings used for?","text":"<ul> <li>used to map a hosts ports to a containers ports</li> <li>gives flexibility to have multiple containers running using the same port but are defined as different ports on the host side</li> </ul> <p>[!danger] Don't change the container port when editing the Docker container This is hardcoded and set in the Docker image This also applies to application configuration, the port number should not be changed</p>"},{"location":"dev-notes/unraid/unraid-docker-troubleshooting/#why-are-multiple-container-ports-specified","title":"Why are multiple Container Ports specified?","text":"<ul> <li>sometimes applications require multiple dockerized processes e.g. Deluge</li> <li>has a daemon process that does the downloading</li> <li>a webui process serving the http interface</li> <li>an additional port for incoming requests</li> </ul>"},{"location":"dev-notes/unraid/unraid-docker-troubleshooting/#i-have-a-problem-with-a-docker-are-there-any-logs","title":"I have a problem with a Docker, are there any logs?","text":"<ul> <li>All the Docker containers for this repository use a process manager called Supervisor</li> <li>this will log stdout and stderr to a log file called \"supervisord.log\" in the root of the defined /config hosts path</li> <li>When logging an issue on the forum please attach this to help diagnose the issue quicker</li> </ul>"},{"location":"dev-notes/unraid/unraid-docker-troubleshooting/#since-the-latest-update-i-am-having-issues-with-application-mineosminecraftlibreofficepycharm-and-it-is-unable-to-start-what-is-the-cause-of-this-and-how-can-i-fix-it","title":"Since the latest update i am having issues with application MineOS/Minecraft/Libreoffice/PyCharm and it is unable to start, what is the cause of this and how can i fix it?","text":"<ul> <li>Upgrade the version of 'runc' to '1.0-rc93' or later. Do one of following:</li> <li> <p>Update runc manually</p> <ul> <li> <p>Drop to Terminal for the Unraid server (not the container) and issue the following command to upgrade runc: Bash<pre><code>curl -o '/usr/bin/runc' -L 'https://github.com/binhex/arch-packages/raw/master/static/x86-64/runc/runc' &amp;&amp; chmod +x '/usr/bin/runc'\n</code></pre></p> </li> <li> <p>[!note] This step will be necessary on subsequent restarts of the server (not the container)</p> </li> <li> <p>This is a temporary stopgap until next release of Unraid (6.9.2), which should include latest version of Docker</p> </li> <li>Switch to privileged mode</li> <li>workaround if you do not want to update runc, but it does elevate permissions for the container and increases potential security risks</li> <li>go to web ui/Docker tab/left click icon and select <code>edit</code></li> <li>toggle the <code>Privileged</code> to <code>on</code> and click on <code>Apply</code></li> <li>Roll back to previous version is a last resort</li> <li>roll back to a previous version before the glibc update by using a specifc tagged image</li> </ul> </li> </ul>"},{"location":"dev-notes/unraid/unraid-docker-troubleshooting/#unraid-docker-issues","title":"Unraid Docker Issues","text":"<p>Source</p>"},{"location":"dev-notes/unraid/unraid-docker-troubleshooting/#what-does-the-privileged-check-box-do","title":"What does the Privileged check-box do?","text":"<ul> <li>The Privileged checkbox allows the Docker Container to perform certain privileged activities</li> <li>these are typically required for additional networking functions e.g. creating/editing virtual adapters</li> </ul>"},{"location":"dev-notes/unraid/unraid-docker-troubleshooting/#i-cant-see-how-to-configure-the-settings-for-the-vpn-docker-images","title":"I can't see how to configure the settings for the VPN Docker images","text":"<ul> <li>current default action in the Unraid webui for Docker is to hide the Advanced options</li> <li>for some applications you need to view these advanced options to configure the application using Environment Variables</li> <li>to view these additional fields simply click on the \"Advanced View\" toggle button and then fill in the values</li> </ul>"},{"location":"dev-notes/unraid/unraid-docker-troubleshooting/#i-can-see-there-is-a-newer-version-of-the-docker-application-im-running-can-i-update-the-application-using-the-applications-built-in-update-system","title":"I can see there is a newer version of the Docker application im running, can i update the application using the applications built-in update system?","text":"<ul> <li>in place upgrades are not recommended when using Docker applications; instead wait for a new build from developer</li> <li>Once the new image has been built, then go to the Unraid webui \"Docker\" tab</li> <li>press the \"Check for Updates\" button</li> <li>this should then change the \"Version\" for the Docker container to \"update ready\"</li> <li>simply click on this and click the \"Just do it!\" button to begin the download of the newer image</li> </ul>"},{"location":"dev-notes/unraid/unraid-docker-troubleshooting/#why-cant-my-metadata-application-post-process-my-downloads-from-download-client","title":"Why can't my metadata application post process my downloads from download client?","text":"<ul> <li>The location you set for downloads MUST be consistent for the metadata containers (e.g. Sonarr/Radarr/Lidarr/SickRage/Medusa) and the download container (e.g. NZBGet/SABnzbd/Deluge/qBittorrent/rTorrent)</li> <li>Misconfiguration examples for hypothetical two containers setup: sabnzbdvpn as downloader and sonarr as metadata downloader</li> <li> <p>Broken Example 1</p> <ul> <li>sabnzbdvpn Host Path: <code>/mnt/cache/appdata/data/completed</code> Container Path: <code>/data</code></li> <li>sonarr Host Path: <code>/mnt/cache/appdata/data</code> Container Path: <code>/data</code></li> <li>Problem:    because although the container path (/data) is the same for both containers, the host path does not match</li> <li> <p>Broken Example 2</p> </li> <li> <p>sabnzbdvpn Host Path: <code>/mnt/cache/appdata/data/Completed</code> Container Path: <code>/data</code></p> </li> <li>sonarr Host Path: <code>/mnt/cache/appdata/data/completed</code> Container Path: <code>/data</code></li> <li>Problem:    because although the container path (/data) is the same for both containers, the host path does not match (linux is CaSe sensitive)</li> <li> <p>Broken Example 3</p> </li> <li> <p>sabnzbdvpn Host Path: <code>/mnt/cache/appdata/data/completed</code> Container Path: <code>/data</code></p> </li> <li>sonarr Host Path: <code>/mnt/cache/appdata/data/completed</code> Container Path: <code>/downloads</code></li> <li>Problem:    because although the host path is now ok, the container paths do not match</li> <li> <p>Working Example</p> </li> <li> <p>sabnzbdvpn Host Path: <code>/mnt/cache/appdata/data/completed</code> Container Path: <code>/data</code></p> </li> <li>sonarr Host Path: <code>/mnt/cache/appdata/data/completed</code> Container Path: <code>/data</code></li> <li>Solution:   because BOTH the container path (<code>/data</code>) and the host path (<code>/mnt/cache/appdata/data/completed</code>) EXACTLY match. <p>[!warning] Application Configuration Keep in mind that when you configure sabnzbdvpn and sonarr the paths again must match So if you configure sabnzbdvpn to download to <code>/data/usenet/</code> then you MUST also configure sonarr to use the same path, not <code>/data</code> This again would cause path mismatch, even if you have set the container path and the host path to be the same</p> </li> </ul> </li> </ul>"},{"location":"dev-notes/unraid/unraid-docker-troubleshooting/#there-is-an-issue-with-the-latest-version-of-an-application-how-do-i-roll-back-to-a-specific-version","title":"There is an issue with the latest version of an application, how do i roll back to a specific version?","text":"<ul> <li>in order to pull down a specific version of an application you need to specify the tag with the version you want</li> <li>to find out what tags are available for the docker image you need to go to the first post in the applications support thread</li> <li>copy URL shown after the text \"Docker Hub:\" and append \"tags/\" to the end of the url</li> <li>paste into your browser to retrieve list of available tag names</li> <li>make a note of the tag you want (tag name denotes the version of the application)</li> <li>go the Unraid webui interface</li> <li>left clicking the specific Docker container and selecting \"edit\",</li> <li>then click on the advanced view option (top right) and edit the repository string, adding in \":\" to the end of the name, e.g. to specify a version of 1.0.0.0 for couchpotato.</li> <li>the repository would be changed from: <code>binhex/arch-couchpotato</code> -&gt; <code>binhex/arch-couchpotato:1.0.0.0</code></li> </ul>"},{"location":"dev-notes/unraid/unraid-docker-troubleshooting/#i-am-seeing-corruption-with-the-applications-database-or-issues-when-attempting-to-run-lidarrradarrsonarrplexplexpass-what-could-be-the-cause","title":"I am seeing corruption with the applications database or issues when attempting to run <code>Lidarr/Radarr/Sonarr/Plex/PlexPass</code>, what could be the cause?","text":"<ul> <li> <p>Certain applications are not compatible with FUSE, which is part of Unraid</p> </li> <li> <p>FUSE is used to join or fuse (thus the name) multiple disks together to create a logical view of your media</p> </li> <li> <p>FUSE system is seen when you browse any share with <code>/mnt/user/</code> in the path, such as <code>/mnt/user/appdata</code></p> </li> <li> <p>Due to this limitation certain apps need to have their configuration files defined on non-FUSE share. Fix:</p> </li> </ul> <ol> <li>Stop the docker container that has the issues</li> <li>Left click the icon in the Unraid Web UI and select 'edit'</li> <li>Click on the toggle to switch to 'Advanced View' (top right)</li> <li>Scroll down to the path defined for /config and change it:<ul> <li>if on cache drive:     <code>/mnt/user/appdata/&lt;container name&gt;</code> -&gt; <code>/mnt/cache/appdata/&lt;container name&gt;</code></li> <li>if not on cache drive: <code>/mnt/user/appdata/&lt;container name&gt;</code> -&gt;  <code>/mnt/disk&lt;number&gt;/appdata/&lt;container name&gt;</code></li> </ul> </li> <li>Click on 'apply' to save the change</li> <li>Check the application is running. <p>[!note] If without cache drive and you switch to a specific disk then you may need to reconfigure the application from scratch</p> </li> </ol>"},{"location":"dev-notes/unraid/unraid-docker-troubleshooting/#a-new-feature-requires-me-to-add-in-values-for-a-named-variable-xxxxx-but-i-cant-find-it-in-the-containers-webui-edit-menu","title":"A new feature requires me to add in values for a named variable XXXXX but I can't find it in the Container's Webui 'Edit' menu?","text":"<ul> <li>Unraid doesn't automatically push out new <code>Variables</code> when they are added the the Template by the Docker image developer</li> <li>Fix by either:</li> <li>manually adding any additional <code>Variables</code><ol> <li>Left click on the container you want to add in the new feature and select <code>Edit</code></li> <li>Click on the <code>Advanced view</code> toggle at the top right of the screen.</li> <li>Click on the link <code>Add another Path, Port, Variable, Label or Device</code> at the bottom</li> <li>On the <code>Config Type</code> dropdown and select <code>Variable</code></li> <li>Set the <code>Key:</code> to the name of the feature to add, e.g. <code>VPN_INPUT_PORTS</code> (ask on the support thread on the forum if you are unsure of the name).</li> <li>Set the <code>Value:</code> to be the value for the variable, for the above example that would be something like <code>1234</code> (ask on the support thread on the forum if you are unsure of the value).</li> <li>Click on <code>ADD</code> to add the variable and then click on <code>Apply</code> to apply the change.</li> </ol> </li> <li>recreate the application from scratch<ol> <li>delete the existing template</li> <li>re-download from Community Applications and reconfigure from scratch</li> <li>obviously not ideal and should only be a last resort</li> </ol> </li> </ul> <p>[!note] Some variables allow you to define more than one value this is generally done by use a comma to separate the <code>Value</code> e.g. <code>1234,5678</code> if you are unsure whether the variable supports multiple values then please ask on the support thread on the forum</p>"},{"location":"dev-notes/unraid/unraid-docker-troubleshooting/#im-still-stuck","title":"I'm still stuck","text":"<p>Try the Unraid Docker FAQ</p>"},{"location":"dev-notes/unraid/unraid-filesystem/","title":"Unraid File System","text":"<ul> <li><code>/</code>:         OS runs entirely off RAM disk</li> <li>loaded from flash usb drive</li> <li>not persistent i.e. erased on reboot/shutdown</li> <li><code>/boot</code>:     where flash drive is mounted e.g. the boot drive</li> <li><code>/mnt</code>:      where hard drives are mounted e.g. <code>cache</code>, <code>disk1</code>, <code>disk2</code>, etc</li> <li><code>/mnt/user</code>: where user shares are mounted</li> </ul>"},{"location":"dev-notes/unraid/unraid-filesystem/#boot-flash-drive","title":"Boot Flash Drive","text":"<p>boot drive root gets mounted at <code>/boot</code></p> <ul> <li>(reference)</li> </ul> Text Only<pre><code>bzroot            - from distro; unRAID OS\nbzimage           - from distro; unRAID OS startup\nbzroot-gui        - from distro; optional; unRAID boot and management GUI; only v6.2\nlicense.txt       - from distro; the license text\nmake_bootable.bat - from distro; preps flash drive from DOS or Windows\nmake_bootable_mac - from distro; preps flash drive from Mac\nmemtest           - from distro; Memtest86 5.01, open source version\ninstall.txt       - from distro; installation instructions for preparing the flash drive; only v6.1.2 through v6.1.9\nchanges.txt       - from distro; release notes for current version, possibly for previous versions too; only v6.1.2 on\nreadme.txt        - from older distros; installation and release notes for older versions; only through v6.1.1, not since\nreadvz            - from Preclear plugin; optional; a tool for faster post-reading\n\n/extra    - optional; any packages here will be automatically installed at boot\n/packages - optional; packages here will not be automatically installed, but may be installed by certain plugins\n/logs     - contains syslogs and diagnostics zip files; user may wish to archive old logs\n/plugins  - not used currently\n/previous - contains the previous unRAID version, if user wishes to revert back from current upgrade\n/unmenu   - contains UnMENU files and folders; optional; only if user installs UnMENU\n/syslinux - from distro\n  syslinux.cfg  - from distro, but may be edited by user (user may wish to restore their customized version)\n  syslinux.cfg- - note the trailing hyphen; restores \"factory settings\" when invoked from GUI, when Default is clicked under Syslinux Configuration; do not edit this file!\n/preclear_reports - contains reports from Preclear scripts and plugins; optional\n/config   - contains all user configuration and plugin information; some parts are from distro; if you don't backup entire flash, then backup this folder\n  /plugins                          - contains all plugin files and folders, including Dynamix; a few are from distro\n  /plugins-removed                  - contains the .plg files for plugins that have been removed\n  /plugins-error                    - contains the .plg files for plugins which failed to install on system start up; the original .plg file is moved to this folder and won't be installed on next system start\n  /shares                           - contains all files (*.cfg) that contain the share settings for each User Share; if removed, settings will be recreated with defaults\n  /ssh                              - contains all generated SSH keys (if you delete this folder, it will be regenerated on next boot, with fresh keys)\n  /plugins/dockerMan/templates-user - contains the user templates, the Docker template configuration info\n  Plus.key          - your unraid licence file that you installed\n  go                - from distro and runs as part of boot process.  May be edited by user to add additional steps to boot process\n  stop              - not present unless manually created but if it is present then it runs the contents as part of the shutdown process\n  disk.cfg          - contains various drive settings; if missing, recreated with defaults\n  super.dat         - contains the drive models and serials and their array assignments; recreated empty if missing\n  ident.cfg         - originally from distro, contains basic network identity settings, including NTP\n  network.cfg       - originally from distro, contains basic network settings\n  share.cfg         - contains global share settings; if missing, recreated with defaults\n  smb-extra.conf    - optional; contains special smb settings, such as recycle bin settings\n  domain.cfg        - originally from distro, contains basic domain settings\n  domains.cfg       - obsolete; only in certain v6.2 installations\n  docker.cfg        - originally from distro, contains basic docker settings\n  *.key             - your purchased license key file or files, tied to flash drive GUID\n  parity-checks.log - optional; history of parity checks\n  smart-one.cfg     - contains SMART settings\n  smart-all.cfg     - contains SMART settings\n  passwd            - contains user and password info\n  smbpasswd         - contains user and password info\n  shadow            - contains user and password info\n  secrets           - contains user and password info; may be obsolete from older versions???\n</code></pre>"},{"location":"dev-notes/unraid/unraid-setup/","title":"Unraid Setup","text":""},{"location":"dev-notes/unraid/unraid-setup/#config","title":"Config","text":""},{"location":"dev-notes/unraid/unraid-setup/#docker","title":"Docker","text":"<ul> <li>create custom network</li> </ul> Bash<pre><code>docker network create omninet\n</code></pre> <ul> <li> <p>change docker installation to <code>docker directory</code> instead of <code>btrfs vDisk docker.img</code> to avoid SSD wear</p> </li> <li> <p>some apps (e.g. Dropbox) constantly write to log file</p> </li> <li>this triggers the expected write amplification from <code>BRTFS</code> copy-on-write</li> <li>details</li> </ul>"},{"location":"dev-notes/unraid/unraid-setup/#advanced-disk-settings","title":"Advanced Disk Settings","text":"<ul> <li>Query/Disable/Enable Write Caching (Reference)</li> </ul> <p>[!note] SATA drives</p> Bash<pre><code>hdparm -W  /dev/sdb # Query \nhdparm -W1 /dev/sdb # Enable\nhdparm -W0 /dev/sdb # Disable\n</code></pre> <p>[!note] SAS drives</p> Bash<pre><code>sdparm -g WCE    /dev/sdd # Query \nsdparm --set=WCE /dev/sdd # Enable\nsdparm -c WCE    /dev/sdd # Disable\n</code></pre> <ul> <li>Workarounds<ul> <li>WD Drives</li> <li>Seagate IronWolf Drives</li> </ul> </li> <li> <p>Turn on <code>Turbo Write</code>/<code>Reconstruct Write</code></p> </li> <li> <p>https://wiki.unraid.net/Tips_and_Tweaks#Turn_on_Reconstruct_Write</p> </li> </ul>"},{"location":"dev-notes/unraid/unraid-setup/#vm","title":"VM","text":"<ul> <li> <p>disable <code>Copy-on-write</code> on share storing VM vdisk image files (default is <code>domains</code>)</p> </li> <li> <p>configure <code>CPU Isolation</code> for Unraid Host and <code>CPU Pinning</code> for VM</p> </li> <li> <p>Unraid only needs one or two physical core for peak performance</p> </li> <li>enable performance cpu governor bc the boost trigger from within a vm doesn't consistently work</li> </ul> <p>[!note] Enable performance cpu governor</p> Bash<pre><code>#!/bin/bash\ncat /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor\nfor file in /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor; do echo \"performance\" &gt; $file; done\ncat /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor\n</code></pre> <p>[!note] Restore on-demand cpu governor_</p> Bash<pre><code>#!/bin/bash\ncat /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor\nfor file in /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor; do echo \"ondemand\" &gt; $file; done\ncat /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor\n</code></pre> <ul> <li>ensure <code>clock source=tsc</code></li> </ul> Bash<pre><code>cat /sys/devices/system/clocksource/clocksource0/current_clocksource\n</code></pre> <ul> <li>install Win11 without networking</li> </ul> Batchfile<pre><code>Shift-F10\nOOBE\\BYPASSNRO \n</code></pre> <ul> <li> <p>use <code>network model</code> = <code>virtio</code> instead of default <code>virtio-net</code></p> </li> <li> <p>technical details</p> </li> <li> <p>tweaks for Hyper-V Enlightenments: see details at</p> </li> <li> <p>Optimizing Windows VM</p> </li> <li>Remote Gaming on Unraid</li> <li>Performance Optimizations for Gaming on with KVM/QEMU and PCI passthrough</li> <li> <p>use direct disk path for cache only shares instead of the user share mount path e.g.</p> </li> <li> <p>Default VM Storage Path: <code>/mnt/user/domains/</code> =&gt; <code>/mnt/cache_nvme/domains/</code></p> </li> <li> <p>Windows VM Guest tweaks</p> </li> <li> <p>install the VirtIO drivers</p> </li> <li>install the QEMU Guest Agent</li> <li>disable Hiberfil.sys: <code>powercfg -h off</code></li> <li>set power plan to maximum performance</li> <li>disable index and/or cortana search</li> <li>Nvidia control panel: <code>3D settings</code> -&gt; <code>Manage 3D settings</code> -&gt; <code>Global settings</code><ul> <li>set <code>Power Management mode</code> = <code>Prefer maximum performance</code></li> <li>set <code>Low Latency Mode</code> = <code>On</code></li> </ul> </li> <li> <p>references</p> </li> <li> <p>https://resplendence.com/latencymon</p> </li> <li>https://forums.unraid.net/topic/135867-is-there-a-current-guide-for-setting-up-a-windows-11-vm/</li> </ul>"},{"location":"dev-notes/unraid/unraid-setup/#smb","title":"SMB","text":"<ul> <li>SMB hardening Text Only<pre><code>#disable SMB1 for security reasons\n[global]\n  server min protocol     = SMB3_02\n  client ipc min protocol = SMB3_02\n  restrict anonymous      = 2\n  # client signing        = mandatory\n  # server signing        = mandatory\n  # client ipc signing    = mandatory\n  # client NTLMv2 auth    = yes\n  # smb encrypt           = required\n  # null passwords        = no\n  # raw NTLMv2 auth       = no\n</code></pre></li> </ul>"},{"location":"dev-notes/unraid/unraid-upgrade/","title":"Unraid OS Update","text":""},{"location":"dev-notes/unraid/unraid-upgrade/#backup","title":"Backup","text":"<ul> <li>AppData:               <code>SettingsTab -&gt; Backup/Restore Appdata -&gt; Manual Backup</code></li> <li>Flash Drive:           <code>MainTab     -&gt; FlashSettings -&gt; Flash Backup</code></li> </ul>"},{"location":"dev-notes/unraid/unraid-upgrade/#prep-for-update","title":"Prep For Update","text":"<ul> <li> <p>Check/Update to Latest:</p> </li> <li> <p>Containers:          <code>DockerTab   -&gt; Check For Updates</code></p> </li> <li>Plugins:             <code>PluginsTab  -&gt; Check For Updates</code></li> <li>Pkgs:                <code>SettingsTab -&gt; NerdTools -&gt; Check For Updates</code></li> <li> <p>Disable/Shutdown:</p> </li> <li> <p>Custom Plugins:      <code>un-get update; un-get installed; un-get remove bat; un-get cleanup; plugin remove un-get.plg</code></p> </li> <li>Background Jobs:     <code>ParityCheck/Tuner, Mover, AutoUpdate, AutoBackup</code></li> <li> <p>Sanity Test:</p> </li> <li> <p>Fix Common Problems: <code>SettingsTab -&gt; Fix Common Problems</code></p> </li> <li>Update Assistant:    <code>ToolsTab -&gt; UpdateAssistant -&gt; Run Tests</code></li> <li>Docker:              <code>SettingsTab -&gt; Docker     -&gt; Enable Docker = No</code></li> <li>VM Manager:          <code>SettingsTab -&gt; VM Manager -&gt; Enable VMs    = No</code></li> </ul>"},{"location":"dev-notes/unraid/unraid-upgrade/#apply-upgrade","title":"Apply Upgrade","text":"<ul> <li>Flash Drive Snapshot:  <code>rsync -avh --delete server:/boot/ /mnt/backup/unraid-flash-snapshot/</code> or <code>scp -r server:/boot/*  ~/backup/unraid-flash-snapshot/</code></li> <li>Upgrade OS:            <code>ToolsTab -&gt; UpdateOS</code></li> </ul>"},{"location":"dev-notes/unraid/unraid-upgrade/#restore-settings","title":"Restore Settings","text":"<ul> <li> <p>Check/Update to Latest:</p> </li> <li> <p>Containers</p> </li> <li>Plugins</li> <li>Pkgs</li> <li> <p>Reenable/Restart:</p> </li> <li> <p>Custom Plugins</p> </li> <li>Background Jobs</li> <li>Docker</li> <li>VM Manager</li> <li> <p>Sanity Test:</p> </li> <li> <p>Fix Common Problems</p> </li> <li>Flash Drive Backup</li> </ul>"},{"location":"dev-notes/visual-studio/debug-dll-dependencies/","title":"Debugging DLL Dependencies","text":""},{"location":"dev-notes/visual-studio/debug-dll-dependencies/#loadlibrary","title":"LoadLibrary","text":"<ul> <li>enable loader snapshots via gflags</li> <li>re-run your scenario under a debugger</li> </ul>"},{"location":"dev-notes/visual-studio/debug-dll-dependencies/#managed-dependencies","title":"Managed Dependencies","text":"<ul> <li>Fusion Assembly Binding Log Viewer (<code>Fuslogvw.exe</code>) ships with Visual Studio and can be quickly accessed via the VS console</li> <li>run as admin to get everything logged</li> <li>more info</li> </ul>"},{"location":"dev-notes/visual-studio/debug-dll-dependencies/#dependency-walker","title":"Dependency Walker","text":"<ul> <li>When trying to find all the libraries the project is loading &amp; the order, build with this linker flag: <code>/verbose:lib</code></li> <li>Use dumpbin &amp; dependencywalker to find what libraries/dlls are linked against (MSVCRT/MSVCRTD/LIBCMT/x64 vs x86) Bash<pre><code>dumpbin.exe /Directives                         # use to see the runtime library that is linked\ndumpbin.exe /HEADERS                            # use to see if x86 vs x64 in the machine entry\nDUMPBIN /LINKERMEMBER[:{1|2}] &lt;libraryname.lib&gt; # output all the exported symbols in a lib\n</code></pre></li> </ul>"},{"location":"dev-notes/visual-studio/debug-external-process-start/","title":"Debugging Process Start/External Processes","text":"<p>Use <code>gflags.exe</code></p> <ul> <li>part of windows sdk <code>WindowsSDK\\Debuggers\\x64\\gflags.exe</code></li> <li>helpful for debugging things like UBT which are kicked off as child processes or GUIless stuff like server processes </li> <li>Reference from https://udn.unrealengine.com/questions/225812/debugging-ue4editor-cmdexe.html</li> <li>Also, the check our internal <code>kldevtils</code> python cli toolset which contains these types of helpers</li> </ul>"},{"location":"dev-notes/visual-studio/hardware-breakpoints/","title":"Hardware Breakpoints","text":"<p>The processor can set up to 4 hardware breakpoints. When windows starts executing a thread, it will set the processors registers according to where the thread was last, and resume exectution, until it decides to move to another thread, it then stores the thread's registers and other information accociated with the thread and switches to another. This allows up to 4 HWBPs per a thread. The processor has 8 debug registeres. This is where understanding the window's paging system and virtual addresses will be helpful.</p> <p>They are :</p> <ul> <li>DR0 - Linear address of the first breakpoint</li> <li>DR1 - Linear address of the second breakpoint</li> <li>DR2 - Linear address of the thrid breakpoint</li> <li>DR3 - Linear address of the fourth breakpoint</li> <li>DR4 - Irrelevent to this tutorial, read intel developers manual Vol.3</li> <li>DR5 - Irrelevent to this tutorial, read intel developers manual Vol.3</li> <li>DR6 - Irrelevent to this tutorial, read intel developers manual Vol.3</li> <li>DR7 - Bits representing whether the breakpoint is enabled(locally or globally), the breakpoint's condition, and the breakpoint's size. Along with a few other irrelevent(to this tutorial) variables.</li> </ul>"},{"location":"dev-notes/visual-studio/hardware-breakpoints/#processor-breakpoints","title":"Processor Breakpoints","text":"<p>A processor breakpoint is triggered when a specific memory location is accessed. There are four types of processor breakpoints, corresponding to the kind of memory access that triggers it:</p> Breakpoint Type Action e (execute) Triggered when the processor retrieves an instruction from the specified address. r (read/write) Triggered when the processor reads or writes memory at the specified address. w (write) Triggered when the processor writes memory at the specified address. i (i/o) Triggered when the I/O port at the specified Address is accessed. <p>Reference From https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/processor-breakpoints---ba-breakpoints-</p>"},{"location":"dev-notes/visual-studio/register-filetype-as-hlsl/","title":"Registering HLSL File Types","text":"<p>To enable HLSL syntax highlighting for .usf files:</p> <p>You can save the below text as .reg files and run them, alternatively you can navigate to the path specified and add them manually. With regard to the extension GUID, this should be the same on all installs as it is consistent on mine, however it might be worth checking yours out just in case. You can find it by looking here in your registryHKEY_CURRENT_USERSoftwareMicrosoftVisualStudio12.0_ConfigLanguagesFile Extensions.hlsl or for 2012 hereHKEY_CURRENT_USERSoftwareMicrosoftVisualStudio11.0_ConfigLanguagesFile Extensions.hlsl</p> <p>It is also worth noting that you can associate other types to hlsl here also buy just changing .shader to whatever you want.</p> <p>Spoiler: VS2013ShaderCginc.reg</p> Text Only<pre><code>Windows Registry Editor Version 5.00\n\n[HKEY_CURRENT_USER\\Software\\Microsoft\\VisualStudio\\12.0_Config\\Languages\\File Extensions\\.shader]\n@=\"{B2F072B0-ABC1-11D0-9D62-00C04FD9DFD9}\"\n\"HLSLFile\"=dword:00000001\n\n[HKEY_CURRENT_USER\\Software\\Microsoft\\VisualStudio\\12.0_Config\\Languages\\File Extensions\\.cginc]\n@=\"{B2F072B0-ABC1-11D0-9D62-00C04FD9DFD9}\"\n\"HLSLFile\"=dword:00000001\n</code></pre> <p>From http://forum.unity3d.com/threads/vs-2012-and-2013-cg-syntax-highlighting-no-plugins-required.255209/</p>"},{"location":"dev-notes/visual-studio/rpc-debugger-extension/","title":"Visual Studio Debugger RPC Extension","text":"<p>Of course after writing all this, it soon became obvious that there were better ways. Here's the C# equivalent:</p> C#<pre><code>using EnvDTE;\nnamespace AttachDebugger\n{\n  class Program\n  {\n    static void Main(string[] args)\n    {\n      try\n      {\n        DTE dte = (DTE)System.Runtime.InteropServices.Marshal.GetActiveObject(\"VisualStudio.DTE.10.0\");\n        dte.ExecuteCommand(\"Macros.StarVSMacros.Debug.AttachToGame\");\n      }\n      catch (System.Exception e)\n      {\n        System.Windows.Forms.MessageBox.Show(\"EXCEPTION - Debugger not available: \" + e.Message);\n      }\n    }\n  }\n}\n</code></pre> <p>This is the version I ended up using. All it needs is a reference to EnvDTE added to your C# project to compile. Some references:</p> <ul> <li>Visual Studio extensibility</li> <li>How to: Add References to the EnvDTE and EnvDTE80 Namespaces</li> <li>How to: Get References to the DTE and DTE2 Objects</li> <li>Visual Studio Automation Reference</li> <li>VBScript Primer</li> <li>VBScript Error Handling</li> </ul> <p>From https://github.com/dwilliamson/b/blob/623a4882561c0893e01488730896c6660794e257/Posts/2012-02-07-11-37-23.txt</p>"},{"location":"dev-notes/visual-studio/vs-tips-tricks/","title":"Visual Studio Tips &amp; Tricks","text":""},{"location":"dev-notes/visual-studio/vs-tips-tricks/#useful-flags","title":"Useful Flags","text":"<ul> <li><code>/d1PP</code>: print preprocessor macros</li> <li><code>/d1reportAllClassLayout &amp; /d1reportSingleClassLayoutXXX</code>: dump class packing and alignment layout</li> </ul>"},{"location":"dev-notes/visual-studio/vs-tips-tricks/#vs-debugger","title":"VS Debugger","text":""},{"location":"dev-notes/visual-studio/vs-tips-tricks/#context-operator-syntax","title":"Context Operator Syntax","text":"<ul> <li>There are two ways of specifying context (Reference)   1. <code>{,,[module] } expression</code><ul> <li>The braces must contain two commas and the module (executable or DLL) name or full path.</li> <li>For example, to set a breakpoint at the SomeFunction function of EXAMPLE.dll:</li> <li><code>{,,EXAMPLE.dll}SomeFunction</code></li> <li><code>module!expression</code>   1. <code>module!expression</code></li> <li>Ex: <code>EXAMPLE.dll!SomeFunction</code></li> </ul> </li> <li>module is the name of a module. You can use a full path to disambiguate between modules with the same name.</li> <li>If the module path includes a comma, an embedded space, or a brace, you must use quotation marks around the path so that the context parser can properly recognize the string. Single quotation marks are considered part of a Windows file name, so you must use double quotation marks. For example,</li> <li><code>{,,\"a long, long, library name.dll\"} g_Var</code></li> <li>expression is any valid C++ expression that resolves to a valid target, such as a function name, variable name, or pointer address in module.</li> <li>When the expression evaluator encounters a symbol in an expression, it searches for the symbol in the following order:<ul> <li>Lexical scope outward, starting with the current block, series of statements enclosed in braces, and continuing outward with the enclosing block. The current block is the code containing the current location, instruction pointer address.</li> <li>Function scope. The current function.</li> <li>Class scope, if the current location is inside a C++ member function. Class scope includes all base classes. The expression evaluator uses the normal dominance rules.</li> <li>Global symbols in the current module.</li> <li>Public symbols in the current program.</li> </ul> </li> </ul>"},{"location":"dev-notes/visual-studio/vs-tips-tricks/#commands--pseudovars","title":"Commands &amp; PseudoVars","text":"<ul> <li><code>alias</code>: List useful commands</li> <li>Command window: <code>? \u2026</code> to execute immediate window things</li> <li>Immediate window: <code>&gt; \u2026</code> to execute commands e.g. <code>&gt;shell cmd</code></li> </ul> Pseudovariable Function (Reference) $err Displays the last error value set with the function SetLastError. The value that is displayed represents what would be returned by the GetLastError function. Use $err,hr to see the decoded form of this value. For example, if the last error was 3, the $err,hr would display ERROR_PATH_NOT_FOUND : The system cannot find the path specified. $handles Displays the number of handles allocated in your application. $vframe Displays the address of the current stack frame. $tid Displays the thread ID for the current thread. $env Displays the environment block in the string viewer. $cmdline Displays the command line string that launched the program. $pid Displays the process id. $registername/@registername Displays the contents of the register registername. Normally, you can display register contents just by entering the register name. The only time you need to use this syntax is when the register name overloads a variable name. If the register name is the same as a variable name in the current scope, the debugger interprets the name as a variable name. That's when $registername or @registername comes in handy. $clk Displays the time in clock cycles. $user Displays a structure with account information for the account running the application. For security reasons, the password information is not displayed. $exceptionstack Displays the stack trace of the current Windows Runtime exception. $ exceptionstack works only in UWP apps. $ exceptionstack is not supported for C++ and SEH exceptions $returnvalue Displays the return value of a .NET Framework method."},{"location":"dev-notes/visual-studio/vs-tips-tricks/#format-specifiers","title":"Format Specifiers","text":"Specifier Format Original Watch Value Value Displayed <code>d</code> decimal integer <code>0x00000066</code> <code>102</code> <code>o</code> unsigned octal integer <code>0x00000066</code> <code>000000000146</code> <code>x</code>,<code>h</code> hexadecimal integer (with leading 0x) <code>102</code> <code>0xcccccccc</code> <code>X</code>,<code>H</code> hexadecimal integer (with leading 0x) <code>102</code> <code>0xCCCCCCCC</code> <code>xb</code>,<code>hb</code> hexadecimal integer (no leading 0x) <code>102</code> <code>cccccccc</code> <code>Xb</code>,<code>Hb</code> hexadecimal integer (no leading 0x) <code>102</code> <code>CCCCCCCC</code> <code>b</code> unsigned binary integer (with leading 0b) <code>25</code> <code>0b00000000000000000000000000011001</code> <code>bb</code> unsigned binary integer (no leading 0b) <code>25</code> <code>00000000000000000000000000011001</code> <code>e</code> scientific notation <code>25000000</code> <code>2.500000e+07</code> <code>g</code> shorter of scientific or floating point <code>25000000</code> <code>2.5e+07</code> <code>c</code> single character <code>0x0065</code> <code>101 'e'</code> <code>s</code> <code>const char*</code> string (with quotes) <code>&lt;location&gt; \"hello world\"</code> <code>\"hello world\"</code> <code>sb</code> <code>const char*</code> string (no quotes) <code>&lt;location&gt; \"hello world\"</code> <code>hello world</code> <code>s8</code> UTF-8 string (with quotes) <code>&lt;location&gt; \"This is a UTF-8 coffee cup \u00e2\u02dc-\"</code> <code>\"This is a UTF-8 coffee cup \u2615\"</code> <code>s8b</code> UTF-8 string (no quotes) <code>&lt;location&gt; \"hello world\"</code> <code>hello world</code> <code>su</code> Unicode (UTF-16 encoding) string (with quotes) <code>&lt;location&gt; L\"hello world\"</code> <code>L\"hello world\"</code>,<code>u\"hello world\"</code> <code>sub</code> Unicode (UTF-16 encoding) string (no quotes) <code>&lt;location&gt; L\"hello world\"</code> <code>hello world</code> <code>bstr</code> BSTR binary string (with quotes) <code>&lt;location&gt; L\"hello world\"</code> <code>L\"hello world\"</code> <code>env</code> Environment block (double-null terminated string) <code>&lt;location&gt; L\"=::=::\\\\\"</code> <code>L\"=::=::\\\\\\0=C:=C:\\\\windows\\\\system32\\0ALLUSERSPROFILE=...</code> <code>s32</code> UTF-32 string (with quotes) <code>&lt;location&gt; U\"hello world\"</code> <code>U\"hello world\"</code> <code>s32b</code> UTF-32 string (no quotes) <code>&lt;location&gt; U\"hello world\"</code> <code>hello world</code> <code>en</code> enum <code>Saturday(6)</code> <code>Saturday</code> <code>hv</code> Pointer type indicating value is array heap allocation address e.g. <code>new int[3]</code>. <code>&lt;location&gt;{&lt;first member&gt;}</code> <code>&lt;location&gt;{&lt;first member&gt;, &lt;second member&gt;, ...}</code> <code>na</code> Suppresses the memory address of a pointer to an object. <code>&lt;location&gt;, {member=value...}</code> <code>{member=value...}</code> <code>nd</code> Displays only the base class information, ignoring derived classes <code>(Shape*) square</code> including base+derived class information Displays only base class information <code>hr</code> Win32/HRESULT error code; unnecessary for HRESULTs bc debugger auto decodes them <code>S_OK</code> <code>S_OK</code> <code>wc</code> Window class flag <code>0x0010</code> <code>WC_DEFAULTCHAR</code> <code>wm</code> Windows message numbers <code>16</code> <code>WM_CLOSE</code> <code>nr</code> Suppress \"Raw View\" item <code>nvo</code> Show \"Raw View\" item for numeric values only <code>!</code> Raw format, ignoring any data type views customizations <code>&lt;customized representation&gt;</code> <code>4</code> <code>handle</code> Displays information about win32 handle <code>0x000000000000009c</code> Displays useful information about handle such as thread ID, etc. <p>(Reference)</p>"},{"location":"dev-notes/visual-studio/vs-tips-tricks/#format-pointers-as-arrays","title":"Format Pointers as Arrays","text":"Specifier Format Original Watch Value Value Displayed n Decimal or hexadecimal integer pBuffer,[32] pBuffer,[0x20] Displays pBuffer as a 32 element array. [exp] A valid C++ expression that evaluates to an integer. pBuffer,[bufferSize] Displays pBuffer as an array of bufferSize elements. [exp]s Format array with specifier e.g. string pBuffer,[bufferSize]s Displays pBuffer as a sized string array expand(n) A valid C++ expression that evaluates to an integer pBuffer, expand(2) Displays the third element of pBuffer"},{"location":"dev-notes/visual-studio/vs-tips-tricks/#magic-numbers","title":"Magic Numbers","text":"Code Description (Reference) <code>0xCCCCCCCC</code> Used by Microsoft's C++ debugging runtime library and many DOS environments to mark uninitialized stack memory. CC resembles the opcode of the INT 3 debug breakpoint interrupt on x86 processors. <code>0xCDCDCDCD</code> Used by Microsoft's C/C++ debug malloc() function to mark uninitialized heap memory, usually returned from HeapAlloc()[15] <code>0xFDFDFDFD</code> Used by Microsoft's C/C++ debug malloc() function to mark \"no man's land\" guard bytes before and after allocated heap memory[15] <code>0xFEEEFEEE</code> \"Fee fee\", Used by Microsoft's debug HeapFree() to mark freed heap memory. Some nearby internal bookkeeping values may have the high word set to FEEE as well.[15]"},{"location":"dev-notes/visual-studio/vs-tips-tricks/#crt-runtime-debugging-techniques","title":"CRT runtime Debugging Techniques","text":"<p>http://msdn.microsoft.com/en-us/library/zh712wwf(v=vs.120).aspx http://msdn.microsoft.com/en-us/library/k70yt3e2.aspx</p>"},{"location":"dev-notes/visual-studio/vs-tips-tricks/#global-in-watch-window","title":"Global in Watch Window","text":"<p>The way to scope the global is as follows using the Context Operator: <code>{,,foobar.dll}g_pMyStruct</code> where foobar.dll defines g_pMyStruct as a global pointer. The same syntax can be used to scope breakpoints as well.</p>"},{"location":"dev-notes/visual-studio/vs-tips-tricks/#advanced-debugging","title":"Advanced Debugging","text":"<ul> <li>Common Visual Studio Commands</li> <li>https://docs.microsoft.com/en-us/visualstudio/ide/reference/visual-studio-commands</li> <li>Complete commands can be found in Keyboard, EnvironmentOptions dialog box</li> <li>Can use VCMD to create macros as commands</li> <li>In the immediate window, prefix a command with &gt; to execute e.g. <code>&gt;Debug.AttachDetach</code></li> <li> <p>Execute code in a macro (Reference) C#<pre><code>DTE.Debugger.ExecuteStatement(\"variable_name=0\")\n</code></pre></p> </li> <li> <p>Can execute code in Action:print message section of breakpoint settings by wrapping the value in textfield with {}. Ex:</p> </li> <li><code>{variable_name=0}</code> will set variable_name=0</li> <li>You can also concatenate several instructions on the same line. They simply have to be separated by curly braces (Reference) C++<pre><code>{ {done = (i == 100);} { object.x -= 1.0f; } { data[15] = 3; } }\n</code></pre></li> </ul>"},{"location":"dev-notes/visual-studio/vs-tips-tricks/#tools","title":"Tools","text":"<ul> <li>WinDBG</li> <li>Perfmon</li> <li>Process Explorer</li> <li>Windows Performance Toolkit</li> </ul>"},{"location":"dev-notes/visual-studio/vs-tips-tricks/#rules-of-thumb","title":"Rules of thumb","text":"<ul> <li>If CPU kernel utilization is high, then it's a driver problem</li> <li>If System interrupts .1%, driver problem</li> <li>In process monitor, look at System|interrupts process and look at threads/modules to see what's pegging CPU</li> <li>Driverquery |find \"driverdllname\" to find info about a driver (don't use</li> <li>strings binary.exe: &gt;bla.txt sysinternals tool to produce all string parameters for a binary</li> </ul>"},{"location":"dev-notes/visual-studio/vs-tips-tricks/#misc","title":"Misc","text":""},{"location":"dev-notes/visual-studio/vs-tips-tricks/#debugging-dependencies","title":"Debugging Dependencies","text":"<ul> <li>LoadLibrary calls</li> <li>Managed dependencies</li> <li>Dependency Walker</li> </ul>"},{"location":"dev-notes/visual-studio/vs-tips-tricks/#property-sheets","title":"Property Sheets","text":"<ul> <li>Dump final merged properties from all .props files: <code>msbuild /pp:temp.xml .build/es2.vcxproj</code></li> <li>You can also set the MSBuild Logging level to Diagnostic </li> </ul>"},{"location":"dev-notes/vscode/vsc-syntax-highlighting/","title":"VSCode Syntax Highlighting","text":""},{"location":"dev-notes/vscode/vsc-syntax-highlighting/#token-highlighting","title":"Token Highlighting","text":"<ul> <li>colors/font styles applied through scopes</li> <li>scopes specified as least-to-most specific dotted string e.g.</li> <li>match resolution done on each dotted label from left to right</li> <li>prefix matching is the standard way to have a color scheme apply to multiple syntaxes</li> <li>Example</li> <li>if keyword in php := <code>keyword.control.php</code></li> <li>instead of matching <code>keyword.control.php</code>, most color schemes will instead assign a color to <code>keyword</code></li> <li>most common to match first one or two labels in a scope</li> <li>including final label in scope (e.g. <code>php</code>) used for syntax-specific overrides/exceptions</li> <li>References</li> <li>SublimeText Scope Definitions &amp; Naming Guide</li> <li>TextMate Scope Naming Conventions</li> <li>TextMate Scope Selectors</li> </ul>"},{"location":"dev-notes/vscode/vsc-syntax-highlighting/#minimal-scope-coverage","title":"Minimal Scope Coverage","text":"<ul> <li> <p>recommended minimal set of scopes to highlight</p> </li> <li> <p><code>entity.name</code></p> </li> <li><code>entity.other.inherited-class</code></li> <li><code>entity.name.section</code></li> <li><code>entity.name.tag</code></li> <li><code>entity.other.attribute-name</code></li> <li><code>variable</code></li> <li><code>variable.language</code></li> <li><code>variable.parameter</code></li> <li><code>variable.function</code></li> <li><code>constant</code></li> <li><code>constant.numeric</code></li> <li><code>constant.language</code></li> <li><code>constant.character.escape</code></li> <li><code>storage.type</code></li> <li><code>storage.modifier</code></li> <li><code>support</code></li> <li><code>keyword</code></li> <li><code>keyword.control</code></li> <li><code>keyword.operator</code></li> <li><code>keyword.declaration</code></li> <li><code>string</code></li> <li><code>comment</code></li> <li><code>invalid</code></li> <li><code>invalid.deprecated</code></li> <li> <p><code>meta.*</code> scopes: refrain from directly styling</p> </li> <li> <p>they're primarily intended to provide contextual information for preferences and plugins</p> </li> <li> <p><code>entity.name</code>: specify color that will be applied to classes, types, structs, interfaces and many other data structures</p> </li> <li> <p>then override for the two scopes <code>entity.name.tag</code> and <code>entity.name.section</code>, that are used for different types of constructs</p> </li> <li>rationale: historically, many color schemes provide one color for <code>entity.name.function</code> and <code>entity.name.type</code>, and a different color for <code>entity.name.tag</code> but leaves new <code>entity.name.*</code> scopes un-highlighted</li> </ul>"},{"location":"dev-notes/vscode/vsc-syntax-highlighting/#example-c-tokens-and-scopes-using-intellisense","title":"Example: C++ Tokens and Scopes using IntelliSense","text":"Token Semantic Token name Fallback TextMate Scope Class Template <code>templateType</code> <code>entity.name.type.class.templated</code> Enumerator <code>enumMember</code> <code>variable.other.enummember</code> Event (C++/CLI) <code>event</code> <code>variable.other.event</code> Function <code>function</code> <code>entity.name.function</code> Function Template <code>templateFunction</code> <code>entity.name.function.templated</code> Generic Type (C++/CLI) <code>genericType</code> <code>entity.name.type.class.generic</code> Global Variable <code>variable.global</code> <code>variable.other.global</code> Label <code>label</code> <code>entity.name.label</code> Local Variable <code>variable.local</code> <code>variable.other.local</code> Macro <code>macro</code> <code>entity.name.function.preprocessor</code> Member Field <code>property</code> <code>variable.other.property</code> Member Function <code>member</code> <code>entity.name.function.member</code> Namespace <code>namespace</code> <code>entity.name.namespace</code> New / Delete <code>newOperator</code> <code>keyword.operator.new</code> Operator Overload Function <code>operatorOverload</code> <code>entity.name.function.operator</code> Operator Overload Member <code>memberOperatorOverload</code> <code>entity.name.function.operator.member</code> Parameter <code>parameter</code> <code>variable.parameter</code> Property (C++/CLI) <code>cliProperty</code> <code>variable.other.property.cli</code> Reference Type (C++/CLI) <code>referenceType</code> <code>entity.name.type.class.reference</code> Static Member Field <code>property.static</code> <code>variable.other.property.static</code> Static Member Function <code>member.static</code> <code>entity.name.function.member.static</code> Type <code>type</code> <code>entity.name.type</code> User-Defined Literal - Number <code>numberLiteral</code> <code>entity.name.operator.custom-literal.number</code> User-Defined Literal - Raw <code>customLiteral</code> <code>entity.name.operator.custom-literal</code> User-Defined Literal - String <code>stringLiteral</code> <code>entity.name.operator.custom-literal.string</code> Value Type (C++/CLI) <code>valueType</code> <code>entity.name.type.class.value</code>"},{"location":"dev-notes/vscode/vsc-syntax-highlighting/#semantic-highlighting","title":"Semantic Highlighting","text":""},{"location":"dev-notes/vscode/vsc-syntax-highlighting/#semantic-token-types","title":"Semantic Token Types","text":"Semantic Token Type Desc <code>namespace</code> identifiers that declare or reference a namespace, module, or package <code>class</code> identifiers that declare or reference a class type <code>enum</code> identifiers that declare or reference an enumeration type <code>interface</code> identifiers that declare or reference an interface type <code>struct</code> identifiers that declare or reference a struct type <code>typeParameter</code> identifiers that declare or reference a type parameter <code>type</code> identifiers that declare or reference a type that is not covered above <code>parameter</code> identifiers that declare or reference a function or method parameters <code>variable</code> identifiers that declare or reference a local or global variable <code>property</code> identifiers that declare or reference a member property, member field, or member variable <code>enumMember</code> identifiers that declare or reference an enumeration property, constant, or member <code>decorator</code> identifiers that declare or reference decorators and annotations <code>event</code> identifiers that declare an event property <code>function</code> identifiers that declare a function <code>method</code> identifiers that declare a member function or method <code>macro</code> identifiers that declare a macro <code>label</code> identifiers that declare a label <code>comment</code> tokens that represent a comment <code>string</code> tokens that represent a string literal <code>keyword</code> tokens that represent a language keyword <code>number</code> tokens that represent a number literal <code>regexp</code> tokens that represent a regular expression literal <code>operator</code> tokens that represent an operator"},{"location":"dev-notes/vscode/vsc-syntax-highlighting/#semantic-token-modifiers","title":"Semantic Token Modifiers","text":"Semantic Token Modifier Desc <code>declaration</code> declarations of symbols <code>definition</code> definitions of symbols, for example, in header files <code>readonly</code> readonly variables and member fields (constants) <code>static</code> class members (static members) <code>deprecated</code> symbols that should no longer be used <code>abstract</code> types and member functions that are abstract <code>async</code> functions that are marked async <code>modification</code> variable references where the variable is assigned to <code>documentation</code> occurrences of symbols in documentation <code>defaultLibrary</code> symbols that are part of the standard library"},{"location":"dev-notes/vscode/vsc-syntax-highlighting/#semantic-token-scope-map","title":"Semantic Token Scope Map","text":"<p>theme applies highlighting with selector rule and style pair</p> <ul> <li>selector syntax: <code>(*|tokenType)(.tokenModifier)*(:tokenLanguage)?</code></li> <li>on match rule: apply style to token; style format is same as in <code>tokenColors</code></li> <li>on match fail: vscode attempts evaluating semantic rule as normal TextMate scope using <code>Semantic Token Scope Map</code></li> <li>ex: JSON<pre><code>`\"*.declaration\": { \"bold\": true } // all declarations are bold\n`\"class:java\":    { \"foreground\": \"#0f0\", \"italic\": true } // classes in java\n</code></pre></li> </ul> Semantic Token Selector TextMate Scope <code>namespace</code> <code>entity.name.namespace</code> <code>type</code> <code>entity.name.type</code> <code>type.defaultLibrary</code> <code>support.type</code> <code>struct</code> <code>storage.type.struct</code> <code>class</code> <code>entity.name.type.class</code> <code>class.defaultLibrary</code> <code>support.class</code> <code>interface</code> <code>entity.name.type.interface</code> <code>enum</code> <code>entity.name.type.enum</code> <code>function</code> <code>entity.name.function</code> <code>function.defaultLibrary</code> <code>support.function</code> <code>method</code> <code>entity.name.function.member</code> <code>macro</code> <code>entity.name.function.macro</code> <code>variable</code> <code>variable.other.readwrite</code> , <code>entity.name.variable</code> <code>variable.readonly</code> <code>variable.other.constant</code> <code>variable.readonly.defaultLibrary</code> <code>support.constant</code> <code>parameter</code> <code>variable.parameter</code> <code>property</code> <code>variable.other.property</code> <code>property.readonly</code> <code>variable.other.constant.property</code> <code>enumMember</code> <code>variable.other.enummember</code> <code>event</code> <code>variable.other.event</code>"},{"location":"dev-notes/vscode/vsc-syntax-highlighting/#custom-semantic-tokens","title":"Custom Semantic Tokens","text":"<ul> <li> <p>extensions can extend/create new token types/modifiers/scope maps</p> </li> <li> <p><code>semanticTokenTypes</code>: contribution point for types</p> <ul> <li><code>id</code>: new type id</li> <li><code>superType</code>: optionally inherit styling rules from this type</li> </ul> </li> <li><code>semanticTokenModifiers</code>: contribution point for modifiers<ul> <li><code>id</code>: new modifier id</li> </ul> </li> <li><code>semanticTokenScopes</code>: contribution point for scope mappings<ul> <li><code>language</code>: optional language-specific scopes</li> <li><code>scopes</code>: semanticToken-to-textmateScopes map; each entry can be 1-to-many</li> </ul> </li> <li> <p>Ex:</p> </li> <li> <p>'my.foo-ext': package.json file JSON<pre><code>{\n  \"contributes\": {\n    \"semanticTokenTypes\": [{\n      \"id\":          \"barType\",\n      \"superType\":   \"type\",\n      \"description\": \"custom bar type\"\n    }],\n    \"semanticTokenModifiers\": [{\n      \"id\":          \"native\",\n      \"description\": \"annotate symbol as native\"\n    }],\n    \"semanticTokenScopes\": [{\n      \"language\": \"typescript\",\n      \"scopes\":   { \"property.readonly\": [ \"variable.other.constant.property.ts\" ] }\n    }],\n  }\n}\n</code></pre></p> <ul> <li>adds new semantic token type <code>barType</code> and semantic modifier <code>native</code></li> <li>theme styling rules for <code>type</code> will also apply to <code>barType</code></li> <li>theme/color config elsewhere</li> </ul> </li> </ul> JSON<pre><code>{\n  \"name\": \"MyRedTheme\",\n  \"semanticTokenColors\": { \"type\": \"#ff0011\" }\n}\n</code></pre> <ul> <li><code>semanticTokenColors</code> value <code>\"#ff0011\"</code> applies to both <code>type</code> and <code>barType</code></li> </ul>"},{"location":"dev-notes/vscode/vsc-syntax-highlighting/#resources","title":"Resources","text":"<ul> <li>Scope Inspector: extension dev tool for live inspecting scopes, semantic tokens, matched theme rules</li> <li>Semantic Tokens Sample</li> <li>Syntax Highlight Guide</li> <li>Semantic Highlight Guide</li> </ul>"},{"location":"dev-notes/vscode/vsc-troubleshooting/","title":"VSCode Troubleshooting","text":""},{"location":"dev-notes/vscode/vsc-troubleshooting/#install","title":"Install","text":"<ul> <li>install paths</li> <li>portable mode: wherever you unzip</li> <li>system installer: <code>C:/Program Files/Microsoft VS Code</code></li> <li>user installer: <code>C:/Users/%USERNAME%/AppData/Local/Programs/Microsoft VS Code</code></li> <li>data directory:<code>%APPDATA%/Code</code></li> <li>extension install dir: <code>%USERPROFILE%/.vscode</code></li> <li>user settings: <code>%APPDATA%/Code/User</code></li> <li>persisted workspace settings (e.g. extension states, Don't Show Again... prompts,etc) stored in sql database</li> <li>global: <code>%APPDATA%/Code/User/globalStorage/state.vscdb</code></li> <li>workspace: <code>%APPDATA%/Code/User/workspaceStorage/&lt;workspace ID&gt;/state.vscdb</code></li> <li>can view with SQLite Browser</li> </ul>"},{"location":"dev-notes/vscode/vsc-troubleshooting/#troubleshooting-tips","title":"Troubleshooting Tips","text":"<ul> <li> <p>Performance</p> </li> <li> <p>Perf Tools</p> </li> <li><code>application.experimental.rendererProfiling</code>: automatically profile slow renderer-processes</li> <li>Diagnostics</li> </ul> Diagnostics CLI <code>-v</code>,<code>--version</code> print version <code>--verbose</code> print verbose output (implies --wait) <code>--log &lt;level&gt;</code> enable global log level (<code>off</code>,<code>critical</code>,<code>error</code>,<code>warn</code>,<code>info</code>,<code>debug</code>,<code>trace</code>); default is <code>info</code> <code>--log &lt;ext-id&gt;:&lt;level&gt;</code> enable per extension log level <code>-s</code>,<code>--status</code> print process usage and diagnostics information <code>--prof-startup</code> run CPU profiler during startup <code>--disable-extensions</code> disable all installed extensions <code>--disable-extension &lt;ext-id&gt;</code> disable an extension `--sync &lt;on off&gt;` <code>--inspect-extensions &lt;port&gt;</code> allow debugging and profiling of extensions <code>--inspect-brk-extensions &lt;port&gt;</code> allow debugging and profiling of extensions with the extension host being paused after start <code>--disable-gpu</code> disable GPU hardware acceleration <code>--max-memory &lt;memory&gt;</code> max memory size for a window (in Mbytes) <code>--telemetry</code> shows all telemetry events which VS code collects <code>-p, --performance</code> Start with the Developer: Startup Performance command enabled <ul> <li> <p>Extensions</p> </li> <li> <p>VSCode Discussions</p> </li> </ul>"},{"location":"dev-notes/vscode/vsc-troubleshooting/#cli","title":"CLI","text":"App Management CLI <code>-h</code>, <code>--help</code> print usage <code>-v</code>, <code>--version</code> print VS Code version <code>-n</code>, <code>--new-window</code> starts new session of VS Code instead of restoring the previous session (default) <code>-r</code>, <code>--reuse-window</code> forces opening a file or folder in the last active window <code>--locale &lt;locale&gt;</code> set display language e.g. <code>en-US</code> or <code>zh-TW</code> <code>--extensions-dir &lt;dir&gt;</code> Set the root path for extensions. Has no effect in portable mode <code>--user-data-dir &lt;dir&gt;</code> Specifies the directory that user data is kept in, useful when running as root. Has no effect in portable mode File Management CLI <code>-g</code>, <code>--goto</code> used with file:line{:character} to open file at specific line and optional character position <code>-d</code>, <code>--diff &lt;file1&gt; &lt;file2&gt;</code> diff two files <code>-m</code>, <code>--merge  &lt;path1&gt; &lt;path2&gt; &lt;base&gt; &lt;result&gt;</code> three-way merge <code>-w</code>, <code>--wait</code> wait for the files to be closed before returning <code>file</code> file to open; will be created and marked as edited if doesn't exist. can specify multiple files using space separator for each <code>file:line[:character]</code> used with the <code>-g</code> argument. Name of a file to open at the specified line and optional character position <code>folder</code> name of a folder to open. You can specify multiple folders and a new Multi-root Workspace is created <code>--add &lt;dir&gt;</code> add folder(s) to the last active window for a multi-root workspace Extension Management CLI <code>--install-extension &lt;ext&gt;</code> Install an extension. Provide the full extension name <code>publisher.extension</code> as an argument. Use <code>--force</code> argument to avoid prompts <code>--uninstall-extension &lt;ext&gt;</code> Uninstall an extension. Provide the full extension name <code>publisher.extension</code> as an argument <code>--disable-extensions</code> Disable all installed extensions. Extensions will still be visible in the Disabled section of the Extensions view but they will never be activated <code>--list-extensions</code> List the installed extensions <code>--show-versions</code> Show versions of installed extensions, when using <code>--list-extensions</code> <code>--enable-proposed-api &lt;ext&gt;</code> Enables proposed api features for an extension. Provide the full extension name <code>publisher.extension</code> as an argument"},{"location":"dev-notes/win-internals/cmd/","title":"Windows Command Shell","text":""},{"location":"dev-notes/win-internals/cmd/#useful-shell-commands","title":"Useful Shell Commands","text":"<ul> <li>Fast clone directory:</li> </ul> Batchfile<pre><code>robocopy \"%SRC%\" \"%DST%\" /MIR\n</code></pre> <ul> <li>Fast directory erase (Reference)</li> </ul> <p>[!danger]- <code>del</code> will erase symlink's actual target, not just the symlink To list all symlinks in a folder</p> Batchfile<pre><code>@rem list all symlinks\n@rem  /al: display files with Reparse Points attribute\n@rem  /s: recurse\n@rem  /b: leave out heading information/summary\ndir /al/s/b \"%FOLDER%\"\n</code></pre> Batchfile<pre><code>@rem del: needed bc 'rmdir' cannot erase directory containing files\n@rem  /f: force delete read-only files\n@rem  /s: deletes specified files from all subdirectories\n@rem  /q: quiet mode, suppress confirmation to delete with global wildcard\n@rem rmdir:\n@rem  /s: recursive erase of directory including files\n@rem  /q: quiet mode, suppress confirmation to delete directory tree\ndel /f/s/q \"%FOLDER%\" &gt; nul\nrmdir /s/q \"%FOLDER%\"\n</code></pre> <ul> <li>Remove empty directories</li> </ul> Batchfile<pre><code>robocopy \"%FOLDER%\" \"%FOLDER%\" /S/PURGE\n</code></pre>"},{"location":"dev-notes/win-internals/cmd/#windows-symlink","title":"Windows SymLink","text":"Link Types To Files? To Folders? Across Volumes? May Not Exit? Command Shortcut Yes Yes Yes Yes shortcut.exe -t target -a args Symbolic link Yes Yes Yes Yes <code>mklink /D LinkDir TargetDir</code> or <code>mklink LinkFile TargetFile</code> Hard link Yes No No No <code>mklink /H LinkFile TargetFile</code> Junction (soft link) No Yes Yes on same computer Yes <code>mklink /J LinkDir TargetDir</code> <ul> <li>Symbolic Links/Directory Junctions: implemented using reparse points</li> <li>Junction/Symlink: main difference is when looking at a remote server</li> <li>Junctions are processed at the server</li> <li>Directory symlinks are processed at the client</li> <li>Hard Links: implemented with multiple file table entries pointing to same inode</li> <li>if original filename is deleted, the hard link will still work bc it points directly to the data on disk</li> <li>Reference here and here</li> </ul>"},{"location":"dev-notes/win-internals/cmd/#parameters","title":"Parameters","text":"<ul> <li><code>%0</code>: pathname of batch script itself</li> <li><code>%1</code>....<code>%9</code>: reference argument by number</li> <li><code>%*</code>: refers to all the arguments e.g. <code>%1 %2 %3 %4 %5 ...%255</code></li> <li>expansion modifiers</li> <li><code>%~f1</code>:     expand %1 to a fully qualified path name e.g. <code>c:\\utils\\MyFile.txt</code></li> <li><code>%~d1</code>:     expand %1 to a drive letter only e.g. <code>c:</code></li> <li><code>%~p1</code>:     expand %1 to a path only including trailing \\ e.g. <code>\\utils\\</code></li> <li><code>%~n1</code>:     expand %1 to a file Name without file extension or path - <code>MyFile</code>  or if only a path is present, with no trailing backslash, the last folder in that path.</li> <li><code>%~x1</code>:     expand %1 to a file eXtension only - .txt</li> <li><code>%~s1</code>:     change the meaning of f, n, s and x to reference the Short 8.3 name (if it exists)</li> <li><code>%~1</code>:      expand %1 removing any surrounding quotes <code>\"</code></li> <li><code>%~a1</code>:     display the file attributes</li> <li><code>%~t1</code>:     display the date/time</li> <li><code>%~z1</code>:     display the file size</li> <li><code>%~$PATH:1</code> search the PATH environment variable and expand %1 to the fully qualified name of the first match found</li> <li>expansion modifiers can be combined</li> <li><code>%~dp1</code> expand %1 to a drive letter and path only</li> <li><code>%~sp1</code> expand %1 to a path shortened to 8.3 characters</li> <li><code>%~nx2</code> expand %2 to a file name and extension only</li> </ul>"},{"location":"dev-notes/win-internals/cmd/#scripts","title":"Scripts","text":"<ul> <li><code>cmd [options] \"command\" [parameters]</code>: starts new shell in same window, optionally runing program/command/batch</li> <li>environment is inherited but changes not persisted back</li> <li><code>/c</code>: runs command and auto terminates</li> <li><code>/k</code>: runs command and remain open<ul> <li>This is useful for testing, e.g. to examine variables</li> </ul> </li> <li>If <code>/c or /k</code>, remainder of command line processed as an immediate command in new shell</li> <li>for multiple commands, surround with quotes and use command separator '&amp;' or '&amp;&amp;'; e.g. <code>cmd /c \"foo.cmd &amp;&amp; bar.cmd\"</code></li> <li>more usecases</li> <li><code>start \"title\" [options] \"command\" [parameters]</code>: start a program/command/batch in a new window</li> <li>environment is inherited but changes not persisted back</li> <li> <p>[!info] behavior is different depending on context/command if command is shell command or batch file: processed with <code>cmd.exe /K</code> i.e. window remains open inside batch script, a <code>start</code> without <code>/wait</code> launches program and continues script execution</p> </li> <li> <p>more usecases</p> </li> <li><code>call [parameters]</code>: invoke a batch script or subroutine</li> <li>environment is inherited but changes are persisted back</li> <li>use <code>setlocal</code> and <code>endlocal</code> to keep variables in different files separate</li> <li>more usecases</li> <li> <p>[!warning] invoking batch script from another without <code>call</code> or <code>start</code> terminates first script and allows second one to take over</p> </li> <li> <p><code>pause</code>,<code>puase &gt;nul</code>: to pause execution until keypress (Reference)</p> </li> </ul>"},{"location":"dev-notes/win-internals/cmd/#cheatsheet","title":"Cheatsheet","text":"<ul> <li>launching commands/scripts</li> </ul> Window OnExecute OnFinish Changes Example new continue auto close non-persistent <code>start \"title\" cmd /c bar.exe arg1 arg2</code> new continue keep open non-persistent <code>start \"title\" cmd /k bar.exe arg1 arg2</code> new block auto close non-persistent <code>start \"title\" /wait cmd /c foo.cmd arg1 arg2</code> new block keep open non-persistent <code>start \"title\" /wait cmd /k foo.cmd arg1 arg2</code> same block auto close non-persistent <code>cmd /c foo.bat arg1 arg2</code> same block keep open non-persistent <code>cmd /k foo.bat arg1 arg2</code> same block keep open persistent <code>call foo.bat arg1 arg2</code> <ul> <li>escaping</li> </ul> Scenario Example Run a program and pass a Filename parameter <code>cmd /c write.exe c:\\docs\\sample.txt</code> Run a program and pass a Long Filename <code>cmd /c write.exe \"c:\\sample documents\\sample.txt\"</code> Spaces in Program Path <code>cmd /c \"\"c:\\Program Files\\Microsoft Office\\Office\\Winword.exe\"\"</code> Spaces in Program Path + parameters <code>cmd /c \"\"c:\\Program Files\\demo.cmd\"\" Parameter1 Param2</code> Spaces in Program Path + parameters with spaces <code>cmd /k \"\"c:\\batch files\\demo.cmd\" \"Parameter 1 with space\" \"Parameter2 with space\"\"</code> Launch Demo1 and then Launch Demo2 <code>cmd /c \"\"demo1.cmd\" &amp; \"demo2.cmd\"\"</code> <ul> <li>Command redirection/pipe command. (Reference)</li> </ul> Scenario Example `#!batch command &gt; filename' Redirect command output to a file `#!batch command &gt;&gt; filename' APPEND into a file `#!batch command &lt; filename' Type a text file and pass the text to command `#!batch commandA | commandB' Pipe the output from commandA into commandB `#!batch commandA &amp; commandB' Run commandA and then run commandB `#!batch commandA &amp;&amp; commandB' Run commandA, if it succeeds then run commandB `#!batch commandA || commandB' Run commandA, if it fails then run commandB `#!batch commandA &amp;&amp; commandB || commandC' If commandA succeeds run commandB, if it fails commandC"},{"location":"dev-notes/win-internals/cmd/#misc-windows-stuff","title":"Misc Windows Stuff","text":"<ul> <li> <p>Change windows command shell default ScreenBufferSize &amp; WindowSize (Reference)</p> </li> <li> <p>modify registry key: <code>HKEY_CURRENT_USER\\Console\\%SystemRoot%_System32_cmd.exe</code></p> </li> <li> <p>Windows Update Bullshit fixes</p> </li> <li> <p>Inspect windows file associations (Reference)</p> </li> <li> <p>show associated file type for extension Batchfile<pre><code>C:\\&gt; assoc .txt\n.txt=txtfile\n</code></pre></p> </li> <li> <p>show associated actions for file type Batchfile<pre><code>C:\\&gt; ftype txtfile\ntxtfile=%SystemRoot%\\system32\\NOTEPAD.EXE %1\n</code></pre></p> </li> </ul>"},{"location":"dev-notes/win-internals/powershell/","title":"Powershell","text":""},{"location":"dev-notes/win-internals/powershell/#crash-course","title":"Crash Course","text":"Basic terminology Definition Cmdlet Commands built into shell written in .NET Functions Commands written in PowerShell language Parameter Argument to a Cmdlet/Function/Script Alias Shortcut for a Cmdlet or Function Scripts Text files with .ps1 extension Applications Existing windows programs"},{"location":"dev-notes/win-internals/powershell/#basic-operators","title":"Basic Operators","text":"<code>=</code>,<code>+=</code>,<code>-=</code>,<code>*=</code>,<code>/=</code>,<code>%=</code>,<code>++</code>,<code>--</code> assigns one or more values to variable <code>-and</code>,<code>-or</code>,<code>-xor</code>,<code>-not</code>/<code>!</code> logical operators <code>-band</code>,<code>-bor</code>,<code>-bxor</code>,<code>-bnot</code>,<code>-shr</code>,<code>-shl</code> bitwise operators <code>-split</code> splits a string (ex: <code>\u201cabcdefghi\u201d -split \u201cde\u201d</code>) <code>-join</code> joins multiple strings (ex: <code>\u201cabc\u201d,\u201ddef\u201d,\u201dghi\u201d -join \u201c;\u201d</code>) ` ` <code>,</code> comma operator (array constructor) <code>@()</code> array subexpression operator"},{"location":"dev-notes/win-internals/powershell/#comparison-operators","title":"Comparison Operators","text":"<code>-eq</code>,<code>-ieq</code>,<code>-ceq</code> equal <code>-ne</code>,<code>-ine</code>,<code>-cne</code> not equal <code>-gt</code>,<code>-igt</code>,<code>-cgt</code> greater than <code>-ge</code>,<code>-ige</code>,<code>-cge</code> greater than or equal to <code>-lt</code>,<code>-ilt</code>,<code>-clt</code> less than <code>-le</code>,<code>-ile</code>,<code>-cle</code> less than or equal to <code>-like</code>,<code>-ilike</code>,<code>-clike</code> wildcard matching <code>-notlike</code>,<code>-inotlike</code>,<code>-cnotlike</code> negation of <code>-like</code> <code>-match</code>,<code>-imatch</code>,<code>-cmatch</code> regular expression match <code>-notmatch</code>,<code>-inotmatch</code>,<code>-cnotmatch</code> negation of <code>-match</code> <code>-replace</code>, <code>-ireplace</code>, <code>-creplace</code> replace matching elements (ex: <code>\u201cabcde\u201d -replace \u201cbc\u201d, \u201cTEST\u201d</code>) <code>-contains</code>,<code>-icontains</code>,<code>-ccontains</code> check if value in array (ex: <code>1,2,3,4,5 -contains 3</code>) <code>-notcontains</code>,<code>-inotcontains</code>,<code>-cnotcontains</code> negation of <code>-contains</code> <code>-in</code>,<code>-notin</code> syntactic reverse of <code>-contains/-notcontains</code> (ex: <code>3 -in 1,2,3,4,5</code>) <ul> <li>string comparisons: default case-insensitive</li> <li><code>-c</code> prefix: case sensitive variant e.g. <code>-ceq</code></li> <li><code>-i</code> prefix: case-insensitive variant e.g. <code>-ieq</code></li> <li><code>$list -op $foo</code>: shortcut for using operator as filter i.e. returns list items satisfying <code>-op</code> <p>[!important] <code>-contains, -in, -is, -replace</code>: can't be used this way</p> </li> </ul> PowerShell<pre><code>$a = (1,2) -eq 3 \n  := (1,2) | Where-Object { $_ -eq 2 }\n$a.GetType().Name # result: Object[]\n$a.Count          # result: 0\n</code></pre>"},{"location":"dev-notes/win-internals/powershell/#type-operators","title":"Type Operators","text":"<code>-is</code>,<code>-isnot</code> test if object is an instance of a specified .NET type (ex: <code>42 \u2013is [int]</code>) <code>-as</code> attempt type conversion to .NET type (ex: <code>$a = 42 \u2013as [String]</code>) <code>[]</code> type cast (ex: <code>[datetime]$birthday = \"1/10/66\"</code>) <code>()</code> grouping expression operator"},{"location":"dev-notes/win-internals/powershell/#flow-control","title":"Flow Control","text":"PowerShell<pre><code>if ($expr) {...} elseif ($expr) {...} else {...}\nwhile ($expr) {...}\nfor ($i = 0; $i -lt 10; $i++) {...}\nforeach ($file in Get-ChildItem 'C:\\') { $file.name }\n1..10 | ForEach-Object { $_ }\n</code></pre>"},{"location":"dev-notes/win-internals/powershell/#special-operators","title":"Special Operators","text":"<ul> <li><code>($list).property/method</code>: Member Access Enumeration i.e. shortcut for map on collection</li> </ul> PowerShell<pre><code>(Get-Service -Name event*).DisplayName \n  := (Get-Service -Name event*).ForEach({ $_.DisplayName })\n  := (Get-Service -Name event*) | ForEach-Object { $_.DisplayName }\n# result: @('Windows Event Log', 'COM+ Event System', ...)\n</code></pre> <p>[!note] Nuances</p> <ul> <li> <p>if property exists on collection, only the collection property is returned PowerShell<pre><code>(Get-Service).Count =&gt; 176\n</code></pre></p> </li> <li> <p>if error occurs during enumeration, method is invoked only on the items enumerated before error</p> </li> <li>more details around undefined members, <code>$null</code> values, errors, etc</li> </ul> <ul> <li> <p><code>$()</code>: subexpression operator that evaluates inner expression with result treated as a variable i.e. <code>expr</code> form of <code>block stmts</code></p> </li> <li> <p>can contain statements e.g. i.e. expression operator</p> </li> <li> <p>each statement's output appends to final scalar or array result PowerShell<pre><code>if($(code returning value) -eq \"somevalue\") { do_something }\n$city=\"Copenhagen\"\n$strLength = \"$($city.length)\"\n\"The result of 2 + 3 = $(2+3)\"\n$(Get-WMIObject win32_Directory)\n</code></pre></p> </li> <li> <p><code>&amp;</code>: call/invocation operator to run command, script, or script block</p> </li> <li> <p>can run commands stored in variables and represented by strings</p> </li> <li> <p>does not parse or interpret command parameters PowerShell<pre><code>$c = \"get-executionpolicy\"\n&amp; $c\n</code></pre></p> </li> <li> <p><code>.</code>: dot sourcing operator to run script in current scope</p> </li> <li> <p>all script created functions/aliases/variables are added to the current scope PowerShell<pre><code>. c:/scripts/sample.ps1\n. ./sample2.ps1\n</code></pre></p> </li> <li> <p><code>-f</code>: format operator for string interpolation with format args e.g. padding, alignment, hex etc</p> </li> </ul> PowerShell<pre><code>1..10 | foreach { \"{0:N2}\" -f $_ }\nGet-ChildItem c:\\ | ForEach-Object {'File {0} Created {1}' -f $_.fullname,$_.creationtime}\n</code></pre> <ul> <li><code>..</code>: range operator to produce number sequence</li> </ul> PowerShell<pre><code>10..20\n1..10 | foreach {$_ * 5}\n-5..0.9 # a more readable version of the same thing.\n</code></pre>"},{"location":"dev-notes/win-internals/powershell/#redirection-operators","title":"Redirection Operators","text":"n Output streams <code>1</code> <code>success</code> stream i.e. <code>stdout</code> <code>2</code> <code>error</code> stream i.e. <code>stderr</code> <code>3</code> <code>warning</code> stream <code>4</code> <code>verbose</code> stream <code>5</code> <code>debug</code> stream <code>6</code> <code>information</code> stream <code>*</code> <code>all</code> Streams <code>n&gt;</code> send stream to file (default: <code>n=1</code>) <code>n&gt;&gt;</code> append stream to file (default: <code>n=1</code>) <code>n&gt;&amp;1</code> redirects stream to <code>success</code> stream (default: <code>n=1</code>) <p>[!note] limitations can only redirect to <code>success</code> stream</p> PowerShell<pre><code>Get-Process word* | Stop-Process\nDo-Something 3&gt;   warning.txt # Writes warning output to warning.txt\nDo-Something 4&gt;&gt;  verbose.txt # Appends verbose.txt with the verbose output\nDo-Something 5&gt;&amp;1             # Writes debug output to the output stream\nDo-Something *&gt;&amp;1             # Redirects all streams to stdout\nDo-Something *&gt;   out.txt     # Redirects all streams to out.txt\n</code></pre>"},{"location":"dev-notes/win-internals/powershell/#gotchas","title":"Gotchas","text":"<ul> <li>Common Parameters/Preference Variables not inherited across module scopes</li> <li>Details</li> </ul>"},{"location":"dev-notes/win-internals/powershell/#cheatsheet","title":"Cheatsheet","text":""},{"location":"dev-notes/win-internals/powershell/#useful-commands","title":"Useful Commands","text":"Command <code>Update-Help</code> Downloads and installs newest help files <code>Get-Help get-process</code> Get help for command <code>Get-Command</code> Get all commands <code>Get-Command -Module RGHS</code> Get all commands in RGHS module <code>Get-Command Get-p*</code> Get all commands starting with get-p <code>Get-Member</code> Gets the properties and methods of objects <code>Get-Module</code> Gets all imported and importable modules <code>Get-Process \\| Get-Member</code> Get members of the object <code>Get-Process \\| format-list -properties *</code> Get-Process as list with all properties <code>Ctrl</code>+<code>c</code> Interrupt current command <code>Left</code>/<code>Right</code> Navigate editing cursor <code>Ctrl</code>+<code>Left</code>/<code>Right</code> Navigate a word at a time <code>Home</code>/<code>End</code> Move to start / end of line <code>Up'/'Down</code> Move up and down through history <code>Insert</code> Toggles between insert/overwrite mode <code>F7</code> Command history in a window <code>Tab</code>/<code>Shift</code>+<code>Tab</code> Command line completion"},{"location":"dev-notes/win-internals/powershell/#scripting","title":"Scripting","text":"<ul> <li> <p><code>%</code>: alias for <code>foreach-object</code></p> </li> <li> <p><code>$_</code>: current item in <code>foreach-object</code></p> </li> <li> <p><code>Get-Member</code>: object introspection</p> </li> <li> <p>pretty print</p> </li> <li> <p>object: <code>Write-Host ($foo | Format-Table | Out-String)</code></p> </li> <li>array: <code>Write-Host ($foo | Format-List | Out-String)</code></li> <li> <p>string interpolation</p> </li> <li> <p>use <code>$</code> in double quotes e.g. <code>\"blaaa $myvar\"</code> or <code>\"blaaaa$($myobjVar.name)\"</code></p> </li> <li>no string expansion: <code>'$blaaa'</code></li> <li> <p>invoke command/script</p> </li> <li> <p><code>&amp; foo @(arg0,arg2,...)</code>: call operator invokes expression in child scope that's discarded (e.g. any global variable changes not persisted)</p> </li> <li><code>. foo @(arg0,arg2,...)</code>: dot sourcing invokes expression in current scope (e.g. global changes are persisted)</li> <li> <p>common batch operations</p> </li> <li> <p>get all items in a directory: <code>Get-ChildItem *</code></p> </li> <li>get all subdirectories: <code>Get-ChildItem -Attributes Directory -Recurse</code></li> <li>get all files in directory: <code>Get-ChildItem *.docx | % Name</code></li> <li> <p>enabling <code>-WhatIf, -Confirm, etc</code></p> </li> <li> <p>add <code>[CmdletBinding(SupportsShouldProcess = $true)]</code> to param block</p> </li> <li>inside function, wrap state change code with <code>if ($PSCmdlet.ShouldProcess(target,operation)) {...}</code></li> <li>dump variables in a scope e.g. scope captured by <code>GetNewClosure()</code></li> </ul> PowerShell<pre><code>$m = (Get-Command testFunc2).Module\n&amp; $m Get-Variable -Scope 0\n</code></pre> <ul> <li>dump function definition</li> </ul> <p>[!warning] Function provider has no containers and is always rooted</p> PowerShell<pre><code>Get-ChildItem -Path Function:              # Dump all the functions in the current session\n(Get-Item -Path function:mkdir).Definition # Dump Function Definition\n$function:mkdir                            # Alternate Syntax for above\n</code></pre> <ul> <li>create function closure</li> </ul> <p>[!warning] appears to capture \"only\" local variables i.e. those from the caller's current scope</p> PowerShell<pre><code>function New-Function {\n  $x = $global:x\n  $function:global:testFunc2 = {$x}.GetNewClosure()\n}\n</code></pre> <ul> <li> <p>invocation info</p> </li> <li> <p><code>$PSScriptRoot, $PSCommandPath</code>: info about the current script</p> </li> <li> <p><code>$MyInvocation.PSScriptRoot, $MyInvocation.PSCommandPath</code>: info about the invoker or calling script</p> </li> <li> <p><code>$MyInvocation</code> Properties</p> Property <code>$MyInvocation.BoundParameters</code> This member provides a dictionary of the parameters that were bound for this script or command. <code>$MyInvocation.CommandOrigin</code> This property tells you if you were being invoked inside the runspace or if it was an external request. <code>$MyInvocation.DisplayScriptPosition</code> The position for the invocation or error. <code>$MyInvocation.ExpectingInput</code> Is true if this command is expecting input... <code>$MyInvocation.HistoryId</code> History ID that represents the command. If unavailable, this will be -1. <code>$MyInvocation.InvocationName</code> Command name used to invoke this string - if invoked through an alias, then this would be the alias name. <code>$MyInvocation.Line</code> The text of the line that contained this cmdlet invocation. <code>$MyInvocation.MyCommand</code> Provide basic information about the command <code>$MyInvocation.OffsetInLine</code> Command's character offset in that line. If the command was executed directly through the host interfaces, this will be -1. <code>$MyInvocation.PipelineLength</code> How many elements are in the containing pipeline <code>$MyInvocation.PipelinePosition</code> which element this command was in the containing pipeline <code>$MyInvocation.PositionMessage</code> Formatted message indicating where the cmdlet appeared in the line <code>$MyInvocation.PSCommandPath</code> This property tells you the full path to the command from where you were being invoked <code>$MyInvocation.PSScriptRoot</code> This property tells you the directory from where you were being invoked <code>$MyInvocation.ScriptLineNumber</code> The line number in the executing script that contained this cmdlet. <code>$MyInvocation.ScriptName</code> The name of the script containing the cmdlet. <code>$MyInvocation.UnboundArguments</code> This member provides a list of the arguments that were not bound to any parameter </li> </ul>"},{"location":"dev-notes/win-internals/powershell/#psscriptanalyzer-linter","title":"PSScriptAnalyzer Linter","text":"<ul> <li>PSScriptAnalyzer Overview</li> <li>PSScriptAnalyzerSettings</li> <li>Built-in Presets</li> <li>Built-in Rules</li> </ul> <p>[!info] Built-in Rules</p> Rule Enabled Config Severity PSAlignAssignmentStatement No Yes Warning PSAvoidAssignmentToAutomaticVariable Yes Warning PSAvoidDefaultValueForMandatoryParameter Yes Warning PSAvoidDefaultValueSwitchParameter Yes Warning PSAvoidGlobalAliases Yes Warning PSAvoidGlobalFunctions Yes Warning PSAvoidGlobalVars Yes Warning PSAvoidInvokingEmptyMembers Yes Warning PSAvoidLongLines No Yes Warning PSAvoidMultipleTypeAttributes Yes Warning PSAvoidNullOrEmptyHelpMessageAttribute Yes Warning PSAvoidOverwritingBuiltInCmdlets Yes Yes Warning PSAvoidSemicolonsAsLineTerminators No Warning PSAvoidShouldContinueWithoutForce Yes Warning PSAvoidTrailingWhitespace Yes Warning PSAvoidUsingBrokenHashAlgorithms Yes Warning PSAvoidUsingCmdletAliases Yes Yes Warning PSAvoidUsingComputerNameHardcoded Yes Error PSAvoidUsingConvertToSecureStringWithPlainText Yes Error PSAvoidUsingDeprecatedManifestFields Yes Warning PSAvoidUsingDoubleQuotesForConstantString No Yes Warning PSAvoidUsingEmptyCatchBlock Yes Warning PSAvoidUsingInvokeExpression Yes Warning PSAvoidUsingPlainTextForPassword Yes Warning PSAvoidUsingPositionalParameters Yes Warning PSAvoidUsingUsernameAndPasswordParams Yes Error PSAvoidUsingWMICmdlet Yes Warning PSAvoidUsingWriteHost Yes Warning PSDSCDscExamplesPresent Yes Information PSDSCDscTestsPresent Yes Information PSDSCReturnCorrectTypesForDSCFunctions Yes Information PSDSCStandardDSCFunctionsInResource Yes Error PSDSCUseIdenticalMandatoryParametersForDSC Yes Error PSDSCUseIdenticalParametersForDSC Yes Error PSDSCUseVerboseMessageInDSCResource Yes Error PSMisleadingBacktick Yes Warning PSMissingModuleManifestField Yes Warning PSPlaceCloseBrace No Yes Warning PSPlaceOpenBrace No Yes Warning PSPossibleIncorrectComparisonWithNull Yes Warning PSPossibleIncorrectUsageOfAssignmentOperator Yes Warning PSPossibleIncorrectUsageOfRedirectionOperator Yes Warning PSProvideCommentHelp Yes Yes Information PSReservedCmdletChar Yes Error PSReservedParams Yes Error PSReviewUnusedParameter Yes Warning PSShouldProcess Yes Warning PSUseApprovedVerbs Yes Warning PSUseBOMForUnicodeEncodedFile Yes Warning PSUseCmdletCorrectly Yes Warning PSUseCompatibleCmdlets Yes Yes Warning PSUseCompatibleCommands No Yes Warning PSUseCompatibleSyntax No Yes Warning PSUseCompatibleTypes No Yes Warning PSUseConsistentIndentation No Yes Warning PSUseConsistentWhitespace No Yes Warning PSUseCorrectCasing No Yes Information PSUseDeclaredVarsMoreThanAssignments Yes Warning PSUseLiteralInitializerForHashtable Yes Warning PSUseOutputTypeCorrectly Yes Information PSUseProcessBlockForPipelineCommand Yes Warning PSUsePSCredentialType Yes Warning PSUseShouldProcessForStateChangingFunctions Yes Warning PSUseSingularNouns Yes Warning PSUseSupportsShouldProcess Yes Warning PSUseToExportFieldsInManifest Yes Warning PSUseUsingScopeModifierInNewRunspaces Yes Warning PSUseUTF8EncodingForHelpFile Yes Warning <ul> <li>disable rule</li> </ul> PowerShell<pre><code>[System.Diagnostics.CodeAnalysis.SuppressMessage('PSAvoidUsingWriteHost', '')]\n</code></pre> <p>[!note] can control scoping</p> <ul> <li> <p>scope to file, add to top of file and <code>param()</code> below attribute PowerShell<pre><code>[System.Diagnostics.CodeAnalysis.SuppressMessage('PSAvoidUsingWriteHost','')]\nparam()\n</code></pre></p> </li> <li> <p>namespace scope PowerShell<pre><code>[System.Diagnostics.CodeAnalysis.SuppressMessage('PSAvoidUsingWriteHost','',Scope='Namespace')]\n</code></pre></p> </li> </ul> <ul> <li>list approved powershell verbs</li> </ul> PowerShell<pre><code>Get-Verb | Sort-Object Verb\n</code></pre>"},{"location":"dev-notes/win-internals/powershell/#resources","title":"Resources","text":"<ul> <li>PowerShell Cheatsheet</li> <li>ss64 Powershell: concise reference</li> <li>powershell.one: dives into more intermediate scripting topics like modules, scripting, etc</li> <li>Everything You Wanted To Know About: series geared towards fast ramp up</li> <li>Arrays</li> <li>Hashtable</li> <li>PsCustomObject</li> <li>String Interpolation</li> <li>PowerShell Best Practices and Style Guide</li> </ul>"},{"location":"dev-notes/win-internals/win-file-io-perf/","title":"Windows File IO Performance","text":""},{"location":"dev-notes/win-internals/win-file-io-perf/#file-caching","title":"File Caching","text":"<p>By default, Windows caches file data that is read from disks and written to disks. This implies that read operations read file data from an area in system memory known as the system file cache, rather than from the physical disk. Correspondingly, write operations write file data to the system file cache rather than to the disk, and this type of cache is referred to as a write-back cache. Caching is managed per file object.</p> <p>Caching occurs under the direction of the cache manager, which operates continuously while Windows is running. File data in the system file cache is written to the disk at intervals determined by the operating system, and the memory previously used by that file data is freed-this is referred to as flushing the cache. The policy of delaying the writing of the data to the file and holding it in the cache until the cache is flushed is called lazy writing, and it is triggered by the cache manager at a determinate time interval. The time at which a block of file data is flushed is partially based on the amount of time it has been stored in the cache and the amount of time since the data was last accessed in a read operation. This ensures that file data that is frequently read will stay accessible in the system file cache for the maximum amount of time.</p> <p>This file data caching process is illustrated in the following figure. </p> <p>As depicted by the solid arrows in the previous figure, a 256 KB region of data is read into a 256 KB cache \"slot\" in system address space when it is first requested by the cache manager during a file read operation. A user-mode process then copies the data in this slot to its own address space. When the process has completed its data access, it writes the altered data back to the same slot in the system cache, as shown by the dotted arrow between the process address space and the system cache. When the cache manager has determined that the data will no longer be needed for a certain amount of time, it writes the altered data back to the file on the disk, as shown by the dotted arrow between the system cache and the disk.</p> <p>The amount of I/O performance improvement that file data caching offers depends on the size of the file data block being read or written. When large blocks of file data are read and written, it is more likely that disk reads and writes will be necessary to finish the I/O operation. I/O performance will be increasingly impaired as more of this kind of I/O operation occurs.</p> <p>In these situations, caching can be turned off. This is done at the time the file is opened by passing <code>FILE_FLAG_NO_BUFFERING</code> as a value for the dwFlagsAndAttributes parameter of <code>CreateFile</code>. When caching is disabled, all read and write operations directly access the physical disk. However, the file metadata may still be cached. To flush the metadata to disk, use the <code>FlushFileBuffers</code> function.</p> <p>(Reference)</p>"},{"location":"dev-notes/win-internals/win-file-io-perf/#file-buffering","title":"File Buffering","text":"<p>When opening or creating a file with the <code>CreateFile</code> function, the <code>FILE_FLAG_NO_BUFFERING</code> flag can be specified to disable system caching of data being read from or written to the file. Although this gives complete and direct control over data I/O buffering, in the case of files and similar devices there are data alignment requirements that must be considered.</p> <p>[!note] This alignment information applies to I/O on devices such as files that support seeking and the concept of file position pointers (or offsets). For devices that do not seek, such as named pipes or communications devices, turning off buffering may not require any particular alignment. Any limitations or efficiencies that may be gained by alignment in that case are dependent on the underlying technology.</p> <p>In a simple example, the application would open a file for write access with the <code>FILE_FLAG_NO_BUFFERING</code> flag and then perform a call to the <code>WriteFile</code> function using a data buffer defined within the application. This local buffer is, in these circumstances, effectively the only file buffer that exists for this operation. Because of physical disk layout, file system storage layout, and system-level file pointer position tracking, this write operation will fail unless the locally-defined data buffers meet certain alignment criteria, discussed in the following section.</p> <p>[!note] Discussion of caching does not consider any hardware caching on the physical disk itself, which is not guaranteed to be within the direct control of the system in any case. This has no effect on the requirements specified in this topic.</p> <p>(Reference)</p>"},{"location":"dev-notes/win-internals/win-file-io-perf/#file-read-performance","title":"File read performance","text":"<ul> <li><code>mmap</code> vs <code>fread</code></li> <li>Ideal buffer size when using FileInputStream</li> </ul>"},{"location":"dev-notes/win-internals/win-path-formats/","title":"Windows File Paths","text":""},{"location":"dev-notes/win-internals/win-path-formats/#file-paths-formats","title":"File Paths Formats","text":""},{"location":"dev-notes/win-internals/win-path-formats/#traditional-dos-path","title":"Traditional DOS Path","text":"<ul> <li> <p>standard DOS path can consist of three components:</p> </li> <li> <p><code>volume</code>/<code>drive letter</code> + <code>volume separator</code> (i.e. <code>:</code>)</p> </li> <li><code>directory name</code>: <code>directory separator</code> (i.e. <code>\\</code>,<code>/</code>) delimits nested subdirectories</li> <li>optional <code>filename</code>: <code>directory separator</code> separates <code>file path</code> vs <code>filename</code></li> <li> <p>qualification</p> </li> <li> <p><code>absolute</code>: all three components are present</p> </li> <li><code>relative to current drive root</code>: no volume/drive letter is specified and directory name begins with <code>directory separator</code></li> <li><code>relative to current directory</code>: all other cases   |Dos Path Example|Description|   |----------------|-----------|   |<code>C:\\Documents\\Newsletters\\Summer2018.pdf</code>|An absolute file path from the root of drive <code>C:</code>.|   |<code>\\Program Files\\Custom Utilities\\StringFinder.exe</code>|A relative path from the root of the current drive.|   |<code>2018\\January.xlsx</code>|A relative path to a file in a subdirectory of the current directory.|   |<code>..\\Publications\\TravelBrochure.pdf</code>|A relative path to a file in a directory starting from the current directory.|   |<code>C:\\Projects\\apilibrary\\apilibrary.sln</code>|An absolute path to a file from the root of drive <code>C:</code>.|   |<code>C:Projects\\apilibrary\\apilibrary.sln</code>|A relative path from the current directory of the <code>C:</code> drive.|</li> </ul>"},{"location":"dev-notes/win-internals/win-path-formats/#unc-path","title":"UNC Path","text":"<ul> <li> <p>has following format</p> </li> <li> <p><code>\\\\</code> + <code>server/host name</code>; name can be <code>NetBIOS</code> machine name/<code>IPv4</code>/<code>IPv6</code>/<code>FQDN</code> address</p> </li> <li><code>\\</code> + <code>share name</code>; the volume is defined by combining <code>server</code> + <code>share name</code></li> <li><code>directory name</code>: <code>directory separator</code> delimits nested subdirectories</li> <li>optional <code>filename</code>: <code>directory separator</code> separates <code>file path</code> vs <code>filename</code></li> <li>must always be fully qualified; any relative directory segments (i.e. <code>.</code>,<code>..</code>) must be part of fully qualified path</li> </ul> UNC Path Example Description <code>\\\\system07\\C$\\</code> The root directory of the <code>C:</code> drive on <code>system07</code>. <code>\\\\Server2\\Share\\Test\\Foo.txt</code> The <code>Foo.txt</code> file in the Test directory of the <code>\\\\Server2\\Share</code> volume."},{"location":"dev-notes/win-internals/win-path-formats/#device-path","title":"Device Path","text":"<ul> <li> <p>windows has a unified object model that points to all resources, including files</p> </li> <li> <p>object paths exposed to the Win32 layer through special folders of symbolic links that legacy DOS and UNC paths are mapped to</p> </li> <li><code>\\\\?\\</code>: <code>Win32 file namespaces</code> special folder e.g. <code>\\\\.\\C:\\Test\\Foo.txt</code><ul> <li>tells the Windows APIs to disable all string parsing and to send subsquent string straight to the file system</li> <li>this also turns off automatic expansion of the path string</li> <li>allows you to do</li> <li>exceed <code>MAX_PATH</code> limits usually enforced by the Windows APIs (assuming file system supports large paths)</li> <li>use <code>..</code>,<code>.</code> in path names which can be useful if attempting to perform operations on file with illegal qualified path</li> </ul> </li> <li> <p><code>\\\\.\\</code>: <code>Win32 device namespaces</code> special folder e.g. <code>\\\\?\\C:\\Test\\Foo.txt</code></p> <ul> <li>direct access to physical device, disk, or volume disks and volumes; bypasses filesystem</li> <li>ex: <code>CreateFile</code> with <code>\\\\.\\PhysicalDrive1</code>,<code>\\\\.\\CdRomX</code></li> <li> <p>[!danger] only use <code>\\\\.\\</code> prefix to access devices only and not files; most APIs won't support it</p> </li> </ul> </li> <li> <p>or by a volume's GUID <code>\\\\.\\Volume{b75e2c83-0000-0000-0000-602f00000000}\\Test\\Foo.txt</code> <code>\\\\?\\Volume{b75e2c83-0000-0000-0000-602f00000000}\\Test\\Foo.txt</code></p> </li> <li> <p><code>DOS device path</code> consists of:</p> </li> <li> <p><code>device path specifier</code>: i.e. <code>\\\\.\\</code> or <code>\\\\?\\</code></p> </li> <li> <p>symbolic link to the \"real\" device object (e.g. <code>C:</code> for drive name, <code>Volume{b75e2c83-0000-0000-0000-602f00000000}</code> for volume GUID)</p> <ul> <li>first path segment after the <code>device path specifier</code> identifies the volume or drive (e.g. <code>\\\\?\\C:\\</code> or <code>\\\\.\\BootPartition\\</code>.)</li> <li><code>UNC</code>: specific link for <code>UNC paths</code> <code>\\\\.\\UNC\\Server\\Share\\Test\\Foo.txt</code> <code>\\\\?\\UNC\\Server\\Share\\Test\\Foo.txt</code></li> <li>for <code>UNC device paths</code>, the <code>server</code>+<code>share segments</code> form the <code>volume</code></li> </ul> </li> <li> <p>e.g. <code>\\\\?\\server1\\e:\\utilities\\\\filecomparer\\</code>, the <code>server/share portion</code> is <code>server1\\utilities</code></p> </li> <li>means it's never possible to navigate past the volume with relative <code>directory segments</code></li> <li><code>DOS device path</code> is fully qualified by definition</li> </ul>"},{"location":"dev-notes/win-internals/win-path-formats/#example-paths","title":"Example Paths","text":"<p>These all point to the same file</p> <ul> <li><code>c:\\temp\\test-file.txt</code></li> <li><code>\\\\127.0.0.1\\c$\\temp\\test-file.txt</code></li> <li><code>\\\\LOCALHOST\\c$\\temp\\test-file.txt</code></li> <li><code>\\\\.\\c:\\temp\\test-file.txt</code></li> <li><code>\\\\?\\c:\\temp\\test-file.txt</code></li> <li><code>\\\\.\\UNC\\LOCALHOST\\c$\\temp\\test-file.txt</code></li> <li><code>\\\\127.0.0.1\\c$\\temp\\test-file.txt</code></li> </ul>"},{"location":"dev-notes/win-internals/win-path-formats/#path-normalization","title":"Path Normalization","text":"<ul> <li>Identifies path type</li> </ul> Path Type Identification <code>device path</code> begin with <code>\\\\?</code> or <code>\\\\.</code> <code>UNC path</code> begin with <code>\\\\</code> <code>fully qualified DOS path</code> begin with <code>drive letter</code>+<code>volume separator</code>+<code>component separator</code> .e. <code>C:\\</code> <code>legacy device</code> e.g. <code>CON</code>, <code>LPT1</code> <code>relative to current drive root</code> begin with single component separator <code>\\</code> <code>relative to specific drive current directory</code> begin with <code>drive letter</code>+<code>volume separator</code> without <code>component separator</code> e.g. <code>C:</code> <code>relative to current directory</code> everything else e.g. <code>temp\\testfile.txt</code> <ul> <li> <p>Applies the current directory to partially qualified (relative) paths</p> </li> <li> <p>Canonicalizes component and directory separators</p> </li> <li> <p>Evaluates relative directory components (. for the current directory and .. for the parent directory)</p> </li> <li> <p>Trims certain characters</p> </li> </ul>"},{"location":"dev-notes/win-internals/win-path-formats/#references","title":"References","text":"<ul> <li>.Net API Reference</li> <li>Win32 API Reference</li> <li>Definitive Guide on Win32 to NT Path Conversion</li> </ul>"},{"location":"dev-notes/win-internals/win-symbol-server/","title":"Symbol Server For Windows Debuggers","text":""},{"location":"dev-notes/win-internals/win-symbol-server/#symbol-paths","title":"Symbol Paths","text":"<p><code>dbghelp.dll</code> takes a <code>;</code> delimited path list to locate symbol files</p>"},{"location":"dev-notes/win-internals/win-symbol-server/#default-search-paths","title":"Default Search Paths","text":"<ul> <li><code>_NT_SYMBOL_PATH</code> environment variable</li> <li><code>_NT_ALT_SYMBOL_PATH</code> environment variable</li> <li>directory that contains the corresponding module</li> </ul>"},{"location":"dev-notes/win-internals/win-symbol-server/#standard-directory-path","title":"Standard Directory Path","text":"<ul> <li>syntax: <code>[DirPath]</code></li> <li>points to standard windows path; can be on a share/remote</li> <li>search order is:</li> <li><code>[DirPath]</code>: looks for symbol file in immediate path</li> <li><code>[DirPath]/[moduleExtension]</code>: then path subdirectory based on module's file extension e.g. <code>[DirPath]/dll</code>, <code>[DirPath]/exe</code>, <code>[DirPath]/sys</code></li> <li><code>[DirPath]/symbols/[moduleExtension]</code>: finally attempts hardcoded lookup in <code>[DirPath]/symbols</code> subdirectory e.g. <code>[DirPath]/symbols/dll</code>, <code>[DirPath]/symbols/exe</code>, <code>[DirPath]/symbols/sys</code></li> <li>Ex: <code>[DirPath] := C:\\foo\\app</code>, <code>Module := bar.dll</code> results in these lookups</li> <li><code>C:\\foo\\app</code></li> <li><code>C:\\foo\\app\\dll</code></li> <li><code>C:\\foo\\app\\symbols\\dll</code></li> </ul>"},{"location":"dev-notes/win-internals/win-symbol-server/#symbol-cache-path","title":"Symbol Cache Path","text":"<ul> <li>syntax: <code>CACHE*[CachePath]</code></li> <li>points to standard windows path but treated as a cache repository</li> <li>searched like normal directory</li> <li>if symbol's not found in cache but found in subsequent path in the chain, then symbol is copied and stored at in the cache location</li> <li></li> </ul>"},{"location":"dev-notes/win-internals/win-symbol-server/#symbol-server-path","title":"Symbol Server Path","text":"<ul> <li> <p>Symbol Server: coordinates with debugger to deliver symbol files for specific binary from symbol stores; <code>SymSrv</code> is default MS implementation</p> </li> <li> <p>Symbol Stores: centralized symbol file collection uniquely indexed w.r.t module binary; <code>SymStore</code>  is default MS implementation</p> </li> <li> <p>can contain any number of symbol files, corresponding to any number of programs or operating systems</p> </li> <li> <p>can also contain binary files, which are particularly useful when debugging minidump files.</p> </li> <li> <p><code>SRV*[SymStore]*SRV*[SymStore1]*SRV*[SymStoreN]</code>: list of symbol store locations delimited by <code>*</code> that symbol server uses to locate symbol</p> </li> <li> Text Only<pre><code> &gt; \n &gt; \\[!note\\] `SRV*` prefix is assumed if path points to symbol store\n &gt; If `SRV*` prefix is missing but path points to a symbol server store, path is still treated as Symbol Server Path and `SRV*` is assumed\n &gt; Symbol handler uses `pingme.txt` file in path's root directory to demarcate _symbol servers_ from normal folders\n</code></pre> </li> <li> <p>max 10 symbol stores after the \"SRV*\" prefix</p> </li> <li> <p>precedence is from left/downstream stores to right/upstream stores</p> </li> <li> <p><code>SymSrv</code> searches from leftmost to rightmost symbol store until it finds a match</p> </li> <li> <p>on match, <code>SymSrv</code> copies the file to every downstream store and opens always it from the leftmost store</p> </li> </ul>"},{"location":"dev-notes/win-internals/win-symbol-server/#symbol-store-types","title":"Symbol Store Types","text":"<ul> <li> <p><code>C:\\local\\cache</code> store: path to a directory on the client machine</p> </li> <li> <p><code>&lt;blank&gt;</code> store: two asterisks without text in-between (<code>**</code>) indicate default downstream store; default value is <code>[CallingAppDir]\\sym</code></p> </li> <li> <p><code>\\\\server\\share</code> store: fully qualified UNC path to a share on a remote server</p> </li> <li> <p><code>http://foo.app</code> store: url to HTTP-based symbol hosting server</p> </li> <li> Text Only<pre><code> &gt; \n &gt; \\[!danger\\] HTTP stores must be rightmost in a store list\n &gt; HTTP-based stores are read-only; this means `SymSrv` can't copy symbols located an upstream store downstream to the HTTP store\n &gt; This usually results in silent errors because the because of the broken symbol store chain\n</code></pre> </li> <li> Text Only<pre><code> &gt; \n &gt; \\[!danger\\] HTTP-based store cannot be the only store on the list\n &gt; Symbol handler can't open a file on a website; if `SymSrv` encounters this, it attempts recovery by force copying to the default downstream store and opening from there\n &gt; This may cause performance issues or silent failures if the `SymSrv` the downstream copy to the default store failes\n</code></pre> </li> </ul>"},{"location":"dev-notes/win-internals/win-symbol-server/#symsrv-examples","title":"SymSrv Examples","text":"<ul> <li>use symbols from remote share</li> </ul> Batchfile<pre><code>set _NT_SYMBOL_PATH=SRV*\\\\buildsShare\\fooSymbols\n</code></pre> <ul> <li>copy symbols from remote to local folder</li> </ul> Batchfile<pre><code>set _NT_SYMBOL_PATH=SRV*C:\\localSymbols*\\\\buildsShare\\fooSymbols\n</code></pre> <ul> <li>copy symbols from remote to default downstream store (usually <code>C:\\debuggers\\sym</code>)</li> </ul> Batchfile<pre><code>set _NT_SYMBOL_PATH=SRV**\\\\buildsShare\\fooSymbols\n</code></pre> <ul> <li>use multiple stores with cascading downstream copy</li> </ul> Batchfile<pre><code>set _NT_SYMBOL_PATH=SRV*C:\\localSymbols*\\\\nearbyServer\\store*https://DistantServer\n</code></pre> <ul> <li><code>SymSrv</code> searches <code>C:\\localSymbols</code>;       if found, return local file path</li> <li><code>SymSrv</code> searches <code>\\\\nearbyServer\\store</code>;  if found, copy file to <code>C:\\localSymbols</code>, return local file path e.g. <code>C:\\localSymbols\\bar.pdbg</code></li> <li><code>SymSrv</code> searches <code>https://DistantServer</code>; if found, copy file to <code>\\\\nearbyServer\\store</code> and <code>C:\\localSymbols</code></li> <li>multiple HTTP stores, caching, and local uncached symbols</li> </ul> Batchfile<pre><code>set _NT_SYMBOL_PATH=CACHE*D:\\scratch\\symbols;SRV*https://msdl.microsoft.com/download/symbols;SRV*https://driver-symbols.nvidia.com;SRV*https://download.amd.com/dir/bin\n\nset _NT_SYMBOL_PATH=SRV*C:\\Symbols*\\\\Machine1\\Symbols*https://SymProxyName/Symbols;SRV*C:\\WebSymbols*https://msdl.microsoft.com/download/symbols\nset _NT_SYMBOL_PATH=\\\\notCached\\share;SRV*C:\\cached\\localSymbolDir*https://msdl.microsoft.com/download/symbols;CACHE*C:\\cached\\localSymbolDir;\\\\alsoCached\\share\n</code></pre> <ul> <li><code>symchk.exe</code>: use to download/verify symbols</li> </ul> <p>[!example]- symchk.exe /r C:WindowsSystem32 /s %_NT_SYMBOL_PATH%</p> <ul> <li>downloads symbols for every component in <code>C:\\Windows\\System32</code></li> <li><code>/r C:\\Windows\\System32</code>: recursive symbol search for all files in the System32 and its subfolders</li> <li><code>/s %_NT_SYMBOL_PATH%</code>: specifies the symbol path to use for symbol resolution</li> </ul>"},{"location":"dev-notes/win-internals/win-debug-recipes/win-debug-recipes/","title":"Windows Debugging Recipes","text":"<p>Troubleshooting notes on analyzing/debugging windows internals for fixing windows system/app</p>"},{"location":"dev-notes/win-internals/win-debug-recipes/win-debug-recipes/#debuggers","title":"Debuggers","text":"<ul> <li>win-debugging-config</li> <li>windbg</li> </ul>"},{"location":"dev-notes/win-internals/win-debug-recipes/win-debug-recipes/#windows-system-components","title":"Windows System Components","text":"<ul> <li>win-drivers</li> <li>win-fontcache</li> <li>win-gpo</li> </ul>"},{"location":"dev-notes/win-internals/win-debug-recipes/win-debug-recipes/#network","title":"Network","text":"<ul> <li>win-network</li> </ul>"},{"location":"dev-notes/win-internals/win-debug-recipes/win-debug-recipes/#kernel","title":"Kernel","text":"<ul> <li>win-kernel-cheatsheet</li> </ul>"},{"location":"dev-notes/win-internals/win-debug-recipes/components/win-drivers/","title":"Drivers","text":""},{"location":"dev-notes/win-internals/win-debug-recipes/components/win-drivers/#setupapi-logs","title":"SetupAPI Logs","text":"<p>|Log|Purpose<sup> 1</sup>| |---|--------| |<code>C:\\Windows\\INF\\setupapi.dev.log</code>|Device Installation Log on device/driver installs| |<code>C:\\Windows\\INF\\setupapi.app.log</code>|App Installation Log on app installs associated w/device driver installs|</p>"},{"location":"dev-notes/win-internals/win-debug-recipes/components/win-drivers/#approach-1-autoruns","title":"Approach 1: AutoRuns","text":"<ul> <li>TLDR: use SysInternals: AutoRuns to find bad behaving/suspect drivers (Reference)</li> <li> <p>Configuration</p> <ul> <li>Options-&gt;Hide Microsoft Entries: enable this and unhide everything else</li> <li>Options-&gt;Scan Options-&gt;Verify code signatures: enable</li> <li>Options-&gt;Scan Options-&gt;Check VirusTotal.com: optional; useful but lots of false positives</li> <li> <p>Key Points</p> </li> <li> <p><code>Red</code>:    no digital signature. if \"LargeCorp\" driver, extremely suspect/dangers (failed/didn't care to pass WHL Quality Assurance); if open-source driver, likely won't be signed bc of cost</p> </li> <li><code>Yellow</code>: driver image not found; usually safe to remove</li> <li>Most Important Categories: 'Drivers','Services','ScheduledTasks','Logon'</li> <li>Drivers: most difficult bc Windows often can't remove kernel/device driver, marks it for deletion at reboot, which often silently fails</li> </ul> <p>[!danger]- Usual Suspects/Bad Offenders</p> Driver Problems <code>AMDRyzenMasterDriverV*</code> seems latest versions are less dangerous and gets uninstalled, anyway better to remove RM unless you have gun pointed at your head <code>AsrDrv*</code> ASRock drivers, anything ASRock should be removed; literally banned as it provides full kernel access <code>Asusgio2</code> anything ASUS should be removed, the worst. If you have ROG peripherals you may need to keep the ROG drivers. Armoury-Crate software is a virus-like, will cause BSOD and all sort of issues, stay away <code>EneIo</code>,<code>EneTechIo</code>,<code>*Io64.sys</code> RGB software drivers usually terrible written, suffering from performance and serious security holes <code>gdrv</code>,<code>gdrv2</code> GigaByte software, 2<sup>nd</sup> worse after ASUS, remove everything. Known to cause BSODs <code>NTIOLib_MSISimple_OC</code>,<code>NTIOLib_OCKit</code>,<code>MSI Command Center</code> not the worst but hitting performances. Remove all MSI software, you can do the same without usually. Nice to change options without rebooting but then once done disable the driver <code>NPF*</code>,<code>Network Packet Filter drivers</code> used by many network utils (e.g. PowerLine adapters, etc) so must check if needed; can always disable/re-enable on-demand instead of deleting <ul> <li>Application Drivers: usually fine since they should only be loaded on demand on app start (e.g. CPU-z,HWInfo,GPU-z,)</li> <li>HW drivers: dangerous as can  can cause your system to stop booting; always use system snapshots</li> <li>Services: pretty easy bc easily discoverable/traceable</li> </ul> <p>[!warning]- Usual Suspects/Bad Offenders</p> Driver Problems HW peripheral vendors install superflous services e.g. RazerGameService anti-cheat from games 'Automatic','DelayedStart' 3<sup>rd</sup>-party services if service is for disabled/on-demand feature, requiring always-on background execution is sign of lurking issues (process likely running 'sleep mode' causing perf issues, micro-stuttering, zombie kernel objects/child processes). workaround by setting to 'Disabled' or <code>Manual</code> </li> <li> <p>ScheduledTasks: tricky b/c big troubleshooting headache</p> <ul> <li>usually disabling works in short-to-midterm but breaks in mid-to-longterm (e.g. update requires Task but upgrade didn't re-enable Task)</li> <li>root cause analysis is headache b/c likely won't remember manually disabling task</li> <li>then relying on dice roll of how robust app's logging is but if you had to disable the task manually, app was probably poorly written to begin with</li> <li>safest to disable tasks for uninstalled software</li> <li> <p>Logon: subtle footguns abound</p> </li> <li> <p>safest to mainly disable uninstalled/'yellow' registry keys</p> </li> <li>then use another tool to disable startups e.g.</li> <li>NirSoft WhatInStartup</li> <li>SystemInformer</li> <li>TaskManager/msconfig</li> </ul> </li> </ul>"},{"location":"dev-notes/win-internals/win-debug-recipes/components/win-drivers/#approach-2-scmanager","title":"Approach 2: SCManager","text":"<p><code>sc.exe</code>: Service Control Manager CLI to manipulate services; drivers run as special kernel service</p> <ul> <li> <p>TLDR: attempt forensics on driver with <code>sc</code></p> </li> <li> <p>query driver to glean useful info Batchfile<pre><code>sc queryex        ssgdio\nsc qc             ssgdio\nsc qdescription   ssgdio\nsc GetDisplayName ssgdio\nsc GetKeyName     ssgdio\nsc EnumDepend     ssgdio\n</code></pre></p> </li> <li> <p>disable service and reboot Batchfile<pre><code>sc stop   ssgdio\nsc config ssgdio start= disabled\n[restart_machine]\n</code></pre></p> </li> <li> <p>delete driver Batchfile<pre><code>sc delete ssgdio\n</code></pre></p> </li> <li> <p><code>sc</code> command details</p> </li> <li> <p><code>sc.exe</code>: Service Control Manager cli to manipulate services (drivers run as special kernel service)</p> Batchfile<pre><code>Syntax: sc &lt;\"\\\\ServerName\"&gt; [command] [service name] &lt;option1&gt; &lt;option2&gt;...\nHelp:   sc [command]\n</code></pre> </li> <li> <p>Global Commands: operate on SCManager; does not take service name     | Command        | Description                                                                                        |     | -------------- | -------------------------------------------------------------------------------------------------- |     | <code>sc [command]</code> | get help for command                                                                               |     | <code>boot</code>         | <code>ok|bad</code> Indicates whether the last boot should be saved as the last-known-good boot configuration |     | <code>Lock</code>         | Locks the Service Database                                                                         |     | <code>QueryLock</code>    | Queries the LockStatus for the SCManager Database                                                  |</p> </li> <li> <p>Service Commands: operates on services; requires service name     | Command           | Description                                                                                        |     | ----------------- | -------------------------------------------------------------------------------------------------- |     | <code>query</code>           | Queries the status for a service, or enumerates the status for types of services                   |     | <code>queryex</code>         | Queries the extended status for a service, or enumerates the status for types of services          |     | <code>start</code>           | Starts a service                                                                                   |     | <code>pause</code>           | Sends a PAUSE control request to a service                                                         |     | <code>interrogate</code>     | Sends an INTERROGATE control request to a service                                                  |     | <code>continue</code>        | Sends a CONTINUE control request to a service                                                      |     | <code>stop</code>            | Sends a STOP request to a service                                                                  |     | <code>config</code>          | Changes the configuration of a service (persistent)                                                |     | <code>description</code>     | Changes the description of a service                                                               |     | <code>failure</code>         | Changes the actions taken by a service upon failure                                                |     | <code>failureflag</code>     | Changes the failure actions flag of a service                                                      |     | <code>sidtype</code>         | Changes the service SID type of a service                                                          |     | <code>privs</code>           | Changes the required privileges of a service                                                       |     | <code>managedaccount</code>  | Changes the service to mark the service account password as managed by LSA                         |     | <code>qc</code>              | Queries the configuration information for a service                                                |     | <code>qdescription</code>    | Queries the description for a service                                                              |     | <code>qfailure</code>        | Queries the actions taken by a service upon failure                                                |     | <code>qfailureflag</code>    | Queries the failure actions flag of a service                                                      |     | <code>qsidtype</code>        | Queries the service SID type of a service                                                          |     | <code>qprivs</code>          | Queries the required privileges of a service                                                       |     | <code>qtriggerinfo</code>    | Queries the trigger parameters of a service                                                        |     | <code>qpreferrednode</code>  | Queries the preferred NUMA node of a service                                                       |     | <code>qmanagedaccount</code> | Queries whether a services uses an account with a password managed by LSA                          |     | <code>qprotection</code>     | Queries the process protection level of a service                                                  |     | <code>quserservice</code>    | Queries for a local instance of a user service template                                            |     | <code>delete</code>          | Deletes a service (from the registry)                                                              |     | <code>create</code>          | Creates a service. (adds it to the registry)                                                       |     | <code>control</code>         | Sends a control to a service                                                                       |     | <code>sdshow</code>          | Displays a service's security descriptor                                                           |     | <code>sdset</code>           | Sets a service's security descriptor                                                               |     | <code>showsid</code>         | Displays the service SID string corresponding to an arbitrary name                                 |     | <code>triggerinfo</code>     | Configures the trigger parameters of a service                                                     |     | <code>preferrednode</code>   | Sets the preferred NUMA node of a service                                                          |     | <code>GetDisplayName</code>  | Gets the DisplayName for a service                                                                 |     | <code>GetKeyName</code>      | Gets the ServiceKeyName for a service                                                              |     | <code>EnumDepend</code>      | Enumerates Service Dependencies                                                                    |</p> </li> <li> <p><code>query/queryex</code> options</p> <ul> <li>query service status: <code>sc query [servicename]</code></li> <li>find matching services: <code>sc query [option]</code>   | Option     | Value Type                | Description                                                     |   | ---------- | ------------------------- | --------------------------------------------------------------- |   | <code>state=</code>   | <code>active</code>,<code>inactive</code>,<code>all</code> | service state to enumerate;               default: <code>active</code>     |   | <code>bufsize=</code> | <code>int</code>                     | size in bytes of enumeration buffer;      default: <code>4096</code>       |   | <code>ri=</code>      | <code>int</code>                     | resume index number to begin enumeration; default: <code>0</code>          |   | <code>group=</code>   | <code>string</code>                  | service group to enumerate;               default: <code>all groups</code> |</li> <li>syntax examples</li> </ul> Batchfile<pre><code>sc query                                - Enumerates status for active services &amp; drivers\nsc query   eventlog                     - Displays status for the eventlog service\nsc queryex eventlog                     - Displays extended status for the eventlog service\nsc query   type= driver                 - Enumerates only active drivers\nsc query   type= service                - Enumerates only Win32 services\nsc query   state= all                   - Enumerates all services &amp; drivers\nsc query   bufsize= 50                  - Enumerates with a 50 byte buffer\nsc query   ri= 14                       - Enumerates with resume index = 14\nsc queryex group= \"\"                    - Enumerates active services not in a group\nsc query   type= interact               - Enumerates all interactive services\nsc query   type= driver group= NDIS     - Enumerates all NDIS drivers\n</code></pre> </li> </ul>"},{"location":"dev-notes/win-internals/win-debug-recipes/components/win-drivers/#approach-3-pnputil","title":"Approach 3: pnputil","text":"<ul> <li>find bad offender's by looking at zombie processes using Pavel's Object Explorer</li> <li>ex: Razer's shitty GameManagerService.exe that's forced on users for no reason</li> <li>list/inspect</li> <li>AutoRuns</li> <li>DriverView</li> <li>DevManView</li> <li>InstalledDriverList</li> <li> <p>command line Batchfile<pre><code>driverquery /V\npnputil /enum-drivers\npnputil /enum-devices\npnputil /enum-interfaces\n</code></pre></p> </li> <li> <p>delete</p> </li> <li>BCUninstaller</li> <li>BleachBit</li> <li> <p>command line Batchfile<pre><code>pnputil /delete-driver oem####.inf /uninstall /force\n</code></pre></p> PowerShell<pre><code>Get-CimInstance Win32_SystemDriver -Filter \"name='LGBusEnum'\" | Invoke-CimMethod -MethodName Delete\nGet-CimInstance Win32_SystemDriver -Filter \"name='LGJoyXlCore'\" | Invoke-CimMethod -MethodName Delete\nGet-CimInstance Win32_SystemDriver -Filter \"name='LGVirHid'\" | Invoke-CimMethod -MethodName Delete\nGet-CimInstance Win32_SystemDriver -Filter \"name='LVRS64'\" | Invoke-CimMethod -MethodName Delete\n</code></pre> </li> </ul>"},{"location":"dev-notes/win-internals/win-debug-recipes/components/win-fontcache/","title":"FontCache","text":"<ul> <li>Delete for font duplicates in user/system-wide installations</li> </ul> PowerShell<pre><code>(Get-Item \"$env:SystemRoot\\Fonts\\Iosevka*\"                    ).FullName | Remove-Item\n(Get-Item \"$env:LOCALAPPDATA\\Microsoft\\Windows\\Fonts\\Iosevka*\").FullName | Remove-Item\n</code></pre> <ul> <li>Rebuild Windows Font Cache</li> </ul> PowerShell<pre><code># stop/disable font cache services\n$fcStartType       = (Get-Service 'FontCache').StartType        # WindowsFontCacheService\n$fc3StartType      = (Get-Service 'FontCache3.0.0.0').StartType # WindowsPresentationFoundationFontCache3.0.0.0\n'FontCache'        | Stop-Service -PassThru | Set-Service -StartupType:Disabled\n'FontCache3.0.0.0' | Stop-Service -PassThru | Set-Service -StartupType:Disabled\n\n# delete font cache files\n\"$env:SystemRoot/System32/FNTCACHE.dat\"                                    | Remove-Item\n\"$env:SystemRoot/ServiceProfiles/LocalService/AppData/Local/FontCache.dat\" | Remove-Item\n\"$env:SystemRoot/ServiceProfiles/LocalService/AppData/Local/FontCache/\"    | Get-ChildItem | Remove-Item\n\n# reenable/restart font cache services\n'FontCache'        | Set-Service -StartupType:$fcStartType  -PassThru | Start-Service\n'FontCache3.0.0.0' | Set-Service -StartupType:$fc3StartType -PassThru | Start-Service\n</code></pre>"},{"location":"dev-notes/win-internals/win-debug-recipes/components/win-gpo/","title":"Group Policy","text":"<ul> <li>Export GroupPolicy modifications: <code>gpresult /h './GPReport.html'</code></li> <li>Query Sids: Batchfile<pre><code>wmic useraccount where sid='S-1-5-18' get domain,name,sid ;@rem get user by SID\nwmic useraccount get disabled,domain,name,sid             ;@rem list all the users and their SIDs\nwmic sysaccount get domain,name,sid                       ;@rem list built-in accounts\nwmic group get domain,name,sid                            ;@rem list Active Directory groups\nnet user &lt;username&gt;                                       ;@rem list all info for one user\nnet localgroup Administrators                             ;@rem list users in the local Administrators group\n</code></pre></li> </ul>"},{"location":"dev-notes/win-internals/win-debug-recipes/components/win-image/","title":"Windows Image Repair","text":"<ul> <li> <p>dism: repair system image using Windows Update to restore ucorrupted files</p> </li> <li> <p>scan but not repair corruptions Batchfile<pre><code>dism /Online /Cleanup-Image /CheckHealth\n</code></pre></p> </li> <li> <p>more advanced scan Batchfile<pre><code>dism /Online /Cleanup-Image /ScanHealth\n</code></pre></p> </li> <li> <p>scan and repair common issues Batchfile<pre><code>dism /Online /Cleanup-Image /RestoreHealth\n</code></pre></p> </li> <li> <p>use mounted installation media/iso to restore system files Batchfile<pre><code>dism /Online /Cleanup-Image /RestoreHealth /Source:F:\\sources\\Install.esd /LimitAccess\n</code></pre></p> </li> <li> <p><code>%windir%\\Logs\\DISM\\dism.log</code>: generated detailed log</p> </li> <li>System File Checker: scan/repair all protected system files using the local image files at <code>%windir%\\System32\\dllcache</code></li> </ul> Batchfile<pre><code>sfc /scannow\n</code></pre> <ul> <li>if <code>sfc</code> returns <code>could not perform the requested operation</code><ul> <li>ensure folders exist <code>%windir%\\WinSxS\\Temp\\PendingDeletes</code>, <code>%windir%\\WinSxS\\Temp\\PendingRenames</code></li> <li>reboot into safe mode and rerun <code>sfc</code></li> </ul> </li> <li> <p><code>%windir%\\Logs\\CBS\\CBS.log</code>: generated detailed log; extract sfc process details only with Batchfile<pre><code>findstr /c:\"[SR]\" %windir%\\Logs\\CBS\\CBS.log &gt; \"%userprofile%\\Desktop\\sfcdetails.txt\"\n</code></pre></p> </li> <li> <p>Cleanup Windows Update</p> </li> <li> <p>analyze component store for removable updates Batchfile<pre><code>dism /Online /Cleanup-Image /AnalyzeComponentStore\n</code></pre></p> </li> <li> <p>trigger cleanup Batchfile<pre><code>dism /Online /Cleanup-Image /StartComponentCleanup\n</code></pre></p> </li> <li> <p>trigger more time consuming follow-up cleanup Batchfile<pre><code>dism /Online /Cleanup-Image /StartComponentCleanup /ResetBase\n</code></pre></p> </li> </ul>"},{"location":"dev-notes/win-internals/win-debug-recipes/debugger/win-debugging-config/","title":"Configuring Windows Debugging Settings","text":""},{"location":"dev-notes/win-internals/win-debug-recipes/debugger/win-debugging-config/#postmortem-debugging","title":"Postmortem Debugging","text":"<ul> <li> <p>Configure System Crash Dump Options</p> </li> <li> <p>UI: <code>Windows Settings-&gt;About-&gt;Advanced Tab-&gt;Startup and Recovery Settings</code></p> </li> <li>Registry Key: <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\CrashControl</code></li> <li> <p>Configuring postmortem debugger: <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AeDebug</code></p> </li> <li> <p><code>Debugger=REG_SZ:[DebuggerCmd]</code> value: specify postmortem debugger where <code>[DebuggerCmd]</code> is invocation command</p> <ul> <li>1<sup>st</sup> <code>%ld</code>: replaced with the <code>Process ID</code></li> <li>2<sup>nd</sup> <code>%ld</code>: replaced with the <code>Event Handle</code></li> <li>Ex: <code>\"C:\\debuggers\\windbg.exe\" -p %ld -e %ld -g</code></li> </ul> </li> <li><code>Auto=REG_SZ:[0|1]</code> value: configure automatic debugging behavior<ul> <li><code>0</code>: disable auto invoke and show user interaction dialog</li> <li><code>1</code>: enable auto invoke and hide user interaction dialog</li> </ul> </li> <li><code>.\\AutoExclusionList\\[ExeName]=dword:00000001</code> value: exclude <code>[ExeName]</code> from automatic debugging e.g.<ul> <li><code>\"DWM.exe\"=dword:00000001</code></li> </ul> </li> <li> <p><code>AeDebug</code> default registry entries Text Only<pre><code>HKEY_LOCAL_MACHINE\n  SOFTWARE\n    Microsoft\n      Windows NT\n        CurrentVersion\n          AeDebug\n            Auto = 1\n            AutoExclusionList\n              DWM.exe = 1\n</code></pre></p> </li> <li> <p>(Reference)</p> </li> </ul>"},{"location":"dev-notes/win-internals/win-debug-recipes/debugger/win-debugging-config/#windows-debugging-tips","title":"Windows Debugging Tips","text":""},{"location":"dev-notes/win-internals/win-debug-recipes/debugger/win-debugging-config/#gflags","title":"GFlags","text":"<p>Global Flags Editor (<code>WindowsSDK\\Debuggers\\x64\\gflags.exe</code>) enables/disables advanced windows diagnostic settings/registry keys</p> <ul> <li> <p>features </p> </li> <li> <p>advanced debugging settings e.g. break on process launch</p> </li> <li>page heap allocation monitoring/verification</li> <li>kernel object reference tracing</li> <li> <p>[!warning] <code>gflags.exe</code> must be run as admin to set windows debug settings</p> </li> <li> <p>GFlags Reference</p> </li> </ul>"},{"location":"dev-notes/win-internals/win-debug-recipes/debugger/win-debugging-config/#sysinternals","title":"SysInternals","text":"<p>Collection of useful system troubleshooting tools</p> <ul> <li><code>WinObj</code> shows all the OS objects</li> <li><code>SigCheck -a sftvolwin7.sys</code>: verify valid signature and shows file version info</li> <li><code>TCPView</code>: see all network traffic</li> <li><code>Procmon</code>: count occurrences; result will collate all errors</li> </ul>"},{"location":"dev-notes/win-internals/win-debug-recipes/debugger/windbg/","title":"WinDBG","text":"<p>A much more powerful debugger than Visual Studio but annoyingly must be downloaded as a Windows App Store</p>"},{"location":"dev-notes/win-internals/win-debug-recipes/debugger/windbg/#command-cheatsheet","title":"Command Cheatsheet","text":""},{"location":"dev-notes/win-internals/win-debug-recipes/debugger/windbg/#debugger-analysis","title":"Debugger Analysis","text":"Command Desc <code>k</code> Display backtrace <code>!locks</code> Display all resource locks held by any thread <code>!uniqstack</code> Display all thread stacks excluding duplicates <code>!findstack</code> Find all stacks containing specified symbol/module"},{"location":"dev-notes/win-internals/win-debug-recipes/debugger/windbg/#breakpoints-analysis","title":"Breakpoints Analysis","text":"Command Desc <code>bp</code> Set Breakpoint: new breakpoint using address <code>bu</code> Set Unresolved Breakpoint: new unresolved/deferred breakpoint using symbolic reference. Persists across module load/unload <code>bm</code> Set Symbol Breakpoint: new breakpoints on symbols using pattern match; defaults to unresolved but can associate to address with <code>/d</code> switch <code>ba</code> Break on Access: new data hardware breakpoint <code>be</code>/<code>bd</code>/<code>bc</code> Breakpoint Enable/Disable/Clear: enable/disable/clear breakpoints <code>bl</code> Breakpoint List: list breakpoints with current status <code>.bpcmds</code> Display Breakpoint Commands: list breakpoints with commands <code>br</code> Breakpoint Renumber: change breakpoint ID <code>bs</code> Update Breakpoint Command: change breakpoint command <code>bsc</code> Update Conditional Breakpoint: change breakpoint condition"},{"location":"dev-notes/win-internals/win-debug-recipes/debugger/windbg/#hang-analysis","title":"Hang Analysis","text":"<ul> <li>run analysis: <code>!analyze -v -hang</code></li> <li>look at the stack and rerun the stack dump command (eg: <code>~0s ; .cxr ; kb</code>)</li> <li>most likely will be <code>NtWaitForSingleObject</code>.  Grab the handle pointer and <code>fe</code></li> </ul>"},{"location":"dev-notes/win-internals/win-debug-recipes/debugger/windbg/#crashdump-analysis","title":"Crash/Dump Analysis","text":"<ul> <li>open dump file and analyze: <code>!analyze -v</code></li> <li>Debugging BSOD/Bugcheck</li> <li>Live Kernel Mode Debugging</li> <li>System File Checker: repair missing or corrupted system files</li> <li>BlueScreenView: visualize BSOD minidumps</li> <li>BSOD/Crash Dump/Minidump Tips</li> </ul>"},{"location":"dev-notes/win-internals/win-debug-recipes/debugger/windbg/#windbg-notes","title":"WinDBG Notes","text":"<ul> <li>BreakPoints</li> <li>can specify the location of a breakpoint by virtual address, module and function offsets, or source file and line number (when in source mode)<ul> <li>function breakpoint without offset is triggered on function entry</li> </ul> </li> <li>can be associated with a certain thread</li> <li>can enable a fixed number of passes through an address before it is triggered</li> <li>can automatically issue certain commands when it is triggered</li> <li>can be set on non-executable memory and watch for that location to be read or written to</li> <li>can include a command to execute on trigger<ul> <li>Ex: breaks at <code>MyFunction+0x47</code>, writes a dump file, then resumes execution: <code>bu MyFunction+0x47 \".dump c:\\mydump.dmp; g\"</code></li> </ul> </li> <li>each breakpoint has a decimal number called the breakpoint ID associated with it. This number identifies the breakpoint in various commands</li> <li>Hardware Breakpoints</li> <li>Complex DataAccess breakpoints</li> </ul>"},{"location":"dev-notes/win-internals/win-debug-recipes/kernel/win-kernel-cheatsheet/","title":"Windows Kernel Cheatsheet","text":""},{"location":"dev-notes/win-internals/win-debug-recipes/kernel/win-kernel-cheatsheet/#resourcessource-code","title":"Resources/Source code","text":"<p>Use these repositories to get a sense of what windows might be doing underneath the covers</p> <ul> <li>ReactOS</li> <li>WineHQ</li> <li>Undocumented NT Internals: outdated but useful for historical context</li> <li>OSR Community</li> <li>vergiliusproject: collection of kernel structures/unions/enumerations, most not officially documented/WDK headers</li> <li>terminus (unmaintained): automatically generated diff of Windows structures with nice presentation layer</li> </ul>"},{"location":"dev-notes/win-internals/win-debug-recipes/kernel/win-kernel-cheatsheet/#windows-kernel-syscall-notes","title":"Windows Kernel Syscall Notes","text":""},{"location":"dev-notes/win-internals/win-debug-recipes/kernel/win-kernel-cheatsheet/#ntxxx-vs-zwxxx","title":"Ntxxx vs Zwxxx","text":"<ul> <li>These are tiny syscall wrappers that enter the kernel</li> <li>User Mode initiated syscalls: are synonyms</li> <li>Kernel Mode drivers: handle parameters differently</li> </ul>"},{"location":"dev-notes/win-internals/win-debug-recipes/kernel/win-kernel-cheatsheet/#function-prefixes","title":"Function Prefixes","text":"Prefix Function (Reference) Cc Cache manager Cm Configuration manager; registry implementation Csr Client Server support functions(LPC; related: CSRSS.EXE) Dbg Debugger support functions Etw Extended tracing ... support functions (???) Ex Executive Fs File system support functions Hal Hardware abstraction layer functions Inbv Something like: _In_itial _B_oot _V_ideo functions (???) Io I/O manager support functions Kd Kernel debugger support functions Ke Ki = Kernel External/Internal Ks Kernel Streams Ldr PE image loader support functions Lpc LPC support functions Lsa Local security authority support functions Mm Memory manager support functions Nt NT Native API/Syscall implementations Nls Native language support functions Ob Object manager functions Pfx Name prefix support functions /container for strings Po Power management support functions Ps Process management support functions Rtl Runtime library functions (called from usermode;equiv of implementations of the c-runtime) Rtlp Private runtime library functions Se Security support functions Tm Transaction manager Wmi Windows management instrumentation support functions Vf Driver verifier function Zw Zero Warranty (Native API equiavlents for driver; tiny pieces of code which call syscalls, thus re-entering the kernel.)"},{"location":"dev-notes/win-internals/win-debug-recipes/network/intel-drivers/","title":"Intel Network Drivers","text":"<p>NOTE: Don't install Intel PROSet/Wireless Software</p>"},{"location":"dev-notes/win-internals/win-debug-recipes/network/intel-drivers/#clean-install-ethernet-drivers","title":"Clean Install Ethernet Drivers","text":""},{"location":"dev-notes/win-internals/win-debug-recipes/network/intel-drivers/#simple-clean-uninstall","title":"Simple Clean Uninstall","text":"<p>reference</p> <ul> <li>Open Windows Device Manager</li> <li>Double-click Network adapters to expand the section.</li> <li>Right-click the Intel Ethernet Connection (model) and select Properties.</li> <li>Click the Driver tab.</li> <li>Click Uninstall.</li> <li>Check Delete the driver software for this device and click OK.</li> <li>Press the Windows key + R, then type %Temp% and delete everything from that folder.</li> <li>Install the latest Intel driver from the Download Center.</li> </ul>"},{"location":"dev-notes/win-internals/win-debug-recipes/network/intel-drivers/#remove-phantom-adapters","title":"Remove phantom adapters","text":"<p>reference:</p> <ul> <li> <p>Close Windows Device Manager.</p> </li> <li> <p>Select Start &gt; All Programs &gt; Accessories &gt; Command Prompt, and enter the following commands</p> </li> </ul> Batchfile<pre><code>set devmgr_show_nonpresent_devices=1\nstart devmgmt.msc\n</code></pre> <ul> <li> <p>From the Windows Device Manager menu, select View &gt; Show hidden devices.</p> </li> <li> <p>Expand the Network Adapter tree, delete the adapters that are no longer installed by right clicking the gray network adapters and select Uninstall.</p> </li> <li> <p>Close the Device Manager and reboot your system.</p> </li> <li> <p>Remove the phantom adapters from Device Manager.</p> </li> <li> <p>Uninstall and remove any existing teams and Virtual Local Area Networks (VLANs).</p> </li> <li> <p>Uninstall the drivers for the network interface cards (NICs) via Device Manager.</p> </li> <li> <p>Reboot.</p> </li> <li> <p>Install the latest drivers and software.</p> </li> <li> <p>Re-create any teams and VLANs.</p> </li> </ul>"},{"location":"dev-notes/win-internals/win-debug-recipes/network/intel-drivers/#advanced-clean-uninstall","title":"Advanced Clean Uninstall","text":"<p>reference</p> <ul> <li> <p>Before starting this procedure, download drivers and software for Intel Ethernet Adapters for use during the installation step</p> </li> <li> <p>Remove the phantom adapters from Device Manager</p> </li> <li> <p>Uninstall and remove any existing teams and Virtual Local Area Networks (VLANs)</p> </li> <li> <p>Uninstall the drivers for the network interface cards (NICs) via Device Manager</p> </li> <li> <p>Reboot.</p> </li> <li> <p>Install the latest drivers and software</p> </li> <li> <p>Re-create any teams and VLANs</p> </li> </ul>"},{"location":"dev-notes/win-internals/win-debug-recipes/network/intel-drivers/#manually-uninstallcleanup-registry-items","title":"Manually Uninstall/Cleanup Registry Items","text":"<p>reference</p> <ul> <li> <p>Remove the phantom adapters from Device Manager.</p> </li> <li> <p>Uninstall and remove any existing teams and VLANs.</p> </li> <li> <p>Using Device Manager, uninstall the drivers for the NICs.</p> </li> <li> <p>From a command prompt, open regedt.exe.</p> </li> <li> <p>Back up the registry, File &gt; Export.</p> </li> <li> <p>Go to HKEY_LOCAL_MACHINESYSTEMCurrentControlSetControlClass{4D36E972-E325-11CE-BFC1-08002bE10318}</p> </li> <li> <p>Remove the numbered (0001 or 0007) registry keys where its DriverDesc value(s) = the name of your Intel LAN connection.</p> </li> <li> <p>Go to HKEY_LOCAL_MACHINESYSTEMCurrentControlSetControlNetwork{4D36E972-E325-11CE-BFC1-08002BE10318}</p> </li> <li> <p>Remove one of the following registry keys where, in subKey Connection:</p> </li> <li>Name value= Local Area Connection X and PnpInstanceID value = ROOTIANSMINIPORTxxx</li> <li>Name value= Local Area Connection X and PnpInstanceID value = PCI/VEN_8086&amp;DEV_xxxxxxxxxxxxxxxxxx</li> <li> <p>Go to HKEY_LOCAL_MACHINESOFTWAREMicrosoftWindows NTCurrentVersionNetworkCards.</p> </li> <li> <p>Remove the numbered key (1 or 5) where its Description value = the name of your Intel LAN connection(s).</p> </li> <li>Remove the following keys, if present</li> </ul> Text Only<pre><code>HKEY_LOCAL_MACHINE\\Software\\Intel\\Network_Services\\ANS\nHKEY_LOCAL_MACHINE\\Software\\Intel\\Network_Services\\DMIX\nHKEY_LOCAL_MACHINE\\Software\\Intel\\Network_Services\\INST_LANGUAGE_PRIV\nHKEY_LOCAL_MACHINE\\Software\\Intel\\Network_Services\\NCS2\nHKEY_LOCAL_MACHINE\\Software\\Intel\\Prounstl\\Dins\nHKEY_LOCAL_MACHINE\\Software\\Intel\\Prounstl\\Services\nHKEY_LOCAL_MACHINE\\Software\\Intel\\SupportedDevices\nHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\iANSMiniport\nHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\iANSProtocol\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\PROSetDX\n</code></pre> <ul> <li>Search in the Uninstall section for Intel Network Connections for key where<ul> <li>DisplayVersion value equals your PROSet/DMIX version e.g. <code>DisplayVersion = 14.5.1.0</code></li> <li>delete this key: ({AAA8CA88-8A22-43D1-867F-ABD7944C9815})</li> </ul> </li> <li> <p>Go to HKEY_LOCAL_MACHINESOFTWAREMicrosoftWindowsCurrentVersionInstallerFolders, and remove the following:</p> </li> <li> <p>..IntelANS</p> </li> <li>..IntelDMIX</li> <li>..IntelDMIXHlp</li> <li>..IntelDMIXResource</li> <li>..IntelDMIXuninst</li> <li>..IntelNS2</li> <li>..IntelNCS2Agent</li> <li>..IntelNCS2Scripts</li> <li>..IntelNCS2WMIProv</li> <li>..IntelNCS2WMIProvMOF</li> <li> <p>Save and reboot</p> </li> <li> <p>Reinstall drivers and re-create the teams and VLANs</p> </li> </ul>"},{"location":"dev-notes/win-internals/win-debug-recipes/network/intel-drivers/#clean-install-wireless-drivers","title":"Clean Install Wireless Drivers","text":""},{"location":"dev-notes/win-internals/win-debug-recipes/network/intel-drivers/#clean-uninstall","title":"Clean Uninstall","text":"<p>reference</p> <ul> <li> <p>Download and save the driver first</p> </li> <li> <p>Uninstall the Wi-Fi driver  NOTE: Windows may have an inbox Wi-Fi driver that came preinstalled on your system; they can't be uninstalled and \"Delete the driver software for this device\" option is unavailable/</p> </li> <li> <p>Go to Device Manager</p> </li> <li>Expand the Network Adapters category</li> <li>Right-click your Intel Wireless Adapter and choose to uninstall it</li> <li>Make sure to the option to Delete the driver software for this device is selected</li> <li>Repeat steps A through D until the  the option to Delete the driver software for this device is greyed out</li> <li> <p>Restart your computer</p> </li> <li> <p>Install previously downloaded driver</p> </li> </ul>"},{"location":"dev-notes/win-internals/win-debug-recipes/network/intel-drivers/#apply-recommended-settings-for-wireless-connectivity","title":"Apply Recommended Settings for Wireless Connectivity","text":"<p>reference</p> Property Value Channel Width for 5GHz Auto (Access Point determines width) Roaming Aggressiveness Medium Throughput Booster Disabled Transmit Power Highest 802.11a/b/g Wireless Mode or Wireless Mode Dual-band 802.11a/b/g or 802.11a/b/g 802.11n/ac Wireless Mode or HT Mode 802.11ac or VHT Mode Other Advanced Properties more details <ul> <li> <p>802.11n/ac Wireless Mode or HT Mode: determines the supported data rates/throughput mode   Ensure WiFi Router/Access Point supports 5 GHz and configured for 11ac mode</p> </li> <li> <p><code>HT=High=802.11n</code></p> </li> <li><code>VHT=Very High=802.11ac</code></li> <li><code>Disabled=11a/g rates</code></li> <li> <p>Key settings related to 11ac NOTE: The actual name and feature of the setting may vary depending on the AP. Check the user manual or contact your AP manufacturer for details</p> </li> <li> <p>Channel</p> <ul> <li> <p>This setting controls the channel your AP uses to communicate with client devices on your Wi-Fi network.</p> </li> <li> <p>Most APs should have this set to Auto by default. We don't recommend changing this setting unless you:</p> </li> <li> <p>Have a good understanding of Wi-Fi channels</p> </li> <li>Know how to determine the least congested channel in your environment</li> <li>Channel Width</li> </ul> <p>For optimal performance and compatibility, enable support for all channel widths. If configured for 40MHz only or 80MHz only, this setting prevents legacy devices that support only 20MHz from connecting to the AP.</p> </li> <li> <p>(Wireless) Mode</p> <p>This setting controls the type of Wi-Fi devices (802.11a/b/g/n/ac) that can connect to the AP. For optimal performance and compatibility, enable support for all wireless modes. If configured for 11ac mode only, legacy devices that support only 11n or 11a/g aren't able to connect to the AP.</p> </li> </ul>"},{"location":"dev-notes/win-internals/win-debug-recipes/network/win-network/","title":"Network","text":"<ul> <li>Network Adapter Batchfile<pre><code>ipconfig [/all]                      ;@rem show basic/detailed information\nipconfig [/renew   | /renew6 foo*]   ;@rem renew the IPv4/IPv6 address for all/matching adapter\nipconfig [/release | /release6 foo*] ;@rem release IPv4/IPv6 address for all/matching adapter\nipconfig /displaydns                 ;@rem show DNS Resolver cache contents\nipconfig /flushdns                   ;@rem purge DNS Resolver cache\nipconfig /registerdns                ;@rem refreshes all DHCP leases and re-registers DNS name\n\n@rem Reset network state/adaptors\nnetsh int ip reset\nnetsh winsock reset catalog\n&lt;reboot&gt;\n</code></pre></li> </ul>"},{"location":"dev-notes/zig/zig-build/","title":"Zig Build","text":""},{"location":"dev-notes/zig/zig-build/#basics","title":"Basics","text":"<p>Zig build scripts (usually named <code>build.zig</code>) are ordinary Zig programs with a special exported function (<code>pub fn build(b: *std.build.Builder) void</code>) utilizing <code>std.build.Builder</code> The build runner is invoked by <code>zig build</code> which in turn invokes  said <code>build.zig:build()</code></p> <ul> <li>create DAG of <code>std.build.Step</code> nodes where each <code>Step</code></li> <li>executes a part of our build process</li> <li>has a set of dependencies that need to be made before the step itself is made</li> <li>user can invoke named steps by calling <code>zig build step-name</code> or predefined steps (e.g. <code>install</code>)</li> <li>create with <code>Builder.step</code>: Zig<pre><code>pub fn build(b: *std.build.Builder) void {\n    const named_step = b.step(\"step-name\", \"This is what is shown in help\");\n}\n</code></pre></li> </ul>"},{"location":"dev-notes/zig/zig-build/#compiling-executable","title":"Compiling Executable","text":""},{"location":"dev-notes/zig/zig-build/#source-compilation","title":"Source Compilation","text":"<p><code>Builder</code> exposes <code>Builder.addExecutable</code> which will create us a new <code>LibExeObjStep</code></p> <ul> <li> <p>a convenient wrapper around <code>zig build-exe</code>, <code>zig build-lib</code>, <code>zig build-obj</code> or <code>zig test</code> depending on how it is initialized</p> </li> <li> <p>example:</p> </li> </ul> Zig<pre><code>pub fn build(b: *std.build.Builder) void {\n    const exe = b.addExecutable(\"fresh\", \"src/main.zig\");\n\n    const target = b.standardTargetOptions(.{});\n    exe.setTarget(target);\n\n    const mode = b.standardReleaseOptions();\n    exe.setBuildMode(mode);\n\n    const compile_step = b.step(\"compile\", \"Compiles src/main.zig\");\n    compile_step.dependOn(&amp;exe.step);\n}\n</code></pre> <ul> <li> <p>create with <code>Builder.addExecutable</code> that will compile main.zig into fresh/fresh.exe</p> </li> <li> <p>add dependency graph with <code>compile_step.dependOn(&amp;exe.step);</code>. This is how we build our dependency graph and declare that when <code>compile_step</code> is made, <code>exe</code> also needs to be made.</p> </li> </ul>"},{"location":"dev-notes/zig/zig-build/#cross-compilation","title":"Cross Compilation","text":"<ul> <li>cross compilation is enabled by setting the target and build mode of our program:</li> <li><code>exe.setBuildMode(.ReleaseSafe);</code> will pass <code>-O ReleaseSafe</code> to the build invocation.</li> <li><code>exe.setTarget(...);</code> will set what <code>-target ...</code> will see.</li> <li><code>Builder.standardReleaseOptions</code>/<code>Builder.standardTargetOptions</code>: convenience functions to make both the build mode and the target available as a command line option</li> <li> <p>invoke <code>zig build --help</code> to see command line options added by <code>standardTargetOptions</code> (first two) and <code>standardReleaseOptions</code> (rest) Zig<pre><code>Project-Specific Options:\n  -Dtarget=[string]           The CPU architecture, OS, and ABI to build for\n  -Dcpu=[string]              Target CPU features to add or subtract\n  -Drelease-safe=[bool]       Optimizations on and safety on\n  -Drelease-fast=[bool]       Optimizations on and safety off\n  -Drelease-small=[bool]      Size optimizations on and safety off\n</code></pre></p> </li> <li> <p>example command line: Zig<pre><code>zig build -Dtarget=x86_64-windows-gnu -Dcpu=athlon_fx\nzig build -Drelease-safe=true\nzig build -Drelease-small\n</code></pre></p> </li> </ul>"},{"location":"dev-notes/zig/zig-build/#installing-artifacts","title":"Installing Artifacts","text":"<p>Installation involves making a step on the <code>install</code> step of the <code>Builder</code></p> <ul> <li> <p><code>install</code> step always created and accessed via <code>Builder.getInstallStep()</code></p> </li> <li> <p><code>InstallArtifactStep</code> is build step responsible for copying exe artifact to install directory</p> </li> </ul> Zig<pre><code>pub fn build(b: *std.build.Builder) void {\n    const exe = b.addExecutable(\"fresh\", \"src/main.zig\");\n\n    const install_exe = b.addInstallArtifact(exe);\n    b.getInstallStep().dependOn(&amp;install_exe.step);\n}\n</code></pre> <p>This will now do several things:</p> <ul> <li><code>b.addInstallArtifact</code> creates a new <code>InstallArtifactStep</code> that copies the compilation result of <code>exe</code> to <code>$prefix/bin</code> (usually <code>zig-out</code>)</li> <li><code>InstallArtifactStep</code> (implicitly) depends on <code>exe</code> so will build <code>exe</code> as well</li> <li>invoke by <code>zig build install</code> (or just <code>zig build</code> for short)</li> <li>uninstall the artifact by invoking <code>zig build uninstall</code></li> <li>the <code>InstallArtifactStep</code> registers the output file for <code>exe</code> in a list that allows uninstalling it again</li> <li>NOTE: deletes all files created by <code>zig build install</code>, but not directories!</li> <li>Other helper functions</li> <li> <p><code>b.installArtifact(exe)/exe.install()</code>: convenience functions to wrap above steps. Ex: Zig<pre><code>pub fn build(b: *std.build.Builder) void {\n    const exe = b.addExecutable(\"fresh\", \"src/main.zig\");\n    b.installArtifact(exe);  //    Helper 1\n    exe.install();           // OR Helper 2\n}\n</code></pre></p> </li> <li> <p><code>Builder.installFile/installDirectory/etc</code>: install other types of artifacts</p> </li> </ul>"},{"location":"dev-notes/zig/zig-build/#running-applications","title":"Running Applications","text":"<p>Can run programs from build script for convenience</p> <ul> <li>usually exposed via a <code>run</code> step that can be invoked via <code>zig build run</code></li> </ul> Zig<pre><code>pub fn build(b: *std.build.Builder) void {\n    const exe = b.addExecutable(\"fresh\", \"src/main.zig\");\n\n    const run_step = std.build.RunStep.create(exe.builder, \"run fresh\");\n    run_step.addArtifactArg(exe);\n\n    const step = b.step(\"run\", \"Runs the executable\");\n    step.dependOn(&amp;run_step.step);\n}\n</code></pre> <ul> <li> <p><code>std.build.RunStep</code> runs any executable on the system</p> </li> <li> <p><code>RunStep.addArg</code> will add a single string argument to argv.</p> </li> <li> <p><code>RunStep.addArgs</code> will add several strings at the same time</p> </li> <li> <p><code>RunStep.addArtifactArg</code> will add the result file of a <code>LibExeObjStep</code> to argv</p> </li> <li> <p><code>RunStep.addFileSourceArg</code> will add any file generated by other steps to the argv</p> </li> <li> <p>NOTE: first argument must be the path to the executable we want to run. In this case, we want to run the compiled output of <code>exe</code></p> </li> <li> <p>NOTE: <code>RunStep</code> runs executable in the compile cache directory, not install directory (e.g. <code>./zig-cache/o/b0f56fa4ce81bb82c61d98fb6f77b809/fresh</code> vs <code>zig-out/bin/fresh</code>)</p> </li> <li> <p><code>exe.run()</code>: helper convenience function for above</p> Zig<pre><code>pub fn build(b: *std.build.Builder) void {\n    const exe = b.addExecutable(\"fresh\", \"src/main.zig\");\n\n    const run_step = exe.run();\n\n    const step = b.step(\"run\", \"Runs the executable\");\n    step.dependOn(&amp;run_step.step);\n}\n</code></pre> </li> <li> <p><code>Builder.args</code> contains command line args that can be passed to process. Ex:</p> Zig<pre><code>pub fn build(b: *std.build.Builder) void {\n    const exe = b.addExecutable(\"fresh\", \"src/main.zig\");\n    const run_step = exe.run();\n    if (b.args) |args| { run_step.addArgs(args); }\n    const step = b.step(\"run\", \"Runs the executable\");\n    step.dependOn(&amp;run_step.step);\n}\n</code></pre> Bash<pre><code>zig build run -- -o foo.bin foo.asm\n</code></pre> </li> </ul>"},{"location":"dev-notes/zig/zig-build/#recipes","title":"Recipes","text":""},{"location":"dev-notes/zig/zig-build/#link-zig-library","title":"Link zig library","text":"<ul> <li>Use <code>LibExeObjStep.addPackage/addPackagePath</code> with a <code>Pkg{ .name = \"library\", .path = \"/path/to/the/library\"}</code></li> <li>use <code>const library = @import(\"library\");</code> in your root source file</li> <li>Set output directory: <code>foo_lib.setOutputDir(output_path);</code></li> <li>note: this should be done before <code>foo_lib.setTarget(..)</code> as that will recompute the full output path</li> <li>Get lib output lib path source: <code>exe.linkSystemLibrary(foo_lib.getOutputLibSource());</code></li> </ul>"},{"location":"dev-notes/zig/zig-build/#use-a-native-c-library","title":"Use a native (C) library","text":"<ul> <li>Use <code>LibExeObjStep.linkSystemLibrary()</code> with your library's name</li> <li><code>@cInclude()</code> in your source code</li> </ul>"},{"location":"dev-notes/zig/zig-build/#use-a-native-c-library_1","title":"Use a native (C++) library","text":"<ul> <li>use <code>LibExeObjStep.linkSystemLibrary(\"c++\");</code></li> </ul>"},{"location":"dev-notes/zig/zig-build/#use-build-time-custom-command-line-flags--dsomething","title":"Use build-time custom command line flags (<code>-Dsomething</code>)","text":"<ul> <li>Use <code>LibExeObjStep.addBuildOption()</code> to add a value to the <code>build_options</code> package</li> <li>To get this value from the building user, use <code>Builder.option()</code></li> <li>Supported types for <code>option</code> are Strings and Enums (<code>-Dname=value</code> style), Booleans (<code>-Dname</code>, <code>-Dname=true</code>, <code>-Dname=false</code> style) and list of strings (<code>-Dname=value -Dname=value2</code> style)</li> <li>Use from your source code like <code>const should_do_thing = @import(\"build_options\").do_thing;</code></li> </ul>"},{"location":"dev-notes/zig/zig-build/#build_options","title":"build_options","text":"<p>provide compile-time configuration to your code</p> <ul> <li>the build system can create a package called <code>build_options</code> to communicate values from <code>build.zig</code> to your project's source code</li> <li>how to use:</li> <li> <p>create <code>OptionStep</code> in <code>build.zig</code> with declarations to populate: Zig<pre><code>const build_options = b.addOptions();\nbuild_options.addOption(bool, \"enable_tracy\", false);\nbuild_options.addOption(bool, \"enable_tracy_callstack\", false);\nbuild_options.addOption(bool, \"enable_tracy_allocation\", false);\n</code></pre></p> </li> <li> <p>add the options package to exe artifact: <code>exe.addOptions(\"build_options\", build_options);</code></p> </li> <li> <p>NOTE: if a package requires <code>build options</code>, must manually add it to its dependencies Zig<pre><code>const fooPkg = Pkg{\n  .name = \"foo\",\n  .path = FileSource{ .path = \"foo.zig\" },\n  .dependencies = &amp;[_]Pkg{\n    build_options.getPackage(\"build_options\"),\n  }};\n</code></pre></p> </li> <li> <p>can provide user input for these in form of <code>-Dname=value</code> flags.</p> </li> <li>can get the value a user provided (or <code>null</code> if they didn't, so use <code>orelse</code> on anything you get from this) using <code>Builder.option(type, name, description)</code></li> </ul>"},{"location":"dev-notes/zig/zig-build/#run-commands-as-build-steps","title":"Run commands as build steps","text":"<ul> <li>Use <code>Builder.addSystemCommand()</code> to get a step that runs your command</li> <li>create a top level step using <code>b.step()</code></li> <li>make the top level step depend on your run step using <code>top.dependOn(&amp;run.step)</code></li> </ul>"},{"location":"dev-notes/zig/zig-build/#get-actual-compilelink-flags","title":"Get actual compile/link flags","text":"<ul> <li><code>zig build --verbose</code>: emits the actual command passed to <code>zig build-exe/lib/obj</code> with the compilation flags</li> <li><code>zig build --verbose-link</code>: will emit the linker flags passed to llvm</li> </ul>"},{"location":"dev-notes/zig/zig-build/#generate-documentation","title":"Generate documentation","text":"<ul> <li>Use <code>Builder.addTest()</code> to get a step that will test your program that we will call <code>test_doc</code></li> <li>make it emit documentation using <code>test_doc.emit_docs = true;</code></li> <li>make it stop emitting binary files using <code>test_doc.emit_bin = false</code></li> <li>finally set the output directory to some folder using for example <code>test_doc.output_dir = \"docs\"</code></li> <li>create a top level step using <code>b.step()</code></li> <li>make that newly created step depends on documentation step using <code>doc_step.dependOn(&amp;test_doc.step)</code></li> </ul>"},{"location":"dev-notes/zig/zig-build/#translate-c","title":"Translate-C","text":""},{"location":"dev-notes/zig/zig-build/#incrementally-porting-c-app-series","title":"Incrementally Porting C App Series","text":"<ul> <li>Incrementally Porting C App: Part1</li> <li>Incrementally Porting C App: Part2</li> <li>Incrementally Porting C App: Part3</li> <li>Incrementally Porting C App: Part4</li> </ul>"},{"location":"dev-notes/zig/zig-build/#internals","title":"Internals","text":""},{"location":"dev-notes/zig/zig-build/#overview","title":"Overview","text":"<ul> <li><code>std.build.Builder</code>: representing a pending build and a DAG of all of its associated steps and their respective settings</li> <li><code>build.zig:pub fn build(b: *Builder) void</code> is responsible for adding the custom build logic for module to said Builder</li> <li>invoking <code>zig build</code> does under the hood is building and running lib/std/special/build_runner.zig,</li> <li>just a normal Zig application with <code>pub fn main()</code> and all the things you might already know from your actual project</li> <li><code>build_runner</code> imports your project's <code>build.zig</code> (it does this with a magic <code>@import(\"@build\")</code>)</li> <li>somewhere in its belly invokes your <code>pub fn build(b: *Builder)</code> on a <code>Builder</code> it created earlier</li> <li>The very last thing it does is hand over to this <code>Builder</code> you got to modify using <code>make()</code></li> <li>the main workhorse is <code>LibExeObjStep.make</code> which spawns the actual zig compiler (e.g. <code>zig build-exe/zig build-lib/zig cc</code>) with the builder/step settings converted as command line args</li> <li>code at src/main.zig</li> </ul>"},{"location":"dev-notes/zig/zig-build/#compiler-stages","title":"Compiler Stages","text":"<p>Zig uses multiple compiler stages for bootstrapping the compiler:</p> <ul> <li>zig0: is just the c++ compiler as a static library</li> <li>only implements the backend for build-exe/obj etc</li> <li>stage1: is the current compiler, written in C++, compiled with Clang</li> <li>uses zig0 library to build pieces of stage2 in (subcommands like translate-c etc)</li> <li>stage2: is the current project, written in Zig, compiled with stage1</li> <li>stage3: is the fully self-hosted, stage2 code compiled with stage2</li> <li>stage1 doesn't implement full optimizations so stage2 binary is not optimized</li> <li>stage3 binary is optimized b/c stage2 implements optimizations/much better codegen</li> </ul>"},{"location":"dev-notes/zig/zig-build/#stdbuildbuilder","title":"std.build.Builder","text":"<p>The core build graph coordinator. Main purpose:</p> <ul> <li>Coordinate and execute <code>Step</code>s that describe different stages of a build</li> <li>Provide default target and release mode for <code>Step</code>s</li> <li>Provide <code>build_options</code></li> </ul>"},{"location":"dev-notes/zig/zig-build/#stdbuildstep","title":"std.build.Step","text":"<p>the base node in the build DAG</p> <ul> <li>two noteworthy properties:</li> <li><code>makeFn</code>: does the actual work which implementing this step entails</li> <li><code>dependencies</code>: an <code>ArrayList</code> of different <code>Step</code>s that must be executed before this one (though that isn't handled by <code>Step</code> itself)</li> <li>you'll mostly use structs that wrap a bare <code>Step</code></li> <li><code>BuildExeObjStep</code>: this is the big one that actually does all of the compiling work</li> <li><code>LogStep</code>: very simple step that writes something to stderr</li> <li><code>RunStep</code>: which runs a system command</li> <li>these are usually constructed with one of many convenience methods on <code>Builder</code> like <code>builder.addTranslateC(std.build.FileSource)</code></li> <li>to get a quick overview of them, grep for <code>pub fn add</code> while in the source file</li> </ul>"},{"location":"dev-notes/zig/zig-build/#stdbuildlibexeobjstep","title":"std.build.LibExeObjStep","text":"<p>main step capable of invoking the zig compiler on your sources and turning them into executables or shared objects/DLLs</p> <ul> <li>usually constructed with one of <code>Builder</code>s <code>addX</code> methods and then its myriad settings modified</li> <li>finally call <code>install()</code> to create a build artifact in <code>./zig-cache/bin</code> (this path is also adjustable using <code>setOutputDir</code>)</li> <li>can also use a <code>LibExeObjStep</code> to run your tests as done in the default build.zig for libraries</li> </ul>"},{"location":"dev-notes/zig/zig-build/#stdzigcrosstarget","title":"std.zig.CrossTarget","text":"<p>defines project Build Targets</p> <ul> <li><code>build.zig</code> template exposes the full power of Zig's cross-compiling to the building user</li> <li>use <code>LibExeObjStep.setTarget(std.CrossTarget)</code> to set targets</li> <li>easiest way is calling it with <code>std.CrossTarget</code><code>.parse(std.CrossTarget.ParseOptions)</code> to get a interface reminiscent of the <code>-target</code> CLI option</li> <li>The <code>ParseOptions</code> struct is fairly well documented in the source.</li> <li><code>Builder.standardTargetOptions()</code> is convenience wrapper around <code>std.CrossTarget.parse()</code></li> </ul>"},{"location":"dev-notes/zig/zig-build/#compiler-internals","title":"Compiler Internals","text":"<ul> <li>Linking: Coff.zig:linkWithLLD</li> <li>Zig Stage2 Compiler Internals by Mitchell Hashimoto</li> <li>Zig Tokenizer</li> <li>Zig Parser</li> <li>Zig AstGen: AST =&gt; ZIR</li> <li>Zig Sema: ZIR =&gt; AIR</li> </ul>"},{"location":"dev-notes/zig/zig-build/#reference","title":"Reference","text":"<ul> <li>Zig Build System Internals by Mitchell Hashimoto</li> <li>Zig Build Explained: Part I</li> <li>Zig Build Explained: Part II</li> <li>Zig Build System Wiki Entry</li> <li>Relevant source files</li> <li>std/build.zig for <code>Builder</code>, <code>LibExeObjStep</code> and some other steps</li> <li>std/build/ for various other steps</li> <li>std/special/init-exe/build.zig for the default application build.zig template</li> <li>std/special/init-lib/build.zig for the default library build.zig template</li> <li>std/special/build_runner.zig for the file executed when you run <code>zig build</code></li> </ul>"},{"location":"dev-notes/zig/zig-crash-course/","title":"Zig Crash Course","text":""},{"location":"dev-notes/zig/zig-crash-course/#reference-material","title":"Reference Material","text":"<ul> <li>ZigLearn</li> <li>Zig in 30 minutes</li> <li>Understanding the Zig Programming Language</li> <li>Awesome Zig</li> <li>Awesome Zig Alternate</li> </ul>"},{"location":"dev-notes/zig/zig-crash-course/#highlevel-differences","title":"Highlevel Differences","text":""},{"location":"dev-notes/zig/zig-crash-course/#excluded-features","title":"Excluded features","text":"<ul> <li>string type</li> <li>classes/inheritance/runtime polymorphism</li> <li>interfaces/protocols</li> <li>constructors/destructors/RAII (zig uses <code>defer/errdefer</code> keyword)</li> <li>function/operator overloading</li> <li>closures or lambdas</li> <li>garbage collection</li> <li>exceptions (zig uses error codes instead)</li> </ul>"},{"location":"dev-notes/zig/zig-crash-course/#added-features","title":"Added features","text":"<ul> <li>Optional Values are first class citizen, replacing null pointers</li> <li>Errors as first class citizen algebraic types</li> <li>Structs as namespaces</li> <li>Compile time code execution replace macros</li> <li>Loops, labeled blocks, and if statements are expressions</li> <li>Slices</li> </ul>"},{"location":"dev-notes/zig/zig-crash-course/#semantic-departures","title":"Semantic departures","text":"<ul> <li> <p><code>const</code> is immutable and enforced</p> </li> <li> <p>variable shadowing not allowed</p> </li> <li> <p>there are no truthy values for if statements</p> </li> <li> <p>global scope constants are default comptime values; if type is omitted, they are comptime typed</p> </li> </ul> Zig<pre><code>const x: i32 = 47;\nconst y = -47;  // comptime integer.\n\npub fn main() void {\n    var a: i32 = y; // comptime constant coerced into correct type\n    var b: i64 = y; // comptime constant coerced into correct type\n    var c: u32 = y; // error: cannot cast negative value -47 to unsigned integer\n}\n</code></pre> <ul> <li> <p>return values must be used by default</p> </li> <li> <p>ignore by assigning to <code>_ = foobar()</code></p> </li> <li>all function arguments are immutable</li> <li> <p>Integer conversion/overflow</p> </li> <li> <p>Implicit integer widening casts allowed</p> </li> <li> <p>Overflows are detectable illegal behavior</p> </li> <li> <p>To explicitly allow overflow, use overflow operators</p> Normal Operator Wrapping Operator <code>+</code> <code>+%</code> <code>-</code> <code>-%</code> <code>*</code> <code>*%</code> <code>+=</code> <code>+%=</code> <code>-=</code> <code>-%=</code> <code>*=</code> <code>*%=</code> </li> </ul> Zig<pre><code>test \"well defined overflow\" {\n    var a: u8 = 255;\n    a +%= 1;\n    expect(a == 0);\n}\n</code></pre> <ul> <li>pointer syntax: (motivation: reduce ambiguities/make type inference easier)</li> </ul> Zig<pre><code>u8            : one u8 value\n?u8           : one optional u8 value\n[2]u8         : array of 2 u8 values\n[2:0]u8       : zero-terminated array of 2 u8 values\n[2]*u8        : array of 2 u8 pointers\n*u8           : pointer to one u8 value\n*?u8          : pointer to one optional u8 value\n?*u8          : optional pointer to u8 value\n*const u8     : pointer to immutable u8 value\n*const ?u8    : pointer to immutable optional u8 value\n?*const u8    : optional pointer to immutable u8 value\n*[2]u8        : pointer to array of 2 u8 values      \n*[2:0]u8      : pointer to zero-terminated array of 2 u8 values      \n*const [2]u8  : pointer to immutable array of 2 u8 values      \n[]u8          : slice(pointer + runtime len) of u8 values\n[]?u8         : slice(pointer + runtime len) of optional u8 values\n?[]u8         : optional slice(pointer + runtime len) of u8 values\n[]*u8         : slice(pointer + runtime len) of pointers to u8 values      \n[]*const u8   : slice(pointer + runtime len) of pointers to immutable u8 values      \n[*]u8         : pointer(unknown len) to of u8\n[*:0]u8       : pointer(unknown len) to but zero-terminated of u8 values\n*[]const u8   : pointer to slice of immutable u8 values      \n*[]*const ?u8 : pointer to slice of pointers to immutable optional u8 values  \n\nvar x: i32 = 4;\nvar ptr: *i32 = &amp;x;\nptr.* = 15;\n</code></pre> <ul> <li>pointer type coercion</li> </ul> Zig<pre><code>[2]u8  -&gt; *[2]u8    : by using address operator (&amp;)\n[2]u8  -&gt; []u8      : by using slice operator [..]\n*[2]u8 -&gt; []u8      : automatic coercion from pointer to fixed size array to slice\n[]u8   -&gt; [*]u8     : by using .ptr\nany    -&gt; ?any      : automatic coercion from non-optional to optional\nany    -&gt; const any : automatic coercion from non-const to const\n</code></pre> <ul> <li> <p>pointers can't be assigned null by default (motivation: stricter type checking. Optional value types are used instead )</p> </li> <li> <p>no automatic allocation by convention; any allocation functions explicitly take an allocator argument</p> </li> <li> <p>compiler intrinsic functions are prefixed by @ e.g. <code>@This(), @typeInfo(@TypeOf(args))</code></p> </li> </ul>"},{"location":"dev-notes/zig/zig-crash-course/#casting-for-c-programmers","title":"Casting for C Programmers","text":"<ul> <li> <p>@as: only allowed when the casting operation is unambiguous and safe</p> </li> <li> <p>use case: casting a compile-time integer for use in type inference: Zig<pre><code>var x = 5;              // not allowed - should x be signed? unsigned? what size?\nvar x = @as(u8, 5);     // type inference allows the compiler to determine that x is type u8\n</code></pre></p> </li> <li> <p>use case: casting an unsigned int to a larger signed int: Zig<pre><code>var x : u8 = 5;\nvar y = @as(i32, x);\n</code></pre></p> </li> <li> <p>use case: casting an int to a larger-size int of the same sign Zig<pre><code>var x : u8 = 5;\nvar y = @as(u32, x);\n</code></pre></p> </li> <li> <p>@truncate: explicitly cast to a smaller-size integer with the same signedness, by removing the most-significant bits</p> </li> <li> <p>NOTE: <code>@truncate()</code> on signed integers removes the most significant bits so the results may or may not remain negative Zig<pre><code>var x = @as(u16, 513);    // x in binary: 0000001000000001\nvar y = @truncate(u8, x); // y in binary:         00000001\n</code></pre></p> </li> <li> <p>@bitCast: Used to to cast between same sized types, preserving the bitpattern</p> </li> <li> <p>relevant when casting between signed and unsigned types (i.e. reinterpret cast) Zig<pre><code>var x = @as(u8, 180);     // x in binary: 10110100 (value is 180)\nvar y = @bitCast(i8, x);  // y in binary: 10110100 (value is -76)\n</code></pre></p> </li> <li> <p>@intCast: for runtime safety-checked narrowing conversions</p> </li> <li> <p>the dual of @bitCast i.e. preserves value but not the bitpattern</p> </li> <li>out of range cast is detectable illegal behavior</li> <li>if <code>@setRuntimeSafety(true)</code>, invalid <code>@intCast</code> with panic; otherwise, it's undefined behavior Zig<pre><code>var x = @as(i16, 180);\nvar y = @intCast(u8, x); // this is fine\nvar z = @intCast(i8, y); // this will crash\n</code></pre></li> </ul>"},{"location":"dev-notes/zig/zig-crash-course/#basic-syntax","title":"Basic Syntax","text":""},{"location":"dev-notes/zig/zig-crash-course/#imports","title":"Imports","text":"<ul> <li> <p><code>@import</code> is built-in function, evaluated at compile time.</p> </li> <li> <p>takes in a file, and gives you a struct type based on that file. All declarations labeled as <code>pub</code> will end up in result struct for use</p> </li> <li> <p><code>@import(\"std\")</code> is a special case in the compiler, and gives you access to the standard library. Other <code>@import</code>s will take in a file path, or a package name</p> </li> <li> <p><code>@import</code> to import stdlib/files/etc and assign to a namespace</p> </li> </ul> Zig<pre><code>const std = @import(\"std\");\n</code></pre> <ul> <li>almost everything needs to be assigned to an identifier</li> </ul>"},{"location":"dev-notes/zig/zig-crash-course/#variables","title":"Variables","text":"<ul> <li>normal: <code>var x: i32 = 7;</code></li> <li>const: <code>const x: i32 = 7;</code></li> <li>uninit: <code>var x: i32 = undefined;</code></li> <li>Zig will fill with <code>0XAA</code> for debugging</li> <li>type coercion: <code>const inferred_constant = @as(i32, 5);</code></li> </ul>"},{"location":"dev-notes/zig/zig-crash-course/#integers","title":"Integers","text":"<ul> <li> <p>Zig supports hex, octal and binary integer literals Zig<pre><code>const decimal_int: i32 = 98222;\nconst hex_int: u8 = 0xff;\nconst another_hex_int: u8 = 0xFF;\nconst octal_int: u16 = 0o755;\nconst binary_int: u8 = 0b11110000;\n</code></pre></p> </li> <li> <p>Underscores may also be placed between digits as a visual separator Zig<pre><code>const one_billion: u64 = 1_000_000_000;\nconst binary_mask: u64 = 0b1_1111_1111;\nconst permissions: u64 = 0o7_5_5;\nconst big_address: u64 = 0xFF80_0000_0000_0000;\n</code></pre></p> </li> </ul>"},{"location":"dev-notes/zig/zig-crash-course/#floats","title":"Floats","text":"<ul> <li> <p>use <code>@setFloatMode(.Optimized)</code> to enable -ffast-math</p> </li> <li> <p>Floats support multiple kinds of literal</p> </li> </ul> Zig<pre><code>const floating_point: f64 = 123.0E+77;\nconst another_float: f64 = 123.0;\nconst yet_another: f64 = 123.0e+77;\n\nconst hex_floating_point: f64 = 0x103.70p-5;\nconst another_hex_float: f64 = 0x103.70;\nconst yet_another_hex_float: f64 = 0x103.70P-5;\n</code></pre> <ul> <li>Underscores may also be placed between digits</li> </ul> Zig<pre><code>const lightspeed: f64 = 299_792_458.000_000;\nconst nanosecond: f64 = 0.000_000_001;\nconst more_hex: f64 = 0x1234_5678.9ABC_CDEFp-10;\n</code></pre> <ul> <li> <p>int &lt;-&gt; float casts: <code>@intToFloat</code> and <code>@floatToInt</code>.</p> </li> <li> <p><code>@intToFloat</code> is always safe</p> </li> <li><code>@floatToInt</code> is detectable illegal behavior if the float can't fit into integer</li> </ul>"},{"location":"dev-notes/zig/zig-crash-course/#strings","title":"Strings","text":"<ul> <li>string literals are null-terminated utf-8 encoded arrays of <code>const u8</code> bytes.</li> <li>length does not include the null termination (officially called \"sentinel termination\")</li> <li>it's safe to access the null terminator.</li> <li>indices are by byte, not by unicode glyph</li> </ul>"},{"location":"dev-notes/zig/zig-crash-course/#functions","title":"Functions","text":"<ul> <li> <p>general syntax Zig<pre><code>[pub] fn myFunName(arg: argType) returnType {\n  ...body...\n}\n</code></pre></p> </li> <li> <p><code>pub</code> to mark function as exportable from current scope</p> </li> <li>return values must be used but can be assigned to throw away e.g. <code>_ = foo();</code></li> </ul>"},{"location":"dev-notes/zig/zig-crash-course/#enums","title":"Enums","text":"<ul> <li>can be given namespaced methods</li> </ul> Zig<pre><code>const Suit = enum {\n    clubs,\n    spades,\n    diamonds,\n    hearts,\n    pub fn isClubs(self: Suit) bool {\n        return self == Suit.clubs;\n    }\n};\n</code></pre> <ul> <li>can also be given namespaced <code>const/var</code> variables, which act as namespaced globals. Values are unrelated and unattached to instances of the enum</li> </ul> Zig<pre><code>const Mode = enum {\n    var count: u32 = 0;\n    on,\n    off,\n};\n\ntest \"hmm\" {\n    Mode.count += 1;\n    expect(Mode.count == 1);\n}\n</code></pre>"},{"location":"dev-notes/zig/zig-crash-course/#structs","title":"Structs","text":"<ul> <li> <p>can be named/anonymous</p> </li> <li> <p>the type name derived from the variable decl it's assigned to or the type constructor function</p> </li> <li> <p>can have default values and members can be init out of order</p> </li> <li> <p>can also contain namespaced functions</p> </li> <li> <p>can be coerced into other structs</p> </li> <li> <p>syntactic sugar: emulate member functions by having first param be a pointer to struct</p> </li> </ul> Zig<pre><code>const Point = struct {\n  const Self = @This();\n\n  x: f64,\n  y: f64,\n  z: f64,\n\n  pub fn distance(self: Self, p: Point) f64 {\n    const x2 = math.pow(f64, self.x - p.x, 2);\n    const y2 = math.pow(f64, self.y - p.y, 2);\n    const z2 = math.pow(f64, self.z - p.z, 2);\n    return math.sqrt(x2 + y2 + z2);\n  }\n  fn print(self: Point) void {\n    std.debug.print(\"value: {}\\n\", .{self.x, self.y, self.z});\n  }\n};\n\npub fn main() !void {\n  const p1 = Point{ .x = 0, .y = 2, .z = 8 };\n  const p2 = .{ .x = 0, .y = 6, .z = 8 };\n  assert(p1.distance(p2) == 4);\n  assert(Point.distance(p1, p2) == 4);\n  p1.print();\n  Point.print(p2);\n}\n</code></pre>"},{"location":"dev-notes/zig/zig-crash-course/#unions","title":"Unions","text":"<ul> <li>Bare union types do not have a guaranteed memory layout</li> <li>bare unions cannot be used to reinterpret memory. Accessing a field in a union which is not active is detectable illegal behavior Zig<pre><code>const Payload = union {\n    int: i64,\n    float: f64,\n    bool: bool,\n};\ntest \"simple union\" {\n    var payload = Payload{ .int = 1234 };\n    payload.float = 12.34; // error =&gt; test \"simple union\"...access of inactive union field\n}\n</code></pre></li> </ul>"},{"location":"dev-notes/zig/zig-crash-course/#tagged-unions","title":"Tagged Unions","text":"<ul> <li>Tagged unions are unions which use an enum used to detect which field is active. Here we make use of a switch with payload capturing; captured values are immutable so pointers must be taken to mutate the values.</li> </ul> Zig<pre><code>const Tag = enum { a, b, c };\n\nconst Tagged = union(Tag) { a: u8, b: f32, c: bool };\n\ntest \"switch on tagged union\" {\n    var value = Tagged{ .b = 1.5 };\n    switch (value) {\n        .a =&gt; |*byte| byte.* += 1,\n        .b =&gt; |*float| float.* *= 2,\n        .c =&gt; |*b| b.* = !b.*,\n    }\n    expect(value.b == 3);\n}\n</code></pre> <ul> <li>The tag type of a tagged union can also be inferred. Shorthand for above</li> </ul> Zig<pre><code>const Tagged = union(enum) { a: u8, b: f32, c: bool };\n</code></pre> <ul> <li><code>void</code> member types can have their type omitted from the syntax. Here, none is of type <code>void</code></li> </ul> Zig<pre><code>const Tagged2 = union(enum) { a: u8, b: f32, c: bool, none };\n</code></pre>"},{"location":"dev-notes/zig/zig-crash-course/#array","title":"Array","text":"<ul> <li>normal array: <code>var array: [3]u32 = [_]u32{47, 47, 47};</code></li> <li>can also slice zig-crash-course &gt; Slices</li> </ul>"},{"location":"dev-notes/zig/zig-crash-course/#control-flow","title":"Control flow","text":"<ul> <li> <p>if/switch Zig<pre><code>if (v &lt; 0) {\n  return \"negative\";\n}\nelse {\n  return \"non-negative\";\n}\n</code></pre></p> </li> <li> <p>can also work as an expression: <code>x += if (a) 1 else 2;</code></p> </li> <li>switch (no case fall through, must be exhaustive) Zig<pre><code>var x: i8 = 10;\n    switch (x) {\n        -1...1 =&gt; {\n            x = -x;\n        },\n        10, 100 =&gt; {\n            //special considerations must be made\n            //when dividing signed integers\n            x = @divExact(x, 10);\n        },\n        else =&gt; {},\n    }\n</code></pre></li> </ul>"},{"location":"dev-notes/zig/zig-crash-course/#loops","title":"Loops","text":"<ul> <li>for loops over arrays or slices</li> </ul> Zig<pre><code>const string = [_]u8{ 'a', 'b', 'c' };\nfor (string) |character, index| {}\nfor (string) |character| {}\nfor (string) |_, index| {}\nfor (string) |_| {}\n</code></pre> <ul> <li>while: has three parts - a condition, a block and a continue expression</li> </ul> Zig<pre><code>var i: u8 = 2;\nwhile (i &lt; 100) {\n    i *= 2;\n}\n\nvar sum: u8 = 0;\nvar i: u8 = 0;\nwhile (i &lt;= 3) : (i += 1) {\n    if (i == 2) break;\n    if (i == 1) continue;\n    sum += i;\n}\n</code></pre>"},{"location":"dev-notes/zig/zig-crash-course/#pointers","title":"Pointers","text":"<ul> <li>Pointer types are declared by prepending <code>*</code> to the front of the type. No spiral declarations like C!</li> <li> <p>dereference with the <code>.*</code> field Zig<pre><code>pub fn printer(value: *i32) void {\n    std.debug.print(\"pointer: {}\\n\", .{value});\n    std.debug.print(\"value: {}\\n\", .{value.*});\n}\n</code></pre></p> </li> <li> <p>can't assign null or 0 to pointer</p> </li> <li> <p><code>usize/isize</code>: pointer sized integral types Zig<pre><code>expect(@sizeOf(usize) == @sizeOf(*u8));\nexpect(@sizeOf(isize) == @sizeOf(*u8));\n</code></pre></p> </li> <li> <p>unbounded array: <code>[*]T</code></p> </li> <li>works like <code>*T</code> but supports indexing, pointer arithmetic, &amp; slicing syntax</li> </ul>"},{"location":"dev-notes/zig/zig-crash-course/#new","title":"New","text":""},{"location":"dev-notes/zig/zig-crash-course/#defer","title":"Defer","text":"<ul> <li>allow statement to execute on lexical scope exit.</li> <li>multiple defers get executed in reverse order Zig<pre><code>var x: i16 = 5;\n{\n  defer x += 2;\n  expect(x == 5);\n}\nexpect(x == 7);\n</code></pre></li> </ul>"},{"location":"dev-notes/zig/zig-crash-course/#errors","title":"Errors","text":"<ul> <li>No exceptions</li> <li>Errors are values in a open union type, similar to enums</li> <li>Error sets coerce to their supersets.</li> </ul>"},{"location":"dev-notes/zig/zig-crash-course/#safety","title":"Safety","text":"<ul> <li>if enabled, \"detectable illegal behavior\" will cause panic; undefined if off</li> <li>Ex: array out of bounds access</li> <li>selective toggle in a block with <code>@setRuntimeSafety(false);</code></li> <li><code>unreachable</code> is a keyword similar to llvm intrinsic Zig<pre><code>return switch (x) {\n        'a'...'z' =&gt; x + 'A' - 'a',\n        'A'...'Z' =&gt; x,\n        else =&gt; unreachable,\n    };\n</code></pre></li> </ul>"},{"location":"dev-notes/zig/zig-crash-course/#labeled-blocks","title":"Labeled blocks","text":"<ul> <li>Blocks in Zig are expressions and can be given labels, which are used to yield values. Here, we are using a label called blk. Blocks yield values, meaning that they can be used in place of a value. The value of an empty block <code>{}</code> is a value of the type <code>void</code></li> </ul> Zig<pre><code>test \"labelled blocks\" {\n    const count = blk: {\n        var sum: u32 = 0;\n        var i: u32 = 0;\n        while (i &lt; 10) : (i += 1) sum += i;\n        break :blk sum;\n    };\n    expect(count == 45);\n    expect(@TypeOf(count) == u32);\n}\n</code></pre> <ul> <li>This can be seen as being equivalent to C\u2019s <code>i++</code></li> </ul> Zig<pre><code>blk: {\n  const tmp = i;\n  i += 1;\n  break :blk tmp;\n}\n</code></pre> <ul> <li>Loops can be given labels, allowing you to <code>break</code> and <code>continue</code> to outer loops</li> </ul> Zig<pre><code>test \"nested continue\" {\n  var count: usize = 0;\n  outer: for ([_]i32{ 1, 2, 3, 4, 5, 6, 7, 8 }) |_| {\n    for ([_]i32{ 1, 2, 3, 4, 5 }) |_| {\n      count += 1;\n      continue :outer;\n    }\n  }\n  expect(count == 8);\n}\n</code></pre> <ul> <li>Loops can be expressions. Like <code>return</code>, <code>break</code> accepts a value. This can be used to yield a value from a loop. Loops in Zig also have an <code>else</code> branch on loops, which is evaluated when the loop is not exited from with a <code>break</code>.</li> </ul> Zig<pre><code>fn rangeHasNumber(begin: usize, end: usize, number: usize) bool {\n  var i = begin;\n  return while (i &lt; end) : (i += 1) {\n    if (i == number) {\n      break true;\n    }\n  } else false;\n}\n\ntest \"while loop expression\" {\n  expect(rangeHasNumber(0, 10, 3));\n}\n</code></pre>"},{"location":"dev-notes/zig/zig-crash-course/#optionals","title":"Optionals","text":"<ul> <li> <p>nullable: any type, not just pointers, can be nullable</p> </li> <li> <p>pointers aren't allowed to have 0 or null value</p> </li> <li>they are unions of the base type and the special value null</li> <li>Optionals use the syntax <code>?T</code> and are used to store the data <code>null</code>, or a value of type <code>T</code></li> </ul> Zig<pre><code>test \"optional\" {\n  var found_index: ?usize = null;\n  const data = [_]i32{ 1, 2, 3, 4, 5, 6, 7, 8, 12 };\n  for (data) |v, i| {\n    if (v == 10) found_index = i;\n  }\n  expect(found_index == null);\n}\n</code></pre> <ul> <li>Optionals support the <code>orelse</code> expression, which acts when the optional is <code>null</code>. This unwraps the optional to its child type</li> </ul> Zig<pre><code>test \"orelse\" {\n  var a: ?f32 = null;\n  var b = a orelse 0;\n  expect(b == 0);\n  expect(@TypeOf(b) == f32);\n}\n</code></pre> <ul> <li><code>.?</code> is a shorthand for <code>orelse unreachable</code>. This is used for when you know it is impossible for an optional value to be null, and using this to unwrap a <code>null</code> value is detectable illegal behaviour</li> </ul> Zig<pre><code>test \"orelse unreachable\" {\n  const a: ?f32 = 5;\n  const b = a orelse unreachable;\n  const c = a.?;\n  expect(b == c);\n  expect(@TypeOf(c) == f32);\n}\n</code></pre> <ul> <li>Payload capturing: if non-null, can \u201ccapture\u201d value. <code>if (b) |value|</code> captures the value of <code>b</code> and copies it inside <code>value</code>.</li> </ul> Zig<pre><code>test \"if optional payload capture\" {\n  const a: ?i32 = 5;\n  if (a != null) {\n    const value = a.?;\n  }\n\n  const b: ?i32 = 5;\n  if (b) |value| {}\n}\nvar numbers_left: u32 = 4;\nfn eventuallyNullSequence() ?u32 {\n  if (numbers_left == 0) return null;\n  numbers_left -= 1;\n  return numbers_left;\n}\n\ntest \"while null capture\" {\n  var sum: u32 = 0;\n  while (eventuallyNullSequence()) |value| {\n    sum += value;\n  }\n  expect(sum == 6); // 3 + 2 + 1\n}\n</code></pre> <ul> <li> <p>Optional pointer and optional slice types do not take up any extra memory, compared to non-optional ones. This is because internally they use the 0 value of the pointer for <code>null</code>.</p> </li> <li> <p>This is how null pointers in Zig work - they must be unwrapped to a non-optional before dereferencing, which stops null pointer dereferences from happening accidentally.</p> </li> </ul>"},{"location":"dev-notes/zig/zig-crash-course/#payload-captures","title":"Payload Captures","text":"<p>Payload captures use the syntax <code>|value|</code> and appear in many places. These are used to \u201ccapture\u201d the value from something.</p> <p>With if statements and optionals.</p> Zig<pre><code>test \"optional-if\" {\n    var maybe_num: ?usize = 10;\n    if (maybe_num) |n| {\n        expect(@TypeOf(n) == usize);\n        expect(n == 10);\n    } else {\n        unreachable;\n    }\n}\n</code></pre> <p>With if statements and error unions. The else with the error capture is required here.</p> Zig<pre><code>test \"error union if\" {\n    var ent_num: error{UnknownEntity}!u32 = 5;\n    if (ent_num) |entity| {\n        expect(@TypeOf(entity) == u32);\n        expect(entity == 5);\n    } else |err| {\n        unreachable;\n    }\n}\n</code></pre> <p>With while loops and optionals. This may have an else block.</p> Zig<pre><code>test \"while optional\" {\n    var i: ?u32 = 10;\n    while (i) |num| : (i.? -= 1) {\n        expect(@TypeOf(num) == u32);\n        if (num == 1) {\n            i = null;\n            break;\n        }\n    }\n    expect(i == null);\n}\n</code></pre> <p>With while loops and error unions. The else with the error capture is required here.</p> Zig<pre><code>var numbers_left2: u32 = undefined;\n\nfn eventuallyErrorSequence() !u32 {\n    return if (numbers_left2 == 0) error.ReachedZero else blk: {\n        numbers_left2 -= 1;\n        break :blk numbers_left2;\n    };\n}\n\ntest \"while error union capture\" {\n    var sum: u32 = 0;\n    numbers_left2 = 3;\n    while (eventuallyErrorSequence()) |value| {\n        sum += value;\n    } else |err| {\n        expect(err == error.ReachedZero);\n    }\n}\n</code></pre> <p>For loops.</p> Zig<pre><code>test \"for capture\" {\n    const x = [_]i8{1, 5, 120, -5};\n    for (x) |v| expect(@TypeOf(v) == i8);\n}\n</code></pre> <p>Switch cases on tagged unions.</p> Zig<pre><code>const Info = union(enum) {\n    a: u32,\n    b: []const u8,\n    c,\n    d: u32,\n};\n\ntest \"switch capture\" {\n    var b = Info{ .a = 10 };\n    const x = switch (b) {\n        .b =&gt; |str| blk: {\n            expect(@TypeOf(str) == []const u8);\n            break :blk 1;\n        },\n        .c =&gt; 2,\n        //if these are of the same type, they\n        //may be inside the same capture group\n        .a, .d =&gt; |num| blk: {\n            expect(@TypeOf(num) == u32);\n            break :blk num * 2;\n        },\n    };\n    expect(x == 20);\n}\n</code></pre> <p>So far, we have only shown payload captures with copy semantics (i.e. the captured value is a copy of the original value). We can also modify captured values by taking them as pointers, using the <code>|*value|</code> syntax. This is called a pointer capture.</p> Zig<pre><code>test \"for with pointer capture\" {\n    var data = [_]u8{1, 2, 3};\n    for (data) |*byte| byte.* += 1;\n    expect(eql(u8, &amp;data, &amp;[_]u8{2, 3, 4}));\n}\n</code></pre>"},{"location":"dev-notes/zig/zig-crash-course/#inline-loops","title":"Inline Loops","text":"<p><code>inline</code> loops are unrolled, and allow some things to happen which only work at compile time. Here we use a <code>for</code>, but a <code>while</code> works similarly.</p> Zig<pre><code>test \"inline for\" {\n    const types = [_]type{ i32, f32, u8, bool };\n    var sum: usize = 0;\n    inline for (types) |T| sum += @sizeOf(T);\n    expect(sum == 10);\n}\n</code></pre> <p>Using these for performance reasons is inadvisable unless you\u2019ve tested that explicitly unrolling is faster; the compiler tends to make better decisions here than you.</p>"},{"location":"dev-notes/zig/zig-crash-course/#opaque","title":"Opaque","text":"<p><code>opaque</code> types in Zig have an unknown (albeit non-zero) size and alignment. Because of this these data types cannot be stored directly. These are used to maintain type safety with pointers to types that we don\u2019t have information about.</p> Zig<pre><code>const Window = opaque {};\nconst Button = opaque {};\n\nextern fn show_window(*Window) callconv(.C) void;\n\ntest \"opaque\" {\n    var main_window: *Window = undefined;\n    show_window(main_window);\n\n    var ok_button: *Button = undefined;\n    show_window(ok_button);\n}\n</code></pre> Zig<pre><code>./test-c1.zig:653:17: error: expected type '*Window', found '*Button'\n    show_window(ok_button);\n                ^\n./test-c1.zig:653:17: note: pointer type child 'Button' cannot cast into pointer type child 'Window'\n    show_window(ok_button);\n</code></pre> <p>Opaque types may have declarations in their definitions (the same as structs, enums and unions).</p> Zig<pre><code>const Window = opaque {\n    fn show(self: *Window) void {\n        show_window(self);\n    }\n};\n\nextern fn show_window(*Window) callconv(.C) void;\n\ntest \"opaque with declarations\" {\n    var main_window: *Window = undefined;\n    main_window.show();\n}\n</code></pre> <p>The typical use case of opaque is to maintain type safety when interoperating with C code that does not expose complete type information.</p>"},{"location":"dev-notes/zig/zig-crash-course/#anonymous-structs","title":"Anonymous Structs","text":"<p>The struct type may be omitted from a struct literal. These literals may coerce to other struct types.</p> Zig<pre><code>test \"anonymous struct literal\" {\n    const Point = struct { x: i32, y: i32 };\n\n    var pt: Point = .{\n        .x = 13,\n        .y = 67,\n    };\n    expect(pt.x == 13);\n    expect(pt.y == 67);\n}\n</code></pre> <p>Anonymous structs may be completely anonymous i.e. without being coerced to another struct type.</p> Zig<pre><code>test \"fully anonymous struct\" {\n    dump(.{\n        .int = @as(u32, 1234),\n        .float = @as(f64, 12.34),\n        .b = true,\n        .s = \"hi\",\n    });\n}\n\nfn dump(args: anytype) void {\n    expect(args.int == 1234);\n    expect(args.float == 12.34);\n    expect(args.b);\n    expect(args.s[0] == 'h');\n    expect(args.s[1] == 'i');\n}\n</code></pre>"},{"location":"dev-notes/zig/zig-crash-course/#tuples","title":"Tuples","text":"<p>Anonymous structs without field names may be created, and are referred to as tuples. These have many of the properties that arrays do; tuples can be iterated over, indexed, can be used with the <code>++</code> and <code>**</code> operators, and have a len field. Internally, these have numbered field names starting at <code>\"0\"</code>, which may be accessed with the special syntax <code>@\"0\"</code> which acts as an escape for the syntax - things inside <code>@\"\"</code> are always recognized as identifiers.</p> <p>An <code>inline</code> loop must be used to iterate over the tuple here, as the type of each tuple field may differ.</p> Zig<pre><code>test \"tuple\" {\n    const values = .{\n        @as(u32, 1234),\n        @as(f64, 12.34),\n        true,\n        \"hi\",\n    } ++ .{false} ** 2;\n    expect(values[0] == 1234);\n    expect(values[4] == false);\n    inline for (values) |v, i| {\n        if (i != 2) continue;\n        expect(v);\n    }\n    expect(values.len == 6);\n    expect(values.@\"3\"[0] == 'h');\n}\n</code></pre>"},{"location":"dev-notes/zig/zig-crash-course/#slices","title":"Slices","text":"<ul> <li>can create slices of arrays/pointers/and other slices using <code>[n..m]</code> syntax</li> <li>NOTE: slice operator is <code>[n..m]</code> where n and m are <code>[idxStart,idxEnd)</code> Zig<pre><code>var array = [_]u32{0,1,2,3,4,5};\nvar slice0: []u32 = array[0..];  // =&gt; {0,1,2,3,4,5}\nvar slice1: []u32 = array[3..5]; // =&gt; {3,4}\nvar slice2: []u32 = array[3..];  // =&gt; {3,4}\nvar slice3: []u32 = array[3..1]; // =&gt; invalid, will emit compile error\n</code></pre></li> </ul>"},{"location":"dev-notes/zig/zig-crash-course/#sentinel-termination","title":"Sentinel Termination","text":"<p>Arrays, slices and many pointers may be terminated by a value of their child type. This is known as sentinel termination. These follow the syntax <code>[N:t]T</code>, <code>[:t]T</code>, and <code>[*:t]T</code>, where <code>t</code> is a value of the child type <code>T</code>.</p> <p>An example of a sentinel terminated array. The built-in <code>@bitCast</code> is used to perform an unsafe bitwise type conversion. This shows us that the last element of the array is followed by a 0 byte.</p> Zig<pre><code>test \"sentinel termination\" {\n    const terminated = [3:0]u8{ 3, 2, 1 };\n    expect(terminated.len == 3);\n    expect(@bitCast([4]u8, terminated)[3] == 0);\n}\n</code></pre> <p>The types of string literals is <code>*const [N:0]u8</code>, where N is the length of the string. This allows string literals to coerce to sentinel terminated slices, and sentinel terminated many pointers. Note: string literals are UTF-8 encoded.</p> Zig<pre><code>test \"string literal\" {\n    expect(@TypeOf(\"hello\") == *const [5:0]u8);\n}\n</code></pre> <p><code>[*:0]u8</code> and <code>[*:0]const u8</code> perfectly model C\u2019s strings.</p> Zig<pre><code>test \"C string\" {\n    const c_string: [*:0]const u8 = \"hello\";\n    var array: [5]u8 = undefined;\n\n    var i: usize = 0;\n    while (c_string[i] != 0) : (i += 1) {\n        array[i] = c_string[i];\n    }\n}\n</code></pre> <p>Sentinel terminated types coerce to their non-sentinel-terminated counterparts.</p> Zig<pre><code>test \"coercion\" {\n    var a: [*:0]u8 = undefined;\n    const b: [*]u8 = a;\n\n    var c: [5:0]u8 = undefined;\n    const d: [5]u8 = c;\n\n    var e: [:10]f32 = undefined;\n    const f = e;\n}\n</code></pre> <p>Sentinel terminated slicing is provided which can be used to create a sentinel terminated slice with the syntax <code>x[n..m:t]</code>, where <code>t</code> is the terminator value. Doing this is an assertion from the programmer that the memory is terminated where it should be - getting this wrong is detectable illegal behavior.</p> Zig<pre><code>test \"sentinel terminated slicing\" {\n    var x = [_:0]u8{255} ** 3;\n    const y = x[0..3 :0];\n}\n</code></pre>"},{"location":"dev-notes/zig/zig-metaprogramming/","title":"Zig Metaprogramming","text":""},{"location":"dev-notes/zig/zig-metaprogramming/#overview","title":"Overview","text":"<p>Zig's metaprogramming is driven by a few basic concepts:</p> <ul> <li>Types are valid values at compile-time</li> <li>most runtime code will also work at compile-time</li> <li>struct field evaluation is compile-time duck-typed</li> <li>the zig standard library gives you tools to perform compile-time reflection</li> <li>examples:</li> <li> <p>multiple dispatch</p> Zig<pre><code>const std = @import(\"std\");\n\nfn foo(x : anytype) @TypeOf(x) {\n    // note that this if statement happens at compile-time, not runtime.\n    if (@TypeOf(x) == i64) {\n        return x + 2;\n    } else {\n        return 2 * x;\n    }\n}\n\npub fn main() void {\n    var x: i64 = 47;\n    var y: i32 =  47;\n\n    std.debug.print(\"i64-foo: {}\\n\", .{foo(x)});\n    std.debug.print(\"i32-foo: {}\\n\", .{foo(y)});\n}\n</code></pre> </li> <li> <p>generic Types</p> Zig<pre><code>fn Vec2Of(comptime T: type) type {\n    return struct{\n        x: T,\n        y: T\n    };\n}\n\nconst V2i64 = Vec2Of(i64);\nconst V2f64 = Vec2Of(f64);\n\npub fn main() void {\n    var vi = V2i64{.x = 47, .y = 47};\n    var vf = V2f64{.x = 47.0, .y = 47.0};\n\n    std.debug.print(\"i64 vector: {}\\n\", .{vi});\n    std.debug.print(\"f64 vector: {}\\n\", .{vf});\n}\n</code></pre> </li> </ul>"},{"location":"dev-notes/zig/zig-metaprogramming/#compile-time-execution","title":"Compile Time Execution","text":"<ul> <li>Blocks of code may be forcibly executed at compile time using the <code>comptime</code> keyword. In this example, the variables x and y are equivalent.</li> </ul> Zig<pre><code>test \"comptime blocks\" {\n    var x = comptime fibonacci(10);\n\n    var y = comptime blk: {\n        break :blk fibonacci(10);\n    };\n}\n</code></pre> <ul> <li>Integer literals are of the type <code>comptime_int</code>. These are special in that they have no size (they cannot be used at runtime!), and they have arbitrary precision. <code>comptime_int</code> values coerce to any integer type that can hold them. They also coerce to floats. Character literals are of this type.</li> </ul> Zig<pre><code>test \"comptime_int\" {\n    const a = 12;\n    const b = a + 10;\n\n    const c: u4 = a;\n    const d: f32 = b;\n}\n</code></pre> <ul> <li> <p><code>comptime_float</code> is also available, which internally is an <code>f128</code>. These cannot be coerced to integers, even if they hold an integer value.</p> </li> <li> <p>function parameters in Zig can be tagged as being <code>comptime</code>, meaning value passed must be known at compile time</p> </li> </ul> Zig<pre><code>fn Matrix(\n    comptime T: type,\n    comptime width: comptime_int,\n    comptime height: comptime_int,\n) type {\n    return [height][width]T;\n}\n\ntest \"returning a type\" {\n    expect(Matrix(f32, 4, 4) == [4][4]f32);\n}\n</code></pre>"},{"location":"dev-notes/zig/zig-metaprogramming/#gotchassurprises","title":"Gotchas/Surprises","text":"<ul> <li>no peer type resolution in comptime execution</li> <li>all comptime values do not obey usual lifetime rules;</li> <li>have \"static\" lifetimes (can think of values as garbage collected)</li> <li><code>anytype</code> struct fields are allowed</li> <li>turns the struct into a comptime type</li> <li> <p>NOTE: allows the type of the field to be mutable Zig<pre><code>const ArgTuple = struct {\n  tuple: anytype = .{},\n};\nvar arg_list = ArgTuple{};\nfor (args) |arg| {\n  if (@TypeOf(arg) == ?u21) {\n    if (arg) |cp| {\n      arg_list.tuple = arg_list.tuple ++ .{ctUtf8EncodeChar(cp)};\n    } else {\n      arg_list.tuple = arg_list.tuple ++ .{\"null\"};\n    }\n  } else if (@TypeOf(arg) == u21) {\n    arg_list.tuple = arg_list.tuple ++ .{ctUtf8EncodeChar(arg)};\n  } else {\n    arg_list.tuple = arg_list.tuple ++ .{arg};\n  }\n}\n</code></pre></p> </li> <li> <p>can use <code>comptime var</code> to create compile time closures</p> </li> <li>uses anonymous struct literals to avoid compiler caching</li> <li>can be buggy in complex cases</li> <li>Look at zorrow, a simple rust-like borrow checker implemented using this technique</li> </ul>"},{"location":"dev-notes/zig/zig-metaprogramming/#reflection","title":"Reflection","text":"<ul> <li>Types in Zig are values of the type <code>type</code>, only available at compile time</li> </ul> Zig<pre><code>test \"branching on types\" {\n    const a = 5;\n    const b: if (a &lt; 10) f32 else i32 = 5;\n}\n</code></pre> <ul> <li> <p>can reflect upon types using the built-in <code>@typeInfo</code>, which takes in a <code>type</code> and returns a tagged union.</p> </li> <li> <p>tagged union type can be found in <code>std.builtin.TypeInfo</code> (info on how to make use of imports and std later)</p> </li> </ul> Zig<pre><code>fn addSmallInts(comptime T: type, a: T, b: T) T {\n    return switch (@typeInfo(T)) {\n        .ComptimeInt =&gt; a + b,\n        .Int =&gt; |info| if (info.bits &lt;= 16)\n            a + b\n        else\n            @compileError(\"ints too large\"),\n        else =&gt; @compileError(\"only ints accepted\"),\n    };\n}\ntest \"typeinfo switch\" {\n    const x = addSmallInts(u16, 20, 30);\n    expect(@TypeOf(x) == u16);\n    expect(x == 50);\n}\n</code></pre> <ul> <li> <p>can use the <code>@Type</code> function to create a type/reify from a <code>@typeInfo</code>. <code>@Type</code> is implemented for most types but is notably unimplemented for enums, unions, functions</p> </li> <li> <p>anonymous struct syntax is used with <code>.{}</code>, because the <code>T</code> in <code>T{}</code> can be inferred. In this example we will get a compile error if the <code>Int</code> tag isn\u2019t set</p> </li> </ul> Zig<pre><code>fn GetBiggerInt(comptime T: type) type {\n    return @Type(.{\n        .Int = .{\n            .bits = @typeInfo(T).Int.bits + 1,\n            .signedness = @typeInfo(T).Int.signedness,\n        },\n    });\n}\n\ntest \"@Type\" {\n    expect(GetBiggerInt(u8) == u9);\n    expect(GetBiggerInt(i31) == i32);\n}\n</code></pre>"},{"location":"dev-notes/zig/zig-metaprogramming/#generic-types","title":"Generic Types","text":"<ul> <li> <p>Generic types are specified through explicit parametric type constructor functions</p> </li> <li> <p>Returning a struct type is how you make generic data structures in Zig. The usage of <code>@This</code> is required here, which gets the type of the innermost struct, union, or enum. Here <code>std.mem.eql</code> is also used which compares two slices.</p> </li> </ul> Zig<pre><code>fn Vec(\n    comptime count: comptime_int,\n    comptime T: type,\n) type {\n    return struct {\n        data: [count]T,\n        const Self = @This();\n\n        fn abs(self: Self) Self {\n            var tmp = Self{ .data = undefined };\n            for (self.data) |elem, i| {\n                tmp.data[i] = if (elem &lt; 0)\n                    -elem\n                else\n                    elem;\n            }\n            return tmp;\n        }\n\n        fn init(data: [count]T) Self {\n            return Self{ .data = data };\n        }\n    };\n}\n\nconst eql = @import(\"std\").mem.eql;\n\ntest \"generic vector\" {\n    const x = Vec(3, f32).init([_]f32{ 10, -10, 5 });\n    const y = x.abs();\n    expect(eql(f32, &amp;y.data, &amp;[_]f32{ 10, 10, 5 }));\n}\n</code></pre> <ul> <li>The types of function parameters can also be inferred by using <code>anytype</code> in place of a type. <code>@TypeOf</code> can then be used on the parameter.</li> </ul> Zig<pre><code>fn plusOne(x: anytype) @TypeOf(x) {\n    return x + 1;\n}\n\ntest \"inferred function parameter\" {\n    expect(plusOne(@as(u32, 1)) == 2);\n}\n</code></pre> <ul> <li>Comptime also introduces the operators <code>++</code> and <code>**</code> for concatenating and repeating arrays and slices. These operators do not work at runtime.</li> </ul> Zig<pre><code>test \"++\" {\n    const x: [4]u8 = undefined;\n    const y = x[0..];\n\n    const a: [6]u8 = undefined;\n    const b = a[0..];\n\n    const new = y ++ b;\n    expect(new.len == 10);\n}\n\ntest \"**\" {\n    const pattern = [_]u8{ 0xCC, 0xAA };\n    const memory = pattern ** 3;\n    expect(eql(\n        u8,\n        &amp;memory,\n        &amp;[_]u8{ 0xCC, 0xAA, 0xCC, 0xAA, 0xCC, 0xAA }\n    ));\n}\n</code></pre>"},{"location":"dev-notes/zig/zig-metaprogramming/#examples","title":"Examples","text":""},{"location":"dev-notes/zig/zig-metaprogramming/#generic-types-through-functors","title":"Generic Types through Functors","text":"<ul> <li> <p>The function returns a <code>type</code>, which means it can only be called at comptime. It defines two structs: Zig<pre><code>fn LinkedList(comptime T: type) type {\n    return struct {\n        pub const Node = struct {\n            prev: ?*Node = null,\n            next: ?*Node = null,\n            data: T,\n        };\n\n        first: ?*Node = null,\n        last: ?*Node = null,\n        len: usize = 0,\n    };\n}\n</code></pre></p> </li> <li> <p>main <code>LinkedList</code> struct</p> </li> <li><code>Node</code> struct, namespaced inside the main struct</li> <li>structs can namespace functions and variables</li> <li>useful for introspection when creating composite types Zig<pre><code>// To try this code, paste both definitions in the same file.\nconst PointList = LinkedList(Point);\nconst p = Point{ .x = 0, .y = 2, .z = 8 };\n\nvar my_list = PointList{};\n\n// A complete implementation would offer an `append` method.\n// For now let's add the new node manually.\nvar node = PointList.Node{ .data = p };\nmy_list.first = &amp;node;\nmy_list.last = &amp;node;\nmy_list.len = 1;\n</code></pre></li> </ul>"},{"location":"dev-notes/zig/zig-metaprogramming/#dynamic-specialization","title":"Dynamic specialization","text":"<ul> <li>type <code>anytype</code> binds to anything</li> </ul> Zig<pre><code>fn makeCoupleOf(x: anytype) [2]@TypeOf(x) {\n    return [2]@TypeOf(x){ x, x };\n}\n</code></pre> <ul> <li>allows specialization based on call types</li> </ul> Zig<pre><code>fn ReturnType(comptime T: type) type {\n    comptime var info = @typeInfo(T);\n    if (info == .Int) {\n        info.Int.bits /= 2;\n        return @Type(info);\n    } else {\n        return T;\n    }\n}\n\npub fn sqrt(x: anytype) ReturnType(@TypeOf(x)) {\n    const T = @TypeOf(x);\n    switch (@typeInfo(T)) {\n        .ComptimeFloat, .Float =&gt; return @sqrt(x),\n        .ComptimeInt =&gt; {\n            if (x &lt; 0) {\n                @compileError(\"sqrt on negative number\");\n            }\n            return T(sqrtInt(u128, x));\n        },\n        .Int =&gt; return sqrtInt(T, x),\n        else =&gt; @compileError(\"not implemented for \" ++ @typeName(T)),\n    }\n}\n</code></pre>"},{"location":"dev-notes/zig/zig-test/","title":"Zig Testing","text":"<ul> <li> <p>[!todo] Add notes about</p> <ul> <li>zig \"test\" decls</li> <li>zig test runner</li> </ul> </li> <li> <p>Fuzzing using AFL</p> </li> <li>Fuzzing using AFL++: Part I</li> <li>Fuzzing using AFL++: Part II</li> <li>Fuzzing using AFL++ example</li> <li>Fuzzing the Zig standard library</li> </ul>"},{"location":"graphics/","title":"Graphics Notes","text":"<p>some chicken scratch notes/gists around graphics needs more cleanup</p>"},{"location":"graphics/graphics-cheatsheet/","title":"Graphics Cheatsheet","text":"<p>Shit I annoyingly forget and always have to lookup</p> <ul> <li>Physical Units for Lights: better summary from Eric Haines</li> </ul>"},{"location":"graphics/graphics-cheatsheet/#lighting-units-candela-vs-lumens-vs-lux","title":"Lighting Units (Candela vs Lumens vs Lux)","text":"Radiometric Spectral Photopic Flux (Power) Watts Power/Wavelength Luminous Flux (Lumen) Flux Per Area Intensity Spectral Intensity Intensity Flux Per Area Per Solid Angle Radiance Spectral Radiance Luminance (Nit) <p>Candela:</p> <ul> <li>Measures Luminous intensity aka luminous power in a given direction per unit solid angle</li> </ul> <p>Lumens:</p> <ul> <li>Measures Luminous flux</li> <li>Photometric so it's radiant flux (power) weighted according to a luminosity function (modeling human eye's sensitivity to various wavelengths)</li> <li>$1 operatorname{lm}=1   mathrm{cd} cdot mathrm{sr} $</li> </ul> <p>Lux:</p> <ul> <li>Measures illuminance aka luminous flux per unit area or how much light is falling on a surface</li> <li>Can also be used for luminous emittance which is emitted lumens</li> <li>NOTE: this is different from luminance</li> <li>\\(1 \\operatorname{lx}=1 \\ \\mathrm{lm} / \\mathrm{m}^{2}=1 \\mathrm{cd} \\cdot \\mathrm{sr} / \\mathrm{m}^{2}\\)</li> </ul> <p>Luminance:</p> <ul> <li>Measures luminous intensity reflected per unit area in specific direction</li> <li>\\(\\mathrm{cd} / \\mathrm{m}^{2}\\)</li> </ul> <p>Luminous efficacy:</p> <ul> <li>measures efficacy of a light turning watts into lumens</li> <li>\\(\\mathrm{lm} / \\mathrm{W}\\)</li> </ul> Illuminance (lux) Surfaces illuminated by 0.0001 Moonless, overcast night sky (starlight)[3] 0.002 Moonless clear night sky with airglow[3] 0.05\u20130.3 Full moon on a clear night[4] 3.4 Dark limit of civil twilight under a clear sky[5] 20\u201350 Public areas with dark surroundings[6] 50 Family living room lights (Australia, 1998)[7] 80 Office building hallway/toilet lighting[8][9] 100 Very dark overcast day[3] 150 Train station platforms[10] 320\u2013500 Office lighting[7][11][12][13] 400 Sunrise or sunset on a clear day. 1000 Overcast day;[3] typical TV studio lighting 10,000\u201325,000 Full daylight (not direct sun)[3] 32,000\u2013100,000 Direct sunlight <p></p> <p></p> <p></p> <p></p>"},{"location":"graphics/pbr-crashcourse/","title":"Physically Based Rendering Crash Course","text":"<p>Google Filament Documentation</p> <ul> <li>A masterclass yet accessible guide of the past 20 years of PBR</li> </ul>"},{"location":"graphics/physical-units-for-lights/","title":"Physical Units for Lights","text":"<p>Original from Eric Haines; cached here locally for offline reference</p> <p>I expect most of us have a passing knowledge of physical units for lights. We have some sense of what lumens and candelas are about, we\u2019ve maybe heard of nits with regard to our monitors, and maybe have a vague sense of what lux is about. This was, at least, my level of understanding for the past lessee 38 years I\u2019ve been in the field of computer graphics. My usual attitude with lights was (and still is, most of the time), \u201cmake them brighter\u201d if the scene is too dim. That\u2019s all most of us normally need, to be honest.</p> <p>These past months I\u2019ve been learning a fair bit about this area, as proper specification of lights is critical if you want to, for example, move a fully modeled scene from one application to another, or are merging real-world data with synthetic. APIs and programs with \u201c0.7\u201d or \u201c90% brightness\u201d or other relative units don\u2019t hack it, as they are not anchored to any physical meaning. So, here\u2019s my summary of the four main light units, with others mentioned along the way. My focus is on the practical, real-world use of these units. Some of this knowledge was hard won, for me. Lux, in particular, is a term where I have been misled by many pages on the internet that attempt to define it. My thanks to Luca Fascione and Anders Langlands in particular for correcting me along the way. I may still have a bug or two in this post (though am trying hard not to), so tell me if I do and I\u2019ll fix it: erich@acm.org.</p> <p>The PBR book gives the textbook basics, starting with radiometric units and going on to photometric. Here\u2019s their useful table:</p> <p>Table 5.2: Radiometric Measurements and Their Photometric Analogs</p> Radiometric Unit Photometric Unit Radiant energy joule \\((\\mathrm{Q})\\) Luminous energy talbot \\((\\mathrm{T})\\) Radiant flux watt \\((\\mathrm{W})\\) Luminous flux lumen \\((\\mathrm{lm})\\) Intensity \\(\\mathrm{W} / \\mathrm{sr}\\) Luminous intensity \\(\\operatorname{lm} / \\mathrm{sr}=\\mathrm{candela}(\\mathrm{cd})\\) Irradiance \\(\\mathrm{W} / \\mathrm{m}^2\\) Illuminance \\(\\operatorname{lm} / \\mathrm{m}^2=\\mathrm{lux}(\\mathrm{lx})\\) Radiance \\(\\mathrm{W} / \\left(\\mathrm{m}^2 \\mathrm{sr}\\right)\\) Luminance \\(\\operatorname{lm} / \\left(\\mathrm{m}^2 \\mathrm{sr}\\right)=\\mathrm{cd} / \\mathrm{m}^2=\\mathrm{nit}\\) <p>You\u2019ll see similar tables in many other places, including page 272 of our own book. I like theirs better: more columns. Radiometry is concerned with any electromagnetic radiation \u2013 radio, microwaves, x-rays, etc.; photometry factors in how our eyes respond to light, described by the luminous efficiency function (well, functions: there\u2019s the photopic function, for brightly lit conditions, and the scotopic, for dim). I\u2019m focusing on photometric units.  </p> <p></p> <p>If you know all this, you\u2019re done here. Well, some of the links below may inform and entertain.</p> <p>Radiant energy: like it says, energy, some total amount of radiation, basically. Luminous energy: same, modified by the eye\u2019s response. I say \u201cforget them\u201d as far as graphics goes \u2013 I\u2019ve never seen energy (vs. power) get used for light in the field of computer graphics. All the units that follow are in terms of \u201cper second,\u201d and those are the ones you\u2019ll see used in describing lights in the real world and computer graphics. Begone, Talbots!</p> <p>Luminous flux: measured in lumens, this is what you\u2019ll see on the box for most light bulbs you buy nowadays. It\u2019s the power of the light. Think of it as the number of photons emitted per second, again modulated by the luminous efficiency function. Incandescent bulbs are (were) sold as \u201c60 Watts\u201d or similar. This rating refers to the incoming amount of power, not what the bulb itself produces. With LED bulbs being 6x or more efficient converting power to light than incandescents, you\u2019ll see \u201c60W equivalent \u2013 800 lumens\u201d on packaging, since such LEDs actually draw around 9 Watts. This ratio of lumens to Watts is the luminous efficacy, not to be confused with luminous efficiency, noted earlier. Welcome to the first of many instances where the English language mostly runs out of words for describing light, resulting in a lot of similar-sounding terms (and I won\u2019t even begin to discuss \u201cexitant radiance\u201d vs. \u201cradiant exitance\u201d \u2013 see PBR). That\u2019s about all you need to know about basic light bulbs.</p> <p></p> <p>If you\u2019re curious about how manufacturers measure lumens in bulbs they produce, go down the integrating sphere rabbit hole. Invented around 1900, you put a bulb in one part and a detector at another. To eliminate any directionality from the light source, its photons usually do 10-25 scatters inside the sphere before being detected. This geometric series of scatters converges to a simple formula and gives a resulting lumens value. These devices can also be used to measure reflectivity of materials. Buy one now or build your own (no, don\u2019t do either of those).</p> <p>Luminous intensity: measured in candelas (abbreviated as cd). You might know a bulb gives 800 lumens, but that\u2019s the total power. Even a bulb has a base where it screws into the socket, so no light is going that direction. What you\u2019d more likely want to know is how many photons per second (again, modulated by the luminous efficiency function for our eyes) are going in a particular direction. It\u2019s a more precise measure of how much light a surface is receiving from a given direction.</p> <p>From our table, you can see candelas are lumens divided by steradians, sr, a measure of solid angle. For a perfect point light, emitting equally in all directions, we get the luminous intensity by dividing the luminous flux by the solid angle of a sphere, which is 4*pi steradians, so 800 lumens/12.57 sr = 63.6 candelas. However, a real bulb has a base that blocks emission. For example, this bulb says it emits over 150 degrees (out of 180). Using this calculator, putting in 300 degrees (150 * 2), the effective intensity of the bulb is 68.2 cd, a bit higher than our 63.6 \u201cisotropic emitter\u201d estimate.</p> <p>Spotlights, flashlights, laser pointers, and other directed light sources are most sensibly described using candelas, sometimes as \u201cmaximum beam candlepower\u201d (MBCP). Imagine we have a flashlight that is described as providing 100 lumens over a 20 degree wide beam. By the calculator, this would give 1047 cd \u2013 pretty bright. Oddly, most consumer flashlights and similar are marketed by lumens, not candelas. I expect this is because we\u2019re just getting used to lumens on our lightbulb packaging and have no idea what candelas are. But, the beam angle matters: if a 100 lumen flashlight instead has a 10 degree uniform beam, the intensity goes up to 4182 cd. Here\u2019s, in fact, a flashlight along these lines, one that lists as 100 lumens and 4200 cd, so I\u2019m guessing its beam angle is indeed 10 degrees. Note you\u2019ll also see absolute lies out there, such as this million lumen flashlight. For comparison, the highest DIY flashlight I know is this amusing 1.4 million lumen monster.</p> <p>A more elaborate and accurate way to describe a light\u2019s emission is to provide an IES profile (another IES collection here). A profile is a simple text file describing candelas emitted in a latitude-longitude type or mapping. Find more format information here, here, and here, for starters. Or just skip to here (thanks to BellaRender for the tipoff).</p> <p></p> <p>RenderMan\u2019s free, public domain \u201cartistic\u201d IES profiles</p> <p>A candela, by the way, is indeed related to a candle. It has a fancy physics definition nowadays, but used to be things like \u201cone candlepower is the light produced by a pure spermaceti candle weighing one sixth of a pound and burning at a rate of 120 grains per hour.\u201d</p> <p></p> <p>Luckily for all involved, we no longer need whales to figure out what a candela is. Wikimedia</p> <p>Illuminance: measured in lux. Here\u2019s where the internet is a morass of poorly written, confused, or just plain misleading information. This unit is the main reason I\u2019m writing this piece. Illuminance depends purely on three things: the detector\u2019s position and orientation, and its shape (but not size). I\u2019ve seen way too many pages saying things like illuminance being \u201cabout how much light an area receives\u201d \u2013 no, the area is irrelevant. There are other mentions relating the unit to lux and candelas, with a light (somehow) shining on (only) a square meter a meter away \u2013 technically correct, but useless for understanding.</p> <p>I\u2019m not sure if this will help or hurt: Imagine you have a flat little piece of whatever that detects light, sitting on some surface. It merrily records some number of various-wavelength photons per second, which you weight by the luminous efficiency function, as usual. Divide this weighted value by the number of square meters your detector covers and you have the illuminance (in some form \u2013 you\u2019d actually need some constant to convert to lux). You\u2019re dividing by the detector\u2019s size, so all that\u2019s left is its location and which direction it\u2019s pointing.</p> <p>Wikipedia has a particularly good, detailed page on light meters, which are used to detect lux in a scene. Highlights: a hemispherical receptor shape is more useful in photography than a flat detector \u2013 your subjects are likely curved surfaces pointing in a bunch of directions, not flat and pointing in a single direction. This hemisphere shape leads to a cardioid falloff with angle (instead of a cosine, for a flat detector). There\u2019s a \u201cconstant K\u201d that varies for meters, a matter of taste in exposure value. Me, for yuks I bought a cheap illuminance meter that gives lux values, though it has a dubious receptor shape (hemisphere recessed inside a black bowl \u2013 what?). Still, point it at the sun and it gives a reasonable value. Update: there are apps for measuring lux with your phone \u2013 no idea how good these are.</p> <p>While lumens and candelas are directly associated with the light and nothing else, lux is associated with the scene being lit. The incoming photons are from wherever. Various environments have different typical lux ranges; here\u2019s a pretty reasonable typical table on Wikipedia. Note the range of illuminance is incredible: 0.3 lux for the full moon to 100,000 lux for direct sunlight. Beware, however, of the internet, as this similar table, also on Wikipedia, says full daylight is only 10,000 lux \u2013 a factor of 10 difference! (Update: I fixed this table on Wikipedia, adding \u201cSunlight\u201d to it, and directly referenced this original source.) In this case I think this second table is just plain wrong. But, also recall that the direction the meter is pointed matters. Straight up will give a different reading than pointing it directly at the sun, for example (unless the sun\u2019s directly overhead, of course). For designing an interior space, you\u2019ll see terms like \u201chorizontal illuminance\u201d, e.g., for a desk or other work surface and \u201cvertical illuminance,\u201d for what illumination a wall or similar receives.</p> <p>Part of the variance I see in these tables I believe depend on what you\u2019re measuring. For example, this table, yet another on Wikipedia, lists a full moon on a clear night as 0.25 lux (well, 25 decilux) and moonlight as 1 lux. I assume the latter includes reflections off the surroundings, including clouds, i.e., direct vs. global illumination. Like the moon, lights are sometimes rated by lux. A filmmaker, photographer, or set designer may not care so much about a light in terms of lumens or candelas, but rather cares how much light is reaching the subject. Light panels, for example, are described in terms such as \u201cthe Lume Cube 2.0 puts out 750 lux at 1m.\u201d Lux is also handy for the sun and moon, where no other unit makes a heck of a lot of sense (or has a lot more zeros), and where the distance from the source is essentially constant and so can be ignored. Conversion for local lights is easy: divide candelas by the square of the distance and you get lux for the light (assuming the receptor is facing the light). For area lights, the five-times rule is useful.</p> <p>To confuse things a bit, you can also describe an area light\u2019s output in terms of lumens per square meter. Note that this same unit description describes lux, but isn\u2019t called lux when used for emission. In this case, the area is emitting a certain amount of visible light, again divided by area. When emitted, this is called luminous exitance or luminous emittance. That said, this sort of area emission is often better described by our last physical unit\u2026</p> <p>Luminance: measured in nits (well, candelas per square meter \u2013 \u201cnits\u201d are not an official part of the SI system, but this unit is commonly used; there are many obscure units for luminance that I\u2019ve rarely seen employed). Luminance is a measure of light along a given direction. When you take a picture, you\u2019re capturing luminance (well, after converting to grayscale). Your camera, of course, has its exposure adjusted so that we can see something reasonable, but it\u2019s taking in luminance at each pixel and remapping this value in some way. When you let your camera use its through-the-lens light meter to figure out how much to expose a shot, you\u2019re depending on some average, weighted, or spot luminance reading it detects. As an aside, measuring luminance is not always a great way to shoot photos. This article explains \u2013 and gives practical examples \u2013 why using a light meter to capture the illuminance instead can be better.</p> <p>\u201cNits\u201d is from the Latin nitere, to shine. This unit name is often used to characterize the brightness of flat screens (though I won\u2019t stop you if you use it for any surface, e.g., a reflector). For example, monitors, laptops, and mobile devices are typically 200-300 nits, though a 13-inch MacBook can max out at 548 nits. Televisions can be as bright as 1000 nits or more. The sun is about 1.6 billion nits. The filament (tiny area) of a clear incandescent bulb is 7 million nits (video where I saw this number forgotten \u2013 update: the book Vision says on p. 54 that it\u2019s a million mL, which is about 3 million nits). This unit makes sense as a measure for area light sources. That said, be careful that you don\u2019t assume angle doesn\u2019t matter. As this page shows, at a 70-degree angle from perpendicular, \u201clightness\u201d on real displays are between 50% to 75% of the maximum nit value.</p> <p>Luminance from a surface is constant along a direction, no matter the distance. Think about looking at a blue screen of death (BSOD, to fans) in a darkened room \u2013 really, assume the screen is all blue. You walk closer to the monitor. While you yourself are more illuminated by it, since you\u2019re nearer the light source, any location on the screen itself is not brighter. The blue stays constant; there\u2019s just more of it in your field of view as you approach it.</p> <p></p> <p>Search \u201cblue screen\u201d on Wikimedia Commons and you get this, and a lot of weird hits on old-timey photos</p> <p>The radiometric equivalent of \u201cluminance\u201d is \u201cradiance,\u201d a term you should likely know, as this is what a physically based renderer typical uses for computation under the hood (or spectral radiance, but I\u2019m trying to keep away from spectra and color in this already overlong post). It\u2019s a key quantity for us, since it is independent of distance. When we shoot a ray from the eye, our goal is to compute the luminance for that ray, for display. If we\u2019re rendering a BSOD monitor, being closer just means its emission covers more pixels of the image we form, not that any pixel is brighter. This of course works for any object viewed (ignoring atmospheric effects): you look at the walls of the Green Monster (hey, I live next to Boston), it doesn\u2019t matter whether you\u2019re behind home plate or in the cheap seats, it\u2019s the same amount of green along any given direction.</p> <p>Last unit \u2013 done! And, my plea: please try to avoid using the word \u201cintensity\u201d in your UI and documentation if you don\u2019t mean luminous intensity. I\u2019m likely fighting the tide here (I tried, once; it was too late), but \u201cintensity\u201d has a real-world physical unit meaning, \u201cluminous intensity\u201d and candelas. I\u2019d use \u201cbrightness\u201d or perhaps \u201cmultiplier\u201d if you are using a non-physical light and just want to adjust its effect. Think of the children!</p> <p>Your homework assignment: if you were building a physically based rendering system, what units would you use for light sources? Point, spotlight, directional (at infinity) light, environment (dome or image-based lighting, aka IBL), and area lights of various sorts (subdivide into flat and other, if you prefer). Some are pretty obvious, at least to me, some are tricky, some might allow multiple representations, holding some value constant. For example, think what happens if you change the shape or size of an area light. Did it do what you expected? Anyway, a thing for a future blog post.</p> <p></p> <p>And we describe this light source how?</p> <p>More info: A reasonable free book, Light Measurement Handbook, on the subject of light and physical units from 1998 is found here and here. Note it is in the camp of \u201ccorrect but misleading\u201d with what \u201clux\u201d means \u2013 page 32 implies lux depends on sensor area \u2013 it doesn\u2019t.</p> <p>Sebastien Lagarde\u2019s discussion of lights in Frostbite is worthwhile. It delves deeply into representations of various light source types for their game engine, including various formulae for evaluating area lights.</p> <p>For a serious book on the subject, see Introduction to Radiometry and Photometry. The first 52 pages of this book are online at Google Books (click the link). It even has a chapter on ray tracing, which you can get a glimpse of here.</p> <p>Update: check the tweet replies for even more physical-light-unit goodness.</p>"},{"location":"graphics/gpu-architecture/technical-overview/","title":"2019 GPU Architecture Crash Course","text":"<p>GPU Architectures by Maurizio Cerrato (@speedwago) is a concise but accessible crash course into how GPU hardware works. He even touches on how mobile GPUs differ with Tile Based Deferred Rendering architectures</p> <p>2019 Triangles Are Precious by Dominik Baumeister is a good complement to the talk above</p>"},{"location":"graphics/light-transport/light-transport/","title":"Light transport notes","text":""},{"location":"graphics/light-transport/light-transport/#tldr-from-subsurface-scattering-to-neutron-transport","title":"TLDR: From Subsurface Scattering to Neutron Transport","text":"<ul> <li> <p>All rendering is a lie: Specular/Diffuse =&gt; approx. of SSS =&gt; approx of volume tracing</p> </li> <li> <p>Even \"expensive\" volume tracing is approximations. Single-scattering (deBeers law) =&gt; approx. of multiple scatter radiative transfer equation/participating media =&gt; approx. of non-exponential path walks =&gt; approx. of EM/Quantum optics </p> </li> <li> <p>Game state of art (+- 2 yrs circa 2016) use variants of approx of approx of dipole model for SSS.</p> </li> <li> <p>Film on other hand over last couple of years 2016-2018 inched even more towards ground truth solutions, even for SSS! (path tracing randomwalks and non-exponential paths)</p> </li> <li>For ex: it's been shown that multiple scattering random walks for isotropic media converge to HG Phase functions</li> <li>Heitz showed that you can derive Smith microsurface model as a special case of microflake theory for volumes with additional constraints to enforce sharp interface constraint (aka make the volume a surface)</li> <li> <p>Not sure if fee-flight distributions/path walks are used in production</p> </li> <li> <p>Some of practical problems with these models is albedo inversion - painting transmittence/absorption coefficients is very impossible for artists. Ideally want to say, here's the desired color properties and then renderer figures out co-efficients. Not trivial in practice</p> </li> <li> <p>Super comprehensive collection of papers from @max_tarpini: https://drive.google.com/drive/folders/16A6Yj2esRTk0FP-ALr6XfxkGQvTb_1dD</p> </li> </ul>"},{"location":"graphics/light-transport/light-transport/#highly-explanative-and-parse-able-papers","title":"Highly explanative and parse-able papers","text":"<p>Best get up to speed quick Imho, the easiest/comprehensive path are the Volume rendering siggraph courses. Everything after volume rendering is just an approximation</p> <ul> <li>2018 Siggraph Course: Path Tracing In Production: https://jo.dreggn.org/path-tracing-in-production/2018/course-notes.pdf</li> <li>2017 Siggraph Course: Production Volume Rendering: https://graphics.pixar.com/library/ProductionVolumeRendering/paper.pdf</li> <li>2011 Siggraph Course: Production Volume Rendering I Fundementals: http://magnuswrenninge.com/productionvolumerendering</li> <li>2011 Siggraph Course: Production Volume Rendering II Systems: http://magnuswrenninge.com/productionvolumerendering</li> <li>2011 Siggraph Course: Volumetric methods: http://magnuswrenninge.com/volumetricmethods</li> </ul> <p>Academic courses:</p> <ul> <li>Volumetric Path Tracing: http://www.cs.cornell.edu/courses/cs6630/2012sp/notes/08radiative-transfer.pdf</li> <li>Volumetric Path Tracing: MC Estimators: http://www.cs.cornell.edu/courses/cs6630/2012sp/notes/09volpath.pdf</li> <li>Volumetric Path Tracing: Dipole Derivation: https://www.cs.cornell.edu/courses/cs6630/2012sp/notes/10diffusion.pdf</li> <li>The Path to Path-Traced Movies: https://graphics.pixar.com/library/PathTracedMovies/paper.pdf</li> <li>Efficient Monte Carlo Methods for Light Transport in Scattering Media: https://cs.dartmouth.edu/wjarosz/publications/dissertation</li> <li>Implementing a skin BSSRDF by Christophe Hery: http://www.treyharrell.com/prman-notes/scat.pdf</li> </ul> <p>Lecture Notes:</p> <ul> <li>CS667 Lecture 8: Light Transport in Medium - http://www.cs.cornell.edu/courses/cs667/2005sp/notes/08tchao.pdf</li> <li>CS667 Lecture 9: Volume Rendering Equation: http://www.cs.cornell.edu/courses/cs667/2005sp/notes/09wang.pdf</li> <li>Lecture 10: Monte Carlo Solutions to Rendering Equations: http://www.cs.cornell.edu/courses/cs667/2005sp/notes/10cai.pdf</li> <li>Lecture : Volumetric diffusion http://www.cs.cornell.edu/courses/cs667/2006sp/notes/4apr-diffusion.pdf</li> <li>Lecture 17: Subsurface Light Diffusion http://www.cs.cornell.edu/courses/cs667/2005sp/notes/17liberman.isganitis.pdf</li> </ul>"},{"location":"graphics/light-transport/light-transport/#advanceduseful-for-reference","title":"Advanced/useful for reference","text":"<p>Overview on Advanced techniques</p> <ul> <li>This FXGuide article on the frontier of light transport is a great overview of the advanced set of techniques: https://www.fxguide.com/featured/its-not-rocket-science-oh-wait</li> <li>This is a good next step in more details: A Hitchhiker's Guide to Multiple Scattering: http://www.eugenedeon.com/hitchhikers</li> <li>2018 State of Art Monte Carlo Methods for Volumetric Light Transport Simulation: https://cs.dartmouth.edu/wjarosz/publications/novak18monte.html</li> </ul> <p>A list of papers in no-particular order:</p> <ul> <li>A Better Dipole</li> <li>A Generalized Linear Transport Model for Stochastic Media</li> <li>A Practical Model for Subsurface Light Transport</li> <li>A Quantized-Diffusion Model for Rendering Translucent Materials</li> <li>Classical and Improved Diffusion Theory</li> <li>Computing the Scattering Properties of Participating Media</li> <li>Directional Dipole Model for Subsurface Scattering</li> <li>Forms of Approximate Radiation</li> <li>Multiple-Scattering Microfacet BSDFs with the Smith Model</li> <li>Path Integration for Light Transport in Volumes</li> <li>Photon Beam Diffusion- Hybrid Monte Carlo Method For Subsurface Scattering</li> <li>Practical Rendering of Multiple Scattering Effects in ParticipatingMedia</li> </ul>"},{"location":"graphics/light-transport/light-transport/#practical-production-papers","title":"Practical production papers","text":"<ul> <li>Physically Based Shader Design In Arnold: https://www.arnoldrenderer.com/research/physically_based_shader_design_in_arnold.pdf</li> <li>Volumetric Skin and Fabric Shading at Framestore: https://blog.selfshadow.com/publications/s2017-shading-course/walster/s2017_pbs_volumetric_notes.pdf</li> <li>Extending the Disney BRDF to a BSDF with Integrated Subsurface Scattering: https://blog.selfshadow.com/publications/s2015-shading-course/burley/s2015_pbs_disney_bsdf_notes.pdf</li> </ul>"},{"location":"graphics/light-transport/light-transport/#prolific-researchersactive-practicioners-not-exhaustive-list","title":"Prolific researchers/active practicioners (not exhaustive list!)","text":"<ul> <li>Wojciech Jarosz</li> <li>Per H. Christensen</li> <li>Christope Henry</li> <li>Eugene D'eon</li> <li>Eric Heitz</li> <li>Henrik Jensen</li> <li>Magnus Wrenninge</li> <li>Wenzel Jakob</li> </ul>"},{"location":"graphics/light-transport/light-transport/#useful-links-to-bootstrap-into-subsurface-rendering","title":"Useful links to bootstrap into subsurface rendering:","text":"<p>Masters/Undergrad thesis are usually super great for getting up to speed on foundational techniques in the field. Here's some good overview links</p> <ul> <li>Dipole approximation for dummies I: https://flashypixels.wordpress.com/2016/02/10/chronicles-of-a-tour-in-skin-shading-dipole-approximation-for-dummies</li> <li>Dipole approximation for dummies II: https://flashypixels.wordpress.com/2016/02/28/chronicles-of-a-tour-in-skin-shading-some-useful-biological-aspects-used-in-cg</li> <li>Photon Path Distribution in Inhomogeneous Scattering Media: http://www.mia.uni-saarland.de/schmaltz/Diplom.ps.gz</li> <li>The Radiance Field: http://reedbeta.com/blog/the-radiance-field</li> </ul>"},{"location":"graphics/light-transport/light-transport/#notes-volume-rendering","title":"Notes: Volume Rendering","text":""},{"location":"graphics/light-transport/light-transport/#participating-media","title":"Participating Media","text":"<p>Modeled through beam transmittence. Assumes out-scattering coefficient, absorption coefficient, &amp; in-scattering</p> <ul> <li>Mathematically defined: Beer's law</li> <li>Transmission = \\(T_{r} \\ =\\ e^{-\\sigma_{a} r}\\)</li> </ul> <p>Where ro is absorption coefficient. Most materials this is constant, for some like marble it's position dependent, and for smoke, it's direction dependent as well \\(\\sigma_{t} =\\sigma_{a} \\ +\\ \\sigma_{s}\\)</p> <p>\\(\\sigma_{t}\\) = attenuation coefficient, which is sum of absorption &amp; out-scattering</p> <p>Avg distance a photon can travel: \\(\\frac{1}{\\sigma_{t}}\\)</p> <p>Albedo = fraction of energy that is re-emitted: \\(\\frac{\\sigma_{s}}{\\sigma_{t}}\\)</p> <ul> <li>Phase function tells us what direction photon will be scattered, which is a pdf taking incoming direction and outgoing ray and gives a probability that photon coming in from w_in will scatter in w_out</li> <li>For almost all naturally ocurring media, phase function only depends on the angle between w_in &amp; w_out     \u25cb For isotropic materials, it's sometimes thought of as reflected intensity as a function of angle normalized by intensity at normal incidence. Anistropic needs angle between directions. Crystalline (rare) structures need all 4 dimensions     \u25cb Isotropic phase function: 1     \u25cb Anisotropic: analytical model parameterized by g \u03b5 [-1,1]</li> </ul> <p>Henyey-Greenstein phase function:</p> <ul> <li>Defines function parameterized by one function defines how much backscattering vs forward scattering</li> <li>http://www.astro.umd.edu/~jph/HG_note.pdf</li> </ul>"},{"location":"graphics/light-transport/light-transport/#radiative-transfer-equation","title":"Radiative Transfer Equation","text":"<p>http://www.cs.cornell.edu/courses/cs6630/2012sp/notes/09volpath.pdf http://www.cs.cornell.edu/courses/cs6630/2012sp/notes/08radiative-transfer.pdf The RTE is a macroscale, empirical model that has proved extremely useful for a variety of problems, though it is not a physical theory derived by first principles from Maxwell\u2019s equations. Rather, it describes the behavior of incoherent light on a large scale, and is derived from intuitive arguments about the interaction of light with small particles suspended in the medium\u2014for instance, water droplets in a cloud or particles of ash and soot in smoke  Absorption coefficient: q = density of charged particles Ap = cross sectional area of particle</p> <p>\u03c3s = Product q*Ap (1 / length) = absorption coefficient. Theory derived from particles but generally just a value because we use it to model things like tissue </p> <p>Steve Marschner's (of hair rendering fame)'s lecture notes are very informative and parse-able: http://www.cs.cornell.edu/courses/cs6630/2012sp/notes/08radiative-transfer.pdf</p>"},{"location":"graphics/light-transport/light-transport/#diffusion-theory-of-subsurface-scattering","title":"Diffusion Theory of subsurface scattering:","text":"<p>References: https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch14.html</p> <p>Summary:</p> <ul> <li>For most translucent materials, after a handful of multiple events after a light ray enters a material, it tends to diffuse isotropically</li> <li>Model diffusion with another virtual light underneath the surface and one above the surface. This is done so they cancel each other out based on some boundary condition</li> <li>Boundary condition is net radiant flux of light at exit radiance has to be zero: \\(\\int _{dV} \\nabla u\\ \\cdotp \\overrightarrow{n\\ } dS\\)</li> </ul> <p>which simplifies to</p> <p>\\(div\\ \\nabla u\\ =\\ \\Delta u\\ =\\ 0\\)</p> <p>Dipole Approximation: Making subsurface translucency more accurate</p> <ul> <li>Dipole Approximation Explanation: https://computergraphics.stackexchange.com/questions/81/what-is-the-dipole-approximation-for-subsurface-scattering   The assumption underlying such model is the same as lots of other models for skin rendering; the subsurface scattering can be approximated as a diffusion phenomenon. This is good because in highly scattering media, the distribution of light loses dependency from the angle and tends to isotropy.   The dipole approximation is a formulation for the resolution of such diffusion problem in an analytical fashion.   Basically they start by approximating the BSSRDF as a multiple scattering and single scattering component. The multiple scattering is then defined as:    Where FtFt are Fresnel terms and RR is the diffusion profile expressed as function of the distance between the entry and exit point.   This RR is referred to as diffusion profile and they formulate this profile via a dipole approximation. The contribution of the incoming light ray is considered to be the one of two virtual sources: one negative beneath the surface and one positive above it (that's why dipole) </li> </ul> <p>Why one positive and one negative light? Is the goal for them to cancel each other in some way?   Yes, the dipole source method (which dates way before Jensen's paper) is such defined to satisfy some boundary condition. Specifically the fluence must be zero at a certain extrapolated boundary that has a distance from the surface of 2AD2AD where    Being FdrFdr the fresnel reflectivity of the slab considered and that sigma value is the reduced extinction coefficient described below.</p> <ul> <li> <p>Mean free path &amp; Transport mean free path: (note, u_s here is rho_t, the extinction co-efficient)   This lecture notes from biophotonics class describes mfp affects in digestable form http://www.its.caltech.edu/~bi177/private/L6_handout.pdf </p> </li> <li> <p>In homogenous objects, diffusion profiles are radially symmetric </p> </li> </ul>"},{"location":"graphics/light-transport/light-transport/#foundational-knowledge-but-questionable-if-practically-useful","title":"Foundational knowledge (but questionable if practically useful):","text":""},{"location":"graphics/light-transport/light-transport/#em-radiation","title":"E&amp;M Radiation","text":"<ul> <li> <p>Charged particles create an electric field around them</p> </li> <li> <p>As they vibrate (due to heat), the electric field changes around them</p> </li> <li> <p>Electric field propagates at the speed of light</p> </li> <li> <p>And we see that as light    Great lecture series on physics of light: - https://www.youtube.com/user/ilectureonline/playlists?sort=dd&amp;view=50&amp;shelf_id=10 - https://www.youtube.com/playlist?list=PLX2gX-ftPVXWDWYVe6oJwZCpZy-92Kd1k</p> </li> <li> <p>Frequency of vibration of the atom is the frequency of the light wavelength</p> </li> <li> <p>When light passes through an atom, the electrons are pushed in one direction while the protons are pushed in another direction by the oscillating electric field. This acceleration increases the average speed of these two charged particles and thereby increases the total energy of the atom (the kinetic energy of an object is proportional to its speed squared).</p> </li> <li> <p>Thus, as the atoms gain energy by the growing oscillation of their electrons and protons, the electromagnetic wave loses energy, resulting in a decreased amplitude of the oscillations of the electric and magnetic fields. This decrease in amplitude is absorption.</p> </li> <li> <p>Quantum mechanics limits the kinds of oscillations that can be observed in atoms.</p> </li> <li> <p>This is primarily limited by the allowed energies that the atoms can have. For example, the allowed energies of the hydrogen atom are EE = 13.6 eV / n2n2, where nn can be any positive integer (1 eV = 1 electron volt = 1.6\u00d710\u2212191.6\u00d710\u221219 joules).</p> </li> <li> <p>Another lesson of quantum mechanics is that light itself is quantized, meaning that it can only give or take energy in discrete packets, called photons. If ff is the frequency of the oscillating electromagnetic wave, then the energy of each photon is hfhf, where hhis the Planck constant. Hence, when light gives energy to the atom, in driving this oscillation of the charged particles, it can only give it one photon at a time.</p> </li> <li> <p>When light passes through a gas, it interacts with the lone atoms and the above description tells (almost) the whole story.</p> </li> <li> <p>When atoms join together to form solids and liquids it drastically changes the interaction between light and matter. Instead of the protons and electrons in the atoms oscillating freely within the atom, the electrons in a condensed phase (liquid or solid) may delocalize and/or interact with each other.</p> </li> <li> <p>The microscopic effects can be very complicated and hard to tackle analytically, so we instead resort to a macroscopic description of the light-matter interaction, which is parameterized by the index of refraction.</p> </li> <li> <p>The index of refraction of the ratio of the speed of light in vacuum (c\u2248c\u2248 299792458 m/s) to the actual speed of light in the material. It is difficult and often impossible to calculate from first principles (i.e. solving the time-dependent Schr\u00f6dinger equation for all the electrons in the material),   From https://www.quora.com/How-does-light-get-absorbed-by-different-objects   From https://www.quora.com/Why-are-some-materials-transparent-and-others-not</p> </li> <li> <p>In classical electrodynamics, light is considered as an electromagnetic wave, which is described by Maxwell's equations. Light waves incident on a material induce small oscillations of polarisation in the individual atoms (or oscillation of electrons, in metals), causing each particle to radiate a small secondary wave in all directions, like a dipole antenna. All these waves add up to give specular reflection and refraction, according to the Huygens\u2013Fresnel principle.   In the case of dielectrics such as glass, the electric field of the light acts on the electrons in the material, and the moving electrons generate fields and become new radiators. The refracted light in the glass is the combination of the forward radiation of the electrons and the incident light. The reflected light is the combination of the backward radiation of all of the electrons.   In metals, electrons with no binding energy are called free electrons. When these electrons oscillate with the incident light, the phase difference between their radiation field and the incident field is \u03c0 (180\u00b0), so the forward radiation cancels the incident light, and backward radiation is just the reflected light.   From https://en.wikipedia.org/wiki/Reflection_(physics)</p> </li> <li> <p>General scattering mechanism which gives diffuse reflection by a solid surface    Main article: Diffuse reflection   When light strikes the surface of a (non-metallic) material it bounces off in all directions due to multiple reflections by the microscopic irregularities inside the material (e.g. the grain boundaries of a polycrystalline material, or the cell or fiber boundaries of an organic material) and by its surface, if it is rough. Thus, an 'image' is not formed.</p> </li> </ul> <p>From https://en.wikipedia.org/wiki/Reflection_(physics)</p> <ul> <li> <p>SCHLICK PHASE FUNCTION. While the Henyey-Greenstein phase function is a good approximation to Mie scattering, it is still relatively expensive to evaluate. Schlick observed that the accurate shape is often not crucial for rendering applications and he replaced a relatively expensive exponentiation with even simpler expression [7]: P(\u03c9 ,\u03c9 ) = 1\u2212k2 (1+k cos\u03b8)2 (4) where k is a parameter similar to the asymmetry parameter g: \u22121 \u2264 k \u2264 1. The phase function still needs to be normalized by multiplying it by \u00bc\u03c0, so that it will integrate to 1. R</p> </li> <li> <p>Case A, where the E of the incident photon matches a gap between E levels of the atom, so the atom is excited into a higher state (electron transition). This is often called \"resonance absorption\". Case B, where the E of the incident photon is lower than such gap, so there is no such excitation / transition, and the photon goes out as it came in. This is called \"Rayleigh scattering\". When the E of the incident photon is higher than the gap, the photon loses energy to the particle but we don't say that there is partial absorption (?) and this is called \"Raman scattering\" (also Stokes scattering, but there is also an anti-Stokes effect, let us leave that aside...). But then you learn that in case A the excitation lasts for an incredibly short time after which the photon is re-emitted with the same E as it came in, just as in case B. May it be that the duration of \"excitation\" in A is longer than \"whatever happens\" in B? (but it doesn't look like a great difference, given that the time is very short).  From https://www.physicsforums.com/threads/difference-between-scattering-and-emission-of-photons.899796</p> </li> </ul> <p>A common explanation that has been provided is that a photon moving through the material still moves at the speed of c, but when it encounters the atom of the material, it is absorbed by the atom via an atomic transition. After a very slight delay, a photon is then re-emitted. This explanation is incorrect and inconsistent with empirical observations. If this is what actually occurs, then the absorption spectrum will be discrete because atoms have only discrete energy states. Yet, in glass for example, we see almost the whole visible spectrum being transmitted with no discrete disruption in the measured speed. In fact, the index of refraction (which reflects the speed of light through that medium) varies continuously, rather than abruptly, with the frequency of light.</p> <p>Secondly, if that assertion is true, then the index of refraction would ONLY depend on the type of atom in the material, and nothing else, since the atom is responsible for the absorption of the photon. Again, if this is true, then we see a problem when we apply this to carbon, let\u2019s say. The index of refraction of graphite and diamond are different from each other. Yet, both are made up of carbon atoms. In fact, if we look at graphite alone, the index of refraction is different along different crystal directions. Obviously, materials with identical atoms can have different index of refraction. So it points to the evidence that it may have nothing to do with an \u201catomic transition\u201d.</p> <p>When atoms and molecules form a solid, they start to lose most of their individual identity and form a \u201ccollective behavior\u201d with other atoms. It is as the result of this collective behavior that one obtains a metal, insulator, semiconductor, etc. Almost all of the properties of solids that we are familiar with are the results of the collective properties of the solid as a whole, not the properties of the individual atoms. The same applies to how a photon moves through a solid.</p> <p>A solid has a network of ions and electrons fixed in a \u201clattice\u201d. Think of this as a network of balls connected to each other by springs. Because of this, they have what is known as \u201ccollective vibrational modes\u201d, often called phonons. These are quanta of lattice vibrations, similar to photons being the quanta of EM radiation. It is these vibrational modes that can absorb a photon. So when a photon encounters a solid, and it can interact with an available phonon mode (i.e. something similar to a resonance condition), this photon can be absorbed by the solid and then converted to heat (it is the energy of these vibrations or phonons that we commonly refer to as heat). The solid is then opaque to this particular photon (i.e. at that frequency). Now, unlike the atomic orbitals, the phonon spectrum can be broad and continuous over a large frequency range. That is why all materials have a \u201cbandwidth\u201d of transmission or absorption. The width here depends on how wide the phonon spectrum is.</p> <p>On the other hand, if a photon has an energy beyond the phonon spectrum, then while it can still cause a disturbance of the lattice ions, the solid cannot sustain this vibration, because the phonon mode isn\u2019t available. This is similar to trying to oscillate something at a different frequency than the resonance frequency. So the lattice does not absorb this photon and it is re-emitted but with a very slight delay. This, naively, is the origin of the apparent slowdown of the light speed in the material. The emitted photon may encounter other lattice ions as it makes its way through the material and this accumulate the delay.</p> <p>Moral of the story: the properties of a solid that we are familiar with have more to do with the \u201ccollective\u201d behavior of a large number of atoms interacting with each other. In most cases, these do not reflect the properties of the individual, isolated atoms. From https://www.physicsforums.com/insights/do-photons-move-slower-in-a-solid-medium</p> <ul> <li> <p>Quantum theory describes radiation as photons being wave packets, not continuous waves https://www.quora.com/How-does-the-amplitude-of-an-electromagnetic-wave-affect-its-energy </p> </li> <li> <p>The usual description does assume that the \u201clattice\u201d (because it is a collective behavior, see this FAQ) briefly vibrates with a non-resonant frequency and then re-emits it. That brief stop and ensuing delay is what would explain that light travels more slowly in the medium. Whether that is \"scattering\" or not is another question. I would say, yes, the light is scattered/re-emitted in random directions. How is it that it keeps its original direction? What I read (classical explanation) is that the network of atoms acts cooperatively so that there is destructive interference except in the original direction, but someone objected once to that in a discussion\u2026 Reference https://www.physicsforums.com/threads/difference-between-scattering-and-emission-of-photons.899796 </p> <p>The theory of light is described by a series of increasingly complete optical models, where each successive model is able to account for more optical phenomena. In computer graphics and this dissertation, we will restrict ourselves to the simplest model, ray optics. </p> </li> </ul>"},{"location":"graphics/light-transport/light-transport/#neutron-transport","title":"Neutron Transport","text":"<p>This is the most useful literature I found on describing the nature of scattering. But it's also very dense. Also humbling how much of this stuff was solved in the 60s without computers.</p> <p>http://www.nuclear-power.net/nuclear-power/reactor-physics/nuclear-engineering-fundamentals/neutron-nuclear-reactions/macroscopic-cross-section http://www.nuclear-power.net/nuclear-power/reactor-physics/nuclear-engineering-fundamentals/neutron-nuclear-reactions/neutron-absorption/neutron-absorption-cross-section http://moreira.tamu.edu/BAEN625/TOC_files/chapt6b.pdf</p> <p>http://www.nuclear-power.net/nuclear-power/reactor-physics/nuclear-engineering-fundamentals/neutron-nuclear-reactions/microscopic-cross-section Difference between microscopic cross-section vs macroscopic crosssection: The difference between the microscopic and macroscopic cross sections is extremely important. The microscopic cross section represents the effective target area of a single nucleus, while the macroscopic cross section represents the effective target area of all of the nuclei contained in certain volume.</p> <p>From http://www.nuclear-power.net/nuclear-power/reactor-physics/nuclear-engineering-fundamentals/neutron-nuclear-reactions/microscopic-cross-section </p> <p>Different cross-sections indicate characteristic target area that defines type of nuclear reaction that would occur</p> <p>Types of scattering + microscopic cross-sections: </p> <p>The transport length in a strongly diffusing medium (noted l*) is the length over which the direction of propagation of the photon is randomized. It is related to the mean free path l by the relation:[1] \\(l*\\\\ =\\\\ \\\\frac{l}{1\\\\ -\\\\ g}\\) From https://en.wikipedia.org/wiki/Transport_length</p>"},{"location":"graphics/volume-rendering/volume-rendering-math/","title":"Physics of Light: Absorption","text":"<p>From MIT Lecture Notes: A Classical Model for Spectroscopy</p> <p>Why does light absorb? The quantum mechanical model is a bit opaque and doesn't tell us much. Let's use the classical model instead.</p> <p>Molecules are composed of charged particles. Light (an E&amp;M field) exerts a force on these charges. Force exerted on the molecules depends on the field strength, magnitude of the charges, and how far the charges move.</p>"},{"location":"graphics/volume-rendering/volume-rendering-math/#classical-model-uses-three-things","title":"Classical Model: Uses three things","text":"<ul> <li>Light: an oscillating electric magnetic field</li> <li>Matter: we treat it as a harmonic oscilattor</li> <li>Interactions: oscillating external force field driving a harmonic oscillator </li> </ul>"},{"location":"graphics/volume-rendering/volume-rendering-math/#1-light","title":"1. Light","text":"\\[ \\overline{\\mathrm{E}} (\\overline{\\mathrm{r}} ,\\mathrm{t} )=\\hat{\\varepsilon } (\\overline{\\mathrm{r}} )\\mathrm{E}_{\\mathrm{o}}\\cos (\\omega \\mathrm{t} -\\overline{\\mathrm{k}} \\cdot \\overline{\\mathrm{r}} -\\phi ) \\] \\[ \\hat{\\varepsilon } (\\overline{\\mathrm{r}} )\\ \\Longrightarrow \\ polarization\\ vector \\] \\[ \\mathrm{E}_{\\mathrm{o}} \\Longrightarrow amplitude \\] \\[ \\omega \\mathrm{t} \\Longrightarrow frequency\\ ( rad/s) \\] \\[ \\overline{\\mathrm{k}} \\Longrightarrow wavevector\\ defines\\ direction\\ of\\ propogation \\] <p>Let's simplify:</p> <ol> <li>Let's propogate along \\(\\vec{x}\\) and drop polarization so \\(\\phi=0\\)</li> </ol> \\[ \\mathrm{E}(\\mathrm{x}, \\mathrm{t})=\\mathrm{E}_{0} \\cos (\\omega \\mathrm{t}-\\mathrm{kx}) \\] <p></p> <p>We can also drop the wave vector \\((|\\mathrm{k}| \\rightarrow 0, \\text { since } \\lambda&gt;&gt;\\mathrm{x} \\text { and we consider molecules at } \\mathrm{x}=0)\\)</p> \\[ \\mathrm{E}(\\mathrm{t})=\\mathrm{E}_{0} \\cos \\omega \\mathrm{t} \\] \\[ I=\\frac{c}{4 \\pi}\\left|E_{0}\\right|^{2} \\] \\[ \\begin{array}{l}{|\\mathrm{k}|=\\frac{2 \\pi}{\\lambda}=\\frac{\\omega}{\\mathrm{c}}} \\\\ {\\mathrm{c}=2.998 \\times 10^{8} \\mathrm{m} / \\mathrm{s}}\\end{array} \\]"},{"location":"graphics/volume-rendering/volume-rendering-math/#2-molecules-treat-as-harmonic-oscillator","title":"2. Molecules: treat as harmonic oscillator","text":"<p>Why should we be able to call molecules harmonic oscillators?  i.e., a mass on a spring?</p> <p>Molecules feel a restoring force when pushed from equilibrium.</p> <p>The covalent bond can be thought of as a spring.  The equilibrium length is a balance between attractive and repulsive forces. \\ If we push/pull on this bond, there is a restoring force that pushes the system back to equilibrium.</p> <p>This analogy works for other systems also</p> <ul> <li>Electronic states\u2014think of pushing electron clouds away from equilibrium distribution. (for instance, benzene pi orbitals)</li> <li>Magnetic resonance\u2014In a magnetic field, magnetic spin moments\u2014nuclear spins\u2014align with field.\\   If we push a spin away from field, it will want to relax back.</li> </ul> <p></p> <p> </p> <p>Summary:</p> <ul> <li>Scattering from Damped Harmonic Oscillator</li> <li>Assume that a molecule is a simple harmonic oscillator with a single harmonic oscillation frequency \\(\\omega_{0}(2 \\pi v)\\)</li> <li>When irradiated by monochromatic electromagnetic wave of frequency\u03c90,theelectromagneticwaveoffrequency\u03c90,theelectron undergoes an acceleration, while the nucleus, being massive, is assumed not to move</li> <li>An accelerating charge gives rise to electromagnetic radiationelectromagneticradiation.</li> <li>Scattering is governed byftiid    drefractive index andparticle size distributionparticlesizedistributio</li> </ul>"},{"location":"graphics/volume-rendering/volume-rendering-math/#deriving-scatering-coefficients-from-mie-theory","title":"Deriving Scatering coefficients from Mie Theory","text":"<p>Mie theory is the basis for calculation of the scattering and absorption coefficients of a spherical particle having a given diameter and refractive index</p> <p>Mie theory, also called Lorenz-Mie theory or Lorenz-Mie-Debye theory, is an analytical yyysolution of Maxwell's equations for the scattering of electromagnetic radiation by spherical ti  l(  lll  d Mitt   i) i   tfparticles (also calledMie scattering)in terms ofinfinite series. The Mie solution is named after its developer  German physicist Gustav Miedeveloper, GermanphysicistGustavMie. However, others like Danish physicist Lorenz preceded him independently developed the ppyptheory of electromagnetic plane wave scattering by a dielectric sphere. The term \"Mie solution\" is sometimes used more generically for any analytical solution in terms of infinite series</p> <p>References: https://www.gfdl.noaa.gov/wp-content/uploads/files/user_files/pag/lecture2008/lecture3.pdf https://www.meto.umd.edu/~zli/AOSC621/Lesson%204%20Extinction%20&amp;%20Scattering.pdf</p>"},{"location":"graphics/volume-rendering/volume-rendering-zoo/","title":"Volume Rendering Zoo","text":""},{"location":"graphics/volume-rendering/volume-rendering-zoo/#techniques","title":"Techniques","text":"<ul> <li>Reference pathtrace/raymarch</li> <li>Volume Flipbook</li> <li>Particle Rendering with Slabs sampling</li> <li>Channel Lighting</li> <li>Volume Filtering with mips</li> <li>Turn Zeus into Cloud Volume</li> <li>IsoSurface Tracking</li> <li>Mean Occlusion</li> <li>Directional Occlusion</li> <li>Directional Lightfield</li> <li>Vertex Baking</li> <li>Basis Functions</li> <li>Spherical Harmonics</li> <li>Spherical Gaussians</li> <li>Fourier Opacity Maps</li> <li> <p>Extinction Transmittance Maps [Extinction Transmittance Maps]</p> </li> <li> <p>Precomputed Radiance Transfer for Volume Rendering</p> </li> <li>Do it inside the volume</li> <li> <p>Can also do it on the surface and tangent basis (use burley's normalized diffusion profile as it provides super simple artistic control)</p> <ul> <li>Reference: Approximate Reflectance Profiles for Efficient Subsurface Scattering</li> <li>Reference: Extending the Disney BRDF to a BSDF with Integrated Subsurface Scattering</li> </ul> </li> <li> <p>Multiple Scattering approximations</p> </li> <li> <p>Contrast approximation for art directable multiple scattering</p> <ul> <li>Oz: The Great and Volumetric</li> <li>Art-Directable Multiple Volumetric Scattering</li> <li>Technique is basically exponentiation of single scattering with multiple octaves</li> <li>Must make sure \\(a \\leq b\\) to be energy conserving   $$   left(x, omega_{i}right)=sum_{0}^{(N-1)} L operatorname{scat}left(x, omega_{i}right) \\   begin{aligned} sigma_{s}^{prime} &amp;=sigma_{s} times a^{n} \\   sigma_{e}^{prime} &amp;=sigma_{e} times b^{n} \\   p^{prime}(theta) &amp;=pleft(theta times c^{n}right) end{aligned}   $$</li> </ul> </li> <li> <p>Take Mean Free Path/Transport mean free path into account</p> </li> <li>The scattering mean free path is the average distance between scattering events (in biological tissues around 100 \u03bcm)</li> <li>The transport mean free path can be thought of as the mean distance after which a photon\u2019s direction becomes random (in biological tissues around 1 mm)</li> <li> <p>The transport length in a strongly diffusing medium (noted l*) is the length over which the direction of propagation of the photon is randomized. It is related to the mean free path l by the relation</p> </li> <li> </li> <li>VolumetricFog.usf: LightScatteringCS() - GetVolumetricLightmapSH2(BrickTextureUVs);</li> <li>Radiance caching gradients</li> <li>A Novel Sampling Algorithm for Fast and Stable Real-Time Volume Rendering: https://github.com/huwb/volsample</li> <li> <p>Amanatide ray marching: A Fast Voxel Traversal Algorithm for Ray Tracing</p> <ul> <li>Gives list of voxel coordinates that will be hit</li> <li>https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch22.html</li> <li>https://www.gamedev.net/blogs/entry/2265248-voxel-traversal-algorithm-ray-casting</li> <li>https://github.com/francisengelmann/fast_voxel_traversal</li> <li>Survey on Exploiting Grids for Ray Tracing</li> </ul> </li> <li> <p>Linearly transformed cosines</p> </li> <li>Use them as a basis. Linear transform of cosine lobe (scale, skew, rotation) doesn't affect integral product and has closed form solution</li> <li>https://blog.magnum.graphics/guest-posts/area-lights-with-ltcs</li> <li>https://github.com/selfshadow/ltc_code</li> <li>GPU Zen Chapter: Linear-Light Shading with Linearly Transformed Cosines</li> </ul>"},{"location":"graphics/volume-rendering/volume-rendering-zoo/#nicetohave-incorporate-baked-vlm","title":"NiceToHave Incorporate Baked VLM","text":""},{"location":"graphics/volume-rendering/volume-rendering-zoo/#todo-tasks","title":"Todo Tasks","text":"<ul> <li>Create ShowcaseZoo</li> <li>Reference</li> <li>Particle Slab</li> <li>Penny Channel Lighting</li> <li>Skull &amp; Bones Channel Lighting</li> <li> <p>IsoMesh Basis Rendering</p> </li> <li> <p>Channel Lighting (devon's approach)</p> </li> <li>Houdini modify to export 3 lighting channels + density</li> <li>Modify shader to take channel ramps into account</li> <li> <p>Make pretty visuals</p> </li> <li> <p>Implement</p> </li> <li>IsoSurface Tracking<ul> <li>Mean Occlusion</li> <li>Directional Occlusion</li> <li>Directional Lightfield</li> </ul> </li> <li>Re-export Volume Flipbook sample</li> <li>Reference pathtrace/raymarch</li> <li>Particle Rendering with Slabs sampling</li> <li> <p>Basis Functions</p> <ul> <li>Create DbgVisualizer for Lightfield at volume isosurface</li> <li>Visualize Light Along Ray</li> <li>Visualize Final Light out</li> <li>Visualize Incoming Light</li> <li>Project that onto basis functions</li> <li>Grid Basis</li> <li>Spherical Harmonics</li> <li>Spherical Gaussians</li> <li>HBasis</li> <li> </li> <li>VolumetricFog.usf: LightScatteringCS() - GetVolumetricLightmapSH2(BrickTextureUVs);</li> </ul> </li> <li> <p>Basic Scaffolding</p> </li> <li> <p>Make a simple houdini -&gt; ue4 plugin then iterate.</p> </li> <li> <p>Houdini:</p> </li> <li>create voxel grid</li> <li>create attribs (bakedirect,scatter,env)</li> <li>Make a nice volumetric mesh</li> <li>Sample based on plane alignment</li> <li>bake direct into samples</li> <li>bake scattering into samples</li> <li>bake indirect into samples</li> <li>export<ul> <li>render volume texture</li> <li>Sample cop into texture as channel lighting</li> <li>render fbx of isosurface</li> </ul> </li> <li> <p>Bake thickness</p> <ul> <li>Bake to SH</li> </ul> </li> <li> <p>UE4:</p> </li> <li>import voltex</li> <li>import mesh</li> <li>write raymarch shader<ul> <li>raymarch lightcontrib</li> <li>colorramp for direct/indirect</li> </ul> </li> <li>Temporal Reprojection</li> <li>Perf<ul> <li>Optimize existing shader</li> <li>LOD</li> <li>Bake to IsoSurface</li> <li>LOD Mips</li> <li>Perf analysis</li> </ul> </li> <li> <p>Monkey Engineering/Production grade</p> <ul> <li>Support exporting to tangents basis</li> <li>Support for skinned meshes</li> <li>Remove 'houdinispace' swizzle and properly export out of houdini</li> </ul> </li> <li> <p>Debugging</p> </li> <li>VLM UE4 Debug<ul> <li>Peek Texel</li> </ul> </li> <li> <p>Basis Func UE4 Debug Visualization</p> <ul> <li>Peak basis function</li> </ul> </li> <li> </li> <li>make a UE4 HDA</li> <li>incorporate UE4 VLM</li> <li>PRT Compression: Manny Ko - Practical Spherical Harmonics Based PRT Methods</li> <li>Sloan - Efficient Spherical Harmonic Evaluation</li> <li>Noise-Resistant Fitting for Spherical Harmonics</li> <li> </li> <li> </li> <li> </li> <li> </li> </ul>"},{"location":"graphics/volume-rendering/volume-rendering-zoo/#nicetohave-incorporate-baked-vlm_1","title":"NiceToHave Incorporate Baked VLM","text":""},{"location":"graphics/volume-rendering/volume-rendering-zoo/#nicetohave","title":"NiceToHave","text":""},{"location":"graphics/volume-rendering/volume-rendering-zoo/#nicetohave-volume-filtering-with-mips","title":"NiceToHave Volume Filtering with mips","text":""},{"location":"graphics/volume-rendering/volume-rendering-zoo/#nicetohave-linear-regression-on-basis-function","title":"NiceToHave Linear Regression on Basis Function","text":""},{"location":"graphics/volume-rendering/volume-rendering-zoo/#nicetohave-instant-neural-graphics-primitives-with-a-multiresolution-hash-encoding","title":"NiceToHave Instant Neural Graphics Primitives with a Multiresolution Hash Encoding","text":""},{"location":"graphics/volume-rendering/volume-rendering-zoo/#nicetohave-smerf-streamable-memory-efficient-radiance-fields-for-real-time-large-scene-exploration","title":"NiceToHave SMERF: Streamable Memory Efficient Radiance Fields for Real-Time Large-Scene Exploration","text":""},{"location":"graphics/volume-rendering/volume-rendering-zoo/#research-snippets","title":"Research Snippets","text":""},{"location":"graphics/volume-rendering/volume-rendering-zoo/#channel-lighting-magic","title":"Channel Lighting Magic","text":"<ul> <li>Devon Penney's overview of his technique from Allumette: DigiPro '16 - Volumetric clouds in the VR movie, Allumette <p>Right now the rays terminate with the max samples per ray, which is ~25, and in general the rays early terminate with a density close to 1. This works for my clouds because they are so dense, and most rays early terminate except for gazing angles.</p> <p>Try to do some experiments with straight ray marching, just for comparison. In my tests, I got nicely convergent renders with a 970 + Vive @ ~1.2ms GPU time, and some overhead for rendering the cloud shell into custom depth (.3-.4ms). There isn't much CPU overhead. This is with 25 samples per ray and my dense clouds with a 3d texture that is 950x950x600</p> <p>So yes, I did bake in 3 lights and denisty into the grid as a preprocess in Houdini</p> <p>in Houdini, I did a whole bunch of volume renders from different angles, and configured it to output ray march points where each point was the attenuated light that reached that point in space.</p> <p>it was a massive amount of data that was then resampled to a vdb grid, then output to a custom format rgba</p> <p>im not totally sure what your dLo and ds are, but the basic idea is to remap the rgb you get at each step, then attenuate that by the transmittance.  While this talk is more based on analytical methods, I like the description for the math: https://developer.nvidia.com/sites/default/files/akamai/gameworks/downloads/papers/NVVL/Fast_Flexible_Physically-Based_Volumetric_Light_Scattering.pdf</p> <p>the remap I used was very simple - I just did: VolumeRadianceAtSample = VolumeSample.r * KeyLightColor + VolumeSample.g * MultipleScatteringColor + VolumeSample.b * EnvironmentLightColor</p> <p>and yes, I did apply this at each ray march step rather than at the end.  It'll look a bit better and be more flexible, but in theory, you can remap at the end too (we did that at DreamWorks all the time so you could remap colors in compositing)</p> <p>the key to getting it look good is baking in really solid lighting and using a reasonably high resolution grid</p> <p>and I had a really good lighting artist tweak the lighting channel remapping a lot \ud83d\ude42</p> <p>I could try to dig up the math I used too if you get stuck on the numerical integratio</p> </li> </ul>"},{"location":"graphics/volume-rendering/volume-rendering-zoo/#math-reminders","title":"Math Reminders","text":"<ul> <li>Incremental averaging</li> <li>NewAvg = OldAvg + (NewVal - OldAvg) / NewSampleCount</li> <li>Optimized: Avg = lerp(avg, NewVal, rcp(NewSampleCount))</li> <li> <p>For calculating variance as well: https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Welford's_online_algorithm</p> </li> <li> <p>Closest Point Transform</p> </li> <li>\u2207_sdf() is always unit vector. (SDF is 3D levleset of function embedded in 4D so all level set rules apply)</li> <li>Xcpt(x) = x - sdf(x) * \u2207_sdf(x)</li> <li>Xcpt(x) =&gt; is a conservative field<ul> <li>Xcpt(x) = \u2207U(x)</li> <li>U(x) = 0.5 * (|x|^2 - f^2(x))</li> <li>Has no curl</li> </ul> </li> </ul>"},{"location":"graphics/volume-rendering/volume-rendering-zoo/#optimization-reminders","title":"Optimization Reminders","text":"<ul> <li>Optimizing the Graphics Pipeline with Compute</li> <li>Presentation</li> <li><code>~0.9 prims/cycle</code> is a target</li> <li><code>2 prims/cycle</code> is optimistic</li> </ul>"},{"location":"graphics/volume-rendering/volume-rendering-zoo/#curve-fitting","title":"Curve Fitting","text":"<ul> <li>Fast Polynomial Eval</li> <li> <p>Horner form for fast polynomial evaluation:     y = x + a*x*x*x + b*x*x*x*x*x + c*x*x*x*x*x*x*x + d*x*x*x*x*x*x*x*x*x*;* // 24 mults, 4 adds     z = x*x; y = ((((z*d+c)*z+b)*z+a)*z+1)*x; // 2 mults, 4 madds</p> </li> <li> <p>Error metrics</p> </li> <li>Absolute error metric: error_abs = abs(f_actual - f_approx)<ul> <li>good measure of accuracy but not of importance of any error</li> <li>Ex: Error of 3 is fine if f(x) returns 38,000. Terrible if function returns 0.0001</li> </ul> </li> <li> <p>Relative error metric: 1 - f_approx / f_abs</p> </li> <li> <p>Gaussian Quadrature</p> </li> <li> <p>Spherical Splines/Polynomials</p> </li> <li> <p>Spherical RBFs</p> </li> <li>Is There Anything Comparable to Spherical Harmonics But Simpler?<ul> <li>Demo</li> <li>Project</li> </ul> </li> <li>Von Mises Basis Functions vs Gaussian Spherical Radial Basis Functions:<ul> <li>A Comparison of the von Mises and Gaussian Basis Functions for Approximating Spherical Acoustic Scatter</li> <li>3 orders of magnitude better than guassian</li> </ul> </li> <li>Real-time Rendering of Dynamic Scenes under All-frequency Lighting using Integral Spherical Gaussian<ul> <li>All-Frequency Precomputed Radiance Transfer using Spherical RadialBasis Functions and Clustered Tensor Approximation</li> <li>https://mynameismjp.wordpress.com/2016/10/09/sg-series-part-1-a-brief-and-incomplete-history-of-baked-lighting-representations</li> </ul> </li> </ul>"},{"location":"graphics/volume-rendering/volume-rendering-zoo/#future-research","title":"Future Research","text":""},{"location":"graphics/volume-rendering/volume-rendering-zoo/#promising-future-directions","title":"Promising Future Directions","text":"<ul> <li>Quantization baking: Noise-Resistant Fitting for Spherical Harmonics</li> <li>Gaussian Mixture Models</li> <li>Dynamic Diffuse Global Illumination with Ray-Traced Irradiance Fields</li> <li>Might have some utility in sampling scheme/filtering with moment based approach</li> <li>https://devblogs.nvidia.com/dynamic-diffuse-global-illumination-part-i/</li> </ul>"},{"location":"graphics/volume-rendering/volume-rendering-zoo/#misc-thoughts","title":"Misc Thoughts","text":"<ul> <li>Extinction Transmittance Maps</li> <li>Deep Shadow Maps</li> <li>Fourier Opacity Mapping</li> <li>Particle Shadows &amp; Cache-Efficient Post-Processing</li> <li>Volumetric Billboards</li> <li>Interactive Light Scattering with Principal-Ordinate Propagation</li> <li>Try monochromatic scattering/absorption</li> <li>Volume Temporal Reprojection Unity implementation in Siggraph 2018: The Road toward Unified Rendering with Unity\u2019s High Definition Render Pipeline</li> <li>Review material</li> <li>Physically Based and Unified Volumetric Rendering in Frostbite: Physically Based and Unified Volumetric Rendering in Frostbite</li> <li>Volume Modeling and Rendering<ul> <li>Scratchapixel: Volume Rendering For Artists</li> <li>Scratchapixel: Volume Rendering For Developers</li> <li>Fast, Flexible, Physically-Based Volumetric Light Scattering</li> </ul> </li> <li>The Magic of Computer Graphics</li> <li>Dissertation - Efficient Monte Carlo Methods For Light Transport In Scattering Media</li> <li>Transfer Equations in Global Illumination</li> <li>Deep Compositing</li> <li>Spherical Harmonic Clipped integration</li> <li>Disney's Subsurface Scattering using Burley\u2019s Normalized Diffusion implemented in Unity</li> <li>Cone Step Relief Mapping<ul> <li>Cone Step Mapping: An Iterative Ray-Heightfield Intersection Algorithm</li> <li>GPUGems3 Chapter 18: Relaxed Cone Stepping for Relief Mapping</li> </ul> </li> <li>Hemisphere Basis: A Novel Hemispherical Basis for Accurate and Efficient Rendering</li> </ul>"},{"location":"graphics/volume-rendering/volume-rendering/","title":"Overview","text":"<p>Volume rendering is pretty simple. Hard part is making it fast.</p> <p>The derivation of the prevelant volume rendering model is motivated by a simple starting point. Let's try construct it from first principles and consider a differential volume unit (imagine a volume split up into tiny little cubes) made up of a bunch of molecule particles. For this dV, what would contribute to light radiance \\(L_{o}\\), in direction \\(\\overrightarrow{w_{o}}\\)? What can happen to light as it interacts with the particles?</p> <ul> <li>Nothing: for a specific direction (opposite direction $-overrightarrow{w_{o}} $ ), some percentage of incoming light $L_{i} $ won't collide at all and just pass through to $L_{o} $</li> <li>Emission: particles can emit light (like fire). Let's call this function \\(L_{e}\\left(\\boldsymbol{x} ,\\boldsymbol{\\vec{w}}_{o}\\right)\\) which gives us the amount of light a differential volume unit at \\(\\boldsymbol{x}\\) emits in direction $boldsymbol{vec{w}}_{o} $</li> <li>Light-Particle Interaction: for every direction around the differential volume unit, some percentage of light will hit collide with the particles</li> <li>Absorption: some light will be absorbed</li> <li>Scattered: some light will be scattered into the direction $L_{o} $</li> </ul> <p>In math terms, we can write this as $$ L_{o}( x,w_{o})  = T_{r}(boldsymbol{xmapsto x} <code>) L_{i}( x,-w_{o}) +L_{e}( x,w_{o}) +\\int_{S^{2}} \\sigma_{a}( x) \\sigma_{s}( x) p( w,w_{o}) L_{i}( x,w) dw\\\\ where\\ L_{i}( x,w) \\Longrightarrow incoming\\ light\\ radiance\\ at\\ x\\ from\\ direction\\ w\\\\ L_{o}( x,w) \\Longrightarrow outgoing\\ light\\ radiance\\ at\\ x\\ in\\ direction\\ w\\\\ T_{r}(\\boldsymbol{x\\mapsto x}</code>) Longrightarrow transmittence factor of light that passes through from no collisions\\ L_{e}( x,w_{o}) Longrightarrow light emitted by the volume at x in direction w_{o}\\ sigma_{a}(x) Longrightarrow attenuation factor of light from being absorbed at x\\ sigma_{s}(x) Longrightarrow attenuation factor of light from being scattered at x\\ p( w,w_{o}) Longrightarrow percentage of light coming from direction w that scatters in direction w_{o} $$</p> <p>That's it. Like most things in rendering, the physics of it is simple (ofc just at this layer and this empirical model that's not reality based). You could write a brute force volume renderer that rivals the quality of Arnold or Octane in an hour or so, maybe a weekend if you're new to rendering. Now, it may take 6 days to render one frame but you're final output will be photoreal. Everything afterwards is how to make it fast.</p> <p>So for the math, let's formulate everything in differential forms to inspire what some of these functions (e.g. \\(\\sigma_{t}(), \\sigma_{a}()\\)) should be. And then we can solve the integrals to derive \\(L( x,w)\\)</p> <p></p> \\[ \\begin{aligned} \\mathnormal{dL}(\\boldsymbol{x} ,\\ \\boldsymbol{\\vec{w}} ) &amp; =\\ \\mathnormal{L}_{i}(\\boldsymbol{x} ,\\ \\boldsymbol{\\vec{w}} )\\ -\\ \\mathnormal{L}_{o}(\\boldsymbol{x} ,\\ \\boldsymbol{\\vec{w}} )\\\\  &amp; =emission\\ +\\ scattering_{in} \\ -\\ scattering_{out} \\ -\\ absorption \\end{aligned}\\\\ \\begin{aligned} \\boldsymbol{x\\mapsto x} ' &amp; \\Longrightarrow \\ Ray\\ starting\\ at\\ point\\ \\boldsymbol{x} ,\\ with\\ direction\\ \\boldsymbol{\\vec{w}_{\\boldsymbol{x\\mapsto x} '}} \\ pointing\\ towards\\ \\boldsymbol{x} '\\\\ \\boldsymbol{\\vec{w}}_{i}\\mathbf{\\mapsto }\\boldsymbol{\\vec{w}}_{o} &amp; \\Longrightarrow \\ From\\ direction\\ \\boldsymbol{\\vec{w}}_{i} \\ to\\ \\boldsymbol{\\vec{w}}_{o}\\\\ L(\\boldsymbol{x} ,\\ \\boldsymbol{\\vec{w}}_{o} ) &amp; \\ \\Longrightarrow \\ Light\\ radiance\\ at\\ point\\ \\boldsymbol{x} \\ in\\ direction\\ \\boldsymbol{\\vec{w}}_{o} \\end{aligned} \\]"},{"location":"graphics/volume-rendering/volume-rendering/#implementation-details-we-are-using-several-key-assumptions","title":"Implementation Details: We are using several key assumptions","text":"<ul> <li>Important! When we calculate transmittence during raymarch in \\(\\Delta s\\) steps, we assume several properties are constant across the ray segment</li> <li>the \\(\\sigma_{t}(\\boldsymbol{x})\\) extinction coefficient</li> <li>density</li> <li>incoming light to this sample</li> <li>But that doesn't mean transmittence is constant. Instead, it should be \\(\\int^{\\Delta s}_{0} e^{-\\sigma_{t}(\\boldsymbol{x}) s} ds\\ =\\frac{1-e^{-\\sigma_{t}(\\boldsymbol{x}) \\Delta s}}{\\sigma_{t}}\\) incoming light to this sample</li> <li>If density varies along path segment, we can just average it between the start and end: \\(\\frac{1-e^{-0.5\\left( \\sigma_{t}\\left(\\boldsymbol{x}^{1}\\right) +\\sigma_{t}\\left(\\boldsymbol{x}^{1}\\right)\\right) \\Delta s}}{\\sigma_{t}}\\)</li> <li>The medium is a collection of microscopic particles where their size is &gt;&gt; size of light wavelength</li> <li>We assume particle positions are statistically independent so that we can multiply individual particle cross-sections by density to yield scattering coefficients</li> <li>We usually assume an isotropic medium aka the collision coefficients do not depend on the direction of light propagation and the phase function is only parameterized by angle between incoming light and scattered outgoing light. </li> <li>NOTE: The phase function itself can still be anisotropic</li> <li>Nerd-out assumptions: Also assuming elastic scattering where photon packet can only change direction (and not energy/wavelength) at scattering events. So we can't simulate flourescene/phosphorescence but allows us to simulate individual wavelengths of light independently of each other. What does this mean in practice in 2019 for realtime rendering? Nothing other than providing fodder for people who like to \"Well actually...\" derail conversation threads.</li> </ul>"},{"location":"graphics/volume-rendering/volume-rendering/#derivation-of-lambert-beer","title":"Derivation of lambert-beer","text":"<p>https://patapom.com/topics/Revision2013/Revision%202013%20-%20Real-time%20Volumetric%20Rendering%20Course%20Notes.pdf</p>"},{"location":"graphics/volume-rendering/volume-rendering/#mean-free-path","title":"Mean Free Path","text":""},{"location":"graphics/volume-rendering/volume-rendering/#implementation-details-one-little-trick","title":"Implementation details: One little trick","text":"<ul> <li>Removing the optically thin density assumption</li> <li>Most papers assume optically thin density aka density across a short path segment is relatively small</li> <li>Still assumes color field is constant across length of a short path segment</li> </ul>"},{"location":"graphics/volume-rendering/volume-rendering/#art-directability","title":"Art Directability","text":""},{"location":"graphics/volume-rendering/volume-rendering/#contrast-adjustment","title":"Contrast adjustment","text":"<p>[Wrenninge 2013, Art-Directable Multiple Volumetric Scattering]</p> <ul> <li>Main idea is to reduce extinction coefficient \\(\\sigma_{t}\\) along shadow ray to let more light reach shaded point</li> <li>But instead of fixed scaling factor, use a summation over several scales</li> <li>Also adjust phase function and local scattering coefficient $sigma_{s} $</li> </ul> \\[ L=\\sum^{N-1}_{i=0} L_{i}\\\\ L_{i} =\\sigma_{s} b^{i} L_{light} (\\omega_{i} )p\\left( \\omega_{i} ,\\omega_{o} ,c^{i} g\\right) e^{-a^{i}\\int^{t}_{0} \\sigma_{t} (s)ds} \\] <p>where</p> <ul> <li>N = Octaves</li> <li>a = attenuation</li> <li>b = contribution</li> </ul> <p>Notes:</p> <ul> <li>Good defaults: N=8, a=b=c=\u00bd</li> <li>Can be used to fake multiple scattering</li> </ul>"},{"location":"graphics/volume-rendering/volume-rendering/#adjusting-mean-free-path","title":"Adjusting mean-free path","text":"<p>[2011, Production Volume Rendering at Weta Digital]</p> <p>Premise: each order of scattering can be computed separately or in discrete groups rather than to be considered as either single scattering or multiple scat- tering. Moreover the multiple scattering studies done in [Bou08] show that higher orders of scattering display a behavior similar to that of single scattering</p> <ul> <li>Lengthen mean-free path and make the phase function more isotropic for each higher order bounce</li> <li>Can also blur the deep shadow map</li> </ul>"},{"location":"graphics/volume-rendering/volume-rendering/#higher-order-approximations-of-multiple-scattering","title":"Higher order approximations of multiple scattering","text":"<p>http://evasion.imag.fr/~Antoine.Bouthors/research/phd/</p>"},{"location":"houdini/","title":"Houdini Guide","text":"<p>A guide and personal notes for using Houdini</p>"},{"location":"houdini/#todo-action-items","title":"TODO Action Items","text":"<ul> <li> add trillium notes</li> <li> add onenote notes</li> <li> add code snippets from vscode project</li> </ul>"},{"location":"houdini/basics/hou-anim/","title":"Animation &amp; Rigging","text":"<p>Rigging Tutorial Series</p>"},{"location":"houdini/basics/hou-anim/#channel-scoping","title":"Channel Scoping","text":"<ul> <li>Channels that will be keyed if you press k</li> <li>Can create Animation Layer from scoped channels </li> <li>Attach to parent and keep relative offset: select keep positioning when parenting</li> <li>Child Compensation: Tells houdini to keep world space xform of children </li> <li>you will need to do clean transform after on children to reset their xform.</li> <li> <p>Also make sure child compensation is unticked when you do this)</p> </li> <li> <p>Extract Pre-transform: After disconnecting, it will apply the hidden xform to the current object's transform</p> </li> <li>Modify Shelf-&gt;Freeze</li> <li> <p>Bake the current transform into the object, sets the current pivot to the current xform, and zeros out xform</p> </li> <li> <p>Bones</p> </li> <li>How you draw them is what ends up being their rest position</li> <li>Rest Pos: PreTransform + Rest = IK Rest<ul> <li>Must clear both to reset \"default position\"</li> </ul> </li> </ul>"},{"location":"houdini/basics/hou-anim/#prepost-constraint","title":"Pre/Post Constraint","text":"<p>The Get World Space CHOP grabs what Houdini calls the \u2018preconstraint transform\u2019. The first input in most CHOP constraint setups will be this node pointing to the object being constrained (with the relative path \u201c../..\u201d). This prevents recursion problems.</p> <p>In your case you'll be wanting to use the node listed as \u2018Object (Constraints)\u2019 under the network editor tab menu. This one fetches the final (post-constraint) world transform of the object, or the final relative transform to the node pointed to in the \u2018Reference\u2019 parameter (leave this blank for World Transform).</p> <p>Be wary of recursion problems if you get too involved in intercepting/rebuilding transform hierarchies through constraints\u2026 Even though the \u2018Get World Space\u2019 chop node grabs the pre-constraint transform of the target object, that pre-constraint transform still contains any post-constraint transforms that are present in its parents. So attempting to set constraints on a parent object based upon a child object's preconstraint transform will still result in \u2018infinite recursion\u2019 errors.</p> <p>(Reference)</p>"},{"location":"houdini/basics/hou-anim/#posescope","title":"PoseScope","text":"<ul> <li>Allow you to select/define group polygons on a geo to drive bone controller</li> </ul>"},{"location":"houdini/basics/hou-anim/#chops","title":"CHOPS","text":"<p> (Reference)</p> <ul> <li>Broadcast export to multiple objects by using glob pattern in export:</li> <li>you can put a rename node/export node and set the export prefix to <code>/obj/hammer*</code></li> <li>this will export the channel to every channel that matches that pattern</li> </ul>"},{"location":"houdini/basics/hou-anim/#useful-functions","title":"Useful functions","text":"Vex functions Description opparentbonetransform Returns the parent bone transform associated with an OP opparenttransform Returns the parent transform associated with an OP opparmtransform Returns the parm transform associated with an OP oppreconstrainttransform Returns the preconstraint transform associated with an OP oppretransform Returns the pretransform associated with an OP optransform Returns the transform associated with an OP CHOP Expression Description icmin(0,0), icmax(0,0) Get the channel min/max"},{"location":"houdini/basics/hou-crash-course/","title":"Houdini Crash Course","text":""},{"location":"houdini/basics/hou-crash-course/#overview","title":"Overview","text":""},{"location":"houdini/basics/hou-crash-course/#terminology","title":"Terminology","text":"Term Description Object Object type nodes in an Object type folder. These Object nodes allow you build transform constraint hierarchies. Geometry type Object nodes contain SOP nodes that construct and modify geometry that inherit any transforms at the object level. SOPs Surface OPerators or geometry nodes that are inside an object folder. These are used to construct and modify geometry. Any kind of geometry from polygons to volumes. DOPs Dynamic OPerators or simulation/solver nodes that are used to construct simulations. Simulations read in geometry from SOPs and passes this data in to the DOP solvers. SHOP SHading Operators are materials that represent a shader to apply to geometry. Some are hard coded with vex and others are folders that you can dive in to and modify the VOPs inside. VOPs Vector OPerators inside VOP network nodes are used for everything from building shaders to modifying geometry, volumes, pixels, and more. VEX Vector Expression Language. The code language used to write shaders. VOPs are wrappers around VEX code snippets. CVEX Context agnostic Vector Expression Language. This has replaced all the VEX specific contexts throughout Houdini. It is a generalized language that uses the same environment and functions anywhere inside Houdini. COPs Composite OPerators in composite type folders. Used in image compositing operations. ROPs Render OPerators in side ROP Output directories which are used to create render output dependency graphs for automating output of any type of data and for triggering external processes like rendering. Commonly used to generate sequences of geometry, simulation data and trigger Render tasks that generates sequences of images to disk. CHOPs CHannel OPerators used to create and modify any type of raw channel data from motion to audio and everything in between. Most users safely ignore the CHOP context, and so can you, for now. Put it on the \u201cget to it later\u201d list when learning Houdini. But definitely keep it on the list. Bundles Way to group things. Smart Bundles allow for patterns"},{"location":"houdini/basics/hou-crash-course/#tutorials","title":"Tutorials","text":"<ul> <li>General Tutorials</li> <li>Maya To Houdini</li> <li>Houdini Training</li> <li> <p>Softimage to Houdin</p> </li> <li> <p>Cvex_bsdf</p> </li> <li>http://www.sidefx.com/docs/houdini/vex/functions/cvex_bsdf</li> <li>https://gist.github.com/WhileRomeBurns/38edb7ac5476f52ae3fd</li> <li>https://github.com/groundflyer/physhader-for-mantra</li> <li> <p>ggx_eval, approxsss_sample</p> </li> <li> <p>Irradiance Caching</p> </li> <li> <p>https://groundflyer.github.io/point-based-gi.html#point-based-gi</p> </li> <li> <p>Illuminance</p> </li> <li> <p>http://www.sidefx.com/docs/houdini/vex/functions/illuminance</p> </li> <li> <p>OpenGL Shaders</p> </li> <li>http://www.sidefx.com/docs/houdini/shade/opengl</li> <li>https://www.sidefx.com/docs/hdk/_h_d_k__viewport_g_l3.html</li> <li> <p>http://www.sidefx.com/docs/houdini/shade/glsl.html</p> </li> <li> <p>Scripting</p> </li> <li>http://www.sidefx.com/docs/houdini/render/soho</li> </ul>"},{"location":"houdini/basics/hou-crash-course/#internals","title":"Internals","text":"<ul> <li>For every cook (frame change, parm change, etc)</li> <li>the network starts at the Display/Render node and then walks up the chain looking for nodes with changes and evaluates dependencies for each node also querying those nodes for changes until it hits the top nodes</li> <li>The nodes marked dirty causing the network to evaluate the dirty nodes top down evaluating the dependencies that were found</li> <li>You can set a few options in the Performance Monitor to work in the older H11 way and see this evaluation tree order if you wish.</li> <li>It is \"mandatory\" that you do this if you want a deeper understanding of Houdini.</li> <li>You definitely need to use the Performance Monitor if you want to see how the networks have evaluated as it is based on creation order along with the set-up dependencies.</li> <li>Yes deleting and undeleting an object can and will change this evaluation order and can sometimes get you out of a spot with crashing.</li> <li>Houdini is a file system, in memory, and on disk in the .hip \"cpio\" archive file.</li> <li>If you want, you can use a shell, and given any .hip file, run the hexpand shell command on the file</li> <li>This will expand the Houdini file in to a directory structure that you can read and edit if you so wish</li> <li>Then wrap it back up with hcollapse</li> <li>Each node is captured as three distinct files:</li> <li>the file that that adds the node and wires it up to other nodes</li> <li>the parameter file that sets the nodes parameters</li> <li>another file that captures additional info on the node</li> <li>If you locked a SOP, then that binary information will be captured as a fourth file for that node</li> <li>Different types of node networks and nodes of a specific type can only be worked on in specific directory node types</li> <li>You can dig deeper with Houdini textport pane to navigate the houdini scene via the textport as you would in a unix shell</li> <li>opcf (aliased to cd)</li> <li>opls (aliased to ls)</li> <li>oppwf (aliased to oppwd and pwd)</li> <li>Ex Bash<pre><code>cd '/obj'\nls -al\n</code></pre></li> <li>(Reference) - an excellent Houdini Internals Explanation</li> </ul>"},{"location":"houdini/basics/hou-crash-course/#references","title":"References","text":"<ul> <li>Excellent Houdini Internals Explanation</li> <li>Attributes</li> <li>Global expression variables</li> <li>Standard variables</li> <li>Local SOP variables</li> <li>Houdini basics</li> <li>Terminology</li> <li>More Terminology</li> </ul>"},{"location":"houdini/basics/hou-crash-course/#coordinate-system","title":"Coordinate System","text":"<p>Coordinate System: Right handed, Y-Up</p> <p>Matrix</p> <ul> <li>Matrices are post multiplied (<code>x * M * V * P</code>)</li> <li>Row addressable <code>M[RowIndex][ColumnIndex]</code></li> <li>Matrix stored as row major <code>m[0]-m[3]</code> = first row, <code>m[4]-m[7]</code> = second row</li> </ul> <p>Note that Houdini\u2019s matrices are stored in row-major format, and vectors that are multiplied with matrices are treated as row vectors. (Reference)</p> <ul> <li>So, if p is a hou.Vector4 representing a point and M is a Matrix4, you write <code>p*M</code>, not <code>M*p</code></li> <li>Similarly, <code>p*M1*M2</code> will first transform p by M1, and then transform it by M2</li> </ul> <p>IMPORTANT however, in the houdini network editor, some nodes like channel multiply can be premutliplied/postmultiplied. For left to right inputs A, B, C =&gt;</p> <ul> <li>Post-multiply (eg Multiply node) means <code>v * C * B * A</code></li> <li>Pre-multiply (eg Transform node) means <code>v * A * B * C</code></li> </ul> <p>are connected in a left to right order bc they are \"post-multiply  implying a premultiply order (eg: WorldSpace * ObjectSpace * v).  Others like transform give you the option to premultiply or post multiply</p>"},{"location":"houdini/basics/hou-crash-course/#configuration","title":"Configuration","text":"<ul> <li>Environment Variables</li> <li>Houdini Python Setup</li> <li>hconfig: for listing houdini config and environment variables</li> <li><code>-a</code>: dump all the environment vars</li> <li><code>-ap</code>: dump all the seach paths</li> <li>hgpuinfo: dump GPU info</li> <li><code>-c/-l</code>: dump OpenCL info for active/all devices</li> <li><code>-g</code>: dump OpenGL info</li> <li><code>-o</code>: dump OptiX info</li> <li>Special characters:</li> <li><code>@</code> =&gt; expands to directories in <code>HOUDINI_PATH</code>      Ex: if <code>HOUDINI_PATH=$HIP;$HFS/houdini;$HOME/houdini</code>, then <code>@/vex</code> would expand to <code>$HIP/vex;$HFS/houdini/vex;$HOME/houdini/vex</code></li> <li><code>=</code> =&gt; equiv to <code>$HIP</code></li> <li><code>&amp;</code> =&gt; default path for given envar</li> <li><code>^</code> =&gt; expands to the shader type for VEX-related variables     Ex: if <code>HOUDINI_VEX_PATH=\"$HOME/vex/^\"</code>, when loading Surface shaders it will expand to <code>\"$HOME/vex/Surface\"</code></li> </ul>"},{"location":"houdini/basics/hou-crash-course/#shortcuts","title":"Shortcuts","text":"<p>To set a shortcut, click on a menu option while holding ctrl+shift+alt to bring up the hotkey manager for that menu command </p>"},{"location":"houdini/basics/hou-crash-course/#general","title":"General","text":"Volatile keys Hold them to temporarily activate and revert on release. Tap to activate Ctrl+B Maximize current pane Alt W E R T Y X Escape+enter Go to viewport &amp; turn on manipulator M Cycle through alignment of gizmo (world, object, screen, etc) K Keyframe ' Detach manipulator ; Align manipulator mode / Align construction plane mode Ins Go to move pivot mode Ctrl+\"drag manip\" Will snap changes by units specified in handle params: Alt+W Rename nodes: Ctrl+\u2153/4 Change view layout to single view/3-split/4-way split Alt+\\ Maximize panel vertically"},{"location":"houdini/basics/hou-crash-course/#viewport","title":"Viewport","text":"Shortcut Description Spacebar+B Toggle maximize viewport (from splitview to one view) X,C,V Radial menu for Snapping, Current, View Spacebar+Z Move viewport pivot S Volatile toggle to selection Spacebar Volatile: toggle to camera mode Shift+Z Reset rotate pivot to a viewport center"},{"location":"houdini/basics/hou-crash-course/#viewport-modelling","title":"Viewport Modelling","text":"Shortcut Description / Toggle construciton plane Alt to detach curve from construction plane Ctrl Constrain placement within 45 degrees Space, Ctrl+6,7,8,9 To save a particular view Space, 6,7,8,9 Return to specific view /, Ctrl+6,7,8,9 To save a particular c-plane /, 6,7,8,9 Return to specific c-plane"},{"location":"houdini/basics/hou-crash-course/#network-pane","title":"Network pane","text":"Shortcut Description C color P parameter Shift+A+Mouse Drag Up/Down Layout selected nodes either vertically or horizontally"},{"location":"houdini/basics/hou-crash-course/#network-view","title":"Network view","text":"Action Shortcut Align nodes press A, press LMB, move left(or up) Move node with upstream connections Shift + LMB + move Move node with downstream connections Ctrl + LMB + move Duplicate node Alt + LMB + move . Duplicate node with upstream connections Alt + Shift + LMB + move Duplicate node with downstream connections Alt + Ctrl + LMB + move Set display and render flag R + LMB click Set render flag T + LMB click Set bypass flag Q + LMB click Set template flag W + LMB click Reoder inputs Shift + R Add **dot ** Alt + LMB click . Pin the wire Alt + LMB click Cut the wire Y + LMB drag Set quickmark 1 Ctr + 1 Go to quickmark 1 1 Togle quickmarks tilda Drop visualizer node X+LMB"},{"location":"houdini/basics/hou-groups/","title":"Groups","text":"<p>Houdini supports complex group selection expressions</p>"},{"location":"houdini/basics/hou-groups/#common-patterns","title":"Common Patterns","text":"Pattern Description <code>*</code> In the Group SOP: all points/primitives. In other SOPs: every named group. <code>n</code> Point/primitive number n. <code>n-m</code> Points/primitives numbered from n to m (inclusive). <code>n-m:step</code> Points/primitives numbered from n to m (inclusive) skipping every step. For example, 1-100:2 means every other number from 1 to 100. <code>n-m:keep,step</code> Points/primitives numbered from n to m (inclusive). Use the first keep numbers and then skip every step after that. <code>!pattern</code> Every point/primitive except the ones matching the pattern. For example, !1-10 means every point/primitive except the numbers 1 to 10. pattern may be a numeric pattern, attribute pattern, or group name pattern. <code>^pattern</code> Remove points/primitives matching the pattern from the results of the preceding pattern. For example, 0-100:2 ^10-20 means every other number from 1 to 100 except the numbers 10 to 20. pattern may be a numeric pattern, attribute pattern, or group name pattern. <code>@attributeopvalue</code> Selects the points/primitives where attribute matches value, based on the op, which can be one of =, == (same as =), !=, &gt;, &lt;, &gt;=, or &lt;=. For example, @v&gt;0 will create a group of all points whose v attribute is greater than 0. You can specify components using [index] after the attribute name, for example @Cd[2] will get the blue channel of the diffuse color (Cd) attribute. As a convenience, you can also use .x, .y, and .z instead of [0], [1], and [2], for example P.x to get the X-axis component of the position (P) attribute. (If you don\u2019t specify a component for a multi-component attribute type, the comparison will use the first component.) For example, @P.y&gt;0 will create a group of all points whose Y component is greater than 0. For string attributes you must put quotation marks around the value if it contains spaces, for example @myattr=\"foo bar\". You can use wildcards (* and ?) in the value when using =, ==, and != on string attributes. You can combine the attribute syntax and the range syntax: <code>@id=5-10</code> You can also use the attribute syntax with a space separated list of integer values, but you need to enclose the list in quotes: <code>@id=\"5 8 10 15\"</code> <code>group_name</code> In SOPs other than the Group SOP, you can specify a named group of points/primitives (created with the Group SOP). You can use pattern matching (, ?, and [ ]) in the group name. For example, arm includes all point/primitive groups whose names start with arm. ^ can be used in the pattern by enclosing the pattern in <code>{ }</code>. For example, <code>{arm* ^arm3*}</code> includes all groups whose names start with arm, but not arm3."},{"location":"houdini/basics/hou-groups/#cookbook","title":"Cookbook","text":"<ul> <li>Every Other Point: <code>*:2</code></li> <li>All points but the last C<pre><code>0-`npoints(opinputpath(\u201c.\u201d,0))-2`\n</code></pre></li> <li>Create a group within sphere radius bounds limited to closest <code>npoints</code> C<pre><code>int maxNumPts = chi(\"maxNumPts\");\nvector4 visFilterSphereCenterRadius = chp(\"visFilterSphereCenterRadius\");\n\nint closept[] = nearpoints(0, set(visFilterSphereCenterRadius.x,visFilterSphereCenterRadius.y,visFilterSphereCenterRadius.z),\n  visFilterSphereCenterRadius.w, maxNumPts);\n\nforeach(int ptnm; closept) {\n    setpointgroup(0, 'visFilter', ptnm, 1, 'set');\n}\n</code></pre></li> </ul>"},{"location":"houdini/basics/hou-groups/#references","title":"References","text":"<ul> <li>Group Selection Logic</li> </ul>"},{"location":"houdini/basics/hou-op-path-syntax/","title":"Operator Path &amp; Expression Syntax","text":""},{"location":"houdini/basics/hou-op-path-syntax/#overview","title":"Overview","text":"<p>Operator parameters can be set with expressions, either in VEX or HScript HScript is Houdini's older scripting language, primarly used for expressions in parameters Should usually just use VEX but some places require hscript</p>"},{"location":"houdini/basics/hou-op-path-syntax/#cheatsheet","title":"Cheatsheet","text":"<ul> <li>` ` means evaluate expression inside of this string</li> <li><code>Op:...</code> path reference syntax in VEX</li> <li>can use full or relative path links</li> <li>the second argument is either an int representing primitive number, or string representing primitive name C<pre><code>pig_mask = volumesample(\"op:/obj/examples/dopnet_vex_vops_volume:volume/pig_mask\", 0, v@P);\npig_mask = volumesample(\"op:\" + opfullpath(\"../\") + \":volume/pig_mask\", \"pig_mask\", v@P);\npig_mask = volumesample(\"op:../\" + \":volume/pig_mask\", 0, v@P); // op: syntax also accepts relative paths\n</code></pre></li> <li>for accessing DOP data is: <code>op:/DOP_node_path:dop_object_name/field_name</code></li> <li>we can also directly access SOP volumes using this syntax C<pre><code>pig_mask = volumesample(\"op:../../IN_VOLUMES\", 1, v@P);\n</code></pre></li> <li> <p><code>Op: syntax</code> in hscript can't use relative names. You have to use full path names GLSL<pre><code>op:`opfullpath('..')`\n</code></pre></p> </li> <li> <p>Use/Reference operator output instead of file</p> </li> <li>Can usually substitute <code>op:/path/to/node</code> for live node data instead of node file/file name parameter</li> <li> <p>Useful to use for referencing stuff into COPs or feeding COP outputs into materials GLSL<pre><code>`op:/geo1/volume1`\nop:`opfullpath('../../volume1')`\n</code></pre></p> </li> <li> <p>Get Obj Transform/Node Transform/Operator Transform: GLSL<pre><code>`matrix m = optransform('/obj/cam1')`\norigin/vtorigin/vrorigin/vorigin\noriginoffset\noptypeinfo\nopcreator\noppwf\nopname\n</code></pre></p> </li> <li> <p>Access channel data like a point() call, it lets you access other channels and other values of those channels. GLSL<pre><code>chinput()\n</code></pre></p> </li> <li> <p>Reference the input connection node: GLSL<pre><code>`opinputpath(\"..\", 0)`\n</code></pre></p> </li> <li> <p>Useful operator functions   | Function                 | Description                                               |   | ------------------------ | --------------------------------------------------------- |   | opparentbonetransform    | Returns the parent bone transform associated with an OP   |   | opparenttransform        | Returns the parent transform associated with an OP        |   | opparmtransform          | Returns the parm transform associated with an OP          |   | oppreconstrainttransform | Returns the preconstraint transform associated with an OP |   | oppretransform           | Returns the pretransform associated with an OP            |</p> </li> </ul>"},{"location":"houdini/basics/hou-op-path-syntax/#common-recipes","title":"Common Recipes","text":"<ul> <li> <p>Create LookAt GLSL<pre><code>explodematrix(mlookat(vtorigin(\"\",\"/obj/from\"),vtorigin(\"\",\"/obj/to\")),\"SRT\",\"XYZ\",\"RX\")\nexplodematrix(\n  rotate(180,\"y\") * mlookat(\n    vector3(ch(\"xfmPosx\"),ch(\"xfmPosy\"),ch(\"xfmPosz\")),\n    vector3(ch(\"lookAtPointx\"),ch(\"lookAtPointy\"),ch(\"lookAtPointz\"))\n  ),\"SRT\",\"XYZ\",\"RX\")\n</code></pre></p> </li> <li> <p>Add leading zeros GLSL<pre><code>padzero(3,ch(\"frameToRenderVolumeTex\")) =&gt; 020\n</code></pre></p> </li> <li> <p>Custom HScript functions (they can be placed in an HDA and referenced directly by adding a codepage of type Expression) GLSL<pre><code>string chmParmPath(string parmName, string nodePath, string component) {\n  return nodePath + '/' + parmName + chs(\"loopIdx\") + component;\n}\nstring chmprms(string parmName) {\n  return chs(chmParmPath(parmName, \"../Parms_HDA\", \"\"));\n}\nfloat chmprm(string parmName) {\n  return ch(chmParmPath(parmName, \"../Parms_HDA\", \"\"));\n}\nfloat chmprmEx(string parmName, string component) {\n  return ch(chmParmPath(parmName, \"../Parms_HDA\", component));\n}\nfloat chmprmx(string parmName) {\n  return ch(chmParmPath(parmName, \"../Parms_HDA\", \"x\"));\n}\nfloat chmprmy(string parmName) {\n  return ch(chmParmPath(parmName, \"../Parms_HDA\", \"y\"));\n}\nfloat chmprmz(string parmName) {\n  return ch(chmParmPath(parmName, \"../Parms_HDA\", \"z\"));\n}\nfloat chmprmr(string parmName) {\n  return ch(chmParmPath(parmName, \"../Parms_HDA\", \"r\"));\n}\nfloat chmprmg(string parmName) {\n  return ch(chmParmPath(parmName, \"../Parms_HDA\", \"g\"));\n}\nfloat chmprmb(string parmName) {\n  return ch(chmParmPath(parmName, \"../Parms_HDA\", \"b\"));\n}\n</code></pre></p> </li> </ul>"},{"location":"houdini/basics/hou-op-path-syntax/#tutorialsreference","title":"Tutorials/Reference","text":"<ul> <li>Houdini's Expression Cookbook</li> </ul>"},{"location":"houdini/basics/hou-python/","title":"Houdini Python","text":""},{"location":"houdini/basics/hou-python/#overview","title":"Overview","text":"<p>Using houdini python libs in normal python</p> <ul> <li>Hython.exe is a python shell wrapper that automatically sets env variables (http://www.sidefx.com/docs/houdini/hom/commandline)</li> <li>Call the houdini script setup to set necessary env variables (look at command line tools shortcut)</li> </ul>"},{"location":"houdini/basics/hou-python/#common-recipes","title":"Common Recipes","text":"<ul> <li>Execute Python Script internal to HDA</li> <li> <p>CallbackScript: source opdef:.?force_update.cmd </p> </li> <li> <p>Using houdini python libs in normal python</p> <ul> <li>Hython.exe is a python shell wrapper that automatically sets env variables (http://www.sidefx.com/docs/houdini/hom/commandline)</li> <li>Call the houdini script setup to set necessary env variables (look at command line tools shortcut)</li> </ul> </li> <li> <p>Get Python Code for Houdini Node or Operator Python<pre><code>print hou.node('/obj/testgeo/ltcompute').asCode()\n</code></pre></p> </li> <li> <p>Execute Python Script internal to HDA   CallbackScript: <code>source opdef:.?force_update.cmd</code></p> </li> <li> <p>Execute Python Script internal to Subnet: (no need for reference to self or ../) GLSL<pre><code>CallbackScript: exec(hou.node(\"PromoteXfmParmsForPoseLib\").parm('python').eval());promoteParameters(\"./\")\nCallbackScript: exec(kwargs['node'].parm('python').eval())\n</code></pre></p> </li> <li> <p>Callback on parameter update/change: Python<pre><code>def callbackUpdateXfmRot(event_type, **kwargs):\n  node = kwargs['node']\n  parmTuple = kwargs.get('parm_tuple', None)\n  if not parmTuple:\n    return\n  if parmTuple and parmTuple.name() == 'computedFinalXfmRot' and node.evalParm('bUseLookAt'):\n    node.parmTuple('xfmRot').set(node.evalParmTuple('computedFinalXfmRot'), follow_parm_references=True);\n\nnode = kwargs['node']\ntry:\n  node.removeEventCallback([hou.nodeEventType.ParmTupleChanged], callbackUpdateXfmRot)\nexcept hou.OperationFailed:\n  pass\nnode.addEventCallback([hou.nodeEventType.ParmTupleChanged], callbackUpdateXfmRot)\n</code></pre></p> </li> <li> <p>Manipulate Node Python<pre><code>Import hou\nImport toolutils\n\nHou.node(\"/obj/mynode\")\nN = Node.parent().createNode(\"bright\")\nn.setFirstInput(node)\n</code></pre></p> </li> <li> <p>Get a list of all parameters on a node Python<pre><code>all_parms = my_cam.parms()\nmy_cam.parm(\"lookat\").get()\nNode.parm(\"bright\").set(amount)\nhou.parmTuple(\"pos\").eval()\nhou.evalParmTuple(\"pos\")\n</code></pre></p> </li> <li> <p>Get Point Attributes Python<pre><code>[ x.name() for x in hou.node('/obj/mygeo/mysop').geometry().pointAttribs() ]\n</code></pre></p> </li> <li> <p>Cook a node through python Python<pre><code>hou.node('/obj/my_python_node').cook(force=True)\n</code></pre></p> </li> <li> <p>Trigger a button Python<pre><code>hou.parm('/obj/sphere_object1/rop_alembic1/execute').pressButton()\n</code></pre></p> </li> <li> <p>Get Children of a node Python<pre><code>skelRigNode = hou.node(node.parm('skelRig').eval())\nfor child in skelRigNode.children():\n  print child\n</code></pre></p> </li> <li> <p>Basic Code to get selected prim string Python<pre><code>import toolutils \nviewer = toolutils.sceneViewer() \ngeo = viewer.selectGeometry() \nprims = geo.mergedSelectionString()\n</code></pre></p> </li> <li> <p>If you want get list of Prims Python<pre><code>listPrim = hou.selectedNodes()[0].geometry().globPrims(prims)\n</code></pre></p> </li> <li> <p>Just list of Prim numbers Python<pre><code>listPrimNum = []\nfor i in listPrim:\n  listPrimNum.append(i.number())\n</code></pre></p> </li> <li> <p>Get the index of a vector parameter or current parmTuple channel Python<pre><code>pwd().parm(expandString('$CH')).componentIndex()\n</code></pre></p> </li> <li> <p>Get primitive from geo Python<pre><code>iterPrims()[23]\n</code></pre></p> </li> <li> <p>Cur Node Path Python<pre><code>scene_view = toolutils.sceneViewer()\nscene_view.pwd()\nhou.node('/obj/CloudThuggerVol/render_cam').path() =&gt; '/obj/CloudThuggerVol/render_cam'\nhou.node('/obj/CloudThuggerVol/render_cam').name() =&gt; 'render_cam'\n</code></pre></p> </li> <li> <p>Setting Dynamic Parameter range Python<pre><code>numSlices = kwargs['node'].parm('numSlices').eval(); newval = min(int(kwargs['script_value']), int(numSlices));kwargs['parm'].set(newval)\n</code></pre></p> </li> </ul>"},{"location":"houdini/basics/hou-python/#math","title":"Math","text":"<ul> <li>Build Rotation Python<pre><code>angle = v1.angleTo(v2)\naxis = v1.cross(v2)\nrot_xform = hou.hmath.buildRotateAboutAxis(axis, angle)\n</code></pre></li> </ul>"},{"location":"houdini/basics/hou-python/#multiparm-parameters","title":"MultiParm parameters","text":"<ul> <li>Accessing</li> <li>Houdini appends the array index of the param block to all the attribute names.</li> <li>To reference, use '#'</li> <li>attribute name: \"geo_node#\" =&gt; houdini will substitute to \"geo_node0\", \"geo_node1\", etc</li> <li>It will automatically do this once it recognizes an attribute is inside a multiparm</li> <li>Default values: can be set doing the same thing using #. Ex: floor((# - 1)/9)*1.1</li> <li>Ex: http://www.andynicholas.com/?p=639&amp;page=4</li> </ul>"},{"location":"houdini/basics/hou-python/#dealing-with-nodes","title":"Dealing With Nodes","text":""},{"location":"houdini/basics/hou-python/#nodegraph-manipulation","title":"Node/Graph Manipulation","text":"<ul> <li>Traversing node hierarchy: <code>hou.node()</code></li> <li>Return the node at the given path, or None if no such node exists</li> <li>If you pass in a relative path (i.e. the path does not start with /), searches are performed relative to this node</li> <li>Note that the return value may be an instance of a subclass of Node.</li> <li>For example, if the node being found is an object node, the return value will be a <code>hou.ObjNode</code> instance</li> <li>If the path is an absolute path (i.e. it starts with /), this method is a shortcut for <code>hou.node(node_path)</code></li> <li>Otherwise, it is a shortcut for <code>hou.node(self.path() + \"/\" + node_path)</code><ul> <li>See also hou.node_</li> </ul> </li> <li>Access internal node named 'bindpose_after' in <code>constraintoffset</code> operator Python<pre><code>choptoolutils.updatePose(kwargs['node'].node('bindpose_after'))\n</code></pre></li> <li>To get the parent node n:      <code>n.node(\"..\")</code></li> <li>To get child named <code>geo5</code>:     <code>n.node(\"geo5\")</code></li> <li> <p>To get sibling named <code>light3</code>: <code>n.node(\"../light3\")</code></p> </li> <li> <p>Also look at <code>python3.7libs\\houdinihelp\\examples.py</code> Python<pre><code>subnet = network.createNode(\"subnet\", subnet_name)\n\n# Move the subnet next to the original node\npos = node.position()\nsubnet.setPosition(hou.Vector2(pos.x() + 3, pos.y()))\n# Remember which node we're making an example for\nsubnet.setUserData(\"__example_for\", typename)\n# Set the comment to tell the user what to do with this subnet\nsubnet.setComment(\"Build example network inside,\\n\"\n                  \"then RMB &gt; Save Node Example\")\n# Toggle node display or render flag\nsubnet.setGenericFlag(hou.nodeFlag.DisplayComment, True)\n</code></pre></p> </li> </ul>"},{"location":"houdini/basics/hou-python/#editorhdaoperator-manipulation","title":"Editor/HDA/Operator manipulation","text":"<ul> <li> <p>Reload Editor Node Shapes Python<pre><code>editor = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)\neditor.reloadNodeShapes()\n</code></pre></p> </li> <li> <p>Set node shape Python<pre><code>node.setUserData(\"nodeshape\", \"nodeshapeKLShield\")\n</code></pre></p> </li> <li> <p>Enable Houdini Environment for python command line Python<pre><code>def enableHouModule():\n  '''Set up the environment so that \"import hou\" works.'''\n  import sys, os\n  os.environ['HFS'] = os.environ['EDEV_HOU_ROOT']\n  os.environ['PATH'] = os.environ['PATH'] + os.pathsep + os.path.abspath(os.path.join(os.environ['EDEV_HOU_ROOT'], 'bin'))\n  sys.path.append( os.path.abspath(os.path.join(os.environ['EDEV_HOU_ROOT'], 'bin')) )\n\n  # Importing hou will load in Houdini's libraries and initialize Houdini.\n  # In turn, Houdini will load any HDK extensions written in C++.  These\n  # extensions need to link against Houdini's libraries, so we need to\n  # make sure that the symbols from Houdini's libraries are visible to\n  # other libraries that Houdini loads.  So, we adjust Python's dlopen\n  # flags before importing hou.\n  if hasattr(sys, \"setdlopenflags\"):\n    old_dlopen_flags = sys.getdlopenflags()\n    import DLFCN\n    sys.setdlopenflags(old_dlopen_flags | DLFCN.RTLD_GLOBAL)\n\n  try:\n    import hou\n  except ImportError:\n    # Add $HFS/houdini/python3.7libs to sys.path so Python can find the hou module.\n    sys.path.append(os.environ['HFS'] + \"/houdini/python%d.%dlibs\" % sys.version_info[:2])\n    import hou\n  finally:\n    if hasattr(sys, \"setdlopenflags\"):\n      sys.setdlopenflags(old_dlopen_flags)\n</code></pre></p> </li> </ul>"},{"location":"houdini/basics/hou-python/#rops","title":"ROPS","text":"<ul> <li> <p>Full ROP Example Python<pre><code>def cleanup(current_node):\n  default_material_node = current_node.node(\"matnetwork/VSR_DEFAULT_MATERIAL\")\n  if default_material_node:\n    default_material_node.destroy()\n\n  default_render_node = current_node.node(\"rop_render/VSR_DEFAULT_RENDER\")\n  if default_render_node:\n    default_render_node.destroy()\n\n  default_comp_node = current_node.node(\"copnet/VSR_DEFAULT_COMP\")\n  if default_comp_node:\n    default_comp_node.destroy()\n\n\ndef doSetup(**kwargs):\n  current_node = kwargs['node']\n  cleanup(current_node)\n\n  inputs = current_node.inputs()\n\n  # create default constant smoke material\n  mat_node =  current_node.node(\"matnetwork\")\n  default_material_node = mat_node.node(\"VSR_DEFAULT_MATERIAL\")\n  if not default_material_node:\n    try:\n      mat_gallery = hou.galleries.galleryEntries(name_pattern=\"constantsmoke\")[0]\n\n      new_mat_node = mat_gallery.createChildNode(mat_node)\n      new_mat_node.setName(\"VSR_DEFAULT_MATERIAL\")\n      new_mat_node.parm(\"smokedensity\").set(current_node.parm(\"density_multiplier\").eval())\n\n    except IndexError as e:\n      print \"error: \" + str(e)\n\n  # create a defualt render node\n  out_node = current_node.node(\"rop_render\")\n  default_render_node = out_node.node(\"VSR_DEFAULT_RENDER\")\n  if not default_render_node:\n    try:\n      new_render_node = out_node.createNode(\"ifd\")\n      new_render_node.setName(\"VSR_DEFAULT_RENDER\")\n\n      camera_node = current_node.node(\"render_cam\")\n      if camera_node:\n        new_render_node.parm(\"camera\").set(\"../../render_cam\")\n        res_x = current_node.parm(\"resolutionx\").eval()\n        res_y = current_node.parm(\"resolutiony\").eval()\n        camera_node.parm(\"resx\").set(res_x)\n        camera_node.parm(\"resy\").set(res_y)\n\n      # 0 = render current farame\n      # 1 = render frame range\n      new_render_node.parm(\"trange\").set(1)\n      new_render_node.parm(\"vm_picture\").set(current_node.parm(\"output_path\"))\n\n      # some render settings\n      if current_node.parm(\"quality\").eval() == 1:\n        parm = new_render_node.parm(\"vm_samplesx\")\n        if parm:\n          parm.set(16)\n        parm = new_render_node.parm(\"vm_samplesy\").set(16)\n        if parm:\n          parm.set(16)\n\n        parm = new_render_node.parm(\"vm_minraysamples\")\n        if parm:\n          parm.set(4)\n\n        parm = new_render_node.parm(\"vm_maxraysamples\")\n        if parm:\n          parm.set(16)\n\n        parm = new_render_node.parm(\"vm_volumequality\")\n        if parm:\n          parm.set(1)\n\n        parm = new_render_node.parm(\"vm_volumeshadowquality\")\n        if parm:\n          parm.set(1)\n      else:\n        new_render_node.parm(\"vm_samplesx\").set(3)\n        new_render_node.parm(\"vm_samplesy\").set(3)\n\n        new_render_node.parm(\"vm_minraysamples\").set(1)\n        new_render_node.parm(\"vm_maxraysamples\").set(9)\n\n        new_render_node.parm(\"vm_volumequality\").set(0.25)\n        parm = new_render_node.parm(\"vm_volumeshadowquality\")\n        if parm:\n          parm.set(0.5)\n\n    except IndexError as e:\n      print \"error: \" + str(e)\n\n\n  # create a defualt comp node\n  img_node = current_node.node(\"copnet\")\n  default_comp_node = img_node.node(\"VSR_DEFAULT_COMP\")\n  if not default_comp_node:\n    try:\n      new_comp_node = img_node.createNode(\"cop2net\")\n      new_comp_node.setName(\"VSR_DEFAULT_COMP\")\n\n\n      file_node = new_comp_node.createNode(\"file\")\n      file_node.setName(\"DEFAULT_FILE\")\n      sequence_path = current_node.parm(\"output_path\")\n      file_node.parm(\"filename1\").set( sequence_path )\n\n      mosaic_node = new_comp_node.createNode(\"mosaic\")\n      num_slice = current_node.parm(\"num_slice\").eval()\n      mosaic_node.parm(\"imagelimit\").set(num_slice)\n      per_line = int(math.sqrt(num_slice))\n      mosaic_node.parm(\"numperline\").set(per_line)\n\n\n      rop_node = new_comp_node.createNode(\"rop_comp\")\n      rop_node.setName(\"DEFAULT_ROP\")\n      final_render_path = current_node.parm(\"output_pic_path\").eval()\n      final_render_path = final_render_path.replace(\"\\\\\", \"/\")\n      rop_node.parm(\"copoutput\").set(final_render_path)\n      rop_node.parm(\"alpha\").set(\"C\")\n      rop_node.parm(\"trange\").set(0)\n\n      rop_node.setInput(0, mosaic_node)\n      mosaic_node.setInput(0, file_node)\n\n      file_node.parm(\"reload\").pressButton()\n\n    except IndexError as e:\n      print \"error: \" + str(e)\n\n  # setup frame range by number slices\n  start_frame = 1\n  end_frame = current_node.parm(\"num_slice\").eval()\n  #hou.playbar.setPlaybackRange(start_frame, end_frame)\n  setGobalFrangeExpr = 'tset `(%d-1)/$FPS` `%d/$FPS`' % (start_frame,end_frame)\n\n  hou.hscript(setGobalFrangeExpr)\n</code></pre></p> </li> <li> <p>Create bundle and lights Python<pre><code>def create_rgb_light_rig():\n  if not hou.nodeBundle('rgb_lightrig'):\n    rig_bundle = hou.addNodeBundle('rgb_lightrig')\n  else:\n    rig_bundle = hou.nodeBundle('rgb_lightrig')\n\n  if (hou.pwd().parm('render_rgb_lights').eval()==1):\n    obj = hou.node(\"/obj\")\n    if not hou.node('/obj/RGB_LIGHTRIG'):\n      rig_subnet = obj.createNode('subnet', 'RGB_LIGHTRIG')\n      null = rig_subnet.createNode('null')\n      #y_pointing_down\n      light = rig_subnet.createNode('hlight')\n      light.setName(\"Y_Pointing_Down\")\n      light.parm('ogl_enablelight').set(0)\n      light.parm('light_type').set(7)\n\n      light.parm('light_colorr').set(0.0)\n      light.parm('light_colorg').set(1.0)\n      light.parm('light_colorb').set(0.0)\n\n      light.parm('tx').set(0.0)\n      light.parm('ty').set(5.0)\n      light.parm('tz').set(0.0)\n\n      light.parm('rx').set(-90.0)\n      light.parm('ry').set(0.0)\n      light.parm('rz').set(0.0)\n\n      light.setFirstInput(null)\n\n      rig_bundle.addNode(light)\n\n      #y_pointing_up\n      light = rig_subnet.createNode('hlight')\n      light.setName(\"Y_Pointing_Up\")\n      light.parm('ogl_enablelight').set(0)\n      light.parm('light_type').set(7)\n\n      light.parm('light_colorr').set(0.0)\n      light.parm('light_colorg').set(1.0)\n      light.parm('light_colorb').set(0.0)\n\n      light.parm('tx').set(0.0)\n      light.parm('ty').set(-5.0)\n      light.parm('tz').set(0.0)\n\n      light.parm('rx').set(90.0)\n      light.parm('ry').set(0.0)\n      light.parm('rz').set(0.0)\n\n      light.setFirstInput(null)\n\n      rig_bundle.addNode(light)\n\n      #x_pointing_left\n      light = rig_subnet.createNode('hlight')\n      light.setName(\"X_Pointing_Left\")\n      light.parm('ogl_enablelight').set(0)\n      light.parm('light_type').set(7)\n\n      light.parm('light_colorr').set(1.0)\n      light.parm('light_colorg').set(0.0)\n      light.parm('light_colorb').set(0.0)\n\n      light.parm('tx').set(5.0)\n      light.parm('ty').set(0.0)\n      light.parm('tz').set(0.0)\n\n      light.parm('rx').set(0.0)\n      light.parm('ry').set(90.0)\n      light.parm('rz').set(0.0)\n\n      light.setFirstInput(null)\n\n      rig_bundle.addNode(light)\n\n      #x_pointing_right\n      light = rig_subnet.createNode('hlight')\n      light.setName(\"X_Pointing_Right\")\n      light.parm('ogl_enablelight').set(0)\n      light.parm('light_type').set(7)\n\n      light.parm('light_colorr').set(1.0)\n      light.parm('light_colorg').set(0.0)\n      light.parm('light_colorb').set(0.0)\n\n      light.parm('tx').set(-5.0)\n      light.parm('ty').set(0.0)\n      light.parm('tz').set(0.0)\n\n      light.parm('rx').set(0.0)\n      light.parm('ry').set(-90.0)\n      light.parm('rz').set(0.0)\n\n      light.setFirstInput(null)\n\n      rig_bundle.addNode(light)\n\n      #z_pointing_away_from_camera\n      light = rig_subnet.createNode('hlight')\n      light.setName(\"Z_Pointing_Away_From_Camera\")\n      light.parm('ogl_enablelight').set(0)\n      light.parm('light_type').set(7)\n\n      light.parm('light_colorr').set(0.0)\n      light.parm('light_colorg').set(0.0)\n      light.parm('light_colorb').set(1.0)\n\n      light.parm('tx').set(0.0)\n      light.parm('ty').set(0.0)\n      light.parm('tz').set(5.0)\n\n      light.parm('rx').set(0.0)\n      light.parm('ry').set(0.0)\n      light.parm('rz').set(0.0)\n\n      light.setFirstInput(null)\n\n      rig_bundle.addNode(light)\n\n      #z_pointing_towards_camera\n      light = rig_subnet.createNode('hlight')\n      light.setName(\"Z_Pointing_Towards_Camera\")\n      light.parm('ogl_enablelight').set(0)\n      light.parm('light_type').set(7)\n\n      light.parm('light_colorr').set(0.0)\n      light.parm('light_colorg').set(0.0)\n      light.parm('light_colorb').set(1.0)\n\n      light.parm('tx').set(0.0)\n      light.parm('ty').set(0.0)\n      light.parm('tz').set(-5.0)\n\n      light.parm('rx').set(0.0)\n      light.parm('ry').set(180.0)\n      light.parm('rz').set(0.0)\n\n      light.setFirstInput(null)\n\n      rig_bundle.addNode(light)\n\n      #orient lights to camera\n      camera_node = hou.node(hou.pwd().parm(\"camera\").eval())\n      camera_rx = camera_node.parm('rx').path()\n      null_rx = null.parm('rx')\n      null_rx.setExpression(\"ch(\\\"%s\\\")\" % camera_rx)\n\n      camera_ry = camera_node.parm('ry').path()\n      null_ry = null.parm('ry')\n      null_ry.setExpression(\"ch(\\\"%s\\\")\" % camera_ry)\n\n      camera_rz = camera_node.parm('rz').path()\n      null_rz = null.parm('rz')\n      null_rz.setExpression(\"ch(\\\"%s\\\")\" % camera_rz)\n\n    mantra_node = hou.node(hou.pwd().parm(\"mantra_external\").eval())\n    if mantra_node:\n      mantra_node.parm('excludelights').set('@rgb_lightrig')\n  else:\n    obj = hou.node(\"/obj\")\n    rgb_lightrig = hou.node('/obj/RGB_LIGHTRIG')\n    if rgb_lightrig:\n      rgb_lightrig.destroy()\n</code></pre></p> </li> </ul>"},{"location":"houdini/basics/hou-python/#kiryhas-snippets","title":"Kiryha's Snippets","text":"<p>Kiryha's Python Snippets Inlined below</p> <p>You can explore the node parameters with Python Shel:</p> <ul> <li>Create any node and tweak its parameters</li> <li>Run Python Shell.</li> <li>Type <code>node =</code>, drag node to Shell (you will get <code>hou.node('path/to/node')</code>), press enter.</li> <li>Type <code>print node.asCode()</code></li> </ul>"},{"location":"houdini/basics/hou-python/#snippets","title":"Snippets","text":""},{"location":"houdini/basics/hou-python/#install-pip-in-houdini","title":"Install pip in Houdini","text":"Python<pre><code># Download and save get-pip.py\nimport os\nos.popen('python get-pip.py').read()\n</code></pre>"},{"location":"houdini/basics/hou-python/#install-package-with-pip-in-houdini","title":"Install package with pip in Houdini","text":"Python<pre><code>import pip\npip._internal.main(['install', 'package_name'])\n</code></pre>"},{"location":"houdini/basics/hou-python/#get-houdini-environment-variable","title":"Get Houdini environment variable","text":"Python<pre><code>import hou\n\n# print current scene name\nprint hou.expandString(\"$HIPNAME\")\n</code></pre>"},{"location":"houdini/basics/hou-python/#scene-file-operations","title":"Scene file operations","text":"Python<pre><code>import hou\nsceneRoot = hou.node('/obj')\n\n# Save current scene as file\nhou.hipFile.save('C:/temp/myScene_001.hipnc')\n\n# Export selected node to a file\nsceneRoot.saveChildrenToFile(hou.selectedNodes(), [], 'C:/temp/nodes.hipnc')\n\n# Import file to the scene\nsceneRoot.loadChildrenFromFile('C:/temp/nodes.hipnc')\n</code></pre>"},{"location":"houdini/basics/hou-python/#get-node-from-the-scene","title":"Get node from the scene","text":"Python<pre><code>import hou\nnode = hou.node('/&lt;nodePath&gt;/&lt;nodeName&gt;') # By name\nnode = hou.selectedNodes()[0] # By selection\n# Get node content\nnode.children()\n</code></pre>"},{"location":"houdini/basics/hou-python/#get-node-upstream-connections","title":"Get node upstream connections","text":"Python<pre><code>listParents = node.inputAncestors()\n</code></pre>"},{"location":"houdini/basics/hou-python/#create-node-in-the-scene","title":"Create node in the scene","text":"<p>To create any node wiyh Python you have to set parent node for that. You need to create Geometry node in OBJ context. Python<pre><code># Get scene root node\nOBJ = hou.node('/obj/')\n# Create Geometry node in scene root\ngeometry = OBJ.createNode('geo')\n</code></pre></p> Python<pre><code>import hou\n# Create transform node inside geo1\ngeometry = hou.node('/obj/geo1')\nxform = geometry.createNode('xform')\nxform.moveToGoodPosition() # Align new node\n\n# Create new transform node linked to existing transform\nxformNew= xform.createOutputNode('xform')\n</code></pre>"},{"location":"houdini/basics/hou-python/#delete-node","title":"Delete node","text":"Python<pre><code>import hou\nnode = hou.node('/&lt;nodePath&gt;/&lt;nodeName&gt;')\nnode.destroy() # Delete node\n</code></pre>"},{"location":"houdini/basics/hou-python/#delete-parameter-expression-chennal-animation","title":"Delete parameter expression (chennal, animation)","text":"Python<pre><code>import hou\nnode = hou.node('/&lt;nodePath&gt;/&lt;nodeName&gt;')\nnode.parm(&lt;parameterName&gt;).deleteAllKeyframes()\n</code></pre>"},{"location":"houdini/basics/hou-python/#copy-node-to-another-location","title":"Copy node to another location","text":"Python<pre><code>import hou\nnode = hou.node('/&lt;nodePath&gt;/&lt;nodeName&gt;')\nparent = hou.node('/&lt;parentPath&gt;/')\nhou.copyNodesTo([node], parent)\n</code></pre>"},{"location":"houdini/basics/hou-python/#get-and-set-parameters","title":"Get and set parameters","text":"Python<pre><code>import hou\nnode = hou.selectedNodes()[0]\n\n# get translate X\nnode.parm('tx').eval()\nhou.parm('/obj/geo1/tx').eval()\nhou.ch('/obj/geo1/tx')\n\n# Get string parameter without token evaluation\nnode = hou.node('/obj/geometry/fileCache')\nprint node.parm('file').eval()\nprint node.parm('file').rawValue()\n# &gt;&gt; C:/temp/myFile.1.bgeo.sc\n# &gt;&gt; $HIP/myFile.$F.bgeo.sc\n\n# set translate XYZ\nnode.parmTuple('t').set([0,1,0])\nhou.parm('/obj/geo1/tx').set(2)\n\n# Set parameters for selected Remesh SOP\nremesh = hou.selectedNodes()[0]\nremesh.setParms({'group': 'myGroup', 'element_sizing1': 1, 'iterations': 2})\n</code></pre>"},{"location":"houdini/basics/hou-python/#get-translate-x-keyframes-of-selected-node","title":"Get Translate X keyframes of selected node","text":"Python<pre><code>import hou\nnode = hou.selectedNodes()[0]\n\nnode.parm('tx').keyframes()\n</code></pre>"},{"location":"houdini/basics/hou-python/#run-hscript-command-form-python","title":"Run hscript command form Python","text":"Python<pre><code># Run Redshift IPR\nhou.hscript('Redshift_openIPR')\n</code></pre>"},{"location":"houdini/basics/hou-python/#get-all-node-parameters-names","title":"Get all node parameters names","text":"Python<pre><code>def getAllNodeParameters(node):\n    # Return list of all parameters names for input node object\n    allParameters = [param.name()for param in node.parms()]\n    return allParameters\n</code></pre>"},{"location":"houdini/basics/hou-python/#connect-nodes","title":"Connect nodes","text":"Python<pre><code>import hou\n# Create transform nodes\nxform_A = hou.node('/obj/geo1/transform1')\nxform_B = hou.node('/obj/geo1/transform2')\n # Connect transform_A to transform_B\nxform_B.setInput(0, xform_A)\n\n# Create merge\nmerge = node.createNode('merge')\n# Connect xforms to a merge\nmerge.setNextInput(xform_A)\nmerge.setNextInput(xform_B)\n\n# Get node inputs\nmerge.inputs()\n# Get node outputs\nmerge.outputs()\n</code></pre>"},{"location":"houdini/basics/hou-python/#get-groups","title":"Get groups","text":"Python<pre><code>import hou\n\nnode = hou.selectedNodes()[0]\ngroups = [g.name() for g in node.geometry().primGroups()]\nprint groups\n</code></pre>"},{"location":"houdini/basics/hou-python/#builder-workflow-shop-context","title":"Builder workflow (shop context)","text":"<p>Create \"Material Surface Builder\" in SHOP context, dive inside. Python<pre><code>import hou\nshader = hou.node('/shop/vopmaterial1/lambert1')\nout = hou.node('/shop/vopmaterial1/surface_output')\nout.setNamedInput('Cf', shader, 'clr') # Set connection by name\nout.setNamedInput(0, shader, 0) # Set connection by parameter index\n\n# List all inputs for node 'surface_output'\nprint out.inputNames()\n</code></pre></p>"},{"location":"houdini/basics/hou-python/#filter-nodechildren-output","title":"Filter node.children() output","text":"Python<pre><code>import hou\nselectedNode = hou.selectedNodes()\n\ndef extractVop(listOfChildrens):\n    for node in listOfChildrens:\n        if node.type().name() == 'vopsurface':\n            return node\n\n# return vopsurface nodes\nvops = extractVop(selectedNode.children())\n</code></pre> <p>Same task with list comprehensions: Python<pre><code>import hou\nselectedNode = hou.selectedNodes()\n\n# return vopsurface nodes\nvops = [node for node in selectedNode.children() if node.type().name() == 'vopsurface']\n</code></pre></p>"},{"location":"houdini/basics/hou-python/#run-compiled-pyside2-ui","title":"Run compiled PySide2 UI","text":"<p>This is the better option (then running *.ui files, see below)! Create with QT Designer interface.ui file and save it somewhere where Houdini Python will see it (or add the path to the file to os.environ['PYTHONPATH']). Name main widget object (QWidget) \"MyInterface\". Create compile_ui.bat file: C<pre><code>set UIFILE=%1\nset UIDIR=%~dp$PATH:1\nset FILENAME=%~n1\nset SNAME=%UIDIR%%FILENAME%.py\n\n\nCALL C:\\Python27\\Scripts\\pyside2-uic.exe %UIFILE% -o %SNAME%\n</code></pre> Drag and drop interface.ui on compile_ui.bat to get interface.py In Houdini run this code in Python Source Editor window:</p> Python<pre><code>import os\nimport hou\n\nos.environ['PYTHONPATH']  = 'path to compiled interface.py'\n\nfrom PySide2 import QtCore, QtUiTools, QtWidgets\nimport interface\n\n\nclass Window(QtWidgets.QDialog, interface.Ui_MyInterface):\n    def __init__(self):\n        super(Window, self).__init__()\n        self.setupUi(self)\n        self.setParent(hou.ui.mainQtWindow(), QtCore.Qt.Window)\n\n        self.pushButton.clicked.connect(self.prn)\n\n    def prn(self):\n        print 'OLA'\n\n\nwin = Window()\nwin.show()\n</code></pre>"},{"location":"houdini/basics/hou-python/#run-pyside-ui","title":"Run PySide UI","text":"<p>Create and save a UI file with QT Designer. It could be just a blank widget (but not Main Window). In Houdini run this code in Python Source Editor window:</p> <p>Python<pre><code># Run *ui file in Houdini\n\nimport hou\nfrom PySide2 import QtCore, QtUiTools, QtWidgets\n\nclass MyWidget(QtWidgets.QWidget):\n    def __init__(self):\n        super(MyWidget,self).__init__()\n        ui_file = 'C:/path/to/file.ui'\n        self.ui = QtUiTools.QUiLoader().load(ui_file, parentWidget=self)\n        self.setParent(hou.ui.mainQtWindow(), QtCore.Qt.Window)\n\nwin = MyWidget()\nwin.show()\n</code></pre> You should have your window opened.</p>"},{"location":"houdini/basics/hou-python/#tools","title":"Tools","text":""},{"location":"houdini/basics/hou-python/#expand-alembic","title":"Expand Alembic","text":"Python<pre><code># Expand Alembic\n# Recreate alembic hierarchy by object groups and names\n# Select Alembic node, set\n\n# Naming convention\n# Hirarchy in alembic: OBJECT (group)/PART_01, ..., PART_## (meshes)\n# OBJECTS: &lt;objectName&gt;_&lt;objectVariation&gt; : bootle_A\n# PARTS: &lt;objectName&gt;_&lt;objectVariation&gt;_&lt;objectPart&gt; : bootle_A_label\n\nimport hou\n\n# Get Alembic SOP\nABC = hou.selectedNodes()[0]\n\ndef checkConditions():\n    '''\n    Check if environment conditions allows to run script without errors\n    '''\n    if not ABC:  # If user select anything\n        print '&gt;&gt; Nothing selected! Select Alembic SOP!'\n        return 0\n\n\ndef buildObjectsMap(listGroups):\n    # Create object map dictionary: each object = key, list of parts = values\n\n    objectsMap = {} # { OBJ: [PARTs] }\n\n    for partNameFull in listGroups:\n        items = partNameFull.split('_')\n        object = '{0}_{1}'.format(items[0], items[1])\n        part = items[2]\n\n        if not object in objectsMap.keys():\n            objectsMap[object] = [part]\n        else:\n            objectsMap[object].append(part)\n\n    return objectsMap\n\ndef buildGroupsList(object, listParts):\n    # Create string for BLAST SOP with list of groups for each object\n\n    groupsList = ''\n    for part in listParts:\n        name = '{}_{}'.format(object, part)\n        groupsList += ' ' + name\n\n    return groupsList\n\n\n\ndef expandABC(OBJ, objectsMap):\n    # Recreate alembic hierarchy\n\n    for object in sorted(objectsMap.keys()):\n        groupsList = buildGroupsList(object, objectsMap[object])\n        blast = OBJ.createNode('blast')\n        blast.setNextInput(ABC)\n        blast.setName(object)\n        blast.parm('group').set(groupsList)\n        blast.parm('negate').set(1)\n        blast.moveToGoodPosition()\n\ndef run():\n    if checkConditions() != 0:\n        # Setup Alembic properties\n        ABC.parm('loadmode').set(1)\n        ABC.parm('groupnames').set(4)\n        # Get Alembic container\n        OBJ = ABC.parent()\n\n        # Get all groups (PARTS) from alembic\n        listGroups = [g.name() for g in ABC.geometry().primGroups()]\n\n        # Build Objects Map\n        objectsMap = buildObjectsMap(listGroups)\n        # Expand Alembic\n        expandABC(OBJ, objectsMap)\n\n        print '&gt;&gt; EXPANDING DONE!'\n\nrun()\n</code></pre>"},{"location":"houdini/basics/hou-python/#import-fbx-into-houdini","title":"Import FBX into Houdini","text":"Python<pre><code>import hou\nimport os\n\ndirFBX = 'P:/PROJECTS/NSI/PROD/3D/lib/ANIMATION/CHARACTERS/ROMA/FBX/'\nfilesNamesFBX = [fileName for fileName in os.listdir(dirFBX) if os.path.isfile(os.path.join(dirFBX, fileName))]\n\nfor fileName in filesNamesFBX:\n    fileFBX =  '{0}{1}'.format(dirFBX,fileName)\n    if not hou.node('/obj/{}_fbx'.format(fileName.replace('.fbx',''))):\n        hou.hipFile.importFBX(fileFBX)\n    else:\n        print 'FBX {} EXISTS!'.format(fileName)\n</code></pre>"},{"location":"houdini/basics/hou-python/#convert-imported-fbx-to-geometry","title":"Convert imported FBX to geometry","text":"Python<pre><code># 256 Pipeline tools\n# Convert FBX subnetwork to Geometry node\n# Import FBX into Houdini, select FBX subnetwork, run script in Python Source Editor\n\nimport hou\n# Get selected FBX container and scene root\nFBX = hou.selectedNodes()\nOBJ = hou.node('/obj/')\n\ndef checkConditions():\n    '''\n    Check if environment conditions allows to run script without errors\n    '''\n    if not FBX:  # If user select anything\n        print '&gt;&gt; Nothing selected! Select FBX subnetwork!'\n        return 0\n\ndef convert_FBX():\n    '''\n    Create Geometry node and import all FBX part inside\n    '''\n    # Create Geometry node to store FBX parts\n    geometry = OBJ.createNode('geo', run_init_scripts = False)\n    geometry.setName('GEO_{}'.format(FBX.name()))\n    geometry.moveToGoodPosition()\n    # Get all paerts inside FBX container\n    geometry_FBX = [node for node in FBX.children() if node.type().name() == 'geo']\n\n    # Create merge node for parts\n    merge = geometry.createNode('merge')\n    merge.setName('merge_parts')\n\n    # Replicate FBX structure in Geometry node\n    for geo in geometry_FBX:\n        # Create Object Merge node\n        objectMerge = geometry.createNode('object_merge')\n        objectMerge.setName(geo.name())\n        # Set path to FBX part object\n        objectMerge.parm('objpath1').set(geo.path())\n        objectMerge.parm('xformtype').set(1)\n        # Create Material node\n        material = geometry.createNode('material')\n        material.setName('MAT_{}'.format(geo.name()))\n        # Link Material to Object Merge\n        material.setNextInput(objectMerge)\n        # Link part to Merge\n        merge.setNextInput(material)\n\n    # Set Merge Node flags to Render\n    merge.setDisplayFlag(1)\n    merge.setRenderFlag(1)\n    # Layout geometry content in Nwtwork View\n    geometry.layoutChildren()\n\n# Check if everything is fine and run script\nif checkConditions() != 0:\n    # Get FBX network\n    FBX = FBX[0]\n    # run conversion\n    convert_FBX()\n    print '&gt;&gt; CONVERSION DONE!'\n</code></pre>"},{"location":"houdini/basics/hou-python/#create-material-stylesheet-ui","title":"Create Material Stylesheet UI","text":"Python<pre><code># Create Material Stylesheet parameter interface\n# Select Geometry node, run script\n\nimport hou\n\n# Get selected geometry node to create Stylesheet parameter\nOBJ = hou.selectedNodes()[0]\n\n# Define tags\ndataTags = {'script_action_icon':'DATATYPES_stylesheet',\n            'script_action_help':'Open in Material Style Sheet editor.',\n            'spare_category':'Shaders',\n            'script_action':\"import toolutils\\np = toolutils.dataTree('Material Style Sheets')\\np.setCurrentPath(kwargs['node'].path() + '/Style Sheet Parameter')\",\n            'editor':'1'}\n\n# Create parameter interface\ngroup = OBJ.parmTemplateGroup()\nfolder = hou.FolderParmTemplate('folder', 'Shaders')\nfolder.addParmTemplate(hou.StringParmTemplate('shop_materialstylesheet', 'Material Style Sheet', 1, tags = dataTags))\ngroup.append(folder)\nOBJ.setParmTemplateGroup(group)\n</code></pre>"},{"location":"houdini/basics/hou-python/#flatten-curve","title":"Flatten curve","text":"Python<pre><code># Flatten curve: set Y coord = 0\ncoordList_SRC = '39.1665,0.362686,22.4173 55.3542,0.365759,10.9339'\ncoords = coordList_SRC.split(' ')\n\ncoordList_RES = ''\nfor xyz in coords:\n    listXYZ_SRC = xyz.split(',')\n    listXYZ_SRC = '{0},0.0,{1} '.format(listXYZ_SRC[0], listXYZ_SRC[2])\n    coordList_RES += listXYZ_SRC\n\nprint coordList_RES\n</code></pre>"},{"location":"houdini/basics/hou-setup/","title":"Houdini Setup","text":""},{"location":"houdini/basics/hou-setup/#common","title":"Common","text":"<ul> <li>Install license server on each machine</li> <li>Install HQueue Client (Reference)</li> <li>Directory in D:knlhouHQClient</li> <li>Server: ${env:EDEV_HOU_SERVER}:5000 (ex: ikrima-ryzen:5000)</li> <li>Logon Account: ${env:EDEV_HOU_SERVERACCOUNT} (ex: sa_server_account)</li> <li>Make sure firewall is accessible</li> <li>Update <code>MachineSetup-Config.ps1:${env:EDEV_HOU_ROOT}</code> to point to new path and rerun</li> <li>Make sure <code>HOUDINI_USER_PREF_DIR</code> is set (e.g. <code>HOUDINI_USER_PREF_DIR=${env:EDEV_HOU_HOUDEV}/prefs/houdini__HVER__</code>)</li> <li>Change symlink of C:Program FilesSide Effects SoftwareLatest to point to new directory</li> </ul>"},{"location":"houdini/basics/hou-setup/#optional","title":"Optional","text":"<ul> <li>Update git repos in tp directory</li> <li>Update binary plugins (Redshift, optix)</li> </ul>"},{"location":"houdini/basics/hou-setup/#for-major-updates","title":"For Major Updates","text":"<p>For major-minor version updates (i.e. from 17.0 to 17.5)</p> <ul> <li>Copy previous version prefs folder to new one (eg: <code>${env:EDEV_HOU_HOUDEV}\\prefs\\houdini17.5</code>)</li> <li>Update the new houdini.env Version envars. Ex:</li> <li>HOU_MAJOR_VER = 17</li> <li>HOU_MINOR_VER = 5</li> <li>REDSHIFT_VER = 17.5.173</li> <li>Create a new version specific dso folder (eg: <code>${env:EDEV_HOU_HOUDEV}\\personal\\dso-17.5</code>)</li> <li>Compile dso's with new HDK (ex: SOP_ComputeTangents)</li> <li>mikktspace-for-houdini: Update the visual studio HDK props file to point to new HDK location</li> <li>Not needed anymore as PolyFrame node has builtin support for mikktspace</li> <li>Follow instructions for nightly build updates</li> </ul>"},{"location":"houdini/basics/hou-setup/#for-nightly-updates","title":"For Nightly Updates","text":"<ul> <li>Run <code>${env:EDEV_DEVOPS_DIR}/MachineConfig/Houdini-Setup.ps1:Update-HythonVenv</code></li> <li>Change nvidia graphics custom 3d settings for new hindie.exe</li> </ul>"},{"location":"houdini/basics/hou-setup/#houdinienv","title":"Houdini.env","text":"<p>Use <code>$HSITE</code> and <code>$HFS</code> to point site specific configuration &amp; houdini install directory The problem is that no one seems to understand the fully correct syntax, while some slightly bad variations happen to work depending on the platform/method.</p> <p>Let me try to lay out some of the rules: (Reference)</p> <ul> <li>Houdini only expands environment variables in the hscript syntax. ie. $HOME, not the DOS syntax like %HOME%.</li> <li>The path separators should be semi-colon (;) instead of colon (:). This works on all platforms. Linux/OSX happen to also accept colon (:) as well.</li> <li>When you override a variable, you should have \"&amp;\" in there somewhere so that the default path is still used. Depending on your shell, this is sometimes a special character, in which case you need to ensure that you set it with the correct escaping.</li> <li>On Windows especially, make sure you launch Houdini from the shell you set the environment variable. You cannot set it into a shell and then expect the Start Menu &gt; Houdini to see it.</li> <li>You must set your environment variable BEFORE Houdini is loaded.</li> <li>If you're using houdini.env (as an alternative), then you must use double quotes if your variable value contains spaces.</li> <li>List of environment variables</li> </ul>"},{"location":"houdini/basics/hou-setup/#ui-customization","title":"UI Customization","text":"<ul> <li>(Reference)</li> <li></li> <li> <p>Houdini Interface Customization Docs</p> </li> <li> <p>Slate Theme from Odforce: flat user interface</p> </li> <li>unzip the files and put them in your <code>$HOME/houdiniX.x/config/ directory</code> and relaunch Houdini</li> <li> <p>select theme in Edit \u25ba Color Settings Window </p> </li> <li> <p>Changing the Desktop Layout file and place it in your local preferences desktop directory <code>$HOME/houdiniX.x/desktop/</code></p> </li> <li>You can switch between desktops using the menu at the top of the main window </li> <li> <p>By default Houdini starts up in the Build desktop, but you can change that in the Edit \u25ba Preferences \u25ba General User Interface </p> </li> <li> <p>Simplifying Node Shapes</p> </li> <li> <p>In the network editor pane, click the View dropdown menu: </p> <ul> <li>Show Custom Node Shapes \u25ba Disable, so all nodes are rectangular</li> </ul> </li> <li> <p>In the network editor pane, click the Tools dropdown menu: </p> <ul> <li>Make Room for New Nodes \u25ba Disable</li> </ul> </li> <li> <p>In the main Houdini prefs, Edit \u25ba Preferences \u25ba Network Editor, Nodes and Trees: </p> <ul> <li>Animate network changes \u25ba Disable</li> <li>Use simplified shape when node shapes off \u25ba Enable, this uses a simple rectangle instead of a rounded rectangle</li> </ul> </li> <li> <p>Press the \"d\" key with your mouse over the network pane to raise the Network View Display Options:</p> <ul> <li>General Tab \u25ba Node size to show ring \u25ba never show the ring </li> <li>Themes Tab \u25ba Default node shapes \u25ba no shapes theme </li> </ul> </li> <li> <p>Changing the Splash Screen by Setting Houdini Environment Variables.</p> </li> <li>Modify <code>$HOME/houdiniX.x/houdini.env</code> Bash<pre><code>HOUDINI_SPLASH_FILE = ~/Pictures/splashscreen_001.png\nHOUDINI_SPLASH_MESSAGE = \"Welcome//n${USER} @ ${HOSTNAME}//n${HOUDINI_VERSION}//nGood Luck!\"\nHOUDINI_NO_START_PAGE_SPLASH = 1\n</code></pre></li> </ul>"},{"location":"houdini/basics/hou-ue4/","title":"UE4","text":""},{"location":"houdini/basics/hou-ue4/#export-anim","title":"Export Anim","text":"<ul> <li>Houdini:</li> <li>Y-up, Z forward</li> <li>Set keyframe on root skeleton at frame 0</li> <li> <p>Export ROP: Force Blend Shape Export + Force Skin Deform Export </p> </li> <li> <p>Unreal</p> </li> <li>Import with selecting existing skeleton if already exists</li> <li>Use T0 as ref pose = True</li> <li>Convert Scene = True</li> <li>Force X-Axis = True</li> <li>NOTE: Not sure how to export morph targets into UE4</li> <li>GOTCHAS:</li> <li>Make sure prerot/postrot is set accordingly between bindpose &amp; imported fbx</li> <li>UE4 exported fbxs dont have prerot &amp; postrot</li> </ul>"},{"location":"houdini/basics/hou-ue4/#import-anim-from-ue4","title":"Import Anim from UE4","text":"<ul> <li>Export with force X-axis front</li> <li>Houdin import FBX convert Y-up=true</li> <li>You might need to set the capture frame in the FBX Mesh network to be the first frame of the imported animation to reset the fbx bind skeleton bind pose</li> </ul>"},{"location":"houdini/basics/hou-vex/","title":"VEX","text":""},{"location":"houdini/basics/hou-vex/#overview","title":"Overview","text":"<p>VEX is Houdini's SIMD streaming scripting language</p>"},{"location":"houdini/basics/hou-vex/#internals","title":"Internals","text":"<ul> <li>Houdini \"JIT\" compiles VEX code as part of node cook process  with <code>vcc.exe</code></li> <li>execution is runtime bytecode interpreter</li> <li>using llvm for lowering/optimization for simple optimizations builtin like constant folding, dce, and outlining</li> <li>some useful commmands</li> <li>dump ast: <code>vcc --vfl-input foo.vfl -c cvex --compile-all --compile-target dumpast</code></li> <li>dump IR:<ul> <li>vex program:             <code>vcc --vfl-input foo.vfl -c cvex</code></li> <li>unoptimized vex program: <code>vcc --vfl-input foo.vfl -c cvex --no-optimize</code></li> <li>force for all functions: <code>vcc --vfl-input foo.vfl -c cvex --compile-all --generate-intrinsic-lib</code></li> </ul> </li> <li>more details</li> </ul>"},{"location":"houdini/basics/hou-vex/#useful-functions","title":"Useful Functions","text":"Function Description <code>primuv</code> <code>xyzdist</code> return the distance from the sample point pt to the nearest point on the surface geometry <code>chramp</code> <code>fit01</code>"},{"location":"houdini/basics/hou-vex/#common-tasks","title":"Common Tasks","text":"<ul> <li>Print to Console: <code>printf(\"boobs %s %f\", \"wee\", 1.0);</code></li> <li>Pipe operator output referenced by parameter:</li> <li>Object Merge Object1 field: <code>chsop(\"../../../export_node\")</code></li> <li><code>opfullpath(\"..\") + \"/fluid_obj/TRIANGLE_CLOUD\"</code></li> <li>Loop over primitive points</li> <li>Ryoji CG Useful Snippets</li> <li>Create Geo</li> <li> <p>Iterate over points in a primitive GLSL<pre><code>int primpoints[] = primpoints(0, @primnum);\nint num_pts = len(primpoints);\n\n//Loop over the vertercies to find their associated points\nforeach (int pidx; int point_num; primpoints) {\n  vector cd = {0.0};\n  cd.g = chramp(\"n\",pidx/float(num_pts));\n  setpointattrib(0, \"Cd\", point_num, cd, \"set\");\n}\n</code></pre></p> </li> <li> <p>More detailed method to iterate over vertices and points in a primitive GLSL<pre><code>i@prim;\nv@uv;\nfloat dist = xyzdist(1, @P, @prim, @uv);\n//Above gets the prim(n) and prim(uv) for a given point position\n//Also the distance between the given point and the prim returned\n//Although all we really need is the primitive number\n\n//Create array to store the primitive's point numbers\nv@primpoints;//This vector is used to store the 3 points instead of using an array, due to a limit with array attributes.\n\n// NOTE: Basically if you want to access the array in another wrangle\n// further down the chain, you need to use a data type other than an\n// array instead, a vector or matrix can be used to store array like data structures\n\n//Get the number of vertex for a given prim\nint nvtx = primvertexcount(0, @prim);\n\n//Loop over the vertercies to find their associated points\nfor (int i = 0; i &lt; nvtx; i++){\n  //Get the linear vertex numbers for the prim(n)\n  int linearvertex = vertexindex(0, @prim, i);\n\n  //Get the point number from the linear vertex number\n  int vertexpoint = vertexpoint(0, linearvertex);\n\n  //Put point numbers into the points array\n  @primpoints[i] = vertexpoint;\n}\n//Display primitive's point numbers\n//printf(\"%g \\n\", points);\n</code></pre></p> </li> </ul>"},{"location":"houdini/basics/hou-vex/#parameter-binding","title":"Parameter Binding","text":"VEX type Syntax <code>float</code> <code>f@name</code> <code>vector2</code> (2 floats) <code>u@name</code> <code>vector</code> (3 floats) <code>v@name</code> <code>vector4</code> (4 floats) <code>p@name</code> <code>int</code> <code>i@name</code> <code>matrix2</code> (2\u00d72 floats) <code>2@name</code> <code>matrix3</code> (3\u00d73 floats) <code>3@name</code> <code>matrix</code> (4\u00d74 floats) <code>4@name</code> <code>string</code> <code>s@name</code> <p>(Reference)</p>"},{"location":"houdini/basics/hou-vex/#tutorials","title":"Tutorials","text":"<ul> <li>VEX tutorial</li> <li>VEX Guide</li> </ul>"},{"location":"houdini/basics/hou-vex/#kiryhas-snippets","title":"Kiryha's Snippets","text":"<p>Kiryha's VEX Snippets Inlined below</p>"},{"location":"houdini/basics/hou-vex/#basics","title":"Basics","text":"<p>The VEX 101 and the most low-level solution blocks.</p>"},{"location":"houdini/basics/hou-vex/#datatypes","title":"Datatypes","text":"GLSL<pre><code>// Integers\nint myInteger = 1;\ni@myInteger = 1;\n\n// Floats\nfloat myFloat = 4.14;\nf@myFloat = 3.14;\n\n// Strings\nstring myStiring = 'C:/cache/animation.abc';\ns@myString = 'C:/cache/animation.abc';\n\n// Arrays\nstring variations[] = {'A','B','C'};\nstring variables[] = array(variable_A, variable_B, variable_C);\ns[]@variations = {'A','B','C'};\n</code></pre>"},{"location":"houdini/basics/hou-vex/#data-type-convertion","title":"Data type convertion","text":"GLSL<pre><code>// interger &gt;&gt; string\nint number = 123;\nstring text = itoa(number);\n\n// string &gt;&gt; integer\nstring text = '123';\nint number = atoi(text);\n</code></pre>"},{"location":"houdini/basics/hou-vex/#strings","title":"Strings","text":"GLSL<pre><code>// Print strings\nprintf('Hello, World!');\n// Result: Hello, World!\n\n// Print string variable\nstring text = 'Hello, World!';\nprintf('The text is: %s \\n', text);\n// Result: The text is: Hello, World!\n\n// Slice strings\n// string[start:stop]  &gt;&gt; Use &lt;start&gt; through &lt;stop&gt;-1\nstring text = '123456';\ntext[:];     // Result: '123456'\ntext[:-1];   // Result: '12345'\ntext[1:];    // Result: '23456'\ntext[1:-1];  // Result: '2345'\ntext[-1];    // Result: '6'\ntext[0];     // Result: '1'\n\n// Concatenate (join) strings\nstring node = 'SOP';\nstring value = '256';\nstring output = sprintf('%s%s%s', node, ' = ', value);\nprintf('%s', output);\n// Result: 'SOP = 256'\n\n// Reverse\nstring text = 'ABCD''\nreverse(text);\n// Result: 'DCBA'\n</code></pre>"},{"location":"houdini/basics/hou-vex/#arrays","title":"Arrays","text":"GLSL<pre><code>// Accessing, sorting, reversing elements\nint numbers[] = {5, 4, 3, 2, 1};\nprintf(' %d\\n', numbers[0]);                // Result: 5\nprintf(' %d\\n', numbers[-1]);               // Result: 1\nprintf(' %d\\n', numbers[2:]);               // Result: {3, 2, 1}\nprintf(' %d\\n', sort(numbers));             // Result: {1, 2, 3, 4, 5}\nprintf(' %d\\n', reverse(sort(numbers)));    // Result: {5, 4, 3, 2, 1}\n\n// Add element to array\nint numbers[] = {1, 2, 3, 4, 5, 6};\nnumbers[1] = 7;\n// Result: {1, 7, 3, 4, 5, 6}\nnumbers[6] = 7;\n// Result: {1, 2, 3, 4, 5, 6, 7}\nappend(numbers, 7);\n// Result: {1, 2, 3, 4, 5, 6, 7}\n\n// Find element in array\nint numbers[] = {5, 4, 3, 2, 1};\nint index_of_4 = find(numbers, 4);\nprintf('%d', index_of_4 );\n// Result: 1\n\n// Split string with a space to array of strings\nstring numbres = '1 2 3 4 5 6';\nstring array[] = split(numbres, ' ');\nprintf('%s', array);\n// Result: {1, 2, 3, 4, 5, 6}\n\n// Split integer into array of integers via strings\nint int_number = 312654;\nstring string_number = itoa(int_number);\nint int_numbers[];\n\nfor(int n=0; n&lt;len(string_number); n++){\n        int_numbers[n] = atoi(string_number[n]);\n        }\n\nprintf('%s', int_numbers);\n// Result: {3, 1, 2, 6, 5, 4}\nprintf('%s', sort(int_numbers));\n// Result: {1, 2, 3, 4, 5, 6}\nprintf('%s', reverse(sort(int_numbers)));\n// Result: {6, 5, 4, 3, 2, 1}\n</code></pre>"},{"location":"houdini/basics/hou-vex/#get-and-set-attribute-values","title":"Get and set attribute values","text":"GLSL<pre><code>// Get attribute value from first Wrangle input:\nvector point_pos = v@opinput0_P;\nvector point_pos = point(0, \"P\", @ptnum);\n\n// Get attribute value from scene geometry:\nvector point_pos = point(\"op:../geometry_name\", \"P\", @ptnum);\n\n// Get primitive attribute in point mode\nprimattrib(0, \"attribute_name\", @ptnum, 0);\n\n// Create color attribute and set it`s value to red\naddpointattrib(0, \"Cd\", {1,0,0});\n\n// Create point attribute and set value\n// Could be used to create and set point attributes in detail mode\nsetpointattrib(0, \"&lt;attribute_name&gt;\", &lt;point_number&gt;, &lt;value&gt;, \"set\");\n\n// Set attribute value:\nf@pi = 3.1415;\nv@vector_a = {1, 2, 3};\nv@vector_b = set(1, 2, @P.z);\n</code></pre>"},{"location":"houdini/basics/hou-vex/#modify-input-values","title":"Modify input values","text":"GLSL<pre><code>float input;\n// Modify with fit range\ninput = fit(input, &lt;currentMinValue&gt;,&lt;currentMaxValue&gt;, &lt;outMin&gt;, &lt;outMax&gt;);\n// Modify with a ramp\ninput = chramp('Modify_Value', input);\n</code></pre>"},{"location":"houdini/basics/hou-vex/#get-points-and-primitives","title":"Get points and primitives","text":"GLSL<pre><code>// Run over points\nint points[] = expandpointgroup(0, \"!*\");\nint primitives[] = expandprimgroup(0, \"!*\");\n// Run over primitives\nint points[] = primpoints(0, @primnum);\n</code></pre>"},{"location":"houdini/basics/hou-vex/#add-point-attribute-in-detail-mode","title":"Add point attribute in Detail mode","text":"GLSL<pre><code>addpoint(0, {0,0,0});\nsetpointattrib(0, 'myAttribute', 0, 'attributrValue', \"set\");\n</code></pre>"},{"location":"houdini/basics/hou-vex/#debug-vex-with-print","title":"Debug VEX with print","text":"GLSL<pre><code>// Basic print\nprintf('Hello, World');\n\n// Print data\nprintf('The string is %s', 'Eve');         // Result: The string is Eve\nprintf('The integer is %d', 256);          // Result: The integer is 256\nprintf('The float is %f', 3.14156);        // Result: The float is 3.14156\nprintf('The the float is %.2f', 3.14156);  // Result: The float is 3.14\n\n// Get all primitives\nint primitives[] = expandprimgroup(0, \"*\");\n\nforeach (int currentPrim; primitives){\n        // print primitive number\n        printf('Prim %s \\n', currentPrim);\n        }\n</code></pre>"},{"location":"houdini/basics/hou-vex/#create-groups","title":"Create groups","text":"GLSL<pre><code>// Add points with X position &gt; 1 to group \"high\"\nif (@P.x &gt; 1){\n    setpointgroup(0, 'high', @ptnum, 1, 'set');\n    // Alternative: i@group_high = 1\n    }\n\n// To highlight VEX group in the viewport enter group name\n// in the &lt;Output Selection Group&gt; field\n// in &lt;Bindings&gt; tab of the Wrangler node.\n</code></pre>"},{"location":"houdini/basics/hou-vex/#loops","title":"Loops","text":"GLSL<pre><code>for(first; last; increment) { // Do something }\nforeach(element; array) { // Do something }\nforeach(index; element; array) { // Do something }\n</code></pre> GLSL<pre><code>// Create OPEN shape\n\n// Create LINE primitive\nint primitive = addprim(0, 'polyline');\n// Calculate total number of points\nint numberOfPoints = @numpt;\n\n// Create a vertex for each point in primitive\nfor (int n=0; n&lt;numberOfPoints; n++){\n  addvertex(0, primitive, n);\n}\n</code></pre> GLSL<pre><code>// Create CLOSED shape\n\n// Create POLYGON primitive\nint primitive = addprim(0, 'poly');\n// Store all points in array\nint allPoints[] =  expandpointgroup(0, \"!*\");\n\n// Create a vertex for each point in primitive\nforeach(int currentPoint; allPoints){\n  addvertex(0, primitive, currentPoint);\n}\n</code></pre>"},{"location":"houdini/basics/hou-vex/#conditions","title":"Conditions","text":"GLSL<pre><code>// Scale 10 times first and last points\nif ((@ptnum == 0) || (@ptnum == (@numpt-1))) f@pscale = 10;\nelse f@pscale = 1;\n\n// Scale 10 times first and last points, short form\nf@pscale = (@ptnum == 0) || @ptnum ==(@numpt-1) ? 10 : 1;\n</code></pre>"},{"location":"houdini/basics/hou-vex/#vectors","title":"Vectors","text":"GLSL<pre><code>// Find a vector between two points A and B (coords B - coords A)\nvector vector_A = normalize(point(0, \"P\", &lt;ptnum_B&gt;));\nvector vector_B = normalize(point(0, \"P\", &lt;ptnum_A&gt;));\nvector vector_AB = vector_A-vector_B;\n\n// Build tangent normals\nvector vector_A = normalize(point(0, \"P\", @ptnum));\nvector vector_B = normalize(point(0, \"P\", @ptnum + 1));\n@N = vector_A-vector_B;\n\n// Get angle between 2 vectors in radians\nfloat angle = acos(dot(normalize(vector_A), normalize(vector_B)));\n</code></pre>"},{"location":"houdini/basics/hou-vex/#transformation-matrix","title":"Transformation matrix","text":"GLSL<pre><code>// Get matrix from scene object\nmatrix matrx = optransform('obj/geometry_01');\n// Apply object transforms to a points\n@P *= matrx;\n</code></pre>"},{"location":"houdini/basics/hou-vex/#vex-functions","title":"VEX functions","text":"GLSL<pre><code>// Create array from point positions (Detail mode)\nfunction vector[] get_point_positions(){\n    vector points[];\n    for(int i=0; i&lt;npoints(0); i++){\n        vector point_position = point(0, 'P', i);\n        append(points, point_position);\n    }\n    return points;\n}\n\nprintf('Array = %s\\n',  get_point_positions());\n// Result: Array = {{0,0,0}, {0,0.12,0}, {0,0.23,0}, {0,0.34,0}}\n</code></pre>"},{"location":"houdini/basics/hou-vex/#using-custom-vex-modules","title":"Using custom VEX modules","text":"<p>It is possible to create custom VEX functions, save them in <code>*.h</code> files, and import them into the Attribute Wrangle. Importing is possible via <code>#include</code> statement, followed by the file name.</p> <p>Import options:</p> <ul> <li>Direct import with a full path: <code>#include \"D:/Eve/tools/houdini/vex/library.h\"</code></li> <li>The path to <code>library.h</code> file set via environment variable (os.environ['HOUDINI_VEX_PATH'] = \"D:/Eve/tools/houdini/vex/\"): <code>#include &lt;library.h&gt;</code></li> <li>The path set via UI parameter. lib_path = <code>$EVE_ROOT</code>, where $EVE_ROOT is \"EVE_ROOT\" env variable set to \"D:/Eve\"): <code>#include \"</code>chs('lib_path')<code>/tools/houdini/vex/library.h\"</code></li> </ul> <p>The <code>library.h</code> file, located in <code>D:/Eve/tools/houdini/vex/library.h</code>:</p> GLSL<pre><code>void hello(){\n    printf('Hello, Eve!\\n');\n}\n</code></pre> <p>The code in Attribute Wrangle: GLSL<pre><code>#include \"D:/Eve/tools/houdini/vex/library.h\"\n\nhello();\n\n// Result: Hello, Eve!\n</code></pre></p>"},{"location":"houdini/basics/hou-vex/#custom-data-types-in-vex","title":"Custom data types in VEX","text":"<p>If the default data types are not sufficient for your needs you can implement custom data type in VEX using struct.</p> <p>The struct works only if defined in a custom module or in the \"Outer Code\" parameter of the \"snippet1\" node. You can find it inside the Attribute Wrangle asset (need to unlock Attribute Wrangle to have access): <code>attribwrangle1 &gt; attribvop1 &gt; snippet1</code></p>"},{"location":"houdini/basics/hou-vex/#vex-hash-table","title":"VEX Hash Table","text":"<p>In this example, we would implement a Hash Table data structure, which allows storing key/value pairs. It is well known as a dictionary in Python or object in Javascript.</p> GLSL<pre><code>// The library.h content\n// VEX Hash Table implementation for {string:float} pairs\nstruct hash_table{\n    int array_len;  // Limit array length\n    float data[];  // Init data\n\n    int build_index(string key){\n        // Build and return index for array from string\n        int index = random_shash(key) % this.array_len*10;\n\n        return index;\n    }\n\n    void add_item(string key; float value){\n        // Place item value in array at index position\n        int index = this -&gt; build_index(key);\n        this.data[index] = value;\n    }\n\n    float get_item(string key){\n        // Get item from array by position\n        int index = this -&gt; build_index(key);\n        float value = this.data[index];\n\n        return value;\n    }\n}\n</code></pre> <p>If we would need to store integer values for several items, e.g. amount of fruits we need to bye, we can use our <code>hash_table</code> structure. The Attribute Wrangle (detail mode) code:</p> GLSL<pre><code>#include &lt;library.h&gt;\n\n// Initialize hash table\nfloat data[];\nint table_size = 10;\nhash_table fruits_number = hash_table(table_size, data);\n\n// Add elements to hash map\nfruits_number-&gt;add_item('apple', 256);\nfruits_number-&gt;add_item('banana', 1024);\nfruits_number-&gt;add_item('strawberry', 512);\n\n// Get element\nfloat number_of_apples = fruits_number-&gt;get_item('apple');\nprintf('Amount = %s \\n', number_of_apples);\n\n// Result: Amount = 256\n</code></pre>"},{"location":"houdini/basics/hou-vex/#vex-expressions","title":"VEX expressions","text":"<p>Using VEX in the parameter interface of Houdini nodes. See documentation</p>"},{"location":"houdini/basics/hou-vex/#get-attributes","title":"Get Attributes","text":"GLSL<pre><code>detail(\"../nodeName/\", 'attributeName', 0)\npoint(\"../nodeName/\",@ptnum, 'attributeName',0)\n</code></pre>"},{"location":"houdini/basics/hou-vex/#every-n-frame","title":"Every N frame","text":"GLSL<pre><code>if(($F % N == 0),$F,0)\n// Hscript version: floor($F/N)*N\n</code></pre>"},{"location":"houdini/basics/hou-vex/#select-corner-points","title":"Select corner points","text":"GLSL<pre><code># create Groupexpreesion SOP\nneighbourcount(0, @ptnum) == 2\n</code></pre>"},{"location":"houdini/basics/hou-vex/#tools","title":"Tools","text":"<p>In this section, there are a bit more sophisticated VEX solutions. Each solves some particular task and can be considered as a custom tool.</p>"},{"location":"houdini/basics/hou-vex/#hanging-wire-between-two-points-controlled-by-ramp","title":"Hanging wire between two points controlled by ramp","text":"GLSL<pre><code>/*\nBuild a hanging wire between 2 anchor points\n\nFeed 2 points into detail wrangle\nDefine wire shape with a \"Shape\" ramp.\n*/\n\n// Define initial variables\nint number_of_points = chi('number_of_points');\nvector anchor_a = point(0, \"P\", 0);\nvector anchor_b = point(0, \"P\", 1);\n\n// Build arc\nfor(int i=1; i&lt;number_of_points+1; i++){\n\n    // Distribute points evenly between anchors\n    vector segment_len = (anchor_b-anchor_a)/(number_of_points+1);\n    vector position = anchor_a + i*segment_len;\n\n    // Modify Y position with ramp via remapped iteration numbers\n    float range = fit(i, 1, number_of_points, 0, 1);\n    position.y -= chramp('Shape', range);\n    vector point_position = set(position.x, position.y, position.z);\n\n    // Create point\n    int point = addpoint(0, point_position);\n\n    // Build polygons\n    if(i==1) addprim(0, 'polyline', 0, 2);  // Add first segment\n    if(i!=0 &amp;&amp; i!=number_of_points) addprim(0, 'polyline', i+1, i+2);  // Add inner segments\n    if(i==number_of_points) addprim(0, 'polyline', number_of_points+1, 1);  // Add last segment\n}\n</code></pre>"},{"location":"houdini/basics/hou-vex/#hanging-wire-between-two-points","title":"Hanging wire between two points","text":"GLSL<pre><code>/*\nBuild a hanging wire between 2 anchor points\n\nFeed 2 points into detail wrangle\nRanges: shift = [-1:1], number_of_points = [1:10], curvature = [0:5]\nDefine wire shape with all 3 parameters (shift, number_of_points, curvature),\nincrease resolution with a subdivide node after. The number_of_points also affects shape!\n*/\n\n// Define initial variables\nfloat shift = chf('shift');\nint number_of_points = chi('number_of_points');\nvector anchor_a = point(0, \"P\", 0);\nvector anchor_b = point(0, \"P\", 1);\nfloat array_center = (number_of_points-1)/2.0+2;  // Created points array center\n\n// Build arc\nfor(int i=1; i&lt;number_of_points+1; i++){\n\n    vector segment_len = (anchor_b-anchor_a)/(number_of_points+1);\n    vector position = anchor_a + i*segment_len; // Distribute points evenly between anchors\n    float point_num = i+1;\n    float curv_value = chf('curvature');\n    float curvature;\n\n    // Adjust point positions to shape parabola\n    if(point_num &lt; array_center) curvature = curv_value/point_num; // Left side\n    if(point_num == array_center) curvature = curv_value*1.16/point_num; // Center point\n    if(point_num &gt; array_center) curvature = curv_value/(point_num-2*(point_num - array_center)); // Right side\n\n\n    // Aplyy adjustments\n    position.y += curvature + shift - chf('curvature');\n    vector point_position = set(position.x, position.y, position.z);\n\n    // Create point\n    int point = addpoint(0, point_position);\n\n    // Build polygons\n    if(i==1) addprim(0, 'polyline', 0, 2);  // Add first segment\n    if(i!=0 &amp;&amp; i!=number_of_points) addprim(0, 'polyline', i+1, i+2);  // Add inner segments\n    if(i==number_of_points) addprim(0, 'polyline', number_of_points+1, 1);  // Add last segment\n}\n</code></pre>"},{"location":"houdini/basics/hou-vex/#flatten-mesh-by-uvs","title":"Flatten mesh by UVs","text":"GLSL<pre><code>// Plave points as UVs in 3d\nv@rest = @P;\n@P = vertex(0, \"uv\", pointvertex(0, @ptnum));\n\n// Return them back\n@P = v@rest\n</code></pre>"},{"location":"houdini/basics/hou-vex/#remap-random-from-01-to--11","title":"Remap random from 0:1 to -1:1","text":"GLSL<pre><code>float random = rand(@ptnum)*2-1;\n</code></pre>"},{"location":"houdini/basics/hou-vex/#bend-curl-curves-hairs","title":"Bend (curl) curves (hairs)","text":"GLSL<pre><code>// Primitive wrangle\nint points[] = primpoints(0, @primnum);\n\nmatrix3 matrx = ident();\nfloat angle = radians( chf('angle') );\nvector axis = {1, 0, 0};\n\nvector init_pos = point(0, \"P\", points[0]);\nvector prev_pos = init_pos;\n\nfor (int n=0; n&lt;len(points); n++){\n    vector curr_pos = point(0, \"P\", points[n]);\n    rotate(matrx, angle, axis);\n\n    // init_pos *= 0.01; // spiral\n    vector new_pos = (curr_pos - init_pos)*matrx + prev_pos;\n    init_pos = curr_pos;\n    prev_pos = new_pos;\n\n    setpointattrib(0, \"P\", points[n], new_pos);\n    }\n</code></pre>"},{"location":"houdini/basics/hou-vex/#create-uvs-on-curves-hairs-and-paint-with-ramp-and-random-color","title":"Create UVs on curves (hairs) and paint with ramp and random color","text":"GLSL<pre><code>// For input cluster of curves\n// Set uv attribute from 0 at a root, to the 1 at a tip\nf@uv = float(vertexprimindex(0, @ptnum))/(@numvtx-1);\n\n// Paint curve and correct with ramp\n@Cd = chramp('Value',@uv);\n\n// Add random 10% of red curves\nif(rand(@primnum) &gt; 0.9){\n    @Cd={1,0,0};\n    }\n</code></pre>"},{"location":"houdini/basics/hou-vex/#stick-points-to-animated-geometry","title":"Stick points to animated geometry","text":"<p>Create TimeShift SOP after animated geo, Scatter SOP and Attribute Wrangler. Connect scatter, timeShift, animated geo to inputs 0, 1 and 2 of the wrangle. GLSL<pre><code>int prim;\nvector uv;\n\n// What prim the scatterd point is close to, and position of this prim in uv space\nxyzdist(1, @P, prim, uv);\n// Set scattered point position\n@P = primuv(2, \"P\", prim, uv);\n</code></pre></p>"},{"location":"houdini/basics/hou-vex/#move-an-object-to-the-origin-and-return-back","title":"Move an object to the origin and return back","text":"<p>Create wrangle to move object to the origin GLSL<pre><code>// Get center of the oject bounding box (centroid)\nvector min = {0, 0, 0};\nvector max = {0, 0, 0};\ngetpointbbox(0, min, max);\nvector centroid = (max + min)/2.0;\n\n// Build and apply transformation matrix\nvector translate = centroid;\nvector rotate = {0,0,0};\nvector scale = {1,1,1};\nmatrix xform = invert(maketransform(0, 0, translate, rotate, scale));\n@P *= xform;\n\n// Store transformation matrix in attribute\n4@xform_matrix = xform;\n</code></pre></p> <p>Create the second wrangle to return it to the original position GLSL<pre><code>@P *= invert(4@xform_matrix);\n</code></pre></p>"},{"location":"houdini/basics/hou-vex/#use-noise-function","title":"Use Noise function","text":"GLSL<pre><code>// Visualise nose as Black and White values\n// Delete black and white points separatly\n\n// Default non zero values for 10X10 grid:\n// Noise_size = 1\n// Noise_threshold = 0.5\n\n// Make geometry white\n@Cd = {1, 1, 1};\n\n// Setup noise\nfloat noseValues = noise(@P*(1/chf('Noise_Size')) + chf('Noise_Offset'));\n\n// Paint-delete points with noise\nif(noseValues &gt; chf('Noise_Threshold')){\n    @Cd = 0;\n    if(rand(@ptnum) &lt; ch('delete_black')){\n        if(chi('del') == 0){\n            @Cd = {1,0,0};\n            }\n        else{\n            removepoint(0,@ptnum);\n            }\n        }\n    }\n\nif(noseValues &lt; chf('Noise_Threshold')){\n    if ( rand(@ptnum) &lt; ch('delete_white') ) {\n        if(chi('del') == 0){\n            @Cd = {1,0,0};\n            }\n        else{\n            removepoint(0,@ptnum);\n            }\n        }\n    }\n</code></pre>"},{"location":"houdini/basics/hou-vex/#flatten-surface-bottom","title":"Flatten surface bottom","text":"GLSL<pre><code>float min = ch(\"flatten_disrtance\") + getbbox_min(0).y;\nfloat max = getbbox_max(0).y;\nfloat Y = clamp(@P.y, min, max);\n\n@P = set(@P.x, Y, @P.z);\n</code></pre>"},{"location":"houdini/basics/hou-vex/#multiply-distribution-make-small-smaller-big-bigger","title":"Multiply distribution (make small smaller, big bigger)","text":"GLSL<pre><code>value = pow(value, 8.0);\n</code></pre>"},{"location":"houdini/basics/hou-vex/#noise-the-points","title":"Noise the points","text":"GLSL<pre><code>// Define UI controls\nfloat noise = chf('Noise_Power');\nfloat freq = chf('Noise_Frequency');\n// Create noise\nvector noiseXYZ = noise(@P*freq);\n// Apply noise to a point position\nv@ns = fit(noiseXYZ, 0,1, -1, 1)*noise;\n@P.x  += @ns.x;\n@P.z  += @ns.z;\n</code></pre>"},{"location":"houdini/basics/hou-vex/#select-mesh-border-points","title":"Select mesh border points","text":"GLSL<pre><code>// Get number of connectet points\nint nbPts = neighbourcount(0,@ptnum);\n// Create \"border\" group with border points\ni@group_border = nbPts == 3 | nbPts == 2;\n</code></pre>"},{"location":"houdini/basics/hou-vex/#shape-polywire-with-ramp-for-combined-curves","title":"Shape Polywire with ramp for combined curves","text":"GLSL<pre><code>// Create Primitive Wrangle before polywire, use @width as Wire Radius\n// Get array of points in each curve (primitive)\ni[]@primPts = primpoints(0, @primnum);\n\n// For each point in current curve\nforeach (int i; int currentPoint; @primPts){\n    float ramp_index = fit(i, 0, len(@primPts)-1, 0,1);\n    f@widthPrim = chramp(\"shape\", ramp_index)/20;\n    setpointattrib(0, \"width\", currentPoint, @widthPrim, \"set\");\n    }\n</code></pre>"},{"location":"houdini/basics/hou-vex/#vex-strings","title":"VEX strings","text":"GLSL<pre><code>// Build fileName_##.abc with variable\nint version = 1;\nstring fileName = sprintf('fileName_%02d.abc', version);\n// result: fileName_01.abc\n</code></pre>"},{"location":"houdini/basics/hou-vex/#find-closest-points","title":"Find closest points","text":"GLSL<pre><code>float maxdist = 0.8;\nint maxpoints = 10;\n\nint closept[] = pcfind(0, 'P', @P, maxdist, maxpoints);\n</code></pre>"},{"location":"houdini/basics/hou-vex/#randomize-file-name","title":"Randomize file name","text":"GLSL<pre><code>// Get random file from sim_A_01.abc, sim_B_01.abc, sim_C_01.abc\nstring variations[] = {'A','B','C'};\nint variationIndex = rint(fit(rand(@ptnum), 0, 1, 0, 2));\nstring path = sprintf('D:/PROJECTS/VEX/geo/sim_%s_01.abc', variations[variationIndex])\n</code></pre>"},{"location":"houdini/basics/hou-vex/#fade-grid-y-deformation-closer-to-border","title":"Fade grid Y deformation closer to border","text":"GLSL<pre><code>float objectSize = (getbbox_max(0).x + getbbox_max(0).z)/2;\nfloat dist = distance(0,@P);\nfloat offset = chf('offset');\nfloat fade = chramp('fade', fit(dist, 0, objectSize + offset, 0, 1));\n@P.y *= fade;\n</code></pre>"},{"location":"houdini/basics/hou-vex/#fade-noise-on-curves-with-ramp","title":"Fade noise on curves with ramp","text":"GLSL<pre><code>// Requires uvtexture SOP in \"Pts and Columns\" mode before this wrangle\n\n// Define UI controls\nfloat remap_uv = chramp('remap_uv', @uv.x);\nfloat power = chf('Noise_Power');\nfloat freq = chf('Noise_Frequency');\n\n// Create noise\nvector noiseXYZ = noise(@P*freq);\n// Modify noise values\nvector displace = fit(noiseXYZ, 0,1, -1, 1)*power*remap_uv;\n// Apply modified noise to a points position\n@P += displace;\n// Visualize fade ramp on curve\n@Cd = remap_uv;\n</code></pre>"},{"location":"houdini/basics/hou-vex/#rotate-geo-with-matrix-along-y-axis","title":"Rotate GEO with matrix along Y axis","text":"GLSL<pre><code>// Create rotation matrix\nmatrix3 matrx = ident();\n// Create angle control with UI\nfloat angle = radians( chf('angle') );\n// Define rotation axis\nvector axis = {0, 1, 0};\n\n//Rotate the matrix\nrotate ( matrx, angle, axis);\n\n// Apply rotation: multiply position by matrix\n@P *= matrx;\n</code></pre>"},{"location":"houdini/basics/hou-vex/#adjust-pivot-point-of-rotation-matrix","title":"Adjust pivot point of rotation matrix","text":"GLSL<pre><code>matrix3 matrx = ident();\nfloat angle = radians(36);\nvector axis = {1, 0, 0};\nvector pivot = {0, 2.56, 0};\n\nrotate ( matrx, angle, axis);\n@P = (@P - pivot) * matrx + pivot;\n</code></pre>"},{"location":"houdini/basics/hou-vex/#rotate-geo-with-quaternion-along-xyz-axys","title":"Rotate GEO with quaternion along XYZ axys","text":"GLSL<pre><code>// Setup angle control with UI\nfloat angle_X = radians(chf('angle_X'));\nfloat angle_Y = radians(chf('angle_Y'));\nfloat angle_Z = radians(chf('angle_Z'));\n\n// Apply rotation\nvector rotations = set(angle_X,angle_Y,angle_Z);\n@P = qrotate(quaternion(rotations), @P);\n</code></pre>"},{"location":"houdini/basics/hou-vex/#rotate-y-copies-with-quaternion-multiply","title":"Rotate Y COPIES with quaternion multiply","text":"GLSL<pre><code>@N;\n@up = {0,1,0};\n\n@orient = quaternion(maketransform(@N,@up));\nvector4 rotate_Y = quaternion(radians(ch('Rotate_Y')),{0,1,0});\n@orient = qmultiply(@orient, rotate_Y);\n</code></pre>"},{"location":"houdini/basics/hou-vex/#randomize-copies","title":"Randomize copies","text":"GLSL<pre><code>// Define orientation vectors\n@N;\n@up = {0,1,0};\n\n// Define random position values\nfloat randPos_X = fit01(rand(@ptnum), -ch('Translate_X'), ch('Translate_X'));\nfloat randPos_Y = fit01(rand(@ptnum), -ch('Translate_Y'), ch('Translate_Y'));\nfloat randPos_Z = fit01(rand(@ptnum), -ch('Translate_Z'), ch('Translate_Z'));\nvector randPos = set(randPos_X, randPos_Y, randPos_Z);\n\n// Define random rotation values\nfloat randRot_X = fit01(rand(@ptnum), -ch('Rotate_X'), ch('Rotate_X'));\nfloat randRot_Y = fit01(rand(@ptnum), -ch('Rotate_Y'), ch('Rotate_Y'));\nfloat randRot_Z = fit01(rand(@ptnum), -ch('Rotate_Z'), ch('Rotate_Z'));\n\n// Apply random positions\n@P += randPos;\n\n// Apply random rotations\n@orient = quaternion(maketransform(@N,@up));\nvector4 rotate_X = quaternion(radians(randRot_X),{1,0,0});\nvector4 rotate_Y = quaternion(radians(randRot_Y),{0,1,0});\nvector4 rotate_Z = quaternion(radians(randRot_Z),{0,0,1});\n@orient = qmultiply(@orient, rotate_X);\n@orient = qmultiply(@orient, rotate_Y);\n@orient = qmultiply(@orient, rotate_Z);\n\n// Apply random scale\n@scale = fit01(rand(@ptnum), chf('Scale_MIN'), chf('Scale_MAX'));\n</code></pre>"},{"location":"houdini/basics/hou-vex/#spiral","title":"Spiral","text":"GLSL<pre><code>float angle;\nvector pos = {0,0,0};\nint npoints = chi('number_of_points');\nfloat step = radians(ch('sweep'))/npoints;\n\nfor (int n=0; n&lt;npoints; n++) {\n    angle = step * n; // Or: angle += step;\n\n    pos.x = cos(angle);\n    pos.y = angle/10 ;\n    pos.z = sin(angle);\n\n    addpoint(0, pos);\n}\n</code></pre>"},{"location":"houdini/basics/hou-vex/#spiral-grow","title":"Spiral grow","text":"GLSL<pre><code>float angle;\nvector pos = {0,0,0};\nint npoints = chi('number_of_points');\nfloat step = radians(ch('sweep'))/npoints;\n\nfor (int n=0; n&lt;npoints; n++) {\n    angle = step * n;\n\n    pos.x = sin(angle) * angle;\n    pos.y = angle;\n    pos.z = cos(angle) * angle;\n\n    addpoint(0, pos);\n}\n</code></pre>"},{"location":"houdini/basics/hou-vex/#phylotaxis","title":"Phylotaxis","text":"GLSL<pre><code>int count = 400;\nfloat bound = 10.0;\nfloat tau = 6.28318530; // 2*$PI\nfloat phi = (1+ sqrt(5))/2; // Golden ratio = 1.618\nfloat golden_angle = (2 - phi)*tau; // In radians(*tau)\nvector pos = {0,0,0};\nfloat radius = 1.0;\nfloat theta = 0;\nint pt;\n\n\nvector polar_to_cartesian(float theta; float radius){\n    return set(cos(theta)*radius, 0, sin(theta)*radius);\n}\n\nfor (int n=0; n&lt;count; n++){\n    radius = bound * pow(float(n)/float(count), ch('power'));\n    theta += golden_angle;\n\n    pos = polar_to_cartesian(theta, radius);\n\n    // Create UP, pscale and N attr\n    pt = addpoint(0, pos);\n    setpointattrib(0, \"pscale\", pt, pow(radius,0.5));\n    setpointattrib(0, \"N\", pt, normalize(-pos));\n    setpointattrib(0, \"up\", pt, set(0,1,0));\n}\n</code></pre>"},{"location":"houdini/basics/hou-vex/#create-geometry-from-points-array","title":"Create geometry from points array","text":"GLSL<pre><code>float searchRadius = ch('searchRadius');\nint nearpnts[] = nearpoints(0, @P, searchRadius);\nforeach (int pnt;  nearpnts){\n    if(pnt != @ptnum){\n        int line = addprim(0, 'polyline');\n        addvertex(0, line, @ptnum);\n        addvertex(0, line, pnt );\n        }\n    }\n</code></pre>"},{"location":"houdini/basics/hou-vex/#algorithms","title":"Algorithms","text":""},{"location":"houdini/basics/hou-vex/#swap-variables","title":"Swap variables","text":"GLSL<pre><code>int varable_a = 256;\nint varable_b = 512;\n\nint swap = variable_a;\nvariable_a = variable_b;\nvariable_b = swap;\n\nprintf('variable_a = %s, variable_b = %s', variable_a, variable_b);\n// Result: variable_a = 512, variable_b = 256\n</code></pre>"},{"location":"houdini/basics/hou-vex/#reverse-array","title":"Reverse array","text":"GLSL<pre><code>int int_numbers[] = {1,2,3,4,5,6};\nint rversed[];\n\nfor(int i=0; i&lt;len(int_numbers)/2; i++){\n\n    int number_from_start = int_numbers[i];\n    int index_from_end = len(int_numbers)-i-1;\n\n    rversed[i] = int_numbers[index_from_end];\n    rversed[index_from_end] = number_from_start;\n    }\n\nprintf('%s', rversed);\n// Result: {6, 5, 4, 3, 2, 1}\n</code></pre>"},{"location":"houdini/basics/hou-vex/#choise-sort","title":"Choise sort","text":"GLSL<pre><code>int numbers[] = array(0,4,3,2,1);\n\nfor(int i=0; i&lt;len(numbers)-1; i++){\n    for(int n=i+1; n&lt;len(numbers); n++){\n        if(numbers[i]&gt;numbers[n]){\n\n            int swap = numbers[i];\n            numbers[i] = numbers[n];\n            numbers[n] = swap;\n        }\n    }\n}\n\nprintf('Array = %s\\n', numbers);\n// Result: Array  = {0, 1, 2, 3, 4}\n</code></pre>"},{"location":"houdini/basics/hou-vex/#bubble-sort","title":"Bubble sort","text":"GLSL<pre><code>int numbers[] = array(0,4,3,2,1);\n\nfor(int i=1; i&lt;len(numbers); i++){\n    for(int n=0; n&lt;len(numbers)-i; n++){\n        if(numbers[n]&gt;numbers[n+1]){\n\n            int swap = numbers[n];\n            numbers[n] = numbers[n+1];\n            numbers[n+1] = swap;\n        }\n    }\n}\n\nprintf('Array = %s\\n', numbers);\n// Result: Array  = {0, 1, 2, 3, 4}\n</code></pre>"},{"location":"houdini/basics/hou-vex/#longest-common-prefix","title":"Longest common prefix","text":"GLSL<pre><code>// Leetcode #14:  Longest Common Prefix\n\nstring names[] = array('floor', 'flower', 'flight');\nstring prefix;\n\nfor(int i=1; i&lt;len(names); i++){\n    for(int n=0; n&lt;len(names[i]) ;n++){\n\n        if(names[i][n] != names[0][n]){\n            break;\n        }\n\n        prefix = names[i][0:n+1];\n\n    }\n}\n\nprintf('The common prefix is: %s\\n', prefix);\n</code></pre>"},{"location":"houdini/dops/dop-opencl/","title":"OpenCL","text":""},{"location":"houdini/dops/dop-opencl/#tips","title":"Tips","text":"<ul> <li>Pyro &amp; Grains can make use of OpenCL</li> <li>OpenCL fallsback to CPU OpenCL when GPU runs out of memory</li> <li>Do LookDev with OpenCL bc solvers are slightly different than CPU ones</li> <li>Flip doesn't utilize OpenCL as much</li> <li>Grains - Increase number of iterations to 200 as a starter</li> <li>Pyro - have to be careful with sourcing as that triggers GPU-CPU xfers which might dwarf benefits of OpenCL</li> </ul>"},{"location":"houdini/dops/dop-opencl/#minimize-gpu-cpu-transfers","title":"Minimize GPU-CPU transfers","text":"<ul> <li>Make sure to turn off DOP Caching in the dopnet node bc caching copies all the fields every frame</li> <li>Only import minimal fields (eg density) to SOPs so you only have one field</li> </ul>"},{"location":"houdini/dops/dop-opencl/#gas-upres","title":"Gas Upres","text":"<ul> <li>Does not have built-in OpenCL toggle</li> <li>Dive into the node network and toggle Use OpenCL for all the advection nodes</li> <li>Dissipate doesn't have a built-in OpenCL node so use $HPSITE/ocl/sim/dissipate_upres.cl</li> </ul>"},{"location":"houdini/dops/overview/","title":"Dops","text":"<ul> <li>Simulation runs in 2 passes</li> <li>The First Pass creates all the data needed for the simulation</li> <li>The Second Pass passes the data to the DOP parser which then has the various solvers perform the simulation</li> <li>The two passes are run for each time step</li> <li>The First Pass always starts at the node where the display flag is active</li> <li>It then goes up each node and determines all the dependencies between different object and solvers</li> <li>It then goes back down the network and fills in all the data for the simulation</li> <li>The Details View will show a snapshot of the AutoDOPNetwork just prior to the simulation being run for the specific time step</li> </ul>"},{"location":"houdini/dops/overview/#volume-dynamics","title":"Volume Dynamics","text":"<ul> <li>Source attributes like density, color, temp using points. (Lagrangian approach vs eularian)</li> <li>Pyrosource node imports that to create a volume</li> <li>Attribute Noise to add noise</li> <li>Volume rasterize to rasterize the points into volume</li> <li>DOP network to simulate</li> <li>DOP IO node to import the dop fields and visualize</li> </ul>"},{"location":"houdini/dops/overview/#nodes","title":"Nodes","text":"<ul> <li>Volume Visualize</li> <li>Volume Trails: For visualizing streamers</li> </ul>"},{"location":"houdini/dops/techniques/general-tips/","title":"General Tips","text":"<ul> <li>Division size for simulations 0.05 (5 cm)</li> </ul>"},{"location":"houdini/dops/techniques/upres/","title":"Enable OpenCL","text":"<ul> <li>Dive into the node network and toggle Use OpenCL for all the advection nodes</li> <li>Dissipate doesn't have a built-in OpenCL node so use $HPSITE/ocl/sim/dissipate_upres.cl</li> </ul>"},{"location":"houdini/extensibility/hda/","title":"Houdini Digital Assets","text":"<p>HDAs are a bundle of functionality e.g. a module or library</p>"},{"location":"houdini/extensibility/hda/#parameters","title":"Parameters","text":"<p>Auto-import params</p> <ul> <li>Can import blocks of params from subnodes by using import blocks</li> <li>Mark folder param as import settings</li> <li>Mark attributes in subnode (like a Parms_HDA null node) as available for import</li> <li>Source: path to node. Ex: op:Parms_HDA</li> <li>Token: Entity to import from. Syntax:</li> <li>Folder =&gt; commonSettingsFolder:CommonSettingsFolderLable</li> <li>Importblock =&gt; importblock:commonImportBlockLabel</li> <li>Blank =&gt; imports everything</li> <li>Mask: import attributes matching this pattern</li> </ul>"},{"location":"houdini/extensibility/hda/#vex","title":"VEX","text":"<p>Structs</p> <ul> <li>You can expose them by adding a myCustomStruct.json type definition file</li> <li>File should be in <code>$HOUDINI\\_VOP\\_DEFINITIONS\\_PATH</code> (ex:<code>$HFS/vop/myStructs.json</code>)</li> <li>You can also define the structs in a header file and link it by adding <code>\"definitionCode\":\"#include &lt;dualrest.h&gt;\"</code></li> <li>Examples: <code>$HFS/houdini/vop/structs.json</code></li> <li>Schema is located <code>$HFS/houdini/vop/TypeDefinitions.json.schema</code></li> </ul> <p>Vex Profiling (Reference)</p> <ul> <li>command: <code>vexprofile -n -a start opcook /obj/geo1/v_mountain1 vexprofile &gt; /tmp/mountain.stats</code></li> </ul>"},{"location":"houdini/extensibility/hda/#ui","title":"UI","text":"<p>Handles</p> <ul> <li>Can expose handles by right click on operator and say promote to handle </li> <li>The movetool_candidate flag is used to indicate whether the handle can simply be changed to support one of the move tools (translate/rotate/scale).</li> <li>The ownerop setting specifies an alternate node whose space is used for the handle to operate in.</li> <li>The owneropgroup setting specifies the name of the group parameter on its owner node. This is used by the handle to know which geometry it should use to compute centroids for positioning itself.</li> </ul> <p>HDA</p> <ul> <li><code>help -k flags</code> or <code>help -k select</code></li> <li>Opset</li> <li>Kwargs[1] = full path of operator</li> </ul>"},{"location":"houdini/extensibility/hda/#tutorials","title":"Tutorials","text":"<ul> <li>HDA Building | Jeff Wagner | Houdini Illume Webinar</li> <li>HDA Building - Pt 2 | Jeff Wagner | Houdini Illume Webinar</li> <li>HDAs &amp; Houdini Engine | Jeff Wagner | Houdini Illume Webinar</li> </ul>"},{"location":"houdini/extensibility/hdk/","title":"Houdini Development Kit","text":"<p>HDK is Houdini's SDK, used to create C++ based plugins</p>"},{"location":"houdini/extensibility/hdk/#cuda","title":"CUDA","text":"<p>Linking cuda object files</p>"},{"location":"houdini/extensibility/hdk/#inline-c","title":"Inline C++","text":"<p>Use inlinecpp SOP wrangle to write inline C++ inside of the Houdini graph</p> <ul> <li>Can create inline C++ Python SOPS using inlinecpp (or C++ Wrangle)</li> <li>More details</li> </ul>"},{"location":"houdini/funtimes/fun-experiments/","title":"Fun Experiments","text":""},{"location":"houdini/funtimes/fun-experiments/#start-on-first","title":"Start on first","text":"<ul> <li>Melt</li> <li>Pyro To Flip surface</li> <li>Edge Displacement Shatter</li> <li>Ice Solver</li> </ul>"},{"location":"houdini/funtimes/fun-experiments/#fast","title":"Fast","text":"<ul> <li>Abstract FX</li> <li>https://vimeo.com/175936039/7f4fd9533b</li> <li>https://www.youtube.com/watch?time_continue=1016&amp;v=0-M4WhcmhI0</li> <li>https://vimeo.com/118441128</li> <li>https://vimeo.com/224462570</li> <li>https://vimeo.com/217150268</li> <li>https://www.youtube.com/watch?v=zrhXB653wKg</li> <li>https://vimeo.com/191264795</li> </ul>"},{"location":"houdini/funtimes/fun-experiments/#high-end","title":"High End","text":"<ul> <li>https://rebelway.net/mastering-pyro-fx-in-houdini</li> <li>https://www.cgcircuit.com/course/volume-rendering-using-houdini--arnold?affid=e245f471eae8980461f2286ce070ff396d6ffc54930aad03cf3d811923ff74900aff8e3de73a75c248b4ff557c8d5f8b12788af79c176c15116b82b6fabc2310</li> <li>http://www.cgsociety.org/training/course/introduction-to-fx-using-houdini1</li> </ul>"},{"location":"houdini/funtimes/fun-experiments/#thiev","title":"Thiev","text":"<ul> <li>Growth setup</li> <li>Curvature Growth setup</li> <li>Sphere Growth</li> <li>Triangle Growth</li> <li>Shortest path</li> <li>https://vimeo.com/226836922</li> <li>https://www.sidefx.com/tutorials/houdini-ice-solver</li> <li>http://www.aboutcg.org/course/tut_houdini-ice-blast-system_161124</li> <li>https://www.youtube.com/watch?v=ExbHO04P35g</li> <li>https://www.sidefx.com/forum/topic/47867</li> <li>http://behind.ikoon.cz</li> <li>https://www.youtube.com/watch?v=x2kMDuxd9J4</li> <li>https://www.youtube.com/watch?v=euG933INMTk</li> <li>Freeze bird</li> </ul>"},{"location":"houdini/funtimes/fun-experiments/#backlog-useful-links","title":"Backlog Useful Links","text":"<ul> <li>https://www.youtube.com/watch?v=U_-gGd6o70Y</li> <li>https://vimeo.com/102991992</li> <li>http://pepefx.blogspot.com/2015/08/how-to-create-magnetic-vector-field-in.html</li> <li>https://www.youtube.com/watch?v=NTyRq1UdG54&amp;t=4s</li> <li>https://vimeo.com/207921165</li> <li>https://www.sidefx.com/community/gdc2017-presentations</li> <li>http://forums.odforce.net/topic/20682-bsdf-bonanza-ggx-microfacets-disney-brdf-and-more</li> <li>https://www.patreon.com/Farmfield</li> <li>https://vimeo.com/particleskull</li> <li>http://wordpress.discretization.de/houdini</li> <li>http://www.rohandalvi.net/home</li> <li>https://vimeo.com/218926558</li> <li>https://vimeo.com/112711809f</li> <li>https://vimeo.com/147505813</li> <li>http://helloluxx.com/product/houdini-training-learn-jumpstart-vol-8-intro-to-lighting-rendering</li> </ul>"},{"location":"houdini/funtimes/geo-processing/","title":"Geo Processing","text":"<p>research-notes</p>"},{"location":"houdini/funtimes/hou-ar/","title":"AR","text":"<ul> <li>Integrate with 6D.ai</li> <li>Integrate with that siggraph live lighting</li> <li>Avatar creator on mobile</li> </ul>"},{"location":"houdini/funtimes/level/","title":"Levels","text":"<ul> <li>TrainSmash Level Activation</li> <li>Level Transition to Ice World with hextiles</li> <li>Snow bomb</li> <li>Force-field glass shatter fracture</li> </ul>"},{"location":"houdini/funtimes/performance-capture/","title":"Performance Capture","text":"<ul> <li>VSR</li> <li>Solve existing animation to control</li> <li>Animate in Desired SPace</li> <li>Constrain/Bakeout layered animation back to original control</li> <li>details     bake to world space captured     animate ctrl     constrain ctrl to target</li> <li>LiveLink into Houdini</li> <li>Mocap Data filtering</li> <li>Jitter/Noise Removal</li> <li>Smoothing</li> <li>Physical based simulation on-top of mocap animation</li> <li>Control Runtime Rig</li> <li>Constraint profile VR Posing of skeletal mesh</li> <li>Pose Blending</li> <li>Recrete aerobics viral clip: https://www.youtube.com/watch?time_continue=221&amp;v=4k-Dd71CqnM</li> </ul>"},{"location":"houdini/funtimes/visuals/","title":"Visuals","text":"<ul> <li>Character Upgrades</li> <li>Clothes<ul> <li>Leather Jacket</li> <li>JumpSuit</li> <li>Irridescent Car</li> </ul> </li> <li>Hair</li> <li>Rendering</li> <li>3D Stencil Island</li> <li>Volumetric</li> <li>Local Thickness</li> <li>Subsurface Scattering</li> <li>FX</li> <li>Portal</li> <li>DeepSpaceBana's Ice Shader</li> <li>Ivy overgrowth</li> </ul>"},{"location":"houdini/release-notes/17-0/","title":"17.0","text":""},{"location":"houdini/rendering/mantra/","title":"Mantra","text":"<p>Understanding Mantra: https://www.sidefx.com/docs/houdini/render/understanding.html</p>"},{"location":"houdini/rendering/redshift/","title":"Redshift","text":""},{"location":"houdini/rendering/redshift/#compositing-equation","title":"Compositing Equation","text":"<ul> <li><code>Beauty = DiffuseFilter_DiffuseLightingRaw + DiffuseFilter_GlobalIlluminationRaw + DiffuseFilter*SubsurfaceScatteringRaw + SpecularLighting + Reflections + Refractions + Emission + Caustics</code></li> <li>If using \"Caustics Raw\" instead of \"Caustics\", these would have to also be multiplied by \"Diffuse Filter\".</li> <li>Redshift Doc</li> <li>Volume AOVs</li> <li>Multiply the primary AOV composite by the Volume Fog Tint AOV<ul> <li>Volume Fog Tint AOV is a multiplicative layer/volume transmittance</li> </ul> </li> <li>Add the Volume Lighting AOV to the primary AOV composite.<ul> <li>Additive layer that contains only the volume lighting information</li> </ul> </li> <li>Add the Volume Fog Emission AOV to the primary AOV composite.<ul> <li>Additive layer that contains only the emission component</li> </ul> </li> </ul>"},{"location":"houdini/rendering/redshift/#volume-rendering","title":"Volume Rendering","text":"<ul> <li>If want to make volume darker but preserve approximate intensity, adjust scatter and absorption coefficients together</li> <li>use the \"Scatter Tint\" to adjust the overall color of the volume</li> <li>advanced manipulation of scattering can happen vie the scatter color ramp to remap density to different color</li> <li>Absorption also can be remapped. Its a scalar as it's conceptually remapping opacity</li> </ul> <code>Scatter=5</code>,<code>Absorption=5</code> <code>Scatter=10</code>,<code>Absorption=10</code> <code>Scatter=10</code>,<code>Absorption=5</code> <code>Scatter=3</code>,<code>Absorption=3</code>,<code>ScatterTint=White</code> <code>Scatter=3</code>,<code>Absorption=3</code>,<code>ScatterTint=Blue</code>"},{"location":"houdini/techniques/baking/","title":"Baking","text":"<ul> <li>Bake Volume: Can bake volume scattering effects from single pointlight onto a set of points</li> </ul>"},{"location":"houdini/techniques/common-tech/","title":"Common Techniques","text":"<ul> <li>Convert Splines to Geo: Polyline or wire node</li> <li>Convert Polygon to Volume</li> <li>Use GameDev Voxel Mesh Node: Creates watertight mesh</li> <li>Use VDB From Polygons Node: Needs watertight mesh</li> <li>Convert Volume to Polygon:</li> <li>Convert VDB: Convert to=polygons</li> <li>Convert Volume to surface/isosurface/sdf:</li> <li>Convert VDB: VDB Class: Fog -&gt; SDF</li> <li>VDB Topology to SDF: will create shrink wrapped sdf around active vdb nodes. By definition, will create water tight meshes</li> </ul>"},{"location":"houdini/techniques/common-tech/#useful-nodes","title":"Useful Nodes","text":"Node Description Draw Curve Allows you to draw curve and on projected geometry Rotoshape Allow to rotoscope image files Polyframe Generate frames along curves, Mikkt Tangents, etc. Connectivity Generates mesh connectivity information so you can grab /destroy mesh islands Cookie Create outline of intersection of one geo onto another (useful for getting silhouette curve of geo on a plane) Point Deform Computes delta xform between two point clouds (with or without connectivity) and applies it as a lattice deformation to object. Useful for applying deformation from animation onto something you computed at frame 1 (like a silhouette) BlendPose CHOP This does a blendpose solve along the lines of Point Deform. Look at BlendPose Basic example Cloth Capture Assignes weights of a low res different topology mesh on higher resolution mesh. Can use this to convert blend shapes to bones Capture Attribute Pack/Unpack Allows capture attributes to be accessible to vex Skin Surface Create skin patch from curvese Dissolve Remove points but hole fill Shrink Wrap The Shrinkwrap operation computes the convex hull of the input geometry using the same method as Tetrahedralize, and translates the resultant polygonal primitives inwards along their normals.Unlike the Peak SOP, which takes the point and moves it according to the average of the neighboring polygons, Shrinkwrap moves the polygons and recomputes their intersections, possibly creating new and removing old points, but maintaining polygon normal directions. Peak/Soft Peak Move points along their normal to contract/dilate mesh Ray Project Geo onto another for attribute transfer Carve Automatically can cut geo/paths along u,v Fall-off Compute fall-off over surface with using either geodesic, or cartesian falloff Rest Creates an attribute which causes material textures to stick to surfaces deformed using other operations. Magnet + Metaball Offset/deform points/curves based on scaling of a metaball sphere Ray Can use it to project curves to geometry  Pointsfromvolume Generate points inside a volume. You can also connect use Scatter SOP + vdb input"},{"location":"houdini/techniques/common-tech/#poly-clean-up","title":"Poly Clean Up","text":"<ul> <li>Workflow   1. Roundtrip: Polymesh to vdb back to polygons to remove small interior triangles   2. PolyDoctor (better version of clean) to detect mesh issues   3. Run instantmeshes to quadrangulate   4. PolyReduce to reduce down topology   5. Divide to triangulate</li> <li>Workflow Alt</li> <li>Remesh =&gt; to create uniform triangle sizes of everything</li> </ul> Node Description PolyDoctor Clean up/visualize problem polys/re-orient winding order Remesh Re-topologize InstantMeshes (custom) Use instant-remesher PolyReduce Reduce poly Polydeform Warp one mesh to another Divide Triangulate. Bricker option ensures uniform internal division of points Clean Clean-up bad geo UV Unwrap UV Flatten UV Layout UV Visualize Visualize UV seams and islands"},{"location":"houdini/techniques/common-tech/#chops","title":"Chops","text":"Node Description Envelope/Filter Use in chops to allow you to operate on a local window aka convolutions Geometry chop Import geo attributes into channels Channel sop import channels into geo attributes Slope Calculate 1<sup>st</sup>, 2<sup>nd</sup>, 3<sup>rd</sup> derivatives (velocity, acceleration, jerks) Trigger Analysis of peaks using attack/decay/sustain/release ADSR envelope. Trigger occurs when 1<sup>st</sup> input increases across trigger threshold"},{"location":"houdini/techniques/common-tech/#cops","title":"COPS","text":"Node Description GeoKey Isolate based on geo attribute data"},{"location":"houdini/techniques/detangle/","title":"Detangling wires","text":"<ul> <li>Rest position node: Add to initial tangled/overlapping splines</li> <li>for_loop: iteration count is strength of detangling</li> <li>Detangle node</li> </ul>"},{"location":"houdini/techniques/geo-deformation/","title":"Geo Deformation","text":""},{"location":"houdini/techniques/geo-deformation/#deform-by-point","title":"Deform by point","text":"<ul> <li>BlendPose Chop</li> <li>ClothCapture</li> <li>Point Deform</li> <li>Attribute Capture Pack/Unpack</li> <li>Attribute Interpolate: Allow to deform attributes based on base capture</li> </ul>"},{"location":"houdini/techniques/misc-useful/","title":"Misc Useful","text":""},{"location":"houdini/techniques/misc-useful/#useful-techniques","title":"Useful Techniques","text":"<ul> <li>Advent bubbles in volume</li> <li>Flow lines over surface</li> <li>Surface Based Growth Using Carve and FindShortestPath</li> <li>Growth Propagation In Houdini</li> <li>Geometry based vectorfield shaping for smoke simulations with vex</li> </ul>"},{"location":"houdini/techniques/misc-useful/#cool-special-fx","title":"Cool Special FX","text":"<ul> <li>Dancing Particle Madness in Houdini with Mixamo Animation</li> <li>Houdini DA - Propagate, Reveal &amp; Transform</li> <li>Frozen efect</li> <li>Houdini Sculpture Turning FX</li> <li>Houdini pyro colored smoke mixing (project file included)</li> <li>Houdini + Redshift Volumetric Rendering Test</li> <li>Houdini Stylized Culling Destruction With Reference Destruction</li> <li>Houdini Test: Swirly Trails Tree</li> <li>4D MONKEY DUST</li> <li>Aelib Houdini Library: Hypercube and 4D Deformers</li> </ul>"},{"location":"houdini/techniques/misc-useful/#backlog-useful-links","title":"Backlog Useful Links","text":"<ul> <li>https://www.sidefx.com/tutorials/applied-houdini-dynamics-i-introduction-to-volume-simulation-and-rendering</li> <li>https://www.sidefx.com/tutorials/tag/smoke</li> <li>https://www.pluralsight.com/courses/creating-cloudscape-houdini-2032</li> <li>https://vimeo.com/bwdesign/videos/page:2/sort:date</li> <li>https://vimeo.com/126886471</li> <li>https://vimeo.com/207921165</li> <li>http://www.toadstorm.com/blog/?cat=30</li> <li>http://www.toadstorm.com/blog/?p=465#more-465</li> <li>https://letshoudini.wordpress.com/page/5</li> <li>http://forums.odforce.net/topic/25909-how-to-add-continuously-generated-geometry-into-simulation</li> <li>https://docs.scipy.org/doc/numpy-dev/user/quickstart.html</li> <li>http://gohoudini.net/sandbox</li> <li>https://fgiesen.wordpress.com/2011/07/10/a-trip-through-the-graphics-pipeline-2011-part-8</li> <li>https://www.pinterest.com/pin/417286721706809557</li> <li>https://vimeo.com/172769430</li> <li>https://dailyhip.wordpress.com/page/4</li> <li>https://www.sidefx.com/tutorials/h16-game-shelf-tools-pivot-painter</li> <li>https://www.sidefx.com/tutorials/houdini-game-dev-tools-auto-uvs</li> <li>https://www.sidefx.com/tutorials/houdini-game-dev-tools-instant-meshes-bridge</li> <li>https://www.sidefx.com/tutorials/houdini-game-dev-tools-procedural-edge-loopsgroup-expandcontract</li> </ul>"},{"location":"houdini/techniques/poly-workflow/","title":"Poly Workflow","text":""},{"location":"houdini/techniques/poly-workflow/#water-tight-mesh","title":"Water Tight Mesh","text":"<ul> <li>GameDev Voxelize Mesh</li> <li>VDB SDF Reshape: Close - Causes holes &amp; valleys to be filled</li> <li>VDB SDF Reshape: Open - Causes isolated islands to erase</li> <li>VDB Segment By Connectivity: Can be used to get rid of islands</li> </ul>"},{"location":"houdini/techniques/poly-workflow/#remeshing","title":"Remeshing","text":"<p>Here are useful nodes</p> <ul> <li>Subdivide</li> <li>Remesh</li> <li>InstantMeshes</li> <li>Divide</li> </ul>"},{"location":"houdini/techniques/poly-workflow/#poly-cleanup","title":"Poly Cleanup","text":"<p>Houdini Game Dev Toolset tutorial by Michael Pavlovich</p> <ol> <li>GameDev Delete Small Parts: delete small parts</li> <li>GameDev Voxelize Mesh: create water tight mesh and remove internal geo    - Internally this does VDB SDF Reshape and converts back to poly</li> <li>Two Approaches for Generating GameRes Geo</li> <li>PolyReduce nodes<ol> <li>PolyReduce: reduce polygons</li> <li>PolyDoctor: better version of Divide+Clean nodes<ul> <li>Repair Ill-Formed (aka degenerate prims)</li> <li>Repair 5+ edges</li> <li>Repair Non-Convex</li> <li>Repair Non-Manifold points</li> <li>Old nodes</li> <li>Divide**:** Triangulate generated triangles<ul> <li>Convex polygons</li> <li>Don't generate slivers</li> <li>Avoid slivers</li> </ul> </li> <li>Clean<ul> <li>Remove Degenerate Prims</li> <li>Fix Overlaps</li> <li>Remove Unused Points</li> <li>Manifold-Only Topology</li> </ul> </li> </ul> </li> </ol> </li> <li>Instant Mesh: generate clean topology</li> <li>GameDev AutoUV: generate UVs    - GameDev UV Visualize: visualize UVs    - GameDev Mark Seams + UV Flatten: can explicitly specify where seams should be</li> <li>Normal: generate vertex normals</li> </ol>"},{"location":"houdini/techniques/pyroclastic-noise/","title":"Pyroclastic Noise","text":"<p>https://forums.odforce.net/topic/12923-pyroclastic-noise-demystified/</p>"},{"location":"houdini/techniques/tutorials-from-others/","title":"Houdini Tutorials From Others","text":""},{"location":"houdini/techniques/tutorials-from-others/#useful-websites","title":"Useful Websites","text":"<ul> <li>Tokeru Houdini</li> <li>Houdini Vex</li> <li>Houdini Python</li> <li>FX Thinking</li> <li>iHoudini</li> <li>Qiita</li> <li>Ryoji</li> <li>HoudiniHowtos from jhorikawa: focuses on algorithmic/mathematical approach + parametric/procedural design</li> <li>github repo</li> <li>wirginia's Houdini's Notes On Things: fantastic collection of notes and example scenes</li> <li>vimeo</li> <li>Think Procedural Discord</li> <li>Houdini Academy &amp; Resources Discord</li> </ul>"},{"location":"houdini/techniques/tutorials-from-others/#video-tutorials","title":"Video Tutorials","text":"<ul> <li>Peter Quint</li> <li>Rohan Dalvi</li> <li>Ben Watts Design</li> <li>Yancy Lindquist</li> <li>Contained Liquids</li> <li>Moving Fem Thing</li> <li>Dent By Rigid Bodies</li> <li>Animating Font Profiles</li> <li>Guillaume Fradin's Mocap Crowd Series(no longer available)</li> <li>Swirly Trails Over Surface</li> <li>Atom's Video Tutorials</li> <li>Short and sweet OP centric lessons</li> <li>Entagma</li> <li>SideFX Go Procedural</li> </ul>"},{"location":"houdini/techniques/tutorials-from-others/#odforce-tutorials","title":"ODForce Tutorials","text":"<p>Compiled by Atom on odforce</p> <ul> <li>Displaced UV Mapped Tubes</li> <li>Particles Break Fracture Glue Bonds</li> <li>Render Colorized Smoke With OpenGL Rop</li> <li>Moon DEM Data Creates Model Python Script</li> <li>Make A Belly Bounce</li> <li>Helicopter Dust Effect</li> <li>Conform Design To Surface</li> <li>Benjamin Button Intro Sequence UV Style Mapping</li> <li>UV Box and Multiple Projection Styles</li> <li>Ping Pong Frame Expression</li> <li>Instance vs. Copy (Instance Is Faster)</li> <li>Particle Bug Swarm Over Vertical and Horizontal Geometry</li> <li>Rolling Cube</li> <li>Rounded Plexus Style Effect</li> <li>Pyro Smoke UpRes</li> <li>Smoke Trails From Debris</li> <li>Align Object Along Path</li> <li>Fading Trail From Moving Point</li> <li>Swiss Cheese VDB To Polygons</li> <li>Get Rid Of Mushroom Shape In Pyro Sim</li> <li>A Tornado</li> <li>Ball Of Yarn</li> <li>Particles Erode Surface</li> <li>Unroll Paper</li> <li>Burrow Under Brick Road</li> <li>Non Overlapping Copies</li> <li>Build Wall Brick-By-Brick</li> <li>FLIP Fluid Thin Sheets</li> <li>Smoke Colored Like Image</li> <li>Volumetric Spotlight</li> <li>Moving Geometry Using VEX</li> <li>Matt's Galaxy</li> <li>Diego's Vortex Cloud</li> <li>Loopable Flag In Wind</li> <li>Eetu's Lab \u2190Must See!</li> <li>Wolverine's Claws (Fracture By Impact)</li> <li>Houdini To Clarisse OBJ Exporter</li> <li>Skrinkwrap One Mesh Over Another</li> <li>Differential Growth Over Surface</li> <li>PYTHON: Post Process OBJ Re-Write Upon Export</li> <li>Rolling Clouds</li> <li>Ramen Noodles</li> <li>Basic Fracture Extrude</li> <li>Match Primitive Number To Point Number</li> <li>Grains Activate In Chunks</li> <li>Fracture Wooden Planks</li> <li>Merge Two Geometry Via Modulus</li> <li>Fill Font With Fluid</li> <li>DNA Over Model Surface</li> <li>VDB Morph From One Shape To Another</li> <li>Bend Font Along Curve</li> <li>Ripple Obstacle Across 3D Surface</li> <li>Arnold Style Light Blocker</li> <li>Sphere Dripping Water (cool)</li> <li>Exploded View Via Name Attribute</li> <li>VEX Get Obj Matrix Parts</li> <li>eetu's inflate cloth</li> <li>Ice Grows Over Fire</li> <li>Flying Bird As Particles</li> <li>DEM Image To Modeled Terrain</li> <li>Pyro Temperature Ignition</li> <li>Extrude Like Blender's Bevel Profile</li> <li>Particles Flock To And Around Obstacles</li> <li>BVH Carnegie Mellon Mocap Tweaker (python script)</li> <li>Rolling FLIP Cube</li> <li>Crowd Agents Follow Paths</li> <li>Keep Particles On Deforming Surface</li> <li>Particle Beam Effect</li> <li>Bendy Mograph Text Font Flay Technique</li> <li>Curly Abstract Geometry</li> <li>Melt Based Upon Temperature</li> <li>Large Ship FLIP Wake (geo driven velocity pumps)</li> <li>Create Holes In Geo At Point Locations</li> <li>Cloth Blown Apart By Wind</li> <li>Cloth Based Paper Confetti</li> <li>Denim Stitching For Fonts</li> <li>Model A Raspberry</li> <li>Crumple Piece Of Paper</li> <li>Instanced Forest Floor Scene</li> <li>FLIP pushes FEM Object</li> <li>Animated Crack</li> <li>Colorize Maya nParticles inside an Alembic</li> <li>Path Grows Inside Shape</li> <li>Steam Train Smoke From Chimney</li> <li>Using Buoyancy Field On RBDs In FLIP Fluid</li> <li>Fracture Along A Path</li> <li>COP Based Comet Trail</li> <li>eetu's Raidal FLIP Pump Drip Down Sides</li> <li>A Simple Tornado Point Cloud</li> <li>Dual Colored Smoke Grenades</li> <li>Particles Generate Pyro Fuel</li> <li>Stick RBDs To Transforming Object</li> <li>Convert Noise To Lines</li> <li>Cloth Weighs Down Wire (with snap back)</li> <li>Create Up Vector For Twisting Curve (i.e. loop-d-loop)</li> <li>VDB Gowth Effect</li> <li>Space Colonization Zombie</li> <li>L-System Vine Growth Over Trunk</li> <li>FLIP Fluid Erosion Of GEO Surface</li> <li>Vein Growth And Space Colonization</li> <li>Force Only Affects Particle Inside Masked Area</li> <li>Water Ball</li> <li>External Velocity Field Changes POP particle direction</li> <li>Bullet-Help Small Pieces Come To A Stop</li> <li>Lightning Around Object Effect</li> <li>Lightning Lies Upon Surface Of Object</li> <li>Fracture Reveals Object Inside</li> <li>Nike Triangle Shoe Effect</li> <li>Smoke Upres Example</li> <li>Julien's 2011 Volcano Rolling Pyroclastic</li> <li>FLIP Fluid Shape Morph (with overshoot)</li> <li>Object Moves Through Snow Or Mud</li> <li>Scene As Python Code</li> <li>Ramp Scale Over Time Tiggered By Effector</li> <li>Lattice Deforms Volume</li> <li>Continuous Geometric Trail</li> <li>Gas Enforce Boundary</li> <li>Mantra 2D And 3D Velocity Pass</li> <li>Monte Carlo Scatter Fill A Shape</li> <li>Crowd Seek Goal Then Stop</li> <li>A Bunch Of Worms</li> <li>Potential Field Lines Around Postive and Negative Charges</li> <li>Earthquake Wall Fracture</li> <li>Instance Animated Geometry (multiple techniques)</li> <li>Flip Fluid Attracted To Geometry Shape</li> <li>Wrap Geo Like Wrap3</li> <li>Polywire or Curve Taper</li> <li>Number Of Points From Second Input (VEX)</li> <li>Bullet Custom Deformable Metal Constraint</li> <li>Torn Paper Edge</li> <li>Deflate Cube</li> <li>Rotate, Orient and Alignment Examples</li> <li>3D Lines From 2D Image (designy)</li> <li>Make Curves In VEX</li> <li>Avalanche Smoke Effect</li> <li>Instant Meshes (Auto-Retopo)</li> <li>Duplicate Objects With VEX</li> <li>Polywire Lightning</li> <li>VEX Rotate Instances Along Curved Geometry</li> <li>Dual Wind RBD Leaf Blowing</li> <li>Automatic UV Cubic Projection (works on most shapes)</li> <li>RBD Scatter Over Deforming Person Mesh</li> <li>FLIP Through Outer Barrier To Inner Collider (collision weights)</li> <li>REDSHIFT: Ground Cover Instancing Setup</li> <li>REDSHIFT: Volumetric Image Based Spotlight</li> <li>REDSHIFT: VEX/VOP Noise Attribute Planet</li> <li>REDSHIFT: Blood Cell Blood Vessel Blood Stream</li> <li>REDSHIFT: Light Volume By Material Emission Only</li> <li>REDSHIFT: Python Script Images As Planes (works for Mantra Too!)</li> <li>REDSHIFT: MTL To Redshift Material</li> <li>REDSHIFT: Access CHOPs In Volume Material</li> <li>REDSHIFT: Mesh Light Inherits Color</li> <li>REDSHIFT: Color Smoke</li> <li>REDSHIFT: FBX Import Helper</li> <li>REDSHIFT: Terrain Instancer Height Field By Feature</li> <li>Dragon Smashes Complex Fractured House (wood, bricks, plaster)</li> <li>Controlling Animated Instances</li> <li>Road Through Height Field Based Terrain</li> <li>Tire Tread Creator For Wheels</li> <li>Make A Cloth Card/Sheet Follow A NULL</li> <li>Eye Veins Material</li> <li>Matt Explains Orientation Along A Curve</li> <li>Mesh Based Maelstrom Vortex Spiral</li> <li>Emit Multiple FEM Objects Over Time</li> <li>Pushing FEM With Pyro</li> <li>Spiral Motion For Wrangle</li> <li>Emit Dynamic Strands Pop Grains</li> <li>Slope, Peak and Flat Groups For Terrains</li> <li>Install Carnegie Mellon University BVH Mocap Into MocapBiped1</li> <li>Ramp Based Taper Line</li> <li>Fast Velocity Smoke Emitter</li> <li>Flip Fill Cup Ice Cubes Float</li> <li>PYTHON: Export Houdini Particles To Blender .bphys Cache Format</li> <li>Collision Deform Without Solver or Simulation</li> <li>Mograph Lines Around Geometry</li> <li>Waffle Cornetto Ice Cream Cone</li> <li>Ice Cream Cone Top</li> <li>Unroll Road Or Carpet</li> <li>Burning Fuse Ignites Fuel or Painted Fuel Ignition</li> <li>Painted Fuel Combustion</li> <li>Small Dent Impact Deformation</li> <li>Particle Impact Erosion or Denting Of A Surface</li> <li>Helicopter Landing Smoke And Particles</li> <li>Radial Fracture Pieces Explode Outwards Along Normal</li> <li>Tangent Based Rocket Launch Rolling Smoke Field</li> <li>Tear/Rip FLIP (H12 still works in H16)</li> <li>Rain Flows Over Surface</li> <li>Rains Water Drip Surface Splash</li> <li>Smoke Solver Tips &amp; Tricks</li> <li>Folding Smoke Sim</li> <li>VEX Generated Curve For Curling Hair</li> <li>Copy and Align One Shape Or Object To The Primitives Of Another Object (cool setup)</li> <li>A Better Pop Follow Curve Setup</li> <li>FEM Sea Cucumber Moves Through Barrier</li> <li>Fracture Cloth</li> <li>Smoke Confinement Setup</li> <li>Merge multiple .OBJ directly Into A Python Node</li> <li>Blood In Water</li> <li>Smoke Dissipates When Near Collision Object</li> <li>Whirlpool Mesh Surface</li> <li>Whirlpool Velocity Motion For FLIP</li> <li>Simple Bacteria</li> <li>Single Point Falling Dust Stream</li> <li>Flames Flow Outside Windows</li> <li>Gas Blend Density Example</li> <li>Localized Pyro Drag (smoke comes to a stop)</li> <li>Granular Sheet Ripping</li> <li>Post Process An Export (Post Write ROP Event)</li> <li>Corridor Ice Spread or Growth</li> <li>Set Velocity On Pieces When Glue Bonds Break</li> <li>Water Drops Along Surface Condensation Bottle</li> <li>Grains Snow or Wet Sand Starter Scene</li> <li>A Nice Little Dissolver</li> <li>Turn An Image Into Smoke</li> <li>Fading Ripples Grid Example</li> <li>Stranger Things Wall Effect Face Through Rubber Wall</li> <li>PYTHON: Create Nurbs Hull Shelf Tool</li> <li>PYTHON: Ramp Parameter</li> <li>Select Outside Points Of Mesh, Honor Interior Holes</li> <li>Sparks Along Fuse With Smoke</li> <li>Umbrella Rig</li> <li>Melt FLIP UVs</li> <li>Tire Burn Out Smoke Sim</li> <li>Flip or Pyro Voxel Estimate Expression</li> <li>Motorcycle or Dirt Bike Kicks Up Sand Particles</li> <li>Push Points Out Of A Volume</li> <li>(PYTHON: Cellular Automata Cave Generator</li> <li>Punch Dent Impact Ripple Wrinkle</li> <li>VEX Rotate Packed Primitive Via Intrinsic</li> <li>Kohuei Nakama's Effect</li> <li>FLIP Fluid Inside Moving Container</li> <li>Particles Avoid Metaball Forces</li> <li>FLIP Divergence Setup</li> <li>FLIP Transfer Color Through Simulation To Surface</li> <li>Morph Between Two Static Shapes As Pyro Emits</li> <li>Constraint Based Car Suspension</li> <li>Pyro Smoke Gas Disturbs Velocity</li> <li>Wire Solver Random Size Self Colliding Cables</li> <li>Fast Cheap Simple Collision Deform</li> <li>CHOP Based Wobble For Animated Character</li> <li>Slow Motion FLIP Whaitewater</li> <li>Avoid Stepping In Fast Pyro Emission</li> <li>FLIP Fluid Fills Object</li> <li>Epic Share Of Softbody/Grain Setups (Must see!) Balloon, Pizza, Sail, Upres Shirt, Paint Brush</li> <li>Create Pop Grain Geometry On-The-Fly In A DOPs Solver</li> <li>Varying Length Trails</li> <li>VEX Based Geometry Transform</li> <li>Determine Volume Minimum and Maximum Values</li> <li>Grain Upres Example</li> <li>Animated pintoanimation For Cloth Sims</li> <li>Batch Render Folder Of OBJ files</li> <li>Vellum Weaving Cloth Fibers Knitting</li> <li>Kaleidoscopic Geometry</li> <li>UV Image Map To Points Or Hair Color</li> <li>Particles Like Trapcode Particular</li> <li>Flat Tank Boat Track With Whitewater</li> <li>Orthographic Angle Font Shadow</li> <li>Select Every Other Primitive or Face?</li> <li>Printer Spits Out Roll Of Paper</li> <li>Unroll Paper, Map, Plans, Scroll</li> <li>Simple Vellum L-System Plant</li> <li>Basic Cancer Cell</li> <li>2D Vellum Solution</li> <li>Vellum Animated Zero Out Stiffness To Emulate Collapse</li> <li>Whitewater On Pre Deformed Wave</li> <li>PYTHON: Menu Callback Change Node Color</li> <li>Extruded Voronoi With Scale Effector</li> <li>Multi Material RBD Building Fracture House Collapse</li> <li>Spin Vellum Cloth Whirlpool Vortex</li> <li>Use Google To Discover Attached HIP Files</li> </ul>"},{"location":"houdini/techniques/visualize-debugging/","title":"Debug Visualization","text":""},{"location":"houdini/techniques/visualize-debugging/#volumes","title":"Volumes","text":"<ul> <li>General Visualize Node: Another way to vizualize volume slices</li> <li>Can show text</li> <li>Visualize Volume QL: Another way to vizualize volume slices</li> <li>Volume Trail: Visualize streamers in volumes</li> <li>Volume Slice: visualize slice of volume</li> </ul>"},{"location":"houdini/vellum/overview/","title":"Vellum Overview","text":"<ul> <li>Position Based Dynamics solver</li> <li>3 Nodes: Vellum Constraint + Solver + PostProcess</li> <li>Different built-in constraints: length, distance, volume preserve, cloth (stretch, twist, length)</li> <li>Can combine different constraints for different effects</li> <li>Softbody: Cloth + Struts</li> <li>Balloon: Cloth + Pressure</li> </ul>"},{"location":"houdini/vellum/overview/#nodes","title":"Nodes","text":"<ul> <li>Vellum Weld Points: Stitches vertices together and allows you to specify tensile stress</li> <li>Vellum PostProcess: Allows to blur the sim, detangle, remesh, etc</li> <li>Vellum Cloth:</li> </ul>"},{"location":"houdini/vellum/techniques/general-tips/","title":"General Vellum Tips","text":"<ul> <li>Add remesher or triangluate into your cloth mesh</li> <li>Edge Fracture: to add random pattern of tears</li> <li>Unwanted bounciness: Reduce Max Acceleration</li> <li>Attach To Geo: Use Rest Length Scale to 0.1 to snap things really close to the geo</li> <li>Compression Stiffness: If you set Thickness to 0.001, then increase Compression Stiffness to 100,000 to accommodate and to avoid folds smoothing out</li> <li>Constraint Iterations: Higher resolution cloth means you need higher constraint iterations</li> <li>Bend Plasticity: allows cloth to update rest length on its bend constraints as it deforms. Useful for denim or heavy fabrics</li> </ul>"},{"location":"houdini/vellum/techniques/general-tips/#settings","title":"Settings","text":"<ul> <li>Chiffon/Silk</li> <li>Cloth mesh edge length: 0.01 (remesh to this)</li> <li>Bend Stiffness: .0001</li> <li>Thickness: 0.001</li> <li>Rest Length: 0.94</li> <li>Compression Stiffness: 100,000</li> <li>Denim:</li> <li>Cloth mesh edge length: 0.01 (remesh to this)</li> <li>Bend Stiffness: 1</li> <li>Thickness: 0.001</li> <li>Rest Length: 0.94</li> <li>Compression Stiffness: 100,000</li> <li>Bend Plasticity<ul> <li>Low: 0.005</li> <li>High: 100</li> <li>Hardening: 10</li> </ul> </li> <li>Leather</li> <li>Cloth mesh edge length: 0.01 (remesh to this)</li> <li>Bend Stiffness: 1</li> <li>Thickness: 0.001</li> <li>Rest Length: 0.94</li> <li>Compression Stiffness: 10,000</li> </ul>"},{"location":"houdini/vellum/techniques/hair/","title":"Vellum Hair","text":""},{"location":"houdini/vellum/techniques/hair/#grooming","title":"Grooming","text":"<ul> <li>FFScatter Node to easily groom/comb fur (and short hair)</li> </ul>"},{"location":"houdini/vellum/techniques/tear-cloth/","title":"Vellum Cloth","text":"<ul> <li>Edge Fracture: to randomly split cloth geo</li> <li>Vellum Weld: to stitch the new separate geo together</li> <li>Configure tensile stress in here to determine tearing point</li> </ul>"},{"location":"houdini/vellum/techniques/useful-vellum-nodes/","title":"Useful Vellum Nodes","text":"Node Description Assemble Cleans up a series of break operations and creates the resulting pieces. Joins them together Exploded View Pushes geometry piece by piece. Useful for visualizing fractured geo"},{"location":"houdini/volumes/overview/","title":"Houdini Volumes","text":"<ul> <li>Old volumes use legacy volume primitive type</li> <li>Most everything that's new hotness uses OpenVDB</li> <li>VDB file grids are sparse</li> <li>Grid coordinates/indices is also defined in world space, irrespective of the volume primitives local transform</li> </ul>"},{"location":"houdini/volumes/techniques/dense-clouds/","title":"Dense Clouds","text":"<ul> <li>https://forums.odforce.net/topic/39475-dense-cloud-shader-wdas-cloud-hype/</li> </ul>"},{"location":"houdini/volumes/techniques/pyro/","title":"Pyro","text":""},{"location":"houdini/volumes/techniques/pyro/#redshift-rendering","title":"Redshift Rendering","text":"<ul> <li>Parameters:</li> <li>Scatter =&gt; color/diffuse</li> <li>Absorption =&gt; transparency</li> <li>Emission =&gt; heat</li> <li>First turn off \"smoke\" aka scatter/absorption by putting it to zero</li> <li>Lookdev heat/flame then go back and add smoke</li> <li>https://vimeo.com/311277986</li> <li>Change emission remap source range: 0 to max(heat) in vdb</li> <li>Keep remap target to 0 to 1</li> <li>Use ramp to do color changing</li> <li>Notes:<ul> <li>Hottest part of flame is dark</li> <li>Sharp Edge</li> </ul> </li> </ul>"},{"location":"houdini/volumes/techniques/realtime-clouds/","title":"Real-time Clouds","text":""},{"location":"houdini/volumes/techniques/realtime-clouds/#channel-lighting","title":"Channel Lighting","text":"<ul> <li>Attempt to bake directional fake lights to generate normals + volume normals</li> <li>https://realtimevfx.com/t/smoke-lighting-and-texture-re-usability-in-skull-bones/5339</li> </ul>"},{"location":"houdini/volumes/techniques/realtime-clouds/#particle-sampling","title":"Particle Sampling","text":"<ul> <li>Render volume texture sheet at various slices</li> <li>Use GPU particles to scatter throughout the volume and sample the animated textures</li> <li>Infilitrator breakdown: https://www.youtube.com/watch?v=Q_-LrvzhBhM</li> </ul>"},{"location":"houdini/volumes/techniques/useful-volume-nodes/","title":"Useful Volume Nodes","text":""},{"location":"houdini/volumes/techniques/useful-volume-nodes/#visualization","title":"Visualization","text":"<ul> <li>Visualize</li> <li>Volume Slice</li> <li>Volume Visualization: Make an OpenGL viewable version of the volume</li> </ul>"},{"location":"math/cliff-notes/","title":"Cliff Notes","text":"<p>Condensed Cheatsheet/mnemonics of stuff I forget</p>"},{"location":"math/cliff-notes/#overview-map-of-mathematics","title":"Overview: Map of Mathematics","text":"<ul> <li>Algebra: abstraction of numbers</li> <li>Group Theory: abstraction of symmetry</li> <li>Ring Theory: abstraction of arithmetic</li> <li>Graph Theory: abstraction of relationships</li> <li>Category Theory: abstraction of composition</li> </ul>"},{"location":"math/cliff-notes/#linear-algebra","title":"Linear Algebra","text":"<ul> <li>The Matrix Cookbook</li> <li>Matrix Forensics</li> </ul>"},{"location":"math/cliff-notes/#differential-geometry","title":"Differential Geometry","text":"<ul> <li>Inner Product:  Angle</li> <li>Norm:           Length</li> <li>Metric:         Distance</li> <li>Measure:        Volume/Size</li> <li>\\(L_p\\) norm:     <code>max()</code> Vector Component</li> <li> <p>\\(L_0\\) norm:     Counting Norm</p> </li> <li> <p>Gradient:       Derivative of scalar field</p> </li> <li>Divergence:     Sink vs Source aka volume density of outward flux</li> <li>Curl:           Rotation Rate around point</li> <li>Laplacian:      Difference average of neighborhood at a point - value at point</li> <li>Jacobian:       Gradient of vector field</li> <li>describes skew/rotation/distortion of differential patch around \\(f(\\vec p)\\)</li> <li> <p>analogue of 1<sup>st</sup> order Taylor polynomial i.e. best linear approximation rate of change \\(f(\\vec{p} + \\varepsilon \\vec{h})\\approx f(\\vec{p} )+\\mathbf{J}_{f} (\\vec{p})\\cdot \\varepsilon \\vec{h}\\)</p> </li> <li> <p>Laplace Equation: Maximal smoothness/mean curvature is zero</p> </li> <li>intuitive as equilibrium steady-state state e.g. diffuse heat flow</li> <li>intuitive as surface has no bumps or local minimas</li> <li>intuition from CMU Discrete Differential Geometry Course: Lecture 18 </li> <li>Poisson Equation: Generalization of Laplace Equation</li> <li> <p>intuitive as soap film (pde solution) covering a wire (boundary condition)</p> </li> <li> <p>Manifold:            fancy name of a curved space</p> </li> <li>Reimannian manifold: manifold with geodesic metric (Reimannian metric)</li> <li> <p>Functionals:         Functions that take functions as inputs (derivative/integral operators)</p> </li> <li> <p>Spaces:              <code>Banach Space</code> \u2287 <code>Hilbert Space</code> \u2287 <code>Sobolev Space</code></p> </li> <li>Banach Space:        norm+completeness</li> <li>Hilbert Space:       inner-product norm</li> <li> <p>Sobolev Space:       nice derivatives up to order S</p> </li> <li> <p>Group:               closed under multiplication, commutative, identity function, inverse</p> </li> <li>Lie Group:           curved space with a group structure i.e. a group that is a manifold where multiplication is smooth/infinitely differentiable</li> <li>Lie Algebra:         tangent space of Lie group</li> <li>Tangent space:       linear approximation of a curved space</li> <li>Non-abelian group:   non-commutative group i.e. \\(a*b \\neq b*a\\) (e.g. SO(3) rotation group)</li> <li>Dual number:         convenient for computation of Lie algebra</li> </ul>"},{"location":"math/cliff-notes/#equations","title":"Equations","text":"\\[ \\begin{align*} del :=  &amp;  &amp; \\nabla  &amp; = \\left(\\frac{\\partial}{\\partial x_1}, \\dotsc, \\frac{\\partial}{\\partial x_n}\\right)\\\\  &amp;  &amp;  &amp; \\\\ Gradient :=  &amp;  &amp; \\nabla f(\\boldsymbol{\\vec{x}}) &amp; = \\left(\\frac{\\partial f(\\boldsymbol{\\vec{x}})}{\\partial x_1} ,\\dotsc ,\\frac{\\partial f (\\boldsymbol{\\vec{x}})}{\\partial x_n}\\right)\\\\  &amp;  &amp;  &amp; = \\begin{bmatrix} \\frac{\\partial f}{\\partial x_1} (\\boldsymbol{\\vec{x}})\\\\ \\vdots \\\\ \\frac{\\partial f}{\\partial x_n} (\\boldsymbol{\\vec{x}}) \\end{bmatrix}\\\\  &amp;  &amp;  &amp; \\\\ Divergence :=  &amp;  &amp; \\operatorname{div}\\mathbf{F} &amp; = \\nabla \\cdot \\mathbf{F}\\\\  &amp;  &amp;  &amp; = \\left(\\frac{\\partial}{\\partial x}, \\frac{\\partial}{\\partial y}, \\frac{\\partial}{\\partial z}\\right) \\cdot (F_x ,F_y ,F_z)\\\\  &amp;  &amp;  &amp; = \\frac{\\partial F_x}{\\partial x} + \\frac{\\partial F_y}{\\partial y} + \\frac{\\partial F_z}{\\partial z}\\\\  &amp;  &amp;  &amp; \\\\ Curl :=  &amp;  &amp; \\nabla \\times \\mathbf{F} &amp; = \\begin{vmatrix} \\hat{\\imath} &amp; \\hat{\\jmath} &amp; \\boldsymbol{\\hat{k}}\\\\ \\dfrac{\\partial}{\\partial x} &amp; \\dfrac{\\partial}{\\partial y} &amp; \\dfrac{\\partial}{\\partial z}\\\\ F_x &amp; F_y &amp; F_z \\end{vmatrix}\\\\  &amp;  &amp;  &amp; =  \\left(\\frac{\\partial F_z}{\\partial y} -\\frac{\\partial F_y}{\\partial z}\\right)\\boldsymbol{\\hat{\\imath}} +  \\left(\\frac{\\partial F_x}{\\partial z} -\\frac{\\partial F_z}{\\partial x}\\right)\\boldsymbol{\\hat{\\jmath}} +  \\left(\\frac{\\partial F_y}{\\partial x} -\\frac{\\partial F_x}{\\partial y}\\right)\\boldsymbol{\\hat{k}}\\\\  &amp;  &amp;  &amp; = \\begin{bmatrix} \\frac{\\partial F_z}{\\partial y} -\\frac{\\partial F_y}{\\partial z}\\\\ \\frac{\\partial F_x}{\\partial z} -\\frac{\\partial F_z}{\\partial x}\\\\ \\frac{\\partial F_y}{\\partial x} -\\frac{\\partial F_x}{\\partial y} \\end{bmatrix}\\\\  &amp;  &amp;  &amp; \\\\ Jacobian :=  &amp;  &amp; \\mathbf{f} &amp; :\\mathbb{R}^{n}\\to \\mathbb{R}^{m}\\\\  &amp;  &amp; \\mathbf{J}_f &amp; = \\begin{bmatrix} \\dfrac{\\partial f(\\boldsymbol{\\vec{x}})}{\\partial x_1} &amp; \\cdots  &amp; \\dfrac{\\partial \\mathbf{f} (\\boldsymbol{\\vec{x}})}{\\partial x_n} \\end{bmatrix}\\\\  &amp;  &amp;  &amp; = \\begin{bmatrix} \\nabla f_1 (\\boldsymbol{\\vec{x}})\\\\ \\vdots \\\\ \\nabla f_m (\\boldsymbol{\\vec{x}}) \\end{bmatrix}\\\\  &amp;  &amp;  &amp; = \\begin{bmatrix} \\dfrac{\\partial f_1 (\\boldsymbol{\\vec{x}})}{\\partial x_1} &amp; \\cdots  &amp; \\dfrac{\\partial f_1 (\\boldsymbol{\\vec{x}})}{\\partial x_n}\\\\ \\vdots  &amp; \\ddots  &amp; \\vdots \\\\ \\dfrac{\\partial f_m (\\boldsymbol{\\vec{x}})}{\\partial x_1} &amp; \\cdots  &amp; \\dfrac{\\partial f_m (\\boldsymbol{\\vec{x}})}{\\partial x_n} \\end{bmatrix}\\\\  &amp;  &amp;  &amp; \\\\ Laplacian :=  &amp;  &amp; \\Delta f &amp; = \\nabla^2 f = \\nabla \\cdot \\nabla f = \\sum_{i=1}^n \\frac{\\partial^2 f}{\\partial x_i^2}\\\\  &amp;  &amp;  &amp; \\\\ Laplace Equation :=  &amp;  &amp; \\Delta f &amp; = 0\\\\ Poisson Equation :=  &amp;  &amp; \\Delta f &amp; = h \\end{align*} \\]"},{"location":"math/cliff-notes/#spectral-theory","title":"Spectral Theory","text":""},{"location":"math/cliff-notes/#legendre-polynomial","title":"Legendre polynomial","text":"<p>The nth Legendre polynomial, \\(\\boldsymbol{L}_{n}\\), is orthogonal to every polynomial with degrees less than n i.e.</p> <ul> <li>\\(\\boldsymbol{L}_{n} \\perp \\boldsymbol{P}_{i}, \\ \\forall i\\in [0..n-1]\\)</li> <li>ex: \\(\\boldsymbol{L}_{n} \\perp x^{3}\\)</li> </ul> <p>\\(\\boldsymbol{L}_{n}\\) has n real roots and they are all \\(\\in [-1,1]\\)</p> <p>Harmonic functions =&gt; \\(\\Delta u(x) = 0\\)</p> <p>Homogenous function =&gt; \\(f : \\mathbb{R}^{n} \\to \\mathbb{R}^{n}, \\ f(\\lambda \\mathbf{v})=\\lambda^{k} f(\\mathbf{v})\\) where \\(k,\\lambda \\in \\mathbb{R}\\)</p> <p>General form of Newton's divided-difference polynomial interpolation:</p> \\[ \\begin{aligned} f_{n}(x)=&amp; f\\left(x_{0}\\right)+\\left(x-x_{0}\\right) f\\left[x_{1}, x_{0}\\right]+\\left(x-x_{0}\\right)\\left(x-x_{1}\\right) f\\left[x_{2}, x_{1}, x_{0}\\right] \\\\ &amp;+\\cdots+\\left(x-x_{0}\\right)\\left(x-x_{1}\\right) \\cdots\\left(x-x_{n-1}\\right) f\\left[x_{n}, x_{n-1}, \\ldots, x_{0}\\right] \\end{aligned} \\] <p></p> <p>Lagrange interpolating polynomial scheme is just a reformulation of Newton scheme that avoids computation of divided differences</p> \\[ f_{n}(x)=\\sum_{i=0}^{n} L_{i}(x) f\\left(x_{i}\\right)\\newline L_{i}(x)=\\prod_{j=0 \\atop j \\neq i}^{n} \\frac{x-x_{j}}{x_{i}-x_{j}} \\]"},{"location":"math/cliff-notes/#gaussian-quadrature","title":"Gaussian quadrature","text":"<ul> <li>allows for accurately approximating functions where \\(f(x) \\in P_{2n-1}\\) with only n coefficients</li> </ul>"},{"location":"math/cliff-notes/#approximation-schemes","title":"Approximation Schemes","text":"<ul> <li>Regression Schemes: (Linear or nonlinear)</li> <li>Curves do not necessarily go through sample points so error at said points might be large</li> <li>Round-off error becomes pronounced for higher order versions and ill-conditioned matrices are a problem</li> <li>Orthogonal polynomials do not necessarily suffer from this</li> <li>Interpolation Schemes: (splines, lagrangian/newtonian, etc)</li> <li>Curves must go through sample points so error at said points is small</li> <li>Not ill conditioned</li> </ul>"},{"location":"math/cliff-notes/#thin-plate-splines","title":"Thin plate splines","text":"<ul> <li>construction is based on choosing a function that minimizes an integral that represents the bending energy of a surface</li> <li>the idea of thin-plate splines is to choose a function f(x) that exactly interpolates the datapoints (xi,yi), say,yi=f(xi), and that minimizes the bending energy \\(E[f]=\\int_{\\mathbf{R}^{n}}\\left|D^{2} f\\right|^{2} d X\\)</li> <li>Can also choose function that doesn't exactly interpolate all control points by using smoothing parameter for regularization \\(E[f]=\\sum_{i=1}^{m}\\left|f\\left(\\mathbf{x}_{i}\\right)-y_{i}\\right|^{2}+\\lambda \\int_{\\mathbb{R}^{n}}\\left|D^{2} f\\right|^{2} d X\\)</li> </ul>"},{"location":"math/cliff-notes/#spherical-basis-splines","title":"Spherical Basis Splines","text":"<ul> <li>Gross reduction summary: b-splines with slerp instead of lerp between control points</li> </ul>"},{"location":"math/cliff-notes/#rbf","title":"RBF","text":"<ul> <li>Integration By RBF Over The Sphere</li> <li>RBF for Scientific computing</li> <li>Interpolation and Best Approximation for Spherical Radial Basis Function Networks</li> <li>Spherical Radial Basis Functions, Theory and Applications (Springer Briefs in Mathematics)</li> <li>Transport schemes on a sphere using radial basis functions</li> <li>On choosing a radial basis function and a shape parameter when solving a convective PDE on a sphere</li> <li>A Fast Algorithm For Spherical Basis approximation</li> </ul>"},{"location":"math/cliff-notes/#spherical-splines","title":"Spherical Splines","text":"<ul> <li>Spline Representations of Functions on a Sphere for Geopotential Modeling</li> <li>Fitting scattered data on sphere-like surfaces using spherical splines</li> <li>Bernstein-B\u00e9zier polynomials on spheres and sphere-like surfaces</li> <li>Survey on Spherical Spline Approximation</li> <li>scattered data fitting on the sphere: scattered data fitting on the sphere</li> </ul>"},{"location":"math/math-symbols-cheatsheet/","title":"Math Symbols LaTeX Cheatsheet","text":""},{"location":"math/math-symbols-cheatsheet/#resources","title":"Resources","text":"<ul> <li>List of mathematical symbols by subject</li> <li>List of common physics notations</li> <li>Mathcha: math notebook editor with excellent ux</li> </ul>"},{"location":"math/math-symbols-cheatsheet/#accents","title":"Accents","text":"Math Mode Accents \\(\\acute{a}\\) <code>\\acute{a}</code> \\(\\bar{a}\\) <code>\\bar{a}</code> \\(\\breve{a}\\) <code>\\breve{a}</code> \\(\\check{a}\\) <code>\\check{a}</code> \\(\\ddot{a}\\) <code>\\ddot{a}</code> \\(\\dot{a}\\) <code>\\dot{a}</code> \\(\\grave{a}\\) <code>\\grave{a}</code> \\(\\hat{a}\\) <code>\\hat{a}</code> \\(\\mathring{a}\\) <code>\\mathring{a}</code> \\(\\tilde{a}\\) <code>\\tilde{a}</code> \\(\\vec{a}\\) <code>\\vec{a}</code> \\(\\widehat{AAA}\\) <code>\\widehat{AAA}</code> \\(\\widetilde{AAA}\\) <code>\\widetilde{AAA}</code> Arrow Accents \\(\\overrightarrow{AB}\\) <code>\\overrightarrow{AB}</code> \\(\\underrightarrow{AB}\\) <code>\\underrightarrow{AB}</code> \\(\\overleftarrow{AB}\\) <code>\\overleftarrow{AB}</code> \\(\\underleftarrow{AB}\\) <code>\\underleftarrow{AB}</code> \\(\\overleftrightarrow{AB}\\) <code>\\overleftrightarrow{AB}</code> \\(\\underleftrightarrow{AB}\\) <code>\\underleftrightarrow{AB}</code>"},{"location":"math/math-symbols-cheatsheet/#letters","title":"Letters","text":"Greek Letters \\(\\alpha\\) <code>\\alpha</code> \\(\\beta\\) <code>\\beta</code> \\(\\gamma\\) <code>\\gamma</code> \\(\\delta\\) <code>\\delta</code> \\(\\epsilon\\) <code>\\epsilon</code> \\(\\varepsilon\\) <code>\\varepsilon</code> \\(\\zeta\\) <code>\\zeta</code> \\(\\eta\\) <code>\\eta</code> \\(\\Gamma\\) <code>\\Gamma</code> \\(\\Delta\\) <code>\\Delta</code> \\(\\Theta\\) <code>\\Theta</code> \\(\\theta\\) <code>\\theta</code> \\(\\vartheta\\) <code>\\vartheta</code> \\(\\iota\\) <code>\\iota</code> \\(\\kappa\\) <code>\\kappa</code> \\(\\lambda\\) <code>\\lambda</code> \\(\\mu\\) <code>\\mu</code> \\(\\nu\\) <code>\\nu</code> \\(\\xi\\) <code>\\xi</code> \\(\\Lambda\\) <code>\\Lambda</code> \\(\\Xi\\) <code>\\Xi</code> \\(\\Pi\\) <code>\\Pi</code> \\(o\\) <code>o</code> \\(\\pi\\) <code>\\pi</code> \\(\\varpi\\) <code>\\varpi</code> \\(\\rho\\) <code>\\rho</code> \\(\\varrho\\) <code>\\varrho</code> \\(\\sigma\\) <code>\\sigma</code> \\(\\varsigma\\) <code>\\varsigma</code> \\(\\tau\\) <code>\\tau</code> \\(\\Sigma\\) <code>\\Sigma</code> \\(\\Upsilon\\) <code>\\Upsilon</code> \\(\\Phi\\) <code>\\Phi</code> \\(\\upsilon\\) <code>\\upsilon</code> \\(\\phi\\) <code>\\phi</code> \\(\\varphi\\) <code>\\varphi</code> \\(\\chi\\) <code>\\chi</code> \\(\\psi\\) <code>\\psi</code> \\(\\omega\\) <code>\\omega</code> \\(\\Psi\\) <code>\\Psi</code> \\(\\Omega\\) <code>\\Omega</code> Hebrew \\(\\digamma\\) <code>\\digamma</code> \\(\\varkappa\\) <code>\\varkappa</code> \\(\\beth\\) <code>\\beth</code> \\(\\gimel\\) <code>\\gimel</code> \\(\\daleth\\) <code>\\daleth</code>"},{"location":"math/math-symbols-cheatsheet/#binary-operators","title":"Binary Operators","text":"Normal Operators \\(+\\) <code>+</code> \\(-\\) <code>-</code> \\(\\pm\\) <code>\\pm</code> \\(\\mp\\) <code>\\mp</code> \\(\\triangleleft\\) <code>\\triangleleft</code> \\(\\cdot\\) <code>\\cdot</code> \\(\\div\\) <code>\\div</code> \\(\\triangleright\\) <code>\\triangleright</code> \\(\\times\\) <code>\\times</code> \\(\\setminus\\) <code>\\setminus</code> \\(\\star\\) <code>\\star</code> \\(\\cup\\) <code>\\cup</code> \\(\\cap\\) <code>\\cap</code> \\(\\ast\\) <code>\\ast</code> \\(\\sqcup\\) <code>\\sqcup</code> \\(\\sqcap\\) <code>\\sqcap</code> \\(\\circ\\) <code>\\circ</code> \\(\\vee\\) <code>\\vee</code>,<code>\\lor</code> \\(\\wedge\\) <code>\\wedge</code>,<code>\\land</code> \\(\\bullet\\) <code>\\bullet</code> \\(\\oplus\\) <code>\\oplus</code> \\(\\ominus\\) <code>\\ominus</code> \\(\\diamond\\) <code>\\diamond</code> \\(\\odot\\) <code>\\odot</code> \\(\\oslash\\) <code>\\oslash</code> \\(\\uplus\\) <code>\\uplus</code> \\(\\otimes\\) <code>\\otimes</code> \\(\\bigcirc\\) <code>\\bigcirc</code> \\(\\amalg\\) <code>\\amalg</code> \\(\\bigtriangleup\\) <code>\\bigtriangleup</code> \\(\\bigtriangledown\\) <code>\\bigtriangledown</code> \\(\\dagger\\) <code>\\dagger</code> \\(\\lhd\\) <code>\\lhd</code> \\(\\rhd\\) <code>\\rhd</code> \\(\\ddagger\\) <code>\\ddagger</code> \\(\\unlhd\\) <code>\\unlhd</code> \\(\\unrhd\\) <code>\\unrhd</code> \\(\\wr\\) <code>\\wr</code> Big Operators \\(\\sum\\) <code>\\sum</code> \\(\\bigcup\\) <code>\\bigcup</code> \\(\\bigvee\\) <code>\\bigvee</code> \\(\\prod\\) <code>\\prod</code> \\(\\bigcap\\) <code>\\bigcap</code> \\(\\bigwedge\\) <code>\\bigwedge</code> \\(\\coprod\\) <code>\\coprod</code> \\(\\bigsqcup\\) <code>\\bigsqcup</code> \\(\\biguplus\\) <code>\\biguplus</code> \\(\\int\\) <code>\\int</code> \\(\\oint\\) <code>\\oint</code> \\(\\bigodot\\) <code>\\bigodot</code> \\(\\bigoplus\\) <code>\\bigoplus</code> \\(\\bigotimes\\) <code>\\bigotimes</code> AMS Binary Operators \\(\\dotplus\\) <code>\\dotplus</code> \\(\\centerdot\\) <code>\\centerdot</code> \\(\\ltimes\\) <code>\\ltimes</code> \\(\\rtimes\\) <code>\\rtimes</code> \\(\\divideontimes\\) <code>\\divideontimes</code> \\(\\doublecup\\) <code>\\doublecup</code> \\(\\doublecap\\) <code>\\doublecap</code> \\(\\smallsetminus\\) <code>\\smallsetminus</code> \\(\\veebar\\) <code>\\veebar</code> \\(\\barwedge\\) <code>\\barwedge</code> \\(\\doublebarwedge\\) <code>\\doublebarwedge</code> \\(\\boxplus\\) <code>\\boxplus</code> \\(\\boxminus\\) <code>\\boxminus</code> \\(\\circleddash\\) <code>\\circleddash</code> \\(\\boxtimes\\) <code>\\boxtimes</code> \\(\\boxdot\\) <code>\\boxdot</code> \\(\\circledcirc\\) <code>\\circledcirc</code> \\(\\intercal\\) <code>\\intercal</code> \\(\\circledast\\) <code>\\circledast</code> \\(\\rightthreetimes\\) <code>\\rightthreetimes</code> \\(\\curlyvee\\) <code>\\curlyvee</code> \\(\\curlywedge\\) <code>\\curlywedge</code> \\(\\leftthreetimes\\) <code>\\leftthreetimes</code>"},{"location":"math/math-symbols-cheatsheet/#binary-relations","title":"Binary Relations","text":"Binary Relations \\(&lt;\\) <code>&lt;</code> \\(&gt;\\) <code>&gt;</code> \\(=\\) <code>=</code> \\(\\leq\\) <code>\\leq</code>,<code>\\le</code> \\(\\geq\\) <code>\\geq</code>,<code>\\ge</code> \\(\\equiv\\) <code>\\equiv</code> \\(\\ll\\) <code>\\ll</code> \\(\\gg\\) <code>\\gg</code> \\(\\doteq\\) <code>\\doteq</code> \\(\\prec\\) <code>\\prec</code> \\(\\succ\\) <code>\\succ</code> \\(\\sim\\) <code>\\sim</code> \\(\\preceq\\) <code>\\preceq</code> \\(\\succeq\\) <code>\\succeq</code> \\(\\simeq\\) <code>\\simeq</code> \\(\\subset\\) <code>\\subset</code> \\(\\supset\\) <code>\\supset</code> \\(\\approx\\) <code>\\approx</code> \\(\\subseteq\\) <code>\\subseteq</code> \\(\\supseteq\\) <code>\\supseteq</code> \\(\\cong\\) <code>\\cong</code> \\(\\sqsubset\\) <code>\\sqsubset</code> \\(\\sqsupset\\) <code>\\sqsupset</code> \\(\\Join\\) <code>\\Join</code> \\(\\sqsubseteq\\) <code>\\sqsubseteq</code> \\(\\sqsupseteq\\) <code>\\sqsupseteq</code> \\(\\bowtie\\) <code>\\bowtie</code> \\(\\in\\) <code>\\in</code> \\(\\ni\\) <code>\\ni</code>,<code>\\owns</code> \\(\\propto\\) <code>\\propto</code> \\(\\vdash\\) <code>\\vdash</code> \\(\\dashv\\) <code>\\dashv</code> \\(\\models\\) <code>\\models</code> \\(\\mid\\) <code>\\mid</code> \\(\\parallel\\) <code>\\parallel</code> \\(\\perp\\) <code>\\perp</code> \\(\\smile\\) <code>\\smile</code> \\(\\frown\\) <code>\\frown</code> \\(\\asymp\\) <code>\\asymp</code> \\(:\\) <code>:</code> \\(\\notin\\) <code>\\notin</code> \\(\\neq\\) <code>\\neq</code>,<code>\\ne</code> AMS Binary Relations \\(\\lessdot\\) <code>\\lessdot</code> \\(\\gtrdot\\) <code>\\gtrdot</code> \\(\\doteqdot\\) <code>\\doteqdot</code> \\(\\leqslant\\) <code>\\leqslant</code> \\(\\geqslant\\) <code>\\geqslant</code> \\(\\risingdotseq\\) <code>\\risingdotseq</code> \\(\\eqslantless\\) <code>\\eqslantless</code> \\(\\eqslantgtr\\) <code>\\eqslantgtr</code> \\(\\fallingdotseq\\) <code>\\fallingdotseq</code> \\(\\leqq\\) <code>\\leqq</code> \\(\\geqq\\) <code>\\geqq</code> \\(\\eqcirc\\) <code>\\eqcirc</code> \\(\\lll\\) <code>\\lll</code>,<code>\\llless</code> \\(\\ggg\\) <code>\\ggg</code> \\(\\circeq\\) <code>\\circeq</code> \\(\\lesssim\\) <code>\\lesssim</code> \\(\\gtrsim\\) <code>\\gtrsim</code> \\(\\triangleq\\) <code>\\triangleq</code> \\(\\lessapprox\\) <code>\\lessapprox</code> \\(\\gtrapprox\\) <code>\\gtrapprox</code> \\(\\bumpeq\\) <code>\\bumpeq</code> \\(\\lessgtr\\) <code>\\lessgtr</code> \\(\\gtrless\\) <code>\\gtrless</code> \\(\\Bumpeq\\) <code>\\Bumpeq</code> \\(\\lesseqgtr\\) <code>\\lesseqgtr</code> \\(\\gtreqless\\) <code>\\gtreqless</code> \\(\\thicksim\\) <code>\\thicksim</code> \\(\\lesseqqgtr\\) <code>\\lesseqqgtr</code> \\(\\gtreqqless\\) <code>\\gtreqqless</code> \\(\\thickapprox\\) <code>\\thickapprox</code> \\(\\preccurlyeq\\) <code>\\preccurlyeq</code> \\(\\succcurlyeq\\) <code>\\succcurlyeq</code> \\(\\approxeq\\) <code>\\approxeq</code> \\(\\curlyeqprec\\) <code>\\curlyeqprec</code> \\(\\curlyeqsucc\\) <code>\\curlyeqsucc</code> \\(\\backsim\\) <code>\\backsim</code> \\(\\precsim\\) <code>\\precsim</code> \\(\\succsim\\) <code>\\succsim</code> \\(\\backsimeq\\) <code>\\backsimeq</code> \\(\\precapprox\\) <code>\\precapprox</code> \\(\\succapprox\\) <code>\\succapprox</code> \\(\\vDash\\) <code>\\vDash</code> \\(\\subseteqq\\) <code>\\subseteqq</code> \\(\\supseteqq\\) <code>\\supseteqq</code> \\(\\Vdash\\) <code>\\Vdash</code> \\(\\shortparallel\\) <code>\\shortparallel</code> \\(\\Supset\\) <code>\\Supset</code> \\(\\Vvdash\\) <code>\\Vvdash</code> \\(\\blacktriangleleft\\) <code>\\blacktriangleleft</code> \\(\\sqsupset\\) <code>\\sqsupset</code> \\(\\backepsilon\\) <code>\\backepsilon</code> \\(\\vartriangleright\\) <code>\\vartriangleright</code> \\(\\because\\) <code>\\because</code> \\(\\varpropto\\) <code>\\varpropto</code> \\(\\blacktriangleright\\) <code>\\blacktriangleright</code> \\(\\Subset\\) <code>\\Subset</code> \\(\\between\\) <code>\\between</code> \\(\\trianglerighteq\\) <code>\\trianglerighteq</code> \\(\\smallfrown\\) <code>\\smallfrown</code> \\(\\pitchfork\\) <code>\\pitchfork</code> \\(\\vartriangleleft\\) <code>\\vartriangleleft</code> \\(\\shortmid\\) <code>\\shortmid</code> \\(\\smallsmile\\) <code>\\smallsmile</code> \\(\\trianglelefteq\\) <code>\\trianglelefteq</code> \\(\\therefore\\) <code>\\therefore</code> \\(\\sqsubset\\) <code>\\sqsubset</code>"},{"location":"math/math-symbols-cheatsheet/#delimiters","title":"Delimiters","text":"Normal Delimiters \\((\\) <code>(</code> \\()\\) <code>)</code> \\(\\uparrow\\) <code>\\uparrow</code> \\([\\) <code>\\lbrack</code>,<code>[</code> \\(]\\) <code>\\rbrack</code>,<code>]</code> \\(\\downarrow\\) <code>\\downarrow</code> \\(\\{\\) <code>\\lbrace</code>,<code>\\{</code> \\(\\}\\) <code>\\rbrace</code>,<code>\\}</code> \\(\\updownarrow\\) <code>\\updownarrow</code> \\(\\langle\\) <code>\\langle</code> \\(\\rangle\\) <code>\\rangle</code> \\(\\Uparrow\\) <code>\\Uparrow</code> \\(\\vert\\) <code>\\vert</code>,<code>\\|</code> \\(\\|\\) <code>\\Vert</code>,<code>\\|</code> \\(\\Downarrow\\) <code>\\Downarrow</code> \\(/\\) <code>/</code> \\(\\backslash\\) <code>\\backslash</code> \\(\\Updownarrow\\) <code>\\Updownarrow</code> \\(\\lfloor\\) <code>\\lfloor</code> \\(\\rfloor\\) <code>\\rfloor</code> \\(\\rceil\\) <code>\\rceil</code> \\(\\lceil\\) <code>\\lceil</code> Large Delimiters \\(\\lgroup\\) <code>\\lgroup</code> \\(\\rgroup\\) <code>\\rgroup</code> \\(\\lmoustache\\) <code>\\lmoustache</code> \\(\\arrowvert\\) <code>\\arrowvert</code> \\(\\Arrowvert\\) <code>\\Arrowvert</code> \\(\\bracevert\\) <code>\\bracevert</code> \\(\\rmoustache\\) <code>\\rmoustache</code> AMS Delimiters \\(\\ulcorner\\) <code>\\ulcorner</code> \\(\\urcorner\\) <code>\\urcorner</code> \\(\\llcorner\\) <code>\\llcorner</code> \\(\\lrcorner\\) <code>\\lrcorner</code> \\(\\lvert\\) <code>\\lvert</code> \\(\\rvert\\) <code>\\rvert</code> \\(\\lVert\\) <code>\\lVert</code> \\(\\rVert\\) <code>\\rVert</code>"},{"location":"math/math-symbols-cheatsheet/#symbols","title":"Symbols","text":"Arrows \\(\\leftarrow\\) <code>\\leftarrow</code>,<code>\\gets</code> \\(\\longleftarrow\\) <code>\\longleftarrow</code> \\(\\rightarrow\\) <code>\\rightarrow</code>,<code>\\to</code> \\(\\longrightarrow\\) <code>\\longrightarrow</code> \\(\\leftrightarrow\\) <code>\\leftrightarrow</code> \\(\\longleftrightarrow\\) <code>\\longleftrightarrow</code> \\(\\Leftarrow\\) <code>\\Leftarrow</code> \\(\\Longleftarrow\\) <code>\\Longleftarrow</code> \\(\\Rightarrow\\) <code>\\Rightarrow</code> \\(\\Longrightarrow\\) <code>\\Longrightarrow</code> \\(\\Leftrightarrow\\) <code>\\Leftrightarrow</code> \\(\\Longleftrightarrow\\) <code>\\Longleftrightarrow</code> \\(\\mapsto\\) <code>\\mapsto</code> \\(\\longmapsto\\) <code>\\longmapsto</code> \\(\\hookleftarrow\\) <code>\\hookleftarrow</code> \\(\\hookrightarrow\\) <code>\\hookrightarrow</code> \\(\\leftharpoonup\\) <code>\\leftharpoonup</code> \\(\\rightharpoonup\\) <code>\\rightharpoonup</code> \\(\\leftharpoondown\\) <code>\\leftharpoondown</code> \\(\\rightharpoondown\\) <code>\\rightharpoondown</code> \\(\\rightleftharpoons\\) <code>\\rightleftharpoons</code> \\(\\iff\\) <code>\\iff</code> \\(\\uparrow\\) <code>\\uparrow</code> \\(\\downarrow\\) <code>\\downarrow</code> \\(\\updownarrow\\) <code>\\updownarrow</code> \\(\\Uparrow\\) <code>\\Uparrow</code> \\(\\Downarrow\\) <code>\\Downarrow</code> \\(\\Updownarrow\\) <code>\\Updownarrow</code> \\(\\nearrow\\) <code>\\nearrow</code> \\(\\searrow\\) <code>\\searrow</code> \\(\\swarrow\\) <code>\\swarrow</code> \\(\\nwarrow\\) <code>\\nwarrow</code> \\(\\leadsto\\) <code>\\leadsto</code> Miscellaneous Symbols \\(\\dots\\) <code>\\dots</code> \\(\\cdots\\) <code>\\cdots</code> \\(\\vdots\\) <code>\\vdots</code> \\(\\ddots\\) <code>\\ddots</code> \\(\\dotsc\\) (for dots with commas) <code>\\dotsc</code> \\(\\dotsb\\) (for dots with binary op) <code>\\dotsb</code> \\(\\dotsm\\) (for multiplication dots) <code>\\dotsm</code> \\(\\dotsi\\) (for dots with integrals) <code>\\dotsi</code> \\(\\dotso\\) (for everything else) <code>\\dotso</code> \\(\\hbar\\) <code>\\hbar</code> \\(\\imath\\) <code>\\imath</code> \\(\\jmath\\) <code>\\jmath</code> \\(\\ell\\) <code>\\ell</code> \\(\\Re\\) <code>\\Re</code> \\(\\Im\\) <code>\\Im</code> \\(\\aleph\\) <code>\\aleph</code> \\(\\wp\\) <code>\\wp</code> \\(\\forall\\) <code>\\forall</code> \\(\\exists\\) <code>\\exists</code> \\(\\mho\\) <code>\\mho</code> \\(\\partial\\) <code>\\partial</code> \\('\\) <code>'</code> \\(\\prime\\) <code>\\prime</code> \\(\\emptyset\\) <code>\\emptyset</code> \\(\\infty\\) <code>\\infty</code> \\(\\nabla\\) <code>\\nabla</code> \\(\\degree\\) <code>\\degree</code> \\(\\triangle\\) <code>\\triangle</code> \\(\\Box\\) <code>\\Box</code> \\(\\Diamond\\) <code>\\Diamond</code> \\(\\bot\\) <code>\\bot</code> \\(\\top\\) <code>\\top</code> \\(\\angle\\) <code>\\angle</code> \\(\\surd\\) <code>\\surd</code> \\(\\diamondsuit\\) <code>\\diamondsuit</code> \\(\\heartsuit\\) <code>\\heartsuit</code> \\(\\clubsuit\\) <code>\\clubsuit</code> \\(\\spadesuit\\) <code>\\spadesuit</code> \\(\\neg\\) <code>\\neg</code>,<code>\\lnot</code> \\(\\flat\\) <code>\\flat</code> \\(\\natural\\) <code>\\natural</code> \\(\\sharp\\) <code>\\sharp</code> Non-Math Symbols \\(\\dag\\) <code>\\dag</code> \\(\\ddag\\) <code>\\ddag</code> \\(\\S\\) <code>\\S</code> \\(\\P\\) <code>\\P</code> \\(\\copyright\\) <code>\\copyright</code> \\(\\pounds\\) <code>\\pounds</code> \\(\\textregistered\\) <code>\\textregistered</code> \\(\\%\\) <code>\\%</code>"},{"location":"math/math-symbols-cheatsheet/#math-alphabets","title":"Math Alphabets","text":"\\(\\mathrm{ABCDEabcde1234}\\) <code>\\mathrm{ABCDEabcde1234}</code> \\(\\mathit{ABCDEabcde1234}\\) <code>\\mathit{ABCDEabcde1234}</code> \\(\\mathnormal{ABCDEabcde1234}\\) <code>\\mathnormal{ABCDEabcde1234}</code> \\(\\mathcal{ABCDEabcde1234}\\) <code>\\mathcal{ABCDEabcde1234}</code> \\(\\mathscr{ABCDEabcde1234}\\) <code>\\mathscr{ABCDEabcde1234}</code>"},{"location":"math/research-notes/","title":"Math Research Notes","text":"<p>Machine Learning Cheatsheet from Scikit: </p>"},{"location":"math/research-notes/#geometry-processing","title":"Geometry Processing","text":"<ul> <li>Discrete Differential Geometry Course: An Applied Introduction</li> <li>Course Videos</li> <li>Course Slides</li> <li>Course Notes</li> <li>Supplemental Material</li> </ul>"},{"location":"math/research-notes/#techniques","title":"Techniques","text":"<ul> <li>SGP 2018 Course: Conformal Geometry Processing</li> <li>Course Notes</li> <li>Heat Flow Method: Geodesic Distance</li> <li>Vector Heat Method: Parallel transport across surface</li> <li>Siggraph 2019 Talk</li> <li>Can be used for extrapolating level set velocities</li> <li>LogMap/Exponential map</li> <li>Geometric Medians &amp; Karcher/Frechet means</li> <li>Centroidal Voronoi diagrams</li> <li>Consistently ordered landmarks (for shape correspondence across near isometric surfaces)</li> <li>Variational Surface Cutting: Auto seam mesh</li> <li>Siggraph 2018 Talk</li> <li>Paper</li> <li>Code</li> <li>Navigating Intrinsic Triangulations</li> <li>Siggraph 2021 Course: Geometry Processing with Intrinsic Triangulations<ul> <li>Course Video</li> <li>Course Notes</li> <li>Implementation</li> </ul> </li> <li>A Laplacian for Nonmanifold Triangle Meshes</li> <li>Presentation</li> <li>Code</li> <li>Mobius Registration: Find correspondence between two meshes</li> <li>Mesh Unwrapping Techniques</li> <li>Boundary First Flattening: minimizes conformal mapping energy but insight is that doesn't matter; where you place the cuts is more important<ul> <li>Code</li> </ul> </li> <li>ARAP/ARAP++: minimizes a different energy than LSCM</li> </ul>"},{"location":"math/research-notes/#optimal-transport","title":"Optimal Transport","text":"<p>Optimal Transport is a mathematical theory that studies how to transform a shape into another one while minimizing a certain cost.</p> <ul> <li>SGP2018 Course: Computational Optimal Transport</li> <li>Presentation</li> <li>Optimal Transport Tutorial in Graphite</li> <li>Optimal Transport for Computer Graphics and Temporal Coherence of Image Processing Algorithms Thesis</li> </ul>"},{"location":"math/research-notes/#dictionary-learning","title":"Dictionary Learning","text":"<ul> <li>Siggraph 2010 Course: Spectral Mesh Processing</li> <li>Course Notes</li> <li>Spectral Geometry Processing with Manifold Harmonics</li> <li>Geogram implementation</li> <li>Siggraph Asia 2011 Course: Elements of Geometry Processing</li> <li>Gentle Course Slides on Laplacian:</li> <li>Overview</li> <li>Mesh Laplacian &amp; Manifold Harmonics</li> <li>Sparse Coding &amp; Dictionary Learning</li> <li> <p>Dictionary Learning</p> </li> <li> <p>Dictionary Learning Using Optimal Transport</p> </li> <li>Wasserstein Dictionary Learning: Optimal Transport-Based Unsupervised Nonlinear Dictionary Learning<ul> <li>Slides</li> <li>Alternative approach: Wasserstein principal geodesics</li> </ul> </li> <li>Fast Dictionary Learning with a Smoothed Wasserstein Loss<ul> <li>Supplemental Web Material</li> <li>Matlab Implementation to perform Wasserstein Dictionary Learning and Non-negative Matrix Factorization</li> </ul> </li> <li>Convolutional Wasserstein Distances: Efficient Optimal Transportation on Geometric Domains<ul> <li>Implementation</li> <li>Presentaiton</li> </ul> </li> </ul>"},{"location":"math/research-notes/#resources","title":"Resources","text":""},{"location":"math/research-notes/#learning-resources","title":"Learning Resources","text":"<ul> <li>Symposium on Geometry Processing Courses</li> <li>GeoGram Wiki</li> <li>Graphite Wiki</li> <li>Graphite Wiki</li> <li>Polygon Mesh Processing Book</li> </ul>"},{"location":"math/research-notes/#software","title":"Software","text":"<ul> <li>Geometry Central: c++ library for geometry processing with a focus on surface meshes</li> <li>Geogram</li> <li>Graphite: an experimental 3D modeler built around geogram</li> <li>Graphite video</li> <li>AliceVision</li> <li>LibIGL: simple c++ geometry processing library</li> <li>CGAL</li> <li>Mean Curvature Skeleton</li> <li>L1 Medial Skeleton</li> <li>Geom Loss Library: geometric loss functions between sampled measures, images and volumes</li> <li>Code</li> <li>Gradient flows between sampled measures</li> <li>WrapX</li> </ul>"},{"location":"math/research-notes/#people","title":"People","text":"<ul> <li>Bruno Levy</li> <li>Github</li> <li>Keenan Crane</li> <li>Youtube</li> </ul>"},{"location":"pkm/gatsby/","title":"Gatsby Cheatsheet","text":""},{"location":"pkm/gatsby/#setup","title":"Setup","text":"<ul> <li>Installing <code>nodejs</code> upgrade is the same as installing a new nodejs version   From Powershell elevated prompt:</li> </ul> PowerShell<pre><code>cinst -y nvm.portable\nnvm install 10.16.0\nnvm install latest\n\nnvm use 10.16.0 # (or for each nodejs installation bc you globally installed modules arent shared)\nnpm install -g npm@latest\n# !!!!!! IMPORTANT\n# CAREFUL WITH THIS ONE: It does unbelievably dumb fucking shit like wreck your user path and then adds python27 directory to that path variable, wrecking existing python installs\nnpm install -g windows-build-tools\nnpm install -g gatsby-cli\n</code></pre> <ul> <li>Upgrade Gatsby</li> </ul> Bash<pre><code>npm outdated         # to identify new releases for all your dependencies\ngatsby info\nnode -v\nnpm -v\nnpm update -g gatsby # upgrade gatsby globally\nnpm update --dev     # update all packages in project\n</code></pre> <ul> <li>Building</li> </ul> Bash<pre><code>npm run dev\nnpm run develop # clean &amp; start develop environment\nnpm run build &amp; npm run serve\n</code></pre> <ul> <li>Misc Commands</li> </ul> Bash<pre><code>npm run lint\nnpm run lint:fix\nnpm run format:js\nnpm run format:md\nnpm run format:mdx\nnpm run formatp:md   # this uses prettier which isnt as configurable\nnpm run formatp:mdx  # this uses prettier which isnt as configurable\n</code></pre>"},{"location":"pkm/gatsby/#usage","title":"Usage","text":"Bash<pre><code>gatsby new gamedevguide https://github.com/ikrima/gamedevguide (or git clone + yarn)\ngatsby develop (yarn develop)\ngatsby build\ngatsby serve\n`http://localhost:8000`\n`http://localhost:8000/___graphql`\n</code></pre>"},{"location":"pkm/gatsby/#reference","title":"Reference","text":"<ul> <li> <p>Gatsby Guides</p> </li> <li> <p>Lifecycle: https://medium.com/narative/understanding-gatsbys-lifecycle-31c473ba2f2d</p> </li> <li> <p>Useful Examples</p> </li> <li> <p>Narative.co: https://github.com/narative/narative.co</p> <ul> <li>Has example of modal shortcut key launcher</li> </ul> </li> <li>https://gatsby-docz.netlify.com/docs/</li> <li>https://using-remark.gatsbyjs.org/ &amp; https://github.com/gatsbyjs/gatsby/tree/master/examples/using-remark</li> <li>https://github.com/LekoArts/gatsby-starter-minimal-blog</li> <li>https://mkdevdiary.netlify.com/gatsby-plugins-seo-and-images</li> <li>http://github.com/kyleamathews/blog</li> <li>Advanced Gatsby starter with better performance: https://github.com/ericwindmill/gatsby-starter-docs</li> <li>gatsby-remark-external-links</li> <li>Ant Design Pro: http://pro.ant.design/docs/use-components-alone</li> <li>Ant Design Kitchen Sink: http://kitchen.alipay.com/</li> </ul>"},{"location":"pkm/internet-research-tips/","title":"Internet Research Tips","text":""},{"location":"pkm/internet-research-tips/#guides","title":"Guides","text":"<ul> <li>A look at search engines with their own indexes</li> <li>gwern Internet Search Tips: description of advanced tips and tricks for effective Internet research of papers/books, with real-world examples</li> </ul>"},{"location":"pkm/internet-research-tips/#legal","title":"Legal","text":"<ul> <li>judyrecords: Instantly search 740M+ United States court cases</li> <li>PACER: PACER is the official case management system of US Federal Judiciary</li> <li>56M+ federal court cases, including bankruptcy, criminal, civil, and appellate</li> <li>Fee-based for every kind of request for case info, including each search result page viewed, and even when a search returns no results</li> <li>CourtListener: Primarily focused on federal courts, state courts of last resort, and state appellate courts</li> <li>4M+ Federal/State court opinions</li> <li>70K+ oral arguments</li> <li>38K+ hours of oral argument audio</li> <li>Free</li> <li>Docket Alarm: Delivers Federal state, and IP agency filings to attorneys, paralegals. Search and run analytics</li> <li>26M+ federal cases</li> <li>91M+ state cases</li> <li>19M+ specialized agency cases (patent, trademark, tax, international trade, etc.)</li> <li>Free searches + premium access upsell</li> <li>UniCourt: Uses powerful data normalization processes and algorithms to add value to their legal data, which includes normalization of case classification and entity names (e.g., people, companies, attorneys, law firms, judges)</li> <li>9M+ Federal cases</li> <li>114M+ State cases</li> <li>Free searches + premium access upsell</li> </ul>"},{"location":"pkm/mkdocs-cheatsheet/","title":"MkDocs Cheatsheet","text":""},{"location":"pkm/mkdocs-cheatsheet/#usage","title":"Usage","text":"<ul> <li> <p>live preview with hot reload builds: <code>mkdocs serve --dirtyreload</code></p> </li> <li> <p><code>--dirtyreload</code> only rebuilds dirty pages with changed source timestamps</p> </li> <li> <p>clean build: <code>mkdocs build --clean --dirty --site-dir ./.build/site</code></p> </li> <li> <p><code>--clean</code>: clean build</p> </li> <li><code>--site-dir</code>: specify output directory</li> <li><code>-dirty</code>: only rebuilds dirty pages</li> <li> <p>start simple server: <code>python -m http.server -d ./.build/site</code></p> </li> <li> <p>upgrade <code>mkdocs</code></p> </li> <li> <p>install <code>pip-check-updates</code>: <code>pip install pip-check-updates; pip update pip-check-updates</code></p> </li> <li>find outdated:               <code>pcu requirements.txt</code></li> <li>update requirements.txt: <code>pcu requirements.txt -u</code></li> </ul>"},{"location":"pkm/mkdocs-cheatsheet/#setup","title":"Setup","text":"<ul> <li>install:</li> <li>using requirements: <code>pip install -r requirements.txt</code></li> <li>manually:<ul> <li>mkdocs: <code>pip install mkdocs</code></li> <li>cinder theme: <code>git clone https://github.com/chrissimpkins/cinder themes/material</code></li> <li>material theme: <code>pip install mkdocs-material</code> as it installs <code>pymkdown</code> dependencies</li> </ul> </li> <li><code>mkdocs.yml</code>: site config</li> <li>mkdocs material template for obsidian</li> <li>extensions</li> <li><code>pip install mkdocs-git-revision-date-localized-plugin</code></li> <li><code>pip install mkdocs-awesome-pages-plugin</code></li> <li><code>pip install mkdocs-plugin-progress</code></li> <li>add blog</li> <li>mkdocs-roamlinks-plugin for wikilinks style linking</li> <li>katex instant support<ul> <li>https://stackoverflow.com/questions/63145812/mkdocs-material-latex-not-rendering-in-instant-mode</li> <li>https://github.com/squidfunk/mkdocs-material/issues/1498#issuecomment-610700276</li> <li>https://github.com/squidfunk/mkdocs-material/issues/2290 on not using DOMContentSwitch</li> </ul> </li> <li>community extension list<ul> <li>https://github.com/mkdocs/mkdocs/wiki/MkDocs-Plugins</li> <li>https://github.com/Python-Markdown/markdown/wiki/Third-Party-Extensions</li> </ul> </li> </ul>"},{"location":"pkm/pkm-conversion-notes/","title":"Personal Knowledge Management Conversion Notes","text":""},{"location":"pkm/pkm-conversion-notes/#kindle","title":"Kindle","text":"<p>Obsidian Kindle Importer</p>"},{"location":"pkm/pkm-conversion-notes/#notion-export","title":"Notion Export","text":"<ul> <li>Promising But Untested: Official Obsidian Importer</li> <li>Import Guide</li> <li>Notion Guide</li> <li>Worked better: https://github.com/connertennery/Notion-to-Obsidian-Converter</li> <li>Notion-2-Obsidan</li> </ul>"},{"location":"pkm/pkm-conversion-notes/#onenote-export","title":"OneNote Export","text":"<p>Well this is a hellish nightmare. From best to worst:</p> <ul> <li>Promising But Untested: Official Obsidian Importer</li> <li>Import Guide</li> <li>OneNote Guide</li> <li>ConvertOneNote2MarkDown</li> <li>Extended fork</li> <li>Obsidian fork</li> <li>onenote-md-exporter</li> <li>Web OneNote Exporter</li> <li>Python Automation Script variant of above using <code>Azure -&gt; export html -&gt; html2markdown</code></li> <li>Semi-automatic pandoc export</li> </ul>"},{"location":"pkm/pkm-conversion-notes/#old-approach","title":"Old Approach","text":"<ul> <li> <p><code>cinst -y pandoc</code></p> </li> <li> <p>OneNote 2016 + OneNoteBatch to batch export to docx/html</p> </li> <li> <p>pandoc export command (also supports commonmark/gfm as markdown flavors)</p> </li> </ul> PowerShell<pre><code>Get-ChildItem -Path './process/pendingdocx/*.docx' | % { \n  pandoc.exe --extract-media \"process_markdown/assets\" -s $_.FullName --wrap=none --reference-links -t commonmark_x -o \"process_markdown/$($_.BaseName).md\" \n}\n</code></pre> <ul> <li> <p>Typora &amp; StackEdit are great markdown editors</p> </li> <li> <p>Tools</p> </li> <li> <p>GitBook - Careful not to use V2</p> </li> <li>MkDocs<ul> <li>Material For MkDocs</li> </ul> </li> <li>Useful links:<ul> <li>Comparison https://blog.strapi.io/gitbook-open-source-documentation/</li> </ul> </li> <li> <p>OneNote Export</p> </li> <li> <p>Look at bookmark OneNote folder in firefox</p> </li> <li>Batch export:<ul> <li>Export to Word OneNote Batch</li> <li>OneNote Gem</li> </ul> </li> <li>onenote-export</li> <li> <p>Conversion To New Format</p> </li> <li> <p>gitbook convert</p> </li> <li>Pandoc: to convert from word/pdf to markdown</li> </ul>"},{"location":"pkm/site-build-guide/","title":"Site Build Guide","text":""},{"location":"pkm/site-build-guide/#obsidian","title":"Obsidian","text":""},{"location":"pkm/site-build-guide/#import","title":"Import","text":"<p>Use instructions in [pkm-conversion-notes] to convert from OneNote, Notion, etc</p>"},{"location":"pkm/site-build-guide/#export","title":"Export","text":"<ul> <li> <p>obsidian export: export obsidian vault to markdown files</p> </li> <li> <p>build Bash<pre><code>pushd site-tools/obsidian-export &amp;&amp; cargo build --release &amp;&amp; popd\n</code></pre></p> </li> <li> <p>run      &gt;       &gt; [!note] <code>obsidian-export</code> won't override existing files</p> PowerShell<pre><code>mkdir \"$env:EDEV_VF_TMPAPP/gdgTmpContent\"\nobsidian-export/target/release/obsidian-export.exe 'docs' \"$env:EDEV_VF_TMPAPP/gdgTmpContent\"\nrobocopy.exe \"$env:EDEV_VF_TMPAPP/gdgTmpContent\" 'gamedevguide/content/dev-notes' /MIR\nrmdir /s/q \"$env:EDEV_VF_TMPAPP/gdgTmpContent\"\n</code></pre> </li> <li> <p>deploy: </p> </li> <li> <p>Obsidian MkDocs Publisher</p> </li> <li> <p>obs2mk: python exporter to mkdocs material compatible site</p> </li> <li>Obsidian Github Publisher: obsidian plugin version of above<ul> <li>docs</li> </ul> </li> <li>mkdocs-obsidian template</li> <li>Obsidian forum thread</li> <li>repos: related mkdocs extensions/utilities</li> </ul>"},{"location":"pkm/site-build-guide/#extensions","title":"Extensions","text":"<ul> <li>Plugin Development</li> </ul>"},{"location":"pkm/site-build-guide/#linting","title":"Linting","text":""},{"location":"pkm/site-build-guide/#vale","title":"Vale","text":"<p>Vale: grammar linter</p> <ul> <li>install Bash<pre><code>choco install vale\nvale sync\n</code></pre></li> </ul> Usage Syntax disable specific rule <code>&lt;!-- vale gitlab.rulename = NO --&gt;,&lt;!-- vale gitlab.rulename = YES --&gt;</code> disable all rules <code>&lt;!-- vale off --&gt;/&lt;!-- vale on --&gt;</code>"},{"location":"pkm/site-build-guide/#markdown-lint","title":"Markdown Lint","text":"Usage Scope Syntax disable/enable rule(s) Region <code>&lt;!-- markdownlint-disable [RULE(S)...] --&gt;</code>,<code>&lt;!-- markdownlint-enable [RULE(S)...] --&gt;</code> disable rule(s) Inline <code>&lt;!-- markdownlint-disable-line [RULE(S)...] --&gt;</code> disable rule(s) Next line <code>&lt;!-- markdownlint-disable-next-line [RULE(S)...] --&gt;</code> disable/enable rule(s) File <code>&lt;!-- markdownlint-disable-file [RULE(S)...] --&gt;</code>,<code>&lt;!-- markdownlint-enable-file [RULE(S)...] --&gt;</code> capture/restore rule config Region <code>&lt;!-- markdownlint-capture --&gt;</code>,<code>&lt;!-- markdownlint-restore --&gt;</code> <ul> <li>examples Markdown<pre><code>&lt;!-- markdownlint-disable MD005 no-space-in-emphasis --&gt;\nScope-Region: Deliberate space * in * emphasis\n&lt;!-- markdownlint-enable MD005 no-space-in-emphasis --&gt;\n\nScope-Inline: Deliberate space * in * emphasis &lt;!-- markdownlint-disable-line no-space-in-emphasis --&gt;\n\n&lt;!-- markdownlint-disable-next-line no-space-in-emphasis --&gt;\nScope-NextLine: Deliberate space * in * emphasis\n\nTemporarily disable rule(s) then restore former config:\n&lt;!-- markdownlint-capture --&gt;\n&lt;!-- markdownlint-disable --&gt;\nAny violations you want\n&lt;!-- markdownlint-restore --&gt;\n\nInitial config is captured by default so pattern above can be simplified:\n&lt;!-- markdownlint-disable --&gt;\nAny violations you want\n&lt;!-- markdownlint-restore --&gt;\n</code></pre></li> </ul>"},{"location":"ue4guide/","title":"UE4 Guide","text":"<p>Unreal Engine 4 Development Guide. These are my personal notes from the past 4 years that I'm transforming into our internal dev onboarding guide.</p> <p>I'm aiming to process about one section a day since the conversion from onenote/evernote/confluence is lossy and needs a final human pass to clean up little niggles. You can subscribe to the repo for updates</p>"},{"location":"ue4guide/kl-opensource-ue4-repos/","title":"Open Source UE4 Repo","text":"<p>Mostly outdated repos but keeping here for reference. Everything here is permissively licensed so feel free to use in your own games.</p>"},{"location":"ue4guide/kl-opensource-ue4-repos/#superluminal-profiler","title":"Superluminal Profiler","text":"<p>Superluminal is an insanely low-overhead psamplin &amp; instrumenting profiler with thread block visualization</p> <p>Repo: https://github.com/kitelightning/SuperluminalPlugin</p>"},{"location":"ue4guide/kl-opensource-ue4-repos/#microprofile","title":"Microprofile","text":"<p>NEW: 4.19.2 Integration with in-game live update drawing Video demo: https://twitter.com/KNLstudio/status/999422263190474752</p> <p>Integrating jonas' amazing microprofile. It's a fully featured profiler with live capture support, GPU timers, flame graphs, and remote capture. Short demo video: https://twitter.com/KNLstudio/status/911672310238556160</p> <p>Repo: https://github.com/ikrima/UnrealEngine/tree/feature-microprofiler</p>"},{"location":"ue4guide/kl-opensource-ue4-repos/#unreal-engine-python","title":"Unreal Engine Python","text":"<p>Fully featured Python support in UE4: https://twitter.com/KNLstudio/status/932657812466843648</p> <ul> <li>Full access to UE4's reflection layer (UObjects, UFunctions, &amp; Blueprints)</li> <li>Extensive support for native Slate widgets &amp; UMG in Python</li> <li>Support for Editor Extensions (Custom Viewports, ToolbarButtons, Custom Context Menus)</li> <li>Automation: Creating custom asset import pipelines like ingesting FBX, creating animation composites,</li> <li>Sequencer scripting support</li> </ul> <p>Our fork is at https://github.com/kitelightning/UnrealEnginePython/</p>"},{"location":"ue4guide/kl-opensource-ue4-repos/#livepp-ue4-plugin","title":"LivePP UE4 Plugin","text":"<p>Live++ is an insanely fast hot-reloading library. Here's an example in our project of doing a hotreload in &lt; 2s: https://twitter.com/KNLstudio/status/984093749461401602. The plugin is does the integration work for you and you simply just need to drop it in your project.</p> <p>Live++ is made by Molecular Matter</p> <p>Repo: https://github.com/kitelightning/LivePP</p>"},{"location":"ue4guide/kl-opensource-ue4-repos/#igmemtrace","title":"IGMemtrace","text":"<p>Coming Soon: Integrating Insomniac Games MemTrace Tool into UE4 The tool is a faster &amp; more improved variant of UE4's MallocProfiler. For example, it doesn't take 20 mins to open a couple minute trace.</p> <p>Features</p> <ul> <li>Lightweight C++ runtime component with network recording</li> <li>CRT heap hooking on Windows (Durango hooking available on request to licensed devs)</li> <li>Full support for custom heaps and allocators</li> <li>Supports displaying and analyzing fragmentation for custom heaps</li> <li>Can display a delta between two arbitrary points in time.</li> <li>Can aggregate memory data along several axes, including custom scopes</li> <li>Supports asset and component memory scoping out of the box, but can be   extended in source to group on arbitrary scopes</li> <li>Supports forward and backward scrubbing in trace files during analysis</li> </ul>"},{"location":"ue4guide/application-os-generic-platform/capturingshowing-mouse-input/","title":"Capturingshowing mouse input","text":"<p>ReleaseMouseCursor</p> <p>SetInputMode_UIOnlyEx</p> <p>SetInputMode_GameAndUIEx</p> <p>SetInputMode_GameOnly</p> <p>SetFocusToGameViewport</p> <p>CaptureMouse</p> <p>LockMouse</p> <p>UnlockMouse</p> <p>SetMousePosition</p> <p>CaptureJoystick</p> <p>ReleaseJoystickCapture</p> <p>ClearUserFocus</p> <p>SetUserFocus</p>"},{"location":"ue4guide/application-os-generic-platform/command-line-parsing/","title":"Command line parsing","text":"<p>TArray&lt;FString&gt; Tokens, Switches;</p> <p>ParseCommandLine(FCommandLine::Get(), Tokens, Switches);</p> <p>FCommandLine::GetForLogging()</p> <p>FCommandLine::IsInitialized()</p> <p>FCommandline::Parse()</p>"},{"location":"ue4guide/application-os-generic-platform/config-files/","title":"Overview","text":"<ul> <li>Config files are key-value pairs</li> <li>Config sections are stored as [(package).(modulename).(classname)] . Ex: [/Script/ModuleName.ExampleClass]</li> <li>Classes can be decorated with UCLASS(Config=Game) to specify their variables can be read from config</li> <li>Calling SaveConfig() on a class will write all property values to the corresponding config file</li> <li>Demarcate config properties with UPROPERTY(Config)</li> <li>Derived classes can write/read config properties from parent</li> <li>Per class instance config can also be saved with the UCLASS(PerObjectConfig) stored in config as [ObjectName ClassName]</li> </ul>"},{"location":"ue4guide/application-os-generic-platform/config-files/#configuration-ini-names","title":"Configuration Ini Names","text":""},{"location":"ue4guide/application-os-generic-platform/config-files/#metadata","title":"Metadata","text":"<p>UCLASS: config=\u2026 =&gt; Ini to use defaultconfig =&gt; store in default/base ini globaluserconfig =&gt; Save object config only to global user overrides, never to local INIs (aka Unreal Engine/Engine/Config/User*.ini) perObjectConfig =&gt; Handle object configuration on a per-object basis, rather than per-class. Configdonotcheckdefaults =&gt; Determine whether on serialize to configs a check should be done on the base/defaults ini's</p> <p>UPROP: config =&gt; serialize property to config gobalconfig =&gt; load ini from baseclass only ConfigHierarchyEditable =&gt; Edit the values for the config hierarchy</p>"},{"location":"ue4guide/application-os-generic-platform/config-files/#configuration-categories","title":"Configuration Categories","text":"<ul> <li>Each config category has its own file hierarchy that specifies engine-specific/project-specific/platform-specific configurations</li> <li>Compat</li> <li>DeviceProfiles</li> <li>Editor</li> <li>EditorGameAgnostic</li> <li>EditorKeyBindings</li> <li>EditorUserSettings</li> <li>Engine</li> <li>Game</li> <li>Input</li> <li>Lightmass</li> <li> <p>Scalability</p> </li> <li> <p>Config Category code name | metadata name (aka config=Game) (Reference) C++<pre><code>GEngineIni            | Engine            /* Engine ini filename */\n\n/** Editor ini file locations - stored per engine version (shared across all projects). Migrated between versions on first run. */\nGEditorIni            | Editor            /* Editor ini filename */\nGEditorKeyBindingsIni | EditorKeyBindings /* Editor Key Bindings ini file */\nGEditorLayoutIni      | EditorLayout      /* Editor UI Layout ini filename */\nGEditorSettingsIni    | EditorSettings    /* Editor Settings ini filename */\n\n/** Editor per-project ini files - stored per project. */\nGEditorPerProjectIni | EditorPerProjectUserSettings   /* Editor User Settings ini filename */\n\nGCompatIni           | Compat\nGLightmassIni        | Lightmass         /* Lightmass settings ini filename */\nGScalabilityIni      | Scalability       /* Scalability settings ini filename */\nGHardwareIni         | Hardware          /* Hardware ini filename */\nGInputIni            | Input             /* Input ini filename */\nGGameIni             | Game              /* Game ini filename */\nGGameUserSettingsIni | GameUserSettings  /* User Game Settings ini filename */\n</code></pre></p> </li> </ul>"},{"location":"ue4guide/application-os-generic-platform/config-files/#file-hierarchy","title":"File Hierarchy","text":"<p>The configuration file hierarchy is read in starting with Base.ini, with values in later files in the hierarchy overriding earlier values. All files in the Engine folder will be applied to all projects, while project-specific settings should be in files in the project directory. Finally, all project-specific and platform-specific differences are saved out to [ProjectDirectory]/Saved/Config/[Platform]/[Category].ini</p> <p>The below file hierarchy example is for the Engine category of configuration files.</p> <ol> <li><code>Engine/Config/Base.ini</code>    Base.ini is usually empty.</li> <li><code>Engine/Config/BaseEngine.ini</code></li> <li><code>Engine/Config/[Platform]/[Platform]Engine.ini</code></li> <li><code>[ProjectDirectory]/Config/DefaultEngine.ini</code></li> <li><code>[ProjectDirectory]/Config/[Platform]/[Platform]Engine.ini</code></li> <li><code>[ProjectDirectory]/Saved/Config/[Platform]/Engine.ini</code>    The configuration file in the Saved directory only stores the project-specific and platform-specific differences in the stack of configuration files.</li> </ol> <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/Basics/ConfigurationFiles/index.html</p>"},{"location":"ue4guide/application-os-generic-platform/config-files/#syntax","title":"Syntax","text":""},{"location":"ue4guide/application-os-generic-platform/config-files/#sections-and-key-value-pairs","title":"Sections and Key-Value Pairs","text":"<p>Typical configuration files consist of sections of key-value pairs, arranged as follows:</p> INI<pre><code>[Section]\nKey=Value\n</code></pre>"},{"location":"ue4guide/application-os-generic-platform/config-files/#special-characters","title":"Special Characters","text":"<ul> <li> <p>+ - Adds a line if that property doesn't exist yet (from a previous configuration file or earlier in the same configuration file).</p> </li> <li> <p>- - Removes a line (but it has to be an exact match).</p> </li> <li> <p>. - Adds a new property.</p> </li> <li> <p>Note: . is like + except it will potentially add a duplicate line. This is useful for the bindings (as seen in DefaultInput.ini), for instance, where the bottom-most binding takes effect, so if you add something like:</p> INI<pre><code>[/Script/Engine.PlayerInput]\nBindings=(Name=\"Q\",Command=\"Foo\")\n.Bindings=(Name=\"Q\",Command=\"Bar\")\n.Bindings=(Name=\"Q\",Command=\"Foo\")\n</code></pre> <p>It will work appropriately. Using a + there would fail to add the last line, and your bindings would be incorrect. Due to configuration file combining, the above usage pattern can happen.</p> </li> <li> <p>! - Removes a property; but you don't have to have an exact match, just the name of the property.</p> </li> <li> <p>To clear an array, use ClearArray:</p> INI<pre><code>!PrimaryAssetTypesToScan=ClearArray\n</code></pre> </li> <li> <p>Escape a quote character: ~Quote~, ~OpenBracket~. Ex:</p> </li> </ul> INI<pre><code>UserDefinedChords=~OpenBracket~~Quote~BindingContext~Quote~:~Quote~PlayWorld~Quote~,~Quote~CommandName~Quote~:~Quote~PausePlaySession~Quote~,~Quote~ChordIndex~Quote~:1,~Quote~Control~Quote~:false,~Quote~Alt~Quote~:false,~Quote~Shift~Quote~:false,~Quote~Command~Quote~:false,~Quote~Key~Quote~:~Quote~None~Quote~~CloseBracket~\n</code></pre>"},{"location":"ue4guide/application-os-generic-platform/config-files/#special-variablestokens","title":"Special Variables/Tokens","text":"<p>You can use these config vars in your ini's that UE4 will replace accordingly with expanded out string</p> <ul> <li><code>%GAME%</code>: Game Name</li> <li><code>%GAMEDIR%</code>: Game Directory</li> <li><code>%ENGINEDIR%</code>: Engine Directory</li> <li><code>%ENGINEUSERDIR%</code>: User's Engine Directory</li> <li><code>%ENGINEVERSIONAGNOSTICUSERDIR%</code>: User Engine Agnostic directory</li> <li><code>%APPSETTINGSDIR%</code>: Application Settings Directory</li> </ul>"},{"location":"ue4guide/application-os-generic-platform/config-files/#comments","title":"Comments","text":"<p>Most people seem to be under the impression that the semicolon denotes comments in configuration files, but they aren't (FConfigFile::ProcessInputFileContents doesn't actually treat them, or any other string, as a comment delimiter). This behavior is intentional. Technically any character can represent a different key-value pair. Typically, a semicolon is placed at the beginning of a new line. It works like a comment, but it's not actually.</p> INI<pre><code>; This is a Comment\n; So is this!\n</code></pre> <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/Basics/ConfigurationFiles/index.html</p>"},{"location":"ue4guide/application-os-generic-platform/config-files/#command-line-switches","title":"Command Line Switches","text":""},{"location":"ue4guide/application-os-generic-platform/config-files/#override-default-behavior","title":"Override Default Behavior","text":"<ul> <li><code>-ENGLISHCOALESCED</code>: Revert to the default (English) coalesced .ini if the language-localized version cannot be found.</li> <li><code>-NOAUTOINIUPDATE</code>: Suppress prompts to update .ini files.</li> <li><code>-NOINI</code>: Do not update the .ini files.</li> <li><code>-REGENERATEINIS</code>: Forces .ini files to be regenerated</li> </ul>"},{"location":"ue4guide/application-os-generic-platform/config-files/#override-default-ini","title":"Override Default INI","text":"<p>Use another command-line argument to temporarily override which INIs are loaded by the game or editor. For example, if a custom <code>MyGame.ini</code> is to be used instead of <code>MyOldGame.ini</code>, the argument would be <code>-GAMEINI=MyGame.ini</code>. This table lists the arguments used to override the different INI files used in UE4:</p> Command-Line Argument INI Override DEFEDITORINI= Default Editor EDITORINI= Editor DEFEDITORUSERSETTINGSINI= Default EditorUserSettings EDITORUSERSETTINGSINI= EditorUserSettings DEFCOMPATINI= Default Compat COMPATINI= Compat DEFLIGHTMASSINI= Default Lightmass LIGHTMASSINI= Lightmass DEFENGINEINI= Default Engine ENGINEINI= Engine DEFGAMEINI= Default Game GAMEINI= Game DEFINPUTINI= Default Input INPUTINI= Input DEFUIINI= Default UI UIINI= UI <p>Reference From: https://docs.unrealengine.com/en-US/Programming/Basics/CommandLineArguments/index.html</p>"},{"location":"ue4guide/application-os-generic-platform/config-files/#programming","title":"Programming","text":""},{"location":"ue4guide/application-os-generic-platform/config-files/#wait-on-this-delegate-for-using-config","title":"Wait on this delegate for using Config","text":"<p>GConfig-&gt;bIsReadyForUse = true;</p> <p>FCoreDelegates::ConfigReadyForUse.Broadcast();</p>"},{"location":"ue4guide/application-os-generic-platform/config-files/#custom-config-file-name-for-a-class","title":"Custom config file name for a class","text":"<ul> <li>Specify by this:</li> </ul> <p><code>UCLASS(config=GameplayTags, defaultconfig, notplaceable)</code></p> <ul> <li>Full example getting the proper full config file path name:</li> </ul> C++<pre><code>FString RelativePath;\nif (UsesPerObjectConfig(this))\n{\n    RelativePath = GetConfigFilename(this);\n}\nelse if (this-&gt;GetClass()-&gt;HasAnyClassFlags(CLASS_DefaultConfig))\n{\n    RelativePath = this-&gt;GetClass()-&gt;GetDefaultConfigFilename();\n}\nelse if (this-&gt;GetClass()-&gt;HasAnyClassFlags(CLASS_Config))\n{\n    RelativePath = this-&gt;GetClass()-&gt;GetConfigName();\n}\n\nFString FullPath = FPaths::ConvertRelativePathToFull(RelativePath);\n</code></pre> <ul> <li>Get custom config file name &amp; load it</li> </ul> C++<pre><code>FString BebylonEngineIni;\nFConfigCacheIni::LoadGlobalIniFile(BebylonEngineIni, TEXT(\"BebylonEngine\"));\n</code></pre> <ul> <li>Get the final config file name (aka coalesced between Base*.ini, Default*.ini, User*.ini, etc) by this: IMPORTANT!! This does not take into account perObjectConfig</li> </ul> C++<pre><code>GetClass()-&gt;GetConfigName();\nuobj-&gt;GetConfigName();\n</code></pre> <ul> <li> <p><code>GetConfigFilename()</code>: !!IMPORTANT!! DO NOT USE It's supposed to take into account perObjectConfig but does not actually work. The code is ifdef'ed out and reverts to calling <code>GetConfigName()</code></p> </li> <li> <p>Get the Default*.ini config file name</p> </li> </ul> C++<pre><code>GetClass()-&gt;GetDefaultConfigFilename();\nuobj-&gt;GetDefaultConfigFilename();\n</code></pre> <ul> <li>Custom config follows same hierarchy (BaseGameplayTags.ini, DefaultGameTags.ini, Windows\\WindowsGameplayTags.ini)</li> </ul>"},{"location":"ue4guide/application-os-generic-platform/config-files/#config-file-delegates","title":"Config file delegates","text":"C++<pre><code>static FCountPreLoadConfigFileRespondersDelegate CountPreLoadConfigFileRespondersDelegate;\nstatic FPreLoadConfigFileDelegate PreLoadConfigFileDelegate;\nstatic FPreSaveConfigFileDelegate PreSaveConfigFileDelegate;\nstatic FOnFConfigFileCreated OnFConfigCreated;\nstatic FOnFConfigFileDeleted OnFConfigDeleted;\nstatic FOnApplyCVarFromIni OnApplyCVarFromIni;\n</code></pre>"},{"location":"ue4guide/application-os-generic-platform/config-files/#saving-to-custom-config-file","title":"Saving To Custom Config File","text":""},{"location":"ue4guide/application-os-generic-platform/config-files/#manually-saving","title":"Manually Saving","text":"C++<pre><code>void SaveConfig() const\n{\n  GConfig-&gt;SetString(STR_ConfigSection, STR_ConfigDirectoryKey, *LastDirectory, ConfigFilename);\n\n  FConfigSection* Sec = GConfig-&gt;GetSectionPrivate(STR_ConfigSection, true, false, ConfigFilename);\n  if (Sec)\n  {\n      Sec-&gt;Remove(NAME_ConfigRecentsFilesyKey);\n      for (int32 Index = RecentsFiles.Num() - 1; Index &gt;= 0; --Index)\n      {\n          Sec-&gt;Add(NAME_ConfigRecentsFilesyKey, *RecentsFiles[Index]);\n      }\n  }\n\n  GConfig-&gt;EmptySection(TEXT(\"Internationalization.AssetGroupCultures\"), GGameUserSettingsIni);\n  GConfig-&gt;Flush(false, GGameUserSettingsIni);\n\n  GConfig-&gt;Flush(false);\n}\n</code></pre>"},{"location":"ue4guide/application-os-generic-platform/config-files/#using-keyvaluestore","title":"Using KeyValueStore","text":"<p>The engine provides this functionality through <code>FGenericPlatformMisc::SetStoredValue/GetStoredValue</code>. Note: For Windows/iOS, this writes it out to the Registry/pList file</p> C++<pre><code>bool FGenericPlatformMisc::SetStoredValue(const FString&amp; InStoreId, const FString&amp; InSectionName, const FString&amp; InKeyName, const FString&amp; InValue)\n{\n  check(!InStoreId.IsEmpty());\n  check(!InSectionName.IsEmpty());\n  check(!InKeyName.IsEmpty());\n\n  // This assumes that FPlatformProcess::ApplicationSettingsDir() returns a user-specific directory; it doesn't on Windows, but Windows overrides this behavior to use the registry\n  const FString ConfigPath = FString(FPlatformProcess::ApplicationSettingsDir()) / InStoreId / FString(TEXT(\"KeyValueStore.ini\"));\n\n  FConfigFile ConfigFile;\n  ConfigFile.Read(ConfigPath);\n\n  FConfigSection&amp; Section = ConfigFile.FindOrAdd(InSectionName);\n\n  FConfigValue&amp; KeyValue = Section.FindOrAdd(*InKeyName);\n  KeyValue = FConfigValue(InValue);\n\n  ConfigFile.Dirty = true;\n  return ConfigFile.Write(ConfigPath);\n}\n</code></pre>"},{"location":"ue4guide/application-os-generic-platform/config-files/#get-value-from-config","title":"Get value from Config","text":"C++<pre><code>GConfig-&gt;GetBool(TEXT(\"/Script/UnrealEd.EditorLoadingSavingSettings\"), TEXT(\"bForceCompilationAtStartup\"), bNeedCompile, GEditorPerProjectIni)\nstatic const FBoolConfigValueHelper DisplayPrintStringSource(TEXT(\"Kismet\"), TEXT(\"bLogPrintStringSource\"), GEngineIni);\nGConfig-&gt;GetString(*IniSection, *(InConfigKey + TEXT(\".EditorShowFlags\")), ViewportInstanceSettings.EditorShowFlagsString, GEditorPerProjectIni);\n</code></pre>"},{"location":"ue4guide/application-os-generic-platform/config-files/#editor-helper-functions","title":"Editor Helper Functions","text":"C++<pre><code>/**\n * Save configuration out to ini files\n * @warning Must be safe to call on class-default object\n */\nvoid SaveConfig( uint64 Flags=CPF_Config, const TCHAR* Filename=NULL, FConfigCacheIni* Config=GConfig );\n\n/**\n * Saves just the section(s) for this class into the default ini file for the class (with just the changes from base)\n */\nvoid UpdateDefaultConfigFile(const FString&amp; SpecificFileLocation = \"\");\n\n/**\n * Saves just the section(s) for this class into the global user ini file for the class (with just the changes from base)\n */\nvoid UpdateGlobalUserConfigFile();\n\n/**\n * Saves just the property into the global user ini file for the class (with just the changes from base)\n */\nvoid UpdateSinglePropertyInConfigFile(const UProperty* InProperty, const FString&amp; InConfigIniName);\n\n/**\n * Get the default config filename for the specified UObject\n */\nFString GetDefaultConfigFilename() const;\n\n/**\n * Get the global user override config filename for the specified UObject\n */\nFString GetGlobalUserConfigFilename() const;\n\n/**\n * Imports property values from an .ini file.\n *\n * @param Class    the class to use for determining which section of the ini to retrieve text values from\n * @param Filename   indicates the filename to load values from; if not specified, uses ConfigClass's ClassConfigName\n * @param PropagationFlags indicates how this call to LoadConfig should be propagated; expects a bitmask of UE4::ELoadConfigPropagationFlags values.\n * @param PropertyToLoad  if specified, only the ini value for the specified property will be imported.\n */\nvoid LoadConfig( UClass* ConfigClass=NULL, const TCHAR* Filename=NULL, uint32 PropagationFlags=UE4::LCPF_None, class UProperty* PropertyToLoad=NULL );\n\n/**\n * Wrapper method for LoadConfig that is used when reloading the config data for objects at runtime which have already loaded their config data at least once.\n * Allows the objects the receive a callback that its configuration data has been reloaded.\n *\n * @param Class    the class to use for determining which section of the ini to retrieve text values from\n * @param Filename   indicates the filename to load values from; if not specified, uses ConfigClass's ClassConfigName\n * @param PropagationFlags indicates how this call to LoadConfig should be propagated; expects a bitmask of UE4::ELoadConfigPropagationFlags values.\n * @param PropertyToLoad  if specified, only the ini value for the specified property will be imported\n */\nvoid ReloadConfig( UClass* ConfigClass=NULL, const TCHAR* Filename=NULL, uint32 PropagationFlags=UE4::LCPF_None, class UProperty* PropertyToLoad=NULL );\n</code></pre>"},{"location":"ue4guide/application-os-generic-platform/config-files/#save-uproperties-manually-to-config","title":"Save UProperties manually to config","text":"C++<pre><code>void UFbxAssetImportData::SaveOptions()\n{\n  int32 PortFlags = 0;\n\n  for (UProperty* Property = GetClass()-&gt;PropertyLink; Property; Property = Property-&gt;PropertyLinkNext)\n  {\n    if (!Property-&gt;HasAnyPropertyFlags(CPF_Config))\n    {\n      continue;\n    }\n    FString Section = TEXT(\"FBX_Import_UI_Option_\") + GetClass()-&gt;GetName();\n    FString Key = Property-&gt;GetName();\n\n    const bool bIsPropertyInherited = Property-&gt;GetOwnerClass() != GetClass();\n    UObject* SuperClassDefaultObject = GetClass()-&gt;GetSuperClass()-&gt;GetDefaultObject();\n\n    UArrayProperty* Array = dynamic_cast&lt;UArrayProperty*&gt;(Property);\n    if (Array)\n    {\n      FConfigSection* Sec = GConfig-&gt;GetSectionPrivate(*Section, 1, 0, *GEditorPerProjectIni);\n      check(Sec);\n      Sec-&gt;Remove(*Key);\n\n      FScriptArrayHelper_InContainer ArrayHelper(Array, this);\n      for (int32 i = 0; i &lt; ArrayHelper.Num(); i++)\n      {\n        FString Buffer;\n        Array-&gt;Inner-&gt;ExportTextItem(Buffer, ArrayHelper.GetRawPtr(i), ArrayHelper.GetRawPtr(i), this, PortFlags);\n        Sec-&gt;Add(*Key, *Buffer);\n      }\n    }\n    else\n    {\n      TCHAR TempKey[MAX_SPRINTF] = TEXT(\"\");\n      for (int32 Index = 0; Index &lt; Property-&gt;ArrayDim; Index++)\n      {\n        if (Property-&gt;ArrayDim != 1)\n        {\n          FCString::Sprintf(TempKey, TEXT(\"%s[%i]\"), *Property-&gt;GetName(), Index);\n          Key = TempKey;\n        }\n\n        FString Value;\n        Property-&gt;ExportText_InContainer(Index, Value, this, this, this, PortFlags);\n        GConfig-&gt;SetString(*Section, *Key, *Value, *GEditorPerProjectIni);\n      }\n    }\n  }\n  GConfig-&gt;Flush(0);\n}\n</code></pre>"},{"location":"ue4guide/application-os-generic-platform/config-files/#inject-our-key-bind-into-the-debug-exec","title":"Inject our key bind into the debug exec","text":"C++<pre><code>FConfigFile* ConfigFile = nullptr;\n// Look for the first matching INI file entry\nfor (TMap&lt;FString, FConfigFile&gt;::TIterator It(*GConfig); It; ++It)\n{\n  if (It.Key().EndsWith(TEXT(\"Input.ini\")))\n  {\n    ConfigFile = &amp;It.Value();\n    break;\n  }\n}\ncheck(ConfigFile != nullptr);\nFConfigSection* Section = ConfigFile-&gt;Find(TEXT(\"/Script/Engine.PlayerInput\"));\nif (Section != nullptr)\n{\n  Section-&gt;HandleAddCommand(TEXT(\"DebugExecBindings\"), TEXT(\"(Key=F12,Command=\\\"RenderDoc.CaptureFrame\\\", Alt=true)\"), true);\n}\n</code></pre>"},{"location":"ue4guide/application-os-generic-platform/config-files/#loading-properties-manually-from-config","title":"Loading Properties manually from config","text":"C++<pre><code>void UFbxAssetImportData::LoadOptions() {}\n</code></pre>"},{"location":"ue4guide/application-os-generic-platform/config-files/#main-structs","title":"Main Structs","text":"C++<pre><code>class FConfigFile : public TMap&lt;FString,FConfigSection&gt;\nFConfigFile PlatformIniFile;\nLocalConfigCache-&gt;LoadLocalIniFile(PlatformIniFile, *ClassConfigName, true, *SelectedTargetPlatform);\n\n/**\n  * Loads and generates a destination ini file and adds it to GConfig:\n  *   - Looking on commandline for override source/dest .ini filenames\n  *   - Generating the name for the engine to refer to the ini\n  *   - Loading a source .ini file hierarchy\n  *   - Filling out an FConfigFile\n  *   - Save the generated ini\n  *   - Adds the FConfigFile to GConfig\n  *\n  * @param FinalIniFilename The output name of the generated .ini file (in Game\\Saved\\Config)\n  * @param BaseIniName The \"base\" ini name, with no extension (ie, Engine, Game, etc)\n  * @param Platform The platform to load the .ini for (if NULL, uses current)\n  * @param bForceReload If true, the destination .in will be regenerated from the source, otherwise this will only process if the dest isn't in GConfig\n  * @param bRequireDefaultIni If true, the Default*.ini file is required to exist when generating the final ini file.\n  * @param bAllowGeneratedIniWhenCooked If true, the engine will attempt to load the generated/user INI file when loading cooked games\n  * @param GeneratedConfigDir The location where generated config files are made.\n  * @return true if the final ini was created successfully.\n  */\nstatic bool LoadGlobalIniFile(FString&amp; FinalIniFilename, const TCHAR* BaseIniName, const TCHAR* Platform=NULL, bool bForceReload=false, bool bRequireDefaultIni=false, bool bAllowGeneratedIniWhenCooked=true, const TCHAR* GeneratedConfigDir = *FPaths::GeneratedConfigDir());\n\n/**\n  * Load an ini file directly into an FConfigFile, and nothing is written to GConfig or disk.\n  * The passed in .ini name can be a \"base\" (Engine, Game) which will be modified by platform and/or commandline override,\n  * or it can be a full ini filenname (ie WrangleContent) loaded from the Source config directory\n  *\n  * @param ConfigFile The output object to fill\n  * @param IniName Either a Base ini name (Engine) or a full ini name (WrangleContent). NO PATH OR EXTENSION SHOULD BE USED!\n  * @param bIsBaseIniName true if IniName is a Base name, which can be overridden on commandline, etc.\n  * @param Platform The platform to use for Base ini names, NULL means to use the current platform\n  * @param bForceReload force reload the ini file from disk this is required if you make changes to the ini file not using the config system as the hierarchy cache will not be updated in this case\n  * @return true if the ini file was loaded successfully\n  */\nstatic bool LoadLocalIniFile(FConfigFile&amp; ConfigFile, const TCHAR* IniName, bool bIsBaseIniName, const TCHAR* Platform=NULL, bool bForceReload=false);\n\n/**\n  * Load an ini file directly into an FConfigFile from the specified config folders, optionally writing to disk.\n  * The passed in .ini name can be a \"base\" (Engine, Game) which will be modified by platform and/or commandline override,\n  * or it can be a full ini filenname (ie WrangleContent) loaded from the Source config directory\n  *\n  * @param ConfigFile The output object to fill\n  * @param IniName Either a Base ini name (Engine) or a full ini name (WrangleContent). NO PATH OR EXTENSION SHOULD BE USED!\n  * @param EngineConfigDir Engine config directory.\n  * @param SourceConfigDir Game config directory.\n  * @param bIsBaseIniName true if IniName is a Base name, which can be overridden on commandline, etc.\n  * @param Platform The platform to use for Base ini names\n  * @param bForceReload force reload the ini file from disk this is required if you make changes to the ini file not using the config system as the hierarchy cache will not be updated in this case\n  * @param bWriteDestIni write out a destination ini file to the Saved folder, only valid if bIsBaseIniName is true\n  * @param bAllowGeneratedIniWhenCooked If true, the engine will attempt to load the generated/user INI file when loading cooked games\n  * @param GeneratedConfigDir The location where generated config files are made.\n  * @return true if the ini file was loaded successfully\n  */\nstatic bool LoadExternalIniFile(FConfigFile&amp; ConfigFile, const TCHAR* IniName, const TCHAR* EngineConfigDir, const TCHAR* SourceConfigDir, bool bIsBaseIniName, const TCHAR* Platform=NULL, bool bForceReload=false, bool bWriteDestIni=false, bool bAllowGeneratedIniWhenCooked = true, const TCHAR* GeneratedConfigDir = *FPaths::GeneratedConfigDir());\n\n/**\n  * Needs to be called after GConfig is set and LoadCoalescedFile was called.\n  * Loads the state of console variables.\n  * Works even if the variable is registered after the ini file was loaded.\n  */\nstatic void LoadConsoleVariablesFromINI();\n</code></pre>"},{"location":"ue4guide/application-os-generic-platform/crash-handling-crash-reporter/","title":"Crash handling crash reporter","text":""},{"location":"ue4guide/application-os-generic-platform/crash-handling-crash-reporter/#delegates","title":"Delegates:","text":"<p>// Callback when an ensure has occurred</p> <p>static FOnHandleSystemEnsure OnHandleSystemEnsure;</p> <p>// Callback when an error (crash) has occurred</p> <p>static FOnHandleSystemError OnHandleSystemError;</p> <p>Useful Functions:</p> <p>/** Whether we should generate crash reports even if the debugger is attached. */</p> <p>extern CORE_API bool GAlwaysReportCrash;</p> <p>/** Whether to use ClientReportClient rather than AutoReporter. */</p> <p>extern CORE_API bool GUseCrashReportClient;</p> <p>/** Whether we should ignore the attached debugger. */</p> <p>extern CORE_API bool GIgnoreDebugger;</p> <p>// @third party code - BEGIN Bebylon</p> <p>//Force no-handleing of exceptions so standard WER dialog comes up</p> <p>extern CORE_API bool GBBForcePostMortemDebugging;</p> <p>// @third party code - END Bebylon</p> <p>extern CORE_API TCHAR MiniDumpFilenameW[1024];</p> <p>Here is a typical timeline for a single crash:</p> <ul> <li> <p>An exception (or an assert) is triggered while running game application on the target system.</p> </li> <li> <p>A crash folder is generated with log and dump files</p> </li> <li> <p>CrashReportClient(CRC) is launched</p> </li> <li> <p>CRC sends HTTP request to the crash report server with crash files</p> </li> <li> <p>The crash files are received by CrashReportReceiver(CRR) on the server</p> </li> <li> <p>The crash files are written to the LandingZone folder</p> </li> <li> <p>CrashReportProcess(CRP) scans Landing Zone Folder and discover *new* crash folders</p> </li> <li> <p>For every crash CRP:</p> </li> <li> <p>If callstack is not symbolized, CRP executes the request to MinidumpDiagnostics (MDD)</p> </li> <li> <p>Make an HTTP request to CrashReportWebsite(CRW) to add the crash</p> </li> <li> <p>CRW add the crash to the CrashReportDatabase (CRD)</p> </li> <li> <p>Move the crash report files to Processed Folder</p> </li> </ul> <p>When the crash has gone through this chain, developer could go to the crash report website in the browser and find the crash.</p> <p>Note that for MDD to symbolize the callstack, a process need to upload the symbols to the server.</p> <p>Reference From https://wiki.unrealengine.com/Unreal_Engine_Crash_Reporter</p>"},{"location":"ue4guide/application-os-generic-platform/crash-handling-crash-reporter/#setup-custom-crash-reporter-client--minidumpdiagnostics","title":"Setup Custom Crash Reporter Client &amp; MinidumpDiagnostics","text":"<p>http://www.teal-game.com/blog/customcrashreporter</p> <p>[Engine.CrashDebugHelper] DepotRoot=[PathToSourceCode] PDBCachePath=[PathToCacheFolder] PDBCacheSizeGB=250 MinDiskFreeSpaceGB=25 DaysToDeleteUnusedFilesFromPDBCache=3 PDBCache_0_Branch=++UE4+Release PDBCache_0_ExecutablePathPattern=[PathToExecutableFolder] PDBCache_0_SymbolPathPattern=[PathToPdbFolder]</p>"},{"location":"ue4guide/application-os-generic-platform/dll-management/","title":"Setting the DLL binary path","text":"C++<pre><code>FModuleManager::SetGameBinariesDirectory(const TCHAR* InDirectory)\n{\n#if !IS_MONOLITHIC\n  // Before loading game DLLs, make sure that the DLL files can be located by the OS by adding the\n  // game binaries directory to the OS DLL search path.  This is so that game module DLLs which are\n  // statically loaded as dependencies of other game modules can be located by the OS.\n  FPlatformProcess::PushDllDirectory(InDirectory);\n\n  // Add it to the list of game directories to search\n  PendingGameBinariesDirectories.Add(InDirectory);\n#endif\n}\n\nvoid FModuleManager::AddBinariesDirectory(const TCHAR *InDirectory, bool bIsGameDirectory)\n</code></pre>"},{"location":"ue4guide/application-os-generic-platform/hooking-into-windows-message-pump/","title":"Hooking into windows message pump","text":"<p>https://github.com/ue4plugins/WindowsMessageHandlerExample</p>"},{"location":"ue4guide/application-os-generic-platform/loading-screen/","title":"Loading screen","text":"<p>https://github.com/ue4plugins/LoadingScreen</p> <p>Loading Screen:</p> <p>To show an animation between LoadMap and BeginPlay, you can bind a delegate to FCoreUObjectDelegates::PreLoadMap in your GameInstance class. This wiki page should contain all of the information you need to get that set up, and you'll be able to create an animated Slate widget since the loading screen runs on it's own thread.</p> <p>If you need the loading screen to start earlier, you'll want to look into level streaming. Essentially, you'll create a \"Loading Screen\" level that should load quickly and contain whatever animation you want. That level will then stream in the actual level in the background, and then the loading level will be unloaded and you'll transition in to gameplay. I can provide some more information on how to set that up if you'd like.</p> <p>Reference From https://udn.unrealengine.com/questions/320252/how-to-show-the-loading-screen-earlier.html</p> <p>https://wiki.unrealengine.com/Loading_Screen</p>"},{"location":"ue4guide/application-os-generic-platform/processthread-management/","title":"Processthread management","text":""},{"location":"ue4guide/application-os-generic-platform/processthread-management/#threads","title":"Threads:","text":"<p>Get Current Thread ID:</p> <ul> <li>FPlatformTLS::GetCurrentThreadId()</li> </ul> <p>Deal with Thread Local Storage/TLS: FGenericPlatformTLS()</p> <ul> <li> <p>Provides allocation, deallocation, etc</p> </li> <li> <p>TlsSlot = FPlatformTLS::AllocTlsSlot()</p> </li> <li> <p>Reinterpret_cast&lt;bla*&gt;(FPlatformTLS::GetTlsValue(TlsSlot))</p> </li> <li> <p>FPlatformTLS::SetTlsValue(TlsSlot, bladata);</p> </li> </ul>"},{"location":"ue4guide/application-os-generic-platform/readingwriting-files/","title":"Readingwriting files","text":""},{"location":"ue4guide/application-os-generic-platform/readingwriting-files/#useful-properties-that-expose-filepickers","title":"Useful properties that expose FilePickers:","text":"C++<pre><code>FFilePath (can use meta property to filter by asset type meta=(FilePathFilter=\"py\"))\n\nFDirectoryPath\n\n// Get File Info  \n        FNullReplayInfo Info;\n\nconst FString DemoPath = FPaths::Combine(*FPaths::GameSavedDir(), TEXT(\"Demos/\"));  \n        const FString StreamDirectory = FPaths::Combine(*DemoPath, *ReplayName);  \n        const FString StreamFullBaseFilename =e FPaths::Combine(*StreamDirectory, *ReplayName);  \n        const FString InfoFilename = StreamFullBaseFilename + TEXT(\".replayinfo\");\n\nTUniquePtr&lt;FArchive&gt; InfoFileArchive(IFileManager::Get().CreateFileReader(*InfoFilename));\n\nif (InfoFileArchive.IsValid() &amp;&amp; InfoFileArchive-&gt;TotalSize() != 0)  \n        {  \n                FString JsonString;  \n                *InfoFileArchive &lt;&lt; JsonString;\n\nInfo.FromJson(JsonString);  \n                Info.bIsValid = true;\n\nInfoFileArchive-&gt;Close();  \n        }\n\n// Set FriendlyName  \n        Info.FriendlyName = NewFriendlyReplayName;\n\n// Write File Info  \n        TUniquePtr&lt;FArchive&gt; ReplayInfoFileAr(IFileManager::Get().CreateFileWriter(*InfoFilename));\n\nif (ReplayInfoFileAr.IsValid())  \n        {  \n                FString JsonString = Info.ToJson();  \n                *ReplayInfoFileAr &lt;&lt; JsonString;\n\nReplayInfoFileAr-&gt;Close();  \n        }\n</code></pre> <p>Reference From https://wiki.unrealengine.com/Replay_System_Tutorial</p>"},{"location":"ue4guide/application-os-generic-platform/targetbuild-configurationplatform-properties/","title":"Targetbuild configurationplatform properties","text":"<p>Get build configuration &amp; UBT settings from C++</p> C++<pre><code>FGenericPlatformProperties, FWindowsPlatformProperties, FPlatformProperties\n\n- FPlatformProperties::IniPlatformName()\n\n- FPlatformProperties::PlatformName()\n\nITargetPlatformManagerModule* TPM = GetTargetPlatformManager();\n\n if (TPM)\n\n {\n\n const TArray&lt;ITargetPlatform\\*&gt;&amp; Platforms = TPM-&gt;GetActiveTargetPlatforms();\n\n for (int32 Index = 0; Index &lt; Platforms.Num(); ++Index)\n\n {\n\n if (Platforms\\[Index]-&gt;PackageBuild(SourceDir))\n\n }\n\n }\n\n }\n</code></pre> <p>Get build configuration &amp; UBT settings from C++ at runtime:</p> C++<pre><code> EBuildConfigurations::Type FApp::GetBuildConfiguration()\n\n {\n\n #if UE_BUILD_DEBUG\n\n return EBuildConfigurations::Debug;\n\n #elif UE_BUILD_DEVELOPMENT\n\n // Detect DebugGame using an extern variable in monolithic configurations, or a command line argument in modular configurations.\n\n #if IS_MONOLITHIC\n\n extern const bool GIsDebugGame;\n\n return GIsDebugGame? EBuildConfigurations::DebugGame : EBuildConfigurations::Development;\n\n #else\n\n return IsRunningDebug() ? EBuildConfigurations::DebugGame : EBuildConfigurations::Development;\n\n #endif\n\n #elif UE_BUILD_SHIPPING\n\n return EBuildConfigurations::Shipping;\n\n #elif UE_BUILD_TEST\n\n return EBuildConfigurations::Test;\n\n #else\n\n return EBuildConfigurations::Unknown;\n\n #endif\n\n }\n</code></pre> <p>Other useful functions:</p> <ul> <li> <p>FApp::GetBuildVersion</p> </li> <li> <p>FApp::GetBuildDate</p> </li> <li> <p>FApp::GetEpicProductIdentifier</p> </li> <li> <p>FApp::GetBranchName</p> </li> <li> <p>FApp::GetProjectName</p> </li> <li> <p>FApp::GetName() - Name of application ie UE4, Rocket, BBR</p> </li> <li> <p>FPlatformMisc::GetUBTPlatform()</p> </li> <li> <p>FPlatformMisc::GetUBTTarget()</p> </li> <li> <p>FPlatformMisc::ProjectDir()</p> </li> <li> <p>FPlatformMisc::RootDir()</p> </li> <li> <p>FPlatformMisc::EngineDir()</p> </li> <li> <p>FPlatformMisc::LaunchDir()</p> </li> <li> <p>BuildSettings::IsLicenseeVersion()</p> </li> <li> <p>BuildSettings::GetCurrentChangelist()</p> </li> <li> <p>BuildSettings::GetCompatibleChangelist()</p> </li> <li> <p>BuildSettings::GetBranchName()</p> </li> <li> <p>BuildSettings::GetBuildVersion()</p> </li> <li> <p>Also available in FBuildVersion struct</p> </li> <li> <p>Fill it by calling:</p> <p>FBuildVersion::TryRead(FBuildVersion::GetDefaultFileName(), outBldVersion)</p> </li> <li> <p>Also can use FEngineVersion::Current().GetChangelist())</p> </li> </ul>"},{"location":"ue4guide/application-os-generic-platform/useful-classes/","title":"Useful classes","text":"<p>FInteractiveProcess - launch, run, stop, exit/quit/cancel, communicate with other processes</p> <p>FMonitoredProcess - Convenience class for launching/monitoring processes. Event delegates for cancellation, completion, and output</p> <p>Note: To use these in code, you use the typedef that doesn't have generic. Ex: FPlatformMisc instead of FGenericPlatformMisc. FPlatformMisc is typedef'ed to the current platform (e.g. FWindowsPlatformMisc)</p> <p>GenericApplication</p> <p>FGenericPlatformProcess</p> <p>FGenericPlatformMisc</p> <p>FGenericPlatformProcess</p> <p>FGenericPlatformProperties</p> <p>FGenericWindow</p>"},{"location":"ue4guide/application-os-generic-platform/useful-generic-function-list/","title":"Useful generic function list","text":"<p>FPlatformProcess</p> <p>FMonitoredProcess</p> <p>FInteractiveProcess</p> <p>FApp::IsBenchmarking()</p> <p>FPlatformMisc::IsDebuggerPresent()</p> <p>FApp::IsBenchmarking()</p> <p>IsThisApplicationForeground()</p> <p>IsRunningCommandlet()</p> <p>FPlatformProcess::IsApplicationRunning(TEXT(\"EpicGamesLauncher\"))</p> <p>IsThisApplicationForeground()</p> <p>GetApplicationMemoryUsage()</p> <p>NewInterprocessSynchObject()</p> <p>CreatePipe()</p> <p>ReadPipe()</p> <p>WritePipe()</p> <p>ClosePipe()</p> <p>CreateSynchEvent()</p> <p>CreateRunnableThread()</p> <p>GetDllHandle()</p> <p>GetDllExport()</p> <p>AddDllDirectory()</p> <p>PushDllDirectory()</p> <p>PopDllDirectory()</p> <p>GenerateAppliceationPath()</p> <p>CreateProc()</p> <p>OpenProcess()</p> <p>IsProcRunning()</p> <p>WaitForProc()</p> <p>CloseProc()</p> <p>TerminateProc()</p> <p>GetProcReturnCode()</p> <p>ExecProcess()</p> <p>ExecElevatedProcess()</p> <p>LaunchFileInDefaultExternalApplication()</p> <p>ResolveNetworkPath()</p> <p>FPlatformProcess::ExecutableName()</p> <p>GenerateApplicationPath()</p> <p>CleanFileCache</p> <p>GetCurrentProcessId</p> <p>BaseDir</p> <p>UserDirUserTempDir</p> <p>UserSettingsDir</p> <p>ComputerName</p> <p>GetCurrentWorkingDirectory</p> <p>UserName</p> <p>GetBinariesSubdirectory</p> <p>GetModulesDirectory</p> <p>GetGameBundleId</p> <p>FSlateApplication::Get().GetActiveTopLevelWindow();</p>"},{"location":"ue4guide/application-os-generic-platform/window-management/","title":"Common How-To","text":"<ul> <li>Get top level window</li> </ul> C++<pre><code>FSlateApplication::Get().GetActiveTopLevelWindow()\nFSlateApplication::Get().GetInteractiveTopLevelWindows()\nFSlateApplication::Get().GetAllVisibleWindowsOrdered(AllWindows);\nTSharedPtr&lt;SWindow&gt; ParentWindow = FSlateApplication::Get().FindWidgetWindow(AsShared());\n\n// If the main frame exists parent the window to it\nTSharedPtr&lt; SWindow &gt; ParentWindow;\nif (FModuleManager::Get().IsModuleLoaded( \"MainFrame\" ) )\n{\n  IMainFrameModule&amp; MainFrame = FModuleManager::GetModuleChecked&lt;IMainFrameModule&gt;( \"MainFrame\" );\n  ParentWindow = MainFrame.GetParentWindow();\n}\n\nTSharedPtr&lt;SWindow&gt; ParentWindow = FGlobalTabmanager::Get()-&gt;GetRootWindow();\nif (ParentWindow.IsValid())\n{\n    // Parent the window to the main frame\n    FSlateApplication::Get().AddWindowAsNativeChild(NewSlateWindow, ParentWindow.ToSharedRef());\n}\nelse\n{\n    FSlateApplication::Get().AddWindow(NewSlateWindow);\n}\n</code></pre> <ul> <li>Destroy window</li> </ul> C++<pre><code>FSlateApplicationBase::Get().RequestDestroyWindow(Window);\n</code></pre> <ul> <li>Add as child window</li> </ul> C++<pre><code>FSlateApplication::Get().AddWindowAsNativeChild(BrowserWindowWidget, ParentWindow.ToSharedRef());\n</code></pre> <ul> <li>Get Application Slate Renderer (D3D, OpenGL, etc)</li> </ul> C++<pre><code>FSlateApplication::Get().GetRenderer()\n</code></pre>"},{"location":"ue4guide/application-os-generic-platform/window-management/#is-it-possible-to-choose-the-default-screen-in-a-multi-monitor-configuration","title":"Is it possible to choose the default screen in a multi monitor configuration?","text":"<p>Reference From https://answers.unrealengine.com/questions/294650/is-it-possible-to-choose-the-default-screen-in-a-m.html</p> <p>C++<pre><code> // Move window to the corresponding monitor\n\n if (GEngine &amp;&amp; GEngine-&gt;GameViewport) {\n\n int MonitorNumber = 1;\n\n FParse::Value(FCommandLine::Get(), L\"monitor=\", MonitorNumber);\n\n FDisplayMetrics Display;\n\n FDisplayMetrics::GetDisplayMetrics(Display);\n\n\n\n int8 MonitorIndex = MonitorNumber - 1;\n\nint32 CurrentMonitorWidth = Display.MonitorInfo[MonitorIndex].NativeWidth;\n\n float WidthPosition = (MonitorIndex)*Display.PrimaryDisplayWidth - CurrentMonitorWidth;\n\n\n float HeightPosition = 0.0f;\n\n\nFVector2D WindowPosition = FVector2D(WidthPosition, 0.f);\n\n GEngine-&gt;GameViewport-&gt;GetWindow()-&gt;MoveWindowTo(WindowPosition);\n\n }\n</code></pre> Reference From https://answers.unrealengine.com/questions/294650/is-it-possible-to-choose-the-default-screen-in-a-m.html</p> <p>Everything happens in UGameEngine::CreateGameViewport() which can be found in Engine\\Source\\Runtime\\Engine\\Private\\GameEngine.cpp. Now look at the following lines of code :</p> C++<pre><code>// SAVEWINPOS tells us to load/save window positions to user settings (this is disabled by default)\nint32 SaveWinPos;\nif (FParse::Value(FCommandLine::Get(), TEXT(\"SAVEWINPOS=\"), SaveWinPos) &amp;&amp; SaveWinPos &gt; 0 )\n{\n</code></pre> <p>You can see the Window-&gt;MoveWindowTo() function call which is exactly what we want. So after these lines I added the following :</p> C++<pre><code>FDisplayMetrics DisplayMetrics;\n    FSlateApplication::Get().GetDisplayMetrics(DisplayMetrics);\n \n    int MonitorNumber = 0;\n    FParse::Value(FCommandLine::Get(), L\"monitor=\", MonitorNumber);\n \n    //Reset to primary if the monitor index is invalid\n    if( MonitorNumber &gt;= DisplayMetrics.MonitorInfo.Num() || MonitorNumber &lt; 0 )\n    {\n        FString Message = \"_____ Incorrect monitor index, will use primary screen instead\";\n        UE_LOG(LogTemp, Warning, TEXT( \"%s\" ), *Message);\n        MonitorNumber = 0;\n    }\n \n    //If monitor index is 0, we default to primary screen\n    if( MonitorNumber == 0 )\n    {\n        for( int i = 0; i &lt; DisplayMetrics.MonitorInfo.Num(); i++ )\n        {\n            FString MonitorInfo = \"_____ Found monitor \\\"\" + DisplayMetrics.MonitorInfo[i].Name + \"\\\" (is primary : \";\n            MonitorInfo += FString::FromInt( DisplayMetrics.MonitorInfo[i].bIsPrimary ) + FString(\")\");\n            UE_LOG(LogTemp, Warning, TEXT( \"%s\" ), *MonitorInfo);\n \n            if( DisplayMetrics.MonitorInfo[i].bIsPrimary )\n            {\n                MonitorNumber = i + 1;\n            }\n        }\n    }\n</code></pre> <p>Reference From http://www.froyok.fr/blog/2018-01-ue4-specify-default-monitor-at-launch</p>"},{"location":"ue4guide/archived_content/unreal-engine-4-build-file-demystified-dmitry-yanovsky/","title":"Unreal Engine 4 build file demystified","text":"<p>Note: this is internet archive snapshot of Dmitry Yanovsky's article because that now redirects to NSFW spam</p> <p>In this post I\u2019ll try to describe and explain the internals of the Unreal Engine <code>*.Build.cs</code> file. There is a lot of confusion going on among the beginners and people often just copy/paste contents of this file without actually knowing what they\u2019re doing.</p> <p>This article expects the reader to have a certain level of ability in programming and to be familiar with at least the very basics of C++ language. Otherwise, you may end up being even more confused. If you\u2019ve noticed a mistake in the text or if you think that I\u2019ve got something totally wrong, I urge you to use the comments section below.</p> <p>So, what is this <code>*.Build.cs</code> file exactly?</p> <p>Unreal Engine 4 is split into different modules, each having its own <code>*.Build.cs</code> file that controls how this particular module is built. To perform project building Unreal Engine 4 uses a proprietary tool called UnrealBuildTool. This <code>*.Build.cs</code> file is a configuration file which allows to define module dependencies and include paths along with providing a number of other interesting options to the user, but in this post I would like to talk about these two in particular.</p> <p>To make it easier for you, I\u2019ve bundled together a test project with a single module in it that you can download here. It doesn\u2019t make any sense from the functional point of view but you can use it to follow along with this article and then continue experimenting with it on your own to see how different settings affect the building process.</p> <p>There is also a single convention I\u2019ll stick to in this article: when you see the word \u2018project\u2019 it means that I refer to our MyModule module. And when I explicitly say \u2018module\u2019 then it means that I\u2019m talking about other modules.</p> <p>Here is our project\u2019s <code>MyModule.Build.cs</code> file:</p> C#<pre><code>namespace UnrealBuildTool.Rules\n{\n  public class MyModule : ModuleRules\n  {\n    public MyModule (TargetInfo Target)\n    {\n      PublicDependencyModuleNames.AddRange(new string[]{ \"Core\" });\n      PrivateDependencyModuleNames.AddRange(new string[]{ });\n      PublicIncludePaths.AddRange(new string[]{ });\n      PrivateIncludePaths.AddRange(new string[]{ });\n      PublicIncludePathModuleNames.AddRange(new string[]{ });\n      PrivateIncludePathModuleNames.AddRange(new string[]{ });\n    }\n  }\n}\n</code></pre> <p>As you can see, there is a whole bunch of variables used to configure the build process. We shall talk about them one at a time, but first let\u2019s take a look at the general folder structure of a module inside Unreal Engine 4:</p> <p><code>Runtime\\Core\\Private Runtime\\Core\\Public Runtime\\Core\\Core.Build.cs</code></p> <p>Private folder (aka \u2018src\u2019) as the name implies contains the module\u2019s private implementation details which are not to be exposed to other modules. You can store not only .cpp but also .h files there, provided you don\u2019t want other modules to make use of them. Public folder (aka \u2018includes\u2019) contains a public interface that will be available to other modules.</p> <p>Now, let\u2019s talk about the options we have to control the build process.</p>"},{"location":"ue4guide/archived_content/unreal-engine-4-build-file-demystified-dmitry-yanovsky/#public-dependency-module-names","title":"Public Dependency Module Names","text":"C#<pre><code>PublicDependencyModuleNames.AddRange(new string[]{ });\n</code></pre> <p>This list contains names of other modules that your project\u2019s code in Public folder depends on.</p> <p>This list is somewhat mandatory if you plan to use Unreal Engine features in your module. The bare minimum you need is:</p> C#<pre><code>PublicDependencyModuleNames.AddRange(new string[] { \"Core\" });\n</code></pre> <p>You might already know that in order to use your game project with Unreal Engine, you need to first \u2018implement\u2019 it as a module, using the special macro:</p> C#<pre><code>IMPLEMENT_PRIMARY_GAME_MODULE( FDefaultGameModuleImpl, MyModule, \"MyModule\" );\n</code></pre> <p>This macro comes from the ModuleManager.h file which resides in the Core module of Unreal Engine 4. Thus you must have it as your dependency. The more or less standard set of modules that your project publically depends on looks like this:</p> C#<pre><code>PublicDependencyModuleNames.AddRange(new string[] { \"Core\", \"CoreUObject\", \"Engine\", \"InputCore\" });\n</code></pre> <p>Marking module as a \u201cdependency\u201d makes sure that its code gets \u201cexported\u201d with your project by the linker. In this particular case we say that our project is \u2018statically linked\u2019 to these modules.</p> <p>The compiler automatically invokes the linker as the last step of the compilation process. With static linking it resolves project\u2019s references to the code in other modules by copying it right into the project and combining different modules of the project into a single executable which can be loaded into memory. Thus it generally requires more space and memory than dynamic linking, but although it is usually faster. And more portable, because you don\u2019t have to make sure that there are all needed additional libraries on the system where the program is executed.</p>"},{"location":"ue4guide/archived_content/unreal-engine-4-build-file-demystified-dmitry-yanovsky/#private-dependency-module-names","title":"Private Dependency Module Names","text":"C#<pre><code>PrivateDependencyModuleNames.AddRange(new string[]{ });\n</code></pre> <p>This list contains names of other modules that your project\u2019s code in Private folder depends on.</p> <p>This one follows the same pattern as public dependencies but for the code in your Private folder. It means that your public interface does not need to know on which modules the project depends on in its implementation. Only the private implementation itself cares. Thus you really should not include headers from the Private dependencies list inside of your project\u2019s Public folder. Though there is nothing to stop you from doing that.</p>"},{"location":"ue4guide/archived_content/unreal-engine-4-build-file-demystified-dmitry-yanovsky/#private-include-paths","title":"Private Include Paths","text":"C#<pre><code>PrivateIncludePaths.AddRange(new string[]{ });\n</code></pre> <p>This list contains paths to header files in our project\u2019s Private folder that are exposed to our project.</p> <p>There are two syntactically correct ways how you can #include header files. One is by using double quotes (\u201c\u201d) and the second one is by using angle brackets (&lt;&gt;). Depending on which you choose, the preprocessor will behave slightly differently:</p> <p>If we pick double quotes variation then the order in which the preprocessor will search for include files looks like this:</p> <ul> <li>In the same directory as the file that contains the #include statement.</li> <li>In the directories of the currently opened include files, in the reverse order in which they were opened. The search begins in the directory of the parent include file and continues up through the directories of any grandparent include files.</li> <li>Along the path that\u2019s specified by each /I compiler option.</li> <li>Along the paths that are specified by the INCLUDE environment variable.</li> </ul> <p>If we pick angle brackets then that list gets diminished. It is mostly used for system libraries which are usually already set up via environment variable:</p> <ul> <li>Along the path that\u2019s specified by each /I compiler option.</li> <li>When compiling occurs on the command line, along the paths that are specified by the INCLUDE environment variable.</li> </ul> <p>In our project we have this header file inside of our Private folder:</p> <p>MyModule/Private/MyModulePrivateClass.h</p> <p>Let\u2019s try to include it in our MyModule/Private/MyModulePrivateClass.cpp file like this:</p> C++<pre><code>#include \"MyModulePrivateClass.h\"\n</code></pre> <p>Everything should compile just fine, because both files are in the same folder.</p> <p>But let\u2019s try to include it like this:</p> C++<pre><code>#include &lt;MyModulePrivateClass.h&gt;\n</code></pre> <p>And we will get an error message saying:</p> <p><code>fatal error C1083: Cannot open include file: 'MyModulePrivateClass.h': No such file or directory</code></p> <p>You will also get an error if you try to include a header file from the subfolder. E.g. MyModule/Private/MyModulePrivateSubfolder/MyModuleOtherPrivateClass.h</p> <p>If we try to include it in our MyModule/Private/MyModulePrivateClass.cpp, we\u2019ll get the same error as before:</p> <p><code>fatal error C1083: Cannot open include file: 'MyModuleOtherPrivateClass.h': No such file or directory</code></p> <p>We can fix it in several ways. First option is to specify the whole path, relative to the project\u2019s source root folder. Like this:</p> C++<pre><code>#include \"MyModulePrivateSubfolder/MyModuleOtherPrivateClass.h\"\n</code></pre> <p>But we can also make use of the PrivateIncludePaths specifier. If we add this line to our MyModule.Build.cs file:</p> C#<pre><code>PrivateIncludePaths.Add({ \"MyModule/Private/MyModulePrivateSubfolder\" });\n</code></pre> <p>Then our project should compile just fine and now we can include header files from this folder within our project. Same rules apply to the root Private folder. If you try to include MyModule/Private/MyModulePrivateClass.h inside any of the files from MyModule/Private/MyModulePrivateSubfolder then you\u2019ll also get this error. To fix it, you should (now knowingly) add the path to the root Private folder to our PrivateIncludePaths:</p> C#<pre><code>PrivateIncludePaths.Add({ \"MyModule/Private\" });\n</code></pre> <p>I\u2019m adding these paths one by one for the purpose of a better article flow, but you can of course add multiple entries at once using AddRange method:</p> C#<pre><code>PrivateIncludePaths.AddRange(new string[] { \"MyModule/Private\", \"MyModule/Private/MyModulePrivateSubfolder\" });\n</code></pre> <p>You might ask yourself \u2013 what magic is this? What if we didn\u2019t have the awesome UBT tool? How would we do all the above?</p> <p>Here is how.</p> <p>Unreal Engine makes use of NMake build system. You can find more information about it on the web.</p> <p>If you go to your project\u2019s properties and go under NMake category you will find \u2018Include search paths\u2019 section.</p> <p></p> <p>When you generate your project file using GenerateProjectFiles.bat or UnrealVS plugin this list gets populated by UBT depending on the contents of your project\u2019s <code>*.Build.cs</code> file.</p> <p></p> <p>But since UBT appends all these include paths using /I compiler option on each build of your project anyways, this list is mostly here for IntelliSense error-checking. So if you start getting weird IntelliSense related errors, it\u2019s a good idea to regenerate your project solution file. Perhaps, you\u2019ve recently added new include paths to your build file of which IntelliSense is not aware yet.</p> <p>But you generally don\u2019t need to regenerate your project file every time you make changes to your <code>*.Build.cs</code> file.</p>"},{"location":"ue4guide/archived_content/unreal-engine-4-build-file-demystified-dmitry-yanovsky/#public-include-paths","title":"Public Include Paths","text":"C#<pre><code>PublicIncludePaths.AddRange(new string[]{ });\n</code></pre> <p>This list contains paths to header files in our project\u2019s Public folder that are exposed to other modules.</p> <p>It follows the same rules as above with a difference that UBT is already set up in such a way that it automatically adds Public folder (and all of it subfolders) of a module to the include paths. So you generally don\u2019t need to use this specifier in your project.</p>"},{"location":"ue4guide/archived_content/unreal-engine-4-build-file-demystified-dmitry-yanovsky/#private-include-path-module-names-and-public-include-path-module-names","title":"Private Include Path Module Names and Public Include Path Module Names","text":"C#<pre><code>PrivateIncludePathModuleNames.AddRange(new string[]{ });\n</code></pre> C#<pre><code>PublicIncludePathModuleNames.AddRange(new string[]{ });\n</code></pre> <p>These lists contain names of other modules that your project\u2019s code in Private (or Public) folder may make use of but does not \u2018depend\u2019 on. E.g. a dynamically loaded plug-in module. This is what is called \u2018dynamic linking\u2019.</p> <p>With dynamic linking, the linker only saves the name of the library our project depends on and put it in the executable. Actual linking happens at runtime when the executable is run and placed in memory along with the library it depends on. With this method, you can have multiple programs share the same library. It is the natural behaviour of the so called \u201cplug-in\u201d modules.</p> <p>Phew, if you\u2019re still here \u2013 well done! Now you will knowingly work with this file in order to simplify the building process of your project.</p> <p>If you have questions or ideas for future posts like this one, feel free to leave a comment! Thank you for taking a time to read this article!</p>"},{"location":"ue4guide/build-guide/build-target-file-demystified/","title":"Build Target File Demystified","text":""},{"location":"ue4guide/build-guide/build-target-file-demystified/#useful-links","title":"Useful Links","text":"<ul> <li>Unreal Engine 4 Build File Demystified</li> <li>Plugins and ThirdParty SDKs in UE4</li> <li>Intro To UE4 Plugins</li> </ul>"},{"location":"ue4guide/build-guide/build-target-file-demystified/#project-generation","title":"Project Generation","text":"<ul> <li>UBT searches entire solution for <code>*.Build.cs</code> files</li> <li>GenerateProjectFiles.bat invokes UBT to generate Visual Studio solution files containing all modules</li> </ul>"},{"location":"ue4guide/build-guide/build-target-file-demystified/#project-compilation","title":"Project Compilation","text":"<ul> <li> <p>Visual Studio invokes UBT to:</p> </li> <li> <p>find all <code>*.Build.cs</code> files</p> </li> <li>compile and instantiate them</li> <li>create a module dependency graph</li> <li>generate compiler and linker settings</li> <li> <p>compile all C++ modules</p> </li> <li> <p>A module is compiled if it is:</p> </li> <li>a dependency of another module</li> <li>required by an enabled plug-in, or the project itself</li> </ul>"},{"location":"ue4guide/build-guide/build-target-file-demystified/#publicdependencymodulenames-vs-privatedependencymodulenames","title":"PublicDependencyModuleNames vs PrivateDependencyModuleNames","text":"<ul> <li>Asked around, got some clarification. At the end of the day, yes both private and public stuff all gets linked when you include a given module</li> <li>However, it controls include paths and defines available to a module</li> <li>So if A publicly requires B but privately requires C, the Include paths and defines specified by C don't get added to your module when you include A</li> <li>So if you had a plugin that privately included an SDK's include paths/etc., then including that plugin wouldn't make the SDKs include paths as part of your include paths.</li> <li>DynamicallyLoadedModuleNames are dynamically linked whereas others are statically/implicitly linked</li> </ul>"},{"location":"ue4guide/build-guide/build-target-file-demystified/#dynamicallyloadedmodulenames","title":"DynamicallyLoadedModuleNames","text":"<ul> <li>Public and Private dependencies are staticly linked into your project and visible to public and or private code, respectively.</li> <li>Public implies that you may also expose such functionality to whatever tools, editors or plugins are dependent on your game/module. It is also important to keep in mind that with the static linking, the header files are included.</li> <li>Dynamically loaded modules do not include the header files at link time, and instead should be treated as an external dll, loaded when needed. The key difference is that because of the static linking, if the module is missing your code will fail out.</li> </ul>"},{"location":"ue4guide/build-guide/custom-warnings-as-errors/","title":"Custom warnings as errors","text":"<p>Turns out UE4 is manually specifying which warnings to treat as errors in WindowsPlatformCompilerSetup.h</p> <p>Reference From https://answers.unrealengine.com/questions/607946/anonymous-union-with-none-trivial-type.html</p>"},{"location":"ue4guide/build-guide/how-to-set-up-build-dedicated-servers-for-windows-and-linux-for-your-ue4-game-using-windows/","title":"How to set up build dedicated servers for windows and linux for your ue4 game using windows","text":"<p>How To Set Up Build Dedicated Servers for Windows and Linux For Your UE4 Game (using Windows)</p> <p>http://allarsblog.com/2015/11/06/Support-Dedicated-Servers</p>"},{"location":"ue4guide/build-guide/locating-project-log-file-output-directory-paths/","title":"Editor Session Log","text":"<p>This log will be generated while running UE4Editor.exe or in a specific project. This file is almost always going to be included when needing a log.</p> Log Name Windows Location Mac Location UE4.log UE4-backup-YYYY.DD.MM-HR.Mn.Sc.log Engine\\Saved\\Logs\\ ~/Library/Logs/Unreal Engine/Editor/ ProjectName.log ProjectName-backup-YYYY.DD.MM-HR.Mn.Sc.log ProjectName\\Saved\\Logs\\ ~/Library/Logs/Unreal Engine/ProjectNameEditor/"},{"location":"ue4guide/build-guide/locating-project-log-file-output-directory-paths/#game-logs","title":"Game Logs","text":"<p>This log will be generated while running a Cooked/Packaged Project (ProjectName.exe or ProjectName.app) Always include this if there is an issue with running the packaged game.</p> Log Name Windows Location Mac Location ProjectName.log WindowsNoEditor/ProjectName/Saved/Logs ~/Library/Logs/ProjectName/"},{"location":"ue4guide/build-guide/locating-project-log-file-output-directory-paths/#buildcookpackage-logs","title":"Build/Cook/Package Logs","text":"<p>These logs are generated any time you Build/Cook/Package a project. File &gt;Package &gt; Platform, Editor Launch On, UFE sessions.</p> Log Name Windows Location Mac Location Cook.txt UAT_Log.txt UnrealBuildTool-YYYY.MM.DD-HH.mm.ss.txt P4 - Engine\\Programs\\AutomationTool\\Saved\\Logs Binary -%USERPROFILE%\\AppData\\Roaming\\Unreal Engine\\AutomationTool\\Logs\\ ~/Library/Logs/Unreal Engine/LocalBuildLogs/"},{"location":"ue4guide/build-guide/locating-project-log-file-output-directory-paths/#crash-logs","title":"Crash Logs","text":"<p>These are the logs that created and uploaded to CrashReporter.</p> Log Name Windows Location Mac Location diagnostics.txt minidump.dmp ProjectName.log %USERPROFILE%\\AppData\\Local\\ Microsoft\\Windows\\WER\\ReportQueue (Note: C:\\Users\\UserName\\AppData is invisible, just type the path on the address bar) P4 - Engine/Saved/Crashes/CrashReport-ProjectName/ Binary - ~/Library/Application Support/Epic/Unreal Engine/4.X/Saved/Crashes/CrashReport-ProjectName/ (Note that /Users/yourusername/Library is invisible. Hold the alt-key and from the finder menu select Go-&gt;Library)"},{"location":"ue4guide/build-guide/locating-project-log-file-output-directory-paths/#compile-logs","title":"Compile Logs","text":"<p>Any time a compile fails in Visual Studio or Xcode, copy all of the Output and paste into a txt file. Often times we only copy the last few lines that say it failed, which really doesn\u2019t give the information that devs need.</p> <p>Reference From https://wiki.unrealengine.com/Locating_Project_Logs</p>"},{"location":"ue4guide/build-guide/overview/","title":"Overview","text":"UnrealBuildTool::UnrealTargetConfiguration <code>Debug</code> <code>DebugGame</code> <code>Development</code> <code>Shipping</code> <code>Test</code> BuildConfiguration/TargetPlatformName <code>NoEditor/WindowsNoEditor/EPlatformType::Game/UE4Game</code> <code>Editor/Windows/EPlatformType::Editor/EPlatformType::Editor/UE4Editor</code> <code>Client/WindowsClient/EPlatformType::Client/UE4Client</code> <code>Server/WindowServer/EPlatformType::Server/UE4Server</code> UnrealBuildTool::UnrealTargetPlatform <code>Win64</code> <code>Win32</code> <code>PS4</code> <code>XboxOne</code> <p>Reference: UnrealEngine\\Engine\\Source\\Programs\\UnrealBuildTool\\Configuration\\UEBuildTarget.cs</p>"},{"location":"ue4guide/build-guide/overview/#incredibuild","title":"Incredibuild","text":"<ul> <li> <p>Make sure Incredibuild agents are installed on your local machine</p> </li> <li> <p>Make sure Coordinator is running on the build server</p> </li> </ul>"},{"location":"ue4guide/build-guide/overview/#build-automation","title":"Build Automation","text":"<ul> <li> <p>New script for making Installed Builds: The \u2018Rocket\u2019 build process has been re-written using our new BuildGraph script (similar in style to MSBuild scripts), which should make the process easier to follow and modify for other users who want to make their own Installed builds. The main script can be found at Engine/Build/InstalledEngineBuild.xml and can be run using one of the following command lines from AutomationTool:</p> </li> <li> <p>BuildGraph -target=\u201dMake Installed Build Win64\u201d -script=Engine/Build/InstalledEngineBuild.xml</p> </li> <li> <p>BuildGraph -target=\u201dMake Installed Build Mac\u201d -script=Engine/Build/InstalledEngineBuild.xml</p> </li> <li> <p>If you run one of these with -listonly added to the command, you will be able to see what will be built and a list of additional options you can specify. By default it will attempt to build every target platform your host machine is capable of making builds for, except for XboxOne and PS4, which are disabled by default. You can disable target platforms by adding -set:WithWin64=false to the commandline and also skip over the creation of DDC for Engine and Template content by passing -WithDDC=false.</p> </li> </ul> <p>Reference From https://forums.unrealengine.com/showthread.php?119130-Unreal-Engine-4-13-Preview&amp;p=575178&amp;viewfull=1#post575178</p> <ul> <li> <p>https://answers.unrealengine.com/questions/416396/building-binary-editor-from-source-for-artists.html</p> </li> <li> <p>https://forums.unrealengine.com/showthread.php?123490-Current-advice-for-distributing-custom-engine-builds-to-team-without-recompiling</p> </li> <li> <p>New: Using the -precompile option with UnrealBuildTool will now build all engine modules. Overriding the GetModulesToPrecompile() function from a game's target rules is no longer necessary, and has been deprecated.</p> </li> </ul> <p>Reference From https://www.unrealengine.com/blog/unreal-engine-4-11-released</p> <ul> <li> <p>BuildGraph system &amp; creating precompiled engine builds/installed builds:</p> </li> <li> <p>https://docs.unrealengine.com/latest/INT/Programming/Development/InstalledBuildReference/index.html</p> </li> <li> <p>https://docs.unrealengine.com/latest/INT/Programming/Development/BuildGraph/index.html</p> </li> <li> <p>http://jackknobel.com/How-To/BuildGraph</p> </li> <li> <p>http://jackknobel.com/BuildGraph/Building-an-installed-ue4</p> </li> <li> <p>(4.13 Deprecated) Coherent explanation on Rocket build process/GUBP: https://github.com/Kalmalyzer/UE4RocketBuild</p> </li> <li> <p>Also deprecated: GetModulesToPrecompile(). Use -precompile flag instead which automatically gets the right engine modules for recompilation</p> </li> <li> <p>UBT uses empty text files in Engine/Build to demarcate stuff as well. Ex:</p> </li> </ul> SourceDistribution.txt Whether it's a github source build? InstalledBuild.txt Whether we're using precompiled static engine libraries PerforceBuild.txt Whether Perfroce is building the engine (disables launcher autostart)"},{"location":"ue4guide/build-guide/overview/#swarm","title":"Swarm","text":"<ul> <li>Copy the /Engine/Binaries/DotNET/ directory from an existing UE4 installation to a your computer</li> </ul>"},{"location":"ue4guide/build-guide/overview/#building-configuration-with-custom-build-compiler-flags","title":"Building Configuration With Custom Build Compiler Flags","text":"<ul> <li> <p>Reference: https://docs.unrealengine.com/latest/INT/Programming/UnrealBuildSystem/TargetFiles</p> </li> <li> <p>Your Game.target.cs file configures the build environment and flags</p> </li> <li> <p>UEBuildConfiguration contains a lot of the settings you would want to modify</p> </li> <li> <p>You modify this in the SetupGlobalEnvironment() call</p> </li> <li> <p>Here's how to add flags to the build system: In TargetFile.cs,</p> </li> </ul> <p><code>IMPORTANT: Game targets will \\*not\\* have this function called if they use the shared build environment.</code> <code>See ShouldUseSharedBuildEnvironment().</code></p> C++<pre><code>public override void SetupGlobalEnvironment(\n\nTargetInfo Target,\n\nref LinkEnvironmentConfiguration OutLinkEnvironmentConfiguration,\n\nref CPPEnvironmentConfiguration OutCPPEnvironmentConfiguration\n\n) {\n\n\u2026\n\n//preprocessor defines\n\nOutCPPEnvironmentConfiguration.Definitions.Add(\"ALLOW_LOG_FILE=0\");\n\n//Compiler flags\n\nOutCPPEnvironmentConfiguration.AdditionalArguments = \"/Zm46\";\n\n\u2026\n\n}\n</code></pre> <p>DEPRECATED</p> Text Only<pre><code>//public override bool ShouldUseSharedBuildEnvironment(TargetInfo Target)\n\n//{\n\n// return false;\n\n//}\n</code></pre>"},{"location":"ue4guide/build-guide/overview/#building-lighting-from-command-line","title":"Building Lighting from Command Line","text":"<p>UE4-Editor.exe [Project Folder Path] -run=resavepackages -buildlighting -MapsOnly -ProjectOnly -AllowCommandletRendering -Map=[Name of map]</p> <p>Reference From https://wiki.unrealengine.com/LightingTroubleshootingGuide</p> <p>GenerateProjectFiles.bat</p> <ul> <li>Can take arguments to specify which version of visual studio. Ex to force generate VS 2013 / VS 2015 (use when you have multiple versions of Visual Studio):</li> </ul> <p>GenerateProjectFiles.exe - 2017</p>"},{"location":"ue4guide/build-guide/overview/#explanation-of-different-build-configurations","title":"Explanation of Different Build Configurations:","text":"<p>Builds have 2 parts which you can combine, there also some hiddden options you can set in build script</p> <p>1<sup>st</sup> part:</p> <ul> <li> <p>Development - build that is used for devlopment, you can debug with it but there might be some memory reading variable reading problems on debug</p> </li> <li> <p>Debug - Build with a lot better debug symbols setup, you should use that if you plan to debug C++ code</p> </li> <li> <p>DebugGame - not sure what that is but probably other variant of debug build</p> </li> <li> <p>Shipping - Build ready for distribution without any development stuff</p> </li> <li> <p>Test - Test build which has extra utilities for testing</p> </li> </ul> <p>2<sup>nd</sup> part:</p> <ul> <li> <p>nothing - With client and server code, without editor</p> </li> <li> <p>Editor - With everything</p> </li> <li> <p>Client - Without editor and server code, client only, with this build user wont able to set up server</p> </li> <li> <p>Server - Without editor and client, in other words dedicated server build, but note that other builds (except \"Client\" ofcorse) can function as dedicated server too</p> </li> </ul> <p>Reference From https://answers.unrealengine.com/questions/194712/differences-between-build-configurations.html</p>"},{"location":"ue4guide/build-guide/overview/#derived-data-cache","title":"Derived Data Cache","text":"<p>The Derived Data Cache (DDC) stores versions of assets in the formats used by the engine and its target platforms, as opposed to the source formats artists create that are imported into the editor and stored in .uasset files. Content stored in the DDC is disposable in that it can always be regenerated at any time using the data stored in the .uasset file. Storing these derived formats externally makes it possible to easily add or change the formats used by the engine without needing to modify the source asset file.</p>"},{"location":"ue4guide/build-guide/overview/#using-a-shared-ddc","title":"Using a Shared DDC","text":"<p>Studios should use a shared DDC that all users in a particular location can access. This way, only one person needs to build the derived asset format(s) and they are automatically available to all other users. There will occasionally be stalls when assets need to be processed, but the results are remembered and shared. So with a handful of developers or more, most people will not notice any impact.</p> <p>To set up a shared DDC, override the paths for the [DerivedDataBackendGraph] by declaring this section in your game's DefaultEngine.ini. This section is originally declared in the BaseEngine.ini where the paths are set to Epic's internal DDC share. Re-declare the section and change the paths to point to a share on your network (e.g. Path=\\\\mystudio.net\\DDC):</p> INI<pre><code>[DerivedDataBackendGraph]\nMinimumDaysToKeepFile=7\nRoot=(Type=KeyLength, Length=120, Inner=AsyncPut)\nAsyncPut=(Type=AsyncPut, Inner=Hierarchy)\nHierarchy=(Type=Hierarchical, Inner=Boot, Inner=Pak, Inner=EnginePak, Inner=Local, Inner=Shared)\nBoot=(Type=Boot, Filename=%GAMEDIR%DerivedDataCache/Boot.ddc, MaxCacheSize=256)\nLocal=(Type=FileSystem, ReadOnly=**false**, Clean=**false**, Flush=**false**, PurgeTransient=**true**, DeleteUnused=**true**, UnusedFileAge=17, FoldersToClean=-1, Path=../../../Engine/DerivedDataCache)\nShared=(Type=FileSystem, ReadOnly=**false**, Clean=**false**, Flush=**false**, DeleteUnused=**true**, UnusedFileAge=19, FoldersToClean=-1, Path=\\\\\\\\mystudio.net\\\\DDC, EnvPathOverride=UE-SharedDataCachePath)\nAltShared=(Type=FileSystem, ReadOnly=**true**, Clean=**false**, Flush=**false**, DeleteUnused=**true**, UnusedFileAge=19, FoldersToClean=-1, Path=\\\\\\\\mystudio.net\\\\DDC2, EnvPathOverride=UE-SharedDataCachePath2)\nPak=(Type=ReadPak, Filename=%GAMEDIR%DerivedDataCache/DDC.ddp)\nEnginePak=(Type=ReadPak, Filename=../../../Engine/DerivedDataCache/DDC.ddp)\n</code></pre> <p>Satellite studios working out of a single shared code base can set the UE-SharedDataCachePath environment variable to a path that all users at each location can read and write to. This allows each location to have its own shared DDC.</p> <p>For example:</p> <p>UE-SharedDataCachePath=\\\\mystudio.net\\DDC</p>"},{"location":"ue4guide/build-guide/overview/#_1","title":"Overview","text":""},{"location":"ue4guide/build-guide/overview/#building-derived-data","title":"Building Derived Data","text":"<p>You can fill your derived data caches at any time by passing the arguments below to the executable:</p> <p><code>UE4\\\\Engine\\\\Binaries\\\\Win64\\\\UE4Editor.exe MyGame -run=DerivedDataCache -fill</code></p> <p>https://docs.unrealengine.com/latest/INT/Engine/Basics/DerivedDataCache/index.html</p>"},{"location":"ue4guide/build-guide/precompiled-build-process/","title":"Precompiled Build Process","text":""},{"location":"ue4guide/build-guide/precompiled-build-process/#using-buildgraph","title":"Using BuildGraph","text":"<ol> <li>Create the installed build</li> </ol> Batchfile<pre><code>\"UnrealEngine\\Engine\\Build\\BatchFiles\\RunUAT.bat\" BuildGraph -script=\"UnrealEngine\\Engine\\Build\\InstalledEngineBuild.xml\" -target=\"Make Installed Build Win64\" -set:HostPlatformOnly=true -set:WithWin32=false -set:WithIOS=false\n</code></pre> <ol> <li>Create InstalledBuild.txt and place in UnrealEngine\\Engine\\Build</li> </ol>"},{"location":"ue4guide/build-guide/precompiled-build-process/#sans-buildgraph","title":"Sans BuildGraph","text":"Batchfile<pre><code>UnrealEngine/Engine/Binaries/DotNET/UnrealBuildTool.exe Development Win64 UE4Editor -project=\"BBR\\BBR.uproject\" -precompile\nUnrealEngine/Engine/Binaries/DotNET/UnrealBuildTool.exe Development Win64 BBR -project=\"BBR\\BBR.uproject\" -useprecompiled\nUnrealEngine/Engine/Binaries/DotNET/UnrealBuildTool.exe Development Win64 BBREditor -project=\"BBR\\BBR.uproject\" -useprecompiled\n\nUnrealEngine/Engine/Binaries/DotNET/UnrealBuildTool.exe Development Win64 BBREditorBP -project=\"BBR\\BBR.uproject\" -useprecompiled\n</code></pre>"},{"location":"ue4guide/build-guide/precompiled-build-process/#add-section-to-baseengineini","title":"Add section to BaseEngine.ini","text":"INI<pre><code>[InstalledPlatforms]\n\n+InstalledPlatformConfigurations=(PlatformName=\"Win64\", Configuration=\"Development\", PlatformType=\"Editor\")\n\n;+InstalledPlatformConfigurations=(PlatformName=\"Win64\", Configuration=\"Development\", PlatformType=\"Game\")\n</code></pre>"},{"location":"ue4guide/build-guide/precompiled-build-process/#generate-project-files","title":"Generate project files","text":"Batchfile<pre><code>UnrealEngine/Engine/Binaries/DotNET/UnrealBuildTool.exe Development Win64 BBR -project=\"UnrealEngine\\BBR\\BBR.uproject\" -useprecompiled -projectfiles -game -engine\n</code></pre> <p>Uncheck ShaderCompilerWorker dependency from BBR</p>"},{"location":"ue4guide/build-guide/resources-on-udn/","title":"Resources on udn","text":"<p>Look up Daniel Lamb's answers, he seems to be in charge of cooking/builds:</p> <p>https://udn.unrealengine.com/users/5613/daniellamb.html?answerPage=1&amp;answerPageSize=15&amp;answerSort=active</p>"},{"location":"ue4guide/build-guide/setup-light-swarm/","title":"Setup light swarm","text":""},{"location":"ue4guide/build-guide/setup-light-swarm/#setup-swarm","title":"Setup Swarm","text":"<p>http://www.srombauts.fr/2017/11/10/ue4-use-swarm-distribute-lighting-build-network</p> <p>If you use Lightmass and/or Precomputed Visibility, you can notice that map build takes a long time.</p> <p>Swarm \u2013 is a system for deployed builds, which provide ability to distribute build process between workstations in local network.</p> <p>Swarm consists of two parts: Coordinator and Agent.</p> <p>Coordinator will manage resources, and agent will be a resource.</p> <p>In general, your local network will consist of server and connected client computers.</p> <p>Some of them will be workstations for level designers, and UDK will be installed there. Others can be used as simple resource, and you don\u2019t need to install UDK on it.</p> <p>From Binaries folder, of installed UDK, get next files:</p>"},{"location":"ue4guide/build-guide/setup-light-swarm/#for-coordinator","title":"For Coordinator:","text":"<ul> <li>SwarmCoordinator.exe</li> <li>SwarmCoordinatorInterface.dll</li> </ul>"},{"location":"ue4guide/build-guide/setup-light-swarm/#for-agent","title":"For Agent:","text":"<ul> <li> <p>AgentInterface.dll</p> </li> <li> <p>SwarmAgent.exe</p> </li> <li> <p>SwarmCoordinatorInterface.dll</p> </li> <li> <p>UnrealControls.dll</p> </li> </ul> <p>Place it, for example, in C:\\Swarm\\SwarmCoordinator and C:\\Swarm\\SwarmAgent, on server (but any computer in local network can be coordinator).</p> <p>Add SwarmCoordinator.exe and SwarmAgent.exe to startup.</p> <p>Run SwarmCoordinator.exe.</p> <p></p> <p>Run SwarmAgent.exe and select Settings tab.</p> <p></p> <p>Set next values:</p> <p>CacheFolder: C:\\Swarm\\SwarmCache</p> <p>AllowedRemoteAgentGroup: Default</p> <p>AllowedRemoteAgentNames: *</p> <p>AvoidLocalExecution: True</p> <p>CoordinatorRemotingHost: SERVER (here IP or name of coordinator computer)</p> <p>Next options are very important:</p> <ul> <li>AllowedRemoteAgentGroup \u2013 group should be the same for all agents, or they will not connect.</li> <li>AllowedRemoteAgentNames \u2013 to allow any names I set *.</li> <li>AvoidLocalExecution \u2013 agent should avoid local execution to distribute task to other agents through coordinator.</li> </ul> <p>If you set ShowDeveloperMenu: True, new tab with developer options will be added.</p> <p>Most interesting options here \u2013 LocalJobsDefaultProcessorCount, LocalJobsDefaultProcessPriority, RemoteJobsDefaultProcessorCount and RemoteJobsDefaultProcessPriority, which mean count of cores for local/remote task and priority of execution/connection to task.</p> <p>If you look in coordinator now, you can see first agent, which running on this computer.</p> <p></p> <p>So, optionally, coordinator can be an agent too.</p>"},{"location":"ue4guide/build-guide/setup-light-swarm/#few-words-about-coordinators-fields","title":"Few words about coordinator\u2019s fields:","text":"<p>Name \u2013 name of connected agent.</p> <p>Group Name \u2013 name of agent group.</p> <p>Agent Version \u2013 with next UDK build it will be changed, so don\u2019t forget to update it.</p> <p>State \u2013 agent\u2019s state, it depends on whether it is assigned to current task, available or busy, closed.</p> <p>Cores for Local, Cores for Remote \u2013 count of cores available for build (set in LocalJobsDefaultProcessorCount and RemoteJobsDefaultProcessorCount).</p> <p>Look in C:\\Swarm\\SwarmAgent. Here you can see new files - SwarmAgent.DeveloperOptions.xml and SwarmAgent.Options.xml. These are options you set before.</p> <p>Now you need to install agents (but not coordinators) on other workstations.</p> <p>Get all files of SwarmAgent folder (with options files).</p> <p>Don\u2019t forget to add SwarmAgent.exe to startup.</p> <p>When setup completed, and all agents visible through coordinator, try to build any map. You will see all processes of connected agents, in this machine\u2019s agent. And instead of few hours, build takes only a few minutes.</p> <p></p> <p>Also, try to install agents only on powerful computers, it will prevent build delays, and decreases build time.</p> <p>Good luck!</p> <p>Reference From https://forums.epicgames.com/threads/965487-Setup-Swarm</p>"},{"location":"ue4guide/build-guide/static-analysis/","title":"Enabling UE4 Static Analysis","text":""},{"location":"ue4guide/build-guide/static-analysis/#manually-through-ue4","title":"Manually through UE4","text":"<ul> <li>Pass <code>-StaticAnalyzer=VisualCPP</code> (or PVSStudio) to UBT.exe build</li> <li>Make sure to Do full build of project (clean then build)</li> <li>Also make sure to disable XGE</li> <li>Can also modify buildconfiguration.xml XML<pre><code>&lt;WindowsPlatform&gt;\n&lt;StaticAnalyzer&gt;VisualCpp&lt;/StaticAnalyzer&gt;\n&lt;!-- &lt;StaticAnalyzer&gt;PVSStudio&lt;/StaticAnalyzer&gt; --&gt;\n&lt;/WindowsPlatform&gt;\n</code></pre></li> </ul>"},{"location":"ue4guide/build-guide/static-analysis/#devops-script","title":"Devops script","text":"Bash<pre><code>build.py bbr --analyzer=PVSStudio\n</code></pre>"},{"location":"ue4guide/build-guide/static-analysis/#ubt-command-line","title":"UBT Command line","text":"<p>Bash<pre><code>UnrealBuildTool.exe UE4Editor Win64 Development -staticanalyzer=pvsstudio\nUnrealBuildTool.exe UE4Editor Win64 Development -staticanalyzer=visualcpp -nodebuginfo\n</code></pre> (Reference)</p>"},{"location":"ue4guide/build-guide/static-analysis/#manually-setting-up-pvs-studio-for-static-analysis","title":"Manually setting up PVS Studio for Static Analysis","text":"<ul> <li>Download PVS Studio</li> <li>Launch standalone.exe, go to <code>Tools-&gt;Options-&gt;Registration</code></li> <li>Name: PVS-Studio Free</li> <li>Key: FREE-FREE-FREE-FREE</li> <li>Add the following comments to every .cpp file C++<pre><code>// This is an independent project of an individual developer. Dear PVS-Studio, please check it.\n// PVS-Studio Static Code Analyzer for C, C++, C#, and Java: http://www.viva64.com\n</code></pre></li> <li>for now, you need to have Incredibuild disabled</li> <li>go to BBProto.Build.cs and add <code>BuildConfiguration.bAllowXGE = false;</code></li> <li>Open a shell in the PVS Studio folder and run <code>CLMonitor.exe monitor</code></li> <li>Do a full build of BBProto project</li> <li>Go back to the shell, and type <code>CLMonitor.exe analyze -l \"sample.plog\"</code></li> <li>Double clicking sample.plog should launch the analysis results in PVS Studio</li> </ul>"},{"location":"ue4guide/build-guide/docker/docker-overview/","title":"Docker overview","text":"<p>A Comprehensive Guide to UE4 containers: https://unrealcontainers.com/docs/</p> <p>Well written docs on the ue4-docker github project: https://adamrehn.com/docs/ue4-docker/</p>"},{"location":"ue4guide/build-guide/plugins-modules/commandlet-plugin-example/","title":"Commandlet plugin example","text":"<p>Commandlet Plugin Example: https://github.com/ue4plugins/CommandletPlugin</p>"},{"location":"ue4guide/build-guide/plugins-modules/linking-external-dlls-or-libraries/","title":"Linking external dlls or libraries","text":"<p>All In One Sample on a Plugin that builds its own Third Party Lib: https://github.com/ue4plugins/MotionCueingInterface</p> <p>Dynamic DLL https://wiki.unrealengine.com/Linking_Dlls</p> <p>Plugins Overview &amp; Third Party Overview: https://www.slideshare.net/GerkeMaxPreussner/plugins-thirdparty-sdks-in-ue4</p> <p>Add header only (no dll/lib) third party stuff:</p> <ul> <li> <p>Have to make a module (look at SDL2.build.cs or Leap.Build.cs)</p> </li> <li> <p>https://forums.unrealengine.com/development-discussion/engine-source-github/36571-how-do-i-add-dynamic-libraries-to-the-engine-plugins?p=383246#post383246</p> </li> </ul> <p>Linking 3<sup>rd</sup> Third Party Static Library:</p> <p>https://wiki.unrealengine.com/Linking_Static_Libraries_Using_The_Build_System</p> <p>https://answers.unrealengine.com/questions/243103/how-to-i-link-a-third-party-library-using-the-unre.html</p> <p>https://wiki.unrealengine.com/Integrating_OpenCV_Into_Unreal_Engine_4 PublicDelayLoadDLLs.Add(\"opencv_calib3d2410d.dll\"); PublicAdditionalLibraries.Add(\"opencv_video2410d.lib\");</p> <p>NOTE: IF YOU NEED TO JUST LINK AGAINST AN EXTERNAL SET OF HEADER FILES, USE PrivateIncludePathModuleNames OR PublicIncludePathModuleNames.</p> <p>IF A HEADER NEEDS TO INCLUDE EXTERNAL HEADER AND THE HEADER IS IN A PUBLIC FOLDER, YOU HAVE TO USE PublicIncludePathModuleNames</p>"},{"location":"ue4guide/build-guide/plugins-modules/linking-external-dlls-or-libraries/#notes","title":"Notes:","text":""},{"location":"ue4guide/build-guide/plugins-modules/linking-external-dlls-or-libraries/#module-types","title":"Module Types","text":"<p>\u2022Developer \u2013 for development only \u2022Editor \u2013 for Unreal Editor only \u2022Runtime \u2013 for anything \u2022Programs \u2013 for standalone programs \u2022Third Party \u2013 for external code &amp; libs Note: The UE4 EULA prohibits inclusion of Editor modules in shipping games</p> <p>Structure of Modules</p> <ul> <li>Private folder</li> <li>Internal implementation</li> <li>Module initialization</li> <li>Pre-compiled header</li> <li>Public folder</li> <li>Interfaces</li> <li>Exported Types</li> <li>Build.cs file</li> </ul> <p>Https</p> <p>PrivateIncludePaths</p> <ul> <li>Sub-folders inside your module\u2019s Private folder</li> </ul> <p>PublicIncludePaths</p> <ul> <li>Sub-folders inside your module\u2019s Public folder (not needed)</li> </ul> <p>PrivateIncludePathModuleNames</p> <ul> <li> <p>Modules whose public headers your module\u2019s private implementation includes, but doesn\u2019t link to PublicIncludePathModuleNames</p> </li> <li> <p>Modules whose public headers your module\u2019s public interface includes, but doesn\u2019t link to</p> </li> </ul> <p>PrivateDependencyModuleNames</p> <ul> <li>Modules that your module\u2019s private implementation requires for compiling and linking</li> </ul> <p>PublicDependencyModuleNames</p> <ul> <li> <p>Modules that your module\u2019s public interface requires for compiling and linking DynamicallyLoadedModuleNames</p> </li> <li> <p>Modules that are loaded at run-time via ModuleManager (this is to ensure that they get compiled)</p> </li> </ul> <p>More options in RulesCompiler.cs</p> <p>PublicLibraryPaths</p> <ul> <li>Paths to folders containing additional libraries</li> </ul> <p>PublicAdditionalLibraries</p> <ul> <li>Additional libraries (.lib or .a files) to link against</li> </ul> <p>PublicFrameworks</p> <ul> <li>Additional XCode frameworks (iOS, macOS only)</li> </ul> <p>PublicWeakFrameworks</p> <ul> <li>Weak frameworks (for OS transition)</li> </ul> <p>PublicAdditionalShadowFiles</p> <ul> <li>Files that need to be copied for remote compilation</li> </ul> <p>RuntimeDependencies</p> <ul> <li>Runtime dependencies to be staged for a packaged build</li> </ul> <p>Structure of Plug-ins</p> <ul> <li> <p>One or more modules</p> </li> <li> <p>Plug-in descriptor</p> </li> <li> <p>Content (optional)</p> </li> <li> <p>Resources (optional)</p> </li> <li>Plug-in Descriptor</li> <li>Json file {PluginName.uplugin}</li> <li>Inside root of plug-in directory<ul> <li>Contains:</li> <li>Version information</li> <li>User friendly description</li> <li>Module loading rules</li> </ul> </li> </ul> <p>Third-Party Libraries</p> <p>Structure of Engine Dependencies</p> <p>\u2022Located in /Engine/Source/ThirdParty</p> <p>\u2022Each has its own Build.cs file</p> <p>\u2022 Just like any other module</p> <p>\u2022 Public includes (for headers to be</p> <p>compiled into dependent modules)</p> <p>\u2022 Public libraries (for libraries to be</p> <p>linked into dependent modules)</p> <p>\u2022 Optional pre-processor definitions</p> <p>Building Engine Dependencies</p> <p>\u2022Source code is often included, but\u2026</p> <p>\u2022 We provide pre-compiled libs for everything</p> <p>\u2022 UBT never compiles them when building your projects</p> <p>\u2022Internally, we pre-compile the libraries using\u2026</p> <p>\u2022 BuildThirdPartyLibs UAT script (automated)</p> <p>\u2022 Batch files and shell scripts (manual)</p> <p>\u2022 Specialized UAT scripts (i.e. for PhysX)</p> <p>\u2022Sometimes there are text files with instructions</p> <p></p> <p>Structure of Plug-in Dependencies</p> <p>\u2022Same as Engine third-party dependencies</p> <p>\u2022Same build rules</p> <p></p>"},{"location":"ue4guide/build-guide/plugins-modules/plugin-module-loading/","title":"Plugin module loading","text":"<p>You can configure the module within your uplugin file as \"LoadingPhase\": \"None\", which will prevent it from loading at startup even if the plugin itself is enabled.</p> <p>Then call FModuleManager::LoadModule in your code to load it by name when you need it.</p> <p>Reference From https://forums.unrealengine.com/development-discussion/c-gameplay-programming/87848-plug-in-versus-modules</p>"},{"location":"ue4guide/build-guide/plugins-modules/uprojectuplugin-descriptor/","title":"Uprojectuplugin descriptor","text":"<p>UEBuildTarget.cs</p> Text Only<pre><code>/// The name of the application the target is part of. For targets with bUseSharedBuildEnvironment = true, this is typically the name of the base application, eg. UE4Editor for any game editor.\n\nAppName\n\nTargetName\n\n//Root directory for the active project. Typically contains the .uproject file, or the engine root.\n\nProjectDirectory\n\nTargetRules.cs\n\nLaunchModuleName\n\nSolutionDirectory\n\nOutputPaths\n\n.ueprojectdirs\n\nSharedBuildIdFile\n\nPreBuildStepScripts\n\nPostBuildStepScripts\n\n.uproject (C# is ProjectDescriptor.cs)\n\n PreBuildSteps\n\n PostBuildSteps\n\n AdditionalPluginDirectories\n\n PreBuildSteps\n\n PostBuildSteps\n\n Modules (C# is ModuleDescriptor.cs)\n\n Type = { Default, Runtime, RuntimeNoCommandlet, RuntimeAndProgram, CookedOnly, Developer, Editor, EditorNoCommandlet, Program, ServerOnly, ClientOnly }\n\n WhitelistPlatforms/BlacklistPlatforms = { Win32, Win64, Mac, etc }\n\n WhitelistTargets/BlacklistTargets = { Game, Editor, Client, Server, Program }\n\n LoadingPhase\n\n Plugins (C# is PluginReferenceDescriptor)\n\n Name\n\n Enabled\n\n Optional\n\n WhitelistPlatforms/BlacklistPlatforms = { Win32, Win64, Mac, etc }\n\n WhitelistTargets/BlacklistTargets = { Game, Editor, Client, Server, Program }\n\n.uplugin\n\n\"CanBeUsedWithUnrealHeaderTool\" : true,\n\n-basedir=\n\n\"-BaseFromWorkingDir\")))\n</code></pre>"},{"location":"ue4guide/build-guide/ubt/automationtool-exe-unrealbuildtool-exe-reference/","title":"AutomationTool.exe Reference:","text":"<ul> <li> <p>Most of the command-line options/tools are done through engine commandlets</p> </li> <li> <p>AutomationTool.exe is what RunUAT.exe calls to cook/package, etc</p> </li> <li> <p>\"UnrealEngine\\Engine\\Binaries\\DotNET\\AutomationTool.exe\" -help will dump</p> Text Only<pre><code> Automation.ParseCommandLine: Parsing command line: -Help\n CommandUtils.LogHelp:\n Automation Help:\n Executes scripted commands\n AutomationTool.exe \\[-verbose\\] \\[-compileonly\\] \\[-p4\\] Command0 \\[-Arg0 -Arg1 -Arg2 .\\] Command1 \\[-Arg0 -Arg1 .\\] Command2 \\[-Arg0 .\\] Commandn . \\[EnvVar0=MyValue0 . EnvVarn=MyValuen\\]\n</code></pre> </li> </ul> <p>Parameters:</p> <ul> <li>verbose: Enables verbose logging</li> <li>nop4: Disables Perforce functionality (default if not run on a build machine)</li> <li>p4: Enables Perforce functionality (default if run on a build machine)</li> <li>compileonly Does not run any commands, only compiles them</li> <li>compile Dynamically compiles all commands (otherwise assumes they are already built)</li> <li>forcelocal Forces local execution</li> <li>help Displays helpe</li> <li>list Lists all available commands</li> <li>submit Allows UAT command to submit changes</li> <li>nosubmit Prevents any submit attempts</li> <li>nokill Does not kill any spawned processes on exit</li> <li>ignorejunk Prevents UBT from cleaning junk files</li> <li> <p>UseLocalBuildStorage Allows you to use local storage for your root build storage dir (default of P:\\Builds (on PC) is changed to Engine\\Saved\\LocalBuilds). Used for local testing.</p> </li> <li> <p>AutomationTool.exe -list will dump Available commands:   AnalyzeThirdPartyLibs   BlameKeyword   BuildCommonTools   ZipProjectUp   BuildCookRun   BuildDerivedDataCache   BuildPlugin   BuildTarget   BuildThirdPartyLibs   CodeSurgery   CookTarget   CopyUAT   FixupRedirects   GenerateDSYM   ListThirdPartySoftware   IPhonePackager   LauncherLocalization   Localise   MegaXGE   StageTargetCommand   TestP4_Info   GitPullRequest   TestFail   TestSuccess   TestMessage   TestRecursion   TestRecursionAuto   TestMacZip   TestP4_CreateChangelist   TestP4_StrandCheckout   TestP4_LabelDescription   TestP4_ClientOps   CleanDDC   TestTestFarm   TestArguments   TestCombinePaths   TestFileUtility   TestLog   TestChangeFileType   TestGamePerf   TestUATBuildProducts   TestWatchdogTimer   TestOSSCommands   UBT   ZeroEngineVersions   SyncSource   GenerateAutomationProject   DumpBranch   DebugSleep   TestMcpConfigs   TestBlame   TestChanges   TestKillAll   TestCleanFormalBuilds   TestStopProcess   LookForOverlappingBuildProducts   TestThreadedCopyFiles   UpdateLocalVersion   RebuildLightMaps   ListMobileDevices   UnrealSyncList   UnrealSync   BuildForUGS   CleanFormalBuilds   FinalizeInstalledBuild   StreamCopyDescription   UE4BuildUtilDummyBuildCommand   BuildGraph   Build   TempStorageTests   CleanTempStorage   TestECJobErrorParse   GUBP   TestTempStorage</p> </li> <li> <p>AutomationTool.exe -Help [Commandlet] will dump the help for that commandlet. Example dump listed below</p> </li> </ul>"},{"location":"ue4guide/build-guide/ubt/automationtool-exe-unrealbuildtool-exe-reference/#automationtoolexe--help-buildcookrununrealbuildtool-reference","title":"AutomationTool.exe -help BuildCookRun/UnrealBuildTool Reference","text":"<p>Automation.ParseCommandLine: Parsing command line: -help BuildCookRun</p> <p>Automation.Process: Setting up command environment.</p> C++<pre><code>&lt;FormatParams&gt;d\\_\\_147.MoveNext: WARNING: Duplicated help parameter \"-iterativecooking\"\n\n&lt;FormatParams&gt;d\\_\\_147.MoveNext: WARNING: Duplicated help parameter \"-device\"\n\n&lt;FormatParams&gt;d\\_\\_147.MoveNext: WARNING: Duplicated help parameter \"-RunAutomationTests\"\n\n&lt;FormatParams&gt;d\\_\\_147.MoveNext: WARNING: Duplicated help parameter \"-NoXGE\"\n</code></pre> <p>CommandUtils.LogHelp:</p> <p>BuildCookRun Help:</p>"},{"location":"ue4guide/build-guide/ubt/automationtool-exe-unrealbuildtool-exe-reference/#buildscooksruns-a-project","title":"Builds/Cooks/Runs a project.","text":"<p>For non-uprojects project targets are discovered by compiling target rule files found in the project folder.</p> <p>If -map is not specified, the command looks for DefaultMap entry in the project's DefaultEngine.ini and if not found, in BaseEngine.ini.</p> <p>If no DefaultMap can be found, the command falls back to /Engine/Maps/Entry.</p>"},{"location":"ue4guide/build-guide/ubt/automationtool-exe-unrealbuildtool-exe-reference/#parameters","title":"Parameters:","text":"<p>-project=Path Project path (required), i.e: -project=QAGame, -project=Samples\\BlackJack\\BlackJack.uproject, -project=D:\\Projects\\MyProject.uproject</p> <p>-destsample Destination Sample name</p> <p>-foreigndest Foreign Destination</p> <p>-targetplatform=PlatformName target platform for building, cooking and deployment (also -Platform)</p> <p>-servertargetplatform=PlatformName target platform for building, cooking and deployment of the dedicated server (also -ServerPlatform)</p> <p>-foreign Generate a foreign uproject from blankproject and use that</p> <p>-foreigncode Generate a foreign code uproject from platformergame and use that</p> <p>-CrashReporter true if we should build crash reporter</p> <p>-cook, -cookonthefly Determines if the build is going to use cooked data</p> <p>-skipcook use a cooked build, but we assume the cooked data is up to date and where it belongs, implies -cook</p> <p>-skipcookonthefly in a cookonthefly build, used solely to pass information to the package step</p> <p>-clean wipe intermediate folders before building</p> <p>-unattended assumes no operator is present, always terminates without waiting for something.</p> <p>-pak generate a pak file</p> <p>-signpak=keys sign the generated pak file with the specified key, i.e. -signpak=C:\\Encryption.keys. Also implies -signedpak.</p> <p>-prepak attempt to avoid cooking and instead pull pak files from the network, implies pak and skipcook</p> <p>-signed the game should expect to use a signed pak file.</p> <p>-skippak use a pak file, but assume it is already built, implies pak</p> <p>-stage put this build in a stage directory</p> <p>-skipstage uses a stage directory, but assumes everything is already there, implies -stage</p> <p>-manifests generate streaming install manifests when cooking data</p> <p>-createchunkinstall generate streaming install data from manifest when cooking data, requires -stage &amp; -manifests</p> <p>-archive put this build in an archive directory</p> <p>-build True if build step should be executed</p> <p>-noxge True if XGE should NOT be used for building</p> <p>-CookPartialgc while cooking clean up packages as we are done with them rather then cleaning everything up when we run out of space</p> <p>-CookInEditor Did we cook in the editor instead of in UAT</p> <p>-IgnoreCookErrors Ignores cook errors and continues with packaging etc</p> <p>-nodebuginfo do not copy debug files to the stage</p> <p>-separatedebuginfo output debug info to a separate directory</p> <p>-MapFile generates a *.map file</p> <p>-nocleanstage skip cleaning the stage directory</p> <p>-run run the game after it is built (including server, if -server)</p> <p>-cookonthefly run the client with cooked data provided by cook on the fly server</p> <p>-Cookontheflystreaming run the client in streaming cook on the fly mode (don't cache files locally instead force reget from server each file load)</p> <p>-fileserver run the client with cooked data provided by UnrealFileServer</p> <p>-dedicatedserver build, cook and run both a client and a server (also -server)</p> <p>-client build, cook and run a client and a server, uses client target configuration</p> <p>-noclient do not run the client, just run the server</p> <p>-logwindow create a log window for the client</p> <p>-package package the project for the target platform</p> <p>-distribution package for distribution the project</p> <p>-prereqs stage prerequisites along with the project</p> <p>-applocaldir location of prerequisites for applocal deployment</p> <p>-Prebuilt this is a prebuilt cooked and packaged build</p> <p>-deploy deploy the project for the target platform</p> <p>-getfile download file from target after successful run</p> <p>-IgnoreLightMapErrors Whether Light Map errors should be treated as critical</p> <p>-stagingdirectory=Path Directory to copy the builds to, i.e. -stagingdirectory=C:\\Stage</p> <p>-ue4exe=ExecutableName Name of the UE4 Editor executable, i.e. -ue4exe=UE4Editor.exe</p> <p>-archivedirectory=Path Directory to archive the builds to, i.e. -archivedirectory=C:\\Archive</p> <p>-archivemetadata Archive extra metadata files in addition to the build (e.g. build.properties)</p> <p>-createappbundle When archiving for Mac, set this to true to package it in a .app bundle instead of normal loose files</p> <p>-iterativecooking Uses the iterative cooking, command line: -iterativecooking or -iterate</p> <p>-CookMapsOnly Cook only maps this only affects usage of -cookall the flag</p> <p>-CookAll Cook all the things in the content directory for this project</p> <p>-SkipCookingEditorContent Skips content under /Engine/Editor when cooking</p> <p>-FastCook Uses fast cook path if supported by target</p> <p>-cmdline command line to put into the stage in UE4CommandLine.txt</p> <p>-bundlename string to use as the bundle name when deploying to mobile device</p> <p>-map map to run the game with</p> <p>-AdditionalServerMapParams Additional server map params, i.e ?param=value</p> <p>-device Devices to run the game on</p> <p>-serverdevice Device to run the server on</p> <p>-skipserver Skip starting the server</p> <p>-numclients=n Start extra clients, n should be 2 or more</p> <p>-addcmdline Additional command line arguments for the program</p> <p>-servercmdline Additional command line arguments for the program</p> <p>-clientcmdline Override command line arguments to pass to the client</p> <p>-nullrhi add -nullrhi to the client commandlines</p> <p>-fakeclient adds ?fake to the server URL</p> <p>-editortest rather than running a client, run the editor instead</p> <p>-RunAutomationTests when running -editortest or a client, run all automation tests, not compatible with -server</p> <p>-Crash=index when running -editortest or a client, adds commands like debug crash, debug rendercrash, etc based on index</p> <p>-deviceuser Linux username for unattended key genereation</p> <p>-devicepass Linux password</p> <p>-RunTimeoutSeconds timeout to wait after we lunch the game</p> <p>-SpecifiedArchitecture Determine a specific Minimum OS</p> <p>-UbtArgs extra options to pass to ubt</p> <p>-MapsToRebuildLightMaps List of maps that need light maps rebuilding</p> <p>-MapsToRebuildHLODMaps List of maps that need HLOD rebuilding</p> <p>-ForceMonolithic Toggle to combined the result into one executable</p> <p>-ForceDebugInfo Forces debug info even in development builds</p> <p>-ForceNonUnity Toggle to disable the unity build system</p> <p>-ForceUnity Toggle to force enable the unity build system</p> <p>-Licensee If set, this build is being compiled by a licensee</p> <p>-NoSign Skips signing of code/content files.</p> <ul> <li>UnrealEngine\\Engine\\Source\\Programs\\AutomationTool\\AutomationUtils\\ProjectParams.cs lists all of the parameters/options</li> </ul>"},{"location":"ue4guide/build-guide/ubt/build-target-cs-with-useful-switches-parameters/","title":"Build target cs with useful switches parameters","text":"<p>/// Enabled for builds that need to initialize the ApplicationCore module. Command line utilities do not normally need this.</p> <p>bCompileAgainstApplicationCore</p> <p>/// Specifies whether to share engine binaries and intermediates with other projects, or to create project-specific versions. By default,</p> <p>/// editor builds always use the shared build environment (and engine binaries are written to Engine/Binaries/Platform), but monolithic builds</p> <p>/// and programs do not (except in installed builds). Using the shared build environment prevents target-specific modifications to the build</p> <p>/// environment.</p> <p>//BuildEnvironment = TargetBuildEnvironment.Unique;</p> <p>//bBuildAllPlugins = true;</p> <p>//bOutputToEngineBinaries = true;</p> <p>//LinkType = TargetLinkType.Modular;</p> <p>Type = TargetType.Game;</p> <p>ExtraModuleNames.Add(\"BBR\");</p> <p>//if (UEBuildConfiguration.bBuildDeveloperTools || (Target.Configuration != UnrealTargetConfiguration.Shipping &amp;&amp; Target.Configuration != UnrealTargetConfiguration.Test))</p> <p>//{</p> <p>// ExtraModuleNames.Add(\"UnrealEnginePython\");</p> <p>// AdditionalPlugins.Add(\"UnrealEnginePython\");</p> <p>//}</p> <p>//For program targets, specify the module to launch</p> <p>//LaunchModuleName = \"...\"</p> <p>//--------------------------------------------------------------</p> <p>//Project specific Build Configuration</p> <p>//--------------------------------------------------------------</p> <p>//Config</p> <p>//RelativeEnginePath = /* ...*/;</p> <p>//Debug</p> <p>//bOmitPCDebugInfoInDevelopment = true /* d=false */;</p> <p>//bSupportEditAndContinue = false /* d=false */;</p> <p>//bDisableDebugInfoForGeneratedCode = true /* d=true */;</p> <p>//bAllowLTCG = false /* d=false */;</p> <p>//Build</p> <p>//bAllowRemotelyCompiledPCHs = true /* d=false */;</p> <p>//bUseIncrementalLinking = true /* d=false */;</p> <p>//bUseFastPDBLinking = true /* d=false */;</p> <p>//bAddFastPDBToProjects = true /* d=false */;</p> <p>//bUseUHTMakefiles = true /* d=false */;</p> <p>//bAdaptiveUnityDisablesOptimizations = true /* d=false */;</p> <p>//bUsePCHFiles = true /* d=true */;</p> <p>//bUseUnityBuild = true /* d=true */;</p> <p>//bForceUnityBuild = false /* d=false */;</p> <p>//bUseAdaptiveUnityBuild = true /* d=true */;</p> <p>//bForcePrecompiledHeaderForGameModules = true /* d=true */;</p> <p>//Debug</p> <p>//bStopXGECompilationAfterErrors = false /* d=true */;</p> <p>//bDebugBuildsActuallyUseDebugCRT = false /* d=false */;</p> <p>//OutCPPEnvironmentConfiguration.AdditionalArguments = \"/Zm850\";</p> <p>//Flags to see what's causing slow compilation</p> <p>//OutCPPEnvironmentConfiguration.AdditionalArguments = \"/d2cgsummary (/bt or /bt+)\";</p> <p>// /d1PP /d1reportAllClassLayout /d1reportSingleClassLayoutXXX</p> <p>//OutLinkEnvironment.AdditionalArguments = \"/time\" or \"/time+\" or /d2:-cgsummary</p> <p>//GlobalDefinitions.Add(\"ALLOW_LOG_FILE=0\");</p> <p>//OutCPPEnvironmentConfiguration.bOptimizeCode = false;</p>"},{"location":"ue4guide/build-guide/ubt/buildconfiguration-xml-example/","title":"Buildconfiguration xml example","text":"<p>Located at: UnrealEngine\\Engine\\Saved\\UnrealBuildTool\\BuildConfiguration.xml</p> <p>UnrealBuildTool reads settings from XML configuration files in the following locations:</p> <p>* Engine/Saved/UnrealBuildTool/BuildConfiguration.xml * *User Folder/AppData*/Roaming/Unreal Engine/UnrealBuildTool/BuildConfiguration.xml * *My Documents*/Unreal Engine/UnrealBuildTool/BuildConfiguration.xml</p> <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/UnrealBuildSystem/Configuration/index.html</p> XML<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n\n&lt;Configuration xmlns=\"https://www.unrealengine.com/BuildConfiguration\"&gt;\n\n&lt;BuildConfiguration&gt;\n\n&lt;!-- Debug --&gt;\n\n&lt;!-- &lt;bSupportEditAndContinue&gt;false&lt;/bSupportEditAndContinue&gt; /\\* d=false \\*/ --&gt;\n\n&lt;!--***&lt;bOmitPCDebugInfoInDevelopment&amp;gt;true&amp;lt;/bOmitPCDebugInfoInDevelopment&gt; /\\* d=false */ --&gt;\n\n&lt;!-- &lt;bDisableDebugInfoForGeneratedCode&gt;false&lt;/bDisableDebugInfoForGeneratedCode&gt;--&gt; &lt;!-- /* d=true \\*/ --&gt;\n\n&lt;!-- &lt;bAllowLTCG&gt;false&lt;/bAllowLTCG&gt; /\\* d=false */ --&gt;\n\n&lt;!-- Build --&gt;\n\n &lt;bAdaptiveUnityDisablesPCH&gt;false&lt;/bAdaptiveUnityDisablesPCH&gt;                        &lt;!-- d=false --&gt;\n\n&lt;ProcessorCountMultiplier&gt;1&lt;/ProcessorCountMultiplier&gt;                              &lt;!-- d=1     --&gt;\n\n &lt;!--***\n&lt;MinFilesUsingPrecompiledHeaderOverride&gt;1&lt;/MinFilesUsingPrecompiledHeaderOverride&gt;  /* d=0\n*/ --&gt;\n\n &lt;!--&lt;bFasterWithoutUnity&gt;true&lt;/bFasterWithoutUnity&gt;\n\n&lt;!--*\\*\\* &lt;bAllowRemotelyCompiledPCHs&gt;true&lt;/bAllowRemotelyCompiledPCHs&gt; /\\* d=false \\*/ --&gt;\n\n&lt;!-- &lt;bUseIncrementalLinking&gt;true&lt;/bUseIncrementalLinking&gt; /\\* d=false */ --&gt;\n\n&lt;!--**\\* &lt;bUseFastPDBLinking&gt;true&lt;/bUseFastPDBLinking&gt; /\\* d=false */ --&gt;\n\n&lt;!--*** &lt;bAddFastPDBToProjects&gt;true&lt;/bAddFastPDBToProjects&gt; /\\* d=false */ --&gt;\n\n&lt;!-- &lt;bUseUBTMakefiles&gt;true&lt;/bUseUBTMakefiles&gt; /\\* d=true */ --&gt;\n\n&lt;!--***&lt;bUseUHTMakefiles&gt;true&lt;/bUseUHTMakefiles&amp;gt; /* d=false */ --&gt;\n\n&lt;!-- &lt;bUsePCHFiles&amp;gt;true&amp;lt;/bUsePCHFiles&amp;gt; /\\* d=true \\*/ --&gt;\n\n&lt;!-- &amp;lt;bUseUnityBuild&amp;gt;true&amp;lt;/bUseUnityBuild&amp;gt; /\\* d=true */ --&gt;\n\n&lt;!-- &lt;bForceUnityBuild&amp;gt;false&amp;lt;/bForceUnityBuild&amp;gt; /\\* d=false */ --&gt;\n\n&lt;!-- &lt;bUseAdaptiveUnityBuild&amp;gt;true&amp;lt;/bUseAdaptiveUnityBuild&amp;gt; /\\* d=true \\*/ --&gt;\n\n&lt;!-- bForcePrecompiledHeaderForGameModules&gt;true&lt;/bForcePrecompiledHeaderForGameModules&gt; /* d=true \\*/ --&gt;\n\n&lt;!-- Debug --&gt;\n\n&lt;bPrintDebugInfo&gt;true&lt;/bPrintDebugInfo&gt; &lt;!-- d=false --&gt;\n\n&lt;bPrintPerformanceInfo&gt;true&lt;/bPrintPerformanceInfo&gt; &lt;!-- d=false --&gt;\n\n&lt;bStopXGECompilationAfterErrors&gt;true&lt;/bStopXGECompilationAfterErrors&gt;&lt;!-- d=true --&gt;\n\n&lt;!-- &lt;bPrintToolChainTimingInfo&gt;true&lt;/bPrintToolChainTimingInfo&gt; --&gt; &lt;!-- d=false --&gt; &lt;!-- Passes /bt+ &amp; /time+ --&gt;\n\n&lt;!-- &lt;bDebugBuildsActuallyUseDebugCRT&gt;false&lt;/bDebugBuildsActuallyUseDebugCRT&gt; /\\* d=false \\*/ --&gt;\n\n&lt;/BuildConfiguration&gt;\n\n&lt;WindowsPlatform&gt;\n\n&lt;!-- \\*\\*\\*&lt;bStrictConformanceMode&gt;true&lt;/bStrictConformanceMode&gt; --&gt;\n\n&lt;!-- \\*\\*\\*&lt;StaticAnalyzer&gt;VisualCpp&lt;/StaticAnalyzer&gt; --&gt;\n\n&lt;!-- \\*\\*\\*&lt;StaticAnalyzer&gt;PVSStudio&lt;/StaticAnalyzer&gt; --&gt;\n\n&lt;!-- &lt;Compiler&gt;VisualStudio2017&lt;/Compiler&gt; --&gt;\n\n&lt;/WindowsPlatform&gt;\n\n&lt;/Configuration&gt;\n</code></pre>"},{"location":"ue4guide/build-guide/ubt/debugging-shipping-configuration/","title":"Debugging shipping configuration","text":"<p>Turn on these settings:</p> <p>public bool bUseLoggingInShipping = true ;</p> <p>public bool bUseChecksInShipping = true ;</p> <p>Engine \\ Source \\ Runtime \\ Core \\ Public \\ Misc \\ Build.h</p> <p>#define ALLOW_CONSOLE_IN_SHIPPING 1</p> <p>#define FORCE_USE_STATS 1</p>"},{"location":"ue4guide/build-guide/ubt/engine-versionbuildid/","title":"Overview of Engine Versioning:","text":"<p>https://docs.unrealengine.com/en-us/Programming/UnrealArchitecture/Versioning-of-Assets-and-Packages</p> <ul> <li> <p>defines the explicit major/minor/patch version of the engine, plus the changelist and branch name that it was built from.</p> </li> <li> <p>Unique identifier and to infer that one engine was later than another</p> </li> <li> <p>FEngineVersion::Current(), FEngineVersion::CompatibleWith(), ENGINE_CURRENT_CL_VERSION, ENGINE_COMPATIBLE_CL_VERSION</p> </li> <li> </li> <li> <p>(aka serialization version) is as a monotonically incrementing (but manually updated) integer, and is used to write one-way upgrade code in custom UObject serialization functions</p> </li> <li> <p>should ONLY be updated by Epic, otherwise future engine merges may corrupt content.</p> </li> <li> </li> <li> <p>For licensee, similar to object version. Don't actually use this tho</p> </li> <li> </li> <li> <p>Per uobject guid; use this</p> </li> <li> </li> <li> <p>Opaque string specific to product being built. Should be used for identifying current application vs other applications built fwith same engine version</p> </li> <li> <p>BUILD_VERSION macro</p> </li> <li> <p>Default: \"{BranchName}-CL-{Changelist}\" (from Build.version)</p> </li> <li> <p>Set in Target.cs for each target</p> </li> <li> </li> <li> <p>versioning the network and replay subsystems</p> </li> <li> <p>default to the compatible engine version.</p> </li> </ul>"},{"location":"ue4guide/build-guide/ubt/engine-versionbuildid/#engine-version","title":"Engine version","text":""},{"location":"ue4guide/build-guide/ubt/engine-versionbuildid/#object-version","title":"Object version","text":""},{"location":"ue4guide/build-guide/ubt/engine-versionbuildid/#licensee-object-version","title":"Licensee object version","text":""},{"location":"ue4guide/build-guide/ubt/engine-versionbuildid/#custom-object-version","title":"Custom Object Version","text":""},{"location":"ue4guide/build-guide/ubt/engine-versionbuildid/#build-version","title":"Build Version","text":""},{"location":"ue4guide/build-guide/ubt/engine-versionbuildid/#network-version-replay-version","title":"Network version/ Replay version","text":""},{"location":"ue4guide/build-guide/ubt/engine-versionbuildid/#local-builds","title":"Local Builds","text":"<p>Unreal's tagged property serialization is tolerant to properties being added and removed, so you can load content from pretty much any version of the editor unless someone changes a custom UObject::Serialize function. Developers are adding and removing properties all the time, so we always want to prevent artists loading content that someone created with a newer version of the editor, and losing properties when it's saved out because their version of the editor didn't load it. We normally do that by embedding the build CL into the compiled binaries, and it gets saved out into any assets created with those binaries.</p> <p>Separately to that, some engine modules are discovered and loaded dynamically; commonly modules which add support for different target platforms that might be under NDA, or which may be licensed separately to the rest of the engine. Because these modules can be added or removed at any time, or moved from one location to another, we want the engine to be able to detect whether they are valid and up to date before trying to load them. We normally use the same embedded CL number to match up binaries from the same build of the engine.</p> <p>This system doesn't work for people building locally because we don't know what CL number they are on. They may have a bunch of binaries that they compiled locally, mixed in with a bunch of other binaries that they've synced from source control. To identify a valid working set of DLLs for those users, we have a randomly generated \"build id\" which gets saved into a .modules file in each output directory, and we match up the build id with the one in the executable directory before loading anything.</p> <p>There are some optimizations to try to locally recycle a build id when you're only touching game code to support a feature where you compile the engine binaries separately to the game code. To use that feature, you first build the game with the -precompile command line option to UBT, then with the -useprecompiled option every time after that.</p> <p>Anyway, the problem you're seeing is that you're using the local iteration workflow - using the \"build id\" rather than CL number - but trying to check everything in. It's not meant to maintain consistency between machines in that way; it is deliberately random for each user to avoid collisions. Your easiest workaround is to check in binaries which have a hard coded CL number instead, which will remove the need for it to use the build id entirely. In Engine/Source/Runtime/Launch/Resources/Version.h, set ENGINE_IS_LICENSEE_VERSION to 1, and BUILT_FROM_CHANGELIST to any non-zero number you like.</p> <p>I would encourage you to actually submit correctly versioned binaries to avoid accidental data loss due to the reasons I mentioned at the top though.</p> <p>https://udn.unrealengine.com/questions/310062/creating-a-custom-engine-build-for-internal-projec.html</p>"},{"location":"ue4guide/build-guide/ubt/engine-versionbuildid/#build-id","title":"Build ID","text":"<p>Unreal Engine 4 eliminates potential errors arising from outdated DLLs via the Build ID system. This system ensures that the Engine will only load DLLs that were compiled at the same time as the executable file itself, preventing not only crashes or failed library linkage, but also hard-to-track bugs that could arise from stale binaries. The Build ID is usually generated automatically at compile-time, producing a new, unique value every time the Engine is built, but it is possible to override with a manually-specified value.</p>"},{"location":"ue4guide/build-guide/ubt/engine-versionbuildid/#automatically-generated-build-id","title":"Automatically-Generated Build ID","text":"<p>At build time, every output directory containing at least one compiled DLL receives a JSON file with the \u201c.modules\u201d extension, such as \u201cUE4Editor.modules\u201d. This file lists each Module in the directory and the associated DLL for that Module, as well as a GUID for the build itself. Every time the Engine is compiled, a new GUID will be generated, so that DLLs not compiled in the same session as the executable will be recognized immediately and ignored by the Engine. When using source control to maintaining a binary build, the executable, all DLLs, and their associated \u201c.modules\u201d files must be checked in together to ensure that the Build ID matches.</p>"},{"location":"ue4guide/build-guide/ubt/engine-versionbuildid/#manually-specified-build-id","title":"Manually-Specified Build ID","text":"<p>It is possible to force your Build ID to a specific value. This can be accomplished by adding a \u201cBuildId\u201d line to your \u201cBuild/Build.version\u201d file, but it is not recommended, as it removes the check to prevent using incompatible Modules. It is particularly easy to run outdated code if using a forced Build ID with Plugins that may be shared between multiple projects.</p> <p>Reference From https://docs.unrealengine.com/en-us/Programming/UnrealArchitecture/Versioning-of-Assets-and-Packages</p>"},{"location":"ue4guide/build-guide/ubt/misc-helpful-tipsdebugging/","title":"Misc helpful tipsdebugging","text":""},{"location":"ue4guide/build-guide/ubt/misc-helpful-tipsdebugging/#performance","title":"Performance","text":"<ul> <li>Set these buildconfiguration.xml settings</li> <li><code>&lt;bPrintPerformanceInfo&gt;true&lt;/bPrintPerformanceInfo&gt;</code></li> <li><code>&lt;bLogDetailedActionStats&gt;true&lt;/bLogDetailedActionStats&gt;</code></li> <li><code>&lt;bPrintToolChainTimingInfo&gt;true&lt;/bPrintToolChainTimingInfo&gt;</code></li> </ul>"},{"location":"ue4guide/build-guide/ubt/misc-helpful-tipsdebugging/#debugging-ubtunreal-build-tool","title":"Debugging UBT/Unreal Build Tool","text":"<ul> <li> <p>Useful command line flags (put these in one line: -verbose -log=D:\\Log.txt )</p> </li> <li> <p>UE4Editor Win64 Development -WaitMutex -FromMsBuild -DEPLOY</p> </li> <li>-Verbose or -VeryVerbose</li> <li>-log=D:\\Log.txt</li> <li>-xgeexport</li> <li>-noxge</li> <li> <p>-installed</p> </li> <li> <p>Add <code>&lt;bPrintDebugInfo&gt;true&lt;bPrintDebugInfo&gt;</code></p> </li> <li> <p>Also make sure to set working directory to Engine/Source for development profile project in vs</p> </li> </ul>"},{"location":"ue4guide/build-guide/ubt/misc-helpful-tipsdebugging/#export-documentation-for-build-configtargetrulescsmodulerulescs-props","title":"Export documentation for build config/targetrules.cs/modulerules.cs props","text":"<p>Use these cmdline switches:</p> <ul> <li>buildconfigurationdoc=D:\\buildcfgdoc.txt</li> <li>modulerulesdoc=D:\\modulerulesdoc.txt</li> <li>targetrulesdoc=D:\\targetrulesdoc.txt</li> </ul>"},{"location":"ue4guide/build-guide/ubt/misc-helpful-tipsdebugging/#verbose-logging","title":"Verbose Logging","text":"<ul> <li>Add -verbose cmdline</li> <li>If using RunUAT, add -UbtArgs=\"-verbose\" and -VeryVerbose</li> <li><code>&lt;bLogDetailedActionStats&gt;true&lt;/bLogDetailedActionStats&gt;</code></li> <li><code>&lt;bPrintDebugInfo&gt;true&lt;/bPrintDebugInfo&gt;</code></li> <li>Log File will be at: Engine/Programs/UnrealBuildTool/Log.txt</li> </ul>"},{"location":"ue4guide/build-guide/ubt/misc-helpful-tipsdebugging/#debugging-outdated-files","title":"Debugging outdated files","text":"<p>If you run UBT with the -verbose option, it should print out a message showing the files that it considers out of date that trigger a build. Something like this:</p> <p><code>VERBOSE: UE4Editor-Core-Win64-Debug.lib: Prerequisite PCH.Core.h.obj is newer than the last execution of the action: 24/08/2017 13:06:43 vs 23/08/2017 12:41:24</code></p>"},{"location":"ue4guide/build-guide/ubt/misc-helpful-tipsdebugging/#build--environment-variables","title":"Build &amp; Environment variables","text":"<p>Build steps can use \\((EngineDir),\\)(ProjectDir), \\((TargetName),\\)(TargetPlatform), \\((TargetConfiguration),\\)(TargetType), $(ProjectFile).</p> <p>In your Build.cs/Target.cs files, you can call <code>Utils.ExpandVariables(MyStringWithVars)</code> to expand the build/project variables in your own string</p>"},{"location":"ue4guide/build-guide/ubt/misc-helpful-tipsdebugging/#debugging-compile-flags--link-switches","title":"Debugging compile flags &amp; link switches","text":"<p>Would probably debug this by running UnrealBuildTool with the -xgeexport option. This will export a list of actions that need to be executed (in a format for consumption by Incredibuild, but that doesn't matter). That should show you the command line that produces every output file (or give you paths to the response files used to generate each).</p>"},{"location":"ue4guide/build-guide/ubt/misc-helpful-tipsdebugging/#debugging-frequent-rebuilds","title":"Debugging Frequent Rebuilds:","text":"<p>We made a change for 4.20 that always writes out this file; I didn't realize it didn't make it into the 4.19 release.</p> <p>In 4.19, you should be able to add the \"-verbose -log=D:\\Log.txt\" arguments to the build command line to output the file (unfortunately it's very verbose, and writes to stdout as well, which we also fixed in 4.20). There should be log output saying things like \"Produced item XXX was produced by outdated command line\", describing everything that needed to be rebuilt. Can you reproduce the bug and attach the output?</p> <p>The other option would be to look at the ActionGraph.IsActionOutdated() function in UBT. This function contains all the log output we're looking for - if you change all the Log.TraceLog() calls to Log.TraceInformation(), it will output the messages to stdout. You may have to place a breakpoint in this function to be able to debug what is changing.</p> <p>Reference From https://udn.unrealengine.com/questions/436096/frequent-ubt-code-rebuilds.html</p>"},{"location":"ue4guide/build-guide/ubt/misc-helpful-tipsdebugging/#module-includeheader-paths","title":"Module Include/Header Paths:","text":"<ul> <li> <p>Header include paths no longer automatically bring every subdirectory (for perf in building)</p> </li> <li> <p><code>bLegacyPublicIncludePaths = false;</code> is the setting that controls it in .Target.cs</p> </li> <li> <p>All entries in Public/PrivateIncludePaths are full paths, most easily done with \"using System.IO;\" at the top, then Path.Combine(ModuleDirectory, \"relative/path\")</p> </li> <li> <p>Commandlet to migrate old codebase to full path header includes:</p> </li> </ul> <p><code>RunUAT.bat RebasePublicIncludePaths -Project=\"path/to/temp-project.uproject\" -UpdateDir=\"path/to/temp-project/Plugins\" -write</code></p> <p>Reference From https://twitter.com/kantandev/status/1020017126806032384</p>"},{"location":"ue4guide/build-guide/ubt/misc-helpful-tipsdebugging/#how-ubt-builds-rulesobjects-modules-targets","title":"How UBT Builds RulesObjects, Modules, Targets","text":"<p>Useful functions/files:</p> <ul> <li>RulesCompiler.cs:</li> </ul> C#<pre><code>CreateProjectRulesAssembly(),\nCreateEngineRulesAssembly(), FindAllRulesFiles(),\nCreateTarget(), CreateTargetRules(), CreateTargetRulesAssembly()\n</code></pre> <ul> <li>RulesAssembly.cs</li> </ul>"},{"location":"ue4guide/build-guide/ubt/project-generator-options/","title":"Project generator options","text":"<p>Command params are parsed in:</p> <p>protected virtual void ConfigureProjectFileGeneration( String[] Arguments, ref bool IncludeAllPlatforms )</p> <p>abstract class ProjectFileGenerator</p> C++<pre><code>{\n\n /// Global static that enables generation of project files. Doesn't actually compile anything.\n\n /// This is enabled only via UnrealBuildTool command-line.\n\n public static bool bGenerateProjectFiles = false;\n\n /// True if we're generating lightweight project files for a single game only, excluding most engine code, documentation, etc.\n\n public bool bGeneratingGameProjectFiles = false;\n\n /// Optional list of platforms to generate projects for\n\n readonly List&amp;lt;UnrealTargetPlatform&amp;gt; ProjectPlatforms = new List&amp;lt;UnrealTargetPlatform&amp;gt;();\n\n /// When bGeneratingGameProjectFiles=true, this is the game name we're generating projects for\n\n protected string GameProjectName = null;\n\n /// Global static that only adds platforms that are supported when generating a given target.\n\n /// This was the old behavior, and it resulted in scenarios where having an unsupported platform selected\n\n /// in the platform drop-down would silently 'switch' to building Win32.\n\n /// The new behavior is to add all platforms when generating a target, and then check if it is supported\n\n /// at build time. If it is not, then a BuildException is thrown informing the user of an unsupported platform.\n\n /// NOTE: This only matters when using \"-AllProjects\". It can increase the project file load times though, because of all\n\n /// of the extra project configuration combinations we need to store\n\n public static bool bCreateDummyConfigsForUnsupportedPlatforms = true;\n\n /// Whether we should include configurations for \"Test\" and \"Shipping\" in generated projects (pass \"-NoShippingConfigs\" to disable this)\n\n public static bool bIncludeTestAndShippingConfigs = true;\n\n /// True if intellisense data should be generated (takes a while longer)\n\n bool bGenerateIntelliSenseData = true;\n\n /// True if we should include documentation in the generated projects\n\n \\[XmlConfigFile\\]\n\n protected bool bIncludeDocumentation = false;\n\n /// True if all documentation languages should be included in generated projects, otherwise only \"INT\" will be included\n\n bool bAllDocumentationLanguages = false;\n\n /// True if build targets should pass the -useprecompiled argument\n\n public static bool bUsePrecompiled = false;\n\n /// True if we should include engine source in the generated solution\n\n protected bool bIncludeEngineSource = true;\n\n /// True if shader source files should be included in the generated projects\n\n protected bool bIncludeShaderSource = true;\n\n /// True if build system files should be included\n\n bool bIncludeBuildSystemFiles = true;\n\n /// True if we should include config files (.ini files) in the generated project\n\n protected bool bIncludeConfigFiles = true;\n\n /// True if we should include localization files (.int/.kor/etc files) in the generated project\n\n bool bIncludeLocalizationFiles = false;\n\n /// True if we should include template files (.template files) in the generated project\n\n protected bool bIncludeTemplateFiles = true;\n\n /// True if we should include program projects in the generated solution\n\n protected bool IncludeEnginePrograms = true;\n\n /// True if we should include .NET Core projects in the generated solution\n\n bool bIncludeDotNETCoreProjects = false;\n\n /// True if we should reflect \"Source\" sub-directories on disk in the master project as master project directories.\n\n /// This arguably adds some visual clutter to the master project, but is truer to the on-disk file organization.\n\n bool bKeepSourceSubDirectories = true;\n\n /// Relative path to the directory where the master project file will be saved to\n\n public static DirectoryReference MasterProjectPath = UnrealBuildTool.RootDirectory; // We'll save the master project to our \"root\" folder\n\n /// Name of the UE4 engine project that contains all of the engine code, config files and other files\n\n public static readonly string EngineProjectFileNameBase = \"UE4\";\n\n /// Name of the UE4 enterprise project that contains all of the enterprise code, config files and other files\n\n public static readonly string EnterpriseProjectFileNameBase = \"Studio\";\n\n /// When ProjectsAreIntermediate is true, this is the directory to store generated project files\n\n // @todo projectfiles: Ideally, projects for game modules/targets would be created in the game's Intermediate folder!\n\n public static DirectoryReference IntermediateProjectFilesPath = DirectoryReference.Combine( UnrealBuildTool.EngineDirectory, \"Intermediate\", \"ProjectFiles\" );\n\n /// Path to timestamp file, recording when was the last time projects were created.\n\n public static string ProjectTimestampFile = Path.Combine(IntermediateProjectFilesPath.FullName, \"Timestamp\");\n\n /// Global static new line string used by ProjectFileGenerator to generate project files.\n\n public static readonly string NewLine = Environment.NewLine;\n\n /// If true, we'll parse subdirectories of third-party projects to locate source and header files to include in the\n\n /// generated projects. This can make the generated projects quite a bit bigger, but makes it easier to open files\n\n /// directly from the IDE.\n\n bool bGatherThirdPartySource = false;\n\n /// Indicates whether we should process dot net core based C\\# projects\n\n bool AllowDotNetCoreProjects = false;\n\n /// Name of the master project file (e.g. base file name for the solution file for Visual Studio, or the Xcode project file on Mac)\n\n protected string MasterProjectName = \"UE4\";\n\n}\n</code></pre>"},{"location":"ue4guide/build-guide/ubt/useful-build-switchesspeed-up-recompilation/","title":"Useful build switchesspeed up recompilation","text":""},{"location":"ue4guide/build-guide/ubt/useful-build-switchesspeed-up-recompilation/#1-use-iwyu","title":"1. Use IWYU:","text":"<p>https://docs.unrealengine.com/latest/INT/Programming/UnrealBuildSystem/IWYUReferenceGuide/index.html</p> <p>This means forward declaring everything, moving everything into implementation files as much as possible. For templated things, we forward declare them and then declare explicit template specializations. Obv not a good practice for library code, but for our own modules, it's fine.</p> <p>You'll run into issues forward declaring references to structs in blueprint callable functions because of the generated thunk code from UHT so that's unavoidable. Also, inlined functions need to be in the header.</p>"},{"location":"ue4guide/build-guide/ubt/useful-build-switchesspeed-up-recompilation/#2-useful-build-switches","title":"2. Useful build switches","text":"<ul> <li> <p>clean</p> </li> <li> <p>CleanLocal</p> </li> <li> <p>unattended</p> </li> </ul> <p>Cooking:</p> <ul> <li> <p>DirectoriesToCook</p> </li> <li> <p>Compressed</p> </li> <li> <p>UnversionedCookedContent</p> </li> <li> <p>NumCookersToSpawn</p> </li> <li> <p>IterateSharedCookedBuild</p> </li> </ul> <p>Staging:</p> <ul> <li> <p>prereqs</p> </li> <li> <p>iterativedeploy</p> </li> </ul> <p>Automation running:</p> <p>-skipserver</p> <p>-noclient</p> <p>-noserver</p> <p>-device</p> <p>-serverdevice</p> <p>-numclients=n</p> <p>-nullrhi</p> <p>-addcmdline</p> <p>-servercmdline</p> <p>-logwindow</p> <p>the nuclear option is bOmitPCDebugInfoInDevelopment if you're iterating. For dev+debug, I turn on fastpdblinking &amp; useUHTMakeFiles &amp; bUseIncrementalLinking. In VS2017, it should be even faster</p> <p>Just be careful with fastlinked PDBs if you share them with other devs bc that'll break. Build machine should also not use fastlinked pdbs</p> <p>Also, bUseUBTMakefiles = true =&gt; means you have to force regenerate UBT Makefiles when you invalidate them.</p> <p>/// Events that can invalidate the 'UBT Makefile':</p> <p>///                - Adding/removing .cpp files</p> <p>///                - Adding/removing .h files with UObjects</p> <p>///                - Adding new UObject types to a file that didn't previously have any</p> <p>///                - Changing global build settings (most settings in this file qualify.)</p> <p>///                - Changed code that affects how Unreal Header Tool works</p> <p>///</p> <p>You can force regeneration of the 'UBT Makefile' by passing the '-gather' argument, or simply regenerating project files</p> <p>//Config</p> <p>//BuildConfiguration.RelativeEnginePath = /* ...*/;</p> <p>//Debug</p> <p>//---BuildConfiguration.bOmitPCDebugInfoInDevelopment = true /* d=false */;</p> <p>//BuildConfiguration.bSupportEditAndContinue = false /* d=false */;</p> <p>//BuildConfiguration.bDisableDebugInfoForGeneratedCode = true /* d=true */;</p> <p>//BuildConfiguration.bAllowLTCG = false /* d=false */;</p> <p>//Build</p> <p>bEnforceIWYU = true;</p> <p>PCHUsage = ModuleRules.PCHUsageMode.UseExplicitOrSharedPCHs;</p> <p>BuildConfiguration.ProcessorCountMultiplier = 2 /* d=1 */;</p> <p>//---MinFilesUsingPrecompiledHeaderOverride = 1;</p> <p>//---bFasterWithoutUnity = true;</p> <p>//---BuildConfiguration.bAllowRemotelyCompiledPCHs = true /* d=false */;</p> <p>BuildConfiguration.bUseIncrementalLinking = true /* d=false */;</p> <p>BuildConfiguration.bUseFastPDBLinking = true /* d=false */;</p> <p>BuildConfiguration.bAddFastPDBToProjects = true /* d=false */;</p> <p>BuildConfiguration.bUseUBTMakefiles = true /* d=true */;</p> <p>BuildConfiguration.bUseUHTMakefiles = true /* d=false */;</p> <p>//BuildConfiguration.bUsePCHFiles = true /* d=true */;</p> <p>//BuildConfiguration.bUseUnityBuild = true /* d=true */;</p> <p>//BuildConfiguration.bForceUnityBuild = false /* d=false */;</p> <p>//BuildConfiguration.bUseAdaptiveUnityBuild = true /* d=true */;</p> <p>//BuildConfiguration.bForcePrecompiledHeaderForGameModules = true /* d=true */;</p> <p>BuildConfiguration.bPrintDebugInfo = true /* d=false */;</p> <p>BuildConfiguration.bPrintPerformanceInfo = true /* d=false */;</p> <p>BuildConfiguration.bStopXGECompilationAfterErrors = false /* d=true */;</p> <p>BuildConfiguration.bPrintToolChainTimingInfo = true /* d=false (adds /bt+ &amp;/time &amp; /d2cgsummary) */</p> <p>//BuildConfiguration.bEnableCodeAnalysis = true /* d=false */;</p> <p>//BuildConfiguration.bRunUnrealCodeAnalyzer = true /* d=false */;</p> <p>//BuildConfiguration.bUCACheckUObjectThreadSafety = true /* d=false */;</p> <p>//BuildConfiguration.bUCACheckPCHFiles = true /* d=false */;</p> <p>//BuildConfiguration.UCAUsageThreshold = 0.0f /* d=100.0 */;</p> <p>//BuildConfiguration.UCAModuleToAnalyze = \"BBR\" /* d=\"\" */;</p>"},{"location":"ue4guide/build-guide/utilities/build-binary-only-plugin-distribution/","title":"Building the plugin","text":"<p>The first stage is to build the plugin for distribution in the normal manner. This can be done using the UnrealBuildTool with the following command:</p> <p>UE4Dir\\Engine\\Build\\BatchFiles\\RunUAT.bat BuildPlugin -Rocket -Plugin=Plugin.uplugin -TargetPlatforms=Win64 -Package=OutputDir</p> <p>where UE4Dir is the directory where UE4 is installed and OutputDir is the name of the directory you want the resulting build to be placed. The OutputDir will contain the source code, binaries, intermediate files and any extra required content your plugin needs to run. You would normally distribute this entire folder to users.</p>"},{"location":"ue4guide/build-guide/utilities/build-binary-only-plugin-distribution/#removing-the-source","title":"Removing the source","text":"<p>In our case we want to remove the source. However, not all the source should be removed.</p> <p>For each module within the Source directory, the Private directory should be deleted, but whether the corresponding Public/Classes folders should be removed depends on whether your module offers any functionality that can be used directly from C++.</p> <p>For example, in our main Mercuna module we have several custom actor types and components that users can create and use in their code, so we leave the Source/Mercuna/Public directory in place. Whereas our MercunaPathfinding module is an internal module, so we delete Source/MercunaPathfinding/Public.</p> <p>Finally, you will need to leave the *.build.cs file intact for UE4 to be able to recognise the module.</p>"},{"location":"ue4guide/build-guide/utilities/build-binary-only-plugin-distribution/#editor-only","title":"Editor Only","text":"<p>In our case we go an extra step and also delete the non-editor binaries (Binaries\\Win64\\*.lib) and non-editor intermediate files (Intermediate\\Build\\Win64\\UE4). This allows users to run the plugin in the Unreal editor, but prevents them from creating a package game. This is perfect for us as we want users to be able to integrate the Mercuna evaluation into their active game projects and try it out, but we don\u2019t want them to be able to create an actual game build that they could sell/distribute. Once they have purchased a licence from us we will supply either the missing files, or more commonly share with them the full source.</p> <p>Finally we zip up the directory, ready to be still to users to try out Mercuna. For us the final content of our zip is:</p> <ul> <li> <p>**Binaires/Win64/**UE4Editor.modules</p> </li> <li> <p>**Binaires/Win64/**UE4Editor-Mercuna.dll</p> </li> <li> <p>**Binaires/Win64/**UE4Editor-Mercuna.pdb</p> </li> <li> <p>Content</p> </li> <li> <p>Intermediate/Build/Win64/UE4Editor</p> </li> <li> <p>Resources</p> </li> <li> <p>Source/Mercuna/Public</p> </li> <li> <p>**Source/Mercuna/**Mercuna.Build.cs</p> </li> <li> <p>Mercuna.uplugin</p> </li> </ul>"},{"location":"ue4guide/build-guide/utilities/build-binary-only-plugin-distribution/#limitations","title":"Limitations","text":"<p>Since you are not supplying the source that UE4 expects, there are several limitations of this method to be aware of:</p> <ol> <li> <p>This approach has been only tested on Windows, and resulting the compiled binaries are Windows only. This is not a problem for us, as restricting our evaluation version to Windows only is what we want.</p> </li> <li> <p>The resulting binary plugin can only be used as an Engine plugin. If the plugin is used as a Game plugin then UE4 will try to build it when compiling the game and fail. Actually a bug in the UnrealBuildTool for versions before UE4.20 meant that using it as a game plugin worked, sadly this has been fixed.</p> </li> <li> <p>The binary plugin only works with the same version of the engine it was compiled with. If you build your plugin using the Epic launcher version of UE4, then it doesn\u2019t work with custom versions of the engine or people that have built the engine from source code. Thankfully it does work for all minor point releases, e.g. 4.20.X, so we only have to release an update when major UE4 versions are released.</p> </li> </ol> <p>Reference From: https://mercuna.com/building-binary-plugins-in-unreal-engine-4</p>"},{"location":"ue4guide/build-guide/utilities/devops-build-automation/","title":"Useful UBT Flags","text":"<p>Some useful flags that we might need when we get Jenkins running:</p> <p>UBT or RunUAT or AutomationTool.exe</p> <ul> <li><code>-build</code></li> <li><code>-compile</code></li> <li><code>-NoHotReloadFromIDE</code></li> <li><code>-NoHotReload</code></li> <li><code>-nocompileeditor</code></li> <li><code>-nocompile</code></li> <li><code>-skipcompile</code></li> <li><code>-NoDDC</code></li> <li><code>-CleanLocal</code></li> <li><code>-NoXGE (Just for code analysis)</code></li> <li><code>-NoSign</code></li> <li><code>-rununrealcodeanalyzer (BuildConfiguration.bRunUnrealCodeAnalyzer = true;)</code></li> <li><code>-precompile</code></li> <li><code>-enablecodeanalysis (BuildConfiguration.bEnableCodeAnalysis = true;)</code></li> </ul>"},{"location":"ue4guide/build-guide/utilities/devops-build-automation/#buildgraph","title":"BuildGraph","text":"<ul> <li><code>-target=\"Make Installed Build Win64\" (with default InstalledEngineBuild.xml)</code></li> <li><code>-set:HostPlatformOnly=true</code></li> <li><code>-set:WithWin32=false</code></li> <li><code>-set:WithIOS=false</code></li> <li><code>-set:PublishDir=\"L:\\\\\\_Programming\\\\RocketBuilds\\\\\"</code></li> </ul>"},{"location":"ue4guide/build-guide/utilities/devops-build-automation/#scratchpad-notes","title":"ScratchPad Notes","text":""},{"location":"ue4guide/build-guide/utilities/devops-build-automation/#using-buildgraph","title":"Using BuildGraph","text":"Batchfile<pre><code>\"UnrealEngine\\\\Engine\\\\Build\\\\BatchFiles\\\\RunUAT.bat\" BuildGraph -script=\"UnrealEngine\\\\Engine\\\\Build\\\\InstalledEngineBuild.xml\" -target=\"Make Installed Build Win64\" -set:HostPlatformOnly=true -set:WithWin32=false -set:WithIOS=false\n</code></pre> <p>Create InstalledBuild.txt and place in Engine\\Build</p>"},{"location":"ue4guide/build-guide/utilities/devops-build-automation/#sans-buildgraph","title":"Sans BuildGraph","text":"Batchfile<pre><code>UnrealEngine/Engine/Binaries/DotNET/UnrealBuildTool.exe Development Win64 UE4Editor -project=\"BBR\\\\BBR.uproject\" -precompile\nUnrealEngine/Engine/Binaries/DotNET/UnrealBuildTool.exe Development Win64 BBR -project=\"BBR\\\\BBR.uproject\" -useprecompiled\nUnrealEngine/Engine/Binaries/DotNET/UnrealBuildTool.exe Development Win64 BBREditor -project=\"BBR\\\\BBR.uproject\" -useprecompiled\nUnrealEngine/Engine/Binaries/DotNET/UnrealBuildTool.exe Development Win64 BBREditorBP -project=\"BBR\\\\BBR.uproject\" -useprecompiled\n</code></pre>"},{"location":"ue4guide/build-guide/utilities/devops-build-automation/#add-section-to-baseengineini","title":"Add section to BaseEngine.ini","text":"INI<pre><code>[InstalledPlatforms]\n+InstalledPlatformConfigurations=(PlatformName=\"Win64\", Configuration=\"Development\", PlatformType=\"Editor\")\n;+InstalledPlatformConfigurations=(PlatformName=\"Win64\", Configuration=\"Development\", PlatformType=\"Game\")\n</code></pre>"},{"location":"ue4guide/build-guide/utilities/devops-build-automation/#generate-project-files","title":"Generate project files","text":"Batchfile<pre><code>UnrealEngine/Engine/Binaries/DotNET/UnrealBuildTool.exe Development Win64 BBR -project=\"BBR\\\\BBR.uproject\" -useprecompiled -projectfiles -game -engine\n</code></pre> <p>Uncheck ShaderCompilerWorker dependency from BBR</p> <p>Problems:</p> <ul> <li>ShaderCompilerWorker is generated as a dependency to the GameProject. This causes project build to error out with -useprecompiled:</li> </ul> Batchfile<pre><code>2&gt; EXEC : error : No modules found to build. All requested binaries were already built.\n</code></pre> <ul> <li>After VS compile, editor shows dialog error box saying game-dlls have been built with a different version of the engine. It kicks off a compilation that ends very quickly but still shouldn't be there at all</li> </ul> <p>Editor Module   Plugin   Editor BP Module</p> <ul> <li>How do I build all the variants (e.g. a Rocket Build) so that artists can build client/server/game/editor + development/debug/debuggame/shipping/test variants?</li> <li>How do I decrease the size of the rocket build?</li> </ul>"},{"location":"ue4guide/build-guide/utilities/kl-automation-scripts/","title":"Kl automation scripts","text":""},{"location":"ue4guide/build-guide/utilities/kl-automation-scripts/#overview","title":"Overview","text":"<p>CLI is like git. It takes the form of [scriptname.py] options &lt;group&gt; options &lt;subcommand&gt;</p> <p>ex: bcr -c debug -r iterate build bbr</p> <p>TLDR:</p> <p>After you run through [Setup] section, for a full proof Clean, Rebuild, &amp; Cook:</p> <p>bcr -c debug -r clean script fullbuild</p> <p>bcr -c debug -r iterate script fullbuild</p> <p>bcr -c debug -r iterate -t standalone cook bybook --maps=0-Lobby+U-Master-Goldfingers</p> <p>bcr -c debug -r iterate -t server cook bybook --maps=0-Lobby+U-Master-Goldfingers</p>"},{"location":"ue4guide/build-guide/utilities/kl-automation-scripts/#setup","title":"Setup","text":"<ol> <li>Installation: these libs on your machine from an admin console:</li> </ol> <p>Python is packaged in ThirdParty folder</p> <p>ftype Python.File=\"E:\\GameDev\\knl\\src\\Bebylon\\ThirdParty\\Python3\\python.exe\" \"%1\" %*</p> <p>assoc .py=Python.File</p> <p>Add PATHEXT system variable and append \".PY\" extension to the list.</p> <p>refreshenv</p> <p>Optional: I have explorer set so that running launching a python script will automatically open it through the terminal.</p> <p>Here are details how you can use assoc .py &amp; ftype Python.File to set it up</p> <p>https://stackoverflow.com/questions/1934675/how-to-execute-python-scripts-in-windows</p> <p>After setting assoc and ftype via cmd verify it by launching regedit and checking this key Computer\\HKEY_CLASSES_ROOT\\Python.File\\shell\\open\\command it should read : \"&lt;path to Bebylon&gt;\\ThirdParty\\Python3\\python.exe\" \"%1\" %* with &lt;path to Bebylon&gt; replaced with the correct path for your drive.</p> <ol> <li>Configure Machine: Go to Bebylon\\Devops\\BuildAutomation\\BuildAutomation\\ in a terminal and execute:</li> </ol> <p>setupmachine config_envars</p> <p>setupmachine switch_engver</p>"},{"location":"ue4guide/build-guide/utilities/kl-automation-scripts/#help","title":"Help","text":"<p>Just pass --help at the end of any command/subcommand string</p> Text Only<pre><code>bcr --help\n\nbcr build --help\n\nbcr build bbr -help\n</code></pre>"},{"location":"ue4guide/build-guide/utilities/kl-automation-scripts/#build","title":"Build","text":"<p>3 main targets to build.</p> <ol> <li> <p>tools (usually not necessary)</p> </li> <li> <p>engine aka plain UE4Editor (this is actually what's used for cooking &amp; building Game/Server/Client, not BBREditor. This is only needed to build if you make code changes in the base engine)</p> </li> <li> <p>bbr (bebylon specific targets: BBR (standalone game), BBREditor (editor), BBRServer (server), BBRClient(client))</p> </li> </ol> <p>You can pass a configuration: debug, debuggame, development, test, shipping to build the corresponding variant</p> <p>You can also choose the rebuild method: iterate (incremental), rebuild (clean+rebuild), clean (just deletes the files)\\</p> <p>The 'rebuild' option is still flakey because UAT sometimes deletes downstream dependencies but doesn't rebuild them. If you want to do a rebuild, do the command with -r clean and then again with -r iterate</p>"},{"location":"ue4guide/build-guide/utilities/kl-automation-scripts/#here-are-the-main-commands-for-building","title":"Here are the main commands for building:","text":"<p>bcr -c debug -r iterate -t server build tools</p> <p>bcr -c debug -r iterate -t editor build engine</p> <p>bcr -c debug -r iterate -t editor build bbr</p> <p>bcr -c debug -r iterate -t standalone build bbr</p> <p>bcr -c debug -r iterate -t server build bbr</p>"},{"location":"ue4guide/build-guide/utilities/kl-automation-scripts/#heres-a-script-utility-that-does-a-full-clean--build-on-all-targets","title":"Here's a script utility that does a full clean + build on all targets:","text":"<p>bcr -c debug -r clean script fullbuild</p> <p>bcr -c debug -r iterate script fullbuild</p>"},{"location":"ue4guide/build-guide/utilities/kl-automation-scripts/#cook","title":"Cook","text":"<p>Here's the command for cooking</p> <p>bcr -c debug -r iterate -t standalone cook bybook --maps=0-Lobby+U-Master-Goldfingers</p>"},{"location":"ue4guide/build-guide/utilities/kl-automation-scripts/#run","title":"Run","text":""},{"location":"ue4guide/build-guide/utilities/kl-automation-scripts/#notes","title":"Notes","text":"<p>When using tuple arguments in click, you must provide a default value for the option; otherwise, you will get an error if you do not specify the argument on the command line. It will not choose to pass None or a tuple of None.</p>"},{"location":"ue4guide/development-setup/visual-studio-tips-for-ue4/","title":"General Tips","text":"<ul> <li> <p>Adding a button to attach the debugger directly to the UE4 instance</p> </li> <li> <p>Print Blueprint/BP Callstack</p> </li> <li> <p>Crash Course Visual Assist Shortcuts</p> </li> <li>ALT+G - Context menu to go to places where a function/variable/class is referenced</li> <li>ALT+SHIFT+G - Context menu to see the declaration/implementation of a function, see instances of a type, see base symbols (classes/function/variables it might be inheriting from)</li> <li>ALT+O - Toggle Header/Code file</li> <li>ALT+SHIFT+S - Search for symbols (Really useful!)</li> <li>ALT+SHIFT+F -</li> <li>ALT+SHIFT+Q</li> <li>ALT+SHIFT+R - Rename symbol</li> <li>CTRL+SHIFT+V</li> </ul>"},{"location":"ue4guide/development-setup/visual-studio-tips-for-ue4/#configuration","title":"Configuration","text":"<ul> <li>USF/USH/HLSL intellisense</li> <li>https://marketplace.visualstudio.com/items?itemName=TimGJones.HLSLToolsforVisualStudio</li> <li>Enable USF/USH in options menu:</li> <li> <p>Screenshot: </p> </li> <li> <p>Setting up Visual Studio with UE4: https://docs.unrealengine.com/latest/INT/Programming/Development/VisualStudioSetup</p> </li> <li> <p>Add exceptions to Windows Defender to your project directories, for devenv, unrealheader tool, msbuild, cl.exe, incredibuild, link.exe</p> </li> <li>Our devops scripts (setupmachine.py) automatically does this.</li> <li> <p>Here's a powershell script that does the same thing</p> </li> <li> <p>VS2017 Disable lightweight solutions</p> </li> <li> <p>Make Visual Studio 2017 faster: https://medium.com/burak-tasci/tweaking-the-environment-to-speed-up-visual-studio-79cd1920fed9</p> </li> <li>Adding a button to attach the debugger directly to the UE4 instance</li> <li>Print Blueprint/BP Callstack</li> </ul>"},{"location":"ue4guide/development-setup/visual-studio-tips-for-ue4/#visual-assist","title":"Visual Assist","text":""},{"location":"ue4guide/development-setup/visual-studio-tips-for-ue4/#optimal-config","title":"Optimal Config","text":"<ul> <li>Enable Visual Assist support for UE4 C++ support https://docs.wholetomato.com/default.asp?W763</li> <li>This is no longer needed Add va_stdafx.h file in directory of one of your sln or vcxproj files: https://support.wholetomato.com/default.asp?W783</li> <li>VassistX/Intellisense/Visual Assist X Performance Optimization:</li> <li>Disable intellisense browse database https://support.wholetomato.com/default.asp?W133</li> <li>Disable enumerate references https://support.wholetomato.com/default.asp?W664</li> <li>https://support.wholetomato.com/default.asp?W663</li> <li>https://docs.unrealengine.com/latest/INT/Programming/Development/VisualStudioSetup</li> <li>Run concurrent parser threads of Visual Assist with below-normal priority by setting <code>HKCU\\Software\\Whole Tomato\\ConcurrentThreadPriority</code>:<ul> <li><code>THREAD_PRIORITY_NORMAL = 0</code></li> <li><code>THREAD_PRIORITY_BELOW_NORMAL = ffffffff</code></li> <li><code>THREAD_PRIORITY_LOWEST = fffffffe</code></li> </ul> </li> </ul>"},{"location":"ue4guide/development-setup/visual-studio-tips-for-ue4/#debugging--logging-vassistx","title":"Debugging &amp; Logging VAssistX","text":"<p>General link for resolving performance issues: https://support.wholetomato.com/default.asp?W663</p> <p>Logging: Although debug logs contain information primarily related to functions and performance of Visual Assist, they will contain names of local solutions, projects, directories, and files, and may also contain symbol names.</p> <p>If you can open the options dialog of Visual Assist, enable logging:</p> <p></p> <p>(Logging begins the moment you enable the checkbox. If you close and re-open the options dialog, the checkbox may not be enabled even though logging is in effect.)</p> <p>Note the location of va.log.</p> <p></p> <p>If you cannot open the options dialog of Visual Assist or are so directed by customer support, use regedit to enable logging before Visual Studio starts:</p> <ol> <li>Navigate to <code>HKCU\\\\Software\\\\Whole Tomato</code></li> <li>Set the value of Logging to 1</li> </ol> <p>(Reference)</p>"},{"location":"ue4guide/development-setup/windows-defender-exclusions-script/","title":"Windows defender exclusions script","text":"<p>Powershell script to add exclusions to windows defender.</p> <p>Important: You should verify each of the lines.</p> PowerShell<pre><code>$kl_bbassembladir    = $env:KL_BBASSEMBLADIR\n$userPath            = $env:USERPROFILE\n$pathExclusions      = New-Object System.Collections.ArrayList\n$processExclusions   = New-Object System.Collections.ArrayList\n$extensionExclusions = New-Object System.Collections.ArrayList\n\n# Visual Studio 2017 Exclusions\n$pathExclusions.Add('C:\\Windows\\Microsoft.NET') &gt; $null\n$pathExclusions.Add('C:\\Windows\\assembly') &gt; $null\n$pathExclusions.Add($userPath + '\\AppData\\Local\\Microsoft\\VisualStudio') &gt; $null\n$pathExclusions.Add($userPath + '\\AppData\\Roaming\\Microsoft\\VisualStudio') &gt; $null\n$pathExclusions.Add('C:\\ProgramData\\Microsoft\\VisualStudio\\Packages') &gt; $null\n$pathExclusions.Add('C:\\Program Files (x86)\\MSBuild') &gt; $null\n$pathExclusions.Add('C:\\Program Files (x86)\\Microsoft Visual Studio 14.0') &gt; $null\n$pathExclusions.Add('C:\\Program Files (x86)\\Microsoft Visual Studio') &gt; $null\n$pathExclusions.Add('C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages') &gt; $null\n$pathExclusions.Add('C:\\Program Files (x86)\\Microsoft SDKs') &gt; $null\n$pathExclusions.Add('C:\\Program Files\\dotnet') &gt; $null\n$pathExclusions.Add('C:\\Program Files\\Microsoft SDKs') &gt; $null\n$pathExclusions.Add('C:\\Program Files (x86)\\Windows Kits\\10\\bin') &gt; $null\n$pathExclusions.Add('C:\\Program Files (x86)\\Windows Kits\\10\\Debuggers') &gt; $null\n\n$processExclusions.Add('devenv.exe') &gt; $null\n$processExclusions.Add('cl.exe') &gt; $null\n$processExclusions.Add('dotnet.exe') &gt; $null\n$processExclusions.Add('msbuild.exe') &gt; $null\n$processExclusions.Add('node.exe') &gt; $null\n$processExclusions.Add('node.js') &gt; $null\n$processExclusions.Add('perfwatson2.exe') &gt; $null\n$processExclusions.Add('ServiceHub.Host.Node.x86.exe') &gt; $null\n$processExclusions.Add('vbcscompiler.exe') &gt; $null\n$processExclusions.Add('testhost.exe') &gt; $null\n$processExclusions.Add('datacollector.exe') &gt; $null\n$processExclusions.Add('IntelliTrace.exe') &gt; $null\n$processExclusions.Add('CodeCoverage.exe') &gt; $null\n\n# VSCode\n$processExclusions.Add('C:\\Program Files\\Microsoft VS Code\\Code.exe') &gt; $null\n$pathExclusions.Add('C:\\Program Files\\Microsoft VS Code') &gt; $null\n\n# Misc Dev\n$extensionExclusions.Add(\".h\")   &gt; $null\n$extensionExclusions.Add(\".c\")   &gt; $null\n$extensionExclusions.Add(\".cpp\") &gt; $null\n$extensionExclusions.Add(\".idb\") &gt; $null\n$extensionExclusions.Add(\".lib\") &gt; $null\n$extensionExclusions.Add(\".obj\") &gt; $null\n$extensionExclusions.Add(\".pdb\") &gt; $null\n$extensionExclusions.Add(\".sbr\") &gt; $null\n\n$processExclusions.Add('git.exe') &gt; $null\n$processExclusions.Add('FBuild.exe') &gt; $null\n$processExclusions.Add('gitextensions.exe') &gt; $null\n\n# Unreal Specific\n$processExclusions.Add('LPP_x64.exe') &gt; $null\n$processExclusions.Add('sublime_merge.exe') &gt; $null\n$processExclusions.Add('ShaderCompileWorker.exe') &gt; $null\n$processExclusions.Add('UE4Editor-Cmd.exe') &gt; $null\n$processExclusions.Add('UE4Editor.exe') &gt; $null\n$processExclusions.Add('UE4Editor-Win64-DebugGame.exe') &gt; $null\n$processExclusions.Add('UE4Editor-Win64-Debug.exe') &gt; $null\n$processExclusions.Add('UnrealHeaderTool.exe') &gt; $null\n\n# Bebylon Specific\n$pathExclusions.Add($kl_bbassembladir) &gt; $null\n\nforeach ($exclusion in $pathExclusions)\n{\n    Write-Host \"Adding Path Exclusion: \" $exclusion -ForegroundColor Magenta -BackgroundColor Gray\n    Add-MpPreference -ExclusionPath $exclusion\n}\n\nforeach ($exclusion in $processExclusions)\n{\n    Write-Host \"Adding Process Exclusion: \" $exclusion -ForegroundColor Magenta -BackgroundColor Gray\n    Add-MpPreference -ExclusionProcess $exclusion\n}\n\nforeach ($exclusion in $extensionExclusions)\n{\n    Write-Host \"Adding Extension Exclusion: \" $exclusion -ForegroundColor Magenta -BackgroundColor Gray\n    Add-MpPreference -ExclusionExtension $exclusion\n}\n\nWrite-Host \"\" -ForegroundColor Magenta -BackgroundColor Gray\nWrite-Host \"Your Exclusions:\" -ForegroundColor Magenta -BackgroundColor Gray\n\n$prefs = Get-MpPreference\n$prefs.ExclusionPath\n$prefs.ExclusionProcess\n$prefs.ExclusionExtension\n\nWrite-Host \"\" -ForegroundColor Magenta -BackgroundColor Gray\nWrite-Host \"Enjoy faster build times and coding!\" -ForegroundColor Magenta -BackgroundColor Gray\nWrite-Host \"\" -ForegroundColor Magenta -BackgroundColor Gray\n</code></pre>"},{"location":"ue4guide/editor-extensions/editor-extensions-overview/","title":"UE4 Editor Extensions","text":""},{"location":"ue4guide/editor-extensions/redirectrenaming-classespropertiespackages/","title":"Redirectrenaming classespropertiespackages","text":"<p>https://docs.unrealengine.com/en-us/Programming/Assets/CoreRedirects</p> <p>https://docs.unrealengine.com/en-US/Resources/SampleGames/ARPG/BalancingBlueprintandC-</p>"},{"location":"ue4guide/editor-extensions/useful-metadatadecorators/","title":"General","text":"<p>A lot of these aren't specified in ObjectMacros.h</p> <p>Get MetaData from a variable or uproperty:</p> C++<pre><code>Property-&gt;HasMetaData(AnimationInputMetadataName)\n</code></pre>"},{"location":"ue4guide/editor-extensions/useful-metadatadecorators/#blueprints","title":"Blueprints","text":"<p>Blueprint Private/Protected:</p> <p>You should be able to add BlueprintPrivate/Protected meta data to you UPROPERTY() decl, like this:</p> C++<pre><code>UPROPERTY(..., meta=(BlueprintPrivate=\"true\"))\n</code></pre> <p>To Mark blueprint properties as protected, just declare them natively inside of protected access specifier</p> <p>For functions, you can do meta=(BlueprintProtected)</p> <p>BlueprintThreadSafe/NotBlueprintThreadSafe:</p> <p>Only valid on Blueprint Function Libraries. This specifier marks the functions in this class as callable on non-game threads in Animation Blueprints.</p> <p>RestrictedToClasses</p> <p>Used by Blueprint Function Library classes to restrict usage to the classes named in the list.</p> <p>KismetHideOverrides=\"Event1, Event2, ..\"</p> <p>List of blueprint events that are not be allowed to be overridden.</p> <p>BlueprintAutocast</p> <p>Used only by static BlueprintPure functions from a Blueprint Function Library. A Cast node will be automatically added for the return type and the type of the first parameter of the function.</p> <p>Hide Functions:</p> <p><code>HideFunctions=(Category1, Category2, ...)</code> Hides all functions in the the specified category from the property viewer.</p> <p><code>HideFunctions=FunctionName</code> Hides the named functions from the property viewer.</p>"},{"location":"ue4guide/editor-extensions/useful-metadatadecorators/#functions","title":"Functions","text":""},{"location":"ue4guide/editor-extensions/useful-metadatadecorators/#parameters","title":"Parameters","text":"<p>Function Parameters:</p> C++<pre><code>UPARAM(ref)\nUPARAM(hidden)\nUPARAM(DisplayName=\"X (Roll)\")\n</code></pre> <p>AdvancedDisplay=\"Parameter1, Parameter2, ..\" The comma-separated list of parameters will show up as advanced pins (requiring UI expansion).</p> <p>AdvancedDisplay=N Replace N with a number, and all parameters after the Nth will show up as advanced pins (requiring UI expansion). E.g. 'AdvancedDisplay=2' will mark all but the first two parameters as advanced).</p> <p>ArrayParm=\"Parameter1, Parameter2, ..\"</p> <p>Indicates that a BlueprintCallable function should use a Call Array Function node and that the listed parameters should be treated as wild card array properties.</p> <p>ArrayTypeDependentParams=\"Parameter\"</p> <p>When ArrayParm is used, this specifier indicates one parameter which will determine the types of all parameters in the ArrayParm list.</p> <p>DefaultToSelf</p> <p>For BlueprintCallable functions, this indicates that the Object property's named default value should be the self context of the node.</p> <p>HidePin=\"Parameter\"</p> <p>For BlueprintCallable functions, this indicates that the parameter pin should be hidden from the user's view. Note that only one parameter pin per function can be hidden in this manner.</p> <p>WorldContext=\"Parameter\"</p> <p>Used by BlueprintCallable functions to indicate which parameter determines the World that the operation is occurring within.</p> <p>CustomStructureParam=\"Parameter1, Parameter2, ..\"</p> <p>The listed parameters are all treated as wildcards. This specifier requires the UFUNCTION-level specifier, CustomThunk, which will require the user to provide a custom exec function. In this function, the parameter types can be checked and the appropriate function calls can be made based on those parameter types. The base UFUNCTION should never be called, and should assert or log an error if it is.</p> <p>Default Parameter Values: Default Value for structs in blueprints or parameters: <code>MakeStructureDefaultValue=\"1.0,0.0,0.0\"</code></p> <p>Default function parameter values:</p> C++<pre><code>UFUNCTION(BlueprintPure, Category=\"Bebylon\", meta=(ItemVisualStyle=\"(TagName=\\\"AssetTag.Item\\\")\",GameplayTagFilter=\"AssetTag.Item\"))\nUBBItemVisualCfg* GetItemVisualCfg(FBBAssetTag ItemVisualStyle) const;\n</code></pre> <p>Execute in Editor: Add <code>CallInEditor</code>:</p> <ul> <li>can also set <code>GAllowActorScriptExecutionInEditor = true;</code></li> <li><code>TGuardValue&lt;bool&gt; AutoRestore(GAllowActorScriptExecutionInEditor, true);</code></li> </ul>"},{"location":"ue4guide/editor-extensions/useful-metadatadecorators/#general_1","title":"General","text":"<p>CallableWithoutWorldContext:</p> <p>Used for BlueprintCallable functions that have a WorldContext pin to indicate that the function can be called even if its class does not implement the GetWorld function.</p> <p>CommutativeAssociativeBinaryOperator</p> <p>Indicates that a BlueprintCallable function should use the Commutative Associative Binary node. This node lacks pin names, but features an \"Add Pin\" button that creates additional input pins.</p> <p>ExpandEnumAsExecs=\"Parameter\"</p> <p>For BlueprintCallable functions, this indicates that one input execution pin should be created for each entry in the enum used by the parameter. That the named parameter must be of an enumerated type recognized by the Engine via the UENUM tag.</p> <p>UnsafeDuringActorConstruction</p> <p>This function is not safe to call during Actor construction.</p>"},{"location":"ue4guide/editor-extensions/useful-metadatadecorators/#structs","title":"Structs","text":"<p>HiddenByDefault</p> <p>Pins in Make Struct and Break Struct nodes are hidden by default.</p>"},{"location":"ue4guide/editor-extensions/useful-metadatadecorators/#enum-bitflagsbitmasks","title":"Enum Bitflags/Bitmasks","text":"<p>By default, UENUM Bitflags use the enum value as the bit index. To change it to use the value as a mask,</p> <p>Create the UENUM like this:</p> C++<pre><code>UENUM(BlueprintType, meta=(Bitflags, UseEnumValuesAsMaskValuesInEditor=\"true\"))\nenum class EBBCombatMovementPhase : uint8\n{\n  StartPhase       = 0x01,\n  ChargePhase      = 0x02,\n  ActivePhase      = 0x04,\n  ImpactStallPhase = 0x08,\n  RecoveryPhase    = 0x10,\n  All              = 0xff,\n};\n</code></pre> <p>The property needs to be specified as:</p> C++<pre><code> UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=Moveset, meta=(Bitmask, BitmaskEnum=\"EBBCombatMovementPhase\"))\n int32 AllowedMovement = int32(EBBCombatMovementPhase::StartPhase | EBBCombatMovementPhase::ChargePhase | EBBCombatMovementPhase::ActivePhase);\n</code></pre>"},{"location":"ue4guide/editor-extensions/useful-metadatadecorators/#property-metadata-specifiers","title":"Property Metadata Specifiers","text":"Property Meta Tag Effect AllowAbstract=\"true/false\" Used for Subclass and SoftClass properties. Indicates whether abstract class types should be shown in the class picker. AllowedClasses=\"Class1, Class2, ..\" Used for FSoftObjectPath properties. Comma delimited list that indicates the class type(s) of assets to be displayed in the Asset picker. AllowPreserveRatio Used for FVector properties. It causes a ratio lock to be added when displaying this property in details panels. ArrayClamp=\"ArrayProperty\" Used for integer properties. Clamps the valid values that can be entered in the UI to be between 0 and the length of the array property named. AssetBundles Used for SoftObjectPtr or SoftObjectPath properties. List of Bundle names used inside Primary Data Assets to specify which Bundles this reference is part of. BlueprintBaseOnly Used for Subclass and SoftClass properties. Indicates whether only Blueprint classes should be shown in the class picker. BlueprintCompilerGeneratedDefaults Property defaults are generated by the Blueprint compiler and will not be copied when the CopyPropertiesForUnrelatedObjects function is called post-compile. ClampMin=\"N\" Used for float and integer properties. Specifies the minimum value N that may be entered for the property. ClampMax=\"N\" Used for float and integer properties. Specifies the maximum value N that may be entered for the property. ConfigHierarchyEditable This property is serialized to a config (.ini) file, and can be set anywhere in the config hierarchy. ContentDir Used by FDirectoryPath properties. Indicates that the path will be picked using the Slate-style directory picker inside the Content folder. DisplayName=\"Property Name\" The name to display for this property, instead of the code-generated name. DisplayThumbnail=\"true\" Indicates that the property is an Asset type and it should display the thumbnail of the selected Asset. EditCondition=\"BooleanPropertyName\" Names a boolean property that is used to indicate whether editing of this property is disabled. Putting \"!\" before the property name inverts the test. EditFixedOrder Keeps the elements of an array from being reordered by dragging. ExactClass=\"true\" Used for FSoftObjectPath properties in conjunction with AllowedClasses. Indicates whether only the exact classes specified in AllowedClasses can be used, or if subclasses are also valid. ExposeFunctionCategories=\"Category1, Category2, ..\" Specifies a list of categories whose functions should be exposed when building a function list in the Blueprint Editor. ExposeOnSpawn=\"true\" Specifies whether the property should be exposed on a Spawn Actor node for this class type. FilePathFilter=\"filetype\" Used by FFilePath properties. Indicates the path filter to display in the file picker. Common values include \"uasset\" and \"umap\", but these are not the only possible values. HideAlphaChannel Used for FColor and FLinearColor properties. Indicates that the Alpha property should be hidden when displaying the property widget in the details. HideViewOptions Used for Subclass and SoftClass properties. Hides the ability to change view options in the class picker. InlineEditConditionToggle Signifies that the boolean property is only displayed inline as an edit condition toggle in other properties, and should not be shown on its own row. LongPackageName Used by FDirectoryPath properties. Converts the path to a long package name. MakeEditWidget Used for Transform or Rotator properties, or Arrays of Transforms or Rotators. Indicates that the property should be exposed in the viewport as a movable widget. <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/UnrealArchitecture/Reference/Metadata</p> <p>ShowTreeView</p> <p>PropertyMetadata Used for Subclass and StringClassReference properties. Shows the picker as a tree view instead of as a list</p> <p>RelativePath</p> <p>PropertyMetadata Used by FDirectoryPath properties. Indicates that the directory dialog will output a relative path when setting the property.</p> <p>RelativeToGameContentDir</p> <p>PropertyMetadata Used by FDirectoryPath properties. Indicates that the directory dialog will output a path relative to the game content directory when setting the property.</p> <p>FStringassetreference: Restrict types of classes selectable in fstringassetreference properties: <code>meta=(AllowedClasses=\"LevelSequence\")</code></p> <ul> <li>Restrict to exact classes: <code>ExactClass</code></li> </ul> <p>Customize Array Of Structs header with TitleProperty meta tag:</p> C++<pre><code>USTRUCT(BlueprintType)\nstruct FTestStructInner\n{\n  GENERATED_USTRUCT_BODY()\n  UPROPERTY(EditAnywhere)\n  float Value1;\n  UPROPERTY(EditAnywhere)\n  float Value2;\n  UPROPERTY(EditAnywhere)\n  FString Value3;\n};\n\nUSTRUCT(BlueprintType)\nstruct FTestStructOuter\n{\n  GENERATED_USTRUCT_BODY()\n  UPROPERTY(EditAnywhere, meta = (TitleProperty = \"Value2\"))\n  TArray&lt;FTestStructInner&gt; TestArray;\n};\n</code></pre> <p></p> <p>Reference From https://udn.unrealengine.com/questions/279525/create-custom-view-in-ue-for-tarray-of-ustructs.html</p> <p>Create Console Variable out of UPROPERTY:</p> C++<pre><code>UPROPERTY(config, EditAnywhere, Category = \"Advanced Settings\", meta = (\n  ConsoleVariable = \"renderdoc.BinaryPath\", DisplayName = \"RenderDoc executable path\",\n  ToolTip = \"Path to the main RenderDoc executable to use.\",\n  ConfigRestartRequired = true))\nFString RenderDocBinaryPath;\n</code></pre> <p>Force a uproperty to not be clearable:</p> C++<pre><code>UPROPERTY(EditAnywhere, NoClear, BlueprintReadOnly)\n</code></pre> <p>EditCondition: EditCondition &amp; InlineEditConditionToggle &amp; PinHiddenByDefault</p> C++<pre><code>UPROPERTY(VisibleAnywhere, meta=(EditCondition=\"bIsSet\"))\nFBBDamageEffect Value;\n\u200bUPROPERTY(VisibleAnywhere, meta=(InlineEditConditionToggle))\n\u200bbool bIsSet;\n</code></pre> <p>Deprecate BP functions in UE4: Add _DEPRECATED to its name along with <code>DeprecatedFunction</code> metadata:</p>"},{"location":"ue4guide/editor-extensions/useful-metadatadecorators/#special-purpose","title":"Special Purpose","text":""},{"location":"ue4guide/editor-extensions/useful-metadatadecorators/#sequencer","title":"Sequencer","text":"<p><code>SequencerTrackClass</code> - Metadata to specify specialized sequencer track class for property</p>"},{"location":"ue4guide/editor-extensions/useful-metadatadecorators/#gameplay-tags","title":"Gameplay Tags","text":"<ul> <li><code>GameplayTagFilter</code> - Metadata to filter gameplay tags as function parameters and provide default value</li> </ul> C++<pre><code>UFUNCTION(BlueprintPure, Category=UFUNCTION(BlueprintPure, Category=\"Bebylon\", meta=(ItemVisualStyle=\"(TagName=\\\"AssetTag.Item\\\")\",GameplayTagFilter=\"AssetTag.Item\"))\nUBBItemVisualCfg* GetItemVisualCfg(FBBAssetTag ItemVisualStyle) const;\n</code></pre> <ul> <li><code>Categories</code> - Use to specify tag hierarchy base for a gameplaytag property</li> </ul> C++<pre><code>UPROPERTY(EditAnywhere, BlueprintReadWrite, meta = (Categories=\"GameplayCue\"))\nFGameplayTag GameplayCueTag;\n\nUSTRUCT(meta=(Categories=\"EventKeyword\"))\nstruct FGameplayEventKeywordTag : public FGameplayTag\nTArray&lt;FGameplayEventKeywordTag&gt; QualifierTagTestList;\n</code></pre> <ul> <li> <p><code>FGameplayTagReferenceHelper</code>  -  Helper struct for viewing tag references (assets that reference a tag). Drop this into a struct and set the OnGetgameplayStatName. A details customization will display a tree view of assets referencing the tag</p> </li> <li> <p><code>FGameplayTagCreationWidgetHelper</code> - Helper struct: drop this in another struct to get an embedded create new tag widget.</p> </li> </ul>"},{"location":"ue4guide/editor-extensions/useful-metadatadecorators/#misc","title":"Misc","text":"<p>UsesHierarchy:</p> <p>Indicates the class uses hierarchical data. Used to instantiate hierarchical editing features in Details panels.</p> <p>Misc Blueprint Metadata:</p> C++<pre><code>struct BLUEPRINTGRAPH_API FBlueprintMetadata\n{\npublic:\n  // Struct/Enum/Class:\n  // If true, this class, struct, or enum is a valid type for use as a variable in a blueprint\n  static const FName MD_AllowableBlueprintVariableType;\n\n  // If true, this class, struct, or enum is not valid for use as a variable in a blueprint\n  static const FName MD_NotAllowableBlueprintVariableType;\n\n  // Class:\n  // [ClassMetadata] If present, the component class can be spawned by a blueprint\n  static const FName MD_BlueprintSpawnableComponent;\n\n  /** If true, the class will be usable as a base for blueprints */\n  static const FName MD_IsBlueprintBase;\n\n  /** A listing of classes that this class is accessible from (and only those classes, if present).  Note that this determines the GRAPH CONTEXTS in which the node cannot be placed (e.g. right click menu, palette), and does NOT control menus when dragging off of a context pin (i.e. contextual drag) */\n  static const FName MD_RestrictedToClasses;\n\n  /// [ClassMetadata] Used for Actor and Component classes. If the native class cannot tick, Blueprint generated classes based this Actor or Component can have bCanEverTick flag overridden even if bCanBlueprintsTickByDefault is false.\n  static const FName MD_ChildCanTick;\n\n  /// [ClassMetadata] Used for Actor and Component classes. If the native class cannot tick, Blueprint generated classes based this Actor or Component can never tick even if bCanBlueprintsTickByDefault is true.\n  static const FName MD_ChildCannotTick;\n\n  /// [ClassMetadata] Used to make the first subclass of a class ignore all inherited showCategories and hideCategories commands\n  static const FName MD_IgnoreCategoryKeywordsInSubclasses;\n\n  //    function metadata\n  /** Specifies a UFUNCTION as Kismet protected, which can only be called from itself */\n  static const FName MD_Protected;\n\n  /** Marks a UFUNCTION as latent execution */\n  static const FName MD_Latent;\n\n  /** Marks a UFUNCTION as unsafe for use in the UCS, which prevents it from being called from the UCS.  Useful for things that spawn actors, etc that should never happen in the UCS */\n  static const FName MD_UnsafeForConstructionScripts;\n\n  // The category that a function appears under in the palette\n  static const FName MD_FunctionCategory;\n\n  // [FunctionMetadata] Indicates that the function is deprecated\n  static const FName MD_DeprecatedFunction;\n\n  // [FunctionMetadata] Supplies the custom message to use for deprecation\n  static const FName MD_DeprecationMessage;\n\n  // [FunctionMetadata] Indicates that the function should be drawn as a compact node with the specified body title\n  static const FName MD_CompactNodeTitle;\n\n  // [FunctionMetadata] Indicates that the function should be drawn with this title over the function name\n  static const FName MD_DisplayName;\n\n  // [FunctionMetadata] Indicates that a particular function parameter is for internal use only, which means it will be both hidden and not connectible.\n  static const FName MD_InternalUseParam;\n\n  //    property metadata\n\n  /** UPROPERTY will be exposed on \"Spawn Blueprint\" nodes as an input  */\n  static const FName MD_ExposeOnSpawn;\n\n  /** UPROPERTY uses the specified function as a getter rather than reading from the property directly */\n  static const FName MD_PropertyGetFunction;\n\n  /** UPROPERTY uses the specified function as a setter rather than writing to the property directly */\n  static const FName MD_PropertySetFunction;\n\n  /** UPROPERTY cannot be modified by other blueprints */\n  static const FName MD_Private;\n\n  /** If true, the self pin should not be shown or connectable regardless of purity, const, etc. similar to InternalUseParam */\n  static const FName MD_HideSelfPin;\n\n  /** If true, the specified UObject parameter will default to \"self\" if nothing is connected */\n  static const FName MD_DefaultToSelf;\n\n  /** The specified parameter should be used as the context object when retrieving a UWorld pointer (implies hidden and default-to-self) */\n  static const FName MD_WorldContext;\n\n  /** For functions that have the MD_WorldContext metadata but are safe to be called from contexts that do not have the ability to provide the world context (either through GetWorld() or ShowWorldContextPin class metadata */\n  static const FName MD_CallableWithoutWorldContext;\n\n  /** For functions that should be compiled in development mode only */\n  static const FName MD_DevelopmentOnly;\n\n  /** If true, an unconnected pin will generate a UPROPERTY under the hood to connect as the input, which will be set to the literal value for the pin.  Only valid for reference parameters. */\n  static const FName MD_AutoCreateRefTerm;\n\n  /** If true, the hidden world context pin will be visible when the function is placed in a child blueprint of the class. */\n  static const FName MD_ShowWorldContextPin;\n\n  static const FName MD_BlueprintInternalUseOnly;\n  static const FName MD_NeedsLatentFixup;\n\n  static const FName MD_LatentCallbackTarget;\n\n  /** If true, properties defined in the C++ private scope will be accessible to blueprints */\n  static const FName MD_AllowPrivateAccess;\n\n  /** Categories of functions to expose on this property */\n  static const FName MD_ExposeFunctionCategories;\n\n  // [InterfaceMetadata]\n  static const FName MD_CannotImplementInterfaceInBlueprint;\n  static const FName MD_ProhibitedInterfaces;\n\n  /** Keywords used when searching for functions */\n  static const FName MD_FunctionKeywords;\n\n  /** Indicates that during compile we want to create multiple exec pins from an enum param */\n  static const FName MD_ExpandEnumAsExecs;\n\n  static const FName MD_CommutativeAssociativeBinaryOperator;\n\n  /** Metadata string that indicates to use the MaterialParameterCollectionFunction node. */\n  static const FName MD_MaterialParameterCollectionFunction;\n\n  /** Metadata string that sets the tooltip */\n  static const FName MD_Tooltip;\n\n  /** Metadata string that indicates the specified event can be triggered in editor */\n  static const FName MD_CallInEditor;\n\n  /** Metadata to identify an DataTable Pin. Depending on which DataTable is selected, we display different RowName options */\n  static const FName MD_DataTablePin;\n\n  /** Metadata that flags make/break functions for specific struct types. */\n  static const FName MD_NativeMakeFunction;\n  static const FName MD_NativeBreakFunction;\n\n  /** Metadata that flags function params that govern what type of object the function returns */\n  static const FName MD_DynamicOutputType;\n  /** Metadata that flags the function output param that will be controlled by the \"MD_DynamicOutputType\" pin */\n  static const FName MD_DynamicOutputParam;\n\n  static const FName MD_ArrayParam;\n  static const FName MD_ArrayDependentParam;\n\n  /** Metadata that flags TSet parameters that will have their type determined at blueprint compile time */\n  static const FName MD_SetParam;\n\n  /** Metadata that flags TMap function parameters that will have their type determined at blueprint compile time */\n  static const FName MD_MapParam;\n  static const FName MD_MapKeyParam;\n  static const FName MD_MapValueParam;\n\n  /** Metadata that identifies an integral property as a bitmask. */\n  static const FName MD_Bitmask;\n  /** Metadata that associates a bitmask property with a bitflag enum. */\n  static const FName MD_BitmaskEnum;\n  /** Metadata that identifies an enum as a set of explicitly-named bitflags. */\n  static const FName MD_Bitflags;\n  /** Metadata that signals to the editor that enum values correspond to mask values instead of bitshift (index) values. */\n  static const FName MD_UseEnumValuesAsMaskValuesInEditor;\n</code></pre>"},{"location":"ue4guide/editor-extensions/custom-blueprints/blueprint-static-analysis/","title":"Adding Blueprint Static Analysis Tool","text":"<p>The easiest way to augment the compiler would be to write a <code>UBlueprintCompilerExtension</code>, just derive from that type and when you want to enable your extension (e.g. only when a commandlet is running, ini setting is set, or unconditionally at CDO creation time) just call FBlueprintCompilationManager::RegisterCompilerExtension. The first parameter is the type of blueprints you're interested in - e.g. UBlueprint::StaticClass() if you want to instrument all blueprint compilation.</p> <p>Reference https://udn.unrealengine.com/questions/513017/blueprint-static-analysis.html</p>"},{"location":"ue4guide/editor-extensions/custom-blueprints/blueprint-static-analysis/#adding-mapcheck-for-blueprints","title":"Adding Mapcheck for Blueprints","text":"<p>Check KismetEditorUtilities.h/BlueprintEditorUtils.h/BlueprintEditorUtils.cpp/ComponentEditorUtils.h</p> <p>GetSimpleConstructionScript(USceneComponent const* Component);</p> <p>FindCorrespondingSCSNode(USceneComponent const* ComponentObj);</p> <p>virtual void EditorReplacedActor(AActor* OldActor) {}</p> <p>Useful editor tool class:</p> <p>FBlueprintEditorUtils</p> <p>===========================================</p> C++<pre><code>void UBlueprint::GetAllGraphs(TArray&amp;lt;UEdGraph\\*&gt;&gt; Graphs) const\n\n/\\*\\* Set of pages that combine into a single uber-graph \\*/\n\n UPROPERTY()\n\n TArray&amp;lt;class UEdGraph\\*&gt; UbergraphPages;\n\n /\\*\\* Set of functions implemented for this class graphically \\*/\n\n UPROPERTY()\n\n TArray&amp;lt;class UEdGraph\\*&gt; FunctionGraphs;\n\n /\\*\\* Graphs of signatures for delegates \\*/\n\n UPROPERTY()\n\n TArray&amp;lt;class UEdGraph\\*&gt; DelegateSignatureGraphs;\n\n /\\*\\* Set of macros implemented for this class \\*/\n\n UPROPERTY()\n\n TArray&amp;lt;class UEdGraph\\*&gt; MacroGraphs;\n\nfor (UEdGraph\\* CurrentGraph : Blueprint-&gt;FunctionGraphs)\n\n {\n\n if( CurrentGraph-&gt;GetFName() == Schema-&gt;FN_UserConstructionScript )\n {\n\n return CurrentGraph;\n\n }\n\n }\n</code></pre> <p>=========</p> <p>Find references function/find function</p> C++<pre><code>GetFindReferenceSearchString\n\nFindInBlueprints.h:\n\nSFindInBlueprints::MakeSearchQuery() - to comprehensively search blueprint nodes (e.g. parameters, comments, etc)\n\nTSharedPtr&amp;lt; FImaginaryBlueprint&gt; ImaginaryBlueprint(new FImaginaryBlueprint(Blueprint-&gt;GetName(), Blueprint-&gt;GetPathName(), ParentClass, Interfaces, FFindInBlueprintSearchManager::Get().QuerySingleBlueprint(Blueprint)));\n\n TSharedPtr&amp;lt; FFiBSearchInstance &gt; SearchInstance(new FFiBSearchInstance);\n\n FSearchResult SearchResult = RootSearchResult = SearchInstance-&gt;StartSearchQuery(SearchValue, ImaginaryBlueprint);\n</code></pre> <p>========</p> C++<pre><code>//Show what objects points to this, using the assetregistry\n\nObjectTools::ShowReferencers()\n\n RetrieveReferencers( TArray&amp;lt;FReferencerInformation&gt;\\* OutInternalReferencers, TArray&amp;lt;FReferencerInformation&gt;\\* OutExternalReferencers);\n\n//Show objects this points to\n\nObjectTools::ShowReferencedObjs(GetBlueprintObj());\n\n //To differentiate between what the default class points to vs. the instance\n\n ObjectTools::ShowReferencedObjs(GetBlueprintObj()-&gt;GeneratedClass);\n\n/\\*\\* Gather all bps that Blueprint depends on \\*/\n\nstatic void GatherDependencies(const UBlueprint\\* Blueprint, TSet&amp;lt;TWeakObjectPtr&amp;lt;UBlueprint&gt;&gt;&amp; OutDependencies, TSet&amp;lt;TWeakObjectPtr&amp;lt;UStruct&gt;&gt;&amp; OutUDSDependencies);\n\n/\\*\\* Returns a list of loaded Blueprints that are dependent on the given Blueprint. \\*/\n\nstatic void GetDependentBlueprints(UBlueprint\\* Blueprint, TArray&amp;lt;UBlueprint\\*&gt;&amp; DependentBlueprints, bool bRemoveSelf = true);\n</code></pre> <p>========= Search Asset Registry</p> C++<pre><code>FAssetRegistryModule\\* AssetRegistryModule = &amp;FModuleManager::LoadModuleChecked&amp;lt;FAssetRegistryModule&gt;(TEXT(\"AssetRegistry\"));\n\nTArray&amp;lt;FAssetData&gt; AssetData;\n\nFARFilter Filter;\n\nFilter.ClassNames.Add( UBlueprint::StaticClass()-&gt;GetFName() ); //get blueprints\n\nFilter.PackagePaths.Add(\"/Game/Blueprints/RoomModel\"); //from location\n\nAssetRegistryModule-&gt;Get().GetAssets(Filter, AssetData);\n\n//AssetRegistryModule-&gt;Get().GetAssetsByClass(Class-&gt;GetFName(), AssetData);\n\nfor (TArray&amp;lt;FAssetData&gt;::TConstIterator PkgIter = AssetData.CreateConstIterator(); PkgIter; ++PkgIter)\n\n{\n\nFAssetData Asset = \\*PkgIter;\n\nUBlueprint\\* BlueAsset = Cast&amp;lt;UBlueprint&gt;(Asset.GetAsset());\n\nif (BlueAsset-&gt;ParentClass == ARoomConnection::StaticClass()){\n\nGEngine-&gt;AddOnScreenDebugMessage(-1, 10.f, FColor::Red, Asset.AssetName.GetPlainNameString());\n\n}\n\n}\n</code></pre> <p>================================</p> <p>Check if Actor is a Blueprint</p> C++<pre><code>UBlueprint::GetBlueprintFromClass(const UClass\\* InClass);\n\nBlueprintClass-&gt;HasAnyClassFlags(CLASS_CompiledFromBlueprint)\n\nUObject-&gt;IsA(UBlueprintGeneratedClass::StaticClass())\n\nUClass-&gt;IsChildOf(UBlueprintGeneratedClass::StaticClass())\n\nFind all nodes of type\n\nTArray&amp;lt;UK2Node_CustomEvent\\*&gt; BpCustomEvents;\n\nFBlueprintEditorUtils::GetAllNodesOfClass&amp;lt;UK2Node_CustomEvent&gt;(FuncBlueprint, BpCustomEvents);\n\nstatic bool GetBlueprintHierarchyFromClass(const UClass\\* InClass, TArray&amp;lt;UBlueprint\\*&gt;&amp; OutBlueprintParents);\n</code></pre> <p>===============</p> <p>For finding shit that exists in bad folders:</p> C++<pre><code>TFindObjectReferencers\n\nShowReferencedObjs\n\nUObject::OutputReferencers()/RetrieveReferencers()\n</code></pre>"},{"location":"ue4guide/editor-extensions/custom-blueprints/blutility-editor-extensions/","title":"Blutility editor extensions","text":"<p>Check out these classes:</p> <p>https://docs.unrealengine.com/latest/INT/API/Editor/Blutility/index.html</p> <p>https://forums.unrealengine.com/showthread.php?1954-TUTORIAL-Blutility-Running-Blueprint-functions-inside-Editor</p> <p>Derive from APlacedEditorUtilityBase to have access to the current selection set in a Blutility</p> <p>Allow script execution in editor / Enable blueprint function script execution in the editor:</p> <ul> <li> <p>Execute in Editor: CallInEditor</p> </li> <li> <p>Can also set GAllowActorScriptExecutionInEditor = true or TGuardValue&lt;bool AutoRestore(GAllowActorScriptExecutionInEditor, true);</p> </li> <li> <p>Also override ShouldTickIfViewportsOnly() const override { return !IsRunningCommandlet() &amp;&amp; bVisualizeInEditor; }</p> </li> </ul>"},{"location":"ue4guide/editor-extensions/custom-blueprints/create-custom-bp-k2-nodes/","title":"Custom Blueprint Nodes","text":""},{"location":"ue4guide/editor-extensions/custom-blueprints/create-custom-bp-k2-nodes/#how-to-guide","title":"How To Guide","text":"<p>https://sandordaemen.nl/blog/unreal-engine-4-how-to-create-k2-nodes/</p>"},{"location":"ue4guide/editor-extensions/custom-blueprints/create-custom-bp-k2-nodes/#notes","title":"Notes","text":"<p>The key thing you'll need to understand is that a blueprint clones its graph and mutates it as part of the compilation process, that is when your expand node logic will run. There are two tools that I use when writing a new blueprint node:</p> <p>Blueprint Editor-&gt;File-&gt;Developer-&gt;Save Intermediate Build Products - this enables you to inspect the result of the expanded graph</p> <p>The clipboard - use ctrl+c and paste into a text editor to view the complete state of a node, this will give you an idea of how you need to set up your intermediate nodes</p> <p>Reference https://udn.unrealengine.com/questions/500542/custom-bp-node-development.html</p>"},{"location":"ue4guide/editor-extensions/custom-blueprints/create-custom-bp-k2-nodes/#hiding-blueprint-functions-from-editor","title":"Hiding Blueprint Functions From Editor","text":"INI<pre><code>[BlueprintEditor.Menu]\n+BlueprintHiddenFields=\"/Script/Engine.PlayerController:ClientPlayCameraShake\"\n</code></pre> <p>Reference From https://udn.unrealengine.com/questions/409862/gameplaystatics-and-custom-damageevents.html</p>"},{"location":"ue4guide/editor-extensions/custom-blueprints/custom-blueprint/","title":"Class Diagram Overview","text":"<p>There's on overabundance of class/OOP and hard to track what is supposed to do what. Here's a great diagram from http://www.ms.mff.cuni.cz/~polakma1/adventure-plugin/programming.html that crystalizes the relationships.</p> <p>From a UI/MVC viewpoint: </p> <p>From a functionality/responsibility viewpoint: </p>"},{"location":"ue4guide/editor-extensions/custom-blueprints/custom-blueprint/#how-to-use-templates","title":"How to use templates","text":"<p>IMPORTANT! This is just a literal translation from the excellent github repo https://github.com/Eragon-Brisingr/XD_GraphEditor_Template</p>"},{"location":"ue4guide/editor-extensions/custom-blueprints/custom-blueprint/#use","title":"use","text":""},{"location":"ue4guide/editor-extensions/custom-blueprints/custom-blueprint/#create-chart","title":"Create chart","text":""},{"location":"ue4guide/editor-extensions/custom-blueprints/custom-blueprint/#use_1","title":"use","text":""},{"location":"ue4guide/editor-extensions/custom-blueprints/custom-blueprint/#use-the-template","title":"Use the template","text":"<p>Rename all types with _Template to the required type name.</p>"},{"location":"ue4guide/editor-extensions/custom-blueprints/custom-blueprint/#make-unreal-chart-editor","title":"Make Unreal Chart Editor","text":""},{"location":"ue4guide/editor-extensions/custom-blueprints/custom-blueprint/#inheritance-type","title":"Inheritance Type","text":""},{"location":"ue4guide/editor-extensions/custom-blueprints/custom-blueprint/#uedgraphschema","title":"UEdGraphSchema","text":"<ol> <li>EdGraphSchema defines most of the global behavior of chart operations</li> <li>Map UEdGraph and EdGraphSchema in FBlueprintEditorUtils :: CreateNewGraph</li> </ol>"},{"location":"ue4guide/editor-extensions/custom-blueprints/custom-blueprint/#uedgraph","title":"UEdGraph","text":"<p>EdGraph is a type of chart instance that defines the behavior of the chart (such as saving a chart</p>"},{"location":"ue4guide/editor-extensions/custom-blueprints/custom-blueprint/#uedgraphnode","title":"UEdGraphNode","text":"<ol> <li>EdGraphNode is the type of graph node instance, which defines the behavior of the node</li> <li>AutowireNewNode defines the automatic connection behavior of the node</li> </ol>"},{"location":"ue4guide/editor-extensions/custom-blueprints/custom-blueprint/#fasseteditortoolkit","title":"FAssetEditorToolkit","text":"<ol> <li>You can call FAssetEditorToolkit :: InitAssetEditor during initialization to define the layout of the panel. (For complexity, refer to FApplicationMode)</li> <li>Define basic editor operations by registering events (copy, paste, copy, delete, etc.) with variables in FUICommandList</li> </ol>"},{"location":"ue4guide/editor-extensions/custom-blueprints/custom-blueprint/#node-behavior-type","title":"Node Behavior Type","text":"<ol> <li>FConnectionDrawingPolicy</li> <li>FEdGraphSchemaAction</li> </ol>"},{"location":"ue4guide/editor-extensions/custom-blueprints/custom-blueprint/#display-type","title":"Display Type","text":"<p>Inherit S type to achieve display behavior</p>"},{"location":"ue4guide/editor-extensions/custom-blueprints/custom-blueprint/#sgraphnode","title":"SGraphNode","text":"<p>Node display definition</p> <p>Map SNode and UNode types via UEdGraphNode :: CreateVisualWidget</p>"},{"location":"ue4guide/editor-extensions/custom-blueprints/custom-blueprint/#sgraphpin","title":"SGraphPin","text":"<p>Pin display definition (the blueprint is where the parameters can be connected)</p> <p>Map SPin to SNode via SGraphNode :: CreatePinWidgets</p>"},{"location":"ue4guide/editor-extensions/custom-blueprints/custom-blueprint/#resource-behavior-type","title":"Resource Behavior Type","text":""},{"location":"ue4guide/editor-extensions/custom-blueprints/custom-blueprint/#fassettypeactions_base","title":"FAssetTypeActions_Base","text":"<ol> <li>Define the categories when creating a resource GetCategories</li> <li>Defines the operation when the resource is requested to be opened. OpenAssetEditor maps the FAssetEditorToolkit to the resource (UBP_Graph_Template) used at runtime.</li> </ol>"},{"location":"ue4guide/editor-extensions/custom-blueprints/custom-blueprint/#ufactory","title":"UFactory","text":"<p>Factory class, editor for instantiating chart resources</p>"},{"location":"ue4guide/editor-extensions/custom-blueprints/custom-blueprint/#add-context-menu","title":"Add context menu","text":""},{"location":"ue4guide/editor-extensions/custom-blueprints/custom-blueprint/#chart-context-menu","title":"Chart context menu","text":"<p>Overriding GetGraphContextActions in UEdGraphSchema</p>"},{"location":"ue4guide/editor-extensions/custom-blueprints/custom-blueprint/#node-context-menu","title":"Node context menu","text":"<p>Overriding GetContextMenuActions in UEdGraphNode</p> <p>Overriding GetContextMenuActions in UEdGraphSchema to add actions to global Node or Pin</p>"},{"location":"ue4guide/editor-extensions/custom-blueprints/custom-blueprint/#node-error-report","title":"Node Error Report","text":"<p>Set ErrorMsg, bHasCompilerMessage, ErrorType (EMessageSeverity :: Type) in UEdGraphNode</p> <p>SGraphNode calls UpdateErrorInfo where the node needs to update error information</p>"},{"location":"ue4guide/editor-extensions/custom-blueprints/custom-blueprint/#add-editor-panel","title":"Add editor panel","text":""},{"location":"ue4guide/editor-extensions/custom-blueprints/custom-blueprint/#fworkflowallowedtabset","title":"FWorkflowAllowedTabSet","text":"<p>Collection of panels</p> <ol> <li>Call FWorkflowAllowedTabSet :: RegisterFactory to register the definition of each panel instantiation</li> <li>Call FWorkflowCentricApplication :: PushTabFactories (a base class of FBlueprintEditor) to register FWorkflowAllowedTabSet</li> </ol>"},{"location":"ue4guide/editor-extensions/custom-blueprints/custom-blueprint/#fworkflowtabfactory","title":"FWorkflowTabFactory","text":"<p>Base class of panel instantiation definition</p> <ol> <li>Inherit and rewrite FWorkflowTabFactory :: CreateTabBody to instantiate a specific panel</li> <li>Register the panel instantiation definition with the FWorkflowAllowedTabSet instance (FWorkflowAllowedTabSet :: RegisterFactory)</li> </ol>"},{"location":"ue4guide/editor-extensions/custom-blueprints/custom-blueprint/#other-tools","title":"Other tools","text":""},{"location":"ue4guide/editor-extensions/custom-blueprints/custom-blueprint/#fgrapheditor_classhelper_template","title":"FGraphEditor_ClassHelper_Template","text":"<p>GatherClasses collects UClass information</p> <p>FGraphEditor_ClassHelper_Template (UClass * InRootClass); InRootClass in the constructor</p>"},{"location":"ue4guide/editor-extensions/custom-blueprints/custom-blueprint/#fgrapheditortoolkit_template--handletabmanagerspawntabgraph","title":"FGraphEditorToolkit_Template :: HandleTabManagerSpawnTabGraph","text":"<p>Created chart control</p>"},{"location":"ue4guide/editor-extensions/custom-blueprints/custom-blueprint/#expand-blueprint-editor","title":"Expand Blueprint Editor","text":""},{"location":"ue4guide/editor-extensions/custom-blueprints/custom-blueprint/#effect","title":"Effect","text":""},{"location":"ue4guide/editor-extensions/custom-blueprints/custom-blueprint/#inheritance-type_1","title":"Inheritance Type","text":""},{"location":"ue4guide/editor-extensions/custom-blueprints/custom-blueprint/#ublueprint","title":"UBlueprint","text":"<p>Resource type of custom blueprint</p> <ol> <li>Call FKismetEditorUtilities :: CreateBlueprint to create a blueprint resource</li> <li>Override GetReparentingRules to define the parent classes that this blueprint type can use</li> </ol>"},{"location":"ue4guide/editor-extensions/custom-blueprints/custom-blueprint/#ublueprintgeneratedclass","title":"UBlueprintGeneratedClass","text":"<ol> <li>Runtime type of custom blueprint</li> </ol>"},{"location":"ue4guide/editor-extensions/custom-blueprints/custom-blueprint/#fapplicationmode","title":"FApplicationMode","text":"<ol> <li>Define the mode of the App</li> <li>Define the initial interface layout</li> <li>** FBlueprintEditor :: RegisterApplicationModes ** rewritten to map operations</li> <li>Call FWorkflowCentricApplication :: PushTabFactories (a base class of FBlueprintEditor) to set FWorkflowAllowedTabSet (the definition of all panels)</li> <li>FApplicationMode :: ToolbarExtender is the current toolbar. Add functions to the toolbar through FBlueprintEditor :: GetToolbarBuilder ()-&gt; AddCompileToolbar (ToolbarExtender). You can also call FExtender :: AddToolBarExtension to add custom functions.</li> </ol>"},{"location":"ue4guide/editor-extensions/custom-blueprints/custom-blueprint/#fkismetcompilercontext","title":"FKismetCompilerContext","text":"<ol> <li>Blueprint compilation process definition</li> <li>Register the compiler during module initialization, FKismetCompilerContext :: RegisterCompilerForBP</li> <li>Rewrite FinishCompilingClass to copy charts and add binding events after blueprint compilation.</li> <li>Override CreateClassVariablesFromBlueprint to expose variables used in designing diagrams. The advantage over FBlueprintEditorUtils :: AddMemberVariable is that variables cannot be edited in the blueprint.</li> </ol>"},{"location":"ue4guide/editor-extensions/custom-blueprints/custom-blueprint/#s-type","title":"S type","text":""},{"location":"ue4guide/editor-extensions/custom-blueprints/custom-blueprint/#sgrapheditor","title":"SGraphEditor","text":"<p>S type of chart editor</p> <p><code>SNew (SGraphEditor) .AdditionalCommands (Commands) .GraphToEdit (EdGraph);</code></p>"},{"location":"ue4guide/editor-extensions/custom-blueprints/custom-blueprint/#runtime-binding-events","title":"Runtime binding events","text":""},{"location":"ue4guide/editor-extensions/custom-blueprints/custom-blueprint/#propertyeditor-extension-type","title":"PropertyEditor Extension Type","text":"<ol> <li>IDetailPropertyExtensionHandler Extension of each property</li> <li>IDetailCustomization expands the entire Detail panel</li> </ol>"},{"location":"ue4guide/editor-extensions/custom-blueprints/custom-blueprint/#add-binding-event","title":"Add binding event","text":"<ol> <li>FKismetEditorUtilities :: FindBoundEventForComponent</li> <li>FKismetEditorUtilities :: CreateNewBoundEventForClass</li> </ol>"},{"location":"ue4guide/editor-extensions/custom-blueprints/custom-blueprint/#udynamicblueprintbinding","title":"UDynamicBlueprintBinding","text":"<ol> <li>Blueprint binding event base class, subclass UComponentDelegateBinding is the object binding</li> <li>Runtime binding events are stored in UBlueprintGeneratedClass :: DynamicBindingObjects</li> <li>UDynamicBlueprintBinding :: BindDynamicDelegates performs runtime binding</li> </ol>"},{"location":"ue4guide/editor-extensions/custom-blueprints/custom-blueprint/#custom-function-binding","title":"Custom function binding","text":"<ol> <li>Refer to FDelegateEditorBinding and FDelegateRuntimeBinding in UMG module</li> <li>Define EditorBinding in your own blueprint class and RuntimeBinding in GeneratedClass</li> <li>Write the binding operation at runtime by reflection</li> </ol>"},{"location":"ue4guide/editor-extensions/custom-blueprints/generic-or-wildcard-parameters/","title":"Generic or wildcard parameters","text":"<p>https://forums.unrealengine.com/community/community-content-tools-and-tutorials/27351-tutorial-how-to-accept-wildcard-structs-in-your-ufunctions</p> <p>https://answers.unrealengine.com/questions/223256/ufunction-tarray.html</p>"},{"location":"ue4guide/editor-extensions/custom-tools/custom-asset-type/","title":"Custom Content Browser References","text":"<ul> <li>Great Simple Reference: https://github.com/ue4plugins/TextAsset</li> <li>Tutorial from Max Gerke: https://vimeo.com/album/5022905/video/241039777</li> <li>http://headcrash.industries/reference/adding-new-asset-types-to-ue4</li> <li>Great Complex Reference: FaceFx UE4 Plugin: https://github.com/FaceFX/FaceFX-UE4</li> <li>Creating a Content Browser Asset in UE4: http://www.wraiyth.com/?p=209</li> <li>Custom Asset Picker: https://kasundevblog.wordpress.com/2015/10/07/creating-assets-with-support-of-a-custom-class-picker-unreal-engine-4</li> </ul>"},{"location":"ue4guide/editor-extensions/custom-tools/custom-asset-type/#custom-content-browser-asset-category","title":"Custom Content Browser Asset Category","text":"<p>You can register custom categories using the RegisterAdvancedAssetCategory function from the AssetToolsmodule. You'd then need to use the registered category flag in the GetCategories function of your custom type asset actions.</p> <p>The AI module provides an example of doing this. See FAIModule::StartupModule for the registration, and FAssetTypeActions_Blackboard::GetCategories for an example of using the registered flag in the asset type actions.</p> <p>I notice that tutorial doesn't actually cover creating asset type actions, however they're pretty simple. FAssetTypeActions_Enum provides a pretty basic example, just remember to register them with the AssetTools module (via RegisterAssetTypeActions).</p> <p>Reference From https://answers.unrealengine.com/questions/337715/custom-asset-category.html</p>"},{"location":"ue4guide/editor-extensions/custom-tools/custom-asset-type/#create-new-asset-type--asset-editor","title":"Create New Asset Type + Asset Editor","text":"<ol> <li> <p>Derive UFactory    - Easy to register custom Ufactory for hooking into overriding new asset creation    - Look at UDataAssetFactory, UDataTableAssetFactory    - Ufactory::ConfigureProperties()</p> <ul> <li>This is where the custom SClassPickerDialog gets created</li> </ul> </li> <li> <p>Derive from FAssetTypeActions_Base</p> </li> <li>Implement FAssetEditorToolkit</li> <li>Make sure to override cooking process somehow so that any lazily referenced objects in your new asset are added to the cook &amp; inclusion process</li> </ol> <p>Look at</p> Text Only<pre><code>```cpp\nUDataTable::Serialize() &amp; UWorld::AddReferencedObjects &amp;\nUWorld::PreSaveRoot(const TCHAR* Filename, TArray&lt;FString&gt;&amp; AdditionalPackagesToCook)\n```\n</code></pre>"},{"location":"ue4guide/editor-extensions/custom-tools/custom-editor-tool-tutorial/","title":"Class Diagram Overview","text":"<p>There's on overabundance of class/OOP and hard to track what is supposed to do what. Here's a great diagram from http://www.ms.mff.cuni.cz/~polakma1/adventure-plugin/programming.html that crystalizes the relationships.</p> <p>From a UI/MVC viewpoint: </p> <p>From a functionality/responsibility viewpoint: </p>"},{"location":"ue4guide/editor-extensions/custom-tools/custom-editor-tool-tutorial/#how-to-make-tools-tutorial","title":"How to Make Tools Tutorial","text":"<p>This is from Eric Zhang (@lxjk) excellent guide How to Make Tools in UE4</p> <p>Next we are going to add a custom menu, so we can add widget in the menu to run a command or open up a window.</p> <p>First we need to add menu extensions related functions in our editor module ToolExampleEditor:</p> <p>ToolExampleEditor.h</p> C++<pre><code>    public:\n        void AddMenuExtension(const FMenuExtensionDelegate &amp;extensionDelegate, FName extensionHook, const TSharedPtr &amp;CommandList = NULL, EExtensionHook::Position position = EExtensionHook::Before);\n        TSharedRef GetMenuRoot() { return MenuRoot; };\n\n    protected:\n        TSharedPtr LevelEditorMenuExtensibilityManager;\n        TSharedPtr MenuExtender;\n\n        static TSharedRef MenuRoot;\n\n        void MakePulldownMenu(FMenuBarBuilder &amp;menuBuilder);\n        void FillPulldownMenu(FMenuBuilder &amp;menuBuilder);\n</code></pre> <p>In the cpp file, define MenuRoot and add the implement all the functions. Here we will add a menu called \"Example\" and create 2 sections: \"Section 1\" and \"Section 2\", with extension hook name \"Section_1\" and \"Section_2\".</p> <p>ToolExampleEditor.cpp</p> Text Only<pre><code>TSharedRef FToolExampleEditor::MenuRoot = FWorkspaceItem::NewGroup(FText::FromString(\"Menu Root\"));\n\n\nvoid FToolExampleEditor::AddMenuExtension(const FMenuExtensionDelegate &amp;extensionDelegate, FName extensionHook, const TSharedPtr &amp;CommandList, EExtensionHook::Position position)\n{\n    MenuExtender-&gt;AddMenuExtension(extensionHook, position, CommandList, extensionDelegate);\n}\n\nvoid FToolExampleEditor::MakePulldownMenu(FMenuBarBuilder &amp;menuBuilder)\n{\n    menuBuilder.AddPullDownMenu(\n        FText::FromString(\"Example\"),\n        FText::FromString(\"Open the Example menu\"),\n        FNewMenuDelegate::CreateRaw(this, &amp;FToolExampleEditor::FillPulldownMenu),\n        \"Example\",\n        FName(TEXT(\"ExampleMenu\"))\n    );\n}\n\nvoid FToolExampleEditor::FillPulldownMenu(FMenuBuilder &amp;menuBuilder)\n{\n    // just a frame for tools to fill in\n    menuBuilder.BeginSection(\"ExampleSection\", FText::FromString(\"Section 1\"));\n    menuBuilder.AddMenuSeparator(FName(\"Section_1\"));\n    menuBuilder.EndSection();\n\n    menuBuilder.BeginSection(\"ExampleSection\", FText::FromString(\"Section 2\"));\n    menuBuilder.AddMenuSeparator(FName(\"Section_2\"));\n    menuBuilder.EndSection();\n}\n</code></pre> <p>Finally in StartupModule we add the following before we call the parent function. We add our menu after \"Window\" menu.</p> <p>ToolExampleEditor.cpp</p> Text Only<pre><code>void FToolExampleEditor::StartupModule()\n{\n    if (!IsRunningCommandlet())\n    {\n        FLevelEditorModule&amp; LevelEditorModule = FModuleManager::LoadModuleChecked(\"LevelEditor\");\n        LevelEditorMenuExtensibilityManager = LevelEditorModule.GetMenuExtensibilityManager();\n        MenuExtender = MakeShareable(new FExtender);\n        MenuExtender-&gt;AddMenuBarExtension(\"Window\", EExtensionHook::After, NULL, FMenuBarExtensionDelegate::CreateRaw(this, &amp;FToolExampleEditor::MakePulldownMenu));\n        LevelEditorMenuExtensibilityManager-&gt;AddExtender(MenuExtender);\n    }\n    IExampleModuleInterface::StartupModule();\n}\n</code></pre> <p>Now if you run it you should see the custom menu get added with two sections.</p> <p></p> <p>Next we can add our first tool to register to our menu. First add two new files:</p> <p></p> <p>This class will inherit from IExampleModuleListenerInterface, and we add function to create menu entry. We also add FUICommandList, which will define and map a menu item to a function. Finally we add our only menu function MenuCommand1, this function will be called when user click on the menu item.</p> <p>MenuTool.h</p> Text Only<pre><code>#include \"ToolExampleEditor/IExampleModuleInterface.h\"\n\nclass MenuTool : public IExampleModuleListenerInterface, public TSharedFromThis\n{\npublic:\n    virtual ~MenuTool() {}\n\n    virtual void OnStartupModule() override;\n    virtual void OnShutdownModule() override;\n\n    void MakeMenuEntry(FMenuBuilder &amp;menuBuilder);\n\nprotected:\n    TSharedPtr CommandList;\n\n    void MapCommands();\n\n    // UI Command functions\n    void MenuCommand1();\n};\n</code></pre> <p>On the cpp side, we got a lot more to do. First we need to define LOCTEXT_NAMESPACE at the beginning, and un-define it at the end. This is required to use UI_COMMAND macro. Then we start filling in each command, first create a FUICommandInfo member for each command in command list class, fill in RegisterCommands function by using UI_COMMAND marcro. Then in MapCommands function map each command info to a function. And of course define the command function MenuTool::MenuCommand1.</p> <p>In OnStartupModule, we create command list, register it, map it, then register to menu extension. In this case we want our item in \"Section 1\", and MakeMenuEntry will be called when Unreal build the menu, in which we simply add MenuCommand1 to the menu.</p> <p>In OnShutdownModule, we need to unregister command list.</p> <p>MenuTool.cpp</p> Text Only<pre><code>#include \"ToolExampleEditor/ToolExampleEditor.h\"\n#include \"MenuTool.h\"\n\n#define LOCTEXT_NAMESPACE \"MenuTool\"\n\nclass MenuToolCommands : public TCommands\n{\npublic:\n\n    MenuToolCommands()\n        : TCommands(\n        TEXT(\"MenuTool\"), // Context name for fast lookup\n        FText::FromString(\"Example Menu tool\"), // Context name for displaying\n        NAME_None,   // No parent context\n        FEditorStyle::GetStyleSetName() // Icon Style Set\n        )\n    {\n    }\n\n    virtual void RegisterCommands() override\n    {\n        UI_COMMAND(MenuCommand1, \"Menu Command 1\", \"Test Menu Command 1.\", EUserInterfaceActionType::Button, FInputGesture());\n\n    }\n\npublic:\n    TSharedPtr MenuCommand1;\n};\n\nvoid MenuTool::MapCommands()\n{\n    const auto&amp; Commands = MenuToolCommands::Get();\n\n    CommandList-&gt;MapAction(\n        Commands.MenuCommand1,\n        FExecuteAction::CreateSP(this, &amp;MenuTool::MenuCommand1),\n        FCanExecuteAction());\n}\n\nvoid MenuTool::OnStartupModule()\n{\n    CommandList = MakeShareable(new FUICommandList);\n    MenuToolCommands::Register();\n    MapAction();\n    FToolExampleEditor::Get().AddMenuExtension(\n        FMenuExtensionDelegate::CreateRaw(this, &amp;MenuTool::MakeMenuEntry),\n        FName(\"Section_1\"),\n        CommandList);\n}\n\nvoid MenuTool::OnShutdownModule()\n{\n    MenuToolCommands::Unregister();\n}\n\nvoid MenuTool::MakeMenuEntry(FMenuBuilder &amp;menuBuilder)\n{\n    menuBuilder.AddMenuEntry(MenuToolCommands::Get().MenuCommand1);\n}\n\nvoid MenuTool::MenuCommand1()\n{\n    UE_LOG(LogClass, Log, TEXT(\"clicked MenuCommand1\"));\n}\n\n#undef LOCTEXT_NAMESPACE\n</code></pre> <p>When this is all done, remember to add this tool as a listener to editor module in FToolExampleEditor::AddModuleListeners:</p> <p>ToolExampleEditor.cpp</p> Text Only<pre><code>ModuleListeners.Add(MakeShareable(new MenuTool));\n</code></pre> <p>Now if you build the project, you should see your menu item in the menu. And if you click on it, it will print \"clicked MenuCommand1\".</p> <p>By now you have a basic framework for tools, You can run anything you want based on a menu click.</p> <p></p>"},{"location":"ue4guide/editor-extensions/custom-tools/editor-gizmos/","title":"Editor gizmos","text":"<p>Editor Gizmos:</p> <p>ABaseTransformGizmo</p> <p>APivotTransformGizmo</p> <p>UGizmoHandleMeshComponent</p> <p>Result.bEditorPrimitiveRelevance = true;</p> <p>FGizmoHandle</p> <p>UGizmoHandleGroup</p> <p>UAxisGizmoHandleGroup</p> <p>UStretchGizmoHandleGroup</p> <p>UStretchGizmoHandleGroup</p> <p>PreviewMeshes:</p> <p>ACameraRig_Rail</p> <ul> <li> <p>USplineComponent</p> </li> <li> <p>USplineMeshComponent</p> </li> <li> <p>USplineMeshComponent* CreateSplinePreviewSegment();</p> </li> </ul> <p>// overrides CameraComponent's camera mesh</p> <p>static ConstructorHelpers::FObjectFinder&lt;UStaticMesh&gt; EditorCameraMesh(TEXT(\"/Engine/EditorMeshes/Camera/SM_CineCam.SM_CineCam\"));</p> <p>CameraMesh = EditorCameraMesh.Object;</p> <p>static ConstructorHelpers::FObjectFinder&lt;UStaticMesh&gt; PlaneMesh(TEXT(\"/Engine/ArtTools/RenderToTexture/Meshes/S_1_Unit_Plane.S_1_Unit_Plane\"));</p> <p>DebugFocusPlaneMesh = PlaneMesh.Object;</p> <p>static ConstructorHelpers::FObjectFinder&lt;UMaterial&gt; PlaneMat(TEXT(\"/Engine/EngineDebugMaterials/M_SimpleTranslucent.M_SimpleTranslucent\"));</p> <p>DebugFocusPlaneMaterial = PlaneMat.Object;</p> <p>// Setup uniform scaling</p> <p>UStaticMesh* UniformScaleMesh = nullptr;</p> <p>{</p> <p>static ConstructorHelpers::FObjectFinder&lt;UStaticMesh&gt; ObjectFinder( TEXT( \"/Engine/VREditor/TransformGizmo/UniformScaleHandle\" ) );</p> <p>UniformScaleMesh = ObjectFinder.Object;</p> <p>check( UniformScaleMesh != nullptr );</p> <p>}</p> <p>class UGizmoHandleMeshComponent* UGizmoHandleGroup::CreateMeshHandle( class UStaticMesh* HandleMesh, const FString&amp; ComponentName )</p> <p>{</p> <p>const bool bAllowGizmoLighting = false;        // @todo vreditor: Not sure if we want this for gizmos or not yet. Needs feedback. Also they're translucent right now.</p> <p>UGizmoHandleMeshComponent* HandleComponent = CreateDefaultSubobject&lt;UGizmoHandleMeshComponent&gt;( *ComponentName );</p> <p>check( HandleComponent != nullptr );</p> <p>HandleComponent-&gt;SetStaticMesh( HandleMesh );</p> <p>HandleComponent-&gt;SetMobility( EComponentMobility::Movable );</p> <p>HandleComponent-&gt;SetupAttachment( this );</p> <p>HandleComponent-&gt;SetCollisionEnabled( ECollisionEnabled::QueryOnly );</p> <p>HandleComponent-&gt;SetCollisionResponseToAllChannels( ECR_Ignore );</p> <p>HandleComponent-&gt;SetCollisionResponseToChannel( COLLISION_GIZMO, ECollisionResponse::ECR_Block );</p> <p>HandleComponent-&gt;SetCollisionObjectType( COLLISION_GIZMO );</p> <p>HandleComponent-&gt;bGenerateOverlapEvents = false;</p> <p>HandleComponent-&gt;SetCanEverAffectNavigation( false );</p> <p>HandleComponent-&gt;bCastDynamicShadow = bAllowGizmoLighting;</p> <p>HandleComponent-&gt;bCastStaticShadow = false;</p> <p>HandleComponent-&gt;bAffectDistanceFieldLighting = bAllowGizmoLighting;</p> <p>HandleComponent-&gt;bAffectDynamicIndirectLighting = bAllowGizmoLighting;</p> <p>//HandleComponent-&gt;bUseEditorCompositing = true;</p> <p>return HandleComponent;</p> <p>}</p>"},{"location":"ue4guide/editor-extensions/custom-tools/viewports/","title":"Viewports","text":"<p>Useful Classes:</p> <p>FLevelEditorModule has a lot of useful entry points like</p> <ul> <li> <p>GetFirstActiveViewport(),</p> </li> <li> <p>GetFirstLevelEditor(), etc</p> </li> </ul> <p>ILevelEditor</p> <p>ILevelViewport &amp; SLevelViewport: Widgets to control params for levelviewport:</p> <ul> <li> <p>StartPlayInEditorSession()</p> </li> <li> <p>HasPlayInEditorViewport()</p> </li> <li> <p>GetLevelViewportClient()</p> </li> <li> <p>ToggleGameView()</p> </li> <li> <p>AddOverlayWidget()</p> </li> </ul> <p>FLevelEditorViewportClient &amp; FEditorViewportClient</p> <p>Main class for Editor Viewports:</p> <p>FEditorViewportClient</p> <ul> <li>Also handles most of the viewport UI actions e.g. SetRealtimePreview(), SetShowStats(), SetCameraLock()</li> </ul> <p>Viewport Manipulation:</p> <p>FEditorViewportClient::SetCameraSetup(const FVector&amp; LocationForOrbiting, const FRotator&amp; InOrbitRotation, const FVector&amp; InOrbitZoom, const FVector&amp; InOrbitLookAt, const FVector&amp; InViewLocation, const FRotator &amp;InViewRotation );</p> <p>FEditorViewportClient::SetCameraLock()</p> <p>FEditorViewportClient::SetViewRotation( InOrbitRotation );</p> <p>FEditorViewportClient::SetViewLocation( InViewLocation + InOrbitZoom );</p> <p>FEditorViewportClient::SetLookAtLocation( InOrbitLookAt );</p> <p>//Current active level editing viewport</p> <p>GCurrentLevelEditingViewportClient</p> <p>GLastKeyLevelEditingViewportClient</p> <p>Callbacks on viewport manipulation:</p> <p>virtual void EditorApplyTranslation(const FVector&amp; DeltaTranslation, bool bAltDown, bool bShiftDown, bool bCtrlDown) override;</p> <p>virtual void EditorApplyRotation(const FRotator&amp; DeltaRotation, bool bAltDown, bool bShiftDown, bool bCtrlDown) override;</p> <p>virtual void EditorApplyScale(const FVector&amp; DeltaScale, const FVector* PivotLocation, bool bAltDown, bool bShiftDown, bool bCtrlDown) override;</p> <p>virtual void PostEditMove(bool bFinished) override;</p> <p>virtual void PostEditComponentMove(bool bFinished) override;</p> <p>Get All Viewports:</p> <ul> <li>/** The \"manager\" of all the layers for the UWorld currently being edited */</li> </ul> <p>GEditor-&gt;Layers;</p> <ul> <li>/** List of all viewport clients */</li> </ul> <p>GEditor-&gt;AllViewportClients;</p> <ul> <li>/** List of level editor viewport clients for level specific actions */</li> </ul> <p>GEditor-&gt;LevelViewportClients;</p> <p>Viewport Toggle RealTime:</p> <p>viewportClient-&gt;ToggleRealtime()</p> <p>viewportClient-&gt;IsRealTime()</p>"},{"location":"ue4guide/editor-extensions/detail-customization/accessing-tmap/","title":"TMap DetailsView Customizations","text":"<p>Accesing from <code>IPropertyHandle</code>: C++<pre><code>TSharedPtr&lt;IPropertyHandleMap&gt; MapProperty = PerPlatformProperty-&gt;AsMap();\n</code></pre></p> <p>Accessing from <code>FScriptMapHelper</code>:</p> C++<pre><code>FScriptMapHelper Helper(MapProperty, Value);\nfor (int32 i = 0, n = Helper.Num(); i &lt; n; ++i)\n{\n    if (Helper.IsValidIndex(i))\n    {\n        TSharedRef&lt;FPropertyPath&gt; dmgTag = rootMapPath-&gt;ExtendPath(FPropertyInfo(MapProperty-&gt;ValueProp));\n\n        TSharedPtr&lt;FJsonValue&gt; KeyElement = FJsonObjectConverter::UPropertyToJsonValue(MapProperty-&gt;KeyProp, Helper.GetKeyPtr(i), CheckFlags &gt; (~CPF_ParmFlags), SkipFlags, ExportCb);\n        TSharedPtr&lt;FJsonValue&gt; ValueElement = FJsonObjectConverter::UPropertyToJsonValue(MapProperty-&gt;ValueProp, Helper.GetValuePtr(i), CheckFlags &gt; (~CPF_ParmFlags), SkipFlags, ExportCb);\n        if (KeyElement.IsValid() &amp;&amp; ValueElement.IsValid())\n        {\n            FString KeyString = KeyElement-&gt;AsString();\n            if (KeyString.IsEmpty())\n            {\n                MapProperty-&gt;KeyProp-&gt;ExportTextItem(KeyString, Helper.GetKeyPtr(i), nullptr, nullptr, 0);\n                if (KeyString.IsEmpty())\n                {\n                    UE_LOG(LogJson, Error, TEXT(\"Unable to convert key to string for property %s.\"), *MapProperty-&gt;GetName())\n                        KeyString = FString::Printf(TEXT(\"Unparsed Key %d\"), i);\n                }\n            }\n\n          Out-&gt;SetField(KeyString, ValueElement);\n        }\n    }\n}\n\nif (const UStructProperty* KeyStructProperty = Cast&lt;const UStructProperty&gt;(MapProperty-&gt;KeyProp))\n{\n    if (const UStruct* Struct = KeyStructProperty-&gt;Struct)\n    {\n        //FScriptMapHelper MapHelper(MapProperty, MapProperty-&gt;ContainerPtrToValuePtr&lt;void&gt;(&amp;cmbtSnglton-&gt;DamageIdTable));\n        FScriptMapHelper MapHelper(MapProperty, &amp;cmbtSnglton-&gt;DamageIdTable);\n        for (int32 ElementIndex = 0; ElementIndex &lt; MapHelper.Num(); ++ElementIndex)\n        {\n            if (MapHelper.IsValidIndex(ElementIndex))\n            {\n                const uint8* KeyAddress = MapHelper.GetKeyPtr(ElementIndex);\n                for (UProperty* StructProp = Struct-&gt;RefLink; StructProp; StructProp = StructProp-&gt;NextRef)\n                {\n                    PropertyPath.Push(KeyStructProperty, ElementIndex);\n                    GetInstancedSubObjects_Inner(PropertyPath, KeyAddress, OutObjects);\n                    PropertyPath.Pop();\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"ue4guide/editor-extensions/detail-customization/array-builder/","title":"Array builder","text":"<p>If you want the insert/duplicate/delete buttons to appear, you should be using the AddChildProperty() API, rather than AddChildContent(). You can then control whether the insert/duplicate/delete buttons appear on a per-entry basis by using IDetailPropertyRow:: ShowPropertyButtons (this gets you the some of ability to prevent entry deletion that you desire).</p> <p>FYI, you will need to pass the IPropertyHandle of the array entry through to AddChildProperty(), not the parent property that is passed into CustomizeStructChildren.</p> <p>For notifications on array modification, you can override PostEditChangeChainProperty in your UObject-derived class. You can check the FName of the property being modified via the passed-in PropertyChangedEvent. R</p> <p>Reference From https://udn.unrealengine.com/questions/185116/view.html</p> <p>There isn't a single widget that we use to display array properties, as we have to build the widget based on the type of data in the array.</p> <p>You can look at SPropertyValueWidget::ConstructPropertyEditorWidget in PropertyEditorHelper.cpp to see how we parse all of that and decide what sort of widgets to build to represent the property. This should all be handled automatically, so if you just want your array property to display, it should be as easy as adding the property to your customization.</p> <p>If you're looking to build your own array editor, take a look at the FDetailArrayBuilder class in PropertyCustomizationHelper.h. There should be quite a few instances where we use this in the engine that you can look at for some examples of how to use it. Hope that helps.</p> <p>Reference From https://udn.unrealengine.com/questions/330277/view.html</p>"},{"location":"ue4guide/editor-extensions/detail-customization/detail-customization-examples/","title":"Detail customization examples","text":""},{"location":"ue4guide/editor-extensions/detail-customization/detail-customization-examples/#refresh-customization-on-hot-reload","title":"Refresh customization on hot reload:","text":"C++<pre><code>FPropertyEditorModule::NotifyCustomizationModuleChanged()\n</code></pre>"},{"location":"ue4guide/editor-extensions/detail-customization/detail-customization-examples/#getting-default-widget","title":"Getting default widget:","text":"C++<pre><code>IDetailPropertyRow::GetDefaultWidgets()\n</code></pre>"},{"location":"ue4guide/editor-extensions/detail-customization/detail-customization-examples/#custom-array-properties","title":"Custom Array Properties","text":"<ul> <li>Simple example</li> </ul> C++<pre><code>IDetailCategoryBuilder&amp; NodeCategory = DetailBuilder.EditCategory(\"Node\");\nTSharedRef&lt;FDetailArrayBuilder&gt; NodeArrayBuilder = MakeShareable(new FDetailArrayBuilder(NodesPropertyHandle.ToSharedRef()));\nNodeArrayBuilder-&gt;OnGenerateArrayElementWidget(FOnGenerateArrayElementWidget::CreateSP(this, &amp;FRigDetails::GenerateNodeArrayElementWidget, &amp;DetailBuilder));\n\nNodeCategory.AddCustomBuilder( NodeArrayBuilder, false );\n</code></pre> <ul> <li>Complex example is <code>FNiagaraDetailSourcedArrayBuilder</code></li> </ul>"},{"location":"ue4guide/editor-extensions/detail-customization/detail-customization-examples/#working-with-ipropertyhandle--detailchildrenbuilder","title":"Working with IPropertyHandle &amp; DetailChildrenBuilder","text":"<ul> <li>Getting a child IPropertyHandle</li> </ul> C++<pre><code>TSharedPtr&lt;IPropertyHandle&gt; VariantTypePropHndle = StructPropertyHandle-&gt;GetChildHandle(GET_MEMBER_NAME_CHECKED(TInSumType, VariantType));\n</code></pre> <ul> <li>Adding said property</li> </ul> C++<pre><code>ChildBuilder.AddProperty(VariantTypePropHndle.ToSharedRef());\n</code></pre> <ul> <li>Adding property with SProperty Widget</li> </ul> C++<pre><code>SNew( SProperty, DetailBuilder.GetProperty(GET_MEMBER_NAME_CHECKED(ABBStadiumRig, bDbgShowRootVis)))\n</code></pre> <ul> <li>Getting Detail View from <code>IDetailChildrenBuilder</code></li> </ul> C++<pre><code>TSharedRef&lt;const SWidget&gt; DetailsView = ChildBuilder.GetParentCategory().GetParentLayout().GetDetailsView()-&gt;AsShared();\n</code></pre>"},{"location":"ue4guide/editor-extensions/detail-customization/detail-customization-examples/#detailrow","title":"DetailRow","text":"C++<pre><code>FNiagaraEmitterDetails::OnGenerateEventReceiverEntry(TSharedRef&lt;IPropertyHandle&gt; ElementProperty, int32 ElementIndex, IDetailChildrenBuilder&amp; ChildrenBuilder)\n{\n  TSharedPtr&lt;IPropertyHandle&gt; NameProperty = ElementProperty-&gt;GetChildHandle(GET_MEMBER_NAME_CHECKED(FNiagaraEventReceiverProperties, Name));\n  FName DisplayName;\n  NameProperty-&gt;GetValue(DisplayName);\n  //         ChildrenBuilder.AddChildProperty(ElementProperty).DisplayName(FText::FromName(DisplayName));\n  IDetailGroup&amp; Group = ChildrenBuilder.AddGroup(DisplayName, FText::FromName(DisplayName));\n  uint32 NumChildren = 0;\n  if (ElementProperty-&gt;GetNumChildren(NumChildren) == FPropertyAccess::Success)\n  {\n    for (uint32 i = 0; i &lt; NumChildren; ++i)\n    {\n      TSharedPtr&lt;IPropertyHandle&gt; Child = ElementProperty-&gt;GetChildHandle(i);\n      //Dont add the ID. We just grab it's name for the name region of this property.\n      if (Child.IsValid() &amp;&amp; Child-&gt;GetProperty()-&gt;GetName() != GET_MEMBER_NAME_CHECKED(FNiagaraEventReceiverProperties, Name).ToString())\n      {\n        TSharedPtr&lt;SWidget&gt; NameWidget;\n        TSharedPtr&lt;SWidget&gt; ValueWidget;\n        FDetailWidgetRow DefaultDetailRow;\n        IDetailPropertyRow&amp; Row = Group.AddPropertyRow(Child.ToSharedRef());\n        Row.GetDefaultWidgets(NameWidget, ValueWidget, DefaultDetailRow);\n        Row.CustomWidget(true)\n          .NameContent()\n          [\n            NameWidget.ToSharedRef()\n          ]\n          .ValueContent()\n          [\n            ValueWidget.ToSharedRef()\n          ];\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"ue4guide/editor-extensions/detail-customization/detail-customization/","title":"Overview","text":""},{"location":"ue4guide/editor-extensions/detail-customization/detail-customization/#property-handles","title":"Property Handles","text":"<ul> <li> <p>The customization framework is built on the IPropertyHandle type, which represents a particular UPROPERTY on your class, but can potentially be linked to the value of that property on multiple instances of your class (for example, if you are viewing properties of selected actors in a level and have more than one actor selected).</p> </li> <li> <p>Access by:</p> </li> </ul> C++<pre><code>TSharedRef&lt; IPropertyHandle &gt; Prop = DetailBuilder.GetProperty(GET_MEMBER_NAME_CHECKED(UMyClass, BaseString));\n</code></pre>"},{"location":"ue4guide/editor-extensions/detail-customization/detail-customization/#categories","title":"Categories","text":"<ul> <li>Properties are divided into categories as specified by the Category metadata. You are free to reorganize property categories within a customization, to hide existing categories and to create new ones. You access a category builder by calling:</li> </ul> C++<pre><code>IDetailCategoryBuilder&amp; Cat = DetailBuilder.EditCategory(TEXT(\"CatName\"));\n</code></pre>"},{"location":"ue4guide/editor-extensions/detail-customization/detail-customization/#basic-operations","title":"Basic Operations","text":"<ul> <li>Note hiding is done using the DetailBuilder, not the CategoryBuilder</li> </ul> C++<pre><code>DetailBuilder.HideProperty(Prop);\n</code></pre> <ul> <li>Hide an entire category</li> </ul> C++<pre><code>DetailBuilder.HideCategory(TEXT(\"CatName\"));\n</code></pre> <ul> <li>Add a property to a category (properties will be shown in the order you add them)</li> </ul> C++<pre><code>Cat.AddProperty(Prop);\n</code></pre>"},{"location":"ue4guide/editor-extensions/detail-customization/detail-customization/#dynamic-state","title":"Dynamic State","text":"<p>Using Slate attributes, it's easy to have property state such as visibility and enabled state determined dynamically. The AddProperty method returns a reference to an IDetailPropertyRow interface that provides this functionality. Unfortunately sometimes you're forced to write some rather ugly boilerplate...</p> C++<pre><code>auto OnGetPropVisibility = [] { return (do_some_state_query_here) ? EVisibility::Visible : EVisibility::Collapsed; };\n\nauto PropVisibilityAttr = TAttribute&lt;EVisibility&gt;::Create(TAttribute&lt;EVisibility&gt;::FGetter::CreateLambda(OnGetPropVisibility));\n\nCat.AddProperty(Prop).Visibility(PropVisibilityAttr);\n</code></pre>"},{"location":"ue4guide/editor-extensions/detail-customization/detail-customization/#accessing-the-customized-objects","title":"Accessing the Customized Object(s)","text":"<p>Some simple customizations may not require direct access to the objects being customized, but often it's useful. Remember that the details panel may be displaying multiple objects at any one time.</p> C++<pre><code>TArray&lt; TWeakObjectPtr&lt; UObject &gt; &gt; Objects;\n\nDetailBuilder.GetObjectsBeingCustomized(Objects);\n</code></pre>"},{"location":"ue4guide/editor-extensions/detail-customization/detail-customization/#custom-rows","title":"Custom Rows","text":"<p>If you're writing a customization, you probably want to do more than just rearrange properties. Custom rows let you add arbitrary Slate widgets to the details panel. Here's an example based on the class definition given above.</p> C++<pre><code>/*\n\nShowing a warning message about invalid property values.\n\n(Note that customizations can also be used to enforce validation on user-entered property values).\n\n*/\n\nauto OnGetWarningVisibility = [MyObject]\n\n{\n\n return MyObject.IsValid() &amp;&amp; MyObject-&gt;BaseString.IsEmpty() ? EVisibility::Visible : EVisibility::Collapsed;\n\n};\n\nauto WarningVisibilityAttr = TAttribute&lt; EVisibility &gt;::Create(TAttribute&lt; EVisibility &gt;::FGetter::CreateLambda(OnGetWarningVisibility));\n\nCat.AddCustomRow(LOCTEXT(\"MyWarningRowFilterString\", \"Search Filter Keywords\"))\n\n.Visibility(WarningVisibilityAttr)\n\n.WholeRowContent()\n\n [\n SNew(STextBlock)\n\n .Text(LOCTEXT(\"MyWarningTest\", \"BaseString should not be empty!\"))\n ];\n\n/*\n\nDisplaying a button that triggers editor-time processing.\n\n*/\n\nauto OnRegenerate = [MyObject]\n\n{\n\n if(MyObject.IsValid())\n\n {\n\n MyObject-&gt;GeneratedList.Empty();\n\n for(int32 i = 0; i &lt; MyObject-&gt;Count; ++i)\n\n {\n\n MyObject-&gt;GeneratedList.Add(MyObject-&gt;BaseString + TEXT(\"\\_\") + (MyObject-&gt;Count + 1));\n\n }\n\n }\n\n\n\n return FReply::Handled();\n\n};\n\nCat.AddCustomRow(LOCTEXT(\"MyButtonRowFilterString\", \"Search Filter Keywords\"))\n\n.WholeRowContent()\n\n [\n\n SNew(SButton)\n\n .Text(LOCTEXT(\"RegenerateBtnText\", \"Regenerate List\"))\n\n .OnClicked_Lambda(OnRegenerate)\n\n ];\n</code></pre>"},{"location":"ue4guide/editor-extensions/detail-customization/detail-customization/#refreshing","title":"Refreshing","text":"<p>For most cases, using dynamic updates as above is the easiest. Once in a while though, you may just want to force the details panel to refresh and call your CustomizeDetails method again from scratch. You'll generally want to do this from within a handler that you've added to one of your custom controls, or perhaps a property changed event.</p> <p>DetailBuilder.ForceRefreshDetails();</p> <p>Reference From http://kantandev.com/articles/details-panel-customization</p>"},{"location":"ue4guide/editor-extensions/detail-customization/detail-customization/#create-a-widget-for-a-particular-property-on-a-uobject-inside-detail-customization","title":"Create a widget for a particular property on a uobject inside detail customization","text":"C++<pre><code> SNew(SProperty, DetailBuilder.GetProperty(GET_MEMBER_NAME_CHECKED(UInstanceToolEditorUISetting, SnapOffset)))\n</code></pre> <ul> <li>To add it on a separate object, use CreateSingleProperty() from below</li> </ul>"},{"location":"ue4guide/editor-extensions/detail-customization/detail-customization/#listen-on-property-changes-and-notifiesnotifications","title":"Listen on property changes and notifies/notifications","text":"<ul> <li>CreatePropertyChangeListener(): Generic mechanism to hook into object modifications</li> </ul> C++<pre><code>TSet&lt;UObject*&gt; FCoreUObjectDelegates::ObjectsModifiedThisFrame;\n\nFCoreUObjectDelegates::FOnObjectModified FCoreUObjectDelegates::OnObjectModified;\n\nFCoreUObjectDelegates::FOnPreObjectPropertyChanged FCoreUObjectDelegates::OnPreObjectPropertyChanged;\n\nFCoreUObjectDelegates::FOnObjectPropertyChanged FCoreUObjectDelegates::OnObjectPropertyChanged;\n</code></pre> <ul> <li>Also look at Editor delegates that get called globally on property change modification Also FCoreUObjectDelegates in UObjectGlobals:</li> </ul> C++<pre><code>virtual TSharedPtr&lt;class ISinglePropertyView&gt; CreateSingleProperty( UObject* **InObject**, FName **InPropertyName**, const struct FSinglePropertyParams&amp; InitParams );\n\nvirtual TSharedRef&lt;class IStructureDetailsView&gt; CreateStructureDetailView(const struct FDetailsViewArgs&gt; DetailsViewArgs, const FStructureDetailsViewArgs&gt; **StructureDetailsViewArgs**, TSharedPtr&lt;class FStructOnScope&gt; **StructData**, const FText&amp; **CustomName** = FText::GetEmpty());\n\nvirtual UStructProperty* RegisterStructOnScopeProperty(TSharedRef&lt;FStructOnScope&gt; **StructOnScope**);\n</code></pre>"},{"location":"ue4guide/editor-extensions/detail-customization/detail-customization/#customizing-existing-idetailcustomization","title":"Customizing existing IDetailCustomization","text":"C++<pre><code>IDetailCategoryBuilder&amp; **Category** = **DetailBuilder**.EditCategory(\"TrackEvent\");\n                        **Category**.AddProperty(\"EventReceivers\").ShouldAutoExpand(true);\n\nvirtual IDetailPropertyRow&amp; AddProperty(FName **PropertyPath**, UClass* **ClassOutermost** = nullptr, FName **InstanceName** = NAME_None, EPropertyLocation::Type **Location** = EPropertyLocation::Default) = 0;\n\nvirtual IDetailPropertyRow* AddExternalObjects(const TArray&lt;UObject*&gt;&gt; **Objects**, EPropertyLocation::Type **Location** = EPropertyLocation::Default) = 0;\n\nvirtual IDetailPropertyRow* AddExternalObjectProperty(const TArray&lt;UObject*&gt;&gt; **Objects**, FName **PropertyName**, EPropertyLocation::Type **Location** = EPropertyLocation::Default) = 0;\n\nvirtual IDetailPropertyRow* AddExternalStructure(TSharedPtr&lt;FStructOnScope&gt; **StructData**, EPropertyLocation::Type **Location** = EPropertyLocation::Default) = 0;\n\nvirtual IDetailPropertyRow* AddExternalStructureProperty(TSharedPtr&lt;FStructOnScope&gt; **StructData**, FName **PropertyName**, EPropertyLocation::Type **Location** = EPropertyLocation::Default) = 0;\n\nvirtual TArray&lt;TSharedPtr&lt;IPropertyHandle&gt;&gt; AddAllExternalStructureProperties(TSharedRef&lt;FStructOnScope&gt; **StructData**, EPropertyLocation::Type **Location** = EPropertyLocation::Default) = 0;\n</code></pre>"},{"location":"ue4guide/editor-extensions/detail-customization/detail-customization/#create-detailview-for-a-structure","title":"Create DetailView for a structure","text":"C++<pre><code>virtual TSharedRef&lt;class IStructureDetailsView&gt; CreateStructureDetailView(const struct FDetailsViewArgs&gt; DetailsViewArgs, const FStructureDetailsViewArgs&gt; **StructureDetailsViewArgs**, TSharedPtr&lt;class FStructOnScope&gt; **StructData**, const FText&amp; **CustomName** = FText::GetEmpty());\n</code></pre>"},{"location":"ue4guide/editor-extensions/detail-customization/detail-customization/#add-property-on-external-object","title":"Add Property On External Object","text":"C++<pre><code>IDetailCategoryBuilder::AddExternalProperty()\n</code></pre>"},{"location":"ue4guide/editor-extensions/detail-customization/detail-customization/#useful-customization-for-adding-properties-external-properties-structures","title":"Useful customization for adding properties, external properties, structures","text":"C++<pre><code>virtual UStructProperty* RegisterStructOnScopeProperty(TSharedRef&lt;FStructOnScope&gt; **StructOnScope**);\n</code></pre>"},{"location":"ue4guide/editor-extensions/detail-customization/detail-customization/#create-default-property-widget-from-ipropertyhandle","title":"Create Default Property Widget from IPropertyHandle","text":"C++<pre><code>**TSharedPtr&lt;IPropertyHandle&gt; OverrideLightmapRes = LightingCategory.GetProperty( \"bOverrideLightmapRes\" );**\n\n**SNew( SProperty )**\n\n**InPropertyHandle**-&gt;CreatePropertyNameWidget( **DisplayName** )\n\n**InPropertyHandle**-&gt;CreatePropertyValueWidget()\n\nFPropertyEditorModule::CreateSingleProperty( UObject* **InObject**, FName **InPropertyName**, const struct FSinglePropertyParams&amp; InitParams );\n\nTSharedPtr&lt;IPropertyHandle&gt; **manipPropHandle** = **DetailBuilder**.GetProperty(**ManipPropName**);  \n**manipPropHandle**-&gt;CreatePropertyValueWidget()\n</code></pre>"},{"location":"ue4guide/editor-extensions/detail-customization/detail-customization/#register-custom-class-customization","title":"Register Custom Class Customization","text":"C++<pre><code>**PropertyModule**.RegisterCustomClassLayout(**ClassName**, **DetailLayoutDelegate**);\n</code></pre>"},{"location":"ue4guide/editor-extensions/detail-customization/detail-customization/#register-custom-propertystruct-customization","title":"Register Custom Property/Struct Customization","text":"C++<pre><code>virtual void RegisterCustomPropertyTypeLayout( FName **PropertyTypeName**, FOnGetPropertyTypeCustomizationInstance PropertyTypeLayoutDelegate, TSharedPtr&lt;IPropertyTypeIdentifier&gt; **Identifier** = nullptr, TSharedPtr&lt;IDetailsView&gt; **ForSpecificInstance** = nullptr );\n</code></pre>"},{"location":"ue4guide/editor-extensions/detail-customization/detail-customization/#register-custom-propertystruct-customization-for-only-this-instance","title":"Register Custom Property/Struct Customization for only this instance","text":"C++<pre><code>virtual void RegisterInstancedCustomPropertyLayout( UStruct* **Class**, FOnGetDetailCustomizationInstance **DetailLayoutDelegate** ) = 0;\n</code></pre>"},{"location":"ue4guide/editor-extensions/detail-customization/detail-customization/#create-custom-detail-view","title":"Create Custom Detail View","text":"C++<pre><code>virtual TSharedRef&lt;class IDetailsView&gt; CreateDetailView( const struct FDetailsViewArgs&gt; DetailsViewArgs );\n\nvirtual TSharedRef&lt;SWindow&gt; CreateFloatingDetailsView( const TArray&lt; UObject* &gt;&gt; **InObjects**, bool **bIsLockable** );\n</code></pre>"},{"location":"ue4guide/editor-extensions/detail-customization/detail-customization/#override-property-visibility-for-detailview","title":"Override Property Visibility For DetailView","text":"C++<pre><code>objReflWidget-&gt;SetIsPropertyVisibleDelegate(FIsPropertyVisible::CreateLambda(\\[**bHaveTemplate**\\](const FPropertyAndParent&amp; **PropertyAndParent**) { return true; }));\n</code></pre>"},{"location":"ue4guide/editor-extensions/detail-customization/detail-customization/#create-dynamic-propertystruct-detail-view-customization","title":"Create Dynamic Property/Struct detail view customization","text":"C++<pre><code>/** Specific details customization for the event track */\nclass FEventTrackCustomization : public IDetailCustomization\n{\npublic:\n  virtual void CustomizeDetails(IDetailLayoutBuilder&amp; DetailBuilder) override\n  {\n    DetailBuilder.HideCategory(\"Track\");\n    DetailBuilder.HideCategory(\"General\");\n\n    IDetailCategoryBuilder&amp; Category = DetailBuilder.EditCategory(\"TrackEvent\");\n    Category.AddProperty(\"EventReceivers\").ShouldAutoExpand(true);\n  }\n};\n\nauto PopulateSubMenu = [this, EventTrack](FMenuBuilder&amp; SubMenuBuilder)\n{\n  FPropertyEditorModule&amp; PropertyEditor = FModuleManager::Get().LoadModuleChecked&lt;FPropertyEditorModule&gt;(\"PropertyEditor\");\n\n  // Create a details view for the track\n  FDetailsViewArgs DetailsViewArgs(false,false,false,FDetailsViewArgs::HideNameArea,true);\n  DetailsViewArgs.DefaultsOnlyVisibility = EEditDefaultsOnlyNodeVisibility::Automatic;\n  DetailsViewArgs.bShowOptions = false;\n  DetailsViewArgs.ColumnWidth = 0.55f;\n\n  TSharedRef&lt;IDetailsView&gt; DetailsView = PropertyEditor.CreateDetailView(DetailsViewArgs);\n\n  // Register the custom type layout for the class\n  FOnGetDetailCustomizationInstance CreateInstance = FOnGetDetailCustomizationInstance::CreateLambda(&amp;MakeShared&lt;FEventTrackCustomization&gt;);\n  DetailsView-&gt;RegisterInstancedCustomPropertyLayout(UMovieSceneEventTrack::StaticClass(), CreateInstance);\n\n  GetSequencer()-&gt;OnInitializeDetailsPanel().Broadcast(DetailsView, GetSequencer().ToSharedRef());\n\n  // Assign the object\n  DetailsView-&gt;SetObject(EventTrack, true);\n\n  // Add it to the menu\n  TSharedRef&lt; SWidget &gt; DetailsViewWidget =\n    SNew(SBox)\n    .MaxDesiredHeight(400.0f)\n    .WidthOverride(450.0f)\n  [\n    DetailsView\n  ];\n\n  SubMenuBuilder.AddWidget(DetailsViewWidget, FText(), true, false);\n};\n</code></pre>"},{"location":"ue4guide/editor-extensions/sequencer/binding-objects-sequence-ids/","title":"Binding objects sequence ids","text":"<ol> <li> <p>IMovieScenePlayer::FindBoundObjects()    - Searches all bound objects (including overrides and spawned objects)</p> </li> <li> <p>Cast&lt;IMovieSceneBindingOverridesInterface&gt;(Player)-&gt;LocateBoundObjects()    - Only returns the overrided bindings</p> </li> <li> <p>Cast&lt;UMovieSceneSequence&gt;(Player)::LocateBoundObjects():    - Finds all default bindings</p> </li> <li> <p>ISequencer::GetFocusedTemplateID    - Retrieve the currently focused (sub) sequence ID in edit mode</p> </li> </ol> <p>Reference From https://udn.unrealengine.com/questions/407751/actor-rebinding-in-code-with-sequencer.html</p> <p>(4.21) IMovieScenePlayer::FindCachedObjectId(UObject&amp; InObject, FMovieSceneSequenceIDRef SequenceID)</p> <ul> <li>Attempt to find the object binding ID for the specified object, in the specified sequence</li> </ul> <p>Sequence IDs:</p> <ul> <li>SequenceID are deterministically generated by recursively hashing together the names of sub sections that sequences are instanced within, child first. So to generate the sequence ID for a given sequence, we'd use the following approach:</li> </ul> C++<pre><code>1. FMovieSceneSequenceID CurrentID = MovieSceneSequenceID::Root;\n\n2. UMovieSceneSubSection\\* OwningSection = ...; // Get the child-most sub section\n\n3. while (OwningSection)\n\n4. {\n\n5. CurrentID = CurrentID.AccumulateParentID(OwningSection-&gt;GetSequenceID());\n\n6. OwningSection = ...; // Get the next parent sub section\n\n7. }\n</code></pre> <ul> <li>There is a blueprint node (Get Sequence Binding)</li> </ul> <p>Reference From https://udn.unrealengine.com/questions/407751/actor-rebinding-in-code-with-sequencer.html</p>"},{"location":"ue4guide/editor-extensions/sequencer/design-notes-from-epic/","title":"Design notes from epic","text":""},{"location":"ue4guide/editor-extensions/sequencer/design-notes-from-epic/#sequencer-compiler","title":"Sequencer Compiler","text":"<p>The compiler's job is to generate the necessary data structures for efficient runtime evaluation. Sequencer supports a few more nuanced concepts which would be slow to compute for complex sequences at runtime such as Begin/End evaluation, restoring pre-animation state, hierarchical bias, evaluation priority, evaluation groups and sub sequences.</p> <p>Reference From https://udn.unrealengine.com/questions/428326/419-sequencer-compiling-changes.html</p> <p>The primary job of the compiler is to determine what happens in the sequence, and when. It does this by generating a look-up table referred to as the Evaluation Field which is used to efficiently evaluate the necessary tracks in order for any given time</p> <p>reference From https://udn.unrealengine.com/questions/428326/419-sequencer-compiling-changes.html</p> <p>In this way we can handle incredibly complex trees of sequence and sub sequence data with relatively minimal overhead.</p> <p>Reference From https://udn.unrealengine.com/questions/428326/419-sequencer-compiling-changes.html</p> <p>We added the idea of the Instance Data Object in 4.19 in order to support the global transform origin for transform tracks and it made sense to define it in such a way that you can inject any UObject you want with whatever interfaces/inheritance you want your tracks to interpret.</p> <p>Reference From https://udn.unrealengine.com/questions/428326/419-sequencer-compiling-changes.html</p> <p>The sequence compiler has evolved in 4.19 to better support procedural changes to sequences at runtime by affording partial and iterative compilation.</p> <p>Reference From https://udn.unrealengine.com/questions/428326/419-sequencer-compiling-changes.html</p> <p>Previously we would assume that templates are compiled on cook, and immutable at runtime, whereas now we can automatically re-compile segments of the template as and when they are evaluated, if the sequence has changed. We are also much better at only invalidating parts of the template that have actually changed - for instance if you add a new section to a track, only the time range that section occupies will need re-compiling, rather than the whole template.</p> <p>Reference From https://udn.unrealengine.com/questions/428326/419-sequencer-compiling-changes.html</p> <p>You can now fully compile a sequence like so:</p> <ol> <li>UMovieSceneSequence* Sequence = ...; 1.</li> <li>FMovieSceneSequencePrecompiledTemplateStore TemplateStore;</li> <li>FMovieSceneCompiler::Compile(*Sequence, *TemplateStore);</li> </ol> <p>Bear in mind however:</p> <ul> <li> <p>That we will automatically re-compile segments of the template as they are evaluated if they have changed in any way, so you may be able to just remove the full upfront recompilation if you're happy with this behaviour.</p> </li> <li> <p>It's worth noting that when there is no compiled data, it's possible that very complex sequences may cause hitches when playing back due to the compiler periodically kicking in.</p> </li> <li> <p>You can avoid this by compiling the entire template upfront (as above) if you want. We have plans to improve this further to support async compilation, and compiling particular ranges.</p> </li> </ul> <p>Reference From https://udn.unrealengine.com/questions/428326/419-sequencer-compiling-changes.html</p> <p>Sequence IDs are deterministically generated by recursively hashing together the names of sub sections that sequences are instanced within, child first. So to generate the sequence ID for a given sequence, we'd use the following approach:</p> <ol> <li> <p>FMovieSceneSequenceID CurrentID = MovieSceneSequenceID::Root;</p> </li> <li> <p>UMovieSceneSubSection* OwningSection = ...; // Get the child-most sub section</p> </li> <li> <p>while (OwningSection)</p> </li> <li> <p>{</p> </li> <li> <p>CurrentID = CurrentID.AccumulateParentID(OwningSection-&gt;GetSequenceID());</p> </li> <li> <p>OwningSection = ...; // Get the next parent sub section</p> </li> <li> <p>}</p> </li> </ol> <p>You can also retrieve the currently focused sequence ID from ISequencer::GetFocusedTemplateID</p> <p>Reference From https://udn.unrealengine.com/questions/407751/actor-rebinding-in-code-with-sequencer.html</p>"},{"location":"ue4guide/editor-extensions/sequencer/design-notes-from-epic/#design-goals","title":"Design Goals:","text":"<p>One crucial point is that all evaluation of sequence assets (through evaluation templates) is immutable - every evaluation method is const.</p> <p>Any storage or mutation of state occurs through transient data structures which are owned by the template instance (or player) that's actually driving the evaluation.</p> <p>This means it's very cheap to start playing a precompiled template, and simple to play the same animation multiple times as we don't have to create instances for all the tracks in the sequence before playing them back (which is especially costly for very large cinematics, but necessary also for UI that makes heavy use of animations).</p> <p>Reference From https://udn.unrealengine.com/questions/428326/419-sequencer-compiling-changes.html</p> <p>The execution token stack using inline storage where possible is one place where using heap allocated tokens was showing up as a large cost for very big sequences. Typically execution tokens are small and mostly just define logic so they fit well into this optimization.</p> <p>FMovieSceneSkeletalAnimationSectionTemplateParameters includes the section bounds which would not be appropriate to store on FMovieSceneSkeletalAnimationParams since that's owned by the section itself. FMovieSceneSkeletalAnimationParams could have been added as a member to FMovieSceneSkeletalAnimationSectionTemplateParameters instead of using inheritance.</p> <p>FMovieSceneExecutionTokens is owned by the instance playing back the sequence itself, and is populated and flushed throughout the evaluation. Using token stacks like this may also allow us to make progress in concurrent evaluation in future. IMovieScenePreAnimatedTokenProducer is a separate concept because we do have several tracks that need to cache and restore multiple types of pre-animated state at different times (some global, some bound to the section etc)</p> <p>Reference From https://udn.unrealengine.com/questions/428326/419-sequencer-compiling-changes.html</p>"},{"location":"ue4guide/editor-extensions/sequencer/preanimated-state-caching/","title":"Preanimated state caching","text":"<p>In general, the more robust way to restore state like this is to store pre-animated state tokens for the animation. Using a pre-animated state token is more robust against the sort of issues that TearDown is more fragile, such as deleting tracks, re-assigning objects to tracks, overlapping sections that animate the same object etc etc. It also eliminates the need for the track itself to remember what its previous state was in many circumstances (which also can remove the need for persistent data).</p> <p>Here's a little background on how the pre-animated state caching works:</p> <p>FMovieScenePreAnimatedState is responsible for caching object state before an object is manipulated by sequencer, such that the object can be restored back to its original state when necessary. It does this in a way that can also work gracefully with overlapping sections that animate the object in the same way. A simple example would be an object's transform. Say you have 2 sections that want to animate an object's transform, and return it back to its original position when they are no longer evaluated:</p> <ol> <li> <p>[ section 1 ]</p> </li> <li> <p>[ section 2 ]</p> </li> </ol> <p>Section 1 and section 2 both call SavePreAnimatedState, but the system internally will use the anim type ID to check whether it has already saved such state, and ref-count the state if necessary. This means that it doesn't matter in what order the sections begin or end, it will only ever cache the unanimated state, and only ever restore it when there is nothing else animating the object with that type ID.</p> <p>To use pre-animated state in this way, you can take the following approach:</p> C++<pre><code>  struct FMyPreAnimatedStateToken : IMovieScenePreAnimatedToken\n\n  {\n\n  FMyPreAnimatedStateToken(UObject&amp; UnAnimatedObject)\n\n  {\n\n  //... Cache off any data inside this token required to restore this object after we're done animating it\n\n  }\n\n  virtual void RestoreState(UObject&amp; Object, IMovieScenePlayer&amp; Player) override\n\n  {\n\n  //... Restore the object back to its previous state using the cached data from this token\n\n }\n\n };\n\n struct FMyPreAnimatedStateProducer : IMovieScenePreAnimatedTokenProducer\n\n {\n\n virtual IMovieScenePreAnimatedTokenPtr CacheExistingState(UObject&amp; Object) const override\n\n {\n\n return FMyPreAnimatedStateToken(Object);\n\n }\n\n };\n\n /\\*\\*\n\n \\* Gets a single, unique identifier that represents a FMyPreAnimatedStateToken\n\n \\*/\n\n static FMovieSceneAnimTypeID GetMyAnimationTypeID()\n\n {\n\n static FMovieSceneAnimTypeID TypeID = FMovieSceneAnimTypeID::Unique();\n\n return TypeID;\n\n }\n\n // ------------------------------------------------------------------------------\n\n void FMyExecutionToken::Execute(const FMovieSceneContext&amp;, const FMovieSceneEvaluationOperand&amp;, FPersistentEvaluationData&amp; PersistentData, IMovieScenePlayer&amp; Player)\n\n {\n\n // Explicitly passing an FMovieSceneEvaluationKey to SavePreAnimatedState will force the system to cache the token if necessary, regardless of the current capture state\n\n FMovieSceneEvaluationKey CaptureForSection = PersistentData.GetSectionKey();\n\n // Save the pre animated state for this object\n\n Player.SavePreAnimatedState(\\*Object, GetMyAnimationTypeID(), FMyPreAnimatedStateProducer(), CaptureForSection);\n\n }\n</code></pre> <p>If it is necessary for each section to always cache a token, and always restore it (regardless of overlapping, without the ref-counting mechanism), you can achieve this by passing a unique type ID for each section:</p> C++<pre><code>struct FMyPersistentData\n\n{\n\nFMovieSceneAnimTypeID AnimTypeID;\n\nFMyPersistentData() : AnimTypeID(FMovieSceneAnimTypeID::Unique()) {}\n\n};\n\nvoid FMyExecutionToken::Execute(const FMovieSceneContext&amp;, const FMovieSceneEvaluationOperand&amp;, FPersistentEvaluationData&amp; PersistentData, IMovieScenePlayer&amp; Player)\n\n{\n\nFMovieSceneAnimTypeID AnimTypeID = PersistentData.GetOrAdd&amp;lt;FMyPersistentData&amp;gt;().AnimTypeID;\n\n// Save the pre animated state for this object\n\nFMovieSceneEvaluationKey CaptureForSection = PersistentData.GetSectionKey();\n\nPlayer.SavePreAnimatedState(\\*Object, AnimTypeID, FMyPreAnimatedStateProducer(), CaptureForSection);\n\n}\n</code></pre> <p>Reference From https://udn.unrealengine.com/questions/399357/shouldnt-teardown-be-called-on-moviesceneevaltempl.html</p>"},{"location":"ue4guide/editor-extensions/sequencer/sequencer-4-20-upgrade/","title":"Overview","text":"<p>MovieScene.LegacyConversionFrameRate (Default: 60000fps) From https://udn.unrealengine.com/storage/temp/323036-sequencer-420-technical-upgrade-notes.pdf</p> <p>LevelSequence.DefaultTickResolution (Default: 24000fps) From https://udn.unrealengine.com/storage/temp/323036-sequencer-420-technical-upgrade-notes.pdf</p> <p>LevelSequence.DefaultDisplayRate (Default: 30fps) From https://udn.unrealengine.com/storage/temp/323036-sequencer-420-technical-upgrade-notes.pdf</p>"},{"location":"ue4guide/editor-extensions/sequencer/sequencer-4-20-upgrade/#time-management","title":"Time Management","text":"<ul> <li>FFrameNumber (32 bits): int32 frame/tick number</li> <li>FFrameTime (64 bits):  FFrameNumber + float. Primarily used during evaluation.</li> <li>FFrameRate (64 bits):  fractional frame rate stored as int numerator &amp; denominator</li> <li>FQualifiedFrameTime (128 bits): A composition of FFrameTime and FFrameRate</li> <li>FTimecode (20 bytes): A timecode representation</li> </ul>"},{"location":"ue4guide/editor-extensions/sequencer/sequencer-4-20-upgrade/#datatypes","title":"DataTypes","text":"<ul> <li>MovieScene Data:  UMovieScene now contains a tick resolution and display rate, and bolsters the previous \u2018Force Fixed Frame Interval\u2019 evaluation with an evaluation type enum</li> <li>UMovieScene::GetEvaluationType() - retrieves an enumeration specifying how to   evaluate this sequence:<ul> <li>WithSubFrames (default): Evaluate using sub-frame interpolation</li> <li>FrameLocked: Lock to the DisplayRate of the sequence, only evaluate round frame numbers, no subframes, set t.maxfps during evaluation.</li> </ul> </li> <li>UMovieScene::GetTickResolution() - retrieves the tick resolution that all FFrameNumbers</li> <li> <p>UMovieScene::GetDisplayRate() - playback rate (EvalType==FrameLocked =&gt; this is what t.maxfps is set to)</p> </li> <li> <p>FMovieSceneChannelProxy   Stored on UMovieSceneSection: derived types should populate this structure with all of its channels as shown in Appendix A. affords editor and runtime code a common language for interacting with and manipulating keyframes. To this end, IKeyframeSection&lt;&gt; has been completely removed and is no longer necessary</p> </li> <li>Channels are stored by their base <code>FMovieSceneChannel*</code> in buckets by derived type. With this in mind, any reallocation of channels should be immediately followed by a re-creation of the channel proxy; doing so will invalidate any pointers and handles to the channels stored in the old proxy</li> <li>All interaction with channels is through either the  <code>FMovieSceneChannel</code> interface directly, or <code>ISequencerChannelInterface</code>, depending on context. The latter is registered per-type through the sequencer module <code>ISequencerModule::RegisterChannelEditor</code></li> <li>A templated helper is provided through <code>TSequencerChannelInterface</code> which allows single-concept overloading for any given channel type, resolved through ADL. This allows customization of specific behavior without having to re-implement the entire interface if the defaults are suitable for most channels.</li> <li>It also means that core sequencer code can automatically populate UI for channel data without having to manually define <code>ISequencerSection</code> interfaces and manually defining the channel layout in the editor as well as in the runtime.</li> <li>Default implementation functions for <code>ISequencerChannelInterface</code> are defined in the Sequencer namespace, but overloads should be added either to your channel\u2019s namespace, or the global namespace if it\u2019s not in one</li> <li>It is recommended that custom channels follow the pattern of storing times and values in parallel arrays, and provide a  <code>TMovieSceneChannelData&lt;T&gt; GetData()</code> method for interacting with the keys.</li> <li>The majority of <code>FMovieSceneChannel</code> interface directly maps to functions callable on <code>TMovieSceneChannelData</code></li> <li> <p>In order for an <code>ISequencerChannelInterface</code> to be registered for custom channel types, you need to call <code>ISequencerModule::RegisterChannelInterface&lt;ChannelType&gt;();</code></p> </li> <li> <p>FMovieSceneChannel   Provides an interface through which all common channel data can be interacted with. All channels added to the channel proxy must implement this type.</p> </li> <li> <p>ISequencerChannelInterface   An interface to all overloads relating to UI interaction and manipulation required by sequencer for a given channel. Must be registered through the ISequencerModule class for each channel type (normally in your editor module\u2019s StartupModule method).</p> </li> <li> <p>TMovieSceneChannelTraits   Specifies compile-time traits for channel types such as extended editor data, and whether the channel supports default values. Many sequencer UI utilities use the function overloads specified in MovieSceneChannelTraits.h to interact with each concrete channel type. If the default templated overloads are incompatible with your channel type, you should overload the necessary functions for the specific channel.</p> </li> <li> <p>MovieScene::DiscreteInclusiveLower/DiscreteExclusiveUpper/DiscreteSize: consistently deal with the various boundary conditions</p> </li> <li> <p>bSupportsInfiniteRange: set to specify whether infinite ranges are supported</p> </li> </ul> <p>From https://udn.unrealengine.com/storage/temp/323036-sequencer-420-technical-upgrade-notes.pdf</p>"},{"location":"ue4guide/editor-extensions/sequencer/sequencer-4-20-upgrade/#sample","title":"Sample","text":"C++<pre><code>class UMySection : public UMovieSceneSection\n{\nUMySection(const FObjectInitializer&amp; ObjInit)\n: Super(ObjInit)\n{\nFMovieSceneChannelProxyData Channels;\n#if WITH_EDITOR\n// In editor proxies mandate extra information pertaining to the channels, including\nhow to retrieve a channel's external value from a bound object in some cases\n// Add the first float channel\nChannels.Add(\nFloatChannel1,\nFMovieSceneChannelMetaData(\"Float1\", LOCTEXT(\"Float1Text\", \"Float 1\")),\nTMovieSceneExternalValue&lt;float&gt;()\n);\n// Add the second float channel\nChannels.Add(\nFloatChannel2,\nFMovieSceneChannelMetaData(\"Float2\", LOCTEXT(\"Float2Text\", \"Float 2\")),\nTMovieSceneExternalValue&lt;float&gt;()\n);\n// Add the last float channel\nChannels.Add(\nFloatChannel3,\nFMovieSceneChannelMetaData(\"Float3\", LOCTEXT(\"Float3Text\", \"Float 3\")),\nTMovieSceneExternalValue&lt;float&gt;()\n);\n// Add the bool channel\nChannels.Add(\nBoolChannel,\nFMovieSceneChannelMetaData(\"Bool\", LOCTEXT(\"BoolText\", \"Bool\")),\nTMovieSceneExternalValue&lt;bool&gt;()\n);\n#else\n// Non editor builds just add the channels directly\nChannels.Add(FloatChannel1);\nChannels.Add(FloatChannel2);\nChannels.Add(FloatChannel3);\nChannels.Add(BoolChannel);\n#endif\nChannelProxy = MakeShared&lt;FMovieSceneChannelProxy&gt;(MoveTemp(Channels));\n}\nprivate:\nFMovieSceneFloatChannel FloatChannel1;\nFMovieSceneFloatChannel FloatChannel2;\nFMovieSceneFloatChannel FloatChannel3;\nFMovieSceneBoolChannel BoolChannel;\n};\n</code></pre> <p>From https://udn.unrealengine.com/storage/temp/323036-sequencer-420-technical-upgrade-notes.pdf</p>"},{"location":"ue4guide/editor-extensions/sequencer/sequencer-notes/","title":"Overview","text":""},{"location":"ue4guide/editor-extensions/sequencer/sequencer-notes/#reference","title":"Reference","text":"<p>https://udn.unrealengine.com/questions/348861/creating-custom-sequencer-tracks-sub-sequence-star.html</p>"},{"location":"ue4guide/editor-extensions/sequencer/sequencer-notes/#evaluation-execution-tokens--pre-animated-state","title":"Evaluation, Execution Tokens, &amp; Pre-Animated State","text":"<p>Details on how Pre-Animated State, Caching Execute &amp; Produce Tokens, Evaluation, Initialize &amp; TearDown work</p> <ul> <li>https://udn.unrealengine.com/questions/356242/sequencer-custom-track-414-415.html</li> <li>https://udn.unrealengine.com/questions/399357/shouldnt-teardown-be-called-on-moviesceneevaltempl.html</li> <li>https://udn.unrealengine.com/questions/404800/sequencer-template-interrogate.html</li> </ul>"},{"location":"ue4guide/editor-extensions/sequencer/sequencer-notes/#data","title":"Data","text":"<ul> <li>UMovieSceneTrack - The track (e.g. Transform, Path, attach) that contains sections. Can have multiple rows. This is a container for you custom sections, and it also defines which runtime classes are created for your custom track.</li> <li>UMovieSceneSection - Actual little segments in the track. Contains the data specific to you use case. If you new track will include keyed data, and not just a start time and an end time, this is where the keys and curves are stored as well.</li> <li>UMovieSceneColorSection</li> <li>UMovieSceneBoolSection<ul> <li>UMovieSceneSpawnSection</li> </ul> </li> </ul>"},{"location":"ue4guide/editor-extensions/sequencer/sequencer-notes/#runtime","title":"Runtime","text":"<ul> <li>FMovieSceneEvalTemplate - Core runtime class which implements runtime behavior of custom sections. This is what actually handles evaluating the section and generates the tracks interpolation values as Execution Tokens (i.e. the color value in a color property track)</li> <li>IMovieSceneExecutionToken - Actually ends up applying the interpolated values to your object (e.g. apply animation or updating properties)</li> </ul>"},{"location":"ue4guide/editor-extensions/sequencer/sequencer-notes/#ui","title":"UI","text":"<ul> <li>ISequencerSection - UI for rendering the sections. Defines the editor behavior for your custom section.</li> <li>FMovieSceneTrackEditor - Creates sequencer sections for your custom section data, and exposes extension points for sequencer track and object menus. Handles injecting buttons/ui/actions into the sequencer UI to create your custom tracks or add keys to your tracks. Defined for each track s.t. Transform, CameraAnim, Single Property types</li> <li>Needs to be registered with the sequencer system module.</li> <li>Ex: ISequencerModule&amp; SequencerModule = FModuleManager::Get().LoadModuleChecked(\"Sequencer\");<ul> <li>TrackEditorHandle = SequencerModule.RegisterTrackEditor_Handle(FOnCreateTrackEditor::CreateStatic(&amp;FFaceFXAnimationTrackEditor::CreateTrackEditor));</li> </ul> <li>Some useful TrackEditor functionality: Register a track editor's custom property types for animation:</li> <li>ProcAnimTrackEditorHandle = SequencerModule.RegisterPropertyTrackEditor();"},{"location":"ue4guide/editor-extensions/sequencer/sequencer-notes/#misc","title":"Misc","text":"<ul> <li>FMovieSceneAnimTypeID: uniquely defines animation type that sequencer is applying (eg spawn, changing transform, property, etc)</li> <li>Need to save preanimation/postanimation state tokens</li> <li>Blending happens through accumulations, templating, etc. Must specify that you support it in UMovieSceneNameableTrack() constructor</li> <li>Grep for GetBlendingDataType&lt;&gt;() &amp; TBlendableTokenTraits&lt;&gt;, MultiChannelFromData, ResolveChannelsToData</li> </ul> <p>Spawning: happens through a struct called</p> <ul> <li> <p>FMovieSceneSpawnRegister: This is a base class that manages destroying/spawning and keeping track of objects.</p> </li> <li> <p>Not very extensible yet</p> </li> <li> <p>FLevelSequenceSpawnRegister &amp; FLevelSequenceSpawnRegisterEditor are the level sequence specific ones</p> </li> <li> <p>ULevelSequencePlayer is what's responsible for actually setting it for its sequences</p> </li> <li> <p>FLevelSequenceEditorToolkit::Initialize is what set FLevelSequecneSpawnRegisterEditor when in the editor</p> <ul> <li>You can initialize the editor sequencer (e.g. actor sequencers) with other spawnregisters/parameters by</li> </ul> C++<pre><code>Sequencer = FModuleManager::LoadModuleChecked&lt;ISequencerModule&gt;(\"Sequencer\").CreateSequencer(SequencerInitParams);\n</code></pre> </li> <li> <p>ISequencerEditorObjectBinding: Extensible mechanism that the editor uses to add bindable objects to a sequence</p> </li> <li> <p>FLevelSequenceEditorActorBinding: The main level one for adding bindable actors. Calls Sequencer-&gt;AddActors(actorToBind)</p> </li> <li> <p>FControlRigEditorObjectBinding is a good example of adding custom spawnables. Calls Sequencer-&gt;MakeNewSpawnable()</p> </li> <li> <p>IMovieSceneObjectSpawner: This is what actually handles UObject creation e.g. NewObject&lt;&gt;/DestroyObject&lt;&gt; calls to the engine.</p> </li> <li> <p>Can override and has extensibility for managing your own cache of objects</p> </li> <li> <p>FLevelSequenceActorSpawner is the default for actors. FControlRigObjectSpawner is a great example to study</p> </li> <li> <p>SpawnExecutionTokens:</p> </li> <li> <p>do the actual spawn request creation/destructionby directly calling the GetSpawnRegister()'s functions</p> </li> <li> <p>Also manage override binding</p> </li> </ul>"},{"location":"ue4guide/editor-extensions/sequencer/sequencer-notes/#custom-blending","title":"Custom Blending","text":"<ul> <li>Implementation of custom blend logic should be as follows (using doubles as an example)</li> <li>Specializing TBlendableTokenTraits for a particular input data type causes WorkingDataType to be used during the blending operation</li> <li>Where WorkingDataType belongs to a namespace, ADL will be employed to discover any relevant overloads for BlendValue that match the necessary types</li> <li>This allows blending of any arbitrary type into the WorkingDataType.</li> </ul> C++<pre><code>/**\n* Implementation of custom blend logic should be as follows (using doubles as an example).\n* Specializing TBlendableTokenTraits for a particular input data type causes WorkingDataType to be used during the blending operation.\n* Where WorkingDataType belongs to a namespace, ADL will be employed to discover any relevant overloads for BlendValue that match the necessary types.\n* This allows blending of any arbitrary type into the WorkingDataType.\n\nnamespace MovieScene\n{\n  // Define a custom namespaced type that will be used to calculate blends between doubles\n  struct FBlendableDouble\n  {\n    FBlendableDouble()\n      : AbsoluteTotal(0.0), AdditiveTotal(0.0)\n    {}\n\n    double AbsoluteTotal;\n    double AdditiveTotal;\n\n    TOptional&lt;float&gt; TotalWeight;\n\n    double Resolve(TMovieSceneInitialValueStore&lt;int32&gt;&amp; InitialValueStore)\n    {\n      if (TotalWeight.IsSet())\n      {\n        if (TotalWeight.GetValue() == 0.f)\n        {\n          AbsoluteTotal = InitialValueStore.GetInitialValue();\n        }\n        else\n        {\n          AbsoluteTotal /= TotalWeight.GetValue();\n        }\n      }\n\n      return AbsoluteTotal + AdditiveTotal;\n    }\n  };\n\n  void BlendValue(FBlendableDouble&amp; OutBlend, double InValue, float Weight, EMovieSceneBlendType BlendType, TMovieSceneInitialValueStore&lt;double&gt;&amp; InitialValueStore)\n  {\n    if (BlendType == EMovieSceneBlendType::Absolute || BlendType == EMovieSceneBlendType::Relative)\n    {\n      if (BlendType == EMovieSceneBlendType::Relative)\n      {\n        OutBlend.AbsoluteTotal += (InitialValueStore.GetInitialValue() + InValue) * Weight;\n      }\n      else\n      {\n        OutBlend.AbsoluteTotal += InValue * Weight;\n      }\n\n      OutBlend.TotalWeight = OutBlend.TotalWeight.Get(0.f) + Weight;\n    }\n    else if (BlendType == EMovieSceneBlendType::Additive)\n    {\n      OutBlend.AdditiveTotal += InValue * Weight;\n    }\n  }\n}\ntemplate&lt;&gt; struct TBlendableTokenTraits&lt;double&gt; { typedef MovieScene::FBlendableDouble WorkingDataType; };\n*/\n</code></pre>"},{"location":"ue4guide/editor-extensions/sequencer/sequencer-notes/#useful-sequencer-functions","title":"Useful Sequencer Functions","text":"<ul> <li>Useful Tip: Can call PerformanceCapture event on sequencer to log perf capture events</li> </ul>"},{"location":"ue4guide/editor-extensions/sequencer/sequencer-notes/#get-sequence-instance-id","title":"Get Sequence Instance ID","text":"C++<pre><code>FMovieSceneRootEvaluationTemplateInstance&amp; rootEvalTemplate = ((IMovieScenePlayer*)InLevelSequencePlayer)-&gt;GetEvaluationTemplate();\nFMovieSceneSequenceID sequenceID                            = rootEvalTemplate.GetInstance(MovieSceneSequenceID::Root)-&gt;SequenceID;\nfor (TSubclassOf&lt;UBBProcAnimComponent&gt; animatorClass : ProcAnimators)\n{\n    UBBProcAnimSequenceContext* animatorSeqContext = GetSequenceContextForAnimator(sequenceID, animatorClass);\n    UBBProcAnimComponent*       animatorCDO        = animatorClass.GetDefaultObject();\n    //TODO: ikrimae: #ProcAnim: Add asserts\n    if (animatorSeqContext != nullptr)\n    {\n        animatorCDO-&gt;CaptureSequenceContext(animatorSeqContext);\n    }\n}\n</code></pre>"},{"location":"ue4guide/editor-extensions/sequencer/sequencer-notes/#iterate-over-object-bindings-in-a-sequence","title":"Iterate over object bindings in a sequence","text":"C++<pre><code>UMovieSceneSequence* levelSequence = InLevelSequencePlayer-&gt;GetSequence();\nconst TArray&lt;FMovieSceneBinding&gt;&amp; objectBindings = levelSequence-&gt;GetMovieScene()-&gt;GetBindings();\nfor (const FMovieSceneBinding&amp; binding : objectBindings)\n{\n    for (UMovieSceneTrack* track : binding.GetTracks())\n    {\n        if (UBBProcAnimTrack* procAnimTrack = Cast&lt;UBBProcAnimTrack&gt;(track))\n        {\n            TArray&lt;UMovieSceneSection*&gt; sequenceSections = procAnimTrack-&gt;GetAllSections();\n            for (UMovieSceneSection* section : sequenceSections)\n            {\n                if (UBBProcAnimSection* procAnimSection = Cast&lt;UBBProcAnimSection&gt;(section))\n                {\n                    ProcAnimators.Add(procAnimSection-&gt;ProcAnimCompClass);\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"ue4guide/editor-extensions/sequencer/sequencer-notes/#possessablesspawnables","title":"Possessables/Spawnables","text":"C++<pre><code>// Add all spawnables first (since possessables can be children of spawnables)\nint32 spawnableCount = MovieScene-&gt;GetSpawnableCount();\nfor (int32 Index = 0; Index &lt; spawnableCount; ++Index)\n{\n    const FMovieSceneSpawnable&amp; spawnable = MovieScene-&gt;GetSpawnable(Index);\n    //TODO: ikrimae: #Perf: Find a better unique identifier for runtime bindable sequence actors\n    if (spawnable.GetName().StartsWith(runtimeBindableActorID, ESearchCase::IgnoreCase))\n    {\n        return FMovieSceneObjectBindingID(spawnable.GetGuid(), MovieSceneSequenceID::Root);\n    }\n}\n\n// Add all possessables\nconst int32 possessableCount = MovieScene-&gt;GetPossessableCount();\nfor (int32 Index = 0; Index &lt; possessableCount; ++Index)\n{\n    const FMovieScenePossessable&amp; possessable = MovieScene-&gt;GetPossessable(Index);\n    if (InSequence-&gt;CanRebindPossessable(possessable))\n    {\n        if (possessable.GetName().StartsWith(runtimeBindableActorID, ESearchCase::IgnoreCase))\n        {\n            return FMovieSceneObjectBindingID(possessable.GetGuid(), MovieSceneSequenceID::Root);\n        }\n    }\n}\n</code></pre>"},{"location":"ue4guide/editor-extensions/sequencer/sequencer-notes/#resolve-object-binding-id","title":"Resolve object binding ID","text":"C++<pre><code>// Resolve event contexts to trigger the event on\n//TArray&lt;UObject*&gt; EventContexts;\n//\n//// If we have specified event receivers, use those\n//if (EventReceivers.Num())\n//{\n//  EventContexts.Reserve(EventReceivers.Num());\n//  for (FMovieSceneObjectBindingID ID : EventReceivers)\n//  {\n//      // Ensure that this ID is resolvable from the root, based on the current local sequence ID\n//      ID = ID.ResolveLocalToRoot(Operand.SequenceID, Player.GetEvaluationTemplate().GetHierarchy());\n//\n//      // Lookup the object(s) specified by ID in the player\n//      for (TWeakObjectPtr&lt;&gt; WeakEventContext : Player.FindBoundObjects(ID.GetGuid(), ID.GetSequenceID()))\n//      {\n//          if (UObject* EventContext = WeakEventContext.Get())\n//          {\n//              EventContexts.Add(EventContext);\n//          }\n//      }\n//  }\n//}\n</code></pre>"},{"location":"ue4guide/editor-extensions/sequencer/sequencer-notes/#generate-property-path","title":"Generate Property Path","text":"C++<pre><code>auto GeneratePropertyPath = [this](UImagePlateComponent* ImagePlateComponent)\n  {\n    check(ImagePlateComponent);\n\n    UStructProperty* ImagePlateProperty = ImagePlateComponent-&gt;GetImagePlateProperty();\n    UProperty* RenderTargetProperty = FindField&lt;UProperty&gt;(FImagePlateParameters::StaticStruct(), GET_MEMBER_NAME_CHECKED(FImagePlateParameters, RenderTexture));\n\n    check(ImagePlateProperty);\n    check(RenderTargetProperty);\n\n    TSharedRef&lt;FPropertyPath&gt; Path = FPropertyPath::CreateEmpty();\n    Path-&gt;AddProperty(FPropertyInfo(ImagePlateProperty));\n    Path-&gt;AddProperty(FPropertyInfo(RenderTargetProperty));\n\n    return Path;\n  };\n</code></pre>"},{"location":"ue4guide/editor-extensions/sequencer/sequencer-notes/#stateless-token-producer","title":"Stateless Token Producer","text":"C++<pre><code>/** Stateless pre-animated state token producer that simply calls a static function as the token */\nstruct FStatelessPreAnimatedTokenProducer : IMovieScenePreAnimatedTokenProducer\n{\n  typedef void (*StaticFunction)(UObject&amp;, IMovieScenePlayer&amp;);\n\n  FStatelessPreAnimatedTokenProducer(StaticFunction InFunction) : Function(InFunction) {}\n\n  virtual IMovieScenePreAnimatedTokenPtr CacheExistingState(UObject&amp; Object) const override\n  {\n    return FToken(Function);\n  }\n\n  struct FToken : IMovieScenePreAnimatedToken\n  {\n    FToken(StaticFunction InFunctionPtr) : FunctionPtr(InFunctionPtr) {}\n\n    virtual void RestoreState(UObject&amp; Object, IMovieScenePlayer&amp; Player) override\n    {\n      (*FunctionPtr)(Object, Player);\n    }\n\n    StaticFunction FunctionPtr;\n  };\n  StaticFunction Function;\n};\n</code></pre>"},{"location":"ue4guide/editor-extensions/sequencer/sequencer-notes/#editor-related-functions","title":"Editor Related Functions","text":"<ul> <li> <p>Check if sequencer is active: BB::IsSequencerModeActive() which does GLevelEditorModeTools().IsModeActive(EM_SequencerMode)</p> </li> <li> <p>Blend/accumulator sample: <code>FMovieSceneSkeletalAnimationSectionTemplate::Evaluate()</code> for plugging into the blending/accumulater code to support interpolation section overlap</p> </li> <li> <p>Integral Discrete keyframe curve</p> </li> </ul> C++<pre><code>UPROPERTY()\nFIntegralCurve ActorGuidIndexCurve;\n</code></pre> <ul> <li>Sequencer:</li> </ul> C++<pre><code>void DrawTransformTrack(const FSceneView* View, FPrimitiveDrawInterface* PDI, UMovieScene3DTransformTrack* TransformTrack, const TArray&lt;TWeakObjectPtr&lt;UObject&gt;&gt;&amp; BoundObjects, const bool&amp; bIsSelected)\n\nPlayer.GetPlaybackStatus() != EMovieScenePlayerStatus::Playing;\n</code></pre> <ul> <li>Sequencer Scale/Dilate parameters:</li> </ul> C++<pre><code>KeyFrameAlgorithms::Scale(CurveInterface.GetValue(), Origin, DilationFactor, KeyHandles);\nKeyFrameAlgorithms::Translate(CurveInterface.GetValue(), DeltaPosition, KeyHandles);\nParams.BlendWeight.ShiftCurve(DeltaTime, KeyHandles);\nParams.BlendWeight.ScaleCurve(Origin, DilationFactor, KeyHandles);\n</code></pre> <ul> <li>Track Editor Helpers:</li> </ul> C++<pre><code>virtual UMovieSceneSequence* GetRootMovieSceneSequence() const = 0;\nvirtual UMovieSceneSequence* GetFocusedMovieSceneSequence() const = 0;\nvirtual FMovieSceneSequenceIDRef GetRootTemplateID() const = 0;\nvirtual FMovieSceneSequenceIDRef GetFocusedTemplateID() const = 0;\nTArrayView&lt;TWeakObjectPtr&lt;&gt;&gt; FindObjectsInCurrentSequence(const FGuid&amp; InObjectBinding)\nUMovieScene* FocusedMovieScene = GetFocusedMovieScene();\n</code></pre> <ul> <li>TrackEditor Find Objects In Current Sequence/Add new ones to it:</li> </ul> C++<pre><code>TArray&lt;TWeakObjectPtr&lt;&gt;&gt; OutObjects;\nfor (TWeakObjectPtr&lt;&gt; Object : GetSequencer()-&gt;FindObjectsInCurrentSequence(ObjectGuid))\n{\n  OutObjects.Add(Object);\n}\n</code></pre> <ul> <li>Extend the actor reference binding submenu/add custom object bind types:</li> </ul> C++<pre><code>class FControlRigEditorObjectBinding : public ISequencerEditorObjectBinding\n{\npublic:\n  FControlRigEditorObjectBinding(TSharedRef&lt;ISequencer&gt; InSequencer);\n  static TSharedRef&lt;ISequencerEditorObjectBinding&gt; CreateEditorObjectBinding(TSharedRef&lt;ISequencer&gt; InSequencer);\n  // ISequencerEditorObjectBinding interface\n  virtual void BuildSequencerAddMenu(FMenuBuilder&amp; MenuBuilder) override;\n</code></pre> <ul> <li> <p>Look at TransformTrackEditor/MovieScene3DTransformSection for how to do a lot of more complicated things in the sequencer UI</p> </li> <li> <p>Add custom UI to cross-reference other objects in the same sequence for cross track communication</p> </li> </ul> C++<pre><code>void FEventTrackEditor::BuildTrackContextMenu(FMenuBuilder&amp; MenuBuilder, UMovieSceneTrack* Track)\n</code></pre> <ul> <li>For anything with cross reference tracks, probably need to implement: virtual void OnBindingsUpdated(const TMap&amp; OldGuidToNewGuidMap) { } <li>Look F3DAttachSection for better example. Creates a separate UMovieScene3DConstraintSection on add of an attach track so it can track updates to guids</li> <li>FActorPickerTrackEditor::ShowActorSubMenu creates an actor picker for picking other objects in the scene including potentially ones that are spawned from sequence</li> <li> <p>Useful functions:</p> <ul> <li>FSequencer::OnMovieSceneBindingsChangedDelegate</li> <li>NotifyBindingUpdate()</li> <li>NotifyBindingsChanged()</li> </ul> C++<pre><code>  /**\n    * Called whenever an object binding has been resolved to give the player a chance to interact with the objects before they are animated\n    *\n    * @param InGuid\t\tThe guid of the object binding that has been resolved\n    * @param InSequenceID\tThe ID of the sequence in which the object binding resides\n    * @param Objects\t\tThe array of objects that were resolved\n    */\n  virtual void NotifyBindingUpdate(const FGuid&amp; InGuid, FMovieSceneSequenceIDRef InSequenceID, TArrayView&lt;TWeakObjectPtr&lt;&gt;&gt; Objects) { NotifyBindingsChanged(); }\n</code></pre> </li>"},{"location":"ue4guide/editor-extensions/sequencer/subject-matter-experts/","title":"Subject matter experts","text":"<ul> <li> <p>Andrew.Rodham: https://udn.unrealengine.com/users/login.html</p> </li> <li> <p>Max Chen</p> </li> <li> <p>David.bromberg https://udn.unrealengine.com/users/20778/view.html</p> </li> </ul>"},{"location":"ue4guide/editor-extensions/sequencer/track-evaluation/","title":"Track evaluation","text":"<ul> <li>PlayToFrame</li> </ul> <p>Low-level call to set the current time of the player by evaluating from the current time to the specified time, as if the sequence is playing.</p> <ul> <li> <p>Triggers events that lie within the evaluated range. Does not alter the persistent playback status of the player (IsPlaying).</p> </li> <li> <p>ScrubToFrame</p> </li> </ul> <p>Low-level call to set the current time of the player by evaluating only the specified time. Will not trigger any events.</p> <ul> <li> <p>Does not alter the persistent playback status of the player (IsPlaying).</p> </li> <li> <p>JumpToFrame</p> </li> </ul> <p>Low-level call to set the current time of the player by evaluating only the specified time, as if scrubbing the timeline. Will trigger only events that exist at the specified time.</p> <ul> <li>Does not alter the persistent playback status of the player (IsPlaying).</li> </ul> <p>THIS IS WHERE YOU SPECIFY WHAT HAPPENS BETWEEN SEGMENTS (ie force evaluation in empty sections, blending, etc)</p> C++<pre><code>- virtual FMovieSceneTrackRowSegmentBlenderPtr GetRowSegmentBlender() const;\n\n- virtual FMovieSceneTrackSegmentBlenderPtr GetTrackSegmentBlender() const;\n</code></pre>"},{"location":"ue4guide/editor-extensions/sequencer/useful-functionsmisc/","title":"Useful functionsmisc","text":"<p>Call property setter in sequencer:</p> <p>There's a bit of a trick in Sequencer that works both in C++ and Blueprints where if a function exists called Set[varname] then the function will be called with the new value as an argument instead of directly setting the variable. For example, if you have a float variable called 'myFloat' and expose it to cinematics, you can also add a function called 'SetMyFloat' with a float input and that function will be called whenever the value is changed. This way, you can react to the variable changing and update whatever you need to on the actor. It sounds like that's the functionality you're looking for, but let me know if I've misunderstood.</p> <p>Reference From https://udn.unrealengine.com/questions/419570/sequencer-not-rerunning-construction-script-at-run.html?childToView=420115#answer-420115</p> <p>Check if sequencer is active:</p> <p>BB::IsSequencerModeActive() which does GLevelEditorModeTools().IsModeActive(EM_SequencerMode)</p> <p>Editor Sequencer Utilities:</p> <ul> <li>General class for sequencer integration with editor</li> </ul> <p>class SEQUENCER_API FLevelEditorSequencerIntegration</p> <ul> <li>How sequencer extends the detail view in the level editor to add keyframe icons</li> </ul> <p>void FLevelEditorSequencerIntegration::ActivateDetailHandler()</p> <p>Get open Sequencer Editor references:</p> C++<pre><code> FLevelSequenceEditorToolkit::IterateOpenToolkits()\n\n FLevelSequenceEditorToolkit::GetSequencer()\n\n /\\*\\* Called when the tab manager is changed \\*/\n\n DECLARE_EVENT_OneParam(FLevelSequenceEditorToolkit, FLevelSequenceEditorToolkitOpened, FLevelSequenceEditorToolkit&amp;);\n\n static FLevelSequenceEditorToolkitOpened&amp; OnOpened();\n\n /\\*\\* Called when the tab manager is changed \\*/\n\n DECLARE_EVENT(FLevelSequenceEditorToolkit, FLevelSequenceEditorToolkitClosed);\n\n FLevelSequenceEditorToolkitClosed&amp; OnClosed() { return OnClosedEvent; }\n\n /\\*\\* A delegate that is executed when menu object is clicked. Unlike FExtender delegates we pass in the FGuid which exists even for deleted objects. \\*/\n\n DECLARE_DELEGATE_TwoParams(FOnBuildCustomContextMenuForGuid, FMenuBuilder&amp;, FGuid);\n\n /\\*\\* Gets a multicast delegate which is executed whenever the movie scene data is changed. \\*/\n\n virtual FOnMovieSceneDataChanged&amp; OnMovieSceneDataChanged() = 0;\n\n /\\*\\* Gets a multicast delegate which is executed whenever the movie scene bindings are changed. \\*/\n\n virtual FOnMovieSceneBindingsChanged&amp; OnMovieSceneBindingsChanged() = 0;\n\n /\\*\\* Gets a multicast delegate with an array of FGuid of bound objects which is called when the outliner node selection changes. \\*/\n\n virtual FOnSelectionChangedObjectGuids&amp; GetSelectionChangedObjectGuids() = 0;\n\n /\\*\\* Gets a multicast delegate with an array of UMovieSceneTracks which is called when the outliner node selection changes. \\*/\n\n virtual FOnSelectionChangedTracks&amp; GetSelectionChangedTracks() = 0;\n\n DECLARE_EVENT_OneParam(ISequencer, FOnPostSave, ISequencer&amp;)\n\n virtual FOnPostSave&amp; OnPostSave() = 0;\n\n AssetEditorOpenedHandle = FAssetEditorManager::Get().OnAssetEditorOpened().AddRaw(this, &amp;FControlRigEditorModule::HandleAssetEditorOpened);\n\n /\\*\\* Selects an object by GUID \\*/\n\n virtual void SelectObject(FGuid ObjectBinding) = 0;\n\n /\\*\\* Selects property tracks by property path \\*/\n\n virtual void SelectByPropertyPaths(const TArray&amp;lt;FString&gt;&amp; InPropertyPaths) = 0;\n\n /\\*\\* Gets a multicast delegate which is executed whenever the global time changes. \\*/\n\n virtual FOnGlobalTimeChanged&amp; OnGlobalTimeChanged() = 0;\n\n /\\*\\* Gets a multicast delegate which is executed whenever the user begins scrubbing. \\*/\n\n virtual FOnBeginScrubbingEvent&amp; OnBeginScrubbingEvent() = 0;\n\n /\\*\\* Gets a multicast delegate which is executed whenever the user stops scrubbing. \\*/\n\n virtual FOnEndScrubbingEvent&amp; OnEndScrubbingEvent() = 0;\n</code></pre> <p>Responding to actors being added to sequencer</p> <p>We don't currently have any callbacks related to adding actors to sequencer, but there is a callback when any sequence data changes ISequencer::OnMovieSceneDataChanged which you could use. This can end up getting called quite frequently when doing a drag operation, so you may need to defer handling it to one a frame to avoid performance issues. Another option would be to monitor the level editor selection because any time an actor is added it is selected in the level editor.</p> <p>Reference From https://udn.unrealengine.com/questions/314123/working-with-sequencer-from-code-in-editor-plugin.html</p> <p>Creating/Deleting/Modifying tracks and keys from code</p> <p>We have a config based solution for adding tracks automatically when an actor it added to sequencer. You can find the config information under: Engine\\Config\\BaseEditorPerProjectUserSettings.ini</p> <p>[/Script/LevelSequenceEditor.LevelSequenceEditorSettings]</p> <p>An example is: +TrackSettings=(MatchingActorClass=/Script/Engine.CameraActor,DefaultTracks=(/Script/MovieSceneTracks.MovieScene3DTransformTrack),DefaultPropertyTracks=((ComponentPath=\"CameraComponent\",PropertyPath=\"FieldOfView\")))</p> <p>This says, when an actor with class /Script/Engine.CameraActor is added, add a track with class /Script/MovieSceneTracks.MovieScene3DTransformTrack, and then add a property track to FieldOfView property on the CameraComponent.</p> <p>You can then use the ISequencerTrackEditor::AddTrack() method in your track editor class to set up appropriate default key frames for the track.</p> <p>Reference From https://udn.unrealengine.com/questions/314123/working-with-sequencer-from-code-in-editor-plugin.html</p> <p>How to set parameter values on struct parameter to event in sequence from c++?</p> <p>Reference From https://udn.unrealengine.com/questions/418282/how-to-set-parameter-values-on-struct-parameter-to.html</p> C++<pre><code>- FEventPayload Event(\\*TrackName);\n\n- UObject\\* Object = LoadObject&amp;lt;UObject&gt;(NULL, TEXT(\"/Game/Sequences/MyStruct1.MyStruct1\"));\n\n- UScriptStruct\\* Struct = nullptr;\n\n- if (Object)\n\n- {\n\n- Struct = Cast&amp;lt;UScriptStruct&gt;(Object);\n\n- }\n\n\n\n\n- if (Struct)\n\n- {\n\n- FMovieSceneEventParameters Params(\\*Struct);\n\n- Event.Parameters = Params;\n\n- }\n</code></pre> <p>You need to also set the payload for the event by calling FMovieSceneEventParameters::OverwriteWith, passing in a valid pointer to the correct struct type. For instance:</p> C++<pre><code>- FMyStruct1 Payload;\n\n- Payload.VectorVelocity - FVector(.5f, .5f, .0f);\n\n- Event.OverwriteWith(static_cast&amp;lt;uint8\\*&gt;(&amp;Payload));\n</code></pre> <p>Reference From https://udn.unrealengine.com/questions/418282/how-to-set-parameter-values-on-struct-parameter-to.html</p>"},{"location":"ue4guide/editor-extensions/slate/custom-state-machine-graph/","title":"Custom state machine graph","text":"<p>https://answers.unrealengine.com/questions/455215/c-plugin-create-unreal-like-graph.html</p> <p>https://forums.unrealengine.com/showthread.php?116032-UFSM-Finite-State-Machine</p> <p>https://www.unrealengine.com/marketplace/dialogue-plugin</p> <p>https://gitlab.com/NotYetGames/DlgSystem</p>"},{"location":"ue4guide/editor-extensions/slate/editor-customization/","title":"Tutorials &amp; Reference","text":"<ul> <li>In-Depth Overview and tutorial: https://lxjk.github.io/2019/10/01/How-to-Make-Tools-in-U-E.html</li> <li>Github Repo: https://github.com/lxjk/ToolExample</li> <li>Creating An Editor Module: https://wiki.unrealengine.com/Creating_an_Editor_Module</li> <li>Customize Detail Pane: https://wiki.unrealengine.com/Customizing_detail_panels</li> <li>Component Visualizer: https://wiki.unrealengine.com/Component_Visualizers</li> <li>Custom Asset Picker: https://kasundevblog.wordpress.com/2015/10/07/creating-assets-with-support-of-a-custom-class-picker-unreal-engine-4</li> </ul>"},{"location":"ue4guide/editor-extensions/slate/editor-customization/#helpful-tips","title":"Helpful Tips","text":"<ul> <li><code>testprops</code> will bring up UPropertyEditorTestObject that contains all base properties and the corresponding slate widgets</li> <li>More slate samples: SWidgetGallery.h &amp; AppFramework/STestSuite/SWizard/STableViewTesting/SLayoutExample</li> <li>PropertyModule is responsible for DetailPanel. In <code>StartupModule()</code>, you register for extension to configure it</li> <li>DetailCustomization is the property sheet customization</li> <li>Editor has Extender / extensibility hooks to plug into to expand functionality. To expose these points in the UI:</li> <li>Editor Preferences -&gt; General -&gt; Miscellaneous</li> <li>Check Developer Tools | Display UI Extension Points</li> <li>Extender's have functions to add populate the extender (e.g. create a toolbar button)</li> <li>You pass in MenuCreation functions as parameters b/c they get called on-demand lazily when the menu is being created</li> <li>Menu/UI creation proceeds as normal Slate UI.</li> <li>Look at Sequencer.cpp for samples</li> <li>Look at Paper2D as samples as well (everything related to it is a plugin &amp; not core to the engine)</li> </ul>"},{"location":"ue4guide/editor-extensions/slate/editor-customization/#code-references","title":"Code References","text":"<ul> <li>For a great reference point, start at: <code>Source/Editor/DetailCustomizations/Private/DetailCustomizations.cpp</code></li> <li>For customizing a category:<code>Source/Editor/DetailCustomizations/Private/StaticMeshComponentDetails.h</code></li> <li>To customize structs, use: derive from IPropertyTypeCustomization: <code>/Editor/DetailCustomizations/Private/SlateColorCustomization.h for reference</code></li> <li>For component visualizers: <code>Source/Editor/ComponentVisualizers/</code></li> </ul>"},{"location":"ue4guide/editor-extensions/slate/slate-layout/","title":"Slate layout","text":"<p>The clean way to do custom arrangement would be to implement a custom widget based on SPanel and then override OnArrangeChildren to arrange your child slots however you'd like.</p> <p>SBoxPanel provides a simple example of setting up slots and arranging them</p> <p>Reference From https://answers.unrealengine.com/questions/203320/slate-advanced-layout.html</p>"},{"location":"ue4guide/editor-extensions/slate/slate-style/","title":"Slate style","text":"<p>Use this as reference:</p> <p>FSlateEditorStyle: UnrealEngine\\Engine\\Source\\Editor\\EditorStyle\\Private\\SlateEditorStyle.cpp</p> <p>FPluginStyle</p>"},{"location":"ue4guide/editor-extensions/slate/slate/","title":"Slate","text":"<p>Great Overview Doc: The Slate UI Framework https://de45xmedrsdbp.cloudfront.net/Resources/files/slateTutorials_westcoast-1963123470.pdf</p> <ul> <li> <p>Immediate mode with rare use of coarse-grained cache invalidation (e.g. Blueprint graph editor caches layout of all the nodes but as soon as there's a change, it rebuilds everything)</p> </li> <li> <p>2 pass approach:</p> </li> <li> <p>1<sup>st</sup> Pass Bottom Up: Determine each widget's size using CacheDesiredSize &amp; ComputeDesiredSize</p> </li> <li> <p>2<sup>nd</sup> Pass Top Down: Layout</p> </li> <li> <p>3 widget types</p> </li> <li> <p>Leaf: No children e.g. STextBox</p> </li> <li> <p>Compound: Fixed number of children/slots e.g. Sbutton</p> </li> <li> <p>Panel: Dynamic number of children e.g. SverticalPanel</p> </li> <li> <p>SWidget Components</p> </li> <li> <p>ComputeDesiredSize()</p> </li> <li> <p>ArrangeChildren()</p> </li> <li> <p>OnPaint()</p> </li> <li> <p>EventHandlers</p> </li> <li> <p>SLATE_ARGUMENT similar to SLATE_ATTRIBUTE, except it can only contain value</p> </li> </ul>"},{"location":"ue4guide/editor-extensions/slate/useful-slate-classes/","title":"Useful slate classes","text":"<p>SWidgetCarousel</p> <p>SWidgetCarouselWithNavigation</p> <p>SAddContentWidget</p> <p>FEditorWidgetsModule</p> <p>FEditorWidgetsModule::CreateObjectNameEditableTextBox</p> <p>SSingleObjectDetailsPanel</p> <p>Timeline scrubbers:</p> <p>Simple</p> <p>SScrubControlPanel</p> <p>SScrubWidget</p> <p>Manual Complex control:</p> <p>FEditorWidgetsModule::CreateTransportControl</p> <ul> <li>Look at FSequencer::MakeTransportControls(bool bExtended) for example</li> </ul> <p>SLevelOfDetailBranchNode</p> <p>SExpandableArea</p>"},{"location":"ue4guide/editor-extensions/slate/useful-slate-code-samples/","title":"Useful slate code samples","text":""},{"location":"ue4guide/editor-extensions/slate/useful-slate-code-samples/#widget-galleryslate-test-suite","title":"Widget Gallery/Slate Test Suite:","text":"<p>Go to Window -&gt; Developer Tools -&gt; Debug Tools -&gt; Test Suite. Shows all the different widgets</p> <p></p>"},{"location":"ue4guide/editor-extensions/slate/useful-slate-code-samples/#writing-custom-slate-widgets","title":"Writing Custom Slate Widgets:","text":"<p>UWidgetBlueprintLibrary &amp; UWiddgetLayoutLibrary, &amp; USlateBlueprintLibrary great reference for looking at slate drawing functions &amp; helpers</p> <ul> <li>Ends up calling FSlateDrawElement::MakeBox or FSlateDrawElement::MakeLine</li> </ul>"},{"location":"ue4guide/editor-extensions/slate/useful-slate-code-samples/#slate-examples","title":"Slate Examples:","text":"<p>Console command \"testprops\" will bring up UPropertyEditorTestObject that contains all base properties and the corresponding slate widgets</p> <ul> <li> <p>testprops tree</p> </li> <li> <p>testprops table</p> </li> </ul> <p>More slate samples: SWidgetGallery.h &amp; AppFramework/STestSuite/SWizard/STableViewTesting/SLayoutExample</p>"},{"location":"ue4guide/editor-extensions/slate/useful-slate-code-samples/#slate-listview-example","title":"Slate ListView Example:","text":"<ul> <li> <p>SModuleUI is a great simple listview example with text search and multicolumns</p> </li> <li> <p>SCollisionAnalyzer shows how to implement sorting</p> </li> </ul>"},{"location":"ue4guide/editor-extensions/slate/useful-slate-code-samples/#make-enum-combobox","title":"Make Enum Combobox","text":"<ul> <li>Post 4.24: SEnumCombobox is a widget you can use. Pre 4.24: Use this:</li> </ul> C++<pre><code>MovieSceneToolHelpers::MakeEnumComboBox(\n  StaticEnum&lt;TVariantEnum&gt;(),\n  MakeAttributeLambda([VariantTypePropHndle] {\n      uint8 enumVal = 0;\n      if (VariantTypePropHndle.IsValid() &amp;&amp; VariantTypePropHndle-&gt;IsValidHandle())\n      {\n          VariantTypePropHndle-&gt;GetValue(enumVal);\n      }\n      return (int32)enumVal;\n  }),\n  FOnEnumSelectionChanged::CreateLambda([VariantTypePropHndle](int32 Selection, ESelectInfo::Type SelectionType) {\n      if (VariantTypePropHndle.IsValid() &amp;&amp; VariantTypePropHndle-&gt;IsValidHandle())\n      {\n          VariantTypePropHndle-&gt;SetValue((uint8)Selection);\n      }\n  })\n)\n</code></pre>"},{"location":"ue4guide/editor-extensions/slate/useful-slate-code-samples/#menu-builder--pulldown-menu--submenu","title":"Menu Builder &amp; Pulldown Menu &amp; Submenu:","text":"C++<pre><code>FMenuBarBuilder MenuBarBuilder( CommandList );\n{\nMenuBarBuilder.AddPullDownMenu( TEXT(\"Menu 1\"), TEXT(\"Opens Menu 1\"), FNewMenuDelegate::CreateRaw( &amp;FMenus::FillMenu1Entries ) );\n\nMenuBarBuilder.AddPullDownMenu( TEXT(\"Menu 2\"), TEXT(\"Opens Menu 2\"), FNewMenuDelegate::CreateRaw( &amp;FMenus::FillMenu2Entries ) );\n}\n\nreturn MenuBarBuilder.MakeWidget();\n\nstatic void FillMenu1Entries( FMenuBuilder&amp; MenuBuilder )\n\n{\n\nMenuBuilder.AddEditableText( TEXT( \"Editable Item\" ), TEXT( \"You can edit this item's text\" ), NAME_None, TEXT( \"Edit Me!\" ) );\n\nMenuBuilder.AddMenuEntry( FMultiBoxTestCommandList::Get().EighthCommandInfo );\n\nMenuBuilder.AddMenuSeparator();\n\nMenuBuilder.AddSubMenu( TEXT(\"Sub Menu\"), TEXT(\"Opens a submenu\"), FNewMenuDelegate::CreateRaw( &amp;FMenus::FillSubMenuEntries ) );\n\nMenuBuilder.AddWidget(SNew(SVolumeControl), TEXT(\"Volume\"));\n\n}\n</code></pre> <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/Slate/Widgets/index.html</p>"},{"location":"ue4guide/editor-extensions/slate/useful-slate-code-samples/#drop-down-pulldowncombo-toolbar-button","title":"Drop down pulldown/combo toolbar button:","text":"C++<pre><code>GameToolBarBuilder.AddComboButton(\nSpecialPIEOptionsMenuAction,\nFOnGetContent::CreateRaw( &amp;FLevelEditorToolBar::GeneratePIEMenuContent, InCommandList ),\nFText(),\nLOCTEXT(\"PIEComboToolTip\", \"Play-In-Editor options\") );\n</code></pre> <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/Slate/Widgets/index.html</p>"},{"location":"ue4guide/editor-extensions/slate/useful-slate-code-samples/#create-property-table","title":"Create Property Table:","text":"C++<pre><code>// TableView\n\nconst TSharedRef&amp;lt; IPropertyTable &amp;gt; Table = Module.CreatePropertyTable();\n\nTArray&lt; UObject* &gt; Objects;\n\nfor (int Count = 0; Count &lt; 50; Count++)\n\n{\n\nObjects.Add(NewObject&lt;UPropertyEditorTestObject&gt;());\n\n}\n\nTable-&gt;SetObjects( Objects );\n\nfor (TFieldIterator&lt;UProperty&gt; PropertyIter( UPropertyEditorTestObject::StaticClass(), EFieldIteratorFlags::IncludeSuper); PropertyIter; ++PropertyIter)\n\n{\n\nconst TWeakObjectPtr&lt; UProperty &gt;&amp; Property = *PropertyIter;\n\nTable-&gt;;AddColumn( Property );\n\n}\n\nWindow-&gt;SetContent\n\n(\n\nSNew(SBorder)\n\n.BorderImage(FEditorStyle::GetBrush(\"ToolPanel.GroupBorder\"))\n\n[\n\nModule.CreatePropertyTableWidget( Table )\n\n]\n\n);\n</code></pre> <p>Custom Complex Widget UI: https://github.com/ue4plugins/ObjectBrowser</p> <p>Focus keyboard window to specific widget:</p> C++<pre><code>FWidgetPath WidgetPath;\n\n bool bFound = FSlateApplication::Get().FindPathToWidget(DetailsView, WidgetPath);\n\n if (bFound)\n\n {\n\n FSlateApplication::Get().SetAllUserFocus(WidgetPath, EFocusCause::SetDirectly);\n\n }\n</code></pre>"},{"location":"ue4guide/editor-extensions/slate/useful-slate-code-samples/#asset-picker","title":"Asset Picker:","text":"C++<pre><code>FAssetPickerConfig **AssetPickerConfig**;\n        **AssetPickerConfig**.OnAssetDoubleClicked = FOnAssetDoubleClicked::CreateStatic(&amp;SBlutilityShelf::OnBlutilityDoubleClicked);\n        **AssetPickerConfig**.OnGetAssetContextMenu = FOnGetAssetContextMenu::CreateSP(this, &amp;SBlutilityShelf::OnBlutilityGetContextMenu);\n        **AssetPickerConfig**.InitialAssetViewType = EAssetViewType::Tile;\n        **AssetPickerConfig**.bAllowNullSelection = false;\n        **AssetPickerConfig**.bShowBottomToolbar = false;\n        **AssetPickerConfig**.bAutohideSearchBar = bInFavoritesMode ? true : false;\n\n**AssetPickerConfig**.Filter.ClassNames.Add(UEditorUtilityBlueprint::StaticClass()-&gt;GetFName());\n        if (bInFavoritesMode)\n        {\n                new (**AssetPickerConfig**.Collections) FCollectionNameType(BlutilityModule::**BlutilityShelfCollectionName**, ECollectionShareType::CST_Local);\n        }\n\nChildSlot\n        \\[\n                SNew(SVerticalBox)\n                +SVerticalBox::Slot()\n                .FillHeight(1.0f)\n                \\[\n                        **ContentBrowserModule**.Get().CreateAssetPicker(**AssetPickerConfig**)\n                \\]\n        \\];\n</code></pre>"},{"location":"ue4guide/editor-extensions/slate/useful-slate-code-samples/#class-pickerclass-viewer","title":"Class Picker/Class Viewer","text":"C++<pre><code>const bool bPressedOk = SClassPickerDialog::PickClass(TitleText, Options, ChosenClass, UDataAsset::StaticClass());\n\nFClassViewerModule&amp; ClassViewerModule = FModuleManager::LoadModuleChecked&lt;FClassViewerModule&gt;;(\"ClassViewer\");\n\nTSharedRef&lt;SWidget&gt; ClassViewer = ClassViewerModule.CreateClassViewer(Options, FOnClassPicked::CreateRaw(this, &amp;FBBProcSeqCapObjEditorBinding::HandleProcSeqContextClassPicked));\n\nCreate Dynamic Context Menu:\n\nFLevelEditorModule&amp; **LevelEditorModule** = FModuleManager::GetModuleChecked&lt;FLevelEditorModule&gt;( \"LevelEditor\");\n        TSharedPtr&lt; ILevelEditor &gt; **LevelEditor** = **LevelEditorModule**.GetFirstLevelEditor();\n\nTSharedPtr&lt;SWidget&gt; **MenuWidget**;\n\nif (**ComponentsWithSockets**.Num() &gt; 1)\n        {                        \n                **MenuWidget** = \n                        SNew(SComponentChooserPopup)\n                        .Actor(**ParentActor**)\n                        .**OnComponentChosen**(this, &amp;FActorPickerTrackEditor::ActorComponentPicked, **ParentActor**, **ObjectGuid**, **Section**);\n\n// Create as context menu\n                FSlateApplication::Get().PushMenu(\n                        **LevelEditor**.ToSharedRef(),\n                        FWidgetPath(),\n                        **MenuWidget**.ToSharedRef(),\n                        FSlateApplication::Get().GetCursorPos(),\n                        FPopupTransitionEffect( FPopupTransitionEffect::ContextMenu )\n                        );\n        }\n</code></pre>"},{"location":"ue4guide/editor-extensions/utility-helpers/checking-out-config-file/","title":"Checking Out Default*.ini file for a class","text":"<p>You can also mark it as writable, test if it's under source control, etc. Here are the helper functions to use:</p> C++<pre><code>Engine\\Source\\Developer\\SharedSettingsWidgets\\Public\\SSettingsEditorCheckoutNotice.h:\n\nnamespace SettingsHelpers\n{\n\tSHAREDSETTINGSWIDGETS_API bool IsSourceControlled(const FString&amp; InFileToCheckOut, bool bForceSourceControlUpdate = false);\n\tSHAREDSETTINGSWIDGETS_API bool IsCheckedOut(const FString&amp; InFileToCheckOut, bool bForceSourceControlUpdate = false);\n\tSHAREDSETTINGSWIDGETS_API bool CheckOutOrAddFile(const FString&amp; InFileToCheckOut, bool bForceSourceControlUpdate = false, bool ShowErrorInNotification = true, FText* OutErrorMessage = nullptr);\n\tSHAREDSETTINGSWIDGETS_API bool MakeWritable(const FString&amp; InFileToMakeWritable, bool ShowErrorInNotification = true, FText* OutErrorMessage = nullptr);\n}\n</code></pre>"},{"location":"ue4guide/editor-extensions/utility-helpers/editor-file-utils/","title":"Editor file utils","text":"C++<pre><code>/*\\*\n\n\\* For saving map files through the main editor frame.\n\n*/\n\nclass FEditorFileUtils\n\n{\n\npublic:\n\n/** Used to decide how to handle garbage collection. */\n\nenum EGarbageCollectionOption\n\n{\n\nGCO_SkipGarbageCollection = 0,\n\nGCO_CollectGarbage = 1,\n\n};\n\n/** Sets the active level filename so that \"Save\" operates on this file and \"SaveAs\" must be used on others */\n\nstatic void RegisterLevelFilename(UObject\\* Object, const FString&amp; NewLevelFilename);\n\n////////////////////////////////////////////////////////////////////////////\n\n// ResetLevelFilenames\n\n/\\*\\*\n\n* Clears current level filename so that the user must SaveAs on next Save.\n\n* Called by NewMap() after the contents of the map are cleared.\n\n* Also called after loading a map template so that the template isn't overwritten.\n\n*/\n\nstatic void ResetLevelFilenames();\n\n////////////////////////////////////////////////////////////////////////////\n\n// Loading\n\nDECLARE_DELEGATE_OneParam(FOnLevelsChosen, const TArray&amp;lt;FAssetData&gt;&amp; /\\*SelectedLevels\\*/);\n\nDECLARE_DELEGATE(FOnLevelPickingCancelled);\n\n/**\n\n* Opens a non-modal dialog to allow the user to choose a level\n\n*\n\n* @param OnLevelsChosen Delegate executed when one more more levels have been selected\n\n* @param OnLevelPickingDialogClosed Delegate executed when the level picking dialog is closed\n\n* @param bAllowMultipleSelection If true, more than one level can be chosen\n\n*/\n\nstatic UNREALED_API void OpenLevelPickingDialog(const FOnLevelsChosen&amp; OnLevelsChosen, const FOnLevelPickingCancelled&amp; OnLevelPickingCancelled, bool bAllowMultipleSelection);\n\n/**\n\n* Returns true if the specified map filename is valid for loading or saving.\n\n* When returning false, OutErrorMessage is supplied with a display string describing the reason why the map name is invalid.\n\n*/\n\nstatic UNREALED_API bool IsValidMapFilename(const FString&amp; MapFilename, FText&amp; OutErrorMessage);\n\n/**\n\n* Unloads the specified package potentially containing an inactive world.\n\n* When returning false, OutErrorMessage is supplied with a display string describing the reason why the world could not be unloaded.\n\n*/\n\nstatic UNREALED_API bool AttemptUnloadInactiveWorldPackage(UPackage\\* PackageToUnload, FText&amp; OutErrorMessage);\n\n/**\n\n* Prompts the user to save the current map if necessary, the presents a load dialog and\n\n* loads a new map if selected by the user.\n\n*/\n\nstatic UNREALED_API bool LoadMap();\n\n/**\n\n* Loads the specified map. Does not prompt the user to save the current map.\n\n*\n\n* @param Filename Map package filename, including path.\n\n*\n\n* @param LoadAsTemplate Forces the map to load into an untitled outermost package\n\n* preventing the map saving over the original file.\n\n* @param bShowProgress Whether to show a progress dialog as the map loads\\\\\n\n* @return true on success, false otherwise\n\n*/\n\nstatic UNREALED_API bool LoadMap(const FString&amp; Filename, bool LoadAsTemplate = false, const bool bShowProgress=true);\n\n////////////////////////////////////////////////////////////////////////////\n\n// Saving\n\n/**\n\n* Saves the specified map package, returning true on success.\n\n*\n\n* @param World The world to save.\n\n* @param Filename Map package filename, including path.\n\n*\n\n* @return true if the map was saved successfully.\n\n*/\n\nstatic bool SaveMap(UWorld\\* World, const FString&amp; Filename );\n\n/**\n\n* Saves the specified level. SaveAs is performed as necessary.\n\n*\n\n* @param Level The level to be saved.\n\n* @param DefaultFilename File name to use for this level if it doesn't have one yet (or empty string to prompt)\n\n* @param OutSavedFilename When returning true, this string will be set to the filename of the saved level.\n\n*\n\n* @return true if the level was saved.\n\n*/\n\nstatic UNREALED_API bool SaveLevel(ULevel\\* Level, const FString&amp; DefaultFilename = TEXT( \"\" ), FString\\* OutSavedFilename = nullptr );\n\n/** Saves packages which contain map data but are not map packages themselves. \\*/\n\nstatic UNREALED_API void SaveMapDataPackages(UWorld\\* World, bool bCheckDirty);\n\n/**\n\n* Does a SaveAs for the specified assets.\n\n*\n\n* @param Assets The collection of assets to save.\n\n* @param SavedAssets The collection of corresponding saved assets (contains original asset if not resaved).\n\n*/\n\nUNREALED_API static void SaveAssetsAs(const TArray&amp;lt;UObject\\*&gt;&amp; Assets, TArray&amp;lt;UObject\\*&gt;&amp; OutSavedAssets);\n\n/**\n\n* Does a saveAs for the specified level.\n\n*\n\n* @param Level The Level to be SaveAs'd.\n\n* @param OutSavedFilename When returning true, this string will be set to the filename of the saved level.\n\n* @return true if the world was saved.\n\n*/\n\nUNREALED_API static bool SaveLevelAs(ULevel\\* Level, FString\\* OutSavedFilename = nullptr);\n\n/**\n\n* Saves all levels to the specified directory.\n\n*\n\n* @param AbsoluteAutosaveDir Autosave directory.\n\n* @param AutosaveIndex Integer prepended to autosave filenames..\n\n* @param bForceIfNotInList Should the save be forced if the package is dirty, but not in DirtyPackagesForAutoSave?\n\n* @param DirtyPackagesForAutoSave A set of packages that are considered by the auto-save system to be dirty, you should check this to see if a package needs saving\n\n*/\n\nstatic bool AutosaveMap(const FString&amp; AbsoluteAutosaveDir, const int32 AutosaveIndex, const bool bForceIfNotInList, const TSet&amp;lt; TWeakObjectPtr&amp;lt;UPackage&gt; &gt;&amp; DirtyPackagesForAutoSave);\n\n/**\n\n* Saves all levels to the specified directory.\n\n*\n\n* @param AbsoluteAutosaveDir Autosave directory.\n\n* @param AutosaveIndex Integer prepended to autosave filenames..\n\n* @param bForceIfNotInList Should the save be forced if the package is dirty, but not in DirtyPackagesForAutoSave?\n\n* @param DirtyPackagesForAutoSave A set of packages that are considered by the auto-save system to be dirty, you should check this to see if a package needs saving\n\n*/\n\nstatic EAutosaveContentPackagesResult::Type AutosaveMapEx(const FString&amp; AbsoluteAutosaveDir, const int32 AutosaveIndex, const bool bForceIfNotInList, const TSet&amp;lt; TWeakObjectPtr&amp;lt;UPackage&gt; &gt;&amp; DirtyPackagesForAutoSave);\n\n/**\n\n* Saves all asset packages to the specified directory.\n\n*\n\n* @param AbsoluteAutosaveDir Autosave directory.\n\n* @param AutosaveIndex Integer prepended to autosave filenames.\n\n* @param bForceIfNotInList Should the save be forced if the package is dirty, but not in DirtyPackagesForAutoSave?\n\n* @param DirtyPackagesForAutoSave A set of packages that are considered by the auto-save system to be dirty, you should check this to see if a package needs saving\n\n*\n\n* @return true if one or more packages were autosaved; false otherwise\n\n*/\n\nstatic bool AutosaveContentPackages(const FString&amp; AbsoluteAutosaveDir, const int32 AutosaveIndex, const bool bForceIfNotInList, const TSet&amp;lt; TWeakObjectPtr&amp;lt;UPackage&gt; &gt;&amp; DirtyPackagesForAutoSave);\n\n/**\n\n* Saves all asset packages to the specified directory.\n\n*\n\n* @param AbsoluteAutosaveDir Autosave directory.\n\n* @param AutosaveIndex Integer prepended to autosave filenames.\n\n* @param bForceIfNotInList Should the save be forced if the package is dirty, but not in DirtyPackagesForAutoSave?\n\n* @param DirtyPackagesForAutoSave A set of packages that are considered by the auto-save system to be dirty, you should check this to see if a package needs saving\n\n*\n\n* @return Success if saved at least one faile. NothingToDo if there was nothing to save. Failure on at least one auto-save failure.\n\n*/\n\nstatic EAutosaveContentPackagesResult::Type AutosaveContentPackagesEx(const FString&amp; AbsoluteAutosaveDir, const int32 AutosaveIndex, const bool bForceIfNotInList, const TSet&amp;lt; TWeakObjectPtr&amp;lt;UPackage&gt; &gt;&amp; DirtyPackagesForAutoSave);\n\n/**\n\n* Looks at all currently loaded packages and saves them if their \"bDirty\" flag is set, optionally prompting the user to select which packages to save)\n\n*\n\n* @param bPromptUserToSave true if we should prompt the user to save dirty packages we found. false to assume all dirty packages should be saved. Regardless of this setting the user will be prompted for checkout(if needed) unless bFastSave is set\n\n* @param bSaveMapPackages true if map packages should be saved\n\n* @param bSaveContentPackages true if we should save content packages.\n\n* @param bFastSave true if we should do a fast save. (I.E dont prompt the user to save, dont prompt for checkout, and only save packages that are currently writable). Note: Still prompts for SaveAs if a package needs a filename\n\n* @param bNotifyNoPackagesSaved true if a notification should be displayed when no packages need to be saved.\n\n* @param bCanBeDeclined true if the user prompt should contain a \"Don't Save\" button in addition to \"Cancel\", which won't result in a failure return code.\n\n* @param bOutPackagesNeededSaving when not NULL, will be set to true if there was any work to be done, and false otherwise.\n\n* @return true on success, false on fail.\n\n*/\n\nUNREALED_API static bool SaveDirtyPackages(const bool bPromptUserToSave, const bool bSaveMapPackages, const bool bSaveContentPackages, const bool bFastSave = false, const bool bNotifyNoPackagesSaved = false, const bool bCanBeDeclined = true, bool\\* bOutPackagesNeededSaving = NULL);\n\n/**\n\n* Looks at all currently loaded packages and saves them if their \"bDirty\" flag is set and they include specified clasees, optionally prompting the user to select which packages to save)\n\n*\n\n* @param SaveContentClasses save only specified classes or children classes\n\n* @param bPromptUserToSave true if we should prompt the user to save dirty packages we found. false to assume all dirty packages should be saved. Regardless of this setting the user will be prompted for checkout(if needed) unless bFastSave is set\n\n* @param bFastSave true if we should do a fast save. (I.E dont prompt the user to save, dont prompt for checkout, and only save packages that are currently writable). Note: Still prompts for SaveAs if a package needs a filename\n\n* @param bNotifyNoPackagesSaved true if a notification should be displayed when no packages need to be saved.\n\n* @param bCanBeDeclined true if the user prompt should contain a \"Don't Save\" button in addition to \"Cancel\", which won't result in a failure return code.\n\n* @return true on success, false on fail.\n\n*/\n\nUNREALED_API static bool SaveDirtyContentPackages(TArray&amp;lt;UClass\\*&gt;&amp; SaveContentClasses, const bool bPromptUserToSave, const bool bFastSave = false, const bool bNotifyNoPackagesSaved = false, const bool bCanBeDeclined = true);\n\n/**\n\n* Appends array with all currently dirty world packages.\n\n*\n\n* @param OutDirtyPackages Array to append dirty packages to.\n\n*/\n\nUNREALED_API static void GetDirtyWorldPackages(TArray&amp;lt;UPackage\\*&gt;&amp; OutDirtyPackages);\n\n/**\n\n* Appends array with all currently dirty content packages.\n\n*\n\n* @param OutDirtyPackages Array to append dirty packages to.\n\n*/\n\nUNREALED_API static void GetDirtyContentPackages(TArray&amp;lt;UPackage\\*&gt;&amp; OutDirtyPackages);\n\n/**\n\n* Saves the active level, prompting the use for checkout if necessary.\n\n*\n\n* @return true on success, False on fail\n\n*/\n\nUNREALED_API static bool SaveCurrentLevel();\n\n/** Enum used for prompt returns \\*/\n\nenum EPromptReturnCode\n\n{\n\nPR_Success, /\\*\\* The user has answered in the affirmative to all prompts, and execution succeeded \\*/\n\nPR_Failure, /\\*\\* The user has answered in the affirmative to prompts, but an operation(s) has failed during execution \\*/\n\nPR_Declined, /\\*\\* The user has declined out of the prompt; the caller should continue whatever it was doing \\*/\n\nPR_Cancelled /\\*\\* The user has cancelled out of a prompt; the caller should abort whatever it was doing \\*/\n\n};\n\n/**\n\n* Optionally prompts the user for which of the provided packages should be saved, and then additionally prompts the user to check-out any of\n\n* the provided packages which are under source control. If the user cancels their way out of either dialog, no packages are saved. It is possible the user\n\n* will be prompted again, if the saving process fails for any reason. In that case, the user will be prompted on a package-by-package basis, allowing them\n\n* to retry saving, skip trying to save the current package, or to again cancel out of the entire dialog. If the user skips saving a package that failed to save,\n\n* the package will be added to the optional OutFailedPackages array, and execution will continue. After all packages are saved (or not), the user is provided with\n\n* a warning about any packages that were writable on disk but not in source control, as well as a warning about which packages failed to save.\n\n*\n\n* @param PackagesToSave The list of packages to save. Both map and content packages are supported\n\n* @param bCheckDirty If true, only packages that are dirty in PackagesToSave will be saved\n\n* @param bPromptToSave If true the user will be prompted with a list of packages to save, otherwise all passed in packages are saved\n\n* @param OutFailedPackages \\[out] If specified, will be filled in with all of the packages that failed to save successfully\n\n* @param bAlreadyCheckedOut If true, the user will not be prompted with the source control dialog\n\n* @param bCanBeDeclined If true, offer a \"Don't Save\" option in addition to \"Cancel\", which will not result in a cancellation return code.\n\n*\n\n* @return An enum value signifying success, failure, user declined, or cancellation. If any packages at all failed to save during execution, the return code will be\n\n* failure, even if other packages successfully saved. If the user cancels at any point during any prompt, the return code will be cancellation, even though it\n\n* is possible some packages have been successfully saved (if the cancel comes on a later package that can't be saved for some reason). If the user opts the \"Don't\n\n* Save\" option on the dialog, the return code will indicate the user has declined out of the prompt. This way calling code can distinguish between a decline and a cancel\n\n* and then proceed as planned, or abort its operation accordingly.\n\n*/\n\nUNREALED_API static EPromptReturnCode PromptForCheckoutAndSave( const TArray&amp;lt;UPackage\\*&gt;&amp; PackagesToSave, bool bCheckDirty, bool bPromptToSave, TArray&amp;lt;UPackage\\*&gt;\\* OutFailedPackages = NULL, bool bAlreadyCheckedOut = false, bool bCanBeDeclined = true );\n\n////////////////////////////////////////////////////////////////////////////\n\n// Import/Export\n\n/**\n\n* Presents the user with a file dialog for importing.\n\n* If the import is not a merge (bMerging is false), AskSaveChanges() is called first.\n\n*/\n\nUNREALED_API static void Import();\n\nUNREALED_API static void Import(const FString&amp; InFilename);\n\nUNREALED_API static void Export(bool bExportSelectedActorsOnly); // prompts user for file etc.\n\n////////////////////////////////////////////////////////////////////////////\n\n// Source Control\n\n/**\n\n* Prompt the user with a check-box dialog allowing him/her to check out the provided packages\n\n* from source control, if desired\n\n*\n\n* @param bCheckDirty If true, non-dirty packages won't be added to the dialog\n\n* @param PackagesToCheckOut Reference to array of packages to prompt the user with for possible check out\n\n* @param OutPackagesCheckedOutOrMadeWritable If not NULL, this array will be populated with packages that the user selected to check out or make writable.\n\n* @param OutPackagesNotNeedingCheckout If not NULL, this array will be populated with packages that the user was not prompted about and do not need to be checked out to save. Useful for saving packages even if the user canceled the checkout dialog.\n\n* @param bPromptingAfterModify If true, we are prompting the user after an object has been modified, which changes the cancel button to \"Ask me later\".\n\n*\n\n* @return true if the user did not cancel out of the dialog and has potentially checked out some files\n\n* (or if there is no source control integration); false if the user cancelled the dialog\n\n*/\n\nUNREALED_API static bool PromptToCheckoutPackages(bool bCheckDirty, const TArray&amp;lt;UPackage\\*&gt;&amp; PackagesToCheckOut, TArray&amp;lt; UPackage\\* &gt;\\* OutPackagesCheckedOutOrMadeWritable = NULL, TArray&amp;lt; UPackage\\* &gt;\\* OutPackagesNotNeedingCheckout = NULL, const bool bPromptingAfterModify = false );\n\n/**\n\n* Check out the specified packages from source control and report any errors while checking out\n\n*\n\n* @param PkgsToCheckOut Reference to array of packages to check out\n\n* @param OutPackagesCheckedOut If not NULL, this array will be populated with packages that were checked out.\n\n* @param bErrorIfAlreadyCheckedOut true to consider being unable to checkout a package because it is already checked out an error, false to allow this without error\n\n*\n\n* @return true if all the packages were checked out successfully\n\n*/\n\nUNREALED_API static ECommandResult::Type CheckoutPackages(const TArray&amp;lt;UPackage\\*&gt;&amp; PkgsToCheckOut, TArray&amp;lt;UPackage\\*&gt;\\* OutPackagesCheckedOut = NULL, const bool bErrorIfAlreadyCheckedOut = true);\n\n/**\n\n* Check out the specified packages from source control and report any errors while checking out\n\n*\n\n* @param PkgsToCheckOut Reference to array of package names to check out\n\n* @param OutPackagesCheckedOut If not NULL, this array will be populated with packages that were checked out.\n\n* @param bErrorIfAlreadyCheckedOut true to consider being unable to checkout a package because it is already checked out an error, false to allow this without error\n\n*\n\n* @return the result of the check out operation\n\n*/\n\nUNREALED_API static ECommandResult::Type CheckoutPackages(const TArray&amp;lt;FString&gt;&amp; PkgsToCheckOut, TArray&amp;lt;FString&gt;\\* OutPackagesCheckedOut = NULL, const bool bErrorIfAlreadyCheckedOut = true);\n\n/**\n\n* Prompt the user with a check-box dialog allowing him/her to check out relevant level packages\n\n* from source control\n\n*\n\n* @param bCheckDirty If true, non-dirty packages won't be added to the dialog\n\n* @param SpecificLevelsToCheckOut If specified, only the provided levels' packages will display in the\n\n* dialog if they are under source control; If nothing is specified, all levels\n\n* referenced by GWorld whose packages are under source control will be displayed\n\n* @param OutPackagesNotNeedingCheckout If not null, this array will be populated with packages that the user was not prompted about and do not need to be checked out to save. Useful for saving packages even if the user canceled the checkout dialog.\n\n*\n\n* @return true if the user did not cancel out of the dialog and has potentially checked out some files (or if there is\n\n* no source control integration); false if the user cancelled the dialog\n\n*/\n\nUNREALED_API static bool PromptToCheckoutLevels(bool bCheckDirty, const TArray&amp;lt;ULevel\\*&gt;&amp; SpecificLevelsToCheckOut, TArray&amp;lt;UPackage\\*&gt;\\* OutPackagesNotNeedingCheckout = NULL);\n\n/**\n\n* Overloaded version of PromptToCheckOutLevels which prompts the user with a check-box dialog allowing\n\n* him/her to check out the relevant level package if necessary\n\n*\n\n* @param bCheckDirty If true, non-dirty packages won't be added to the dialog\n\n* @param SpecificLevelToCheckOut The level whose package will display in the dialog if it is\n\n* under source control\n\n*\n\n* @return true if the user did not cancel out of the dialog and has potentially checked out some files (or if there is\n\n* no source control integration); false if the user cancelled the dialog\n\n*/\n\nUNREALED_API static bool PromptToCheckoutLevels(bool bCheckDirty, ULevel\\* SpecificLevelToCheckOut);\n\n/**\n\n* Checks to see if a filename is valid for saving.\n\n* A filename must be under MAX_UNREAL_FILENAME_LENGTH to be saved\n\n*\n\n* @param Filename Filename, with or without path information, to check.\n\n* @param OutError If an error occurs, this is the reason why\n\n*/\n\nUNREALED_API static bool IsFilenameValidForSaving( const FString&amp; Filename, FText&amp; OutError );\n\n/** Loads a simple example map \\*/\n\nUNREALED_API static void LoadDefaultMapAtStartup();\n\n/**\n\n* Save all packages corresponding to the specified world, with the option to override their path and also\n\n* apply a prefix.\n\n*\n\n* @param InWorld The world to save (including its children)\n\n* @param RootPath Root Path override, replaces /Game/ in original name\n\n* @param Prefix Optional prefix for base filename, can be NULL\n\n* @param OutFilenames The file names of all successfully saved worlds will be added to this\n\n* @return true if at least one level was saved.\n\n* If bPIESaving, will be true is ALL worlds were saved.\n\n*/\n\nstatic bool SaveWorlds(UWorld\\* InWorld, const FString&amp; RootPath, const TCHAR\\* Prefix, TArray&amp;lt;FString&gt;&amp; OutFilenames);\n\n/** Whether or not we're in the middle of loading the simple startup map */\n\nstatic bool IsLoadingStartupMap() {return bIsLoadingDefaultStartupMap;}\n\n/**\n\n* Returns a file filter string appropriate for a specific file interaction.\n\n*\n\n* @param Interaction A file interaction to get a filter string for.\n\n* @return A filter string.\n\n*/\n\nUNREALED_API static FString GetFilterString(EFileInteraction Interaction);\n\n/**\n\n* Looks for package files in the known content paths on disk.\n\n*\n\n* @param OutPackages All found package filenames.\n\n*/\n\nUNREALED_API static void FindAllPackageFiles(TArray&amp;lt;FString&gt;&amp; OutPackages);\n\n/**\n\n* Looks for source control submittable files in the known content paths on disk.\n\n*\n\n* @param OutPackages All found package filenames and their source control state\n\n* @param bIncludeMaps If true, also adds maps to the list\n\n*/\n\nUNREALED_API static void FindAllSubmittablePackageFiles(TMap&amp;lt;FString, FSourceControlStatePtr&gt;&amp; OutPackages, const bool bIncludeMaps);\n\n/**\n\n* Looks for config files for the current project.\n\n*\n\n* @param OutConfigFiles All found config filenames.\n\n*/\n\nUNREALED_API static void FindAllConfigFiles(TArray&amp;lt;FString&gt;&amp; OutConfigFiles);\n\n/**\n\n* Looks for source control submittable config files for the current project.\n\n*\n\n* @param OutConfigFiles All found config filenames and their source control state.\n\n*/\n\nUNREALED_API static void FindAllSubmittableConfigFiles(TMap&amp;lt;FString, FSourceControlStatePtr&gt;&amp; OutConfigFiles);\n\n/**\n\n* Helper function used to decide whether a package name is a map package or not. Map packages aren't added to the additional package list.\n\n*\n\n* @param ObjectPath The path to the package to test\n\n* @return True if package is a map\n\n*/\n\nUNREALED_API static bool IsMapPackageAsset(const FString&amp; ObjectPath);\n\n/**\n\n* Helper function used to decide whether a package name is a map package or not. Map packages aren't added to the additional package list.\n\n*\n\n* @param ObjectPath The path to the package to test\n\n* @param MapFilePath OUT parameter that returns the map file path if it exists.\n\n* @return True if package is a map\n\n*/\n\nUNREALED_API static bool IsMapPackageAsset(const FString&amp; ObjectPath, FString&amp; MapFilePath);\n\n/**\n\n* Helper function used to extract the package name from the object path\n\n*\n\n* @param ObjectPath The path to the package to test\n\n* @return The package name from the string\n\n*/\n\nUNREALED_API static FString ExtractPackageName(const FString&amp; ObjectPath);\\\\\n\n////////////////////////////////////////////////////////////////////////////\n\n// File\n\nUNREALED_API static FString GetFilename(const FName&amp; PackageName);\n\nUNREALED_API static FString GetFilename(UObject\\* LevelObject);\n\n};\n</code></pre>"},{"location":"ue4guide/editor-extensions/utility-helpers/editor-utils/","title":"Useful classes","text":"<p>Look for classes that end in Utils or EditorUtils e.g. FBlueprintEditorUtils or FActorEditorUtils, EngineUtils, etc</p> <ul> <li>These classes often have lots of utility functions that are widely accessible</li> </ul> FBlueprintEditorUtils Useful for blueprints FActorEditorUtils Functions for managing actors C++<pre><code>IsUniqueObjectName()\n\nnamespace EditorUtilities\n\n{\n\n /\\*\\*\n\n \\* Given an actor in a Simulation or PIE world, tries to find a counterpart actor in the editor world\n\n \\*\n\n \\* @param    Actor   The simulation world actor that we want to find a counterpart for\n\n \\*\n\n \\* @return      The found editor world actor, or NULL if we couldn't find a counterpart\n\n \\*/\n\n UNREALED_API AActor\\* GetEditorWorldCounterpartActor( AActor\\* Actor );\n\n /\\*\\*\n\n \\* Given an actor in the editor world, tries to find a counterpart actor in a Simulation or PIE world\n\n \\*\n\n \\* @param      Actor      The editor world actor that we want to find a counterpart for\n\n \\*\n\n \\* @return        The found Simulation or PIE world actor, or NULL if we couldn't find a counterpart\n\n \\*/\n\n UNREALED_API AActor\\* GetSimWorldCounterpartActor( AActor\\* Actor );\n\n /\\*\\*\n\n \\* Guiven an actor in the editor world, and SourceComponent from Simulation or PIE world\n\n \\* find the matching component in the Editor World\n\n \\*\n\n \\* @param        SourceComponent        SouceCompoent in SIM world\n\n \\* @param        TargetActor                TargetActor in editor world\n\n \\*\n\n \\* @return        the sound editor component or NULL if we couldn't find\n\n \\*/\n\n UNREALED_API UActorComponent\\* FindMatchingComponentInstance( UActorComponent\\* SourceComponent, AActor\\* TargetActor );\n\n /\\*\\* Options for CopyActorProperties \\*/\n\n namespace ECopyOptions\n\n {\n\n enum Type\n\n {\n\n /\\*\\* Default copy options \\*/\n\n Default = 0,\n\n /\\*\\* Set this option to preview the changes and not actually copy anything. This will count the number of properties that would be copied. \\*/\n\n PreviewOnly = 1 &amp;lt;&amp;lt; 0,\n\n /\\*\\* Call PostEditChangeProperty for each modified property \\*/\n\n CallPostEditChangeProperty = 1 &amp;lt;&amp;lt; 1,\n\n /\\*\\* Call PostEditMove if we detect that a transform property was changed \\*/\n\n CallPostEditMove = 1 &amp;lt;&amp;lt; 2,\n\n /\\*\\* Copy only Edit and Interp properties. Otherwise we copy all properties by default \\*/\n\n OnlyCopyEditOrInterpProperties = 1 &amp;lt;&amp;lt; 3,\n\n /\\*\\* Propagate property changes to archetype instances if the target actor is a CDO \\*/\n\n PropagateChangesToArchetypeInstances = 1 &amp;lt;&amp;lt; 4,\n\n /\\*\\* Filters out Blueprint Read-only properties \\*/\n\n FilterBlueprintReadOnly = 1 &amp;lt;&amp;lt; 5,\n\n };\n\n }\n\n /\\*\\* Copy options structure for CopyActorProperties \\*/\n\n struct FCopyOptions\n\n {\n\n /\\*\\* Implicit construction for an options enumeration \\*/\n\n FCopyOptions(const ECopyOptions::Type InFlags) : Flags(InFlags) {}\n\n /\\*\\* Check whether we can copy the specified property \\*/\n\n bool CanCopyProperty(UProperty&amp; Property, UObject&amp; Object) const\n\n {\n\n return !PropertyFilter || PropertyFilter(Property, Object);\n\n }\n\n /\\*\\* User-specified flags for the copy \\*/\n\n ECopyOptions::Type Flags;\n\n /\\*\\* User-specified custom property filter predicate \\*/\n\n TFunction&amp;lt;bool(UProperty&amp;lt;, UObject&amp;lt;)&gt; PropertyFilter;\n\n };\n\n /\\*\\* Helper function for CopyActorProperties(). Copies a single property form a source object to a target object. \\*/\n\n UNREALED_API void CopySingleProperty(const UObject\\* const InSourceObject, UObject\\* const InTargetObject, UProperty\\* const InProperty);\n\n /\\*\\*\n\n \\* Copies properties from one actor to another. Designed for propagating changes made to PIE actors back to their EditorWorld\n\n \\* counterpart, or pushing spawned actor changes back to a Blueprint CDO object. You can pass the 'PreviewOnly' option to\n\n \\* count the properties that would be copied instead of actually copying them.\n\n \\*\n\n \\* @param        SourceActor                Actor to copy properties from\n\n \\* @param        TargetActor                Actor that will be modified with properties propagated from the source actor\n\n \\* @param        Options                        Optional options for this copy action (see ECopyOptions::Type)\n\n \\*\n\n \\* @return        The number of properties that were copied over (properties that were filtered out, or were already identical, are not counted.)\n\n \\*/\n\n UNREALED_API int32 CopyActorProperties( AActor\\* SourceActor, AActor\\* TargetActor, const FCopyOptions&amp; Options = FCopyOptions(ECopyOptions::Default) );\n\n}\n</code></pre>"},{"location":"ue4guide/editor-extensions/utility-helpers/package-utils/","title":"Package utils","text":"C++<pre><code>namespace PackageTools\n\n{\n\n /**\n\n \\* Filters the global set of packages.\n\n \\*\n\n \\* @param        OutGroupPackages                        The map that receives the filtered list of group packages.\n\n \\* @param        OutPackageList                                The array that will contain the list of filtered packages.\n\n \\*/\n\n UNREALED_API void GetFilteredPackageList(TSet&amp;lt;UPackage\\*&gt;&amp; OutFilteredPackageMap);\n\n /\\*\\*\n\n \\* Fills the OutObjects list with all valid objects that are supported by the current\n\n \\* browser settings and that reside withing the set of specified packages.\n\n \\*\n\n \\* @param        InPackages                        Filters objects based on package.\n\n \\* @param        OutObjects                        \\[out] Receives the list of objects\n\n \\*/\n\n UNREALED_API void GetObjectsInPackages( const TArray&amp;lt;UPackage\\*&gt;\\* InPackages, TArray&amp;lt;UObject\\*&gt;&amp; OutObjects );\n\n /**\n\n * Handles fully loading passed in packages.\n\n *\n\n * @param        TopLevelPackages        Packages to be fully loaded.\n\n * @param        OperationText                Text describing the operation; appears in the warning string presented to the user.\n\n *\n\n * @return true if all packages where fully loaded, false otherwise\n\n */\n\n UNREALED_API bool HandleFullyLoadingPackages( const TArray&amp;lt;UPackage\\*&gt;&amp; TopLevelPackages, const FText&amp; OperationText );\n\n /**\n\n * Loads the specified package file (or returns an existing package if it's already loaded.)\n\n *\n\n * @param        InFilename        File name of package to load\n\n *\n\n * @return        The loaded package (or NULL if something went wrong.)\n\n */\n\n UNREALED_API UPackage\\* LoadPackage( FString InFilename );\n\n /**\n \n * Helper function that attempts to unload the specified top-level packages.\n\n *\n\n * @param        PackagesToUnload        the list of packages that should be unloaded\n\n *\n\n * @return        true if the set of loaded packages was changed\n\n */\n\n UNREALED_API bool UnloadPackages( const TArray&amp;lt;UPackage\\*&gt;&amp; PackagesToUnload );\n\n /**\n\n * Helper function that attempts to unload the specified top-level packages.\n\n *\n\n * @param        PackagesToUnload        the list of packages that should be unloaded\n\n * @param        OutErrorMessage                An error message specifying any problems with unloading packages\n\n *\n\n * @return        true if the set of loaded packages was changed\n\n */\n\n UNREALED_API bool UnloadPackages( const TArray&amp;lt;UPackage\\*&gt;&amp; PackagesToUnload, FText&amp; OutErrorMessage );\n\n /**\n\n * Helper function that attempts to reload the specified top-level packages.\n\n *\n\n * @param        PackagesToReload        The list of packages that should be reloaded\n\n *\n\n * @return        true if the set of loaded packages was changed\n\n */\n\n UNREALED_API bool ReloadPackages( const TArray&amp;lt;UPackage\\*&gt;&amp; PackagesToReload );\n\n /**\n\n * Helper function that attempts to reload the specified top-level packages.\n\n *\n\n * @param        PackagesToReload        The list of packages that should be reloaded\n\n * @param        OutErrorMessage                An error message specifying any problems with reloading packages\n\n * @param        bInteractive                Whether the function is allowed to ask the user questions (such as whether to reload dirty packages)\n\n *\n\n * @return        true if the set of loaded packages was changed\n\n */\n\n UNREALED_API bool ReloadPackages( const TArray&amp;lt;UPackage\\*&gt;&amp; PackagesToReload, FText&amp; OutErrorMessage, const bool bInteractive = true );\n\n /**\n\n *        Exports the given packages to files.\n\n *\n\n * @param        PackagesToExport                The set of packages to export.\n\n * @param        ExportPath                                receives the value of the path the user chose for exporting.\n\n * @param        bUseProvidedExportPath        If true and ExportPath is specified, use ExportPath as the user's export path w/o prompting for a directory, where applicable\n\n */\n\n UNREALED_API void ExportPackages( const TArray&amp;lt;UPackage\\*&gt;&amp; PackagesToExport, FString\\* ExportPath=NULL, bool bUseProvidedExportPath = false );\n\n /**\n\n * Wrapper method for multiple objects at once.\n\n *\n\n * @param        TopLevelPackages                the packages to be export\n\n * @param        LastExportPath                        the path that the user last exported assets to\n\n * @param        FilteredClasses                        if specified, set of classes that should be the only types exported if not exporting to single file\n\n * @param        bUseProvidedExportPath        If true, use LastExportPath as the user's export path w/o prompting for a directory, where applicable\n\n *\n\n * @return        the path that the user chose for the export.\n\n */\n\n UNREALED_API FString DoBulkExport(const TArray&amp;lt;UPackage\\*&gt;&amp; TopLevelPackages, FString LastExportPath, const TSet&amp;lt;UClass\\*&gt;\\* FilteredClasses = NULL, bool bUseProvidedExportPath = false );\n\n /\\*\\* Helper function that attempts to check out the specified top-level packages. \\*/\n\n UNREALED_API void CheckOutRootPackages( const TArray&amp;lt;UPackage\\*&gt;&amp; Packages );\n\n /\\*\\*\n\n \\* Checks if the passed in path is in an external directory. I.E Ones not found automatically in the content directory\n\n \\*\n\n \\* @param        PackagePath        Path of the package to check, relative or absolute\n\n \\* @return        true if PackagePath points to an external location\n\n \\*/\n\n UNREALED_API bool IsPackagePathExternal(const FString&amp; PackagePath);\n\n /\\*\\*\n\n * Checks if the passed in package's filename is in an external directory. I.E Ones not found automatically in the content directory\n\n *\n\n * @param        Package        The package to check\n\n * @return        true if the package points to an external filename\n\n */\n\n UNREALED_API bool IsPackageExternal(const UPackage&amp; Package);\n\n /**\n\n * Checks if the passed in packages have any references to externally loaded packages. I.E Ones not found automatically in the content directory\n\n *\n\n * @param        PackagesToCheck                                        The packages to check\n\n * @param        OutPackagesWithExternalRefs                Optional list of packages that do have external references\n\n * @param        LevelToCheck                                        The ULevel to check\n\n * @param        OutObjectsWithExternalRefs                List of objects gathered from within the given ULevel that have external references\n\n * @return        true if PackagesToCheck has references to an externally loaded package\n\n */\n\n UNREALED_API bool CheckForReferencesToExternalPackages(const TArray&amp;lt;UPackage\\*&gt;\\* PackagesToCheck, TArray&amp;lt;UPackage\\*&gt;\\* OutPackagesWithExternalRefs, ULevel\\* LevelToCheck=NULL, TArray&amp;lt;UObject\\*&gt;\\* OutObjectsWithExternalRefs=NULL );\n\n /** Saves all the dirty packages for the specified objects\\*/\n\n UNREALED_API bool SavePackagesForObjects(const TArray&amp;lt;UObject\\*&gt;&amp; ObjectsToSave);\n\n /\\*\\*\n\n * Checks if the package has only one asset which shares its name\n\n *\n\n * @param Package The package to check\n\n * @return true if the package has only one asset which shares the name of the package\n\n */\n\n UNREALED_API bool IsSingleAssetPackage (const FString&amp; Package);\n\n /** Replaces all invalid package name characters with _ */\n\n UNREALED_API FString SanitizePackageName(const FString&amp; InPackageName);\n\n}\n</code></pre>"},{"location":"ue4guide/editor-extensions/utility-helpers/save-object-to-a-package-or-asset/","title":"Save object to a package or asset","text":"<p>Create a new package for the new asset:</p> <ol> <li> <p>UPackage* NewPackage = CreatePackage(nullptr, NewPackageName);</p> </li> <li> <p>Than duplicate the existing asset so that its Outer is the NewPackage:</p> </li> <li> <p>UObject* NewObject = StaticDuplicateObject(OldObject, NewPackage);</p> </li> <li> <p>Than make any changes you want to NewObject and save the new package with:</p> </li> <li> <p>SavePackageHelper(NewPackage, NewPackageName);</p> </li> </ol> <p>Reference From https://udn.unrealengine.com/questions/366402/how-can-i-write-fassetdata-to-the-hard-disk.html</p> <p>The Cook, The Resave, His Garbage And Her Optimization \u2013 Unreal ...</p> <p>Reference From https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=8&amp;ved=0ahUKEwjtx5j3pO3YAhVN8GMKHbeEAoMQFghVMAc&amp;url=https%3A%2F%2Fcoconutlizard.co.uk%2Fnew%2Fprogramming%2Fthe-cook-the-resave-his-garbage-and-her-optimization%2F&amp;usg=AOvVaw2DkrYGi8a6hcQIued0ssJ5</p>"},{"location":"ue4guide/editor-extensions/utility-helpers/useful-actor-editor-functions/","title":"Useful actor editor functions","text":"<p>USceneComponents:</p> <p>PostEditComponentMove(bool bFinished) {}</p> <p>AActors:</p> <p>AActor::PreEditChange(UProperty* PropertyThatWillChange)</p> <p>virtual bool CanEditChange( const UProperty* Property ) const override;</p> <p>PostEditChangeProperty(FPropertyChangedEvent&amp; PropertyChangedEvent)</p> <p>PostEditMove(bool bFinished)</p> <p>ReregisterComponentsWhenModified() const</p> <p>DebugShowComponentHierarchy( const TCHAR* Info, bool bShowPosition )</p> <p>DebugShowOneComponentHierarchy( USceneComponent* SceneComp, int32&amp; NestLevel, bool bShowPosition )</p> <p>FActorTransactionAnnotation(const AActor* Actor, const bool bCacheRootComponentData) : ComponentInstanceData(Actor)</p> <p>AddReferencedObjects(FReferenceCollector&amp; Collector)</p> <p>HasInstanceData() const</p> <p>GetTransactionAnnotation() const</p> <p>PreEditUndo()</p> <p>PostEditUndo()</p> <p>PostEditUndo(TSharedPtr&lt;ITransactionObjectAnnotation&gt; TransactionAnnotation)</p> <p>EditorApplyTranslation(const FVector&amp; DeltaTranslation, bool bAltDown, bool bShiftDown, bool bCtrlDown)</p> <p>EditorApplyRotation(const FRotator&amp; DeltaRotation, bool bAltDown, bool bShiftDown, bool bCtrlDown)</p> <p>EditorApplyScale( const FVector&amp; DeltaScale, const FVector* PivotLocation, bool bAltDown, bool bShiftDown, bool bCtrlDown )</p> <p>EditorApplyMirror(const FVector&amp; MirrorScale, const FVector&amp; PivotLocation)</p> <p>IsHiddenEd() const</p> <p>SetIsTemporarilyHiddenInEditor( bool bIsHidden )</p> <p>IsEditable() const</p> <p>IsListedInSceneOutliner() const</p> <p>EditorCanAttachTo(const AActor* InParent, FText&amp; OutReason) const</p> <p>GetActorLabel() const</p> <p>SetActorLabel( const FString&amp; NewActorLabelDirty, bool bMarkDirty )</p> <p>SetActorLabelInternal( const FString&amp; NewActorLabelDirty, bool bMakeGloballyUniqueFName, bool bMarkDirty )</p> <p>IsActorLabelEditable() const</p> <p>ClearActorLabel()</p> <p>FActorFolders::Get().CreateFolder(InWorld, NewFolderName)</p> <p>GetFolderPath() const</p> <p>SetFolderPath(const FName&amp; NewFolderPath)</p> <p>SetFolderPath_Recursively(const FName&amp; NewFolderPath)</p> <p>CheckForDeprecated()</p> <p>CheckForErrors()</p> <p>GetReferencedContentObjects( TArray&lt;UObject*&gt;&amp; Objects ) const</p> <p>SetLODParent(UPrimitiveComponent* InLODParent, float InParentDrawDistance)</p>"},{"location":"ue4guide/editor-extensions/utility-helpers/useful-editor-functions/","title":"Useful Editor Functions","text":""},{"location":"ue4guide/editor-extensions/utility-helpers/useful-editor-functions/#finding-editor-commands","title":"Finding Editor Commands","text":"<p>Look places to look for editor commands</p> <ul> <li>UnrealEngine.cpp: <code>UEngine::Exec()</code></li> <li>Look for functions in the form of <code>Handle{.}+Command(\u2026)</code> . Ex: <code>HandleMergeMeshCommand()</code></li> <li>Look for classes that end in <code>Utils</code> C++<pre><code>UEditorEngine::CopyPropertiesForUnrelatedObjects(OldActor,NewActor);\nGEditor-&gt;Exec(World, TEXT(\"MAP CHECKDEP NOCLEARLOG\"));\nTFindObjectReferencers\nSGenericDialogWidget::OpenDialog(NSLOCTEXT(\"ObjectTools\", \"ShowReferencers\", \"Show Referencers\"), SNew(STextBlock).Text(FText::FromString(Ar)));\n</code></pre></li> </ul>"},{"location":"ue4guide/editor-extensions/utility-helpers/useful-editor-functions/#blueprint","title":"Blueprint","text":""},{"location":"ue4guide/editor-extensions/utility-helpers/useful-editor-functions/#guard-script-execution-in-editor-while-running-blueprint-function","title":"Guard Script Execution in Editor while running blueprint function","text":"C++<pre><code>FEditorScriptExecutionGuard ScriptGuard;\n</code></pre>"},{"location":"ue4guide/editor-extensions/utility-helpers/useful-editor-functions/#send-error-message-to-blueprint-vm","title":"Send error message to blueprint VM","text":"C++<pre><code>FFrame::KismetExecutionMessage(*FString::Printf(TEXT(\"%s - Cannot map local player to unique net ID\"), FunctionContext), ELogVerbosity::Warning);\n</code></pre>"},{"location":"ue4guide/editor-extensions/utility-helpers/useful-editor-functions/#create-blueprint-exception","title":"Create Blueprint Exception","text":"C++<pre><code>FBlueprintExceptionInfo ExceptionInfo(\n  EBlueprintExceptionType::NonFatalError,\n  LTXT(\"Incompatible sequencer property track with component. Check configuration. These must match: sequencer bound property type, ProcAnimComponent.SupportedPropertyType.\")\n);\nFBlueprintCoreDelegates::ThrowScriptException(this, Stack, ExceptionInfo);\n</code></pre>"},{"location":"ue4guide/editor-extensions/utility-helpers/useful-editor-functions/#call-ufunction-with-parameters-using-reflection","title":"Call UFunction with parameters using reflection","text":"C++<pre><code>UObject::CallFunctionByNameWithArguments\n</code></pre>"},{"location":"ue4guide/editor-extensions/utility-helpers/useful-editor-functions/#get-bp-variable-metadata","title":"Get BP Variable metadata","text":"C++<pre><code>FBlueprintEditorUtils::GetBlueprintVariableMetaData()\nFBlueprintEditorUtils::SetBlueprintVariableMetaData()\n</code></pre>"},{"location":"ue4guide/editor-extensions/utility-helpers/useful-editor-functions/#register-blueprint-editor-property-variable-customization","title":"Register Blueprint Editor Property Variable Customization","text":"<ul> <li>Look at ControlRig for examples C++<pre><code>virtual void RegisterVariableCustomization(UStruct* InStruct, FOnGetVariableCustomizationInstance InOnGetVariableCustomization);\nvirtual TArray&lt;TSharedPtr&lt;IDetailCustomization&gt;&gt; CustomizeVariable(UStruct* InStruct, TSharedPtr&lt;IBlueprintEditor&gt; InBlueprintEditor);\nvirtual void RegisterSCSEditorCustomization(const FName&amp; InComponentName, FSCSEditorCustomizationBuilder InCustomizationBuilder);\n</code></pre></li> </ul>"},{"location":"ue4guide/editor-extensions/utility-helpers/useful-editor-functions/#actor-functions","title":"Actor Functions","text":""},{"location":"ue4guide/editor-extensions/utility-helpers/useful-editor-functions/#load-a-class-by-name","title":"Load A Class By Name","text":"C++<pre><code>UClass* Result = StaticLoadClass(UObject::StaticClass(), nullptr, *ClassName, nullptr, LOAD_None, nullptr);\n</code></pre> <p>From https://answers.unrealengine.com/questions/92651/get-blueprint-class-by-string-in-c.html</p>"},{"location":"ue4guide/editor-extensions/utility-helpers/useful-editor-functions/#find-a-class-by-name","title":"Find a class by name","text":"C++<pre><code>UClass* Result = FindObject&lt;UClass&gt;(ANY_PACKAGE, *ClassName)`\n</code></pre> <p>From https://answers.unrealengine.com/questions/92651/get-blueprint-class-by-string-in-c.html</p>"},{"location":"ue4guide/editor-extensions/utility-helpers/useful-editor-functions/#get-actor-for-blueprint-editor","title":"Get actor for blueprint editor","text":"C++<pre><code>if (UBlueprintGeneratedClass* GeneratedClass = Actor-&gt;GetTypedOuter&lt;UBlueprintGeneratedClass&gt;())\n{\n  return GeneratedClass-&gt;SimpleConstructionScript-&gt;GetComponentEditorActorInstance();\n}\n</code></pre>"},{"location":"ue4guide/editor-extensions/utility-helpers/useful-editor-functions/#get-pie-actor-counter-part-from-editor-world-actor-and-vice-versa","title":"Get PIE Actor counter-part from Editor World Actor and vice-versa","text":"C++<pre><code>EditorUtilities::GetEditorWorldCounterpartActor( AActor* Actor );\nEditorUtilities::GetSimWorldCounterpartActor( AActor* Actor );\n</code></pre>"},{"location":"ue4guide/editor-extensions/utility-helpers/useful-editor-functions/#editor-destroy-actor","title":"Editor Destroy Actor","text":"<ul> <li>Normal: <code>GWorld-&gt;DestroyActor(Instance...)</code></li> <li>In Editor: <code>GetWorld()-&gt;EditorDestroyActor(lcbActor, true)</code></li> </ul>"},{"location":"ue4guide/editor-extensions/utility-helpers/useful-editor-functions/#posteditchangeproperty","title":"PostEditChangeProperty","text":"<ul> <li>is the function that gets called when editor changes a property. Use it to perform things like position snapping after the user moves a component</li> <li><code>Property-&gt;GetNameCPP()</code> returns the property c++ variable name</li> <li>https://answers.unrealengine.com/questions/43138/allow-a-material-to-be-changed-from-the-editor-in.html</li> <li>https://docs.unrealengine.com/latest/INT/API/Runtime/Engine/GameFramework/AActor/PostEditChangeProperty/index.html</li> </ul>"},{"location":"ue4guide/editor-extensions/utility-helpers/useful-editor-functions/#demarcate-whether-an-actor-should-be-listed-or-hidden-in-scene-outliner-or-folder","title":"Demarcate whether an actor should be listed or hidden in scene outliner or folder","text":"C++<pre><code>AActor::bListedInSceneOutliner / bool IsListedInSceneOutliner()\n</code></pre>"},{"location":"ue4guide/editor-extensions/utility-helpers/useful-editor-functions/#disable-actor-label-from-being-editable","title":"Disable actor label from being editable","text":"C++<pre><code>AActor::bActorLabelEditable\n</code></pre>"},{"location":"ue4guide/editor-extensions/utility-helpers/useful-editor-functions/#actor-folder-path","title":"Actor folder path","text":"C++<pre><code>AActor::GetFolderPath() const;\nFActorFolders::Get().CreateFolder(InWorld, NewFolderName)\n</code></pre>"},{"location":"ue4guide/editor-extensions/utility-helpers/useful-editor-functions/#merging-skeletal-meshes","title":"Merging skeletal meshes","text":"C++<pre><code>cpp FSkeletalMeshMerge\n</code></pre>"},{"location":"ue4guide/editor-extensions/utility-helpers/useful-editor-functions/#notifications","title":"Notifications","text":""},{"location":"ue4guide/editor-extensions/utility-helpers/useful-editor-functions/#notification-message-warning-to-editor","title":"Notification Message Warning To Editor","text":"C++<pre><code>if (SubstituteNodes.Num() &gt; 0)\n{\n  // Display a notification to inform the user that the variable type was invalid (likely due to corruption), it should no longer appear in the list.\n  FNotificationInfo Info(NSLOCTEXT(\"EdGraphUtilities\", \"SubstituteNodesWarning\", \"Conflicting nodes substituted during paste!\"));\n  Info.ExpireDuration = 3.0f;\n  Info.bUseLargeFont = false;\n  Info.Image = FCoreStyle::Get().GetBrush(TEXT(\"MessageLog.Warning\"));\n  TSharedPtr&lt;SNotificationItem&gt; Notification = FSlateNotificationManager::Get().AddNotification(Info);\n  if (Notification.IsValid())\n  {\n    Notification-&gt;SetCompletionState(SNotificationItem::CS_None);\n  }\n}\n</code></pre>"},{"location":"ue4guide/editor-extensions/utility-helpers/useful-editor-functions/#notification-message-warning-to-blueprint-editor","title":"Notification Message Warning To Blueprint Editor","text":"C++<pre><code>UBlueprint::Message_Warn(const FString&amp; MessageToLog)`\n</code></pre>"},{"location":"ue4guide/editor-extensions/utility-helpers/useful-editor-functions/#how-to-log-output-editor-message-warningserrors","title":"How to log output editor message warnings/errors","text":"C++<pre><code>FMessageLog(\"PIE\").Warning(FText::Format(LOCTEXT(\"AttachToSelfRootWarning\", \"AttachTo: '{0}' root component cannot be attached to other components in the same actor. Aborting.\"),\n                          FText::FromString(GetPathName())));\nFMessageLog(\"MapCheck\").Warning()\n                      -&gt;AddToken(FUObjectToken::Create(this))\n                      -&gt;AddToken(FTextToken::Create(LOCTEXT( \"MapCheck_Message_DuplicateLevelInfo\", \"Duplicate level info\" ) ))\n                      -&gt;AddToken(FMapErrorToken::Create(FMapErrors::DuplicateLevelInfo));\n</code></pre>"},{"location":"ue4guide/editor-extensions/utility-helpers/useful-editor-functions/#maps","title":"Maps","text":""},{"location":"ue4guide/editor-extensions/utility-helpers/useful-editor-functions/#iterate-over-sublevels","title":"Iterate over sublevels","text":"C++<pre><code>TArray&lt;FSubLevelStatus&gt; GetSubLevelsStatus( UWorld* World )\n</code></pre>"},{"location":"ue4guide/editor-extensions/utility-helpers/useful-editor-functions/#check-for-unbuilt-lighting","title":"Check for unbuilt lighting","text":"C++<pre><code>/* Returns NumUncachedStaticLightingInteractions for this actor */\nconst int32 GetNumUncachedStaticLightingInteractions() const;\n</code></pre>"},{"location":"ue4guide/editor-extensions/utility-helpers/useful-editor-functions/#modify-editor-hooks-to-move-actor-translate-scale-or-rotate","title":"Modify Editor hooks to move actor (translate, scale, or rotate)","text":"C++<pre><code>// Called by ApplyDeltaToActor to perform an actor class-specific operation based on widget manipulation.\n// The default implementation is simply to translate the actor's location.\nvirtual void EditorApplyTranslation(const FVector&amp; DeltaTranslation, bool bAltDown, bool bShiftDown, bool bCtrlDown);\n\n// Called by ApplyDeltaToActor to perform an actor class-specific operation based on widget manipulation.\n// The default implementation is simply to modify the actor's rotation.\nvirtual void EditorApplyRotation(const FRotator&amp; DeltaRotation, bool bAltDown, bool bShiftDown, bool bCtrlDown);\n\n// Called by ApplyDeltaToActor to perform an actor class-specific operation based on widget manipulation.\n// The default implementation is simply to modify the actor's draw scale.\nvirtual void EditorApplyScale(const FVector&amp; DeltaScale, const FVector* PivotLocation, bool bAltDown, bool bShiftDown, bool bCtrlDown);\n\nGEditor-&gt;OnBeginObjectMovement().AddRaw( this, &amp;F3DTransformTrackEditor::OnPreTransformChanged );\nGEditor-&gt;OnEndObjectMovement().AddRaw( this, &amp;F3DTransformTrackEditor::OnTransformChanged );\n\n// Listen for the viewport's viewed through camera starts and stops movement\nGEditor-&gt;OnBeginCameraMovement().AddRaw( this, &amp;F3DTransformTrackEditor::OnPreTransformChanged );\nGEditor-&gt;OnEndCameraMovement().AddRaw( this, &amp;F3DTransformTrackEditor::OnTransformChanged );\n</code></pre>"},{"location":"ue4guide/editor-extensions/utility-helpers/useful-editor-functions/#fpackagename-contains-a-lot-of-utility-functions-for-managing-packages","title":"FPackageName contains a lot of utility functions for managing packages","text":"C++<pre><code>// Returns the path to the object referred to by the supplied export text path, excluding the class name.\n// @param InExportTextPath The export text path for an object. Takes on the form: ClassName'ObjectPath'\n// @return The path to the object referred to by the supplied export path.\nstatic FString ExportTextPathToObjectPath(const FString&amp; InExportTextPath);\n\n// Returns the name of the package referred to by the specified object path\nstatic FString ObjectPathToPackageName(const FString&amp; InObjectPath);\n\n// Returns the name of the object referred to by the specified object path\nstatic FString ObjectPathToObjectName(const FString&amp; InObjectPath);\n</code></pre>"},{"location":"ue4guide/editor-extensions/utility-helpers/useful-editor-functions/#load-object-with-path-name","title":"Load object with path name","text":"<ul> <li><code>LoadObject&lt;T&gt;()</code> is a helper for this C++<pre><code>Cast&lt;UClass&gt;(StaticLoadObject(UClass::StaticClass(), NULL, *GEngine-&gt;ParticleEventManagerClassPath, NULL, LOAD_NoWarn, NULL));\n</code></pre></li> <li>https://answers.unrealengine.com/questions/476579/loadobject-vs-staticloadobject.html</li> </ul>"},{"location":"ue4guide/editor-extensions/utility-helpers/useful-editor-functions/#hook-into-saving-and-useful-editor-delegates","title":"Hook Into saving and useful editor delegates","text":"<ul> <li>Look at editor delegates in <code>Editor.h:FEditorDelegates</code></li> </ul>"},{"location":"ue4guide/editor-extensions/utility-helpers/useful-editor-functions/#dump-debug-component-hierarchy","title":"Dump Debug Component Hierarchy","text":"C++<pre><code>AActor::DebugShowComponentHierarchy()\n</code></pre>"},{"location":"ue4guide/editor-extensions/utility-helpers/useful-editor-functions/#get-actor-instance-in-blueprint-component-editor-from-component","title":"Get actor instance in blueprint component editor from component","text":"C++<pre><code>if (AActor* Actor = ActorSequence-&gt;GetTypedOuter&lt;AActor&gt;())\n{\n  return Actor;\n}\n#if WITH_EDITOR\nelse if (UBlueprintGeneratedClass* GeneratedClass = ActorSequence-&gt;GetTypedOuter&lt;UBlueprintGeneratedClass&gt;())\n{\n  return GeneratedClass-&gt;SimpleConstructionScript-&gt;GetComponentEditorActorInstance();\n}\n#endif\n</code></pre> <ul> <li>Mapcheck Iterate over materials to check whether they read from SceneColor</li> </ul> C++<pre><code>ListSceneColorMaterials\nstatic FAutoConsoleCommand CmdListSceneColorMaterials();\n</code></pre>"},{"location":"ue4guide/editor-extensions/utility-helpers/useful-editor-functions/#assets","title":"Assets","text":""},{"location":"ue4guide/editor-extensions/utility-helpers/useful-editor-functions/#asset-registry-functions","title":"Asset Registry functions","text":"C++<pre><code>FAutoConsoleCommand GetByNameCommand;\nFAutoConsoleCommand GetByPathCommand;\nFAutoConsoleCommand GetByClassCommand;\nFAutoConsoleCommand GetByTagCommand;\nFAutoConsoleCommand GetDependenciesCommand;\nFAutoConsoleCommand GetReferencersCommand;\nFAutoConsoleCommand FindInvalidUAssetsCommand;\n</code></pre>"},{"location":"ue4guide/editor-extensions/utility-helpers/useful-editor-functions/#find-icon-for-class","title":"Find Icon for Class","text":"C++<pre><code>ActorIcon = FSlateIconFinder::FindIconForClass(ActorsValidForPossession[0]-&gt;GetClass())\n</code></pre>"},{"location":"ue4guide/editor-extensions/utility-helpers/useful-editor-functions/#create-mini-scene-outliner","title":"Create mini scene outliner","text":"C++<pre><code>SceneOutlinerModule.CreateSceneOutliner()\n</code></pre>"},{"location":"ue4guide/editor-extensions/utility-helpers/useful-editor-functions/#find-icon-for-class_1","title":"Find icon for class","text":"C++<pre><code>FSlateIconFinder::FindIconForClass(InSequence-&gt;GetClass())\n</code></pre>"},{"location":"ue4guide/editor-extensions/utility-helpers/useful-editor-functions/#fpropertypath-get-root-property","title":"FPropertyPath get root property","text":"C++<pre><code>UProperty* Property = KeyablePropertyPath.GetRootProperty().Property.Get()\n</code></pre>"},{"location":"ue4guide/editor-extensions/utility-helpers/useful-editor-functions/#descend-iterate-over-full-property-path","title":"Descend Iterate over full property path","text":"C++<pre><code>// from FSequencerObjectChangeListener::CanKeyProperty_Internal\nif (CanKeyPropertyParams.PropertyPath.GetNumProperties() == 0) { return false; }\n\n// iterate over the property path trying to find keyable properties\nInOutPropertyPath = FPropertyPath();\nfor (int32 Index = 0; Index &lt; CanKeyPropertyParams.PropertyPath.GetNumProperties(); ++Index)\n{\n  const FPropertyInfo&amp; PropertyInfo = CanKeyPropertyParams.PropertyPath.GetPropertyInfo(Index);\n\n  // Add this to our 'potentially truncated' path\n  InOutPropertyPath.AddProperty(PropertyInfo);\n  UProperty* Property = CanKeyPropertyParams.PropertyPath.GetPropertyInfo(Index).Property.Get();\n\n  if (Property)\n  {\n    const UStruct* PropertyContainer = CanKeyPropertyParams.FindPropertyContainer(Property);\n    if (PropertyContainer)\n    {\n      {\n        FAnimatedPropertyKey PropertyKey = FAnimatedPropertyKey::FromProperty(Property);\n        const FOnAnimatablePropertyChanged* DelegatePtr = FindPropertySetter(*PropertyContainer, PropertyKey, *Property);\n\n        if (DelegatePtr != nullptr)\n        {\n          InOutProperty = Property;\n          InOutDelegate = *DelegatePtr;\n          return true;\n        }\n      }\n\n      if (UObjectProperty* ObjectProperty = Cast&lt;UObjectProperty&gt;(Property))\n      {\n        UClass* ClassType = ObjectProperty-&gt;PropertyClass ? ObjectProperty-&gt;PropertyClass-&gt;GetSuperClass() : nullptr;\n        while (ClassType)\n        {\n          FAnimatedPropertyKey PropertyKey = FAnimatedPropertyKey::FromObjectType(ClassType);\n          const FOnAnimatablePropertyChanged* DelegatePtr = FindPropertySetter(*PropertyContainer, PropertyKey, *Property);\n\n          if (DelegatePtr != nullptr)\n          {\n            InOutProperty = Property;\n            InOutDelegate = *DelegatePtr;\n            return true;\n          }\n\n          ClassType = ClassType-&gt;GetSuperClass();\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"ue4guide/engine-programming/main-engine-loop/","title":"Guarded Main Loop","text":"C++<pre><code>FCoreDelegates::GetPreMainInitDelegate().Broadcast()\n\nFEngineLoop::PreInit: Sets up lots of init like project paths and parses commandline see if it needs to run commandlets, etc\n    FPlatformProcess::SetupGameThread()\n    Initialize cvars, apply rendering cvars to initialize\n    Sets up TaskGraph &amp; ThreadPools\n    FThreadStats::StartThread()\n    LoadPreInitModules\n    AppInit() - Initialize Application\n      (At end) FCoreDelegates::OnInit.Broadcast();\n    Setup MemoryAllocators and various\n      FPlatformMisc::PlatformInit(), FPlatformApplicationMisc::Init(), FPlatformMemory::Init();\n    InitGamePhys();\n    FSlateApplication::Create();\n    Compile shaders\n    InitializeRenderer()/RHIInit\n    LoadStartupCoreModules()\n    StartRenderingThread()\n    PlayMovie() or  FPlatformMisc::PlatformHandleSplashScreen()\n    LoadStartupModules()\n    if Running Commandlet\n      GEngine-&gt;Init() or GEditor-&gt;InitEditor()\n      FCoreDelegates::OnPostEngineInit.Broadcast();\n      IProjectManager:LoadModulesForProject(ELoadingPhase::PostEngineInit))\n      IPluginManager::LoadModulesForEnabledPlugins(ELoadingPhase::PostEngineInit))\n\nFEngineLoop.Init() (or call FEngineLoop.EditorInit() in editor mode which basically calls .Init())\n  GEngine-&gt;Init()\n    UBBUnrealEdEngine::Init()\n      UEditorEngine::InitEditor(InEngineLoop) C++ Symbols loaded.\n        UEditorEngine::Init(InEngineLoop=0x00007ff691bd2580)    C++ Symbols loaded.\n          UUnrealEdEngine::Init(InEngineLoop) C++ Symbols loaded.\n  UEngine::OnPostEngineInit.Broadcast();\n  FCoreDelegates::OnPostEngineInit.Broadcast();\n  IProjectManager:LoadModulesForProject(ELoadingPhase::PostEngineInit))\n  IPluginManager::LoadModulesForEnabledPlugins(ELoadingPhase::PostEngineInit))\n\n  GEngine-&gt;Start()\n    (For game engine Only) GameInstance-&gt;StartGameInstance()\n  GetMoviePlayer()-&gt;WaitForMovieToFinish();\n  GEngine-&gt;StartHardwareSurvey();\n  FCoreDelegates::StarvedGameLoop.BindStatic(&amp;GameLoopIsStarved);\n  FThreadHeartBeat::Get().Start();\n  FCoreDelegates::OnFEngineLoopInitComplete.Broadcast();\n\nFEngineLoop::Tick()\n  FThreadHeartBeat::Get().HeartBeat(true);\n  FGameThreadHitchHeartBeat::Get().FrameStart();\n  ActiveProfiler-&gt;FrameSync();\n\n  {\n    STAT_FrameTime\n\n    FCoreDelegates::OnBeginFrame.Broadcast();\n\n    ENQUEUE_BeginFrame {\n      FRealtimeGPUProfiler::BeginFrame/FD3DGPUProfiler.BeginFrame()\n        ::This is where Frame event is marked\n      FCoreDelegates::OnBeginFrameRT.Broadcast();\n    }\n  }\n\n  FStats::AdvanceFrame()\n  {\n      STAT_FrameTime\n\n      SlateApp.PollGameDeviceState();\n\n      GEngine-&gt;Tick()\n\n        - Foreach UWorld(), do the following:\n          TickWorldTravel() - Tick all travel &amp; pending NetGames (Seamless, server, client)\n          Uworld::Tick()\n            FWorldDelegates::OnWorldTickStart.Broadcast(TickType, DeltaSeconds) - Called with DeltaSeconds that's FApp::GetDeltaTime()\n\n            - Networking Recieve Logic\n              BroadcastTickDispatch() - Entry point where client receives all network requests. Calls NetDriver::TickDispatch(). Look at [Low Level Networking Overview] for details\n              BroadcastPostTickDispatch() - Mainly calls ReplicationDriver-&gt;PostTickDispatch();\n              TickNetClient() - Does checks if the socket is closed and if it was, throw a network failure error\n\n            - Logic To Calculate Clamped/Dilated GameTime\n              - AWorldSettings::GetEffectiveTimeDilation()\n              - AWorldSettings::FixupDeltaSeconds()\n\n            CurrentLatentActionManager.BeginFrame()\n            FWorldDelegates::OnWorldPreActorTick.Broadcast(this, TickType, DeltaSeconds) - Note: This gets dilated/clamped delta time\n\n            - Foreach Level in UWorld::LevelCollection\n              - FTiskTaskManagerInterface::StartFrame()\n                - Queues up all the TickFunctions according to their dependency graph &amp; TickGroup\n                - Ticking within each group is done by a dependency graph (AddTickPrerequisite) of tick functions of various objects during TickFunction registration\n                - This function might change what TickGroup something runs in according to the prerequisite tick function's tickgroup\n                - Actor Components do not necessarily tick after their owner Actor\n              - Calls RunTickGroup() for various tick groups which ticks component\n              - GetTimerManager().Tick(DeltaSeconds)\n              - FTickableGameObject::TickObjects() - ticks UObjects or anything that derives from FTickableGameObject (e.g. SceneCapturerCubes or LevelSequencePlayers )\n              - Update cameras and streaming volumes\n                - Foreach PlayerController: PlayerController-&gt;UpdateCameraManager(DeltaSeconds) or UpdateCameraPhotographyOnly();\n                - ProcessLevelStreamingVolumes()\n                - WorldComposition-&gt;UpdateStreamingState();\n              - RunTickGroup(TG_PostUpdateWork)\n              - RunTickGroup(TG_LastDemotable)\n              - FTickTaskManagerInterface::Get().EndFrame()\n\n            FWorldDelegates::OnWorldPostActorTick.Broadcast()\n\n            - Networking Send Logic\n              BroadcastTickFlush(RealDeltaSeconds)\n                - Tick all net drivers/flush networking/Replicate Actors\n                - Calls UNetDriver::TickFlush() where all the replication magic happens from client to everywhere else\n              BroadcastPostTickFlush(RealDeltaSeconds)\n                - Calls UNetDriver::PostTickFlush()\n                  - UOnlineEngineInterface::ClearVoicePackets()\n\n          USkyLightComponent::UpdateSkyCaptureContents()\n          UReflectionCaptureComponent::UpdateReflectionCaptureContents()\n          More Level Streaming Logic - i.e. BlockTillLevelStreamingCompleted()/UpdateLevelStreaming()/ConditionalCommoitMapChange()/etc -\n\n        FTickableGameObject::TickObjects(nullptr, LEVELTICK_All, false, DeltaSeconds) - This gets called again with nullptr signifying it gets run after UWorlds\n        MediaModule-&gt;TickPostEngine();\n        GameViewport-&gt;Tick()\n        RedrawViewports()\n        GetRendererModule().PostRenderAllViewports() - Some tasks can only be done once we finish all scenes/viewports\n        UpdateActiveAudioDevices(bIsAnyNonPreviewWorldUnpaused);\n        ENQUEUE_RENDER_COMMAND(TickRenderingTimer) { GRenderingRealtimeClock.Tick(DeltaSeconds); GetRendererModule().TickRenderTargetPool(); }\n\n\n      GShaderCompilingManager-&gt;ProcessAsyncResults()\n      GDistanceFieldAsyncQueue-&gt;ProcessAsyncTasks()\n      ProcessLocalPlayerSlateOperations()\n      FSlateApplication::Get().Tick()\n        TickPlatform/TickApplication/DrawWindows\n        ENQUEUE_SlateDrawWindowsCommand { DrawWindow_RenderThread }\n\n      RHITick( FApp::GetDeltaTime() ) - Update RHI\n      FrameEndSync.Sync() - Sync game and render thread. Either total sync or allowing one frame lag.\n\n\n      {\n        STAT_DeferredTickTime\n\n        FTicker::GetCoreTicker().Tick()\n          - Ticks all objects of type FTickerObjectBase. Ex: FHttpManager, FAvfMediaPlayer, FVoiceCapture, FSteamSocketSubsystem)\n          - This would be great place to add Objects that need to tick at the end of the frame that are engine/world agnostic\n          - Good possible place for our own UDP network ticking replication\n        FThreadManager::Get().Tick()\n        GEngine-&gt;TickDeferredCommands()\n      }\n\n      FCoreDelegates::OnEndFrame.Broadcast();\n\n      ENQUEUE_RENDER_COMMAND(EndFrame) {\n        EndFrameRenderThread()\n          FCoreDelegates::OnEndFrameRT.Broadcast();\n          GPU_STATS_ENDFRAME(RHICmdList) aka FRealtimeGPUProfiler::EndFrame()/FD3DGPUProfiler.EndFrame()\n          FPlatformMisc::EndNamedEvent();\n      }\n  }\n\nFEngineLoop::Exit()\n  GEngine::PreExit()\n  FSlateApplication::Shutdown();\n  AppPreExit()\n    FCoreDelegates::OnPreExit.Broadcast();\n    FCoreDelegates::OnExit.Broadcast();\n    Destroy ThreadPools (GLargeThreadPool,GThreadPool,GBackgroundPriorityThreadPool,GIOThreadPool)\n  TermGamePhys()\n  StopRenderingThread();\n  RHIExitAndStopRHIThread();\n  FModuleManager::Get().UnloadModulesAtShutdown()\n  DestroyMoviePlayer();\n  FThreadStats::StopThread();\n  FTaskGraphInterface::Shutdown();\n  IStreamingManager::Shutdown();\n  FPlatformMisc::ShutdownTaggedStorage();\n\nFEngineLoop::AppExit()\n  FPlatformApplicationMisc::TearDown();\n  FPlatformMisc::PlatformTearDown();\n  GLog-&gt;TearDown();\n</code></pre>"},{"location":"ue4guide/engine-programming/threading-model/","title":"Thread Pools","text":"<ul> <li> <p>STAT_FrameSyncTime =&gt; GT waiting on RT</p> </li> <li> <p>TaskGraph:</p> </li> <li>TaskGraphThreadBP<ul> <li>TPri_Lowest</li> </ul> </li> <li>TaskGraphThreadNP<ul> <li>TPri_BelowNormal: 8 (FPlatformMisc::NumberOfCores())</li> </ul> </li> <li> <p>TaskGraphThreadHP</p> <ul> <li>TPri_SlightlyBelowNormal</li> </ul> </li> <li> <p>StatsThread:</p> </li> <li> <p>FQueuedThreadPool:</p> </li> <li>GThreadPool:<ul> <li>TPri_SlightlyBelowNormal: 14</li> </ul> </li> <li>GBackgroundPriorityThreadPool:<ul> <li>TPri_Lowest: 2</li> </ul> </li> <li>GLargeThreadPool: (Editor Only for building lighting etc)<ul> <li>TPri_Normal: 14</li> </ul> </li> <li> <p>GIOThreadPool: FPlatformMisc::NumberOfIOWorkerThreadsToSpawn()</p> </li> <li> <p>GImgMediaThreadPoolSlow</p> </li> <li>FQueuedThreadPool::Allocate();</li> </ul>"},{"location":"ue4guide/engine-programming/threading-model/#details","title":"Details","text":""},{"location":"ue4guide/engine-programming/threading-model/#game-thread","title":"Game Thread","text":"<p>Reference From https://software.intel.com/en-us/articles/intel-software-engineers-assist-with-unreal-engine-419-optimizations</p> <ul> <li> <p>Game thread runs ahead of everything else</p> </li> <li> <p>Render thread is one frame behind the game thread.</p> </li> <li> <p>There's sometimes a separate RHIThread (on D3D12) that just submits to the driver</p> </li> <li> <p>Whatever is displayed thus runs two frames behind.</p> </li> <li> <p>Tick Groups: control order of ticking of objects but is not parallel</p> </li> </ul>"},{"location":"ue4guide/engine-programming/threading-model/#render-thread","title":"Render Thread","text":"<p>Render thread handles generating render commands to send to the GPU.</p> <p>Each frame is broken down into phases that are done one after another. Within each phase, the render thread can go wide to generate the command lists for that phase:</p> <ul> <li> <p>Depth prepass</p> </li> <li> <p>Base pass</p> </li> <li> <p>Translucency</p> </li> <li> <p>Velocity</p> </li> </ul> <p>Breaking the frame into chunks enables farming them into worker tasks with a parallel command list that can be filled up with the results of those tasks.</p> <p>Those get serialized back and used to generate draw calls.</p> <p>Engine doesn\u2019t join worker threads at the call site, but instead joins at sync points (end of phases), or at the point where they are used if fast enough.</p>"},{"location":"ue4guide/engine-programming/threading-model/#audio-thread","title":"Audio Thread","text":"<p>The main audio thread is analogous to the render thread, and acts as the interface for the lower-level mixing functions by performing the following tasks:</p> <ul> <li> <p>Evaluating sound queue graphs</p> </li> <li> <p>Building wave instances</p> </li> <li> <p>Handling attenuation, and so on</p> </li> </ul> <p>The audio thread is the thread that all user-exposed APIs (such as Blueprints and Gameplay) interact with. The decoding and source-worker tasks decode the audio information, and also perform processing such as spatialization and head-related transfer function (HRTF) unpacking. (HRTF is vital for players in VR, as the algorithms allow users to detect differences in sound location and distance.)</p> <p>The audio hardware thread is a single platform-dependent thread (for example, XAudio2* on Microsoft Windows*), which renders directly to the output hardware and consumes the mix. This isn\u2019t created or managed by Unreal Engine, but the optimization work will still impact thread usage.</p> <p>two types of tasks\u2014decoding and source worker.</p> <ul> <li> <p>Decoding: decodes a block of compressed source files. Uses double buffering to decode compressed audio as it's being played back.</p> </li> <li> <p>Source Worker: performs the actual source processing for sources, including sample rate conversion, spatialization (HRTF), and effects. The Source Worker is a configurable number in an INI file.</p> </li> <li> <p>If you have four workers and 32 sources, each will mix eight sources.</p> </li> <li> <p>The Source Worker is highly parallelizable, so you can increase the number if you have more processor power.</p> </li> </ul>"},{"location":"ue4guide/engine-programming/useful-classes/","title":"Useful classes","text":""},{"location":"ue4guide/engine-programming/useful-classes/#all-template-classes","title":"All Template Classes","text":"<p>https://docs.unrealengine.com/en-US/API/Runtime/Core/Templates/index.html</p>"},{"location":"ue4guide/engine-programming/useful-classes/#algorithms","title":"Algorithms","text":"<p>ParallelFor</p> <p>Threading Primitives:</p> <ul> <li>https://de45xmedrsdbp.cloudfront.net/Resources/files/Multithreading-1112727176.pdf</li> <li>https://conoscerelinux.org/wp-content/uploads/2019/11/Mischitelli-Slides-Nov2019.pdf</li> </ul> <p>Look at the Algo namespace</p> <p>Algo::Accumulate - equiv of fold</p> <p>Algo::Transform/TransformIf - equiv of map</p> <p>Invoke()</p> <p>KeyFrameAlgorithms::Scale</p> <p>KeyFrameAlgorithms::Translate</p>"},{"location":"ue4guide/engine-programming/useful-classes/#structs","title":"Structs","text":"<p><code>TNumericLimits&lt;&gt;</code></p> <p>TScopedCallback - Helper obj for batching callback requests</p> <p>TScopedPointer</p> <p>TValueOrError</p> <p>TAttribute - Used in Slate to allow a value to be set directly or through a function</p> <p>TOptional - Make a POD optional</p> <p>TInlineValue</p> <p>TFrameValue - This struct allows you to cache a value for a frame, and automatically invalidates</p> <p>TGuardValue - exception safe guard around saving/restoring a value</p> <p>TFuture</p> <p>TTypeCompatibleBytes</p> <p>TFunction &amp; TFunctionRef are ways to store/pass lambdas. TFunctionRef is fast but doesn't take ownership so you have to make sure the lambda being passed is still in scope when TFunctionRef gets called</p>"},{"location":"ue4guide/engine-programming/useful-classes/#useful-debugging-stack-trace-debugging-tooling","title":"Useful Debugging Stack trace debugging tooling","text":"<p>Stack trace/Call Stack/Stack Capturing + Symbol Debug ties :</p> <ul> <li> <p>FStackTracker</p> </li> <li> <p>FGenericPlatformStackWalk</p> </li> <li> <p>ProgramCounterToHumanReadableString</p> </li> <li> <p>SymbolInfoToHumanReadableString</p> </li> <li> <p>ProgramCounterToSymbolInfo</p> </li> <li> <p>CaptureStackBackTrace</p> </li> <li> <p>StackWalkAndDump</p> </li> <li> <p>FProgramCounterSymbolInfo</p> </li> <li> <p>FStackWalkModuleInfo</p> </li> </ul>"},{"location":"ue4guide/engine-programming/useful-classes/#useful-containers","title":"Useful Containers","text":"<p>TStaticHashTable</p> <p>TSet</p> <p>TMap</p> <p>TArray</p> <p>FBinaryHeap</p> <p>TArrayView: Statically sized view of an array. Allows functions to take either fixed C array or a TArray with arbittrary allocator when function doesn\u2019t add or remove elements. Treat TArrayView as a ref</p> C++<pre><code> * int32 SumAll(TArrayView&lt;const int32&gt; array)\n * {\n *     return Algo::Accumulate(array);\n * }\n *\n * could be called as:\n *     SumAll(MyTArray);\n *     SumAll(MyCArray);\n *     SumAll({1, 2, 3});\n *     SumAll(MakeArrayView(Ptr, Num));\n</code></pre> <p>THeap: Can make a Tarray heapified by calling Heapify()</p> <p>TBitArray</p> <p>TQueue</p> <p>TStaticArray: Statically sized array</p> <p>TStaticBitArray: Statically sized Bit Array</p> <p>TChunkedArray: Array using multiple allocations to avoid allocation failure due to fragmentation</p> <p>TCircularBuffer - Circular buffer, sized in power of 2</p> <p>TCircularQueue: Lock-free FIFO queue using circularArray. Be careful if you use this, read the code</p> <p>TLinkedList/TDoubleLinkedList</p> <p>TIntrusiveLinkedList</p> <p>TSparseArray: Dynamically sized array where elemnt indices arent necessarily contiguous. Memory allocated for all elements but allows for O(1) element removal</p>"},{"location":"ue4guide/engine-programming/useful-classes/#container-functions","title":"Container Functions:","text":"<p>GetSlack()()</p> <ul> <li>Can query existing remaining free capacity of container</li> </ul> <p>Empty(int32 n)</p> <ul> <li>Will set capacity of container to n; will also free up existing slack memory</li> </ul> <p>Reset(int32 n)</p> <ul> <li>Same as Empty() but won't release memory if newly requested capacity is smaller than existing capacity</li> </ul> <p>AddUninitialized/InsertUninitialized()</p> <ul> <li>Only adds objects, doesn't call constructor</li> </ul> <p>AddZeroed/InsertZeroed()</p> <ul> <li>Same as AddUninitialized() but zeroes out memory</li> </ul>"},{"location":"ue4guide/engine-programming/useful-typetraits/","title":"Unreal Template Type Traits","text":"C++<pre><code>template &lt;&gt; struct TIsWeakPointerType&lt;FLazyObjectPtr&gt; { enum { Value = TIsWeakPointerType&lt;TPersistentObjectPtr&lt;FUniqueObjectGuid&gt; &gt;::Value }; };\ntemplate &lt;&gt; struct THasGetTypeHash&lt;FLazyObjectPtr&gt; { enum { Value = THasGetTypeHash&lt;TPersistentObjectPtr&lt;FUniqueObjectGuid&gt; &gt;::Value }; };\n\nFor UStruct()\n/** type traits to cover the custom aspects of a script struct **/\ntemplate &lt;class CPPSTRUCT&gt;\nstruct TStructOpsTypeTraitsBase2\n{\n  enum\n  {\n    WithZeroConstructor            = false,                         // struct can be constructed as a valid object by filling its memory footprint with zeroes.\n    WithNoInitConstructor          = false,                         // struct has a constructor which takes an EForceInit parameter which will force the constructor to perform initialization, where the default constructor performs 'uninitialization'.\n    WithNoDestructor               = false,                         // struct will not have its destructor called when it is destroyed.\n    WithCopy                       = !TIsPODType&lt;CPPSTRUCT&gt;::Value, // struct can be copied via its copy assignment operator.\n    WithIdenticalViaEquality       = false,                         // struct can be compared via its operator==.  This should be mutually exclusive with WithIdentical.\n    WithIdentical                  = false,                         // struct can be compared via an Identical(const T* Other, uint32 PortFlags) function.  This should be mutually exclusive with WithIdenticalViaEquality.\n    WithExportTextItem             = false,                         // struct has an ExportTextItem function used to serialize its state into a string.\n    WithImportTextItem             = false,                         // struct has an ImportTextItem function used to deserialize a string into an object of that class.\n    WithAddStructReferencedObjects = false,                         // struct has an AddStructReferencedObjects function which allows it to add references to the garbage collector.\n    WithSerializer                 = false,                         // struct has a Serialize function for serializing its state to an FArchive.\n    WithPostSerialize              = false,                         // struct has a PostSerialize function which is called after it is serialized\n    WithNetSerializer              = false,                         // struct has a NetSerialize function for serializing its state to an FArchive used for network replication.\n    WithNetDeltaSerializer         = false,                         // struct has a NetDeltaSerialize function for serializing differences in state from a previous NetSerialize operation.\n    WithSerializeFromMismatchedTag = false,                         // struct has a SerializeFromMismatchedTag function for converting from other property tags.\n  };\n};\n\n/**\n * Tests if a type T is bitwise-constructible from a given argument type U.  That is, whether or not\n * the U can be memcpy'd in order to produce an instance of T, rather than having to go\n * via a constructor.\n *\n * Examples:\n * TIsBitwiseConstructible&lt;PODType,    PODType   &gt;::Value == true  // PODs can be trivially copied\n * TIsBitwiseConstructible&lt;const int*, int*      &gt;::Value == true  // a non-const Derived pointer is trivially copyable as a const Base pointer\n * TIsBitwiseConstructible&lt;int*,       const int*&gt;::Value == false // not legal the other way because it would be a const-correctness violation\n * TIsBitwiseConstructible&lt;int32,      uint32    &gt;::Value == true  // signed integers can be memcpy'd as unsigned integers\n * TIsBitwiseConstructible&lt;uint32,     int32     &gt;::Value == true  // and vice versa\n */\n\ntemplate &lt;&gt;\nstruct TIsBitwiseConstructible&lt;Name, TRangeBound&lt;ElementType&gt;&gt;\n{\n    enum { Value = true };\n};\n</code></pre>"},{"location":"ue4guide/engine-programming/uworld-creation-flow/","title":"UWorld Creation Flow","text":"C++<pre><code>UWorld::CreateWorld()\n  NewObject&lt;UWorld&gt;()\n    OnPostWorldCreation.Broadcast()\n  UWorld::InitializeNewWorld\n    - Create persistent level\n      PersistentLevel = NewObject&lt;ULevel&gt;(this, TEXT(\"PersistentLevel\"));\n      PersistentLevel-&gt;Initialize(FURL(nullptr));\n      PersistentLevel-&gt;Model = NewObject&lt;UModel&gt;(PersistentLevel);\n      PersistentLevel-&gt;Model-&gt;Initialize(nullptr, 1);\n      PersistentLevel-&gt;OwningWorld = this;\n\n    - Spawn World Settings\n      AWorldSettings* WorldSettings = SpawnActor&lt;AWorldSettings&gt;( GEngine-&gt;WorldSettingsClass, SpawnInfo );\n\t    PersistentLevel-&gt;SetWorldSettings(WorldSettings);\n\n    UWorld::InitWorld()\n      FWorldDelegates::OnPreWorldInitialization.Broadcast(this, IVS)\n      - Create various scenes/managers\n        - CreatePhysicsScene(WorldSettings)\n        - GetRendererModule().AllocateScene(this, bRequiresHitProxies, IVS.bCreateFXSystem, FeatureLevel)\n        - CreateAISystem()\n        - etc\n      FWorldDelegates::OnPostWorldInitialization.Broadcast(this, IVS)\n      PersistentLevel-&gt;InitializeRenderingResources()\n</code></pre>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-internals-1/","title":"Blueprint Compiler Internals I","text":"<p>Translated from this excellent series https://www.cnblogs.com/ghl_carmack/p/5995007.html</p>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-internals-1/#foreword","title":"Foreword","text":"<p>Blueprint-Visual Scripting System in Unreal Engine is a complete game scripting system. The idea is to use the node-based interface to create game playability elements in the Unreal Editor. Like some other common scripting languages, the use of blueprints is through object-oriented classes or objects defined in the engine. In using Unreal 4, you often encounter objects defined in blueprints, and such objects are often referred to directly as \"Blueprints.\" This article explains the compilation of the blueprint in the Unreal Engine from the code level (including the code of the editing part, the version used is UE4 4.13.0). This article assumes that you already have a clear understanding of the blueprint.</p>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-internals-1/#compiler-related-terms","title":"Compiler-related terms","text":"<p>A compiler is a basic part of a modern computer system. From a functional point of view, a compiler is a language translator that translates a program written in one language (called the source language) into another language (called the target language) ) Equivalent procedure.</p> <p>We only briefly introduce some terms here. If you want to learn compilation principles systematically, you need to find some professional books (such as Dragon Books, Tiger Books, Whale Books, etc., which can be found with search engines), and you need to practice In order to have a thorough and understanding of the principle of compilation.</p> <p>Generally, a compiler compiles a program into lexical analysis, syntax analysis, semantic analysis, intermediate code generation, code optimization, and target code generation.</p> <p></p>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-internals-1/#lexical-analysis","title":"Lexical analysis","text":"<p>Read the source program of the character stream from left to right and recognize (spell) words.</p> <ul> <li>Word --- token</li> <li>Reserved word --- reserved word</li> <li>Identifier --- identifier (user-defined name)</li> </ul> <p>Example:</p> <p></p>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-internals-1/#parsing","title":"Parsing","text":"<p>Function: Hierarchical analysis. According to the grammar rules of the source program, the word sequence of the source program is composed into grammatical phrases (represented as a syntax tree). The grammar analysis program obtains the source code in the form of tokens from the scanning program and completes the grammatical analysis that defines the program structure syntax analysis), which is similar to the syntax analysis of sentences in natural language. Parsing defines the structural elements of a program and their relationships. The results of parsing are usually expressed as a parse tree or a syntax tree.</p> <p></p> <p></p> <p>Example:</p> <p></p>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-internals-1/#semantic-analysis","title":"Semantic Analysis","text":"<p>The semantics of a program is its \"meaning\", which is different from syntax or structure. The semantics of a program determine its operation, but most programming languages \u200b\u200bhave features that are determined before execution and are not easily represented by syntax and analyzed by an analysis program. These features are called static semantics, and the task of a semantic analysis program is to analyze such semantics (the \"dynamic\" semantics of a program have characteristics that can only be determined when the program is executed. Since the compiler cannot execute the program, it It cannot be determined by the compiler). Typical static semantics of general programming languages \u200b\u200binclude declarations and type checking. Additional information (such as data types) calculated by the semantic analyzer is called attributes, and they are usually added to the tree as comments or \"decorations\" (attributes can also be added to the symbol table).</p> <ul> <li>Contextual relevance</li> <li>Type matching</li> <li>Type conversion</li> </ul> <p>Example:</p> <p></p> <p>Semantic analysis results:</p> <p></p>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-internals-1/#intermediate-code-generation","title":"Intermediate code generation","text":"<p>The internal (middle) representation of the source program:</p> <p>Ternary, quaternary, P-Code, C-Code, U-Code, bytecode</p> <p></p>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-internals-1/#code-optimization","title":"Code optimization","text":"<ul> <li>Intermediate code optimization</li> <li>Objective code optimization</li> </ul>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-internals-1/#object-code-generation","title":"Object code generation","text":"<p>Object code generation is the last stage of compilation. The object code generator transforms the parsed or optimized intermediate code into object code.</p> <p></p>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-internals-1/#symbol-table-management","title":"Symbol Table Management","text":"<p>The information in this data structure is related to identifiers: functions, variables, constants, and data types. The symbol table interacts with almost all stages of the compiler: scanners, parsers, or semantic analyzers that enter identifiers into tables; semantic analyzers will add data types and other information; optimization and code generation phases will also use The information provided by the symbol table selects the appropriate code.</p> <ul> <li>Record the name used in the source program</li> <li>Collect various attribute information of each name</li> </ul> <p>Type, scope, allocated storage information</p>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-internals-1/#error-handling","title":"Error handling","text":"<p>Check errors, report error messages, troubleshoot, and resume compilation.</p>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-internals-2/","title":"Blueprint Compiler Internals II","text":"<p>Translated from this excellent series https://www.cnblogs.com/ghl_carmack/p/5998693.html</p>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-internals-2/#unreal-4-compilation-related-terms-and-class-diagrams","title":"Unreal 4 compilation related terms and class diagrams","text":"<p>Blueprint compilation in Unreal Engine is somewhat different from regular program compilation, but the basic principles are the same. We take the ordinary class blueprint as an example, a class contains multiple graphs, and each graph can contain some subgraphs. A graph will contain many nodes (UEdGraphNode), and each node can contain several pins (UEdGraphPin) to connect two nodes. Nodes are divided into execution nodes and pure nodes (there are no execution pins on them). There is also a schema class (UEdGraphSchema) for verifying that the syntax is correct, etc. The class diagram looks like this:</p> <p></p>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-internals-2/#graph-uedgraph","title":"Graph (UEdGraph)","text":"<p>Many others in Unreal 4 are also implemented using graphs, so it also has many derived classes, such as UAIGraph, UAnimationGraph, UAnimationStateMachineGraph, UmaterialGraph, and so on. The class diagram looks like this:</p> <p></p>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-internals-2/#node-uedgraphnode","title":"Node (UEdGraphNode)","text":"<p>A directed acyclic graph is composed of countless nodes. This node is UEdGraphNode. Because the graph mentioned above supports graphs with various functions, there are also a variety of nodes. Below we only pick some Node type. Since our focus is on blueprint compilation, we focus on UK2Node, which is the base class for all blueprint nodes. The class diagram shows:</p> <p></p>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-internals-2/#pin-uedgraphpin","title":"Pin (UEdGraphPin)","text":"<p>Each node can have multiple nodes, input, output nodes, parameter pins, etc. These pins are used to record which pins are connected, type, default value, etc.</p>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-internals-2/#schema-uedgraphschema","title":"Schema (UEdGraphSchema)","text":"<p>It is used for syntax checking (seeing if two pins can be connected, trying to connect pins) and other functions. As all the above have multiple diagrams, multiple modes are required. The blueprint uses UEdGraphSchema_K2. Animation and UMG will have their own schema. The class diagram looks like this:</p> <p></p>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-internals-2/#fkismetcompilercontext","title":"FKismetCompilerContext","text":"<p>The class that actually executes the compilation work will generate a new instance each time it is compiled, which is used to store references to compiled classes and blueprints. The entire compilation process is divided into many steps, which are done in the Compile () function.</p> <p></p>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-internals-2/#fkismetfunctioncontext","title":"FKismetFunctionContext","text":"<p>Holds all the information for compiling a function, including references to related graphs (UEdGraph), properties, and generated functions.</p>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-internals-2/#fblueprintcompiledstatement","title":"FBlueprintCompiledStatement","text":"<p>Units work during compilation. Compile translates the node into a series of compiled statements, which are then compiled into bytecode by the compiler backend. For example, variable assignment, goto, call, etc.</p>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-internals-2/#fbpterminal","title":"FBPTerminal","text":"<p>An endpoint (literal, constant, or variable reference) in the graph. Each data pin is associated with one of them. You can generate your own items in NodeHandlingFunctor, which are used to store variables, intermediate results, etc.</p>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-internals-2/#fnodehandlingfunctor","title":"FNodeHandlingFunctor","text":"<p>A helper class for handling a class of node compilation, including functions for registering pin connections (RegisterNets ()), and generating compiled statements (FBlueprintCompiledStatement). Created by the UK2Node :: CreateNodeHandler () function. The following class diagram only lists a few HandlerFunctors.</p> <p></p>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-internals-2/#fblueprintcompilereinstancer","title":"FBlueprintCompileReinstancer","text":"<p>When the compilation is basically completed, because the class may have changed size or new attributes have been added or removed, the compiler needs to re-instantiate the object instance we just compiled the class, generate a new one, and then use CopyPropertiesForUnrelatedObjects ( ) Function to copy the data from the old instance to the new instance.</p>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-internals-2/#fkismetcompileroptions","title":"FKismetCompilerOptions","text":"<p>Compile options, which are used to specify compile-time settings, including compilation type (compile only Skeleton, compile all, generate bytecode only, generate cpp only), etc.</p>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-internals-2/#skeleton-class","title":"Skeleton Class","text":"<p>The Skeleton class, as its name is defined as a skeleton class, will be re-created when adding member variables or member functions (there is no code and automatically generated hidden variables in it)</p>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-internals-3/","title":"Blueprint Compiler Internals III","text":"<p>Translated from this excellent series https://www.cnblogs.com/ghl_carmack/p/6014655.html</p>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-internals-3/#compile","title":"Compile","text":"<p>The basic terms above have been introduced, let's enter into the blueprint compilation process analysis. The compilation process of the blueprint is in the FKismetCompilerContext :: Compile () function. It will take different branches depending on the type of compilation (the above-mentioned compilation options only compile Skeleton, only generate bytecode, only generate cpp code, etc.). We explain here with a full compilation. Here is the approximate flow, if you want to see the detailed flow, please refer to the flowchart and the code.</p>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-internals-3/#clear-class","title":"Clear class","text":"<p>The class is compiled in-place, which means that the same UBlueprintGeneratedClass will be cleaned up every time it is compiled and reused, so that the pointer to this class does not need to be fixed. CleanAndSanitizeClass () puts properties and functions in a trash class of a temporary package, and then clears all data from the class.</p>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-internals-3/#create-class-properties","title":"Create Class Properties","text":"<p>The CreateClassVariablesFromBlueprint () function traverses the Blueprint's NewVariables array. It also includes construction scripts, Timeline, etc. to find all the properties required by the class, and then creates UProperties.</p>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-internals-3/#create-function-list","title":"Create Function List","text":"<p>Functions are created by processing event graphs, regular function graphs, agents, and interfaces.</p> <p></p>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-internals-3/#processing-event-chart","title":"Processing event chart","text":"<p>The CreateAndProcessUberGraph () function is used to process the event graph. It copies all the event graphs into a large graph, at which point the node has the opportunity to do the expansion operation (expand, if it needs to). Then a function stub is created for each event node in the graph, and finally a FKismetFunctionContext is created for the current event graph, which is used to process the entire event graph as a function.</p>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-internals-3/#processing-function-chart","title":"Processing function chart","text":"<p>The processing of conventional function graphs is done through the ProcessOneFunctionGraph () function. It copies each node in the graph to another node. At this time, each node has the opportunity to expand, and finally it will be for each function. Create a FKismetFunctionContext for later compilation of the function.</p>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-internals-3/#precompiled-functions","title":"Precompiled functions","text":"<p>The function's precompilation is achieved by calling PrecompileFunction () for each FKismetFunctionContext. This function mainly performs the following operations:</p> <ol> <li>Determine execution order and calculate data dependencies.</li> <li>Remove those nodes that are not connected or have no data dependencies.</li> <li>For each remaining RegisterNets () function that runs each node processor (FNodeHandlingFunctor), it creates FBPTerminal for the value in the function.</li> <li>Create UFunction objects and related properties.</li> </ol> <p></p>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-internals-3/#binding-and-linking-classes","title":"Binding and Linking Classes","text":"<p>Now that the class has UFunctions and UProperties, it is now possible to bind and link classes. It contains a list of populated property chains, property sizes, and functions. At this time it is related to having a class header file, excluding the final markup, metadata, and CDO objects.</p>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-internals-3/#compile-function","title":"Compile function","text":"<p>Next, you need to use the AppendStatementForNode() function of the Compile() function of each node processor (FNodeHanlingFunctor) to add FKismetBlueprintStatement for this node. This function may also create FBPTerminal objects as long as they are only used locally. </p>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-internals-3/#post-compiled-functions","title":"Post-compiled functions","text":"<p>PostCompileFunction () is the last stage of compiling functions. It is called after all functions call CompileFunction (), mainly to repair cross-references.</p> <p></p>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-internals-3/#completed-compilation-class","title":"Completed compilation class","text":"<p>To finish compiling the class, the compiler will eventually set the class tag, inherit the tag and metadata from the parent class, and finally determine that everything is correct during the compilation process.</p>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-internals-3/#backend-generated-code","title":"Backend generated code","text":"<p>The compiler backend converts all statements in the function into code. There are currently two backends used:</p> <ol> <li>FKismetCompilerVMBackend converts FKismetCompilerStatement to bytecode and serializes it into a script array.</li> </ol> <p></p> <ol> <li>FKismetCppBackend generates C ++ code for debugging purposes only.</li> </ol>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-internals-3/#byte-code","title":"Byte code","text":"<p>The bytecode is defined in the EExprToken enumeration in Script.h. The definition is as follows. It can be seen that it has some general instructions, such as EX_Jump EX_JumpIfNot, etc., and some special instructions such as EX_DynamicCast EX_SetArray.</p> C++<pre><code>//\n// Evaluatable expression item types.\n//\nenum EExprToken\n{\n  // Variable references.\n  EX_LocalVariable        = 0x00,    // A local variable.\n  EX_InstanceVariable        = 0x01,    // An object variable.\n  EX_DefaultVariable        = 0x02, // Default variable for a class context.\n  //                        = 0x03,\n  EX_Return                = 0x04,    // Return from function.\n  //                        = 0x05,\n  EX_Jump                    = 0x06,    // Goto a local address in code.\n  EX_JumpIfNot            = 0x07,    // Goto if not expression.\n  //                        = 0x08,\n  EX_Assert                = 0x09,    // Assertion.\n  //                        = 0x0A,\n  EX_Nothing                = 0x0B,    // No operation.\n  //                        = 0x0C,\n  //                        = 0x0D,\n  //                        = 0x0E,\n  EX_Let                    = 0x0F,    // Assign an arbitrary size value to a variable.\n  //                        = 0x10,\n  //                        = 0x11,\n  EX_ClassContext            = 0x12,    // Class default object context.\n  EX_MetaCast = 0x13, // Metaclass cast.\n  EX_LetBool                = 0x14, // Let boolean variable.\n  EX_EndParmValue            = 0x15,    // end of default value for optional function parameter\n  EX_EndFunctionParms        = 0x16,    // End of function call parameters.\n  EX_Self                    = 0x17,    // Self object.\n  EX_Skip                    = 0x18,    // Skippable expression.\n  EX_Context                = 0x19,    // Call a function through an object context.\n  EX_Context_FailSilent    = 0x1A, // Call a function through an object context (can fail silently if the context is NULL; only generated for functions that don't have output or return values).\n  EX_VirtualFunction        = 0x1B,    // A function call with parameters.\n  EX_FinalFunction        = 0x1C,    // A prebound function call with parameters.\n  EX_IntConst                = 0x1D,    // Int constant.\n  EX_FloatConst            = 0x1E,    // Floating point constant.\n  EX_StringConst            = 0x1F,    // String constant.\n  EX_ObjectConst         = 0x20,    // An object constant.\n  EX_NameConst            = 0x21,    // A name constant.\n  EX_RotationConst        = 0x22,    // A rotation constant.\n  EX_VectorConst            = 0x23,    // A vector constant.\n  EX_ByteConst            = 0x24,    // A byte constant.\n  EX_IntZero                = 0x25,    // Zero.\n  EX_IntOne                = 0x26,    // One.\n  EX_True                    = 0x27,    // Bool True.\n  EX_False                = 0x28,    // Bool False.\n  EX_TextConst            = 0x29, // FText constant\n  EX_NoObject                = 0x2A,    // NoObject.\n  EX_TransformConst        = 0x2B, // A transform constant\n  EX_IntConstByte            = 0x2C,    // Int constant that requires 1 byte.\n  EX_NoInterface            = 0x2D, // A null interface (similar to EX_NoObject, but for interfaces)\n  EX_DynamicCast            = 0x2E,    // Safe dynamic class casting.\n  EX_StructConst            = 0x2F, // An arbitrary UStruct constant\n  EX_EndStructConst        = 0x30, // End of UStruct constant\n  EX_SetArray                = 0x31, // Set the value of arbitrary array\n  EX_EndArray                = 0x32,\n  //                        = 0x33,\n  EX_UnicodeStringConst = 0x34, // Unicode string constant.\n  EX_Int64Const            = 0x35,    // 64-bit integer constant.\n  EX_UInt64Const            = 0x36,    // 64-bit unsigned integer constant.\n  //                        = 0x37,\n  EX_PrimitiveCast        = 0x38,    // A casting operator for primitives which reads the type as the subsequent byte\n  //                        = 0x39,\n  //                        = 0x3A,\n  //                        = 0x3B,\n  //                        = 0x3C,\n  //                        = 0x3D,\n  //                        = 0x3E,\n  //                        = 0x3F,\n  //                        = 0x40,\n  //                        = 0x41,\n  EX_StructMemberContext    = 0x42, // Context expression to address a property within a struct\n  EX_LetMulticastDelegate    = 0x43, // Assignment to a multi-cast delegate\n  EX_LetDelegate            = 0x44, // Assignment to a delegate\n  //                        = 0x45,\n  //                        = 0x46, // CST_ObjectToInterface\n  //                        = 0x47, // CST_ObjectToBool\n  EX_LocalOutVariable        = 0x48, // local out (pass by reference) function parameter\n  //                        = 0x49, // CST_InterfaceToBool\n  EX_DeprecatedOp4A        = 0x4A,\n  EX_InstanceDelegate        = 0x4B,    // const reference to a delegate or normal function object\n  EX_PushExecutionFlow    = 0x4C, // push an address on to the execution flow stack for future execution when a EX_PopExecutionFlow is executed. Execution continues on normally and doesn't change to the pushed address.\n  EX_PopExecutionFlow        = 0x4D, // continue execution at the last address previously pushed onto the execution flow stack.\n  EX_ComputedJump            = 0x4E,    // Goto a local address in code, specified by an integer value.\n  EX_PopExecutionFlowIfNot = 0x4F, // continue execution at the last address previously pushed onto the execution flow stack, if the condition is not true.\n  EX_Breakpoint            = 0x50, // Breakpoint. Only observed in the editor, otherwise it behaves like EX_Nothing.\n  EX_InterfaceContext        = 0x51,    // Call a function through a native interface variable\n  EX_ObjToInterfaceCast = 0x52,    // Converting an object reference to native interface variable\n  EX_EndOfScript            = 0x53, // Last byte in script code\n  EX_CrossInterfaceCast    = 0x54, // Converting an interface variable reference to native interface variable\n  EX_InterfaceToObjCast = 0x55, // Converting an interface variable reference to an object\n  //                        = 0x56,\n  //                        = 0x57,\n  //                        = 0x58,\n  //                        = 0x59,\n  EX_WireTracepoint        = 0x5A, // Trace point. Only observed in the editor, otherwise it behaves like EX_Nothing.\n  EX_SkipOffsetConst        = 0x5B, // A CodeSizeSkipOffset constant\n  EX_AddMulticastDelegate = 0x5C, // Adds a delegate to a multicast delegate's targets\n  EX_ClearMulticastDelegate = 0x5D, // Clears all delegates in a multicast target\n  EX_Tracepoint            = 0x5E, // Trace point. Only observed in the editor, otherwise it behaves like EX_Nothing.\n  EX_LetObj                = 0x5F,    // assign to any object ref pointer\n  EX_LetWeakObjPtr        = 0x60, // assign to a weak object pointer\n  EX_BindDelegate            = 0x61, // bind object and name to delegate\n  EX_RemoveMulticastDelegate = 0x62, // Remove a delegate from a multicast delegate's targets\n  EX_CallMulticastDelegate = 0x63, // Call multicast delegate\n  EX_LetValueOnPersistentFrame = 0x64,\n  EX_ArrayConst            = 0x65,\n  EX_EndArrayConst        = 0x66,\n  EX_AssetConst            = 0x67,\n  EX_CallMath                = 0x68, // static pure function from on local call space\n  EX_SwitchValue            = 0x69,\n  EX_InstrumentationEvent    = 0x6A, // Instrumentation event\n  EX_ArrayGetByRef        = 0x6B,\n  EX_Max                    = 0x100,\n};\n</code></pre>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-internals-3/#copy-class-default-object-cdo-properties","title":"Copy Class Default Object (CDO) Properties","text":"<p>Using a special function CopyPropertiesForUnrelatedObjects (), the compiler copies the values \u200b\u200bfrom the old CDO of the class to the new CDO. Attributes are copied via tagged serialization. As long as the names are consistent, they should be copied correctly. The components in the CDO are re-instantiated.</p>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-internals-3/#reinstantiation","title":"Reinstantiation","text":"<p>Because the class may have changed size or attributes have been added or removed, the compiler needs to re-instantiate all objects instantiated by the class. It uses TOjbectIterator to find instances of the class, creates a new one, and uses the CopyPropertiesForUnrelatedObjects () function to copy the data from the old instance to the new instance. Refer to the FBlueprintCompileReinstancer class for details.</p>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-internals-3/#example","title":"Example","text":"<p>I created a new Blueprint in the blueprint that inherits from Actor. It has a variable StringTest and implements a BeginPlay event and a FunctionTest () function. This function has a local variable LocalStringTest.</p> <p>The following are the definitions of BeginPlay and FunctionTest:</p> <p></p> <p></p> <p>In order to see the compilation results, we need to modify the setting in BaseEngine.ini to set CompileDisplaysBinaryBackend to true. If you want to display the generated cpp file, you can also set CompileDisplaysTextBackend to true. Note that you need to restart the editor. The result obtained after clicking compile in OutputLog is shown in the following code:</p> Text Only<pre><code>BlueprintLog: New page: Compile NewBlueprint\n\nLogK2Compiler: [function ExecuteUbergraph_NewBlueprint]:\n\nLabel_0x0:\n\n$4E: Computed Jump, offset specified by expression:\n\n$0: Local variable named EntryPoint\n\nLabel_0xA:\n\n$5E: .. debug site ..\n\nLabel_0xB:\n\n$5A: .. wire debug site ..\n\nLabel_0xC:\n\n$5E: .. debug site ..\n\nLabel_0xD:\n\n$1B: Virtual Function named FunctionTest\n\n$0: Local variable named CallFunc_FunctionTest_OutNewString\n\n$16: EX_EndFunctionParms\n\nLabel_0x24:\n\n$5A: .. wire debug site ..\n\nLabel_0x25:\n\n$5E: .. debug site ..\n\nLabel_0x26:\n\n$19: Context\n\nObjectExpression:\n\n$20: EX_ObjectConst (000000003022A100:KismetSystemLibrary /Script/Engine.Default__KismetSystemLibrary)\n\nSkip Bytes: 0x3D\n\nR-Value Property: (null)\n\nContextExpression:\n\n$1C: Final Function (stack node KismetSystemLibrary::PrintString)\n\n$17: EX_Self\n\n$0: Local variable named CallFunc_FunctionTest_OutNewString\n\n$28: EX_False\n\n$27: EX_True\n\n$2F: literal struct LinearColor (serialized size: 16)\n\n$1E: literal float 0.000000\n\n$1E: literal float 0.660000\n\n$1E: literal float 1.000000\n\n$1E: literal float 1.000000\n\n$30: EX_EndStructConst\n\n$1E: literal float 2.000000\n\n$16: EX_EndFunctionParms\n\nLabel_0x79:\n\n$5A: .. wire debug site ..\n\nLabel_0x7A:\n\n$4: Return expression\n\n$B: EX_Nothing\n\nLabel_0x7C:\n\n$53: EX_EndOfScript\n\nLogK2Compiler: [function ReceiveBeginPlay]:\n\nLabel_0x0:\n\n$1B: Virtual Function named ExecuteUbergraph_NewBlueprint\n\n$1D: literal int32 10\n\n$16: EX_EndFunctionParms\n\nLabel_0x13:\n\n$4: Return expression\n\n$B: EX_Nothing\n\nLabel_0x15:\n\n$53: EX_EndOfScript\n\nLogK2Compiler: [function UserConstructionScript]:\n\nLabel_0x0:\n\n$5E: .. debug site ..\n\nLabel_0x1:\n\n$5A: .. wire debug site ..\n\nLabel_0x2:\n\n$4: Return expression\n\n$B: EX_Nothing\n\nLabel_0x4:\n\n$53: EX_EndOfScript\n\nLogK2Compiler: [function FunctionTest]:\n\nLabel_0x0:\n\n$5E: .. debug site ..\n\nLabel_0x1:\n\n$5A: .. wire debug site ..\n\nLabel_0x2:\n\n$5E: .. debug site ..\n\nLabel_0x3:\n\n$F: Let (Variable = Expression)\n\nVariable:\n\n$0: Local variable named LocalStringTest\n\nExpression:\n\n$1F: literal ansi string \"Bluepirnt Test: \"\n\nLabel_0x27:\n\n$5A: .. wire debug site ..\n\nLabel_0x28:\n\n$F: Let (Variable = Expression)\n\nVariable:\n\n$0: Local variable named CallFunc_Concat_StrStr_ReturnValue\n\nExpression:\n\n$19: Context\n\nObjectExpression:\n\n$20: EX_ObjectConst (0000000030229B00:KismetStringLibrary /Script/Engine.Default__KismetStringLibrary)\n\nSkip Bytes: 0x1C\n\nR-Value Property: CallFunc_Concat_StrStr_ReturnValue\n\nContextExpression:\n\n$1C: Final Function (stack node KismetStringLibrary::Concat_StrStr)\n\n$0: Local variable named LocalStringTest\n\n$1: Instance variable named StringTest\n\n$16: EX_EndFunctionParms\n\nLabel_0x6C:\n\n$5E: .. debug site ..\n\nLabel_0x6D:\n\n$F: Let (Variable = Expression)\n\nVariable:\n\n$48: Local out variable named OutNewString\n\nExpression:\n\n$0: Local variable named CallFunc_Concat_StrStr_ReturnValue\n\nLabel_0x88:\n\n$5A: .. wire debug site ..\n\nLabel_0x89:\n\n$4: Return expression\n\n$B: EX_Nothing\n\nLabel_0x8B:\n\n$53: EX_EndOfScript\n</code></pre> <p>One thing that needs to be explained is that we can see the event ReceiveBeginPlay. As we said above, it doesn't do anything specifically. The instruction of the entire function is put into function ExecuteUbergraph_NewBlueprint, and what it does is call Virtual Function named ExecuteUbergraph_NewBlueprint and passed an int32 value. This value is the offset value at ExecuteUbergraph_NewBlueprint. At the beginning of ExecuteUbergraph_NewBlueprint, an unconditional jump is performed to the corresponding location for program execution based on the passed in value.</p>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-internals-3/#summary","title":"Summary","text":"<p>At this point, we have a basic understanding of the blueprint compilation process, and roughly explained how the blueprint is finally compiled from the results of our editing. In the next article, we will introduce the implementation of the blueprint virtual machine in Unreal 4. Please look forward to. Of course, due to my limited ability to understand, there are inevitably errors in it. Please correct me if the reader finds it.</p> <p>References:</p> <ul> <li>https://docs.unrealengine.com/latest/INT/Engine/Blueprints/TechnicalGuide/Compiler/index.html</li> <li>http://www.cnblogs.com/ghl_carmack/p/5804737.html</li> <li>Scripting Language Primer Game Scripting Mastery</li> <li>http://blog.csdn.net/tangl_99/article/details/5600</li> </ul>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-overview/","title":"Blueprint Compilation","text":""},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-overview/#terminology","title":"Terminology","text":"<ul> <li>FKismetCompilerContext: The class that does the work of compilation.  A new instance is spawned for each compile.  Stores reference to the class being compiled, the blueprint, etc.</li> <li>FKismetFunctionContext: Holds the information for compiling a single function, like a reference to the associated graph, properties, and generated UFunction</li> <li>FNodeHandlingFunctor: A helper class that handles processing one class of node in the compiler (singleton!).  Contains functions for registering pin connections, and generating Kismet compiled statements</li> <li>FKismetCompiledStatement: Unit of work in the Kismet compiler.  The compiler translates nodes into a set of compiled statements, which the backend translates into bytecode operations   Examples:  Variable assignment, Goto, Call</li> <li>FKismetTerm: A terminal in the graph (literal, const, or variable reference).  Each data pin connection is associated with one of these!   You can also make your own in NodeHandlingFunctors for scratch variables, intermediate results, etc.</li> <li>Data-Only Blueprints are not recompiled when loaded</li> <li>Two Classes</li> <li>Generated Class:  The class used by instances of the blueprint.  Contains all the UProperties and UFunctions defined by the blueprint, as well as generated script bytecode</li> <li>Skeleton Generated Class:  A minimal version of the generated class, which contains all the UProperties and UFunctions defined by the blueprint, but with no script bytecode</li> <li>Why Two Classes?</li> <li>The Skeleton Generated Class (SGC) is used internally by the blueprint editor Serves as a \u201cclass header,\u201d which the editor uses to create editing UI</li> <li>Kept up-to-date as you edit the blueprint via a quick compile path (<code>MarkBlueprintAsStructurallyModified()</code>)</li> <li>Never used or referenced outside of the blueprint itself</li> <li>Currently serialized, but will soon become transient</li> </ul>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-overview/#compilation-process","title":"Compilation Process","text":"<ol> <li> <p>Clean the Class    - <code>CleanAndSanitizeClass()</code>: we move the properties and functions off the class and into a trash class in the transient package, and clear any data on the class</p> </li> <li> <p>Create Class Properties    - Iterates over the blueprint\u2019s NewVariables array, as well as some other places (construction scripts, etc) to find all of the UProperties needed by the class    - Creates UProperties on the Uclass\u2019s scope in the function <code>CreateClassVariablesFromBlueprint()</code></p> </li> <li> <p>Create Function List    - Process the event graphs</p> <ul> <li>CreateAndProcessUberGraph()</li> <li>Copies all event graphs into one big graph</li> <li>Nodes are given a chance to expand</li> <li>For each Event node in the graph, a function stub is created<ul> <li>FKismetFunctionContext is created</li> </ul> </li> <li>Process regular function graphs</li> <li>ProcessOneFunctionGraph()</li> <li>Graph is duplicated to a temporary graph</li> <li>Nodes are given a chance to expand</li> <li>FKismetFunctionContext is created</li> <li>After all FKismetFunctionContexts are created, PrecompileFunctions():</li> <li>Schedules execution and calculates data dependencies</li> <li>Prunes any nodes that are unscheduled or not a data dependency</li> <li>Runs the node handler\u2019s RegisterNets() on each remaining node</li> <li>This creates the FKismetTerms for values within the function</li> <li>Creates the UFunction and associated UProperties</li> </ul> </li> <li> <p>Bind and Link Class    - Now that we know all of our UProperties and UFunctions, we can bind and link the class</p> <ul> <li>Fills out the property chain, the property size, function map, etc</li> <li>At this point, we essentially have a \u201cclass header,\u201d just missing final flags and metadata, as well as a CDO</li> </ul> </li> <li> <p>Compile Functions    - Compiling consists of transforming all the nodes that are left in the graph into FKismetCompiledStatments    - Accomplished through the node handler\u2019s Compile() function, using AppendStatementForNode()    - Can create FKismetTerms in the compile function, as long as they are only used locally (intermediate results)</p> </li> <li> <p>Finish Compiling Class    - Finalizes the class flags    - Propagates flags and metadata from the parent class    - Performs a few final checks to make sure everything went alright in the compile</p> </li> <li> <p>Backends Emit Generated Code    - Backends convert the collection of FKismetCompiledStatments from each function context into code    - We have two backends in use:    - FKismetCompilerVMBackend</p> <ul> <li>Converts FKCS to UnrealScript VM code</li> <li>Results of this are serialized into the function\u2019s script</li> <li>FKismetCppBackend</li> <li>Emits \u201cC++-like\u201d code for debugging purposes</li> <li>May eventually transform into a legitimate backend, if extra speed is needed</li> </ul> </li> <li> <p>Copy Class Default Object Properties    - Using a special function, CopyPropertiesForUnrelatedObjects(),  or CPFUO for short, we copy the values from the old CDO of the class into the new CDO</p> <ul> <li>Properties are copied via tagged serialization, so as long as the names are consistent, they should properly be transferred</li> <li>Components of the CDO are reinstanced, and fixed up appropriately at this stage</li> <li>Currently, the SkeletonGeneratedClass has the authoratative copy of data, which is propagated to the GeneratedClass</li> </ul> </li> <li> <p>Reinstancing    - Since the class may have changed size and properties may have been added or removed, we need to reinstance all objects with the class we just compiled    - Use a <code>TObjectIterator</code> to find all instances of the class, spawn a new one, and then CPFUO to copy from the old instance to the new one</p> <ul> <li>For details, see the <code>FBlueprintCompileReinstancer</code></li> </ul> </li> </ol>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-overview/#extension-points","title":"Extension Points","text":"<ul> <li>Compiler Expansion</li> <li>Very similar to macros, but done internally to the compiler<ul> <li>Take the original node, and expand it into a set of new</li> <li>Move connections from the original node to the new</li> </ul> </li> <li>Takes place after the graphs have been copied to their transient versions, but before nodes have all been processed<ul> <li>Allows new entry points to be created, for event graph nodes</li> </ul> </li> <li>Useful when you need some dynamic behavior in your delegates<ul> <li>Variable number of inputs or outputs</li> <li>Reliance on some data</li> </ul> </li> <li>Check out <code>FKismetCompilerContext::ExpansionStep()</code> for examples of its use</li> <li>In general, the original node is disconnected from everything after expansion, and gets culled<ul> <li>This means you don\u2019t need to implement a custom FNodeHandlingFunctor class for expanded nodes</li> </ul> </li> <li>Can expand conditionally based on if the current compile is a skeleton-only compile</li> <li> <p>We use this internally for many node types</p> <ul> <li>Blueprint spawning nodes</li> <li>Timeline nodes</li> <li>Delegate assignment</li> <li>Macros actually get expanded in this step as well!</li> </ul> </li> <li> <p>Compiler Generated Code</p> </li> <li>Most advanced way to create new functionality in Kismet</li> <li>Because of the complexity, we use it sparingly</li> <li>Requires implementation of a custom <code>FNodeHandlingFunctor</code> class<ul> <li><code>RegisterNets()</code> gets called once per node, and calls <code>RegisterNet()</code> on each pin that needs it (data pins)</li> <li><code>Compile()</code> is called once per node, and creates a list of <code>FKismetCompiledStatements</code>, which are then translated to code by the backends</li> </ul> </li> <li> <p>For examples, see the custom FNodeHandlingFunctor classes in KismetCompiler.cpp</p> </li> <li> <p>Debugging Tools</p> </li> <li><code>CompileDisplaysTextBackend</code> \u2013 Shows a human-readable, C++-like output of what the code generator is doing</li> <li><code>CompileDisplaysBinaryBackend</code> \u2013 Shows the actual disassembed USVM code</li> </ul>"},{"location":"ue4guide/engine-programming/blueprints/bp-compiler-overview/#useful-links","title":"Useful Links","text":"<p>Game Connection 2012 Slides - Kismet Architecture and Extension https://docs.unrealengine.com/latest/INT/Engine/Blueprints/TechnicalGuide/Compiler/index.html#backendemitsgeneratedcode</p>"},{"location":"ue4guide/engine-programming/blueprints/bp-virtualmachine-overview/","title":"Anatomy of the Unreal 4 blueprint virtual machine","text":"<p>Translated from this excellent series https://www.cnblogs.com/ghl_carmack/p/6060383.html</p>"},{"location":"ue4guide/engine-programming/blueprints/bp-virtualmachine-overview/#foreword","title":"Foreword","text":"<p>Here, we intend to give a general explanation of the implementation of the blueprint virtual machine in Unreal 4. If you have a clear understanding of other scripting language implementations, it will be much easier to understand. We will first briefly introduce related terms , And then explain the implementation of the blueprint virtual machine.</p>"},{"location":"ue4guide/engine-programming/blueprints/bp-virtualmachine-overview/#terminology","title":"Terminology","text":"<p>Programming languages \u200b\u200bare generally divided into compiled languages \u200b\u200band interpreted languages.</p>"},{"location":"ue4guide/engine-programming/blueprints/bp-virtualmachine-overview/#compiled-language","title":"Compiled Language","text":"<p>Before the program is executed, a special compilation process is needed to compile the program into a file in machine language. It does not need to be re-translated at runtime, and the compiled results are used directly. Program execution efficiency is high, it depends on the compiler, and cross-platform performance is poor. Such as C, C ++, Delphi, etc.</p>"},{"location":"ue4guide/engine-programming/blueprints/bp-virtualmachine-overview/#interpreted-language","title":"Interpreted Language","text":"<p>The program is written without precompilation, and the program code is stored as text. When publishing the program, it seemed that the compilation process was saved. However, when running a program, the interpreted language must be interpreted before running.</p> <p>However, whether Java, C #, etc. are interpreted languages \u200b\u200bis controversial, because their mainstream implementations are not directly interpreted and executed, but are also compiled into bytecode and then run on virtual machines such as jvm.</p> <p>The implementation of the blueprint in UE4 is more like the implementation of Lua. It cannot be run independently, but as an extended script embedded in the host language. Lua can be directly interpreted and executed, or it can be compiled into bytecode and saved to disk. On the next call, you can directly load the compiled bytecode for execution.</p>"},{"location":"ue4guide/engine-programming/blueprints/bp-virtualmachine-overview/#what-is-a-virtual-machine","title":"What is a virtual machine","text":"<p>Virtual machines were originally defined by Popek [a] and Goldberg as valid, independent copies of real machines. Currently includes virtual machines that have nothing to do with any real machine. Virtual machines are divided into two categories based on their use and relevance to direct machines. System virtual machines (such as VirtualBox) provide a complete system platform that can run a complete operating system. In contrast, a program virtual machine (such as the Java JVM) is designed to run a single computer program, which means that it supports a single process. An essential feature of a virtual machine is that the software running on the virtual machine is limited to the resources provided by the virtual machine-it cannot exceed the virtual world.</p> <p>Here we are mainly concerned with the program virtual machine. Since the VM is called a \"machine\", the input is generally considered to be an instruction sequence that meets an instruction set architecture (ISA). If executed, the output is the execution result of the program, which is the VM. The source and target ISA can be the same, this is the so-called same-ISA VM.</p>"},{"location":"ue4guide/engine-programming/blueprints/bp-virtualmachine-overview/#classification","title":"Classification","text":"<p>Virtual machine implementation is divided into register-based virtual machines and stack-based virtual machines.</p>"},{"location":"ue4guide/engine-programming/blueprints/bp-virtualmachine-overview/#three-address-instruction","title":"Three-address instruction","text":"<p><code>a = b + c;</code></p> <p>If you turn it into this form:</p> <p><code>add a, b, c</code></p> <p>That looks more like machine instructions, right? This is the so-called \"3-address instruction\" and its general form is:</p> <p><code>op dest, src1, src2</code></p> <p>Many operations are binary operations + assignments. The three-address instruction can specify exactly two sources and one target, and can flexibly support the combination of binary operations and assignments. The main instruction set of the ARM processor is in the form of three addresses.</p>"},{"location":"ue4guide/engine-programming/blueprints/bp-virtualmachine-overview/#two-address-instructions","title":"Two address instructions","text":"<p><code>a + = b;</code></p> <p>become:</p> <p><code>add a, b</code></p> <p>This is the so-called \"two-address instruction\", and its general form is:</p> <p><code>op dest, src</code></p> <p>To support binary operations, it can only target one of the sources at the same time. After the execution of add a, b above, the original value of a is destroyed, while the value of b remains unchanged. x86 series processors are in the form of two addresses.</p>"},{"location":"ue4guide/engine-programming/blueprints/bp-virtualmachine-overview/#one-address-instruction","title":"One address instruction","text":"<p>Obviously, the instruction set can be any \"n address\", n is a natural number. So what is the instruction set in the form of an address?</p> <p>Imagine a sequence of instructions like this:</p> Text Only<pre><code>add 5\nsub 3\n</code></pre> <p>This only specifies the source of the operation, what is the target? In general, the goal of this kind of operation is a special register called an \"accumulator\". All operations are completed by updating the state of the accumulator. Then the two instructions above are written in C:</p> <p>C code Favorite code</p> Text Only<pre><code>acc + = 5;\nacc-= 3;\n</code></pre> <p>It's just that acc is the \"hidden\" target. Accumulator-based architectures are relatively rare these days, and have prospered on very old machines for some time.</p>"},{"location":"ue4guide/engine-programming/blueprints/bp-virtualmachine-overview/#zero-address-instruction","title":"Zero address instruction","text":"<p>What if n of \"n address\" is 0?</p> <p>Look at this piece of Java bytecode:</p> Text Only<pre><code>Java bytecode code\niconst_1\niconst_2\niadd\nistore_0\n</code></pre> <p>Note that the iadd (for integer addition) instruction has no parameters. Even the source cannot be specified. What is the use of the zero address instruction? ?</p> <p>Zero address means that the source and destination are implicit parameters, and its implementation depends on a common data structure-yes, it is the stack. The above two instructions, iconst_1 and iconst_2, push integer constants 1, 2 to a place called an \"evaluation stack\" (also called an operand stack or an operand stack or an expression stack). . The iadd instruction pops 2 values \u200b\u200bfrom the top of the evaluation stack, adds the values, and pushes the result back to the top of the stack. The istore_0 instruction pops a value from the top of the evaluation stack and saves the value to the first position in the local variable area (slot 0).</p> <p>The instruction set in the form of zero address is generally implemented through a \"stack-based architecture\". Please note that this stack refers to the \"evaluation stack\", not the system call stack (or system stack). Don't get confused. Some virtual machines implement the evaluation stack on the system call stack, but the two are not conceptually the same thing.</p> <p>Because the source and destination of the instruction are implicit, the \"density\" of a zero-address instruction can be very high-more instructions can be placed in less space. Therefore, in a space-constrained environment, the zero address instruction is a desirable design. But the zero-address instruction has to accomplish one thing. Generally, there are many more instructions than the two-address or three-address instruction. The addition made by the above Java bytecode can be completed by using two x86 instructions: Text Only<pre><code>mov eax, 1\nadd eax, 2\n</code></pre></p>"},{"location":"ue4guide/engine-programming/blueprints/bp-virtualmachine-overview/#difference-between-stack-based-and-register-based-structures","title":"Difference between stack-based and register-based structures","text":"<ol> <li>The location where the temporary value is saved is different    * Stack-based: Stores temporary values \u200b\u200bon the evaluation stack.    * Register-based: Save temporary values \u200b\u200bin registers.</li> <li>The volume occupied by the code is different    * Stack-based: Code is compact and small, but requires many code conditions    * Register-based: the code is relatively large, but requires less code conditions</li> </ol> <p>Based on the \"stack\" in the stack refers to the \"evaluation stack\", the \"evaluation stack\" in the JVM is called the \"operand stack\".</p> <p></p>"},{"location":"ue4guide/engine-programming/blueprints/bp-virtualmachine-overview/#stack-frame","title":"Stack frame","text":"<p>A stack frame is also called a process activity record. It is a data structure used by the compiler to implement a procedure / function call. Logically, a stack frame is a function execution environment: function parameters, function local variables, where to return after the function is executed, and so on.</p>"},{"location":"ue4guide/engine-programming/blueprints/bp-virtualmachine-overview/#blueprint-virtual-machine-implementation","title":"Blueprint virtual machine implementation","text":"<p>Earlier we have briefly introduced the terms related to virtual machines. Next, we will specifically explain the implementation of the blueprint virtual machine in Unreal 4.</p>"},{"location":"ue4guide/engine-programming/blueprints/bp-virtualmachine-overview/#byte-code","title":"Byte code","text":"<p>The bytecode of the virtual machine is in the Script.h file. Here we list it all. Because it is a dedicated scripting language, there will be some special bytecodes in it, such as proxy-related code (EX_BindDelegate, EX_AddMulticastDelegate). Of course, there are commonly used statements, such as assignment, unconditional jump instruction, conditional jump instruction, switch, etc.</p> C++<pre><code>//\n// Evaluatable expression item types.\n//\nenum EExprToken\n{\n  // Variable references.\n  EX_LocalVariable = 0x00, // A local variable.\n  EX_InstanceVariable = 0x01, // An object variable.\n  EX_DefaultVariable = 0x02, // Default variable for a class context.\n  // = 0x03,\n  EX_Return = 0x04, // Return from function.\n  // = 0x05,\n  EX_Jump = 0x06, // Goto a local address in code.\n  EX_JumpIfNot = 0x07, // Goto if not expression.\n  // = 0x08,\n  EX_Assert = 0x09, // Assertion.\n  // = 0x0A,\n  EX_Nothing = 0x0B, // No operation.\n  // = 0x0C,\n  // = 0x0D,\n  // = 0x0E,\n  EX_Let = 0x0F, // Assign an arbitrary size value to a variable.\n  // = 0x10,\n  // = 0x11,\n  EX_ClassContext = 0x12, // Class default object context.\n  EX_MetaCast = 0x13, // Metaclass cast.\n  EX_LetBool = 0x14, // Let boolean variable.\n  EX_EndParmValue = 0x15, // end of default value for optional function parameter\n  EX_EndFunctionParms = 0x16, // End of function call parameters.\n  EX_Self = 0x17, // Self object.\n  EX_Skip = 0x18, // Skippable expression.\n  EX_Context = 0x19, // Call a function through an object context.\n  EX_Context_FailSilent = 0x1A, // Call a function through an object context (can fail silently if the context is NULL; only generated for functions that don't have output or return values).\n  EX_VirtualFunction = 0x1B, // A function call with parameters.\n  EX_FinalFunction = 0x1C, // A prebound function call with parameters.\n  EX_IntConst = 0x1D, // Int constant.\n  EX_FloatConst = 0x1E, // Floating point constant.\n  EX_StringConst = 0x1F, // String constant.\n  EX_ObjectConst = 0x20, // An object constant.\n  EX_NameConst = 0x21, // A name constant.\n  EX_RotationConst = 0x22, // A rotation constant.\n  EX_VectorConst = 0x23, // A vector constant.\n  EX_ByteConst = 0x24, // A byte constant.\n  EX_IntZero = 0x25, // Zero.\n  EX_IntOne = 0x26, // One.\n  EX_True = 0x27, // Bool True.\n  EX_False = 0x28, // Bool False.\n  EX_TextConst = 0x29, // FText constant\n  EX_NoObject = 0x2A, // NoObject.\n  EX_TransformConst = 0x2B, // A transform constant\n  EX_IntConstByte = 0x2C, // Int constant that requires 1 byte.\n  EX_NoInterface = 0x2D, \u200b\u200b// A null interface (similar to EX_NoObject, but for interfaces)\n  EX_DynamicCast = 0x2E, // Safe dynamic class casting.\n  EX_StructConst = 0x2F, // An arbitrary UStruct constant\n  EX_EndStructConst = 0x30, // End of UStruct constant\n  EX_SetArray = 0x31, // Set the value of arbitrary array\n  EX_EndArray = 0x32,\n  // = 0x33,\n  EX_UnicodeStringConst = 0x34, // Unicode string constant.\n  EX_Int64Const = 0x35, // 64-bit integer constant.\n  EX_UInt64Const = 0x36, // 64-bit unsigned integer constant.\n  // = 0x37,\n  EX_PrimitiveCast = 0x38, // A casting operator for primitives which reads the type as the subsequent byte\n  // = 0x39,\n  // = 0x3A,\n  // = 0x3B,\n  // = 0x3C,\n  // = 0x3D,\n  // = 0x3E,\n  // = 0x3F,\n  // = 0x40,\n  // = 0x41,\n  EX_StructMemberContext = 0x42, // Context expression to address a property within a struct\n  EX_LetMulticastDelegate = 0x43, // Assignment to a multi-cast delegate\n  EX_LetDelegate = 0x44, // Assignment to a delegate\n  // = 0x45,\n  // = 0x46, // CST_ObjectToInterface\n  // = 0x47, // CST_ObjectToBool\n  EX_LocalOutVariable = 0x48, // local out (pass by reference) function parameter\n  // = 0x49, // CST_InterfaceToBool\n  EX_DeprecatedOp4A = 0x4A,\n  EX_InstanceDelegate = 0x4B, // const reference to a delegate or normal function object\n  EX_PushExecutionFlow = 0x4C, // push an address on to the execution flow stack for future execution when a EX_PopExecutionFlow is executed. Execution continues on normally and doesn't change to the pushed address.\n  EX_PopExecutionFlow = 0x4D, // continue execution at the last address previously pushed onto the execution flow stack.\n  EX_ComputedJump = 0x4E, // Goto a local address in code, specified by an integer value.\n  EX_PopExecutionFlowIfNot = 0x4F, // continue execution at the last address previously pushed onto the execution flow stack, if the condition is not true.\n  EX_Breakpoint = 0x50, // Breakpoint. Only observed in the editor, otherwise it behaves like EX_Nothing.\n  EX_InterfaceContext = 0x51, // Call a function through a native interface variable\n  EX_ObjToInterfaceCast = 0x52, // Converting an object reference to native interface variable\n  EX_EndOfScript = 0x53, // Last byte in script code\n  EX_CrossInterfaceCast = 0x54, // Converting an interface variable reference to native interface variable\n  EX_InterfaceToObjCast = 0x55, // Converting an interface variable reference to an object\n  // = 0x56,\n  // = 0x57,\n  // = 0x58,\n  // = 0x59,\n  EX_WireTracepoint = 0x5A, // Trace point. Only observed in the editor, otherwise it behaves like EX_Nothing.\n  EX_SkipOffsetConst = 0x5B, // A CodeSizeSkipOffset constant\n  EX_AddMulticastDelegate = 0x5C, // Adds a delegate to a multicast delegate's targets\n  EX_ClearMulticastDelegate = 0x5D, // Clears all delegates in a multicast target\n  EX_Tracepoint = 0x5E, // Trace point. Only observed in the editor, otherwise it behaves like EX_Nothing.\n  EX_LetObj = 0x5F, // assign to any object ref pointer\n  EX_LetWeakObjPtr = 0x60, // assign to a weak object pointer\n  EX_BindDelegate = 0x61, // bind object and name to delegate\n  EX_RemoveMulticastDelegate = 0x62, // Remove a delegate from a multicast delegate's targets\n  EX_CallMulticastDelegate = 0x63, // Call multicast delegate\n  EX_LetValueOnPersistentFrame = 0x64,\n  EX_ArrayConst = 0x65,\n  EX_EndArrayConst = 0x66,\n  EX_AssetConst = 0x67,\n  EX_CallMath = 0x68, // static pure function from on local call space\n  EX_SwitchValue = 0x69,\n  EX_InstrumentationEvent = 0x6A, // Instrumentation event\n  EX_ArrayGetByRef = 0x6B,\n  EX_Max = 0x100,\n};\n</code></pre>"},{"location":"ue4guide/engine-programming/blueprints/bp-virtualmachine-overview/#stack-frame-details","title":"Stack Frame Details","text":"<p>In Stack.h we can find the definition of FFrame. Although it defines a structure, the logic to execute the current code is encapsulated in it. Let's take a look at its data members:</p> C++<pre><code>// Variables.\nUFunction* Node;\nUObject* Object;\nuint8* Code;\nuint8* Locals;\n\nUProperty* MostRecentProperty;\nuint8* MostRecentPropertyAddress;\n\n/** The execution flow stack for compiled Kismet code */\nFlowStackType FlowStack;\n\n/** Previous frame on the stack */\nFFrame* PreviousFrame;\n\n/** contains information on any out parameters */\nFOutParmRec* OutParms;\n\n/** If a class is compiled in then this is set to the property chain for compiled-in functions. In that case, we follow the links to setup the args instead of executing by code. */\nUField* PropertyChainForCompiledIn;\n\n/** Currently executed native function */\nUFunction* CurrentNativeFunction;\n\nbool bArrayContextFailed;\n</code></pre> <p>We can see that it saves the currently executing script function, the UObject that executes the script, the current code execution location, local variables, the previous stack frame, the parameters returned by the call (not the return value), and the currently executing native function Wait. The return value of the calling function is saved before the function call, and restored after the call ends. It looks like this:</p> C++<pre><code>uint8 * SaveCode = Stack.Code;\n\n// Call function\n...\n\nStack.Code = SaveCode\n</code></pre> <p>Below we list the important functions related to execution in FFrame:</p> C++<pre><code>// Functions.\nCOREUOBJECT_API void Step( UObject* Context, RESULT_DECL );\n\n/** Replacement for Step that uses an explicitly specified property to unpack arguments **/\nCOREUOBJECT_API void StepExplicitProperty(void*const Result, UProperty* Property);\n\n/** Replacement for Step that checks the for byte code, and if none exists, then PropertyChainForCompiledIn is used. Also, makes an effort to verify that the params are in the correct order and the types are compatible. **/\ntemplate&lt;class TProperty&gt;\nFORCEINLINE_DEBUGGABLE void StepCompiledIn(void*const Result);\n\n/** Replacement for Step that checks the for byte code, and if none exists, then PropertyChainForCompiledIn is used. Also, makes an effort to verify that the params are in the correct order and the types are compatible. **/\ntemplate&lt;class TProperty, typename TNativeType&gt;\nFORCEINLINE_DEBUGGABLE TNativeType&amp; StepCompiledInRef(void*const TemporaryBuffer);\n\nCOREUOBJECT_API virtual void Serialize( const TCHAR* V, ELogVerbosity::Type Verbosity, const class FName&amp; Category ) override;\n\nCOREUOBJECT_API static void KismetExecutionMessage(const TCHAR* Message, ELogVerbosity::Type Verbosity, FName WarningId = FName());\n\n/** Returns the current script op code */\nconst uint8 PeekCode() const { return *Code; }\n\n/** Skips over the number of op codes specified by NumOps */\nvoid SkipCode(const int32 NumOps) { Code += NumOps; }\n\ntemplate&lt;typename TNumericType&gt;\nTNumericType ReadInt();\nfloat ReadFloat();\nFName ReadName();\nUObject* ReadObject();\nint32 ReadWord();\nUProperty* ReadProperty();\n\n/** May return null */\nUProperty* ReadPropertyUnchecked();\n\n/**\n  * Reads a value from the bytestream, which represents the number of bytes to advance\n  * the code pointer for certain expressions.\n  *\n  * @param    ExpressionField        receives a pointer to the field representing the expression; used by various execs\n  *                                to drive VM logic\n  */\nCodeSkipSizeType ReadCodeSkipCount();\n\n/**\n  * Reads a value from the bytestream which represents the number of bytes that should be zero'd out if a NULL context\n  * is encountered\n  *\n  * @param    ExpressionField        receives a pointer to the field representing the expression; used by various execs\n  *                                to drive VM logic\n  */\nVariableSizeType ReadVariableSize(UProperty** ExpressionField);\n</code></pre> <p>Functions like ReadInt (), ReadFloat (), ReadObject (), and so on, we know what it does by seeing its name. It reads the corresponding int, float, UObject, etc. Here we mainly talk about the Step () function, and its code is as follows:</p> C++<pre><code>void FFrame::Step(UObject *Context, RESULT_DECL)\n{\n    int32 B = *Code++;\n    (Context-&gt;*GNatives[B])(*this,RESULT_PARAM);\n}\n</code></pre> <p>It can be seen that its main function is to fetch instructions and then find the corresponding function in the native function array to execute.</p>"},{"location":"ue4guide/engine-programming/blueprints/bp-virtualmachine-overview/#byte-code-corresponding-functions","title":"Byte code corresponding functions","text":"<p>Earlier we listed all the bytecodes of all the virtual machines, then where is the code that corresponds to the specific execution part of each bytecode, you can find the definition in ScriptCore.cpp, we can see each bytecode The corresponding native functions are in GNatives and GCasts:</p> <p>Their declarations are as follows:</p> C++<pre><code>/** The type of a native function callable by script */\ntypedef void (UObject::*Native)( FFrame&amp; TheStack, RESULT_DECL );\nNative GCasts[];\nNative GNatives[EX_Max];\n</code></pre> <p>In this way, it will call the registration method for each native function, implemented through the IMPLEMENT_VM_FUNCTION and IMPLEMENT_CAST_FUNCTION macros.</p> <p>The specific code is shown in the following figure:</p> C++<pre><code>#define IMPLEMENT_FUNCTION(cls,func) \\\n    static FNativeFunctionRegistrar cls##func##Registar(cls::StaticClass(),#func,(Native)&amp;cls::func);\n\n#define IMPLEMENT_CAST_FUNCTION(cls, CastIndex, func) \\\n    IMPLEMENT_FUNCTION(cls, func); \\\n    static uint8 cls##func##CastTemp = GRegisterCast( CastIndex, (Native)&amp;cls::func );\n\n#define IMPLEMENT_VM_FUNCTION(BytecodeIndex, func) \\\n  IMPLEMENT_FUNCTION(UObject, func) \\\n  static uint8 UObject##func##BytecodeTemp = GRegisterNative( BytecodeIndex, (Native)&amp;UObject::func );\n</code></pre> <p>It can be seen that it defines a global static object, so that the function will be placed in the corresponding position in the array before the main function of the program is executed, so that the corresponding native can be directly called when the virtual machine is executed. Function.</p>"},{"location":"ue4guide/engine-programming/blueprints/bp-virtualmachine-overview/#implementation-process","title":"Implementation process","text":"<p>When we talked about blueprints earlier, we talked about how blueprints interact with C ++, including blueprints calling C ++ code, and calling C ++ code into blueprints.</p>"},{"location":"ue4guide/engine-programming/blueprints/bp-virtualmachine-overview/#c--call-blueprint-function","title":"C ++ call blueprint function","text":"C++<pre><code>UFUNCTION(BlueprintImplementableEvent, Category = \"AReflectionStudyGameMode\")\nvoid ImplementableFuncTest();\n\n\nvoid AReflectionStudyGameMode::ImplementableFuncTest()\n{\n  ProcessEvent(FindFunctionChecked(REFLECTIONSTUDY_ImplementableFuncTest),NULL);\n}\n</code></pre> <p>Because our function has no parameters, a NULL is passed in all ProcessEvents. If there are parameters and return values, then UHT will automatically generate a structure for storing parameters and return values, so that when the function is called in C ++, It will go to the blueprint UFunction corresponding to the name REFLECTIONSTUDY_ImplementableFuncTest, and if it finds it, it will call ProcessEvent for further processing.</p>"},{"location":"ue4guide/engine-programming/blueprints/bp-virtualmachine-overview/#processevent-process","title":"ProcessEvent process","text":""},{"location":"ue4guide/engine-programming/blueprints/bp-virtualmachine-overview/#blueprint-calls-c--functions","title":"Blueprint calls C ++ functions","text":"C++<pre><code>UFUNCTION(BlueprintCallable, Category = \"AReflectionStudyGameMode\")\nvoid CallableFuncTest();\n\n\nDECLARE_FUNCTION(execCallableFuncTest) \\\n{ \\\nP_FINISH; \\\nP_NATIVE_BEGIN; \\\nthis-&gt;CallableFuncTest(); \\\nP_NATIVE_END; \\\n}\n</code></pre> <p>If it is a C ++ function called through a blueprint, then UHT will generate the above code, and if there are parameters, it will call P_GET_UBOOL, etc. to obtain the corresponding parameters. If there is a return value, the return value will be assigned.</p>"},{"location":"ue4guide/engine-programming/blueprints/bp-virtualmachine-overview/#summary","title":"Summary","text":"<p>At this point, plus our previous analysis of the blueprint compilation and the explanation of the blueprint virtual machine, we have a deeper understanding of the blueprint implementation principles. This article does not explain the predecessor of the blueprint, unrealscript in detail. With this in-depth understanding (if you want to have a deep understanding, you must look at the code yourself), I believe that everyone will be more at ease when designing the blueprint. Of course, if there is something wrong, please correct me, and everyone is welcome to discuss it. Next, we may focus on Unreal 4 rendering-related modules, including rendering API cross-platform related, multi-threaded rendering, rendering processes, and rendering algorithms, and some other modules may be interspersed (such as animation, AI, etc.) ), Everyone is welcome to continue to pay attention, if you have a chapter you want to know in advance, please also leave a comment below, I may make priority adjustments based on everyone's comments.</p> <p>References:</p> <ul> <li>https://www.usenix.org/legacy/events/vee05/full_papers/p153-yunhe.pdf</li> <li>http://rednaxelafx.iteye.com/blog/492667</li> <li>http://www.zhihu.com/question/19608553</li> <li>https://en.wikipedia.org/wiki/Virtual_machine</li> <li>Java Program in Action</li> </ul>"},{"location":"ue4guide/engine-programming/memory/allocators-malloc/","title":"Allocators malloc","text":""},{"location":"ue4guide/engine-programming/memory/allocators-malloc/#overview","title":"Overview","text":"<p>There are three basic ways to allocate or free memory within the Unreal Engine 4:</p> <ul> <li> <p>Use of GMalloc pointer. This a way to get access to the global allocator. Which allocator is set to be used depends on GCreateMalloc().</p> </li> <li> <p>FMemory functions. These are static functions such as Malloc(), Realloc(), and Free(). They also use GMalloc for the allocations but before doing that it checks if GMalloc is defined before every allocation, reallocation or free. If GMalloc is nullptr then GCreateMalloc() is called.</p> </li> <li> <p>Global new and delete operators. By default they a only defined in the modules in ModuleBoilerplate.h which means that many calls to new and delete were not being handled within the Unreal Engine 4 memory system. The overloaded operators actually call the FMemory functions.</p> </li> </ul> <p>Reference From https://pzurita.wordpress.com</p>"},{"location":"ue4guide/engine-programming/memory/allocators-malloc/#useful-allocators","title":"Useful Allocators:","text":"TPageAllocator/FPageAllocator Page allocator TInlineAllocator THeapAllocator TFixedAllocator FOneFrameResource TSetAllocator TInlineSetAllocator TSparseArrayAllocator TInlineSparseArrayAllocator FLinearAllocator TMemStackAllocator FMemStackBaseFMemStackFMemMark Linear allocation memory stack TAllocatorFixedSizeFreeList Linear block allocator: Fixed-size allocator that uses a free list to cache allocations. TLockFreeFixedSizeAllocator_TLSCacheBase Must use custom new/delete to use (or use placementnew). Ex:FLightPrimitiveInteraction TLockFreeFixedSizeAllocator For more automatic, look at      TMemStackAllocator&lt;&gt; which uses TLockFreeFixedSizeAllocator      underneath the covers TLockFreeClassAllocator Examples: FAnimStackAllocator &amp; SceneRenderingAllocator TLockFreeClassAllocator_TLSCache Can use it as an object pool (Ex: TheGraphEventAllocator &amp;FGraphEvent::CreateGraphEvent()) TGenericGrowableAllocator Memory allocator that allocates direct memory for pool memory TCachedOSPageAllocator FLinearBlockAllocator"},{"location":"ue4guide/engine-programming/memory/allocators-malloc/#malloc","title":"Malloc:","text":"<ul> <li> <p>Configured by FWindowsPlatformMemory::BaseAllocator()</p> </li> <li> <p>Editor defaults to EMemoryAllocatorToUse::TBB</p> </li> <li> <p>Game defaults to EMemoryAllocatorToUse::Binned2</p> </li> <li> <p>Can override with commandline: -ansimalloc, -tbbmalloc, -binnedmalloc2, -binnedmalloc</p> </li> </ul> EMemoryAllocatorToUse Ansi, // Default C allocator Stomp, // Allocator to check for memory stomping **TBB, // Thread Building Blocks malloc       ** FMallocDebug FMallocStomp **Stomp memory allocator. It helps find the following errors: **"},{"location":"ue4guide/engine-programming/memory/allocators-malloc/#misc","title":"Misc:","text":"<p>Memory::FPage::AllocatePage(Memory::MinPageSize);</p> <p>VirtualAlloc - Virtual allocate memory</p> <p>FPlatformMisc::TagBuffer(\"ImmediatePhysicsSim\", \u2026);</p> <p>FSharedMemoryRegion/MapNamedSharedMemoryRegion - memory mapping</p>"},{"location":"ue4guide/engine-programming/memory/allocators-malloc/#operator-new-replacement","title":"Operator New replacement:","text":"<p>UObject and UStruct types overload operator new via one of the nested macros within GENERATED_UCLASS_BODY and GENERATED_USTRUCT_BODY. Slate widgets also override this operator, as do modules via REPLACEMENT_OPERATOR_NEW_AND_DELETE.</p> <p>The module level replacement seems to catch all the allocations made within a module, even if you're not allocating a UObject, UStruct, or Slate widget.</p> <p>Ultimately they call through to FMemory::Malloc, which will forward it onto whichever allocator is active (eg, FMallocTBB). If one of these allocators fails to perform an allocation, they will call an implementation specific OutOfMemory function to log a fatal error.</p> <p>I tried allocating 0x7fffffffffffffff bytes. With a debugger attached, it broke into the debugger on the failed allocation; without a debugger attached, the application just quit.</p> <p>Reference From https://wiki.unrealengine.com/Garbage_Collection_%26_Dynamic_Memory_Allocation</p>"},{"location":"ue4guide/engine-programming/memory/debuggingdevelopment-tools/","title":"Debuggingdevelopment tools","text":""},{"location":"ue4guide/engine-programming/memory/debuggingdevelopment-tools/#simple-way-for-tracking-uobject-memory-use","title":"Simple Way For Tracking UObject Memory Use","text":"<p>Details: https://www.unrealengine.com/en-US/blog/debugging-and-optimizing-memory</p> <p>Summary Commands:</p> <ul> <li>obj refs name= S_Hex_Urban_Standard_03 shortest</li> <li>memreport / memreport -full</li> </ul> <p>Memory:</p> <p>\u2013LLM to enable low level memory tracker</p> <p>liststreamingtextures</p> <p>listtextures</p> <p>stat llm/llmfull</p> <p>Stat Memory</p> <p>Stat MemoryPlatform</p> <p>Stat MemoryStaticMesh</p>"},{"location":"ue4guide/engine-programming/memory/debuggingdevelopment-tools/#low-level-memory-tracker-llm","title":"Low Level Memory Tracker (LLM)","text":"<p>https://qiita.com/donbutsu17/items/dd410cd6ee53b0b348ca</p>"},{"location":"ue4guide/engine-programming/memory/debuggingdevelopment-tools/#malloc-profiler","title":"Malloc Profiler","text":"<p>Detailed explanation: https://qiita.com/donbutsu17/items/a72a282587390f43d12d</p> <p>The Malloc Profiler is a tool built into the engine that can be used to write out memory profiles, which can then be later read by the MemoryProfiler2 C# tool to help find memory leaks and other memory issues. Here are the steps explaining how to use it.</p> <p>The malloc profiler is currently best supported on Windows, but Linux, iOS and Mac should work. Newer console platforms and android are currently not supported. In general you want to run the profiler on a Cooked Windows build of your game if possible.</p> <ol> <li>Rebuild your game with the malloc profiler enabled. The easiest way to do this is to add \u201ctrue\u201d inside the section of your BuildConfiguration.xml file. This will set the USE_MALLOC_PROFILER define and disable frame pointers. Once you do this you will need to rebuild your game</li> <li>Open the MemoryProfiler2 tool, you may need to compile it first. To compile load Engine/Source/Programs/MemoryProfiler2/MemoryProfiler2.sln and build that project. There may also be prebuilt binaries in Engine/Programs/MemoryProfiler2/Binaries</li> <li>Launch your game that has been compiled with the profiler on, this will start writing the memory profile to GameName/Saved/Profiling. It will be in a timestamped folder and named GameName.mprof. Your game will probably run much slower when in memory profile mode.</li> <li>While the game is running you can run \u201cmprof mark MarkName\u201d in the console and it will write a mark named MarkName to the profile, which can then be used later in the tool</li> <li>When done with the gameplay you want to profile, run \u201cmprof stop\u201d in the console and it will flush the memory profile and write it to disk, which may take several seconds. You can then close your game. I would suggest not profiling more than 5 minutes or so of gameplay, long sessions may cause the profiler to run out of memory.</li> <li>From MemoryProfiler2 open your saved mprof file by selecting File-&gt;Open and navigating to where it was saved. This may take a long time.</li> <li>You will now be on the Callgraph view, with nothing visible. You now need to set the parameters in the toolbar and then hit the Go button to get useful information. The defaults should be fine for now. The Callgraph view gives you a top down overview of memory allocations, and you may be able to find something interesting by expanding the categories. Here is what it should look like after hitting Go:</li> <li>The exclusive view is probably the most useful view for finding memory leaks. By default it will show you all allocations that have happened since the beginning of the project, which is very useful for finding large allocations. You will need to hit Go on this tab as well to make it generate useful results. Here is what it will look like with the default settings, and selecting the top allocation:</li> <li>To find leaks specifically, you want to change the Diff Start and Diff End points to something more useful. You can select from the Marks you added at runtime, or several autogenerated marks on events such as map transition or garbage collection. In this example I want to see the memory that\u2019s been allocated while in a certain level so I selected the start as the LoadMap End of the first level, and the end as the LoadMap Start of the second level. Then I hit Go again to refresh the results:</li> <li>The other tabs are useful for tracking different types of memory problems. For instance the Timeline view can show you an overview of memory allocations over time, to look for issues at a glance:</li> <li>On the timeline view you can also create Custom Mark Points by clicking on a specific point on the timeline. If you then reopen the profile a second time those mark points will be available in the start/end drop downs. This can be useful for investigating specific increases in memory</li> <li>Also, the filter options can be useful to help investigate issues. You should experiment by filtering certain classes or text strings in/out and then hitting the Go button to refresh the view.</li> </ol> <p>Reference From https://udn.unrealengine.com/questions/383200/how-do-you-use-the-malloc-profiler-to-find-memory.html)</p> <p>For most memory issues, internally we use all of the following to try to track them down:</p> <ol> <li> <p>obj list - console command which will list all of the object classes and the corresponding counts and memory usage, obj list class= shows all of the objects for a particular class</p> </li> <li> <p>MemoryProfiler2 - tracks every allocation the engine and game makes and writes a report, can be used to track leaks as well, shows a visual graph of allocated memory, this can take some time to write out the report at the end as it is symbolicating all of the callstacks for the memory allocations (looking in to doing this allocation on the mac instead after the fact).</p> </li> <li> <p>Instruments Allocation template - also shows all allocations, but includes system as well, has leak detection</p> </li> </ol> <p>Your best bet for finding fragmentation is either 2 or 3 as they can give you a more complete picture of the current state of memory.</p> <p>-Pete</p> <p>Reference From https://udn.unrealengine.com/questions/393847/tools-for-looking-at-memory-fragmentation.html</p>"},{"location":"ue4guide/engine-programming/memory/garbage-collection/","title":"Garbage Collection Internals","text":"<p>Really great deep dive: https://www.cnblogs.com/ghl_carmack/p/6112118.html Also good: https://zhuanlan.zhihu.com/p/67055774</p>"},{"location":"ue4guide/engine-programming/memory/tracking-references/","title":"Tracking references","text":"<ul> <li> <p>Reference Viewer</p> </li> <li> <p>Right click on node &amp; selec`t show referenced (objs that current obj points to/depends on) &amp; show referencing (other objs that point to current obj)</p> </li> <li> <p>\"obj refs name= S_Hex_Urban_Standard_03 shortest\"</p> </li> </ul> <p>Reference From https://www.unrealengine.com/en-US/blog/debugging-and-optimizing-memory</p> <ul> <li> <p>Show referencing property: obj refs name=/Game/Development/VRIntegrator/Blueprints/BPC_VRRadialMenu</p> </li> <li> <p>obj dependencies</p> </li> <li> <p>Right click-&gt;audit asset-&gt;size map</p> </li> <li> <p>Breakpoint FSoftObjectPath::SerializePath and then resave the sequence</p> </li> <li> <p>Print out a text export of one of the offending assets that would help - you can do this with RMB-&gt;Asset Actions-&gt;Export.</p> </li> </ul> <p>Reference From https://udn.unrealengine.com/questions/427836/ulevelsequencebindingreferences-causes-unnecessary.html</p> <p>Tracking Garbage Collector references to an object:</p> C++<pre><code> static int32 URamaStaticFunctionLib::GetObjReferenceCount(UObject* Obj, TArray&lt;UObject*&gt;* OutReferredToObjects = nullptr)\n {\n         if(!Obj || !Obj-&gt;IsValidLowLevelFast())\n         {\n                 return -1;\n         }\n\n TArray&lt;UObject*&gt; ReferredToObjects;                                //req outer, ignore archetype, recursive, ignore transient\n         FReferenceFinder ObjectReferenceCollector( ReferredToObjects, Obj, false, true, true, false);\n         ObjectReferenceCollector.FindReferences( Obj );\n\n if(OutReferredToObjects)\n         {\n                 OutReferredToObjects-&gt;Append(ReferredToObjects);\n         }\n         return OutReferredToObjects.Num();\n }\n</code></pre> <p>Reference From https://wiki.unrealengine.com/Garbage_Collection_~_Count_References_To_Any_Object#Code</p> <ul> <li>Non-UObject References:</li> </ul> <p>Normal, non-UObjects can also have the ability to add a reference to an object and prevent garbage collection. To do that, your object must derive from FGCObject and override its AddReferencedObjects class.</p> C++<pre><code> class FMyNormalClass : public FGCObject\n {\n public:\n UObject* SafeObject;\n\n FMyNormalClass(UObject* Object)\n : SafeObject(Object)\n {\n }\n\n void AddReferencedObjects(FReferenceCollector&amp; Collector) override\n {\n Collector.AddReferencedObject(SafeObject);\n }\n };\n</code></pre> <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/Introduction/index.html</p> <p>TStrongObjectPtr  FGCObjectScopeGuard</p>"},{"location":"ue4guide/engine-programming/uht/custom-tproperties/","title":"Custom tproperties","text":"<p>Custom TAssetPtr</p> <p>UHT knows about TAssetPtr and allows it to be used in a property even though it isn't declared as a USTRUCT. You can modify UHT to allow your custom asset pointer to work by going to HeaderParser.cpp and finding this line:</p> <ol> <li> <p>const bool bIsAssetPtrTemplate = VarType.Matches(TEXT(\"TAssetPtr\"));</p> </li> <li> <p>... and then changing it to this:</p> </li> <li> <p>const bool bIsAssetPtrTemplate = VarType.Matches(TEXT(\"TAssetPtr\")) || VarType.Matches(TEXT(\"TCustomAssetPtr\"));</p> </li> </ol> <p>Hope that helps.</p> <p>Reference From https://udn.unrealengine.com/questions/364023/custom-tassetptr.html</p> <p>Custom UProperties:</p> <p>Adding generalised template support to UHT and the reflection system is considerably non-trivial.</p> <p>But are you specifically wanting TOptional property support, rather than general templates? This is also non-trivial, but much more feasible.</p> <p>You you could hack together a UOptionalProperty as a copy of something like UArrayProperty (as an optional is basically a zero-or-1-sized array).</p> <p>Start in UnrealHeaderTool\\Private\\HeaderParser.cpp and search for \"TArray\" (with quotes) to find where it is first parsed. Then search for all instances of UArrayProperty in the rest of the UnrealHeaderTool source to see how it's handled and how the code generation is performed. You should just be able to copy the pattern here.</p> <p>From the code generator, you'll see that you need to add something like an UE4CodeGen_Private::FOptionalPropertyParams to match the existing UE4CodeGen_Private::FArrayPropertyParams, with an associated new entry in UE4CodeGen_Private::EPropertyClass. All of these are in UObjectGlobals.h.</p> <p>Then in UObjectGlobals.cpp, you should see where they get used at engine startup by UE4CodeGen_Private::ConstructUProperty(), where instances of each property type is constructed for runtime reflection.</p> <p>Then you will likely need to look at all uses of TArray in the editor properties and engine in order to add proper support, unless you plan to synthesise structs at engine startup (like your FBBDamageEffectOptional) in order to simulate that support.</p> <p>I hope this is sufficient information to get you going,</p> <p>Reference From https://udn.unrealengine.com/questions/441180/view.html</p>"},{"location":"ue4guide/engine-programming/uht/uht-parsing/","title":"Uht parsing","text":"<p>Adding a new property specifier is non trivial. :-) And it cannot be done from within a plugin.</p> <p>First, it'll depend on what you want your specifier to do. If it's to add new metadata to the property, then you probably enough to take a look at GetMetadataKeyword() in BaseParser.cpp. It defines which metadata actions will occur when a specifier is seen. Bear in mind that metadata specifiers can be applied to everything: functions, classes, structs etc., and that metadata is only available in editor builds.</p> <p>If you want to affect reflected code generation, you will need to start your search in UnrealHeaderTool. Look at VariableSpecifiers.def - these define all of the specifiers that are currently recognised by UPROPERTYs. Then look at the large EVariableSpecifier switch statement inside FHeaderParser::GetVarType() which defines how to handle the specifiers. This usually involves doing some error checking or setting up the object's property flags.</p> <p>I would recommend you don't actually add a new entry to EPropertyFlags, because it will likely be overwritten by future changes to the engine. You should store your required information in a new field in FPropertyBase.</p> <p>After your flag has been parsed and stored in FPropertyBase, it will need to be processed by CreateVariableProperty(). This is also a giant switch statement which takes a FPropertyBase and creates an actual UProperty-derived object from it, so you can affect how the property is initialised here. If it's a container, be aware that containers are treated specially, inside the FHeaderParser::GetVarNameAndDim() function where it effectively 'wraps up' an instance of the property right type - see where CreateVariableProperty() is called in this function. If you need to add brand new state to your type, it's probably better to create a map (see ClassMaps.cpp) which associates your property type with the state you want to add. These property objects only exist in UnrealHeaderTool as in intermediate format - they effectively exist to be interpreted into actual C++ (the .gen.cpp files) - so this brings us to...</p> <p>Code generation. As you're on 4.18.1, the code you'll be looking for is PropertyNew(), in CodeGenerator.cpp. This emits an appropriate UE4CodeGen_Private::F*PropertyParams struct for each type of property you have. If you want to add your data here, you will need to modify the appropriate struct in the UE4CodeGen_Private namespace in UObjectGlobals.h and then emit your property data there. If you want to affect all property types, you will need to add it to FPropertyParamsBase and all of the individual property type structs, because these structs share a common initial sequence.</p> <p>This will result in the right code being generated, but now it needs to be taken and used to populate the runtime property. Look in UE4CodeGen_Private::ConstructUProperty(), which takes an array of these structs, switches on the type and then creates a property for use by the engine. Here you will need to take the info which you wrote into the F*PropertyParams struct(s) and apply it to the new runtime property.</p> <p>I think that's all there is to it. ;-) As I say, it's not a trivial process, and you'll end up having to port your changes across to newer engine versions.</p> <p>Reference From https://udn.unrealengine.com/questions/401535/add-custom-property-flag.html</p>"},{"location":"ue4guide/engine-programming/uobject-internals/overview/","title":"UObject Internals &amp; Type System","text":"<p>Reference from https://zhuanlan.zhihu.com/p/22813908</p> <ul> <li>Opening</li> <li>Type system overview</li> <li>Type system settings and structure</li> <li>Type system code generation</li> <li>Type system information collection</li> <li>Type system code generation refactoring-UE4CodeGen_Private</li> <li>Type system registration-first UClass</li> <li>Type system registration-CoreUObject module loading</li> <li>Type system registration-InitUObject</li> <li>Type system construction-trigger again</li> <li>Type system construction-construct binding links</li> <li>Type system-summary</li> <li>Type system-reflection combat</li> </ul>"},{"location":"ue4guide/engine-programming/uobject-reflection/reflection-internals-1/","title":"Reflection System Details: Part 1","text":"<p>This is translated from this excellent series: https://www.cnblogs.com/ghl_carmack/p/5701862.html</p> <p>The previous translation article mentioned the basic principle and application of the UE4 reflection system. This time, we will deeply study the reflection system of UE4 through code. Because the reflection system involves more things in UE4, so I plan to analyze in several articles. I assume that the reader has a certain understanding of UE4 and a certain C ++ foundation. If you do not understand how to use UE4, then please learn how to use the UE4 engine, otherwise it may be more difficult.</p> <p>The following is a class diagram related to the reflection system I compiled: </p> <p>It can be seen from the above that UObject is the core of the entire reflection system. The types of reflection supported in UE4 have been mentioned in the previous article, including C ++ classes, structures, functions, member variables, and enumerations. TArray is also supported (only supports some Such as TArray and TSubclassOf template types, and their template types cannot be nested), but TMap does not support. The support for these things is inseparable from the above classes, such as UClass, UBlueprintGeneratedClass, UFunction, UEnum, and UProperty, and subclasses inherited from them. Each class that inherits UObject and supports the reflection system type has a corresponding UClass, or its subclass (such as the blueprint corresponding to the UBlueprintGeneratedClass class, which inherits from UClass). If it is a specific blueprint type, such as action blueprints and widget blueprints And so on, as shown above. UMetaData is metadata, it stores some additional information needed by the editor, such as its Category, Tooltip, etc. These information will not be used when it is finally packaged. As for the variables such as float and int32 that need to be accessed in our reflection system, they are all represented by subclasses inheriting from UProperty. You can find the corresponding class in the code according to the objects listed in the figure above to see the specifics. Implementation.</p> <p>Below we use the simplest code example to illustrate the implementation of reflection in UE4. First, I created a project named ReflectionStudy (only Basic Code). This was done to facilitate the analysis of the code. The article mentioned at the beginning said However, if you want your implementation to support reflection, you must follow relevant guidelines, such as using UENUM (), UCLASS (), USTRUCT (), UFUNCTION (), and UPROPERTY (), etc. To generate the corresponding code that supports reflection. Let's expand to analyze these codes separately. The codes generated by it are stored in your project ReflectionStudyIntermediateBuildWin64UE4EditorIncReflectionStudy path.</p> <p>It is generally divided into several types of files:</p> <ol> <li>ReflectionStudy.generated.cpp There is only one project. This file is used to generate reflection information for each class that supports reflection, such as registering properties and adding source data.</li> <li>ReflectionStudy.generated.dep.h This file contains the header files used in 1. ReflectionStudy.generated.cpp above.</li> <li>ReflectionStudyClasses.h</li> <li> <ul> <li>.generated.h This is the corresponding macro code generated for each header file that supports reflection.</li> </ul> </li> </ol>"},{"location":"ue4guide/engine-programming/uobject-reflection/reflection-internals-1/#class-definition","title":"Class definition","text":"<p>We use the following code as an example to explain. In order to see the specific implementation of some usage, we have added the following properties and methods.</p> C++<pre><code>#pragma once\n\n#include \"GameFramework / GameMode.h\"\n#include \"ReflectionStudyGameMode.generated.h\"\n\nUCLASS ()\nclass REFLECTIONSTUDY_API AReflectionStudyGameMode: public AGameMode\n{\n  GENERATED_BODY ()\n\n\n  protected:\n  UPROPERTY (BlueprintReadWrite, Category = \"AReflectionStudyGameMode\")\n  float Score;\n\n  UFUNCTION (BlueprintCallable, Category = \"AReflectionStudyGameMode\")\n  void CallableFuncTest ();\n\n  UFUNCTION (BlueprintNativeEvent, Category = \"AReflectionStudyGameMode\")\n  void NavtiveFuncTest ();\n\n  UFUNCTION (BlueprintImplementableEvent, Category = \"AReflectionStudyGameMode\")\n  void ImplementableFuncTest ();\n};\n</code></pre>"},{"location":"ue4guide/engine-programming/uobject-reflection/reflection-internals-1/#uht-generated-generatedh-file","title":"UHT generated .generated.h file","text":"<p>Because the corresponding ReflectionStudyGameMode.generated.h header file is long, we only list the key parts to explain.</p> C++<pre><code>#define ReflectionStudy_Source_ReflectionStudy_ReflectionStudyGameMode_h_14_RPC_WRAPPERS_NO_PURE_DECLS\nvirtual void NavtiveFuncTest_Implementation ();\n\nDECLARE_FUNCTION (execNavtiveFuncTest)\n{\n  P_FINISH;\n  P_NATIVE_BEGIN;\n  this-&gt; NavtiveFuncTest_Implementation ();\n  P_NATIVE_END;\n}\n\nDECLARE_FUNCTION (execCallableFuncTest)\n{\n  P_FINISH;\n  P_NATIVE_BEGIN;\n  this-&gt; CallableFuncTest ();\n  P_NATIVE_END;\n}\n</code></pre> <p>You can see that the function we defined above, UHT helped us automatically generate the above code. As for why such a function is generated, it is because of the UE4 blueprint calling convention. Each function must be prefixed with an exec prefix. The implementation of the blueprint is I don't know very well at the moment, so I may introduce a blueprint implementation later. These functions are called by the UE4 virtual machine. If there are parameters and return values, there will be corresponding virtual The code for taking parameters and setting the return value on the stack can be verified by the reader.</p> C++<pre><code>#define ReflectionStudy_Source_ReflectionStudy_ReflectionStudyGameMode_h_14_INCLASS_NO_PURE_DECLS\nprivate:\nstatic void StaticRegisterNativesAReflectionStudyGameMode ();\nfriend REFLECTIONSTUDY_API class UClass * Z_Construct_UClass_AReflectionStudyGameMode ();\npublic:\nDECLARE_CLASS (AReflectionStudyGameMode, AGameMode, COMPILED_IN_FLAGS (0 | CLASS_Transient | CLASS_Config), 0, TEXT (\"/ Script / ReflectionStudy\"), NO_API)\nDECLARE_SERIALIZER (AReflectionStudyGameMode)\n/ ** Indicates whether the class is compiled into the engine * /\nenum {IsIntrinsic = COMPILED_IN_INTRINSIC};\n</code></pre> <ul> <li>StaticRegisterNativesAReflectionStudyGameMode This function is used to register C ++ native functions exposed to the virtual machine.</li> <li>friend REFLECTIONSTUDY_API class UClass * Z_Construct_UClass_AReflectionStudyGameMode (); Declare a friend function. This function is used to build the corresponding UClass of this class.</li> <li>DECLARE_CLASS This macro is more complicated. It mainly defines StaticClass (), etc. For specific implementation, please open the definition of the reader to see it.</li> <li>DECLARE_SERIALIZER defines serialization code.</li> <li>enum {IsIntrinsic = COMPILED_IN_INTRINSIC}; As the comment says, it is used to mark whether this class is compiled into the engine.</li> </ul> C++<pre><code>    #define ReflectionStudy_Source_ReflectionStudy_ReflectionStudyGameMode_h_14_ENHANCED_CONSTRUCTORS\n  / ** Standard constructor, called after all reflected properties have been initialized * /\n  NO_API AReflectionStudyGameMode (const FObjectInitializer &amp; ObjectInitializer = FObjectInitializer :: Get ()): Super (ObjectInitializer) {};\n  private:\n  / ** Private copy-constructor, should never be used * /\n  NO_API AReflectionStudyGameMode (const AReflectionStudyGameMode &amp; InCopy);\n  public:\n  DECLARE_VTABLE_PTR_HELPER_CTOR (NO_API, AReflectionStudyGameMode);\n  DEFINE_VTABLE_PTR_HELPER_CTOR_CALLER (AReflectionStudyGameMode);\n  DEFINE_DEFAULT_OBJECT_INITIALIZER_CONSTRUCTOR_CALL (AReflectionStudyGameMode)\n</code></pre> <ul> <li>NO_API AReflectionStudyGameMode (const FObjectInitializer &amp; ObjectInitializer = FObjectInitializer :: Get ()): Super (ObjectInitializer) {}; Defines a standard constructor that is called after all reflection properties have been initialized.</li> <li>NO_API AReflectionStudyGameMode (const AReflectionStudyGameMode &amp; InCopy); prevent calling copy constructor</li> <li>DECLARE_VTABLE_PTR_HELPER_CTOR (NO_API, AReflectionStudyGameMode); DEFINE_VTABLE_PTR_HELPER_CTOR_CALLER (AReflectionStudyGameMode); Hot-load related, this is the more powerful function in UE4, we will not discuss it in detail here. If you understand this section in the future, it will be explained separately .</li> <li>DEFINE_DEFAULT_OBJECT_INITIALIZER_CONSTRUCTOR_CALL defines a default constructor, as shown in the following code:   ``cpp   static void __DefaultConstructor (const FObjectInitializer &amp; X) {new ((EInternal *) X.GetObj ()) TClass (X);}   ```</li> </ul> <p>```cpp     #define ReflectionStudy_Source_ReflectionStudy_ReflectionStudyGameMode_h_14_GENERATED_BODY</p> Text Only<pre><code>PRAGMA_DISABLE_DEPRECATION_WARNINGS\n\npublic:\n\n    ReflectionStudy_Source_ReflectionStudy_ReflectionStudyGameMode_h_14_RPC_WRAPPERS_NO_PURE_DECLS\n\n    ReflectionStudy_Source_ReflectionStudy_ReflectionStudyGameMode_h_14_CALLBACK_WRAPPERS\n\n    ReflectionStudy_Source_ReflectionStudy_ReflectionStudyGameMode_h_14_INCLASS_NO_PURE_DECLS\n\n    ReflectionStudy_Source_ReflectionStudy_ReflectionStudyGameMode_h_14_ENHANCED_CONSTRUCTORS\n\nprivate:\n\nPRAGMA_ENABLE_DEPRECATION_WARNINGS\n</code></pre> <p><code>This code is a reference to the above explained macro. With the following macro, you can finally define a GENERATED_BODY () in the class, and you can include all the definitions above into the class.</code>cpp</p>"},{"location":"ue4guide/engine-programming/uobject-reflection/reflection-internals-1/#undef-current_file_id","title":"undef CURRENT_FILE_ID","text":""},{"location":"ue4guide/engine-programming/uobject-reflection/reflection-internals-1/#define-current_file_id-reflectionstudy_source_reflectionstudy_reflectionstudygamemode_h","title":"define CURRENT_FILE_ID ReflectionStudy_Source_ReflectionStudy_ReflectionStudyGameMode_h","text":"<p>```</p> <p>All GENERATED_BODY () related macros are defined as follows</p> C++<pre><code>// This pair of macros is used to help implement GENERATED_BODY () and GENERATED_USTRUCT_BODY ()\n\n#define BODY_MACRO_COMBINE_INNER (A, B, C, D) A ## B ## C ## D\n\n#define BODY_MACRO_COMBINE (A, B, C, D) BODY_MACRO_COMBINE_INNER (A, B, C, D)\n#define GENERATED_BODY_LEGACY (...) BODY_MACRO_COMBINE (CURRENT_FILE_ID, _, __LINE__, _ GENERATED_BODY_LEGACY)\n#define GENERATED_BODY (...) BODY_MACRO_COMBINE (CURRENT_FILE_ID, _, __LINE__, _ GENERATED_BODY)\n\n#define GENERATED_USTRUCT_BODY (...) GENERATED_BODY ()\n#define GENERATED_UCLASS_BODY (...) GENERATED_BODY_LEGACY ()\n#define GENERATED_UINTERFACE_BODY (...) GENERATED_BODY_LEGACY ()\n#define GENERATED_IINTERFACE_BODY (...) GENERATED_BODY_LEGACY ()\n</code></pre> <p>At this point, the contents of the ReflectionStudyGameMode.generated.h file have been basically analyzed. Let's take a look at the corresponding code in ReflectionStudy.generated.cpp. Combined with the previous explanation, I believe you have a general understanding of the entire UE4 reflection system.</p>"},{"location":"ue4guide/engine-programming/uobject-reflection/reflection-internals-1/#generatedcpp-related-content","title":".generated.cpp related content","text":"C++<pre><code>FName REFLECTIONSTUDY_ImplementableFuncTest = FName (TEXT (\"ImplementableFuncTest\"));\nFName REFLECTIONSTUDY_NavtiveFuncTest = FName (TEXT (\"NavtiveFuncTest\"));\n  void AReflectionStudyGameMode :: ImplementableFuncTest ()\n  {\n    ProcessEvent (FindFunctionChecked (REFLECTIONSTUDY_ImplementableFuncTest), NULL);\n  }\n  void AReflectionStudyGameMode :: NavtiveFuncTest ()\n  {\n    ProcessEvent (FindFunctionChecked (REFLECTIONSTUDY_NavtiveFuncTest), NULL);\n  }\n  void AReflectionStudyGameMode :: StaticRegisterNativesAReflectionStudyGameMode ()\n  {\n    FNativeFunctionRegistrar :: RegisterFunction (AReflectionStudyGameMode :: StaticClass (), \"CallableFuncTest\", (Native) &amp; AReflectionStudyGameMode :: execCallableFuncTest);\n    FNativeFunctionRegistrar :: RegisterFunction (AReflectionStudyGameMode :: StaticClass (), \"NavtiveFuncTest\", (Native) &amp; AReflectionStudyGameMode :: execNavtiveFuncTest);\n  }\n  IMPLEMENT_CLASS (AReflectionStudyGameMode, 3618622309);\n</code></pre> <ul> <li>When I first came into contact with UE4, if it was a function of BlueprintImplementabeEvent, did I find that I didn't need to implement it myself, did I find it weird at the time? The above code explained it clearly. It was UE4 that helped us to implement it. Called ProcessEvent method, this method is implemented in UObject.</li> <li>StaticRegisterNativesAReflectionStudyGameMode adds native C ++ functions to the UClass returned by AReflectionStudyGameMode :: StaticClass ().</li> <li>IMPLEMENT_CLASS defines a static global variable that is used to register UClass when the program starts.</li> </ul> C++<pre><code>UFunction * Z_Construct_UFunction_AReflectionStudyGameMode_CallableFuncTest ()\n{\nUObject * Outer = Z_Construct_UClass_AReflectionStudyGameMode ();\nstatic UFunction * ReturnFunction = NULL;\nif (! ReturnFunction)\n{\nReturnFunction = new (EC_InternalUseOnlyConstructor, Outer, TEXT (\"CallableFuncTest\"), RF_Public | RF_Transient | RF_MarkAsNative) UFunction (FObjectInitializer (), NULL, 0x04080401, 65535);\nReturnFunction-&gt; Bind ();\nReturnFunction-&gt; StaticLink ();\n#if WITH_METADATA\nUMetaData * MetaData = ReturnFunction-&gt; GetOutermost ()-&gt; GetMetaData ();\nMetaData-&gt; SetValue (ReturnFunction, TEXT (\"Category\"), TEXT (\"AReflectionStudyGameMode\"));\nMetaData-&gt; SetValue (ReturnFunction, TEXT (\"ModuleRelativePath\"), TEXT (\"ReflectionStudyGameMode.h\"));\n#endif\n}\nreturn ReturnFunction;\n}\n</code></pre> <ul> <li>This function registers a function named CallableFuncTest in the UClass class returned by AReflectionStudyGameMode, and #if WITH_METADATA is the metadata we mentioned earlier. Note that the Category category specified in our class is specified here and placed It's (UPackage) UMetaData. Z_Construct_UFunction_AReflectionStudyGameMode_ImplementableFuncTest () and Z_Construct_UFunction_AReflectionStudyGameMode_NavtiveFuncTest () are basically implemented in the same way as above, and I will not write them here.</li> </ul> C++<pre><code>UClass * Z_Construct_UClass_AReflectionStudyGameMode ()\n{\n  static UClass * OuterClass = NULL;\n  if (! OuterClass)\n  {\n    Z_Construct_UClass_AGameMode ();\n    Z_Construct_UPackage__Script_ReflectionStudy ();\n    OuterClass = AReflectionStudyGameMode :: StaticClass ();\n    if (! (OuterClass-&gt; ClassFlags &amp; CLASS_Constructed))\n    {\n      UObjectForceRegistration (OuterClass);\n      OuterClass-&gt; ClassFlags | = 0x2090028C;\n\n      OuterClass-&gt; LinkChild (Z_Construct_UFunction_AReflectionStudyGameMode_CallableFuncTest ());\n      OuterClass-&gt; LinkChild (Z_Construct_UFunction_AReflectionStudyGameMode_ImplementableFuncTest ());\n      OuterClass-&gt; LinkChild (Z_Construct_UFunction_AReflectionStudyGameMode_NavtiveFuncTest ());\n\n      PRAGMA_DISABLE_DEPRECATION_WARNINGS\n      UProperty * NewProp_Score = new (EC_InternalUseOnlyConstructor, OuterClass, TEXT (\"Score\"), RF_Public | RF_Transient | RF_MarkAsNative) UFloatProperty (CPP_PROPERTY_BASE (Score, AReflectionStudyGameMode), 0x0020080000000004);\n      PRAGMA_ENABLE_DEPRECATION_WARNINGS\n      OuterClass-&gt; AddFunctionToFunctionMapWithOverriddenName (Z_Construct_UFunction_AReflectionStudyGameMode_CallableFuncTest (), \"CallableFuncTest\"); // 3059784748\n      OuterClass-&gt; AddFunctionToFunctionMapWithOverriddenName (Z_Construct_UFunction_AReflectionStudyGameMode_ImplementableFuncTest (), \"ImplementableFuncTest\"); // 4773450\n      OuterClass-&gt; AddFunctionToFunctionMapWithOverriddenName (Z_Construct_UFunction_AReflectionStudyGameMode_NavtiveFuncTest (), \"NavtiveFuncTest\"); // 2500148308\n      OuterClass-&gt; ClassConfigName = FName (TEXT (\"Game\"));\n      OuterClass-&gt; StaticLink ();\n      #if WITH_METADATA\n      UMetaData * MetaData = OuterClass-&gt; GetOutermost ()-&gt; GetMetaData ();\n      MetaData-&gt; SetValue (OuterClass, TEXT (\"HideCategories\"), TEXT (\"Info Rendering MovementReplication Replication Actor Input Movement Collision Rendering Utilities | Transformation\"));\n      MetaData-&gt; SetValue (OuterClass, TEXT (\"IncludePath\"), TEXT (\"ReflectionStudyGameMode.h\"));\n      MetaData-&gt; SetValue (OuterClass, TEXT (\"ModuleRelativePath\"), TEXT (\"ReflectionStudyGameMode.h\"));\n      MetaData-&gt; SetValue (OuterClass, TEXT (\"ShowCategories\"), TEXT (\"Input | MouseInput Input | TouchInput\"));\n      MetaData-&gt; SetValue (NewProp_Score, TEXT (\"Category\"), TEXT (\"AReflectionStudyGameMode\"));\n      MetaData-&gt; SetValue (NewProp_Score, TEXT (\"ModuleRelativePath\"), TEXT (\"ReflectionStudyGameMode.h\"));\n      #endif\n    }\n  }\n  check (OuterClass-&gt; GetClass ());\n  return OuterClass;\n}\n</code></pre> <ul> <li>The function of this function is to generate the UClass object of AReflectionStudyGameMode and register all UFunction and UProperty</li> <li>Z_Construct_UClass_AGameMode (); Because it inherits from AGameMode, the UClass of AGameMode must be valid.</li> <li>Z_Construct_UPackage__Script_ReflectionStudy (); Make sure UPackage has been created.</li> <li>The code in the #if WITH_METADATA macro is also used to create metadata.</li> </ul> C++<pre><code>static FCompiledInDefer Z_CompiledInDefer_UClass_AReflectionStudyGameMode (Z_Construct_UClass_AReflectionStudyGameMode, &amp; AReflectionStudyGameMode :: StaticClass, TEXT (\"AReflectionStudyGameMode\"), false, nullptr, nullptr);\nDEFINE_VTABLE_PTR_HELPER_CTOR (AReflectionStudyGameMode);\n</code></pre> <ul> <li>The first line of code is used to store a static function that creates a UClass, and this statically generated UClass function will be executed later</li> <li>DEFINE_VTABLE_PTR_HELPER_CTOR defines a parameter for the FVTableHelper constructor.</li> </ul> C++<pre><code>UPackage * Z_Construct_UPackage__Script_ReflectionStudy()\n{\n  static UPackage * ReturnPackage = NULL;\n  if (! ReturnPackage)\n  {\n    ReturnPackage = CastChecked (StaticFindObjectFast (UPackage :: StaticClass (), NULL, FName (TEXT (\"/ Script / ReflectionStudy\")), false, false));\n    ReturnPackage-&gt; SetPackageFlags (PKG_CompiledIn | 0x00000000);\n    FGuid Guid;\n    Guid.A = 0x00B770A5;\n    Guid.B = 0x8BECE3AF;\n    Guid.C = 0x00000000;\n    Guid.D = 0x00000000;\n    ReturnPackage-&gt; SetGuid (Guid);\n\n  }\n  return ReturnPackage;\n}\n</code></pre> <p>It is used to return the UPackage of the current module. The above code will use this parameter GetOuterMost () function, which returns this UPackage.</p> <p>So far we have made a brief introduction to the support of classes in the reflection system in UE4. I believe that everyone also has a certain understanding. Due to space limitations, we will stop here to discuss other USTRUCT, UENUM, etc. implementations, and They run the entire reflection system. Since I am not particularly familiar with UE4, there may be some inaccuracies in it. If there are errors, please correct me, and I hope everyone can discuss them together. Of course, I will also talk about the implementation of other modules in UE4, such as the implementation of the entire blueprint, multi-threaded rendering, and physical-based rendering.</p> <p>Because the size of the top class image is too large, the uploaded image is not particularly clear. The original high-definition image can be downloaded here [3].</p>"},{"location":"ue4guide/engine-programming/uobject-reflection/reflection-internals-2/","title":"Reflection System Details: Part 2","text":"<p>Source</p> <p>Previous article explained the reflection support for UCLASS in UE4. In this article, we will explain the support of Unreal 4 structure (USTRUCT) and enumeration (UENUM) in the form of examples .</p> <p>First let's look at the code that tests structure reflection support. We declared a structure with USTRUCT and told Unreal 4 that to support reflection type for this type, we added a float value to it to test the program.</p> C++<pre><code>#pragma once\n\n#include \"ReflectionStructTest.generated.h\"\n\nUSTRUCT (Blueprintable)\nstruct FReflectionTest\n{\nGENERATED_USTRUCT_BODY ()\n\nUPROPERTY (BlueprintReadWrite)\nfloat ReflectionValue;\n};\n</code></pre>"},{"location":"ue4guide/engine-programming/uobject-reflection/reflection-internals-2/#generated-generatedh-file","title":"Generated .generated.h file","text":"<p>After clicking compile, we got the .generated.h file. This code is the corresponding content after the GENERATED_USTRUCT_BODY () macro is expanded. The code is relatively simple, as shown below:</p> C++<pre><code>  // Copyright 1998-2016 Epic Games, Inc. All Rights Reserved.\n\n  / * ===================================================== =============================\n\n    C ++ class header boilerplate exported from UnrealHeaderTool.\n\n    This is automatically generated by the tools.\n\n    DO NOT modify this manually! Edit the corresponding .h files instead!\n\n  ======================================================= =========================== * /\n\n  #include \"ObjectBase.h\"\n\n  PRAGMA_DISABLE_DEPRECATION_WARNINGS\n  #ifdef REFLECTIONSTUDY_ReflectionStructTest_generated_h\n  #error \"ReflectionStructTest.generated.h already included, missing '#pragma once' in ReflectionStructTest.h\"\n  #endif\n\n  #define REFLECTIONSTUDY_ReflectionStructTest_generated_h\n\n  #define ReflectionStudy_Source_ReflectionStudy_ReflectionStructTest_h_9_GENERATED_BODY\n    friend REFLECTIONSTUDY_API class UScriptStruct * Z_Construct_UScriptStruct_FReflectionTest ();\n    REFLECTIONSTUDY_API static class UScriptStruct * StaticStruct ();\n\n  #undef CURRENT_FILE_ID\n  #define CURRENT_FILE_ID ReflectionStudy_Source_ReflectionStudy_ReflectionStructTest_h\n  PRAGMA_ENABLE_DEPRECATION_WARNINGS\n</code></pre> <p>It mainly does the following three things:</p> <ul> <li><code>friend REFLECTIONSTUDY_API class UScriptStruct * Z_Construct_UScriptStruct_FReflectionTest()</code> defines a friend function for creating the reflection object UScriptStruct of this structure</li> <li>REFLECTIONSTUDY_API static class UScriptStruct * StaticStruct (); defines a member function StaticStruct (), so that we can get its reflection structure through the class.</li> <li><code>#define CURRENT_FILE_ID ReflectionStudy_Source_ReflectionStudy_ReflectionStructTest_h</code> redefines CURRENT_FILE_ID. Please refer to the content mentioned at the beginning for a description of <code>GENERATED_USTRUCT_BODY()</code></li> </ul>"},{"location":"ue4guide/engine-programming/uobject-reflection/reflection-internals-2/#related-content-in-generatedcpp","title":"Related content in generated.cpp","text":"C++<pre><code>  UScriptStruct * Z_Construct_UScriptStruct_FReflectionTest ()\n  {\n    UPackage * Outer = Z_Construct_UPackage__Script_ReflectionStudy ();\n    extern uint32 Get_Z_Construct_UScriptStruct_FReflectionTest_CRC ();\n    static UScriptStruct * ReturnStruct = FindExistingStructIfHotReloadOrDynamic (Outer, TEXT (\"ReflectionTest\"), sizeof (FReflectionTest), Get_Z_Construct_UScriptStruct_FReflectionTest_CRC (), false);\n    if (! ReturnStruct)\n    {\n      ReturnStruct = new (EC_InternalUseOnlyConstructor, Outer, TEXT (\"ReflectionTest\"), RF_Public | RF_Transient | RF_MarkAsNative) UScriptStruct (FObjectInitializer (), NULL, new UScriptStruct :: TCppStructOps, EStructFlags (0x00000001);\n      UProperty * NewProp_ReflectionValue = new (EC_InternalUseOnlyConstructor, ReturnStruct, TEXT (\"ReflectionValue\"), RF_Public | RF_Transient | RF_MarkAsNative) UFloatProperty (CPP_PROPERTY_BASE (ReflectionValue, FReflectionTest), 0x0010000000000004);\n      ReturnStruct-&gt; StaticLink ();\n#if WITH_METADATA\n      UMetaData * MetaData = ReturnStruct-&gt; GetOutermost ()-&gt; GetMetaData ();\n      MetaData-&gt; SetValue (ReturnStruct, TEXT (\"BlueprintType\"), TEXT (\"true\"));\n      MetaData-&gt; SetValue (ReturnStruct, TEXT (\"IsBlueprintBase\"), TEXT (\"true\"));\n      MetaData-&gt; SetValue (ReturnStruct, TEXT (\"ModuleRelativePath\"), TEXT (\"ReflectionStructTest.h\"));\n      MetaData-&gt; SetValue (NewProp_ReflectionValue, TEXT (\"Category\"), TEXT (\"ReflectionTest\"));\n      MetaData-&gt; SetValue (NewProp_ReflectionValue, TEXT (\"ModuleRelativePath\"), TEXT (\"ReflectionStructTest.h\"));\n#endif\n    }\n    return ReturnStruct;\n  }\n  uint32 Get_Z_Construct_UScriptStruct_FReflectionTest_CRC () {return 486791486U;}\n</code></pre> <p>We can learn three things from the above code:</p> <ul> <li>Create UScriptStruct and add it to the current project specific package</li> <li>Create the ReflectionValue property we added above</li> <li>Add metadata for editor use, such as the BlueprintType we specified above in USTRUCT</li> </ul> C++<pre><code>  class UScriptStruct * FReflectionTest :: StaticStruct ()\n  {\n\n    extern REFLECTIONSTUDY_API class UPackage * Z_Construct_UPackage__Script_ReflectionStudy ();\n    static class UScriptStruct * Singleton = NULL;\n    if (! Singleton)\n    {\n      extern REFLECTIONSTUDY_API class UScriptStruct * Z_Construct_UScriptStruct_FReflectionTest ();\n      extern REFLECTIONSTUDY_API uint32 Get_Z_Construct_UScriptStruct_FReflectionTest_CRC ();\n      Singleton = GetStaticStruct (Z_Construct_UScriptStruct_FReflectionTest, Z_Construct_UPackage__Script_ReflectionStudy (), TEXT (\"ReflectionTest\"), sizeof (FReflectionTest), Get_Z_Construct_UScriptStruct_FReflectionTest_CRC ());\n    }\n    return Singleton;\n  }\n\n  static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FReflectionTest (FReflectionTest :: StaticStruct, TEXT (\"/ Script / ReflectionStudy\"), TEXT (\"ReflectionTest\"), false, nullptr, nullptr);\n</code></pre> <p>The above code does two things:</p> <ul> <li>StaticStruct () determines whether the Singleton is empty. If it is empty, then GetStaticStruct () is called, and GetStaticStruct () just calls the Z_Construct_UScriptStruct_FReflectionTest () function.</li> </ul> C++<pre><code>  class UScriptStruct * GetStaticStruct (class UScriptStruct * (* InRegister) (), UObject * StructOuter, const TCHAR * StructName, SIZE_T Size, uint32 Crc)\n  {\n    return (* InRegister) ();\n  }\n</code></pre> <ul> <li>Defines a static global variable that is used to register to a list and calls the StaticStruct () method when the engine is initialized.</li> </ul> C++<pre><code>  static struct FScriptStruct_ReflectionStudy_StaticRegisterNativesFReflectionTest\n  {\n    FScriptStruct_ReflectionStudy_StaticRegisterNativesFReflectionTest ()\n    {\n      UScriptStruct :: DeferCppStructOps (FName (TEXT (\"ReflectionTest\")), new UScriptStruct :: TCppStructOps);\n    }\n  } ScriptStruct_ReflectionStudy_StaticRegisterNativesFReflectionTest;\n</code></pre> <ul> <li>Define a static variable for storing a CppStructOps (mainly used to dynamically obtain the structure and destructor of a structure) for use in a program.</li> </ul> <p>Next, let's look at the implementation of enumeration. The test code is as follows:</p> C++<pre><code>  UENUM (BlueprintType)\n  enum class EReflectionTest: uint8\n  {\n    E0,\n    E1\n  };\n</code></pre>"},{"location":"ue4guide/engine-programming/uobject-reflection/reflection-internals-2/#generated-generatedh-file_1","title":"Generated .generated.h file","text":"<p>Compiling the code, we will get the following code in the .generated.h file, which only defines a FOREACH_ENUM_EREFLECTIONTEST macro.</p> C++<pre><code>  #define FOREACH_ENUM_EREFLECTIONTEST (op)\n    op (EReflectionTest :: E0)\n    op (EReflectionTest :: E1)\n</code></pre>"},{"location":"ue4guide/engine-programming/uobject-reflection/reflection-internals-2/#related-code-in-generatedcpp","title":".Related code in generated.cpp","text":"C++<pre><code>    UEnum * Z_Construct_UEnum_ReflectionStudy_EReflectionTest ()\n    {\n      UPackage * Outer = Z_Construct_UPackage__Script_ReflectionStudy ();\n      extern uint32 Get_Z_Construct_UEnum_ReflectionStudy_EReflectionTest_CRC ();\n      static UEnum * ReturnEnum = FindExistingEnumIfHotReloadOrDynamic (Outer, TEXT (\"EReflectionTest\"), 0, Get_Z_Construct_UEnum_ReflectionStudy_EReflectionTest_CRC (), false);\n      if (! ReturnEnum)\n      {\n        ReturnEnum = new (EC_InternalUseOnlyConstructor, Outer, TEXT (\"EReflectionTest\"), RF_Public | RF_Transient | RF_MarkAsNative) UEnum (FObjectInitializer ());\n        TArray&gt; EnumNames;\n        EnumNames.Add (TPairInitializer (FName (TEXT (\"EReflectionTest :: E0\")), 0));\n        EnumNames.Add (TPairInitializer (FName (TEXT (\"EReflectionTest :: E1\")), 1));\n        EnumNames.Add (TPairInitializer (FName (TEXT (\"EReflectionTest :: EReflectionTest_MAX\")), 2));\n        ReturnEnum-&gt; SetEnums (EnumNames, UEnum :: ECppForm :: EnumClass);\n        ReturnEnum-&gt; CppType = TEXT (\"EReflectionTest\");\n  #if WITH_METADATA\n        UMetaData * MetaData = ReturnEnum-&gt; GetOutermost ()-&gt; GetMetaData ();\n        MetaData-&gt; SetValue (ReturnEnum, TEXT (\"BlueprintType\"), TEXT (\"true\"));\n        MetaData-&gt; SetValue (ReturnEnum, TEXT (\"ModuleRelativePath\"), TEXT (\"ReflectionStructTest.h\"));\n  #endif\n      }\n      return ReturnEnum;\n    }\n\n    uint32 Get_Z_Construct_UEnum_ReflectionStudy_EReflectionTest_CRC () {return 1111016117U;}\n</code></pre> <p>The main function of the above code is:</p> <ul> <li>Check whether the reflected UEnum is generated. If it is not generated, then a UEnum will be new and E0, E1, and two enums we defined will be added, and an enum of 'enum name + _Max' will be added by default value</li> <li>Metadata needed to register the editor, such as the BlueprintType we added in UENUM ()</li> </ul> C++<pre><code>  static class UEnum * EReflectionTest_StaticEnum ()\n  {\n    extern REFLECTIONSTUDY_API class UPackage * Z_Construct_UPackage__Script_ReflectionStudy ();\n    static class UEnum * Singleton = NULL;\n    if (! Singleton)\n    {\n      extern REFLECTIONSTUDY_API class UEnum * Z_Construct_UEnum_ReflectionStudy_EReflectionTest ();\n      Singleton = GetStaticEnum (Z_Construct_UEnum_ReflectionStudy_EReflectionTest, Z_Construct_UPackage__Script_ReflectionStudy (), TEXT (\"EReflectionTest\"));\n    }\n    return Singleton;\n  }\n\n  static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EReflectionTest (EReflectionTest_StaticEnum, TEXT (\"/ Script / ReflectionStudy\"), TEXT (\"EReflectionTest\"), false, nullptr, nullptr);\n</code></pre> <p>This code is similar to the above structure, and it mainly does two things:</p> <ul> <li>EReflectionTest_StaticEnum () determines whether the Singleton is empty. If it is empty, use GetStaticEnum to create or return a UEnum object. For details, refer to GetStaticEnum.</li> <li>Register the EReflectionTest_StaticEnum () function to a list for calling when the engine starts.</li> </ul> <p>So far, you have a simple understanding of how classes, structures, functions, properties, and variables support reflection in Unreal 4. I believe you have a certain understanding. But specifically how to register to the engine's initialization list and how to call it, we have not expanded here, limited to space issues, we will explain the content in the next article, of course, if I can also put in C ++ Several ways to support reflection types are also introduced.</p>"},{"location":"ue4guide/engine-programming/uobject-reflection/reflection-internals-3/","title":"Reflection System Details: Part 3","text":"<p>Source</p> <p>The previous two articles introduced the support for reflection in Unreal Engine (if you haven't read the first two articles, I recommend that you take a closer look, otherwise you may not know what I'm talking about), but it's still a bit short That is, how this information is added to the runtime. After talking about it, this series is basically over, let's enter the text below.</p> <p>Unreal Engine uses a series of static variables to register functions that need to generate reflection information. This has been covered in detail in our previous article. As for the benefits of using the generated C ++ code, I also talked about it in my translated article. I'll post it here.</p> <p>One of the biggest benefits of using generated C ++ code to store reflection data is that it guarantees synchronization with the binary. You will never load stale or outdated reflection data, because it is compiled with other engine code at the same time, and it will use C ++ expressions to calculate member offsets, etc. when the program starts, rather than by targeting specific platforms / Compiler / optimized combination for reverse engineering. UHT is built as a separate program that does not use any header files, so it also avoids the chicken and egg problem, which has been criticized in the Unreal 3 script compiler.</p>"},{"location":"ue4guide/engine-programming/uobject-reflection/reflection-internals-3/#uclass","title":"UCLASS","text":"<p>For class reflection support, Unreal 4 is done in two steps.</p> <ol> <li>IMPLEMENT_CLASS () This macro is used to register this class when the program starts, including generating UClass classes and registering C ++ native functions.</li> <li>static FCompiledInDefer creates a static variable to add a registration function to the DeferredCompiledInRegistration static array to initialize the default reflection properties. Including functions, member variables, metadata, etc.</li> </ol>"},{"location":"ue4guide/engine-programming/uobject-reflection/reflection-internals-3/#ustruct","title":"USTRUCT","text":"<p>For structural support, the Unreal Engine 4 is also divided into two steps.</p> <ol> <li>static FCompiledInDeferStruct stores a singleton function for constructing a structure, which is called when the program starts. The reader can check the code to know the process.</li> <li>A static object will also be created. This object will call UScriptStruct :: DeferCppStructOps in the constructor, which is used to register a class that dynamically manages the structure construction and destruction of this DeferredCppStructOps map.</li> </ol> <p>Enumeration is relatively simple, with only one step.</p> <ol> <li>static FCompiledInDeferEnum creates a static variable for storing a singleton function that creates an enumerated reflection object when the program starts.</li> </ol> <p>Above we explained the process of registering information, and their execution is performed with the loading of the current module. We all know that the initialization of static variables is performed before the Main function. Below we briefly draw the startup process of Unreal Editor so that we can accurately see the entire process of registering reflection information.</p> <p></p> <p>You can see that the void ProcessNewlyLoadedUObjects () function is our main concern. The registration information we mentioned earlier, including reflection information of classes, structures, and enumeration types, will be registered here. Its code is as follows:</p> C++<pre><code>void ProcessNewlyLoadedUObjects ()\n{\n  DECLARE_SCOPE_CYCLE_COUNTER (TEXT (\"ProcessNewlyLoadedUObjects\"), STAT_ProcessNewlyLoadedUObjects, STATGROUP_ObjectVerbose);\n\n#if WITH_HOT_RELOAD\n  UClassGenerateCDODuplicatesForHotReload ();\n#endif\n  UClassRegisterAllCompiledInClasses ();\n\n  while (AnyNewlyLoadedUObjects ())\n  {\n    UObjectProcessRegistrants ();\n    UObjectLoadAllCompiledInStructs ();\n    UObjectLoadAllCompiledInDefaultProperties ();\n  }\n#if WITH_HOT_RELOAD\n  UClassReplaceHotReloadClasses ();\n#endif\n}\n</code></pre> <p>Below we give a simple explanation of the above code, the reader can also flip through the code to see how it is implemented.</p> <ol> <li>The WITH_HOT_RELOAD macro in the code is used to handle the hot loading of C ++ code.</li> <li>UClassRegisterAllCompiledInClasses () is used to register all the classes to be loaded. All the classes inside are added through the previous IMPLEMENT_CLASS () macro.</li> <li>UObjectProcessRegistrants () is used to process automatically registered objects and add them to the ObjectArray for later retrieval.</li> <li>UObjectLoadAllCompiledInStructs () is used to register structure and enumeration reflection information. The array in the array is registered with static objects created by FCompiledInDeferStruct and FCompiledInDeferEnum.</li> <li>UObjectLoadAllCompiledInDefaultProperties () is used to register reflection information of the class and create a default object (CDO).</li> </ol> <p>To this end, the three articles in this series show readers the implementation of the reflection system in Unreal by way of examples. The principle is actually very simple. There are also some methods on the Internet that support reflection classes in C ++. One, because of the help of UHT, we do not have to do a lot of dirty and tired work. For example, the most stupid way is to implement some macros to register various reflection information, but this is still relatively inefficient. Some implementation methods start with the debugging information generated by the compiler, such as the pdb file generated by vs, or the file generated by clang. This is also possible, but it has a relatively large problem that cross-platform support is not particularly friendly. . Therefore, this set of UHT tools in Unreal 4 is still very good in general. If you have time later, I hope to bring you an analysis of UHT tools. By the way, if you have anything you want to know about the Unreal 4 engine, please feel free to leave a comment below. I will also choose the modules that are more interesting for you to analyze first. Next, I may focus on the implementation of Blueprint in Unreal and the specific implementation of physical-based rendering. Stay tuned!</p>"},{"location":"ue4guide/engine-programming/uobject-reflection/uobject-reflection/","title":"UE4 Reflection Overview","text":"<p>https://www.unrealengine.com/blog/unreal-property-system-reflection</p> <p>The type hierarchy for the property system looks like this:</p> <ul> <li>UField</li> <li>UStruct<ul> <li>UClass (C++ class)</li> <li>UScriptStruct (C++ struct)</li> <li>UFunction (C++ function)</li> </ul> </li> <li>UEnum (C++ enumeration)</li> <li>UProperty (C++ member variable or function parameter)<ul> <li>(Many subclasses for different types)</li> </ul> </li> </ul> <p>UStruct is the basic type of aggregate structures (anything that contains other members, such as a C++ class, struct, or function), and shouldn\u2019t be confused with a C++ struct (that's UScriptStruct). UClass can contain functions or properties as their children, while UFunction and UScriptStruct are limited to just properties.</p>"},{"location":"ue4guide/engine-programming/uobject-reflection/uobject-reflection/#uscriptstructs","title":"UScriptStructs","text":""},{"location":"ue4guide/engine-programming/uobject-reflection/uobject-reflection/#manipulation","title":"Manipulation","text":"<p>The main place to access a lot of manipulation helpers is through <code>UScriptStruct::ICppStructOps</code>. Some useful bits:</p> C++<pre><code>UScriptStruct::ICppStructOps&amp; StructCppOps = FES2ArchTypeEntitiesTable::StaticStruct()-&gt;GetCppStructOps();\nint32 StructSize = StructCppOps-&gt;GetSize();\nint32 StructAlignment = StructCppOps-&gt;GetAlignment();\nvoid* Allocation = FMemory::Malloc(StructSize, StructAlignment);\nStructCppOps-&gt;Construct(Allocation);\nStructCppOps-&gt;Serialize(...)\nStructCppOps-&gt;NetSerialize(...)\n</code></pre>"},{"location":"ue4guide/engine-programming/uobject-reflection/uobject-reflection/#initialize-struct","title":"Initialize Struct","text":"C++<pre><code>StructMemory = (uint8*)FMemory::Malloc(ActualStruct-&gt;GetStructureSize());\nActualStruct-&gt;InitializeStruct(StructMemory);\n</code></pre>"},{"location":"ue4guide/engine-programming/uobject-reflection/uobject-reflection/#copy-struct","title":"Copy Struct","text":"C++<pre><code>if (ProcAnimComponent &amp;&amp; OutInitValueStore)\n{\n     void* RowPtr = Table-&gt;FindRowUnchecked(RowName);\n     if (RowPtr != NULL)\n     {\n         UScriptStruct* StructType = Table-&gt;RowStruct;\n         if (StructType != NULL)\n         {\n             StructType-&gt;CopyScriptStruct(OutRowPtr, RowPtr);\n             bFoundRow = true;\n         }\n     }\n}\n</code></pre>"},{"location":"ue4guide/engine-programming/uobject-reflection/uobject-reflection/#destroy-struct","title":"Destroy Struct","text":"C++<pre><code>UScriptStruct* structType = FESCompSumType::GetStructType(CompStructType);\n            structType-&gt;DestroyStruct(StructData);\n</code></pre>"},{"location":"ue4guide/engine-programming/uobject-reflection/uobject-reflection/#reflection-through-struct-params-apart","title":"Reflection through Struct Params apart","text":"C++<pre><code>FMovieSceneEvalTemplatePtr&amp; operator=(const FMovieSceneEvalTemplatePtr&amp; RHS)\n{\n  if (RHS.IsValid())\n  {\n    UScriptStruct::ICppStructOps&amp; StructOps = *RHS-&gt;GetScriptStruct().GetCppStructOps();\n\n    void* Allocation = Reserve(StructOps.GetSize(), StructOps.GetAlignment());\n    StructOps.Construct(Allocation);\n    StructOps.Copy(Allocation, &amp;RHS.GetValue(), 1);\n  }\n\n  return *this;\n}\n</code></pre> <p>Reference: https://forums.unrealengine.com/community/community-content-tools-and-tutorials/27351-tutorial-how-to-accept-wildcard-structs-in-your-ufunctions</p>"},{"location":"ue4guide/engine-programming/uobject-reflection/uobject-reflection/#iterate-over-ustruct-members","title":"Iterate over UStruct members","text":"<p>To iterate over all members of a UStruct, use a TFieldIterator:</p> C++<pre><code>for (TFieldIterator&lt;UProperty&gt; PropIt(GetClass()); PropIt; ++PropIt)\n{\n  UProperty* Property = *PropIt;\n  // Do something with the property\n}\n</code></pre> <p>Each type has a unique set of flags (EClassFlags + HasAnyClassFlags, etc\u2026), as well as a generic metadata storage system inherited from UField.</p>"},{"location":"ue4guide/engine-programming/uobject-reflection/uobject-reflection/#look-up--find-a-property","title":"Look up / Find a property","text":"C++<pre><code>FindField&lt;UProperty&gt;(Struct, VarDesc-&gt;VarName)\n</code></pre>"},{"location":"ue4guide/engine-programming/uobject-reflection/uobject-reflection/#exportimport-text-from-uproperty","title":"Export/Import text from UProperty","text":"C++<pre><code>Property-&gt;ExportText_InContainer(0, PropertyValue, RowData, RowData, nullptr, PPF_None);\n</code></pre>"},{"location":"ue4guide/engine-programming/uobject-reflection/uobject-reflection/#comparison","title":"Comparison","text":""},{"location":"ue4guide/engine-programming/uobject-reflection/uobject-reflection/#compare-uproperty-equality","title":"Compare UProperty Equality","text":"<p>If two properties are identical:</p> C++<pre><code>UProperty::Identical( const void* A, const void* B, uint32 PortFlags=0 )\nUProperty::Identical_InContainer()\n</code></pre>"},{"location":"ue4guide/engine-programming/uobject-reflection/uobject-reflection/#compare-ustruct-instances","title":"Compare UStruct instances","text":"<p>CompareScriptStruct</p>"},{"location":"ue4guide/engine-programming/uobject-reflection/uobject-reflection/#compare-ustructs-type-equality","title":"Compare UStructs Type Equality","text":"<p>Compare if two UStructs types (not C++ structs but UE4 USTRUCT meaning class type, property, etc) are the same:</p> C++<pre><code>FStructUtils::ArePropertiesTheSame(PropA, PropB, false)\nFStructUtils::TheSameLayout(const UStruct* StructA, const UStruct* StructB, bool bCheckPropertiesNames)\n</code></pre>"},{"location":"ue4guide/engine-programming/uobject-reflection/uobject-reflection/#hook-into-uobjectuproperty-change-modification-delegates","title":"Hook Into UObject/UProperty change modification delegates","text":"<p>[Listen on property changes and notifies/notifications:]</p>"},{"location":"ue4guide/engine-programming/uobject-reflection/uobject-reflection/#special-callbacks","title":"Special Callbacks","text":"C++<pre><code>virtual void EditorApplyTranslation(const FVector&amp; DeltaTranslation, bool bAltDown, bool bShiftDown, bool bCtrlDown) override;\nvirtual void EditorApplyRotation(const FRotator&amp; DeltaRotation, bool bAltDown, bool bShiftDown, bool bCtrlDown) override;\nvirtual void EditorApplyScale(const FVector&amp; DeltaScale, const FVector* PivotLocation, bool bAltDown, bool bShiftDown, bool bCtrlDown) override;\nvirtual void PostEditMove(bool bFinished) override;\nvirtual void PostEditComponentMove(bool bFinished) override;\n</code></pre>"},{"location":"ue4guide/engine-programming/uobject-reflection/uobject-reflection/#export-ustruct-to-string","title":"Export UStruct to String","text":"C++<pre><code>UScriptStruct* structClass = FBBStadCamManip::StaticStruct();\nFString outStr;\nstructClass-&gt;ExportText(outStr, &amp;stadCamManipVal, nullptr, nullptr, PPF_None, nullptr);\n</code></pre>"},{"location":"ue4guide/engine-programming/uobject-reflection/uobject-reflection/#ufunctions","title":"UFunctions","text":""},{"location":"ue4guide/engine-programming/uobject-reflection/uobject-reflection/#introspect-ufunction","title":"Introspect UFunction","text":"Bash<pre><code>LISTFUNCS\nLISTFUNC - List details about a function including parameters and byte sizes\n</code></pre> <p>These are helpful functions to look at for examples:</p> C++<pre><code>UFunction::IsSignatureCompatibleWith\nTFieldIterator&lt;UProperty&gt; IteratorA(ufunc);\n</code></pre>"},{"location":"ue4guide/engine-programming/uobject-reflection/uobject-reflection/#check-if-a-ufunction-is-latent","title":"Check if a UFunction is latent","text":"C++<pre><code>bIsLatent = (Function-&gt;HasMetaData(FBlueprintMetadata::MD_Latent) != false);\n</code></pre>"},{"location":"ue4guide/engine-programming/uobject-reflection/uobject-reflection/#find-no-parameters-event","title":"Find No Parameters Event","text":"C++<pre><code>this-&gt;GetClass()-&gt;FindFunctionByName(\"ReceiveBeginPlay\", EIncludeSuperFlag::ExcludeSuper)\nUFunction* EventTarget = this-&gt;FindFunction(EventName);\nif( EventTarget &amp;&amp; EventTarget-&gt;NumParms == 0)\n{\n  LSA-&gt;ProcessEvent(EventTarget, NULL);\n  bFoundEvent = true;\n}\n</code></pre>"},{"location":"ue4guide/engine-programming/uobject-reflection/uobject-reflection/#ufunction-parameters","title":"UFunction Parameters","text":""},{"location":"ue4guide/engine-programming/uobject-reflection/uobject-reflection/#calling-ufunction-through-reflection","title":"Calling UFunction Through Reflection","text":"<p>https://answers.unrealengine.com/questions/7732/a-sample-for-calling-a-ufunction-with-reflection.html</p>"},{"location":"ue4guide/engine-programming/uobject-reflection/uobject-reflection/#compare-ufunctions-signatures","title":"Compare UFunctions Signatures","text":"C++<pre><code>UFunction::IsSignatureCompatibleWith(const UFunction* OtherFunction, uint64 IgnoreFlags) const\n</code></pre>"},{"location":"ue4guide/engine-programming/uobject-reflection/uobject-reflection/#iterate-ufunction-parameters","title":"Iterate UFunction Parameters","text":"C++<pre><code>for (TFieldIterator&lt;UFunction&gt; FunctionIt(this-&gt;GetClass(), EFieldIteratorFlags::ExcludeSuper); FunctionIt; ++FunctionIt)\n{\n  UFunction* Function = *FunctionIt;\n}\n</code></pre>"},{"location":"ue4guide/engine-programming/uobject-reflection/uobject-reflection/#retrieve-ufunction-parameters-default-value","title":"Retrieve UFunction Parameters Default Value","text":"<p>Hi,</p> <p>This cannot be known in general, but you can check the UFunction's \"CPP_Default_\" metadata to see if a given parameter has a default argument, and the value of that default.</p> <p>However, only default arguments of certain types and values can be parsed and, as it's metadata, this information only exists in builds with WITH_METADATA defined, which is basically editor-only.</p> <p>Hope this helps,</p> <p>Steve</p> <p>Reference From https://answers.unrealengine.com/questions/545342/how-can-i-know-ufunction-contain-how-many-paramete.html?sort=oldest&amp;lang=zh-CN</p>"},{"location":"ue4guide/engine-programming/uobject-reflection/uobject-reflection/#uclass","title":"UClass","text":""},{"location":"ue4guide/engine-programming/uobject-reflection/uobject-reflection/#iterate-class-inheritance-hierarchy","title":"Iterate Class Inheritance Hierarchy","text":"<p>Finding a specific subclass in a class' hierarchy chain:</p> C++<pre><code>// Construct list of non-abstract sound node classes.\nfor(TObjectIterator&lt;UClass&gt; It; It; ++It)\n{\n  if(It-&gt;IsChildOf(USoundNode::StaticClass())\n    &amp;&amp; !It-&gt;HasAnyClassFlags(CLASS_Abstract))\n  {\n    SoundNodeClasses.Add(*It);\n  }\n}\n</code></pre>"},{"location":"ue4guide/engine-programming/uobject-reflection/uobject-reflection/#find-class-or-ustruct-by-name","title":"Find Class or UStruct by name","text":"C++<pre><code>FClass* FClasses::FindClass(const TCHAR* ClassName) const\nUObject* ClassPackage = ANY_PACKAGE;\nUClass* Result = FindObject&lt;UClass&gt;(ClassPackage, ClassName);\n</code></pre> <p>Reference From https://answers.unrealengine.com/questions/92651/get-blueprint-class-by-string-in-c.html</p>"},{"location":"ue4guide/engine-programming/uobject-reflection/uobject-reflection/#user-defined-structs","title":"User Defined Structs","text":""},{"location":"ue4guide/engine-programming/uobject-reflection/uobject-reflection/#programmatically-create-uuserdefinedstruct","title":"Programmatically Create UUserDefinedStruct","text":"C++<pre><code>return FStructureEditorUtils::CreateUserDefinedStruct(InParent, Name, Flags);\nFStructureEditorUtils::AddVariable(StructureDetailsSP-&gt;GetUserDefinedStruct(), InitialPinType);\n</code></pre>"},{"location":"ue4guide/engine-programming/uobject-reflection/uobject-reflection/#change-uuserdefinedstructs-parent-struct","title":"Change UUserDefinedStruct's Parent Struct","text":"C++<pre><code>FStructureEditorUtils::CreateUserDefinedStruct():\n  ((UUserDefinedStructEditorData*)(Struct-&gt;EditorData))-&gt;NativeBase = FNativeBaseS::StaticStruct();\n</code></pre>"},{"location":"ue4guide/engine-programming/uobject-reflection/uobject-reflection/#programmatically-construct-structuscriptstruct","title":"Programmatically Construct Struct/UScriptStruct","text":"C++<pre><code>template&lt;typename T&gt;\nT ConstructTInlineValue(UScriptStruct* Struct)\nstatic void SetStructurePropertyByName(UObject* Object, FName PropertyName, const T&amp; Value)\nUKismetSystemLibrary::Generic_SetStructurePropertyByName(Object, PropertyName, &amp;Value);\n</code></pre>"},{"location":"ue4guide/engine-programming/uobject-reflection/wrapper-structs/","title":"Exposing Wrapper/SumType/Variant Structs to Blueprints","text":"<p>I think you should be able to produce this sort of effect similar to the Get Data Table Row node, which casts the values in a data table to the correct output pin type based on a UScriptStruct which is derived from the inputs.</p> <p>It may help to visualize by dropping one of these nodes into a blueprint editor (also have a data table to actually hook it up to). You'll see the output type changes according to the type in the data table row.</p> <p>In C++, reference UK2Node_GetDataTableRow. I think of particular interest for the purpose of controlling the output pin type will be the SetReturnTypeForStruct method .</p> <p>Depending on how you do it, it may also be useful to use a UK2Node_CallFunction, which you can see an example of in ExpandNode where we use GetDataTableRowFromName . Here it's used to transform the row name, but you may find a similar use for this elsewhere.</p> <p>Reference From https://udn.unrealengine.com/questions/458599/view.html</p>"},{"location":"ue4guide/engine-programming/uobject-reflection/wrapper-structs/#how-to-create-wrapper-structs","title":"How To Create Wrapper Structs","text":"C++<pre><code>USTRUCT()\nstruct FMovieSceneEventParameters\n{\n  GENERATED_BODY()\n\n  FMovieSceneEventParameters() {}\n\n  /** Construction from a struct type */\n  FMovieSceneEventParameters(UStruct&amp; InStruct)\n    : StructType(&amp;InStruct)\n  {\n  }\n\n  FMovieSceneEventParameters(const FMovieSceneEventParameters&amp; RHS) = default;\n  FMovieSceneEventParameters&amp; operator=(const FMovieSceneEventParameters&amp; RHS) = default;\n\n#if PLATFORM_COMPILER_HAS_DEFAULTED_FUNCTIONS\n  FMovieSceneEventParameters(FMovieSceneEventParameters&amp;&amp;) = default;\n  FMovieSceneEventParameters&amp; operator=(FMovieSceneEventParameters&amp;&amp;) = default;\n#else\n  FMovieSceneEventParameters(FMovieSceneEventParameters&amp;&amp; RHS)\n  {\n    *this = MoveTemp(RHS);\n  }\n  FMovieSceneEventParameters&amp; operator=(FMovieSceneEventParameters&amp;&amp; RHS)\n  {\n    StructType = MoveTemp(RHS.StructType);\n    StructBytes = MoveTemp(RHS.StructBytes);\n    return *this;\n  }\n#endif\n\n  void OverwriteWith(const TArray&lt;uint8&gt;&amp; Bytes)\n  {\n    StructBytes = Bytes;\n  }\n\n  void GetInstance(FStructOnScope&amp; OutStruct) const\n  {\n    UStruct* StructPtr = StructType.Get();\n    OutStruct.Initialize(StructPtr);\n    uint8* Memory = OutStruct.GetStructMemory();\n    if (StructPtr &amp;&amp; StructPtr-&gt;GetStructureSize() &gt; 0 &amp;&amp; StructBytes.Num())\n    {\n      FMemoryReader Reader(StructBytes);\n      StructPtr-&gt;SerializeTaggedProperties(Reader, Memory, StructPtr, nullptr);\n    }\n  }\n\n  UStruct* GetStructType() const\n  {\n    return StructType.Get();\n  }\n\n  void Reassign(UStruct* NewStruct)\n  {\n    StructType = NewStruct;\n\n    if (!NewStruct)\n    {\n      StructBytes.Reset();\n    }\n  }\n\n  bool Serialize(FArchive&amp; Ar)\n  {\n    UStruct* StructTypePtr = StructType.Get();\n    Ar &lt;&lt; StructTypePtr;\n    StructType = StructTypePtr;\n\n    Ar &lt;&lt; StructBytes;\n\n    return true;\n  }\n\n  friend FArchive&amp; operator&lt;&lt;(FArchive&amp; Ar, FMovieSceneEventParameters&amp; Payload)\n  {\n    Payload.Serialize(Ar);\n    return Ar;\n  }\n\nprivate:\n\n  TWeakObjectPtr&lt;UStruct&gt; StructType;\n  TArray&lt;uint8&gt; StructBytes;\n};\n</code></pre>"},{"location":"ue4guide/engine-programming/uobject-serialization/hooking-into-saving-serialization/","title":"Hooking into saving serialization","text":"C++<pre><code>/**\n\n* Called from within SavePackage on the passed in base/ root. The return value of this function will be passed to\n\n* PostSaveRoot. This is used to allow objects used as base to perform required actions before saving and cleanup\n\n* afterwards.\n\n* @param Filename: Name of the file being saved to (includes path)\n\n* @param AdditionalPackagesToCook [out] Array of other packages the Root wants to make sure are cooked when this is cooked\n\n*\n\n* @return Whether PostSaveRoot needs to perform internal cleanup\n\n*/\n\nvirtual bool PreSaveRoot(const TCHAR\\* Filename, TArray&lt;FString&gt;&amp; AdditionalPackagesToCook)\n\n{\n\nreturn false;\n\n}\n\n/**\n\n* Presave function. Gets called once before an object gets serialized for saving. This function is necessary\n\n* for save time computation as Serialize gets called three times per object from within SavePackage.\n\n*\n\n* @warning: Objects created from within PreSave will NOT have PreSave called on them!!!\n\n*/\n\nvirtual void PreSave(const class ITargetPlatform\\* TargetPlatform);\n\nMake sure to override cooking process somehow so that any lazily referenced objects in your new asset are added to the cook &amp; inclusion process\n\nLook at UDataTable::Serialize() &amp; UWorld::AddReferencedObjects &amp;\n\nUWorld::PreSaveRoot(const TCHAR\\* **Filename**, TArray&lt;FString&gt;&amp; **AdditionalPackagesToCook**)\n\nvirtual void CookAdditionalFiles( const TCHAR* PackageFilename, const ITargetPlatform* TargetPlatform ) { }\n</code></pre>"},{"location":"ue4guide/engine-programming/uobject-serialization/uobject-ustruct-serialization/","title":"Uobject ustruct serialization","text":""},{"location":"ue4guide/engine-programming/uobject-serialization/uobject-ustruct-serialization/#serialize-struct","title":"Serialize Struct:","text":"C++<pre><code>Ar &lt;&lt; ObjectClass;\n\nuStruct-&gt;SerializeItem(Ar, Allocation, nullptr);\n\nif (Ar.ArIsLoading)\nObject = NewObject&lt;UObject&gt;(ObjectClass, ...);\n\nif (Ar.WantBinaryPropertySerialization())\nObjectClass-&gt;SerializeBin(Ar, Object);\nelse\nObjectClass-&gt;SerializeTaggedProperties(Ar,Object,...);\n</code></pre> <p>Serialize Enum:</p> C++<pre><code>FORCEINLINE friend FArchive&amp; operator&lt;&lt;(FArchive&amp; Ar, EnumType&amp; Value)\n{\n  return Ar &lt;&lt; (\\_\\_underlying_type(EnumType)&amp;)Value;\n}\n</code></pre> <p>UObject</p> <p>ObjectReader/ObjectWriter only to be able to serialize the actual objects into byte arrays. We have not found any other archives that do this for us in a good way.</p> <p>Reference From https://udn.unrealengine.com/questions/299982/serialize-objects-for-loadsave.html</p> <p>These will iterate through the UProperties in the class and either write binary (fast but difficult or impossible to save delta properties during development) or tagged properties (slower but allows delta properties). So the idea is to first serialize the object class using Ar &lt;&lt; ObjectClass; then spawn an instance of that class (if loading), then serialize the properties using the class and instance.</p> <p>Reference From https://forums.unrealengine.com/development-discussion/c-gameplay-programming/1374656-how-to-load-an-object-from-binary-without-knowing-its-exact-class</p>"},{"location":"ue4guide/engine-programming/uobject-serialization/uobject-ustruct-serialization/#arissavegame--true","title":"ArIsSaveGame = True","text":"<p>the super undocumented secret to serializing any data to or from an object based on whether the CPF_SaveGame flag is set, is super simple: When you are creating your FMemoryWriter, you MUST have the ArIsSaveGame flag set to true. By default, it's false. IF you forget to set this flag, the Memory Writer will try to serialize your ENTIRE object, and it will loop through EVERY property and try to serialize it.</p> <p>Reference From https://forums.unrealengine.com/development-discussion/c-gameplay-programming/88477-spawning-actors-from-serialized-data?116235-Spawning-Actors-from-Serialized-Data=&amp;viewfull=1</p>"},{"location":"ue4guide/engine-programming/uobject-serialization/uobject-ustruct-serialization/#saving-data-to-file","title":"Saving data to file","text":"<p>Archive to bytearray to File</p> C++<pre><code>FActorSaveData ActorRecord;\nActorRecord.ActorName = FName(*Actor-&gt;GetName());\nActorRecord.ActorClass = Actor-&gt;GetClass()-&gt;GetPathName();\nActorRecord.ActorTransform = Actor-&gt;GetTransform();\n\nFMemoryWriter MemoryWriter(ActorRecord.ActorData, true);\nFSaveGameArchive Ar(MemoryWriter);\nActor-&gt;Serialize(Ar);\n\n SavedActors.Add(ActorRecord);\n ISaveableActorInterface::Execute_ActorSaveDataSaved(Actor);\n</code></pre> <p>After all the actor records are saved, we can create the final save game.</p> C++<pre><code>FSaveGameData SaveGameData;\n\nSaveGameData.GameID = \"1234\";\nSaveGameData.Timestamp = FDateTime::Now();\nSaveGameData.SavedActors = SavedActors;\n\nFBufferArchive BinaryData;\n\nBinaryData &lt;&lt; SaveGameData;\n</code></pre> <p>After we have created the final save file and serialized it, we can store the byte array to a file.</p> C++<pre><code>if (FFileHelper::SaveArrayToFile(BinaryData, *FString(\"TestSave.sav\")))\n\n{\n\nUE_LOG(LogTemp, Warning, TEXT(\"Save Success! %s\"), FPlatformProcess::BaseDir());\n\n}\n\nelse\n\n{\n\nUE_LOG(LogTemp, Warning, TEXT(\"Save Failed!\"));\n\n}\n\nBinaryData.FlushCache();\n\nBinaryData.Empty();\n</code></pre> <p>Reference From http://runedegroot.com/saving-and-loading-actor-data-in-unreal-engine-4</p> <p>Alternate way to do it directly with proxy archive:</p> C++<pre><code>FArchive* FileWriter = IFileManager::Get().CreateFileWriter(*ProfileFileName);\n\nif(FileWriter != nullptr)\n\n{\n\nFCollisionAnalyzerProxyArchive Ar(*FileWriter);\n\nint32 Magic = COLLISION_ANALYZER_MAGIC;\n\nint32 Version = COLLISION_ANALYZER_VERSION;\n\nAr &lt;&lt; Magic;\n\nAr &lt;&lt; Version;\n\nAr &lt;&lt; Queries;\n\nFileWriter-&gt;Close();\n\ndelete FileWriter;\n\nFileWriter = NULL;\n\nUE_LOG(LogCollisionAnalyzer, Log, TEXT(\"Saved collision analyzer data to file '%s'.\"), *ProfileFileName);\n\n}\n</code></pre>"},{"location":"ue4guide/engine-programming/uobject-serialization/uobject-ustruct-serialization/#loading-actors","title":"Loading Actors","text":"<p>Loading the data from file</p> <p>To load the binary data</p> C++<pre><code>TArray&lt;uint8&gt;BinaryData;\n\nif (!FFileHelper::LoadFileToArray(BinaryData, *FString(\"TestSave.sav\")))\n{\nUE_LOG(LogTemp, Warning, TEXT(\"Load Failed!\"));\nreturn;\n}\nelse\n{\nUE_LOG(LogTemp, Warning, TEXT(\"Load Succeeded!\"));\n}\n</code></pre>"},{"location":"ue4guide/engine-programming/uobject-serialization/uobject-ustruct-serialization/#extracting-data-from-binary","title":"Extracting data from binary","text":"C++<pre><code>FMemoryReader FromBinary = FMemoryReader(BinaryData, true);\nFromBinary.Seek(0);\n\nFSaveGameData SaveGameData;\nFromBinary &lt;&lt; SaveGameData;\n\nFromBinary.FlushCache();\nBinaryData.Empty();\nFromBinary.Close();\n</code></pre> <p>Reference From http://runedegroot.com/saving-and-loading-actor-data-in-unreal-engine-4</p>"},{"location":"ue4guide/engine-programming/uobject-serialization/uobject-ustruct-serialization/#serialize-objects--names-as-strings","title":"Serialize Objects &amp; Names as strings:","text":"C++<pre><code>struct FSaveGameArchive : public FObjectAndNameAsStringProxyArchive\n\n{\n\nFSaveGameArchive(FArchive&amp; InInnerArchive)\n\n: FObjectAndNameAsStringProxyArchive(InInnerArchive, true)\n\n{\n\nArIsSaveGame = true;\n\n}\n\n};\n</code></pre> <p>Reference From http://runedegroot.com/saving-and-loading-actor-data-in-unreal-engine-4</p>"},{"location":"ue4guide/engine-programming/uobject-serialization/uobject-ustruct-serialization/#postfixupreferences","title":"PostFixupReferences","text":"<ul> <li>Fixup actor/object references after serialization</li> </ul> <p>Reference From https://forums.unrealengine.com/development-discussion/c-gameplay-programming/88477-spawning-actors-from-serialized-data?116235-Spawning-Actors-from-Serialized-Data=&amp;viewfull=1</p>"},{"location":"ue4guide/engine-programming/uobject-serialization/uobject-ustruct-serialization/#useful-array-serialization","title":"Useful Array Serialization","text":"<p><code>void BulkSerialize(FArchive&amp; Ar, bool bForcePerElementSerialization = false)</code></p> <p>The BulkSerialize function is a serialization function that can be used as an alternative operator&lt;&lt; in order to serialize the array as a block of raw bytes, rather than doing per-element serialization. This can improve performance with trivial elements, like a built-in type or a plain data struct.</p>"},{"location":"ue4guide/engine-programming/uobjects/deprecating-uproperties-ufunctions/","title":"UP\u00adROP\u00adER\u00adTY","text":"<ul> <li>Ap\u00adpend\u00ading <code>_DEPRECATED</code> to their name and re\u00admov\u00ading all meta\u00adda\u00adta at\u00adtributes.</li> <li>This will al\u00adlow blue\u00adprints to still com\u00adpile. I rec\u00adom\u00admend re\u00admov\u00ading all us\u00ades of the dep\u00adre\u00adcat\u00aded prop\u00ader\u00adty dur\u00ading re\u00adname in\u00adstead of just refac\u00adtor\u00ading the name of the sym\u00adbol.</li> <li>Spec\u00adi\u00adfy DeprecatedProperty and DeprecationMessage in the UPROPERTY() macro for some ad\u00addi\u00adtion in\u00adfor\u00adma\u00adtion to the us\u00ader.</li> </ul> C++<pre><code>UPROPERTY(EditAnywhere)\nint32 Count;\n\nUPROPERTY(meta=(DeprecatedProperty, DeprecationMessage=\"Use Size instead.\"))\nint32 Count_DEPRECATED;\n</code></pre>"},{"location":"ue4guide/engine-programming/uobjects/deprecating-uproperties-ufunctions/#ufunction","title":"UFUNC\u00adTION","text":"<ul> <li>Adding the meta spec\u00adi\u00adfiers. You do not need to re\u00admove the oth\u00ader spec\u00adi\u00adfiers here nor re\u00adname the func\u00adtion.</li> </ul> C++<pre><code>UPROPERTY(BlueprintPure)\nint GetAnswerToEverything() const {\u2026}\n\nUPROPERTY(BlueprintPure, meta=(DeprecatedFunction,  DeprecationMessage=\"Use GetEarth() and GetAnswer() instead.\"))\nint GetAnswerToEverything() const {\u2026}\n</code></pre>"},{"location":"ue4guide/engine-programming/uobjects/deprecating-uproperties-ufunctions/#uclass","title":"UCLASS","text":"<ul> <li>These have a spe\u00adcial Deprecated spec\u00adi\u00adfi\u00ader that you should use to mark the class.</li> <li>You will need to re\u00adname it:</li> </ul> C++<pre><code>UCLASS()\nclass UMyObject : public UObject {\n    GENERATED_BODY()\n    /* ... */\n};\n\nUCLASS(Deprecated)\nclass UDEPRECATED_MyObject : public UObject {\n    GENERATED_BODY()\n    /* ... */\n};\n</code></pre>"},{"location":"ue4guide/engine-programming/uobjects/deprecating-uproperties-ufunctions/#uenum","title":"UENUM","text":"<ul> <li>These don\u2019t seem to have grace\u00adful means for be\u00ading dep\u00adre\u00adcat\u00aded.</li> <li>In the en\u00adgine\u2019s code you can find enum val\u00adues that are dep\u00adre\u00adcat\u00aded by suf\u00adfix\u00ading them with _DEPRECATED.</li> <li>That is not nec\u00ades\u00adsar\u00adi\u00adly \u201cgrace\u00adful\u201d on its own, as in it isn\u2019t picked up by the blue\u00adprint sys\u00adtem and will cause com\u00adpile er\u00adrors there.</li> </ul> C++<pre><code>UENUM()\nenum class EMyEnum : uint32 {\n    MyValue = 0,\n    YourValue = 1,\n    /* ... */\n};\n\n// After\n/* @deprecated This was removed in version XY */\nUENUM()\nenum class EMyEnum_DEPRECATED : uint32 {\n    /* @deprecated This was removed in version XY */\n    MyValue_DEPRECATED = 0,\n    /* @deprecated This was removed in version XY */\n    YourValue_DEPRECATED = 1,\n    /* ... */\n};\n</code></pre> <ul> <li>To en\u00adsure blue\u00adprints keep com\u00adpil\u00ading, you can add redi\u00adrects, e.g. in your DefaultEngine.ini:</li> </ul> INI<pre><code>+EnumRedirects=(OldName=\"/Script/MyGame.EMyEnum\",\n    NewName=\"/Script/MyGame.EMyEnum_DEPRECATED\",\n    ValueChanges=((\"MyValue\",\"MyValue_DEPRECATED\"), (\"YourValue\",\"YourValue_DEPRECATED\")))\n</code></pre> <ul> <li>Blue\u00adprints will not is\u00adsue a warn\u00ading, the us\u00ader will at least see that _DEPRECATED suf\u00adfix. hope\u00adful\u00adly hov\u00ader over some\u00adthing that shows the code com\u00adments in a tooltip and make nec\u00ades\u00adsary changes.</li> <li>Un\u00adre\u00adal En\u00adgine Doc\u00adu\u00admen\u00adta\u00adtion &gt; Pro\u00adgram\u00adming Guide &gt; Core Re\u00addi\u00adrects for more in\u00adfor\u00adma\u00adtion on redi\u00adrects.</li> </ul>"},{"location":"ue4guide/engine-programming/uobjects/deprecating-uproperties-ufunctions/#ustruct","title":"US\u00adTRUCT","text":"<ul> <li>Don\u2019t seem to have grace\u00adful means of dep\u00adre\u00adca\u00adtion ei\u00adther. I sug\u00adgest to ei\u00adther dep\u00adre\u00adcate the C++ side grace\u00adful\u00adly (see Non-Blue\u00adprint Types) and then dep\u00adre\u00adcate all the at\u00adtributes:</li> </ul> C++<pre><code>// Before\nUSTRUCT()\nstruct FMyStruct {\n    GENERATED_BODY()\n    /* ... */\n\n    UPROPERTY()\n    FString Name;\n};\n\n// After\nUSTRUCT()\nstruct DEPRECATED(4.20, \"MyStruct is deprecated, use YourStruct instead.\") FMyStruct {\n    GENERATED_BODY()\n    /* ... */\n\n    UPROPERTY(meta=(Deprecated, DeprecationMessage=\"MyStruct is deprecated, use YourStruct instead.\"))\n    FString Name_DEPRECATED;\n};\n</code></pre>"},{"location":"ue4guide/engine-programming/uobjects/deprecating-uproperties-ufunctions/#non-blueprint-types","title":"Non-Blue\u00adprint Types","text":"<ul> <li><code>DEPRECATED(version, message)</code> macro:</li> </ul> C++<pre><code>virtual void foo();\n\nDEPRECATED(4.20, \"Use bar() instead.\")\nvirtual void foo();\n</code></pre>"},{"location":"ue4guide/engine-programming/uobjects/duplicate-or-copy-object/","title":"Duplicate or copy object","text":"<ol> <li> <p>Generic object copy    UEngine::CopyPropertiesForUnrelatedObjects(ObjectTemplate, SpawnedActor, CopyParams);</p> </li> <li> <p>Fast copy of specific class</p> </li> </ol> <p>StaticDuplicateObject(Instance, &amp;OwnerMovieScene, TemplateName, RF_AllFlags &amp; ~RF_Transient);</p> <ol> <li>For actors:</li> </ol> <p>EditorUtilities::CopySingleProperty()</p> <p>EditorUtilities::CopyActorProperties()</p> <p>NOTE: You can pass a template object but Subobject Instancing needs a special case:</p> C++<pre><code>UCLASS()\n\nclass UDuplicateTestSubObject : public UObject\n\n{\n\nGENERATED_BODY()\n\npublic:\n\nUPROPERTY()\n\nint32 TestValue;\n\n};\n\nUCLASS()\n\nclass UDuplicateTestObject : public UObject\n\n{\n\nGENERATED_BODY()\n\npublic:\n\nUPROPERTY(Instanced)\n\nUDuplicateTestSubObject* SubObject;\n\n};\n\nUCLASS()\n\nclass ADuplicateTestActor : public AActor\n\n{\n\nGENERATED_BODY()\n\nvirtual void BeginPlay() override\n\n{\n\nSuper::BeginPlay();\n\nUDuplicateTestObject* SrcObject = NewObject&lt;UDuplicateTestObject&gt;();\n\nSrcObject-&gt;SubObject = NewObject&lt;UDuplicateTestSubObject&gt;(SrcObject);\n\nUDuplicateTestObject* DestObject = NewObject&lt;UDuplicateTestObject&gt;();\n\nfor (int32 i = 0; i &lt; 100; ++i)\n\n{\n\nSrcObject-&gt;SubObject-&gt;TestValue = i;\n\nDestObject = NewObject&lt;UDuplicateTestObject&gt;(DestObject-&gt;GetOuter(), DestObject-&gt;GetFName(), RF_NoFlags, SrcObject);\n\n// DestObject = DuplicateObject(SrcObject, DestObject-&gt;GetOuter(), DestObject-&gt;GetFName());\n\ncheck(DestObject);\n\ncheck(DestObject-&gt;SubObject);\n\ncheck(DestObject-&gt;SubObject != SrcObject-&gt;SubObject);\n\ncheck(DestObject-&gt;SubObject-&gt;TestValue == i);\n\n}\n\n}\n\n};\n\n void UDuplicateTestObject::BeginDestroy()\n\n {\n\n if (SubObject != nullptr)\n\n {\n\n SubObject-&gt;ConditionalBeginDestroy();\n\n }\n\n Super::BeginDestroy();\n\n }\n</code></pre> <p>https://udn.unrealengine.com/questions/458532/view.html</p>"},{"location":"ue4guide/engine-programming/uobjects/new-uobject-allocation-flow/","title":"UObject Creation/Initialization","text":""},{"location":"ue4guide/engine-programming/uobjects/new-uobject-allocation-flow/#newobject-summary","title":"NewObject Summary","text":"<ol> <li> <p>Quickly find out whether an object with the same name already exists;</p> </li> <li> <p>If it exists, then destruct it, and use the memory block m;</p> </li> <li> <p>If there is no object with the same name, the memory block m is allocated according to the Class reflection information;</p> </li> <li> <p>The constructor ObjectBase is called on memory block m.</p> </li> <li> <p>Finally, we call the constructor of the desired class on memory block m where the UObjectBase(UClass* InClass, EObjectFlags InFlags, EInternalObjectFlags InInternalFlags, UObject *InOuter, FName InName) functions complete the object registration. The following analysis of the function to understand the object management.</p> </li> </ol>"},{"location":"ue4guide/engine-programming/uobjects/new-uobject-allocation-flow/#allocation-construction--initialization-details","title":"Allocation, Construction, &amp; Initialization Details","text":"<p>Reference from: https://www.cnblogs.com/wellbye/p/5808894.html</p> <ol> <li>NewObject</li> </ol> <p>In addition to some condition detections, the previous counterpart of StaticConstructObject_Internal was directly adjusted.    Here are a few parameters, the interesting is the fifth parameter Template, through which you can copy the object.</p> C++<pre><code>template&lt; class T &gt; FUNCTION_NON_NULL_RETURN_START T* NewObject(UObject* Outer, FName Name, EObjectFlags Flags = RF_NoFlags, UObject* Template = nullptr, bool bCopyTransientsFromClassDefaults = false, FObjectInstancingGraph* InInstanceGraph = nullptr) FUNCTION_NON_NULL_RETURN_END { if (Name == NAME_None)\n</code></pre> <ol> <li>StaticConstructObject_Internal: Responsible for memory allocation with <code>StaticAllocateObject</code> &amp; object initialization</li> </ol> C++<pre><code>UObject* StaticConstructObject_Internal ( UClass* InClass, UObject* InOuter /*=GetTransientPackage()*/, FName InName /*=NAME_None*/, EObjectFlags InFlags /*=0*/, EInternalObjectFlags InternalSetFlags /*=0*/, UObject* InTemplate /*=NULL*/, bool bCopyTransientsFromClassDefaults /*=false*/, FObjectInstancingGraph* InInstanceGraph /*=NULL*/, bool bAssumeTemplateIsArchetype /*=false*/ )\n</code></pre> <ol> <li>StaticAllocateObject: Mainly allocates object memory, and sets name space and registration</li> </ol> <p>The first is to check whether to create a new object or replace an existing object, because there is a Name parameter passed in all the way. If you find an existing object with the same name, you will force that object to be destructed, and then reuse its space, otherwise, it will allocate space directly:</p> C++<pre><code>UObjectBase* FUObjectAllocator::AllocateUObject(int32 Size, int32 Alignment, bool bAllowPermanent)\n</code></pre> <p>In addition to this main task, there are many other things, such as managing connections between objects, notifications when creating objects in asynchronous threads, and so on.</p> C++<pre><code>UObject* StaticAllocateObject ( UClass* InClass, UObject* InOuter, FName InName, EObjectFlags InFlags, EInternalObjectFlags InternalSetFlags, bool bCanRecycleSubobjects, bool* bOutRecycledSubobject )\n\n/** * Constructor used by StaticAllocateObject * @param InClass non NULL, this gives the class of the new object, if known at this time * @param InFlags RF_Flags to assign * @param InOuter outer for this object * @param InName name of the new object * @param InObjectArchetype archetype to assign */\n\nUObjectBase::UObjectBase(UClass* InClass, EObjectFlags InFlags, EInternalObjectFlags InInternalFlags, UObject *InOuter, FName InName) : ObjectFlags (InFlags)\n</code></pre> <ol> <li>With the space allocated by the former, you can construct objects here:</li> </ol> C++<pre><code>Result = StaticAllocateObject(InClass, InOuter, InName, InFlags, InternalSetFlags, bCanRecycleSubobjects, &amp;bRecycledSubobject);\n(*InClass-&gt;ClassConstructor)( FObjectInitializer(Result, InTemplate, bCopyTransientsFromClassDefaults, true, InInstanceGraph) );\n</code></pre> <p>Here ClassConstructor is a function pointer class member variable that every UClass has. In fact, all pointers in UClass point to a global template function:</p> C++<pre><code>template&lt;class T&gt;\nvoid InternalConstructor( const FObjectInitializer&amp; X )\n{\n  T::__DefaultConstructor(X);\n}\n</code></pre> <p>The __DefaultConstructor in each class is also generated uniformly using macros, and the content is simply forwarded to new:</p> C++<pre><code>static void __DefaultConstructor(const FObjectInitializer&amp; X) { new((EInternal*)X.GetObj())TClass(X); }\n</code></pre> <p>This new form is very non-trivial, both <code>[(EInternal *)X.GetObj()]</code> passed to <code>operator new</code> and <code>FObjectInitializer&amp; X</code> passed to the actual constructor of this class</p> <p>The latter is the actual parameter required by <code>InClass-&gt;ClassConstructor</code>, and the former is also an operator new defined in each UObject through a macro (DECLARE_CLASS):</p> C++<pre><code>inline void* operator new( const size_t InSize, EInternal* InMem ) \\\n    { \\\n        return (void*)InMem; \\\n    }\n</code></pre> <p>To summarize the things that go around above are:</p> Text Only<pre><code> - StaticAllocateObject allocates memory space Result, and then uses this as a parameter (of course, there are other parameters) to construct a `FObjectInitializer X`, where `X.GetObj` returns this memory address `Result`\n - Then use `new (Result) TClass (X)` to construct the object, specify the address on the Result, and pass X as a parameter to its constructor.\n</code></pre> <ol> <li>About FObjectInitializer</li> </ol> <p>Following the previous step, after the constructor returns, its temporary parameter [FObjectInitializer &amp; X] is automatically destructed . Therefore, ue4 uses this step to do a lot of things, most of which are related to the internal state of the system. For management, it is difficult to understand thoroughly.</p> <p>But there is one operation that is related to the application, that is, property initialization, which is done through InitProperties:</p> C++<pre><code>void FObjectInitializer::InitProperties(UObject* Obj, UClass* DefaultsClass, UObject* DefaultData, bool bCopyTransientsFromClassDefaults)\n{\n\u3000\u3000\u2026\u2026\n    UClass* Class = Obj-&gt;GetClass();\n\u3000\u3000\u2026\u2026if (!bNeedInitialize &amp;&amp; bCanUsePostConstructLink)\n    {\n        // This is just a fast path for the below in the common case that we are not doing a duplicate or initializing a CDO and this is all native.\n        // We only do it if the DefaultData object is NOT a CDO of the object that's being initialized. CDO data is already initialized in the\n        // object's constructor.\n        if (DefaultData)\n        {\n            if (Class-&gt;GetDefaultObject(false) != DefaultData)\n            {\n                QUICK_SCOPE_CYCLE_COUNTER(STAT_InitProperties_FromTemplate);\n                for (UProperty* P = Class-&gt;PropertyLink; P; P = P-&gt;PropertyLinkNext)\n                {\n                    P-&gt;CopyCompleteValue_InContainer(Obj, DefaultData);\n                }\n            }\n            else\n            {\n                QUICK_SCOPE_CYCLE_COUNTER(STAT_InitProperties_ConfigEtcOnly);\n                // Copy all properties that require additional initialization (e.g. CPF_Config).\n                for (UProperty* P = Class-&gt;PostConstructLink; P; P = P-&gt;PostConstructLinkNext)\n                {\n                    P-&gt;CopyCompleteValue_InContainer(Obj, DefaultData);\n                }\n            }\n        }\n\u3000\u3000\u2026\u2026\n</code></pre> <p>By traversing the attribute metadata recorded on the UClass, you can assign a value to each attribute of the current instance.</p> <p>What is interesting is the DefaultData parameter, which is the earliest Template parameter. Of course, if the Template is empty, the DefaultData here is the CDO of this class.</p> <p>The code clearly shows different strategies for dealing with these two situations:</p> <p>If the object to be copied is Template-&gt; DefaultData, then all the properties on the class must be traversed, because for an actual copy target, you do not know which properties have changed (not the default values), so you must copy the entire disk</p> <p>And if it is only copied from CDO, then you only need to process the fields that have been explicitly specified in this class that may have initialization status, such as fields marked with CPF_Config, and they will go to the ini file to extract the corresponding configuration values \u200b\u200bat startup.</p>"},{"location":"ue4guide/engine-programming/uobjects/new-uobject-allocation-flow/#global-object-table","title":"Global Object table","text":"C++<pre><code>/** * Add a newly created object to the name hash tables and the object array * * @param Name name to assign to this uobject */\nvoid UObjectBase::AddObject(FName InName, EInternalObjectFlags InSetInternalFlags)\n { NamePrivate = InName; EInternalObjectFlags InternalFlagsToSet = InSetInternalFlags; if (!IsInGameThread())\n { InternalFlagsToSet |= EInternalObjectFlags::Async;\n</code></pre> <p>Key data structures</p> <ul> <li>FUObjectArray</li> <li>FUObjectItem</li> </ul>"},{"location":"ue4guide/engine-programming/uobjects/uobject-upackage-internals/","title":"Uobject upackage internals","text":"<p>https://heapcleaner.wordpress.com/2016/06/11/uobject-constructor-postinitproperties-and-postload</p> <p>All unreal objects have unique path in the form of string:</p> <p>/Game/MyGame/MyAsset.Myasset.ASubObjectOfMyAsset.AnotherObject</p> <p>If you split the path using dot as delimiter you will get:</p> <ol> <li> <p>/Game/MyGame/MyAsset</p> </li> <li> <p>MyAsset</p> </li> <li> <p>ASubObjectOfMyAsset</p> </li> <li> <p>AnotherObject</p> </li> </ol> <p>Outer most object is awlays a UPackage</p> <ul> <li>In this example, it's /Game/MyGame/MyAsset</li> </ul> <p>Object flags: Tell us the state of the object</p> <ul> <li>RF_Public =&gt; this object is visible outside of its package</li> <li>Example of non-public object is a sub-object</li> <li>Every object you can see in editor is Public</li> <li>RF_Standalone =&gt; Doesn\u2019t need to be referenced to not be garbage collected</li> <li>If containing package gets unloaded, then it gets GC'ed</li> <li>RF_Transactional =&gt; property changes are recorded and can be reverted</li> </ul> <p>Class flags: tell about the object's UClass</p> <ul> <li>CLASS_Abstract =&gt; Class can't be instantiated</li> <li>CLASS_Native =&gt; Native class</li> <li>CLASS_Constructed</li> </ul> <p>All native classes get populated in /Script/[ModuleName]</p> <p>Native classes do not get a PostLoad</p> <p>Constructor:</p> <ul> <li>Object is still abstract entity</li> </ul> <p>PostInitProperties:</p> <ul> <li>Properties initialized, including any set from config inis</li> <li>NOTE: Any properties set on default subobjects inside the constructor get stomped by the CDO's properties when the constructor exits</li> <li>So this is good place to put \"per instance\" constructor initialization data</li> <li>Ex: Initializing transient data that (e.g. CurrentOwner) that would be null on the CDO</li> <li>Ready to interact with the world</li> </ul> <p>Serialized Assets get PostLoad</p> <ul> <li>PostLoad is where default properties that are changed in the editor get loaded into the object</li> <li>The reset to default yellow arrow simply applies the property's value from the CDO back into the current objects' property</li> </ul>"},{"location":"ue4guide/environment-setup/setup-guide-part-1/","title":"Gamedev Environment Part I: Extremely Highend Hardware","text":""},{"location":"ue4guide/environment-setup/setup-guide-part-2/","title":"Gamedev Environment Part II: One weird trick to get a 70% performance boost","text":""},{"location":"ue4guide/environment-setup/setup-guide-part-3/","title":"Gamedev Environment Part III: Making Windows Tolerable + software I use + semi-auto imaging dev machines","text":""},{"location":"ue4guide/environment-setup/setup-guide-part-4/","title":"Gamedev Environment Part IV: Optimizing Unreal Engine Builds, Visual Studio, and Final Benchmarks","text":""},{"location":"ue4guide/gameplay-programming/asset-manager/","title":"Asset Manager","text":"<p>https://answers.unrealengine.com/storage/attachments/136465-runtimeassetmanagementin416.pdf</p> <p>https://www.unrealengine.com/en-US/blog/optimizing-battle-breakers-for-chunked-downloading</p> Asset Registry: Repository of useful info about specific assets Streamable Managers: native structs that manage streaming Primary Assets: assets that can be manually loaded/unloaded based on game state (e.g. maps, inventory items,character classes) Secondary Assets: Auto loaded/dependent assets based on Primary Assets (e.g. textures, sounds, etc) Asset Bundle: Logical group of named list of assets that can be loaded together at runtime Asset Manager New singleton managing info about primary assets/asset bundles <p>FPrimaryAssetID:</p> <ul> <li> <p>PrimaryAssetType: Base type FName (e.g. AWeapon)</p> </li> <li> <p>PrimaryAssetName: FName of asset shortname (or longname for maps)</p> </li> <li> <p>PrimaryAssetType:PrimaryAssetName - forms unique pair across entire game (violations causes errors). Weapon:BattleAxe_Tier2 represents the same object as /Game/Items/Weapons/Axes/BattleAxe_Tier2.BattleAxe_Tier2_C</p> </li> <li> <p>Type and Name are saved directly as AssetRegistry tags, so once a primary asset has been saved to disk once you can search for it directly in the asset registry</p> </li> <li> <p>Maps inside /Game/Maps are set to be Primary Assets by default, everything else needs to be set up for your specific game</p> </li> <li> <p>PrimaryAssetLabels also live at the engine level and are special Primary Assets that are used to label other assets for chunking and cooking</p> </li> </ul> <p>FStreamableManager is a native structure that handles async loading objects and keeping them in memory until they are not needed.</p> <ul> <li> <p>Multiple streamable managers for different use cases</p> </li> <li> <p>FStreamableHandle is a struct tracked by shared pointer that is returned from streaming operations. An \u200bactive handle keeps the referenced assets loaded into memory, and all handles are active while loading. Once loading is finished, handles are active until canceled or released.</p> </li> <li> <p>FStreamableHandle::ReleaseHandle() can be explicitly called to release references, and will implicitly get called when all shared pointers to the handle are destroyed</p> </li> <li> <p>FStreamableHandle::CancelHandle() can be called to abort the load and stop the complete callback from happening</p> </li> <li> <p>FStreamableHandle::WaitUntilComplete() blocks until the requested assets have loaded. This pushes the requested asset to the top of the priority list, but does not flush all async loading so is usually faster than a LoadObject call</p> </li> <li> <p>RequestAsyncLoad is the primary streamable operation. If you pass in a list of StringAssetReferences it will attempt to load them all, call a callback when complete, and return a Streamable Handle for later use</p> </li> <li> <p>RequestSyncLoad is the synchronous version. It will either start an async load and call WaitUntilComplete, or call LoadObject directly, whichever is faster</p> </li> <li> <p>LoadSynchronous is a version of RequestSyncLoad that returns a single asset, and has templated type safe versions</p> </li> <li> <p>bManageActiveHandle, which if set will cause the streamable manager itself to hold an active reference to the request handle, until queried for with GetActiveHandles\u200b and released manually</p> </li> </ul> <p>AssetManager is a singleton UObject that provides operations for scanning for and loading Primary Assets at runtime. It is meant to replace the functionality that ObjectLibraries currently provide, and wraps a FStreamableManager to handle the actual async loading.</p> <ul> <li> <p>Get(): Static function to return the active asset manager. Can call IsValid() to ensure validity</p> </li> <li> <p>ScanPathsForPrimaryAssets(Type, Paths, BaseClass)\u200b: This functions scans the disk (or cooked asset registry) and parses FAssetData for primary assets of a specific type</p> </li> <li> <p>GetPrimaryAssetPath(PrimaryAssetId): Converts Primary Asset to object path</p> </li> <li> <p>GetPrimaryAssetIdForPath(StringReference): Converts an object path into a Type:Name pair if that path refers to a Primary Asset</p> </li> </ul> <p>Override UAssetManager::ShouldSetManager for your project, this is the function that figures out what Primary Assets \"manage\" other things. You could add a specific check where if your main menu primary asset is asking it it should reference Map primary assets, return DoNotSet. Fortnite does this so our \"list of maps to display\" asset doesn't acquire management over specific maps</p> <p>(Reference)</p> <ul> <li> <p>External modules can have additional data associated with this UWorld.</p> </li> <li> <p>This is a list of per module world data objects. These aren't</p> </li> <li> <p>loaded/saved by default</p> </li> </ul> C++<pre><code>UPROPERTY(Transient)\nTArray&lt;UObject*&gt; PerModuleDataObjects;\n</code></pre> <p>Primary Asset Picker:</p> C++<pre><code>/**\n* Creates a simple version of a Primary Asset Type selector, not bound to a PropertyHandle \n* @param OnGetDisplayText Delegate that returns the text to display in body of combo box\n* @param OnSetType Delegate called when type is changed\n* @param bAllowClear If true, add None option to top\n* @param bAlowAll If true, add All Types option to bottom, returns AllPrimaryAssetTypes if selected\n*/\nstatic TSharedRef&lt;SWidget&gt; MakePrimaryAssetTypeSelector(FOnGetPrimaryAssetDisplayText OnGetDisplayText, FOnSetPrimaryAssetType OnSetType, bool bAllowClear = true, bool bAllowAll = false);\n\n/** \n* Creates a simple version of a Primary Asset Id selector, not bound to a PropertyHandle\n* @param OnGetDisplayText Delegate that returns the text to display in body of combo box\n* @param OnSetId Delegate called when id is changed\n* @param bAllowClear If true, add None option to top\n*/\nstatic TSharedRef&lt;SWidget&gt; MakePrimaryAssetIdSelector(FOnGetPrimaryAssetDisplayText OnGetDisplayText, FOnSetPrimaryAssetId OnSetId, bool bAllowClear = true, TArray&lt;FPrimaryAssetType&gt; AllowedTypes = TArray&lt;FPrimaryAssetType&gt;());\n\n** Called to get list of valid primary asset types *\nstatic void GeneratePrimaryAssetTypeComboBoxStrings(TArray&lt; TSharedPtr&lt;FString&gt; &gt;&gt; OutComboBoxStrings, TArray&lt;TSharedPtr&lt;SToolTip&gt;&gt;&gt; OutToolTips, TArray&lt;bool&gt;&gt; OutRestrictedItems, bool bAllowClear, bool bAllowAll);\n</code></pre>"},{"location":"ue4guide/gameplay-programming/controller-mappings-in-ue4/","title":"Controller mappings in ue4","text":"<p>Vive Controller Mappings</p> <p></p>"},{"location":"ue4guide/gameplay-programming/gameplay-debugging/","title":"Gameplay debugging","text":""},{"location":"ue4guide/gameplay-programming/gameplay-debugging/#gameplay-debugger-capabilities","title":"Gameplay Debugger Capabilities:","text":"<ul> <li> <p>Look at FGameplayDebugger module</p> </li> <li> <p>Contains GameplayDebuggingComponent, GameplayDebuggingControllerComponent, GameplayDebuggingReplicator, GameplayDebuggingHUDComponent</p> </li> <li> <p>You can specify debug bindings by adding this to DefaultInput.ini</p> </li> </ul> C++<pre><code> \\[/Script/Engine.PlayerInput]\n\n +DebugExecBindings=(Key=L,Command=\"ToggleInfiniteAmmo\")\n\n +DebugExecBindings=(Key=L,Command=\"ToggleInfiniteClip\", Control=True)\n\n +DebugExecBindings=(Key=T,Command=\"ToggleMatchTimer\")\n\n +DebugExecBindings=(Key=T, Command=\"ForceMatchStart\", Control=True)\n</code></pre> <ul> <li> <p>BaseInput.ini has debugexecbindings that control the debug viewmodes through the F1-F7 keys</p> </li> <li> <p>You can extend GameplayDebugger: https://docs.unrealengine.com/latest/INT/Gameplay/Tools/GameplayDebugger/index.html</p> </li> <li> <p>Turn off/on the GameDebugger by the ' key or by EnableGDT cheat</p> </li> <li> <p>Console command \"cheat \" allows you to enable a bunch of server cheats</p> </li> <li> <p>Roll your own by extending UCheatManager</p> </li> </ul>"},{"location":"ue4guide/gameplay-programming/gameplay-debugging/#useful-gameplay-debugging-console-commands","title":"Useful Gameplay Debugging Console Commands:","text":"<p>ViewSelf / ViewActor</p> <p>Debug Collision:</p> Text Only<pre><code>show collision\n</code></pre> <p>ShowDebug \u2026</p> <p>ShowDebugForReticleToggle \u2026</p> <p>ShowDebug DebugType</p> <p>Show \u2026 /ShowFlag \u2026</p> <p>ToggleDebugCamera</p> <p>Debug Input:</p> Text Only<pre><code>showdebug input.\n</code></pre>"},{"location":"ue4guide/gameplay-programming/gameplay-programming/","title":"Gameplay programming","text":"<p>C++ Macros:</p> <ul> <li> <p>UCLASS()</p> </li> <li> <p>UFUNCTION()</p> </li> <li> <p>USTRUCT()</p> </li> <li> <p>UPROPERTY()</p> </li> <li> <p>UINTERFACE()</p> </li> <li> <p>GENERATED_UCLASS_BODY()</p> </li> <li> <p>GENERATED_USTRUCT_BODY()</p> </li> <li> <p>IMPLEMENT_CLASS ()</p> </li> <li> <p>IMPLEMENT_MODULE()</p> </li> </ul> <p>Class Declaration</p> <p>UCLASS([specifier, specifier, ...], [meta(key=value, key=value, ...)])  class ClassName : ParentName  {  GENERATED_UCLASS_BODY()  }</p>"},{"location":"ue4guide/gameplay-programming/gameplay-programming/#class-specifiers","title":"Class Specifiers","text":"<p>When declaring classes, specifiers can be added to the declaration to control how the class behaves with various aspects of the engine and editor.</p> <ul> <li> <p>Abstract</p> </li> <li> <p>AdvancedClassDisplay</p> </li> <li> <p>AssetRegistrySearchable</p> </li> <li> <p>AutoCollapseCategories</p> </li> <li> <p>AutoExpandCategories</p> </li> <li> <p>Blueprintable</p> </li> <li> <p>BlueprintType</p> </li> <li> <p>ClassGroup</p> </li> <li> <p>CollapseCategories</p> </li> <li> <p>Config</p> </li> <li> <p>Const</p> </li> <li> <p>ConversionRoot</p> </li> <li> <p>CustomConstructor</p> </li> <li> <p>DefaultToInstanced</p> </li> <li> <p>DependsOn</p> </li> <li> <p>Deprecated</p> </li> <li> <p>DontAutoCollapseCategories</p> </li> <li> <p>DontCollapseCategories</p> </li> <li> <p>EditInlineNew</p> </li> <li> <p>HeaderGroup</p> </li> <li> <p>HideCategories</p> </li> <li> <p>HideDropdown</p> </li> <li> <p>HideFunctions</p> </li> <li> <p>Intrinsic</p> </li> <li> <p>MinimalAPI</p> </li> <li> <p>NoExport</p> </li> <li> <p>NonTranisent</p> </li> <li> <p>NotBlueprintable</p> </li> <li> <p>NotPlaceable</p> </li> <li> <p>PerObjectConfig</p> </li> <li> <p>Placeable</p> </li> <li> <p>ShowCategories</p> </li> <li> <p>ShowFunctions</p> </li> <li> <p>Transient</p> </li> <li> <p>Within</p> </li> </ul> <p>Constructors:</p> <ul> <li> <p>FPostConstructInitializeProperties initializes class properties after constructor has been called</p> </li> <li> <p>Pattern of using static function scoped structs for complex one-time initialization in class constructors. ConstructorHelpers namespace has helpers to use in these situations</p> </li> </ul> C++<pre><code>// Structure to hold one-time initialization  \n                struct FConstructorStatics  \n                {  \n                        ConstructorHelpers::FObjectFinderOptional&amp;lt;UTexture2D&gt; SpriteTexture;  \n                        FName ID_Wind;  \n                        FText NAME_Wind;  \n                        FConstructorStatics()  \n                                : SpriteTexture(TEXT(\"/Engine/EditorResources/S_WindDirectional\"))  \n                                , ID_Wind(TEXT(\"Wind\"))  \n                                , NAME_Wind(NSLOCTEXT(\"SpriteCategory\", \"Wind\", \"Wind\"))  \n                        {  \n                        }  \n                };  \n                static FConstructorStatics ConstructorStatics;\n\nif (ArrowComponent)  \n                {  \n                        ArrowComponent-&gt;ArrowColor = FColor(150, 200, 255);  \n                        ArrowComponent-&gt;bTreatAsASprite = true;  \n                        ArrowComponent-&gt;SpriteInfo.Category = ConstructorStatics.ID_Wind;  \n                        ArrowComponent-&gt;SpriteInfo.DisplayName = ConstructorStatics.NAME_Wind;  \n                        ArrowComponent-&gt;AttachParent = Component;  \n                        ArrowComponent-&gt;bIsScreenSizeScaled = true;  \n                        ArrowComponent-&gt;bUseInEditorScaling = true;  \n                }\n\nif (SpriteComponent)  \n                {  \n                        SpriteComponent-&gt;Sprite = ConstructorStatics.SpriteTexture.Get();  \n                        SpriteComponent-&gt;SpriteInfo.Category = ConstructorStatics.ID_Wind;  \n                        SpriteComponent-&gt;SpriteInfo.DisplayName = ConstructorStatics.NAME_Wind;  \n                        SpriteComponent-&gt;AttachParent = Component;  \n                }\n</code></pre> <ul> <li>Create components in the constructor using ConstructorHelpers::CreateComponent&lt;&gt;()</li> </ul> <p>##### Function Specifiers</p> <p>When declaring functions, specifiers can be added to the declaration to control how the function behaves with various aspects of the engine and editor.</p> <ul> <li> <p>BlueprintAuthorityOnly</p> </li> <li> <p>BlueprintCallable</p> </li> <li> <p>BlueprintCosmetic</p> </li> <li> <p>BlueprintImplementableEvent</p> </li> <li> <p>BlueprintNativeEvent</p> </li> <li> <p>BlueprintPure</p> </li> <li> <p>Category</p> </li> <li> <p>Client</p> </li> <li> <p>CustomThunk</p> </li> <li> <p>Exec</p> </li> <li> <p>NetMulticast</p> </li> <li> <p>Reliable</p> </li> <li> <p>Server</p> </li> <li> <p>Unreliable</p> </li> </ul> <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/UnrealArchitecture/Reference/Functions/index.html</p>"},{"location":"ue4guide/gameplay-programming/gameplay-programming/#delegates","title":"Delegates","text":"<p>Delegates allow you to call member functions on C++ objects in a generic, yet type-safe way. Using delegates, you can dynamically bind to a member function of an arbitrary object, then call functions on the object, even if the caller does not know the object's type.</p> <p>It is perfectly safe to copy delegate objects. Delegates can be passed around by value but this is generally not recommended since they do have to allocate memory on the heap. You should always pass delegates by reference when possible.</p> <p>Both single-cast and multi-cast delegates are supported, as well as \"dynamic\" delegates which can be safely serialized to disk.</p> <ul> <li> <p>Single-cast</p> </li> <li> <p>Multi-cast</p> </li> <li> <p>Events</p> </li> <li> <p>Dynamic (UObject, serializable)</p> </li> </ul> <p>See the Delegates page for reference and usage information.</p> <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/UnrealArchitecture/Reference/Functions/index.html</p>"},{"location":"ue4guide/gameplay-programming/gameplay-programming/#timer-management","title":"Timer Management","text":"<p>Timers are managed in a global FTimerManager, outside the confines of AActor, and can have any of the full range of delegate types assigned. There are several functions in FTimerManager available for managing timers. It is safe to use these functions inside of a timer delegate as the system is ok with manipulating timers while handling a timer. This means, for example, it is ok to set or clear timers inside a timer delegate.</p> <p>The AActor::GetWorldTimerManager() function is used to access the timer manager instance for the current world.</p> <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/UnrealArchitecture/Timers/index.html</p>"},{"location":"ue4guide/gameplay-programming/instantiating-destroying-objects/","title":"Instantiating destroying objects","text":"<p>Deleting UObject:</p> <p>MarkPendingKill():</p> <ul> <li>Nulls out references and marks it to be cleared in next GC Sweep</li> </ul> <p>Note that Weak Pointers have no impact on whether an Object is garbage collected or not.</p> <p>Object destruction is handled automatically by the garbage collection system when an Object is no longer referenced. This means that no UPROPERTY pointers, or engine containers or smart pointer class instances should have any strong references to it. When the garbage collector runs, unreferenced Objects that are found will be deleted. In addition, the function MarkPendingKill() can be called directly on an Object, and this function will set all pointers to the Object to NULL, as well as remove the Object from global searches. Once again, the Object will be fully deleted on the next garbage collection pass.</p> <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/UnrealArchitecture/Objects/index.html</p> <p>Immediate destruction:</p> <ul> <li> <p>RemoveFromRoot()</p> </li> <li> <p>ConditionalBeginDestroy()</p> </li> </ul> <p>Deleting Actor:</p> <ul> <li> <p>Destroy()</p> </li> <li> <p>Calls World-&gt;DestroyActor()</p> </li> <li> <p>In Editor: GetWorld()-&gt;EditorDestroyActor(lcbActor, true);</p> </li> <li> <p>ConditionalBeginDestroy()</p> </li> </ul>"},{"location":"ue4guide/gameplay-programming/logging-commands/","title":"Commands","text":"Logging Commands Description showlog will toggle output terminal Log list list all log categories Log list [string] list all log categories containing a substring Log reset reset all log categories to their boot-time default Log [cat] toggle the display of the category [cat] Log [cat] off disable display of the category [cat] Log [cat] on resume display of the category [cat] Log [cat][level] set the verbosity level of the category [cat] Log [cat] break toggle the debug break on display of the category [cat]"},{"location":"ue4guide/gameplay-programming/logging-commands/#log-levels","title":"Log Levels","text":"<p>Fatal Error Warning Display Log Verbose VeryVerbose</p> <p>Command line to stream log output to file</p> Batchfile<pre><code>-log LOG=Logfile.txt\n</code></pre> <p>Log categories to separate files</p> Batchfile<pre><code>-LogCategoryFiles=\"Category1=Filename1, Category2=Filename2\"\n</code></pre>"},{"location":"ue4guide/gameplay-programming/replicated-singleton/","title":"Replicated singleton","text":"<p>https://udn.unrealengine.com/questions/254784/replicated-singleton-actor.html</p>"},{"location":"ue4guide/gameplay-programming/useful-functions/","title":"Useful functions","text":"C++<pre><code>virtual void RerunConstructionScripts();\n\nUActorComponent* CreateComponentFromTemplate(UActorComponent* **Template**, const FName **InName** = NAME_None );\n\nUActorComponent* CreateComponentFromTemplateData(\u2026);\n</code></pre> <p>LoadedLevel will not be set on the ULevelStreaming object until the level is fully loaded. And at that same point the ULevelStreaming.OnLevelLoaded will be broadcast.</p> <p>Reference From https://udn.unrealengine.com/questions/356697/beginplay-order.html</p>"},{"location":"ue4guide/gameplay-programming/useful-functions/#duplicate-or-create-an-instance-of-an-existing-object-can-also-be-used-to-create-a-duplicate-new-asset-thats-a-subclass-of-a-new-asset","title":"Duplicate or create an instance of an existing object. Can also be used to create a duplicate new asset that's a subclass of a new asset:","text":"C++<pre><code>*Bag = (UPEBag*)StaticConstructObject (BagContentRef-&gt;StaticClass(), GetTransientPackage(), DataAssetTemplate);*\n\nCOREUOBJECT_API UObject* StaticConstructObject( UClass* Class, UObject* InOuter=(UObject*)GetTransientPackage(), FName Name=NAME_None, EObjectFlags SetFlags=RF_NoFlags, UObject* Template=NULL, bool bCopyTransientsFromClassDefaults=false, struct FObjectInstancingGraph* InstanceGraph=NULL );\n</code></pre> <p>Reference From https://forums.unrealengine.com/showthread.php?4287-creating-instances-for-editor-DataAssets</p>"},{"location":"ue4guide/gameplay-programming/useful-functions/#prevent-or-disable-creating-a-default-subobject","title":"Prevent or Disable creating a default subobject:","text":"C++<pre><code>ObjectInitializer.DoNotCreateDefaultSubobject(TEXT(\"Sprite\"))\n</code></pre>"},{"location":"ue4guide/gameplay-programming/actor-tick-lifecycle-flow/actor-lifecycle-diagram/","title":"Actor Load/Init Function Cheatsheet","text":"Actor Function Component Function On CDO? On Level Load? On Place In Level? On Play? On Spawn? On Open Blueprint? <code>PostInitProperties</code> - Y Y Y Y Y Y <code>PostLoad</code> - Y Y N Y N N <code>PostActorCreated</code> <code>OnComponentCreated</code> N N Y Y Y Y <code>PostRegisterAllComponents</code> <code>OnRegister</code> N Y Y Y Y Y <code>PostInitializeComponents</code> <code>InitializeComponent iff bWantsInitializeComponent == true</code> N N Y Y Y Y"},{"location":"ue4guide/gameplay-programming/actor-tick-lifecycle-flow/actor-lifecycle-diagram/#actor-life-cycle","title":"Actor Life Cycle","text":"<p>https://docs.unrealengine.com/en-US/Programming/UnrealArchitecture/Actors/ActorLifecycle/index.html</p> <p></p>"},{"location":"ue4guide/gameplay-programming/actor-tick-lifecycle-flow/actor-lifecycle-diagram/#load-from-disk","title":"Load from Disk","text":"<p>This path occurs for any Actor that is already in the level, like when LoadMap occurs, or AddToWorld (from streaming or sub levels) is called.</p> <ol> <li> <p>Actors in a package/level are loaded from disk.</p> </li> <li> <p>PostLoad - is called by serialized    Actor after they have finished loading from disk. Any custom versioning    and fixup behavior should go here. PostLoad is mutually exclusive with PostActorCreated.</p> </li> <li> <p>InitializeActorsForPlay</p> </li> <li> <p>RouteActorInitialize for any non-initialized Actors (covers seamless travel carry over)</p> </li> <li> <p>PreInitializeComponents - Called before InitializeComponent is called on the Actor's components</p> </li> <li> <p>InitializeComponent - Helper function for the creation of each component defined on the Actor</p> </li> <li> <p>PostInitializeComponents - Called after the Actor's components have been initialized</p> </li> <li> <p>BeginPlay - Called when the level is started</p> </li> </ol>"},{"location":"ue4guide/gameplay-programming/actor-tick-lifecycle-flow/actor-lifecycle-diagram/#play-in-editor","title":"Play in Editor","text":"<p>The Play in Editor path is mostly the same as Load from Disk, however the Actors are never loaded from disk, they are copied from the Editor.</p> <ol> <li> <p>Actors in the Editor are duplicated into a new World</p> </li> <li> <p>PostDuplicate is called</p> </li> <li> <p>InitializeActorsForPlay</p> </li> <li> <p>RouteActorInitialize for any non-initialized Actors (covers seamless travel carry over)</p> </li> <li> <p>PreInitializeComponents - Called before InitializeComponent is called on the Actor's components</p> </li> <li> <p>InitializeComponent - Helper function for the creation of each component defined on the Actor</p> </li> <li> <p>PostInitializeComponents - Called after the Actor's components have been initialized</p> </li> <li> <p>BeginPlay - Called when the level is started</p> </li> </ol>"},{"location":"ue4guide/gameplay-programming/actor-tick-lifecycle-flow/actor-lifecycle-diagram/#spawning","title":"Spawning","text":"<p>When spawning (instancing) an Actor, this is the path that will be followed.</p> <ol> <li> <p>SpawnActor called</p> </li> <li> <p>PostSpawnInitialize</p> </li> <li> <p>PostActorCreated - called for spawned    Actors after its creation, constructor like behavior should go here.    PostActorCreated is mutually exclusive with PostLoad.</p> </li> <li> <p>ExecuteConstruction:</p> </li> </ol> <ul> <li>OnConstruction - The construction of the      Actor, this is where Blueprint Actors have their components created and      blueprint variables are initialized</li> </ul> <ol> <li> <p>PostActorConstruction:</p> </li> <li> <p>PreInitializeComponents - Called before InitializeComponent is called on the Actor's components</p> </li> <li> <p>InitializeComponent - Helper function for the creation of each component defined on the Actor</p> </li> <li> <p>PostInitializeComponents - Called after the Actor's components have been initialized</p> </li> <li> <p>OnActorSpawned broadcast on UWorld</p> </li> <li> <p>BeginPlay is called.</p> </li> </ol>"},{"location":"ue4guide/gameplay-programming/actor-tick-lifecycle-flow/actor-lifecycle-diagram/#deferred-spawn","title":"Deferred Spawn","text":"<p>An Actor can be Deferred Spawned by having any properties set to \"Expose on Spawn.\"</p> <ol> <li> <p>SpawnActorDeferred - meant to spawn procedural Actors, allows additional setup before Blueprint construction script</p> </li> <li> <p>Everything in SpawnActor occurs, but after PostActorCreated the following occurs:</p> </li> <li> <p>Do setup / call various \"initialization functions\" with a valid but incomplete Actor instance</p> </li> <li> <p>FinishSpawningActor - called to Finalize the Actor, picks up at ExecuteConstruction in the Spawn Actor line.</p> </li> </ol>"},{"location":"ue4guide/gameplay-programming/actor-tick-lifecycle-flow/actor-lifecycle-diagram/#coming-to-the-end-of-life","title":"Coming to the End of Life","text":"<p>Actors can be destroyed in a number of ways, but the way they end their existence is always the same.</p>"},{"location":"ue4guide/gameplay-programming/actor-tick-lifecycle-flow/actor-lifecycle-diagram/#during-gameplay","title":"During Gameplay","text":"<p>These are completely optional, as many Actors will not actually die during play.</p> <p>Destroy - is called manually by game any time an Actor is meant to be removed, but gameplay is still occurring. The Actor is marked pending kill and removed from Level's array of Actors.</p> <p>EndPlay - Called in several places to guarantee the life of the Actor is coming to an end. During play, Destroy will fire this, as well Level Transitions, and if a streaming level containing the Actor is unloaded. All the places EndPlay is called from:</p> <ul> <li> <p>Explicit call to Destroy</p> </li> <li> <p>Play in Editor Ended</p> </li> <li> <p>Level Transition (seamless travel or load map)</p> </li> <li> <p>A streaming level containing the Actor is unloaded</p> </li> <li> <p>The lifetime of the Actor has expired</p> </li> <li> <p>Application shut down (All Actors are Destroyed)</p> </li> </ul> <p>Regardless of how this happens, the Actor will be marked RF_PendingKill so during the next garbage collection cycle it will be deallocated. Also, rather than checking for pending kill manually, consider using an <code>FWeakObjectPtr&lt;AActor&gt;</code> as it is cleaner.</p> <p>OnDestroy - This is a legacy response to Destroy. You should probably move anything here to EndPlay as it is called by level transition and other game cleanup functions.</p>"},{"location":"ue4guide/gameplay-programming/actor-tick-lifecycle-flow/actor-lifecycle-diagram/#garbage-collection","title":"Garbage Collection","text":"<p>Some time after an object has been marked for destruction, Garbage Collection will actually remove it from memory, freeing any resources it was using.</p> <p>The following functions are called on the object during its destruction:</p> <ol> <li> <p>BeginDestroy - This is the object's chance to free up memory and handle other multithreaded resources (ie: graphics thread proxy objects). Most gameplay functionality related to being destroyed should have been handled earlier, in <code>EndPlay</code>.</p> </li> <li> <p>IsReadyForFinishDestroy - The garbage collection process will call this function to determine whether or not the object is ready to be deallocated permanently. By returning <code>false</code>, this function can defer actual destruction of the object until the next garbage collection pass.</p> </li> <li> <p>FinishDestroy - Finally, the object is really going to be destroyed, and this is another chance to free up internal data structures. This is the last call before memory is freed.</p> </li> </ol>"},{"location":"ue4guide/gameplay-programming/actor-tick-lifecycle-flow/actor-lifecycle-diagram/#advanced-garbage-collection","title":"Advanced Garbage Collection","text":"<p>The garbage collection process in Unreal Engine 4 builds clusters of objects that are all destroyed together. Clustering reduces the total time and overall memory churn associated with garbage collection compared to deleting objects indivudally. As an object loads, it may create subobjects. By combining the object and its subobjects into a single cluster for the garbage collector, the engine can delay freeing the resources used by the cluster until the entire object is ready to be freed, and can then free all of the resources at once.</p> <p>Garbage collection does not need to be configured or modified at all for most projects, but there are some specific cases in which the \"clustering\" behavior of the garbage collector can be altered to improve efficiency in the following ways:</p> <ol> <li> <p>Clustering - Turn clustering off. In Project Settings, under the Garbage Collection section, the Create Garbage Collector UObject Clusters option can be set to false. For most projects, this will result in less efficient garbage collection, so it is recommended that this only be done in cases where performance testing reveals that it is definitely beneficial.</p> </li> <li> <p>Cluster Merging - If clustering is set to true, the Merge GC Clusters option (in Project Settings, under the Garbage Collection section) can be set to true in order to activate cluster merging. This behavior is turned off by default, and is not suited for every project. During the process of building an object's cluster, the object will be examined, and references to other objects may be found within it. Without cluster merging (the default behavior), those references are noted, but the object being loaded, and its subobjects, remain in their original cluster. With cluster merging, the clusters of the object being loaded and the referenced object will be combined. For example, a particle system asset may reference a material asset, but if cluster merging is turned off, the material and the particle system will remain in separate clusters for garbage collection purposes. With cluster merging turned on, the particle asset cluster will be merged with the material cluster due to the particle system referencing the material. This behavior is often not desired in games that stream content, such as open-world games, as many clusters may merge together and form bigger, more diverse groups of objects. Since objects in clusters will not be destroyed indivudally, waiting until every object in the group is set for destruction, this can result in large clusters of objects that are kept in memory due to a small number of those objects being in constant use. However, enabling cluster merging and manually adding clusters, in code, for special cases like assets with large numbers of referenced objects that are not shared by other objects, can improve performance by unifying cleanup of the subobjects and decreasing the individual number of entries and dependencies the garbage collector must maintain and check during the game.</p> </li> </ol>"},{"location":"ue4guide/gameplay-programming/actor-tick-lifecycle-flow/actor-tick-lifecycle-flow/","title":"Actor Load/Init Function Cheatsheet","text":"Actor Function Component Function On CDO? On Level Load? On Place In Level? On Play? On Spawn? On Open Blueprint? \\(PostInitProperties\\) - Y Y Y Y Y Y \\(PostLoad\\) - Y Y N Y N N \\(PostActorCreated\\) \\(OnComponentCreated\\) N N Y Y Y Y \\(PostRegisterAllComponents\\) \\(OnRegister\\) N Y Y Y Y Y \\(PostInitializeComponents\\) \\(InitializeComponent\\) (iff bWantsInitializeComponent == true) N N Y Y Y Y"},{"location":"ue4guide/gameplay-programming/actor-tick-lifecycle-flow/actor-tick-lifecycle-flow/#actor-tick-lifecycle-flow","title":"Actor Tick Lifecycle Flow","text":"<p>The functions of interest to initialization order for an Actor is roughly as follows:</p> <ul> <li> <p>PostLoad/PostActorCreated - Do any setup of the actor required for construction. PostLoad for serialized actors, PostActorCreated for spawned.</p> </li> <li> <p>AActor::OnConstruction - The construction of the actor, this is where Blueprint actors have their components created and blueprint variables are initialized</p> </li> <li> <p>AActor::PreInitializeComponents - Called before InitializeComponent is called on the actor's components</p> </li> <li> <p>UActorComponent::InitializeComponent - Each component in the actor's components array gets an initialize call (if bWantsInitializeComponent is true for that component)</p> </li> <li> <p>AActor::PostInitializeComponents - Called after the actor's components have been initialized</p> </li> <li> <p>AActor::BeginPlay - Called when the level is started</p> </li> </ul> <p>Ticks are executed asynchronously in tick groups</p> <p>Tick groups define general dependency between sets of actor ticks</p> <p>Within a tick group, you can define a graph dependency by:</p> <p>AddTickPrerequisiteActor or AddTickPrerequisiteComponent</p> <p>Tick Groups:</p> <ul> <li>TG_PrePhysics - ticked before physics simulation starts</li> <li>TG_StartPhysics - special tick group that starts physics simulation</li> <li>TG_DuringPhysics - ticks that can be run in parallel with our physics simulation work</li> <li>TG_EndPhysics - special tick group that ends physics simulation</li> <li>TG_PreCloth - any item that needs physics to be complete before being executed</li> <li>TG_StartCloth - any item that needs to be updated after rigid body simulation is done, but before cloth is simulation is done</li> <li>TG_EndCloth - any item that can be run during cloth simulation</li> <li>TG_PostPhysics - any item that needs rigid body and cloth simulation to be complete before being executed</li> <li>TG_PostUpdateWork - any item that needs the update work to be done before being ticked</li> <li>TG_NewlySpawned - Special tick group that is not actually a tick group. After every tick group this is repeatedly re-run until there are no more newly spawned items to run</li> </ul> <p>Reference From https://answers.unrealengine.com/questions/231386/tickgroup-how-to-understand-that.html</p>"},{"location":"ue4guide/gameplay-programming/actor-tick-lifecycle-flow/actor-tick-lifecycle-flow/#actor-tick","title":"Actor Tick()","text":"<ul> <li> <p>Object ticking is done by registering a function delegate (FTickFunction) to the engine which is responsible for executing it. Ex: For Actors, FActorTickFunction::ExecuteTick() calls TickActor()</p> </li> <li> <p>For component ticking it's UActorComponent::ExecuteTick()</p> </li> <li> <p>TickComponent()</p> <ul> <li> <p>UActorComponent::RecieveTick(): Blueprint Tick event</p> </li> <li> <p>Then native logic generally happens after</p> </li> </ul> </li> <li> <p>Actor:TickActor() determines whether to tick the actor or not &amp; then ticks it</p> </li> <li> <p>This is overriden in PlayerController to specify more exacting logic on order of what components tick when (e.g. input before main actor::tick &amp; whether you're on the server or not)</p> </li> <li> <p>Calls Actor::Tick()</p> </li> <li> <p>Actor::Tick() is native overridable function that contains tick() update logic</p> </li> <li> <p>At beginning, calls RecieveTick() which is the BP event hook to execute tick logic</p> </li> <li> <p>Afterwards, calls ProcessLatentActions() to process BP latent actions like delay events</p> </li> </ul>"},{"location":"ue4guide/gameplay-programming/actor-tick-lifecycle-flow/actor-tick-lifecycle-flow/#notes","title":"Notes","text":"<ul> <li> <p>ActorComponent's are not necessarily ticked in any order in relation to their owner Actor. Everything is just added onto the task graph. You have to use AddActorPrerequisite or AddActorComponentPrerequisite to define dependencies</p> </li> <li> <p>By default, CharacterMovementComponent/MovementCOmponents force their owning actors to tick after them</p> </li> <li> <p>SceneComponent waits for ParentAttached component to tick before it ticks itself</p> </li> <li> <p>Pawns ticks after owned Controller. Controller::SetPawn() adds a dependency to its Pawn on itself</p> </li> <li> <p>IntializeComponent and BeginPlay are only called in game worlds, not the editor world, so that may be why you aren't seeing them called. Like bWantsBeginPlay you also need bWantsInitializeComponent. Both BeginPlay and InitializeComponent will get called as part of calling RegisterComponent if the owning Actor has been initialized/begun play respectively.</p> </li> </ul> <p>Reference From https://udn.unrealengine.com/questions/285100/component-creation-overview.html</p> C++<pre><code>// General flow here is like so\n        // - Actor sets up the basics.\n        // - Actor gets PreInitializeComponents()\n        // - Actor constructs itself, after which its components should be fully assembled\n        // - Actor components get OnComponentCreated\n\n// - Actor components get OnRegister\n\n// - Actor components get InitializeComponent\n\n// - Actor gets PostInitializeComponents() once everything is set up\n\n// - Actor components get RegisterComponentTickFunctions\n        // This should be the same sequence for deferred or nondeferred spawning.\n\n// It's not safe to call UWorld accessor functions till the world info has been spawned.\n</code></pre> <p>PostInitProperties()</p> <ul> <li>Gets called after the UPROPERTY member variables have been initialized for a class from the instance data/CDO</li> <li>NOTE: Any properties set on default subobjects inside the constructor get stomped by the CDO's properties when the constructor exits.</li> <li>Good place to put computed values (e.g. Designer sets Damage &amp; DamageTime =&gt; Computed DamagePerSecond)</li> </ul> <p>Actor::SpawnActor</p> <ul> <li> <p>Actor::PostSpawnInitialize</p> </li> <li> <p>ActorComponents::OnComponentCreated</p> </li> </ul>"},{"location":"ue4guide/gameplay-programming/actor-tick-lifecycle-flow/creating-components-at-runtime-or-dynamically-in-c-programming/","title":"Creating components at runtime or dynamically in c programming","text":"<p>Then learn how to add component of any class, once you learn that you will be able place any component you like. you do this:</p> <p>In header:</p> C++<pre><code>UPROPERTY()\nUClassOfTheComponent\\* Component;\n</code></pre> <p>Then you want to create component:</p> C++<pre><code>Component = ConstructObject&amp;lt;UClassOfTheComponent&gt;(UClassOfTheComponent::StaticClass(), GetOwner(), NAME_None, RF_Transient);\n</code></pre> <p>Then set up variables that set up the component (in case of UChildActorComponent you set ChildActorClass which will spawn actor, or ChildActor if you got ready one). If you deal with SceneComponent you need to attach it to something, so you can copy rama code here:</p> <p>Component-&gt;AttachTo(this-&gt;ShipMesh, primaryWeaponSlots[i].socketName, EAttachLocation::SnapToTarget);</p> <p>And with every component you need to register it</p> <p>Component-&gt;RegisterComponent();</p> <p>Reference From https://answers.unrealengine.com/questions/221783/add-child-actor-component-in-c.html</p> <p>Spawn/respawn/Create/recreate/modify Component at runtime:</p> C++<pre><code>void AMyComponentSpawner::PostEditChangeProperty(struct FPropertyChangedEvent&amp; PropertyChangedEvent)\n{\n//Get all of our components\nTArray&amp;lt;UActorComponent\\*&gt; MyComponents;\nGetComponents(MyComponents);\n\n//Get the name of the property that was changed\nFName PropertyName = (PropertyChangedEvent.Property != nullptr) ? PropertyChangedEvent.Property-&gt;GetFName() : NAME_None;\n\n// We test using GET_MEMBER_NAME_CHECKED so that if someone changes the property name\n// in the future this will fail to compile and we can update it.\nif ((PropertyName == GET_MEMBER_NAME_CHECKED(AMyComponentSpawner, MyMesh)))\n{\nFMultiComponentReregisterContext ReregisterContext(MyComponents);\n\nfor (UActorComponent\\* Comp : MyComponents)\n{\nif (UStaticMeshComponent\\* MeshComp = Cast&amp;lt;UStaticMeshComponent&gt;(Comp))\n{\nMeshComp-&gt;SetStaticMesh(MyMesh); // Update the component to the new mesh\n}\n}\n}\n\n// Call the base class version\nSuper::PostEditChangeProperty(PropertyChangedEvent);\n}\n#endif\n</code></pre> <p>Reference From https://docs.unrealengine.com/latest/INT/API/Runtime/Engine/GameFramework/AActor/PostEditChangeProperty</p>"},{"location":"ue4guide/gameplay-programming/actor-tick-lifecycle-flow/dynamically-create-components-from-other-components/","title":"Dynamically create components from other components","text":"<p>Your component isn't being serialized properly because you're not telling the engine to keep it around. If nothing has a reference to the static mesh component (i.e. a UProperty), then the engine will clean it up and remove it.</p> <p>Using the following implementation for FindOrCreateStaticLodMesh I was able to have cooking succeed and have the component be preserved across level changes ( LodComponent is the name of my private UStaticMeshComponent marked with UPROPERTY()):</p> C++<pre><code>UStaticMeshComponent \\*UDestructibleComponent::FindOrCreateStaticLodMesh()\n\n{\n\nstatic const FName NAME_StaticMeshComponent = TEXT(\"StaticLodMesh\");\n\n\n\n if (HasAnyFlags(RF_ClassDefaultObject | RF_ArchetypeObject))\n\n  {\n\n return nullptr;\n\n  }\n\n// If we have a reference to the component, just return it\n\nif (LodComponent)\n\n{\n\nreturn LodComponent;\n\n}\n\n\n\n // Try to find the component on the owner actor\n\n LodComponent = GetOwner()-&gt;FindComponentByClass&amp;lt;UStaticMeshComponent&gt;();\n\n if (LodComponent)\n\n {\n\n return LodComponent;\n\n }\n\n\n // Now create the component\n\n LodComponent = NewObject&amp;lt;UStaticMeshComponent&gt;(GetOwner(), NAME_StaticMeshComponent);\n\n LodComponent-&gt;SetupAttachment(GetOwner()-&gt;GetRootComponent());\n\n LodComponent-&gt;CreationMethod = EComponentCreationMethod::Instance;\n\n LodComponent-&gt;RegisterComponent();\n\n return LodComponent;\n\n }\n</code></pre> <p>Reference From https://udn.unrealengine.com/questions/457850/view.html</p> <p>gerardo.perez  ( Disruptive Games Inc. ) 3 days ago Newest</p> <p>We ended up adding it to the actor's InstanceComponents list, which is serialized. Using a uproperty on the component alone was not working at some point but I'm not aware of the details. Anyway, thank you. Our problem is resolved.</p> <p>Reference From https://udn.unrealengine.com/questions/457850/view.html</p>"},{"location":"ue4guide/gameplay-programming/animation-subsystem/animation-playback-syncing/","title":"Animation playback syncing","text":"<p>SkeletalMeshComponent.cpp:</p> C++<pre><code>TAutoConsoleVariable&amp;lt;int32&gt; CVarUseParallelAnimationEvaluation(TEXT(\"a.ParallelAnimEvaluation\"), 1, TEXT(\"If 1, animation evaluation will be run across the task graph system. If 0, evaluation will run purely on the game thread\"));  \nTAutoConsoleVariable&amp;lt;int32&gt; CVarUseParallelAnimUpdate(TEXT(\"a.ParallelAnimUpdate\"), 1, TEXT(\"If != 0, then we update animation blend tree, native update, asset players and montages (is possible) on worker threads.\"));  \nTAutoConsoleVariable&amp;lt;int32&gt; CVarForceUseParallelAnimUpdate(TEXT(\"a.ForceParallelAnimUpdate\"), 1, TEXT(\"If != 0, then we update animations on worker threads regardless of the setting on the anim blueprint.\"));\n\nvoid USkinnedMeshComponent::TickComponent(float **DeltaTime**, enum ELevelTick TickType, FActorComponentTickFunction \\***ThisTickFunction**)\n\nbool UAnimInstance::NeedsImmediateUpdate(float **DeltaSeconds**) const\n\nvoid UAnimInstance::UpdateAnimation(float **DeltaSeconds**, bool **bNeedsValidRootMotion**)\n\nvoid USkeletalMeshComponent::RefreshBoneTransforms(FActorComponentTickFunction\\* **TickFunction**)\n\nUSkeletalMeshComponent::TickPose(float **DeltaTime**, bool **bNeedsValidRootMotion**)\n\nvoid USkeletalMeshComponent::TickAnimation(float **DeltaTime**, bool **bNeedsValidRootMotion**)\n</code></pre> <p>For evaluating animation sequence:</p> <p>https://answers.unrealengine.com/questions/349862/bone-transform-at-certain-timekey.html</p> <p>https://wiki.unrealengine.com/Animation_Node,_Translate_With_Complete_Source_Code_and_Instructions</p> <p>https://forums.unrealengine.com/showthread.php?56356-How-to-get-a-bone-location-for-the-first-frame-of-an-AnimMontage</p> C++<pre><code>FAnimInstanceProxy::SlotEvaluatePose(FName **SlotNodeName**, const FCompactPose&amp; **SourcePose**, const FBlendedCurve&amp; **SourceCurve**, float **InSourceWeight**, FCompactPose&amp; **BlendedPose**, FBlendedCurve&amp; **BlendedCurve**, float **InBlendWeight**, float **InTotalNodeWeight**)\n\nFTransform UAnimSequence::ExtractRootMotion(float StartTime, float DeltaTime, bool bAllowLooping) const\n\nvirtual void GetAnimationPose(FCompactPose&amp; **OutPose**, FBlendedCurve&amp; **OutCurve**, const FAnimExtractContext&amp; **ExtractionContext**) const override;\n\nvoid GetBonePose(FCompactPose&amp; **OutPose**, FBlendedCurve&amp; **OutCurve**, const FAnimExtractContext&amp; **ExtractionContext**, bool **bForceUseRawData**=false) const;\n\nvoid UAnimSequence::GetBonePose(FTransformArrayA2&amp; OutAtoms, const FBoneContainer&amp; RequiredBones, const FAnimExtractContext&amp; ExtractionContext) const\n\nvoid GetBoneTransform(FTransform&amp; **OutAtom**, int32 **TrackIndex**, float **Time**, bool **bUseRawData**) const;\n\nint32 USkinnedMeshComponent::GetBoneIndex( FName **BoneName**) const\n\nUSkinnedMeshComponent::GetSocketTransform(FName **InSocketName**, ERelativeTransformSpace **TransformSpace**) const\n</code></pre>"},{"location":"ue4guide/gameplay-programming/animation-subsystem/animation-subsystem/","title":"Animation Subsystem","text":"<p>AnimInstance is the runtime animation class that maintains runtime data &amp; plays shit</p> <ul> <li>This is the parent class of the animation blueprint</li> <li> <p>Get Bone Transforms from a specific time t:</p> </li> <li> <p>Sequence-&gt;GetAnimationPose(Output.Pose, Output.Curve, FAnimExtractContext(CurrentTime, Sequence-&gt;bEnableRootMotion));</p> </li> </ul> <p>UAnimationAsset is the classes that contain the actual data and also calculates bones &amp; curves</p> <ul> <li> <p>UAnimSequence</p> </li> <li> <p>UAnimComposite</p> </li> <li> <p>UAnimMontage</p> </li> </ul> <p>Two classes for each Anim Node; separated for optimization b/c node construction is expensive</p> <ul> <li> <p>UAnimGraphNode_Base: Anim Graph Node that's shown in editor</p> </li> <li> <p>Only exist in editor</p> </li> <li> <p>One way relationship with corresponding FAnimNode_Base counterpart</p> </li> <li> <p>FAnimNode_Base: Anim Behavior node that is run time</p> </li> <li> <p>Initialize: Called whenever need to initialize/reinitialize (e.g. changing mesh instance)</p> </li> <li> <p>Update: Called to update current state (such as advancing playtime or updating blend weights)</p> <ul> <li> <p>Takes FAnimationUpdateContext that knows the delta time for the update &amp; the current nodes blend weight</p> </li> <li> <p>Might be where we hook in to do the forward time projection intersection</p> </li> </ul> </li> <li> <p>Evaluate/EvaluateComponentSpace: Generates a 'pose' i.e. list of bone transforms</p> </li> <li> <p>FAnimationRuntime has lots of good functions to look at and utility/helper functions</p> </li> </ul> <p>Sequence:</p> <p>Update Functions:</p> <p>*[Should be called before RefreshBoneTransforms]*USkinnedMeshComponent::TickPose()</p> <p>[Should be atomic &amp; not rely on Tick()] USkinnedMeshComponent::RefreshBoneTransforms()</p> <p>USkinnedMeshComponent::FinalizeBoneTransform()</p> <p>USkeletalMeshComponent::InitAnim: Called when component needs to initialize or reinitialize eg InitializeComponent() or SetSkeletalMesh()</p> <ul> <li> <p>USkeletalMeshComponent::InitializeAnimScriptInstance</p> </li> <li> <p>AnimInstance::InitializeAnimation</p> <ul> <li> <p>AnimInstance::NativeInitializeAnimation()</p> </li> <li> <p>AnimInstance::BlueprintInitializeAnimation()</p> </li> </ul> </li> </ul> <p>USkinnedMeshComponent::TickComponent()</p> <ul> <li> <p>USkinnedMeshComponent::TickPose()</p> </li> <li> <p>USkeletalMeshComponent::TickAnimation</p> <ul> <li> <p>AnimInstance::UpdateAnimation</p> </li> <li> <p>[Default does nothing] NativeUpdateAnimation: Only does something for UAnimSingleNodeInstance</p> </li> <li> <p>BlueprintUpdateAnimation: Main AnimBP entry point</p> </li> <li> <p>FAnimNode_Base::Update()</p> </li> <li> <p>UAnimInstance::Montage_Advance()</p> </li> <li> <p>UAnimInstance::TriggerAnimNotifies</p> </li> <li> <p>UAnimInstance::TriggerQueuedMontageEvents</p> </li> </ul> </li> <li> <p>USkinnedMeshComponent::RefreshBoneTransforms()</p> </li> <li> <p>USkinnedMeshComponent::PerformAnimationEvaluation()</p> <ul> <li> <p>[Evaluate Animation System] USkeletalMeshComponent::EvaluateAnimation()</p> </li> <li> <p>AnimInstance::EvaluateAnimation()</p> <ul> <li> <p>[Default does nothing] UAnimInstance::NativeEvaluateAnimation() AnimInstance can override animgraph evaluation completely. Ex: AnimSingleNodeInstance() doesn't eval the animgraph</p> </li> <li> <p>FAnimNode_Base::Evaluate(): This is the root of the anim graph. Called if NativeEvaluateAnimation returns false</p> </li> </ul> </li> </ul> </li> <li> <p>USkeletalMeshComponent::PostAnimEvaluation</p> </li> <li> <p>AnimInstance::UpdateCurves</p> </li> <li> <p>USkinnedMeshComponent::FinalizeBoneTransform()</p> <ul> <li> <p>AnimInstance::PostEvaluateAnimation</p> </li> <li> <p>[Does nothing by default but virtual] AnimInstance::NativePostEvaluateAnimation</p> </li> <li> <p>BlueprintPostEvaluateAnimation</p> </li> </ul> </li> <li> <p>UpdateComponentToWorld()</p> </li> <li> <p>UpdateOverlaps()</p> </li> <li> <p>[If RefreshBoneTransforms() not called from Tick()] USkinnedMeshComponent::FinalizeBoneTransform</p> </li> </ul> <p>Useful CPU Skinning stuff:</p> <p>bool USkinnedMeshComponent::ShouldCPUSkin()</p> <p>USkinnedMeshComponent::ComputeSkinnedPositions</p> <p>USkinnedMeshComponent::GetSkinnedVertexPosition</p> <p>GetBoneNames</p> <p>GetBoneTransform</p> <p>Function to update physics data from animated data</p> C++<pre><code>USkeletalMeshComponent::UpdateKinematicBonesToAnim(const TArray&amp;lt;FTransform&gt;&gt; **InSpaceBases**, ETeleportType **Teleport**, bool **bNeedsSkinning**)\n\nUSkeletalMeshComponent::PerformBlendPhysicsBones(const TArray&amp;lt;FBoneIndexType&gt;&gt; **InRequiredBones**, TArray&amp;lt;FTransform&gt;&gt; **InLocalAtoms**)\n</code></pre>"},{"location":"ue4guide/gameplay-programming/animation-subsystem/master-pose-vs-copy-pose-vs-mesh-merge/","title":"Master pose vs copy pose vs mesh merge","text":""},{"location":"ue4guide/gameplay-programming/animation-subsystem/master-pose-vs-copy-pose-vs-mesh-merge/#1-master-pose-component","title":"1. Master Pose Component","text":"<ul> <li> <p>This is Blueprint callable action that you set Child-&gt;SetMasterPoseComponent(Body), then Body becomes the master of Child, which means Child will follow whatever Body does.</p> </li> <li> <p>Behind of scene, Child does not have any bone transform buffer and it doesn't run any animation system even if you set AnimBP on the Child, and it just uses Body's bone transform buffer when rendered. This makes very light weight attachment system. Only component that has to run animation is Body, and all attachment will just use Body's bone transform.</p> </li> <li> <p>This does not reduce render cost. You still render # of components separate (and more drawcalls if you have more sections for each), but this reduces game thread cost.</p> </li> <li> <p>Limitation</p> </li> <li> <p>Child has to have SUBSET of exact matching structure. You can't have any other extra joint or skip the joint. Since there is no bone buffer for that extra joint, that will render in the origin of the mesh.</p> </li> <li> <p>You can't run any other animation or physics on the Child.</p> </li> </ul>"},{"location":"ue4guide/gameplay-programming/animation-subsystem/master-pose-vs-copy-pose-vs-mesh-merge/#2-copy-pose-from-mesh","title":"2. Copy Pose From Mesh","text":"<ul> <li> <p>This is anim graph node that you can use on AnimBP of the Child.</p> </li> <li> <p>It allows you to copy from any SkeletalMeshComponent. You also want to make sure the SkeletalMeshComponent (I'll call this Body) you copy from ALREADY has ticked. Otherwise you're going to copy last frame's animation. To ensure this, you can just attach Child to the Body. Once you attach, it will ensure parent ticks first before child.</p> </li> </ul> <p></p> <ul> <li> <p>This only copies the bones that matching, and everything else will stay on reference pose.</p> </li> <li> <p>Or you can choose to play animation on top of the copied transform as illustrated above.</p> </li> <li> <p>Limitation</p> </li> <li> <p>If Body has physics on them, you'd like to make sure to run this AFTER your parent blends physics with it, which means it has to tick in Post Physics, but that means you can't have any physics on the Child. I did not test this but in theory, you can have the Child to have physics, but not both of them at the same time.</p> </li> <li> <p>Of course more expensive than Master Pose because this runs animation on each Child.</p> </li> </ul>"},{"location":"ue4guide/gameplay-programming/animation-subsystem/master-pose-vs-copy-pose-vs-mesh-merge/#3-mesh-merge","title":"3. Mesh merge.","text":"<ul> <li> <p>Mesh merge allows you to create SkeletalMesh from multiple meshes</p> </li> <li> <p>It has high initial cost of creating the SkeletalMesh</p> </li> <li> <p>Rendering cost is cheap since you can only render one mesh as opposed to multiple meshes</p> </li> <li> <p>Main Body has to contain all the animations because the merged mesh will only use the skeleton that's set, and it will has to contain all the joints you'd need to animate. Say you have extra joints for certain body parts, you still have to have all animations on the Body.</p> </li> <li> <p>Morphtarget is not supported</p> </li> <li> <p>You only run one animation on the merged mesh.</p> </li> </ul> <p>Reference From https://iluvanimation.blogspot.com/2017/04/master-pose-vs-copy-pose-vs-mesh-merge.html</p>"},{"location":"ue4guide/gameplay-programming/animation-subsystem/overview/","title":"Animation Ticking","text":""},{"location":"ue4guide/gameplay-programming/animation-subsystem/overview/#animation-debug","title":"Animation Debug","text":"<p>ShowDebug Bones to show debug view of animation bones</p> <ul> <li>To Show different style of bones: ShowDebugToggleSubCategory 3DBones</li> </ul> <p>ShowDebug Animation</p> <ul> <li> <p>Show all animation debug info</p> </li> <li> <p>Turn off/on certain categories by ShowDebugToggleSubCategory &lt;categoryname&gt;</p> </li> </ul>"},{"location":"ue4guide/gameplay-programming/animation-subsystem/skeletal-mesh-merge/","title":"Skeletal mesh merge","text":"<p>https://docs.unrealengine.com/en-us/Engine/Animation/Working-with-Modular-Characters</p> <p>https://forums.unrealengine.com/unreal-engine/feedback-for-epic/5101-content-and-documentation-for-customizable-characters-using-fskeletalmeshmerge?5665-Content-and-Documentation-for-Customizable-characters-using-FSkeletalMeshMerge=</p>"},{"location":"ue4guide/gameplay-programming/animation-subsystem/skeletal-mesh-merge/#morph-mesh-merge","title":"Morph Mesh Merge:","text":"<p>Morphtarget is very simple.</p> <p>UMorphTarget -&gt; FMorphTargetLODModel (per LOD) -&gt; FMorphTargetDelta</p> <p>This delta stores vertex index, and delta of position and normal.</p> <p>Mesh merge code is</p> C++<pre><code>bool FSkeletalMeshMerge::DoMerge(TArray\\* RefPoseOverrides / *= nullptr* /)\n\n /** Destination merged mesh */\n\n USkeletalMesh* MergeMesh;\n\n /** Array of source skeletal meshes */\n\n TArray&lt;USkeletalMesh*&gt; SrcMeshList;\n</code></pre> <p>You have SrcMeshList, and at the end,</p> <p>void FSkeletalMeshMerge::GenerateLODModel( int32 LODIdx )</p> <p>Will generate the new LODModel.</p> <p>USkeletalMesh has TArray MorphTargets. You'll have to transfer SrcMeshList to MergedMesh with new vertex Id.</p> <p>I assume you can save the vertex Id link somewhere in GenerateLODModel, and look for them later.</p> <p>Later on once you have UMorphtarget for new mesh, make sure to call</p> <p>void RegisterMorphTarget(UMorphTarget* MorphTarget);</p> <p>To register.</p> <p>We create Morphtarget with internal object of USkeletalMesh, meaning you'll have to create them with the current skeletalmesh as outer.</p> <p>MorphTarget = NewObject(BaseSkelMesh, FName(*ShapeName));</p> <p>Reference From https://udn.unrealengine.com/questions/397831/adding-morph-targets-to-skeletal-mesh-merge.html</p> <p>bool FLODUtilities::RegenerateLOD(USkeletalMesh* SkeletalMesh, int32 NewLODCount /= 0/, bool bRegenerateEvenIfImported /= false/)</p> <p>Usually this is utility function for doing so.</p> <p>Reference From https://udn.unrealengine.com/questions/456237/crash-skeletal-mesh-merge-output-has-no-lodrenderd.html</p>"},{"location":"ue4guide/gameplay-programming/animation-subsystem/uskeletalmesh-fskeletalmeshresource-fskeletalmeshrenderdata-fskeletalmeshlodmodel/","title":"Uskeletalmesh fskeletalmeshresource fskeletalmeshrenderdata fskeletalmeshlodmodel","text":"<p>The main idea here is that we want to move the SkeletalMesh render data into the Derived Data Cache (DDC) in a similar way to how StaticMesh works. This makes it much easier to make changes to the render buffer layout. To this end we split FSkeletalMeshResource (which was both the 'source' and the 'derived' data) into FSkeletalMeshModel (source data, only available in editor builds) and FSkeletalMeshRenderData (the actual data needed at runtime for rendering). For each LOD we now have a FSkeletalMeshLODModel (editor only data, within the FSkeletalMeshModel) and a FSkeletalMeshLODRenderData (derived render data, within the FSkeletalMeshRenderData). These are the replacement for the old, confusingly named FStaticLODModel. The derived data is transient - it is re-derived any time the source data changes.</p> <p>So when you are updating your code, the main question is - \"is this runtime or editor time code\". If you want to work on the source data in the editor, you need to work on FSkeletalMeshModel. If your code is supposed to run in cooked game builds, then you can only work with FSkeletalMeshRenderData. So for example, the mesh merging code all works with FSkeletalMeshRenderData because it has to work at runtime. All the editor code now operates on FSkeletalMeshModel, and triggers a rebuild of the derived data so you can see the results (you can see USkeletalMesh::PostEditChangeProperty calls InvalidateRenderData which updates the GUID on the source data and re-generates the derived data for rendering.</p> <p>I hope that helps!</p> <p>Reference From https://forums.unrealengine.com/development-discussion/c-gameplay-programming/1446998-what-happened-to-uskeletalmesh-in-ue-4-19</p>"},{"location":"ue4guide/gameplay-programming/gameplay-ability-system/epic-technical-brief/","title":"Overview","text":"<p>The ability system is a large, encompassing gameplay system that is shared between our internal game teams and remains a work-in-progress. It offers a lot of traditional RPG/attribute/skill functionality in a generic, yet powerful way.</p> <p>Ability System Component Core actor component of the system: pretty much everything using the system has one of these. Acts as manager for all the other pieces.</p> <p>GameplayTags Hierarchical tagging system. Used in many different areas of the system for writing designer driven rules.</p> <p>Attributes: Numeric (float) properties. Live in AttributeSets that are subobjects on the owning actor. ASC aggregates modifiers on attributes and pushes final value to the uproperty. Other places can reference attributes generically.</p> <p>GameplayEffects Modifies attributes and gameplay tags. Can be duration based (Buff/Debuff), instant (Damage/Heal), or periodic (Dots). ASC manages applying and handling lifespan of individual GameplayEffects. Defined as blueprint classes though they are not instanced and do not use event graphs or implement custom logic themselves.</p> <p>Abilities Implement  custom Gameplay Logic. System provides basic input binding, cost/cooldowns, instancing, and networking. Clients can predictively execute abilities. If instanced they are subobjects on the owning actor. We don't execute abilities on simulated proxies; side effects generically replicate in other ways.</p> <p>GameplayCues Cosmetic clientside events. Separates business logic from presentation logic. System handles replication automatically. Game can ultimately decide how/where events are handled. By default we support custom event handling on the target actor and standalone 'notify' handling.</p> <p>GameplayTasks Game-agnostic framework for handling gameplay-related latent tasks. It comes with dedicated K2 node that hides most of the setup/running complexity from blueprint users.</p> <p>Tasks can be used in two modes. The basic mode supports simple operations like ticking and aborting. The advanced mode (not used by GameplayAbilities) supports priorities and arbitrary \"resources\" requirements (not allowing to run multiple actions requiring the same \"resource\" indicated by a simple integer ID).</p>"},{"location":"ue4guide/gameplay-programming/gameplay-ability-system/epic-technical-brief/#ability-system-summary","title":"Ability System Summary","text":"<p>(A more in depth writeup that explains how the system works, though is not an exhaustive write up on how to use the system).</p>"},{"location":"ue4guide/gameplay-programming/gameplay-ability-system/epic-technical-brief/#overview--how-we-using-it","title":"Overview + How We Using it","text":"<p>The ability system is a large, encompassing gameplay system that is shared between our internal game teams and remains a work-in-progress. It offers a lot of traditional RPG/attribute/skill functionality in a generic, yet powerful way.</p> <p>Fortnite uses every portion of the ability system for a significant part of its gameplay needs: every player skill/gadget, weapon attack, enemy AI attack, and every trap currently makes use of abilities, with potentially more applications planned in the future. The character classes as well as the HomeBase feature all make heavy usage of gameplay effects, and countless parts of the game use gameplay tags for run-time identification/gameplay.</p> <p>This document offers a high-level overview of each of the core components that make up the ability system as a whole.</p>"},{"location":"ue4guide/gameplay-programming/gameplay-ability-system/epic-technical-brief/#ability-system-component","title":"Ability System Component","text":"<p>The Ability System Component (ASC) is the central piece of the GameplayAbility system. It decouples usage of the ability system from any particular actor class. Any actor that wants to use the system create an ASC which then acts as a manager for Attributes, GameplayEffects, and Abilities.</p>"},{"location":"ue4guide/gameplay-programming/gameplay-ability-system/epic-technical-brief/#gameplay-tags","title":"Gameplay Tags","text":"<p>Gameplay tags are a hierarchical method of marking up assets or gameplay objects such that they can later be queried or matched against, allowing the creation of designer-driven gameplay without code support. As a simple example, a designer might mark a debuff as \u201cStatusEffect.Poison.Crippling\u201d to identify it as crippling poison. They can later implement an ability that removes all effects with \u201cStatusEffect.Poison,\u201d and effectively implement a poison antidote w/o any programmer intervention. Tags can be matched explicitly or via hierarchical parent.</p>"},{"location":"ue4guide/gameplay-programming/gameplay-ability-system/epic-technical-brief/#attributes","title":"Attributes","text":"<p>Gameplay Attributes represent float values such as Health, MaxHealth, Armor, Damage, Mana, etc. Each game will define its own attributes in collections called AttributeSets.</p> <p>Attributes in the end are simply float UProperties contained in UAttributeSets. FGameplayAttribute wraps the reference to the UProperty and provides a Details Customization for selecting attributes from a drop down (AttributeDetails.h/.cpp), allowing other pieces of the system to reference attributes generically.</p> <p>AttributeSets are what hold the attribute properties. AttributeSets are able to define extra logical to react to changes in attribute (Kill player if health is &lt; 0), enforce clamping (keep Health &lt;= MaxHealth), etc.  The sets are instantiated as subobjects on the owning actor (the actor that owns the Ability System Component). The attribute properties themselves replicate via normal subobject replication.</p> <p>Our approach so far has been the split up attributes into several sets. For example: HealthSet (anything that takes damage), CombatSet (anything that does damage), MovementSet (anything that moves), etc. That way, something like a tower would not have a MovementSet and would be able to ignore effects that modify movement related attributes.</p> <p>In addition the to \"final\" uproperty value, the ASC may also store an FAggregator for each attribute. The aggregator is in charge of managing all ongoing modifications to the attribute along with a base value. Modifiers come from GameplayEffects which are explained more below. As the aggregator changes it calculates a final value for the attribute and pushes this to the actual float uproperty. Therefor, any modification of attributes happens through a GameplayEffect or through the ASC. We never write to the final uproperty attribute value directly in game code (attributes will always be const/read only when accessed by gamecode).</p>"},{"location":"ue4guide/gameplay-programming/gameplay-ability-system/epic-technical-brief/#gameplayeffects","title":"GameplayEffects","text":"<p>At their most basic level, gameplay effects are assets allowing the run time modification of attributes and gameplay tags on the targets they are applied to. Gameplay effects (GEs) can have a duration (acting as buffs or debuffs) or be instant modifications (applying direct damage, etc.). Additionally, GEs with a duration can have a period specified, allowing them to be repeatedly applied over time.</p> <p>GEs allow relatively sophisticated attribute modifications to a target. In addition to the very simple floating point add, multiply, or override, GEs also allow modifications to have their magnitude computed by a data table, by reliance on another attribute (from the source or target), or by a custom logic implementation. GEs make extensive use of gameplay tags to create several possible gameplay interactions via simple data setup. Tags can be specified for numerous things, including: tags to grant to a target, tags that if matched during application, remove all GEs providing those tags, tags to be immune to, tags required to be present (or not present) in order for the GE to apply, as well as to continue to apply over time.</p> <p>GEs can also specify \u201cexecutions\u201d to run when they are applied, which are user-implemented classes that can specify custom logic. Both Fortnite and Paragon use custom executions to contain their damage and healing formulas in a central place, which are then executed by GEs applied to targets that need to be damaged or healed.</p> <p>GEs also support the concept of \u201cstacking,\u201d wherein repeated application of the same GE can stack together in various ways, causing duration or period refreshes, if desired. GEs can stack either by caster (that is that each source/caster has their own stack that is building) or by target (all applications from any source count together).</p> <p>At an implementation level, GEs are blueprintable UObjects, however they are never instantiated nor do they have their event graphs executed. They are used as template assets to drive a run time specification that can be further modified once applied to the target.</p>"},{"location":"ue4guide/gameplay-programming/gameplay-ability-system/epic-technical-brief/#ability","title":"Ability","text":"<p>Abilities define custom gameplay logic that can be activated by players or other game code (AI, traps, etc). They may do things such as: start targeting modes, apply cooldowns, launch projectiles, play animations, apply gameplay effects, call a blueprint function, etc.</p> <p>The ability base class, UGameplayAbility, provides the framework for setting up and starting abilities. This includes defining cooldowns/costs of an ability, basic extendable support for binding to input keys, 'giving' abilities to ASCs, flexible support for instancing and replication.</p> <p>UGameplayAbilities themselves are UObjects. Most abilities will be instantiated as subobjects on the owning actor, but basic support for simple non instantiated abilities is also provided (For example, an ability which just needs to play an animation or call a function can easily be executed without needing to be instantiated). For instanced abilities we support two policies: instantiating an ability each time it is executed, and instantiating an ability one time per ASC/actor. Both allow for the ability to keep track state while they are active.</p> <p>In a networked game, abilities generally execute on the server, owning client, or both. We generally do not execute abilities for players on non owning (simulated proxy) clients, instead the strategy has been that all side effects (animations, particles, sounds, etc) will replicate automatically. We have done our best to avoid having replication logic in our ability logic; our goal is that the person writing an ability does not have to think about raw replication problems such as replicating properties/RPCs, or what should be wrapped in authority checks vs what should be skipped on dedicated servers, etc.</p> <p>For player abilities we support predictive abilities. That is, abilities that can immediately start on the client when a button is pressed, but that also execute on the server and are either confirmed or denied. This allows for client side prediction of some or all of the ability.</p> <p>In addition to the base functionality in UGameplayAbility, we have also attempted to provide a set of classes aimed at simplifying the flow of ability gameplay logic in blueprints. This is done by UAbilityTasks.</p> <p>AbilityTasks are centred around asynchronous operations. Some examples of tasks are: \"Play an animation and wait for it to finish\", \"Wait for my owner to take damage\", \"Begin Targeting preview mode and return when the user confirms\".</p> <p>Asynchronous task nodes help improve the flow and readability of the ability's gameplay logic. Rather than having the ability blueprint itself register callbacks or implement a tick event to poll some state, the tasks encapsulate these operations into high level pieces.</p> <p>AbilityTasks themselves are uobjects that are instantiated upon, and are a subset of GameplayTasks. See AbilityTask.h and GameplayTask.h for more implementation details.</p>"},{"location":"ue4guide/gameplay-programming/gameplay-ability-system/epic-technical-brief/#gameplaycues","title":"GameplayCues","text":"<p>GameplayCues are cosmetic clientside events in the GameplayAbility system. It is an attempt to create a solid separation of the server/simulation logic and the client/presentation in the game.</p> <p>The main things we are trying to solve with this system are:</p> <ol> <li>Replication. GameplayCues will automatically replicate and be network friendly. We wish to avoid having client vs server logic in the abilities themselves.</li> <li>Server optimization. Likewise, since GameplayCues are cosmetic only in nature, they never have to run on a dedicated server. Again, keeping client vs server checks out of the abilities themselves.</li> <li>Loose coupling. Another goal is to improve the work-flow of designers (anyone making abilities) and artists (anyone making FX/audio/etc). By having the two groups interface with a generic event system, we avoid having to directly hook up \"A set of designer blueprints\" to \"A set of artist assets\".</li> </ol> <p>GameplayCues event themselves are simply GameplayTags with a 'GameplayCue' prefix and are accompanied by a generic FGameplayCueParmaeters structure. They can be invoked directly by GameplayEffects, or explicitly by GameplayAbilities. Other game code could also invoke GameplayCue events through the ASC.</p> <p>Handling of the GameplayCue can be done in several ways. The first step is the GameplayCueManager, which is a singleton UObject which can be extended per project. The GameplayCueManager ultimately decides who or what to route the GameplayCue event to. The system supports two main ways of handling events by default: either as explicit functions on the target actor, or by separate standalone GameplayCueNotify objects/actors.</p> <p>Explicit GameplayCue functions are simply that: functions on the targeted actor which are named after the GameplayCue event. For example a blueprint may implement a \"GameplayCue.Damage.Magical\" event to handle magic damage. This method is especially great for actor specific overrides (this character reacts in a unique visual way when he takes lighting damage, etc).</p> <p>GameplayCueNotifies are better for standard handling of GameplayCue events such as generic status effects, damage effects, etc. These notify classes can either be non instantiated UObjects (basically, static functions - spawn a particle effect or additive animation) or instantiated actors (if state needs to be kept/tracked during the liftetime of the effect).</p> <p>Ultimately the GameplayCueManager decides how to direct these events. Some projects may want to route the events to the source actor or maybe a weapon class.</p>"},{"location":"ue4guide/gameplay-programming/gameplay-ability-system/epic-technical-brief/#the-future","title":"The Future","text":"<p>The core pieces of the ability system are working well for our internal projects so far, but there are still plenty of things to consider and lots of work to be done to transition it to a fully user-facing feature.</p> <p>At the moment, the system remains a work-in-progress and has been primarily aimed at system designers as users. It definitely needs a usability pass for casual users, both in the forum of UI customizations and potentially also its own stand-alone sub-editor.</p> <p>The system cannot be currently used in a blueprint-only game, but a lot of the pieces are almost there. There would need to be a pass to convert all of the important parts to be exposed to blueprints.</p> <p>As the system has gone through significant iteration from two game teams simultaneously, it also needs a bit of refactoring and code cleanup as we finally hone in on the \u201cshipping\u201d direction of the system.</p> <p>Most of the intended gameplay features are in and functional at this point, with only minor clean-ups planned from the game teams, with the exception of the eventual addition of more gameplay effect stacking features in the near future.</p>"},{"location":"ue4guide/gameplay-programming/gameplay-ability-system/gas-bbr-questions/","title":"Questions","text":"<ul> <li>What's the networking architecture?</li> <li>How do you do rollback? Rollforth? How do you implement that in abilities?</li> <li>Are only locally predicted cues predicted?</li> <li>Has it been used in melee combat setting?</li> <li>How would you implement input buffering? Cancelling? Waiting for server to ack/nack hold down button &amp; charge?</li> </ul>"},{"location":"ue4guide/gameplay-programming/gameplay-ability-system/gas-bbr-questions/#bbr-specific","title":"BBR Specific","text":"<p>For rollback/rollforth:</p> <ul> <li> <p>C:\\ikrima\\src\\knl\\Bebylon\\UnrealEngine\\Engine\\Source\\Runtime\\MovieScene\\Public\\MovieSceneTimeController.h</p> </li> <li> <p>TSharedPtr TimeController; on level sequence <li> <p>UTimecodeProvider</p> </li> <li> <p>FMovieSceneTimeController</p> </li> <li> <p>PlaybackSettings.TimeController,</p> </li> <li> <p>FMovieSceneTimeController,</p> </li> <li> <p>FMovieSceneTimeController_AudioClock</p> </li> <li> <p>FMovieSceneTimeController_PlatformClock</p> </li> <li> <p>FMovieSceneTimeController_Tick</p> </li> <li> <p>FMovieSceneTimeController_FrameStep</p> </li> <li> <p>UAutomatedLevelSequenceCapture::FMovieSceneTimeController_FrameStep</p> </li> <li> <p>class TIMEMANAGEMENT_API UFixedFrameRateCustomTimeStep : public UEngineCustomTimeStep</p> </li> <p>UMovieScene::EUpdateClockSource ClockSource;   MovieScene-&gt;GetTickResolution();   MovieScene-&gt;GetDisplayRate();   PlayPosition.SetTimeBase(DisplayRate, TickResolution, EvaluationType);</p> Text Only<pre><code>  {\n    // Set up the default frame range from the sequence's play range\n    TRange&lt;FFrameNumber&gt; PlaybackRange   = MovieScene-&gt;GetPlaybackRange();\n\n    const FFrameNumber SrcStartFrame = MovieScene::DiscreteInclusiveLower(PlaybackRange);\n    const FFrameNumber SrcEndFrame   = MovieScene::DiscreteExclusiveUpper(PlaybackRange);\n\n    const FFrameNumber StartingFrame = ConvertFrameTime(SrcStartFrame, TickResolution, DisplayRate).FloorToFrame();\n    const FFrameNumber EndingFrame   = ConvertFrameTime(SrcEndFrame,   TickResolution, DisplayRate).FloorToFrame();\n\n    SetFrameRange(StartingFrame.Value, (EndingFrame - StartingFrame).Value);\n  }\n</code></pre>"},{"location":"ue4guide/gameplay-programming/gameplay-ability-system/gas-networking/","title":"Notes","text":"<p>Detailed breakdown of networking character movement: https://udn.unrealengine.com/questions/319582/questions-about-gameplayability-system.html</p> <p>Targetting: https://udn.unrealengine.com/questions/273352/abilitysystem-targeting-how-to-fetch-custom-target.html</p>"},{"location":"ue4guide/gameplay-programming/gameplay-ability-system/gas-networking/#code-comments-gameplaypredictionh","title":"Code Comments GameplayPrediction.h","text":""},{"location":"ue4guide/gameplay-programming/gameplay-ability-system/gas-networking/#overview-of-gameplay-ability-prediction","title":"Overview of Gameplay Ability Prediction","text":""},{"location":"ue4guide/gameplay-programming/gameplay-ability-system/gas-networking/#high-level-goals","title":"High Level Goals","text":"<p>At the GameplayAbility level (implementing an ability) prediction is transparent. An ability says \"Do X-&gt;Y-&gt;Z\", and we will automatically predict the parts of that that we can. We wish to avoid having logic such as \"If Authority: Do X. Else: Do predictive version of X\" in the ability itself.</p> <p>At this point, not all cases are solved, but we have a very solid framework for working with client side prediction.</p> <p>When we say \"client side prediction\" we really mean client predicting game simulation state. Things can still be 'completely client side' without having to work within a prediction system. For example, footsteps are completely client side and never interact with this system. But clients predicting their mana going from 100 to 90 when they cast a spell is 'client side prediction'.</p> <p>What do we currently predict?</p> <ul> <li> <p>Ability activation</p> </li> <li> <p>Triggered Events</p> </li> <li> <p>GameplayEffect application:</p> </li> <li>Attribute modification (EXCEPTIONS: Executions do not currently predict, only attribute modifiers)</li> <li> <p>GameplayTag modification</p> </li> <li> <p>Gameplay Cue events (both from within predictive gameplay effect and on their own)</p> </li> <li> <p>Montages</p> </li> <li> <p>Movement (built into UE4 UCharacterMovement)</p> </li> </ul> <p>Some things we don't predict (most of these we potentially could, but currently dont):</p> <ul> <li>GameplayEffect removal</li> <li>GameplayEffect periodic effects (dots ticking)</li> </ul> <p>Problems we attempt to solve:</p> <ol> <li>\"Can I do this?\" Basic protocol for prediction.</li> <li>\"Undo\" How to undo side effects when a prediction fails.</li> <li>\"Redo\" How to avoid replaying side effects that we predicted locally but that also get replicated from the server.</li> <li>\"Completeness\" How to be sure we /really/ predicted all side effects.</li> <li>\"Dependencies\" How to manage dependent prediction and chains of predicted events.</li> <li>\"Override\" How to override state predictively that is otherwise replicated/owned by the server.</li> </ol>"},{"location":"ue4guide/gameplay-programming/gameplay-ability-system/gas-networking/#daveratti-networking-explanation","title":"DaveRatti Networking Explanation","text":"<p>Prediction:</p> <ul> <li>initiated by client</li> <li>rpc</li> <li>create side effeccts =&gt; replicate back as properties</li> <li>relies on replicated properties</li> <li>Dependent predictionkey</li> <li>Fortnight/paragon doesnt really use it</li> </ul> <p>Ability:</p> <ul> <li>=&gt; Can I do it?</li> <li>&lt;= server says YUP! you did</li> <li>Predictionkey hasn't come back yet, so you still have to come wait for state</li> </ul> <p>Gameeffect applied</p> <ul> <li>=&gt; stores delegates</li> <li>=&gt;</li> </ul> <p>UAbilitySystemGlobals</p> <ul> <li>How to turn stuff into gampelaycueparameters   virtual void InitGameplayCueParameters(FGameplayCueParameters&amp; CueParameters, const FGameplayEffectSpecForRPC &amp;Spec);   virtual void InitGameplayCueParameters_GESpec(FGameplayCueParameters&amp; CueParameters, const FGameplayEffectSpec &amp;Spec);   virtual void InitGameplayCueParameters(FGameplayCueParameters&amp; CueParameters, const FGameplayEffectContextHandle&amp; EffectContext);</li> </ul> <p>IsReadyForReplicatedMontage OnRep_ReplicatedAnimMontage FGameplayAbilityRepAnimMontage RepAnimMontageInfo</p> <p>Gameplay Ability System</p> <ul> <li>Very lightweight/stellar</li> <li>Higher level tasks is super unpredictable</li> <li>Sometimes flexible but lots of gremlins</li> <li>Replication mechanism:<ul> <li>Able to predict very well but also very lightweight</li> </ul> </li> <li>Works very well for melee combat<ul> <li>At carbine, very twitchy melee combat system</li> <li>Also at nexon</li> <li>For hitscan + melee weapns</li> <li>Thrown weapons</li> </ul> </li> <li>Pretty robust features but with cryptic names<ul> <li>Some nodes are super heavy (surprise!)</li> </ul> </li> <li>Fundemntal issues<ul> <li>GAS is a giant iceberg/little exposed</li> <li>Little docs</li> </ul> </li> <li> <p>Test:</p> <ul> <li>3 hit combo</li> <li> <p>Can be separate ability.</p> <ul> <li>Start|Active|Windown</li> <li>Sword Stab =&gt; Sword Swing =&gt; Smash</li> <li>GAS</li> <li>Bind On Input =&gt; Input == punch =&gt; Start Ability</li> <li>SowrdStab Ability<ul> <li>TryActivate (do validation; runs on both)</li> <li>Commit Ability (ability now running; means begin)</li> <li>Point of no rollback</li> <li>Play Montage and wait</li> <li>OnNotifyRecieved<ul> <li>Start Wait for input for 10 frames</li> <li>If no input =&gt; end ability</li> <li>If there was input =&gt;</li> <li>PlayMontage And Wait: Sword Swing</li> </ul> </li> <li>Wait Target Node: hjit detection</li> <li>if hits, do hit stuff/effect/cue</li> </ul> </li> <li>When this ability ends, schedule hit combo2</li> <li>Can schedule cooldown</li> </ul> </li> <li> <p>Charged attack</p> </li> <li>Input cancel</li> <li>Dash/Movement</li> <li>Misprediction?</li> </ul> </li> </ul> <p>Questions:</p> <ul> <li>What were issues</li> <li>Character movement</li> <li>Network</li> <li>Debug tooling?</li> </ul> <p>GameAbility Prototype:</p> <ul> <li>3 hit combo ()</li> <li>Charged Attack</li> <li>Dash (moving)</li> <li>Charged (moving)</li> </ul> <p>NetLag ~200-300ms</p>"},{"location":"ue4guide/gameplay-programming/gameplay-ability-system/gas-networking/#implementation-details","title":"Implementation Details","text":""},{"location":"ue4guide/gameplay-programming/gameplay-ability-system/gas-networking/#predictionkey","title":"PredictionKey","text":"<p>A fundamental concept in this system is the Prediction Key (FPredictionKey). A prediction key on its own is simply a unique ID that is generated in a central place on the client. The client will send his prediction key to the server, and associate predictive actions and side effects with this key. The server may respond with an accept/reject for the prediction key, and will also associate the server-side created side effects with this prediction key.</p> <p>(IMPORTANT) FPredictionKey always replicate client -&gt; server, but when replicating server -&gt; clients they *only replicate to the client that sent the prediction key to the server in the first place. This happens in FPredictionKey::NetSerialize. All other clients will receive an invalid (0) prediction key when a prediction key sent from a client is replicated back down through a replicated property.</p>"},{"location":"ue4guide/gameplay-programming/gameplay-ability-system/gas-networking/#ability-activation","title":"Ability Activation","text":"<p>Ability Activation is a first class predictive action. Whenever a client predictively activates an ability, he explicitly asks the server and the server explicitly responds. Once an ability has been predictively activated, the client has a valid 'prediction window' where predictive side effects can happen which are not explicitly 'asked about'. (E.g., we do not explicitly ask 'Can I decrement mana, Can I put this ability on cooldown. Those actions are considered logically atomic with activating an ability).</p> <p>AbilitySystemComponent provides a set of functions for communicating ability activation between clients and server: TryActivateAbility -&gt; ServerTryActivateAbility -&gt;  ClientActivateAbility(Failed/Succeed).</p> <ol> <li> <p>Client calls TryActivateAbility which generates a new FPredictionKey and calls ServerTryActivateAbility.</p> </li> <li> <p>Client continues (before hearing back from server) and calls ActivateAbility with the generated PredictionKey associated with the Ability's ActivationInfo.</p> </li> <li> <p>Any side effects that happen /before the call to ActivatAbility finish/ have the generated FPredictionKey associated with them.</p> </li> <li> <p>Server decides if the ability really happened in ServerTryActivateAbility, calls ClientActivateAbility(Failed/Succeed) and sets UAbilitySystemComponent::ReplicatedPredictionKey to the generated key that was sent.</p> </li> <li> <p>If client receives ClientAbilityFailed, he immediately kills the ability and rolls back side effects that were associated with the prediction key.</p> </li> </ol> <ul> <li> <p>'Rolling back' is accomplished via FPredictionKeyDelegates and FPredictionKey::NewRejectedDelegate/NewCaughtUpDelegate/NewRejectOrCaughtUpDelegate.</p> </li> <li> <p>Registering the callback in TryActivateAbility:      // If this PredictionKey is rejected, we will call OnClientActivateAbilityFailed.      ThisPredictionKey.NewRejectedDelegate().BindUObject(this, &amp;UAbilitySystemComponent::OnClientActivateAbilityFailed, Handle, ThisPredictionKey.Current);</p> </li> <li> <p>Invoking the callback in ClientActivateAbilityFailed_Implementation:       FPredictionKeyDelegates::BroadcastRejectedDelegate(PredictionKey);</p> </li> </ul> <ol> <li>If accepted, client must wait until property replication catches up (the Succeed RPC will be sent immediately, property replication will happen on its own). Once the ReplicatedPredictionKey catches up to the    key used previous steps, the client can undo his predictive side effects. See UAbilitySystemComponent::OnRep_PredictionKey.</li> </ol>"},{"location":"ue4guide/gameplay-programming/gameplay-ability-system/gas-networking/#gameplayeffect-prediction","title":"GameplayEffect Prediction","text":"<p>GameplayEffects are considered side effects of prediction and are not explicitly asked about.</p> <ol> <li>GameplayEffects are only applied on clients if there is a valid prediction key. (If no prediction key, it simply skips the application on client).</li> <li>Attributes, GameplayCues, and GameplayTags are all predicted if the GameplayEffect is predicted.</li> <li>When the FActiveGameplayEffect is created, it stores the prediction key (FActiveGameplayEffect::PredictionKey)    - Instant effects are explained below in \"Attribute Prediction\".</li> <li>On the server, the same prediction key is also set on the server's FActiveGameplayEffect that will be replicated down.</li> <li>As a client, if you get a replicated FActiveGameplayEffect with a valid prediction key on it, you check to see if you have an ActiveGameplayEffect with that same key, if there is match, we do not apply the 'on applied' type of logic, e.g., GameplayCues. The solves the \"Redo\" problem. However we will have 2 of the 'same' GameplayEffects in our ActiveGameplayEffects container, temporarily:</li> <li>At the same time, UAbilitySystemComponent::ReplicatedPredictionKey will catch up and the predictive effects will be removed. When they are removed in this case, we again check PredicitonKey and decide    if we should not do the 'On Remove' logic / GameplayCue.</li> </ol> <p>At this point, we have effectively predicted a gameplay effect as a side effect and handled the 'Undo' and 'Redo' problems.</p>"},{"location":"ue4guide/gameplay-programming/gameplay-ability-system/gas-networking/#attribute-prediction","title":"Attribute Prediction","text":"<p>Since attributes are replicated as standard uproperties, predicting modification to them can be tricky (\"Override\" problem). Instantaneous modification can be even harder since these are non stateful by nature. (E.g., rolling back an attribute mod is difficult if there is no book keeping past the modification). This makes the \"Undo\" and \"Redo\" problem also hard in this case.</p> <p>The basic plan of attack is to treat attribute prediction as delta prediction rather than absolute value prediction. We do not predict that we have 90 mana, we predict that we have -10 mana from the server value, until the server confirms our prediction key. Basically, treat instant modifications as /infinite duration modifications/ to attributes while they are done predictively. The solves \"Undo\" and \"Redo\".</p> <p>For the \"override\" problem, we can handle this in the properties OnRep by treating the replicated (server) value as the 'base value' instead of 'final value' of the attribute, and to reaggregate our 'final value' after a replication happens.</p> <ol> <li>We treat predictive instant gameplay effects as infinite duration gamepaly effects. See UAbilitySystemComponent::ApplyGameplayEffectSpecToSelf.</li> <li>We have to always receive RepNotify calls on our attributes (not just when there is a change from last local value, since we will predict the change ahead of time). Done with REPNOTIFY_Always.</li> <li>In the attribute RepNotify, we call into the AbilitySystemComponent::ActiveGameplayEffects to update our 'final value' give the new 'base value'. the GAMEPLAYATTRIBUTE_REPNOTIFY can do this.</li> <li>Everything else will work like above (GameplayEffect prediction) : when the prediction key is caught up, the predictive GameplayEffect is removed and we will return to the server given value.</li> </ol> <p>Example:</p> C++<pre><code>void UMyHealthSet::GetLifetimeReplicatedProps(TArray&lt; FLifetimeProperty &gt; &amp; OutLifetimeProps) const\n{\n  Super::GetLifetimeReplicatedProps(OutLifetimeProps);\n\n  DOREPLIFETIME_CONDITION_NOTIFY(UMyHealthSet, Health, COND_None, REPNOTIFY_Always);\n}\n\nvoid UMyHealthSet::OnRep_Health()\n{\n  GAMEPLAYATTRIBUTE_REPNOTIFY(UMyHealthSet, Health);\n}\n</code></pre>"},{"location":"ue4guide/gameplay-programming/gameplay-ability-system/gas-networking/#gameplay-cue-events","title":"Gameplay Cue Events","text":"<p>Outside of GameplayEffects which are already explained, Gameplay Cues can be activated on their own. These functions (UAbilitySystemComponent::ExecuteGameplayCue etc)  take network role and prediction keys into account.</p> <ol> <li>In UAbilitySystemComponent::ExecuteGameplayCue, if authority then do the multicast event (with replication key). If non authority but w/ a valid prediction key, predict the GameplayCue.</li> <li>On the receiving end (NetMulticast_InvokeGameplayCueExecuted etc), if there is a replication key, then don't do the event (assume you predicted it).</li> </ol> <p>Remember that FPredictionKeys only replicate to the originating owner. This is an intrinsic property of FReplicationKey.</p>"},{"location":"ue4guide/gameplay-programming/gameplay-ability-system/gas-networking/#triggered-data-prediction","title":"Triggered Data Prediction","text":"<p>Triggered Data is currently used to activate abilities. Essentially this all goes through the same code path as ActivateAbility. Rather than the ability being activated from input press, it is activated from another game code driven event. Clients are able to predictively execute these events which predictively activate abilities.</p> <p>There are some nuances to however, since the server will also run the code that triggers events. The server won't just wait to hear from the client. The server will keep a list of triggered abilities that have been activated from a predictive ability. When receiving a TryActivate from a triggered ability, the server will look to see if /he/ has already run this ability, and respond with that information.</p> <p>There is work left to do on Triggered Events and replication. (explained at the end).</p>"},{"location":"ue4guide/gameplay-programming/gameplay-ability-system/gas-networking/#advanced-topic","title":"Advanced topic","text":""},{"location":"ue4guide/gameplay-programming/gameplay-ability-system/gas-networking/#dependencies","title":"Dependencies","text":"<p>We can have situations such as \"Ability X activates and immediately triggers an event which activates Ability Y which triggers another Ability Z\". The dependency chain is X-&gt;Y-&gt;Z. Each of those abilities could be rejected by the server. If Y is rejected, then Z also never happened, but the server never tries to run Z, so the server doesn't explicitly decide 'no Z can't run'.</p> <p>To handle this, we have a concept of a Base PredictionKey, which is a member of FPredictionKey. When calling TryActivateAbility, we pass in the current PredictionKey (if applicable). That prediction key is used as the base for any new prediction keys generated. We build a chain of keys this way, and can then invalidate Z if Y is rejected.</p> <p>This is slightly more nuanced though. In the X-&gt;Y-&gt;Z case, the server will only recieve the PredictionKey for X before trying to run the chain himself E.g., he will TryActivate Y and Z with the original prediction key sent to him from the client. Where as the client will generate a new PredictionKey each time he calls TryActivateAbility. The client *has to generate a new PRedictionKey for each ability activate, since each activate is not logically atomic. Each side effect produced in the chain of events has to have a unique PredictionKey. We cannot have GameplayEffects produced in X have the same PredictionKey produced in Z.</p> <p>To get around this, The prediction key of X is considered the Base key for Y and Z. The dependancy from Y to Z is kept completely client side, which is done in by FPredictionKeyDelegates::AddDependancy. We add delegates to reject/catchup Z if Y rejected/confirmed.</p> <p>This dependency system allows us to have multiple predictive actions that are not logically atomic within a single prediction window/scope.</p>"},{"location":"ue4guide/gameplay-programming/gameplay-ability-system/gas-networking/#additional-prediction-windows-within-an-ability","title":"Additional Prediction Windows (within an Ability)","text":"<p>As stated, A prediction key is only usable during a single logical scope. Once ActivateAbility returns, we are essentially done with that key. If the ability is waiting on an external event or timer, by the time it returns, we will have gotten a confirm/reject from the server. Any side effects produced after this will no longer be tied to the lifespan of the original key.</p> <p>This isn't that bad, except that abilities will sometimes want to react to player input. For example, 'a hold down and charge' ability wants to instantly predict some stuff when the button is released. It is possible to create a new prediction window within an ability with FScopedPredictionWindow.</p> <p>FScopedPredictionWindows provides a way to send the server a new prediction key and have the server pick up and use that key within the same logical scope.</p> <p>UAbilityTask_WaitInputRelease::OnReleaseCallback is a good example. The flow of events is as followed:</p> <ol> <li>Client enters UAbilityTask_WaitInputRelease::OnReleaseCallback and starts a new FScopedPredictionWindow. This creates a new prediction key for this scope (FScopedPredictionWindow::ScopedPredictionKey).</li> <li>Client calls AbilitySystemComponent-&gt;ServerInputRelease which passes ScopedPrediction.ScopedPredictionKey as a parameter.</li> <li>Server runs ServerInputRelease_Implementation which takes the passed in PredictionKey and sets it as UAbilitySystemComponent::ScopedPredictionKey with an FScopedPredictionWindow.</li> <li>Server runs UAbilityTask_WaitInputRelease::OnReleaseCallback /within the same scope/</li> <li>When the server hits the FScopedPredictionWindow in ::OnReleaseCallback, it gets the prediction key from UAbilitySystemComponent::ScopedPredictionKey. That is now used for all side effects within this logical scope.</li> <li>Once the server ends this scoped prediction window, the prediction key used is finished and set to ReplicatedPredictionKey.</li> <li>All side effects created in this scope now share a key between client and server.</li> </ol> <p>The key to this working is that ::OnReleaseCallback calls ::ServerInputRelease which calls ::OnReleaseCallback on the server. There is no room for anything else to happen and use the given prediction key.</p> <p>While there is no \"Try/Failed/Succeed\" calls in this example, all side effects are procedurally grouped/atomic. This solves the \"Undo\" and \"Redo\" problems for any arbitrary function calls that run on the server and client.</p>"},{"location":"ue4guide/gameplay-programming/gameplay-ability-system/gas-networking/#unsupported--issues-todo","title":"Unsupported / Issues/ Todo","text":"<p>Triggered events do not explicitly replicate. E.g., if a triggered event only runs on the server, the client will never hear about it. This also prevents us from doing cross player/AI etc events. Support for this should eventually be added and it should follow the same pattern that GameplayEffect and GameplayCues follow (predict triggered event with a prediction key, ignore the RPC event if it has a prediction key).</p>"},{"location":"ue4guide/gameplay-programming/gameplay-ability-system/gas-networking/#predicting-meta-attributes-such-as-damagehealing-vs-real-attributes-such-as-health","title":"Predicting \"Meta\" Attributes such as Damage/Healing vs \"real\" attributes such as Health","text":"<p>We are unable to apply meta attributes predictively. Meta attributes only work on instant effects, in the back end of GameplayEffect (Pre/Post Modify Attribute on the UAttributeSet). These events are not called when applying duration-based gameplay effects. E.g., a GameplayEffect that modifies damage for 5 seconds doesn't make sense.</p> <p>In order to support this, we would probably add some limited support for duration based meta attributes, and move the transform of the instant gameplay effect from the front end (UAbilitySystemComponent::ApplyGameplayEffectSpecToSelf) to the backend (UAttributeSet::PostModifyAttribute).</p>"},{"location":"ue4guide/gameplay-programming/gameplay-ability-system/gas-networking/#predicting-ongoing-multiplicitive-gameplayeffects","title":"Predicting ongoing multiplicitive GameplayEffects","text":"<p>There are also limitations when predicting % based gameplay effects. Since the server replicates down the 'final value' of an attribute, but not the entire aggregator chain of what is modifying it, we may run into cases where the client cannot accurately predict new gameplay effects.</p> <p>For example:</p> <ul> <li>Client has a perm +10% movement speed buff with base movement speed of 500 -&gt; 550 is the final movement speed for this client.</li> <li>Client has an ability which grants an additional 10% movement speed buff. It is expected to *sum the % based multipliers for a final 20% bonus to 500 -&gt; 600 movement speed.</li> <li>However on the client, we just apply a 10% buff to 550 -&gt; 605.</li> </ul> <p>This will need to be fixed by replicating down the aggregator chain for attributes. We already replicate some of this data, but not the full modifier list. We will need to look into supporting this eventually.</p>"},{"location":"ue4guide/gameplay-programming/gameplay-ability-system/gas-networking/#weak-prediction","title":"\"Weak Prediction\"","text":"<p>We will probably still have cases that do not fit well into this system. Some situations will exist where a prediction key exchange is not feasible. For example, an ability where any one that player collides with/touches receives a GameplayEffect that slows them and their material blue. Since we can't send Server RPCs every time this happens (and the server couldn't necessarily handle the message at his point in the simulation), there is no way to correlate the gameplay effect side effects between client and server.</p> <p>One approach here may be to think about a weaker form of prediction. One where there is not a fresh prediction key used and instead the server assumes the client will predict all side effects from an entire ability. This would at least solve the \"redo\" problem but would not solve the \"completeness\" problem. If the client side prediction could be made as minimal as possible - for example only predicting an initial particle effect rather than predicting the state and attribute change - then the problems get less severe.</p> <p>I can envision a weak prediction mode which is what (certain abilities? All abilities?) fall back to when there is no fresh prediction key that can accurately correlate side effects. When in weak prediction mode, perhaps only certain actions can be predicted - for example GameplayCue execute events, but not OnAdded/OnRemove events.</p> <p>FPredictionKey is a generic way of supporting Clientside Prediction in the GameplayAbility system. A FPredictionKey is essentially an ID for identifying predictive actions and side effects that are done on a client. UAbilitySystemComponent supports synchronization of the prediction key and its side effects between client and server.</p> <p>Essentially, anything can be associated with a PredictionKey, for example activating an Ability. The client can generates a fresh PredictionKey and sends it to the server in his ServerTryActivateAbility call. The server can confirm or reject this call (ClientActivateAbilitySucceed/Failed).</p> <p>While the client is predictively his ability, he is creating side effects (GameplayEffects, TriggeredEvents, Animations, etc). As the client predicts these side effects, he associates each one with the prediction key generated at the start of the ability activation.</p> <p>If the ability activation is rejected, the client can immediately revert these side effects. If the ability activation is accepted, the client must wait until the replicated side effects are sent to the server.   (the ClientActivatbleAbilitySucceed RPC will be immediately sent. Property replication may happen a few frames later).   Once replication of the server created side effects is finished, the client can undo his locally predictive side effects.</p> <p>The main things FPredictionKey itself provides are:</p> <ul> <li>Unique ID and a system for having dependant chains of Prediction Keys (\"Current\" and \"Base\" integers)</li> <li>A special implementation of ::NetSerialize *** which only serializes the prediction key to the predicting client ***</li> <li>This is important as it allows us to serialize prediction keys in replicated state, knowing that only clients that gave the server the prediction key will actually see them!</li> </ul>"},{"location":"ue4guide/gameplay-programming/gameplay-ability-system/overview/","title":"Overview","text":""},{"location":"ue4guide/gameplay-programming/gameplay-ability-system/overview/#overview","title":"Overview","text":"<p>Excellent in-depth overview with an example project: https://github.com/tranek/GASDocumentation</p>"},{"location":"ue4guide/gameplay-programming/gameplay-ability-system/overview/#fgameplayattributedata-uattributeset","title":"FGameplayAttributeData /UAttributeSet:","text":"<ul> <li>Define what can be changed</li> </ul> Function Name Purpose PreAttributeChange PreAttributeBaseChange These functions are called just before modifications to an Attribute. They are intended to enforce rules on the Attribute's value, such as \"Health must be between 0 and MaxHealth\", and should not trigger in-game reactions to Attribute changes. PreGameplayEffectExecute Just before modifying an Attribute's value, this function can reject or alter the proposed modification. PostGameplayEffectExecute Immediately after modifying an Attribute's value, this function can react to the change. This often includes clamping the final value of the Attribute, or triggering an in-game reaction to the new value, like dying when the \"health\" Attribute falls to zero. <p>Reference From https://docs.unrealengine.com/en-us/Gameplay/GameplayAbilitySystem/GameplayAttributesAndGameplayEffects</p>"},{"location":"ue4guide/gameplay-programming/gameplay-ability-system/overview/#ugameplayeffect","title":"UGameplayEffect:","text":"<ul> <li> <p>Describe way to change attributes</p> </li> <li> <p>Direct change: +5 to health</p> </li> <li> <p>Temporary Buffs: +10 to movement</p> </li> <li> <p>Over Time: +5 mana over 1 second</p> </li> <li> <p>Data only</p> </li> <li> <p>Properties:</p> </li> <li> <p>Duration:</p> </li> <li> <p>Modifiers/Execution: How effect interacts with attributes (increase armor by +5% but needs these tags)</p> <ul> <li>UGameplayEffectExecutionCalculation: Executions are for applying more advanced math to the buffs/debuffs beyond modifiers</li> </ul> </li> <li> <p>Application Requirements: Set of tags required for Effect</p> <ul> <li>UGameplayEffectCustomApplicationRequirement: For more complex rules\\</li> </ul> </li> <li> <p>Granted Abilities: Effecsts can grant abilities, not just tags. Useful to be used with executions: Ex: Actor gets bomb Gameplay Effect and actor has tag: CoveredInOil =&gt; grant OnFireAoT</p> </li> <li> <p>Stacking</p> </li> <li> <p>Gameplay Cue Display: Manage cosmetic effects</p> <ul> <li> <p>OnActive, While Active, Removed, Executed</p> </li> <li> <p>Gameplay Cue Manager executes Gameplay Cues.</p> </li> <li> <p>IGameplayCueInterface: Actors can respond to Gameplay Cues by implementing this and having a function whose name matches the Gameplay Cue's tag.</p> </li> <li> <p>Standalone Gameplay Cue Notify Blueprints: can also respond to Gameplay Cues.</p> </li> </ul> </li> </ul>"},{"location":"ue4guide/gameplay-programming/gameplay-ability-system/overview/#gameplay-ability","title":"Gameplay Ability","text":"<p>https://docs.unrealengine.com/en-us/Gameplay/GameplayAbilitySystem/GameplayAbility</p> <ul> <li> <p>Defines what an in-game ability does, what (if anything) it costs to use, when or under what conditions it can be used, and so on.</p> </li> <li> <p>Because Gameplay Abilities are capable of existing as instanced objects running asynchronously, you can run specialized, multi-stage tasks involving character animation, particle and sound effects, and even branching based on player input or character interactions that occur during execution.</p> </li> <li> <p>Gameplay Abilities can replicate themselves across the network, run on client or server machines (including client-side prediction support), and even sync variables and make Remote Procedure Calls (RPCs).</p> </li> <li> <p>FGameplayEventData:</p> </li> <li> <p>Gameplay tags with optional payload data</p> </li> <li> <p>Can be used to communicate between different parts of the ability system. ARPG uses them to pass information between montages and abilities.</p> </li> <li> <p>Can be passed around to trigger Gameplay Abilities directly, sending a data payload for context, without going through the normal channels.</p> </li> </ul>"},{"location":"ue4guide/gameplay-programming/gameplay-ability-system/overview/#gameplaycue","title":"GameplayCue:","text":"<ul> <li>Gameplay Cues are basically events. They are events with a Target, Tag, Type (OnActive/WhileActive/OnExecute/OnRemoved), and parameters (instigator, hit location, etc). Those events can come from Gameplay Effects, Abilities directly, or anywhere really. On Paragon our projectile code emits gameplay cues on their own for example.</li> </ul> <p>Reference From https://udn.unrealengine.com/questions/319582/questions-about-gameplayability-system.html</p>"},{"location":"ue4guide/gameplay-programming/gameplay-ability-system/overview/#reference-links","title":"Reference Links","text":"<p>These might be outdated</p> Description Link UDN Answer Overview https://udn.unrealengine.com/questions/319582/questions-about-gameplayability-system.html Overview #2 https://udn.unrealengine.com/questions/315010/view.html Community Wiki https://wiki.unrealengine.com/GameplayAbilities_and_You Target Data https://udn.unrealengine.com/questions/273352/abilitysystem-targeting-how-to-fetch-custom-target.html Sample Repo https://github.com/daveratti/GameplayAbilitiesSample/tree/release/GAS"},{"location":"ue4guide/gameplay-programming/gameplay-framework/gamemode-game-flow-diagram/","title":"Gamemode game flow diagram","text":""},{"location":"ue4guide/gameplay-programming/gameplay-framework/gamemode/","title":"Gamemode","text":"<p>GameMode contains a state machine that tracks the state of the Match</p> <ul> <li> <p>You can override the match state for custom game modes. Look at Unreal Tournament</p> </li> <li> <p>Managed in GameMode but then set in the GameState class</p> </li> </ul> <ol> <li>EnteringMap = initial state. Actors not yet ticking &amp; world not initialized. Transition on =&gt;</li> </ol> <p>a) things are fully loaded</p> <ol> <li> <p>WaitingToStart: HandleMatchIsWaitingToStart() called when entering this state. Actors are ticking, players have not yet spawned. Transitions on =&gt;</p> </li> <li> <p>ReadyToStartMatch() returns true</p> </li> <li> <p>Someone calls StartMatch()</p> </li> <li> <p>InProgress: HandleMatchHasStarted called on enter. Calls BeginPlay() on all Actors just incase it wasn\u2019t called in HandleMatchIsWaitingToStart(). Normal gameplay. Transitions on =&gt;</p> </li> <li> <p>ReadyToEndMatch() == true</p> </li> <li> <p>Someone calls EndMatch()</p> </li> <li> <p>WaitingPostMatch: HandleMatchHasEnded() on enter. Actors still ticking but new players not accepted. Transitions on =&gt;</p> </li> <li> <p>Map transfer starts</p> </li> <li> <p>LeavingMap: HandleLeavingMap() on enter. Match stays in this state while transferring to a new map</p> </li> <li> <p>Aborted: failure state. Started from AbortMatch()</p> </li> </ol> <p>Events that are fired:</p> <ul> <li> <p>OnPostLogin: Called every time a player joins the Game</p> </li> <li> <p>Passes valid PlayerController owned by connecting Player's connection</p> </li> <li> <p>Can be used to Spawn new player pawn</p> </li> </ul> <p>OptionsString: contains options, delimetted by ?, that can be passed via OpenLevel() or ServerTravel()</p> <ul> <li>UGameplayStatics::ParseOption( can extract passed Options</li> </ul> <p>GameState maintains list of connected Players (PlayerState)</p> <ul> <li> <p>PlayerArray</p> </li> <li> <p>MatchState</p> </li> <li> <p>ElapsedTime</p> </li> <li> <p>AuthorityGameMode (only server has this)</p> </li> </ul> <p>PlayerState: holds current information about the current Player</p> <ul> <li> <p>Replicated to everyone so other clients can know details about the Player</p> </li> <li> <p>GameState-&gt;PlayerArray[] easy way to access all PlayerStates</p> </li> <li> <p>Example of things to store: PlayerName, Score, Ping, GuildID</p> </li> <li> <p>Also used to make data persistent between Level Changes or reconnecting dropped Players</p> </li> <li> <p>Does this by copying current PlayerState into the new PlayerState</p> </li> <li> <p>Override CopyProperties() &amp; OverrideWith()</p> </li> </ul> <p>Pawns</p> <ul> <li> <p>Possession only happens on the server</p> </li> <li> <p>Event Possessed() &amp; Unpossessed()</p> </li> </ul> <p>AActor::IsNetRelevantFor() - Determines relevancy for a playercontroller/actor</p> <ol> <li>If the Actor is 'bAlwaysRelevant', is owned by the Pawn or PlayerController, is the Pawn, or the Pawn is the Instigator of some action like noise or damage, it is relevant</li> <li>If the Actor is 'bNetUserOwnerRelevancy' and has an Owner, use the Owner's relevancy</li> <li>If the Actor is 'bOnlyRelevantToOwner', and does not pass the first check, it is not relevant</li> <li>If the Actor is attached to the Skeleton of another Actor, then its relevancy is determined by the relevancy of its base</li> <li>if the Actor is hidden ('bHidden == true') and the root component does not collide then the Actor is not relevant</li> <li>If there is no root component, 'AActor::IsNetRelevantFor()' will log a warning and ask if</li> </ol> <p>the Actor should be set to 'bAlwaysRelevant = true'</p> <ol> <li>If 'AGameNetworkManager' is set to use distance based relevancy, the Actor is relevant if it is closer than the net cull distance</li> </ol> <p>AActor::GetNetPriority()- determines how much relative bandwidth actor receives compared to others. NetPriority=2.0 =&gt; 2x more bandwidth</p> <ul> <li> <p>Actor-&gt;NetPriority is the base net priority</p> </li> <li> <p>GetNetPriority() multiplies NetPriority property based on time since last replication and relative location/distance between Actor &amp; Viewer to avoid starvation</p> </li> <li> <p>You can override GetNetPriority()</p> </li> </ul> <p>AActor-&gt;NetUpdateFrequency determines replication update frequency</p> <ul> <li> <p>ROLE_SimulatedProxy: Client will extrapolate actor position based on last known velocity</p> </li> <li> <p>ROLE_AutonomousProxy: More complicated extrapolation (storing moves, etc)</p> </li> </ul> <p>GameSession: Server side only interface that manages online game session (e.g. dedicated or lan, number of players, private or advertised,)</p> <ul> <li> <p>Only one GameSession active at a time but there could be multiple types (dedicated vs listen, coop or FFA, ranked vs unranked)</p> </li> <li> <p>Life Time</p> </li> <li> <p>Create new session</p> </li> <li> <p>Wait for Players to request to join Match</p> </li> <li> <p>Register Players who want to join</p> </li> <li> <p>Start the session</p> </li> <li> <p>Play the Match</p> </li> <li> <p>End the session</p> </li> <li> <p>Un-register the Players</p> </li> <li> <p>Either</p> <ul> <li> <p>Update the session if you want to change type of Match and go back to Wait for Players to join</p> </li> <li> <p>Destroy the Session</p> </li> </ul> </li> </ul>"},{"location":"ue4guide/gameplay-programming/gameplay-framework/gameplay-framework/","title":"Gameplay framework","text":"Game Instance: All the entry point functions for on joining/finding/creating sessions/network failures (the functions here wrap the gamesession calls with logic on how it relates to the rest of the app like showing UI, etc). Also handles app suspention/app resume/app start GameMode: Set the game match's state machine + rule enforcement. GameState: Random shizzit about gamestate that needs to be replicated to other clients like team scores PlayerState: Random shizzit about players that need to be replicated like current kills, suicides, teamnumber, team color GameSession: Actual functions that manage game sessions (join, search, host) with online subsystem GameUserSettings: Settings for the app (sound, graphics, resolution, etc) LocalPlayer: Custom player input binds (this is where debug binds go, player custom remappings, etc) PlayerInput: Custom player input binds (this is where debug binds go, player custom remappings, etc) OnlineGameSettings: Define properties about sessions that can be searched (like isLan, maxnumplayers, advertise, etc)"},{"location":"ue4guide/gameplay-programming/master-engine-flow/actor-spawning-flow/","title":"Actor spawning flow","text":"<p>// General flow here is like so</p> <p>\u200b   // - Actor sets up the basics.</p> <p>\u200b   // - Actor gets PreInitializeComponents()</p> <p>\u200b   // - Actor constructs itself, after which its components should be fully assembled</p> <p>\u200b   // - PostActorCreated</p> <p>\u200b   // - Actor components get OnComponentCreated</p> <p>\u200b   // - Actor components get InitializeComponent</p> <p>\u200b   // - Actor gets PostInitializeComponents() once everything is set up</p>"},{"location":"ue4guide/gameplay-programming/master-engine-flow/core-eventsdelegates/","title":"Editor Delegates","text":"<p>Located in <code>FEditorDelegates</code></p> C++<pre><code>/** Sent when a PIE session is beginning (before we decide if PIE can run - allows clients to avoid blocking PIE) */\n  static FOnPIEEvent PreBeginPIE;\n  /** Sent when a PIE session is beginning (but hasn't actually started yet) */\n  static FOnPIEEvent BeginPIE;\n  /** Sent when a PIE session has fully started and after BeginPlay() has been called */\n  static FOnPIEEvent PostPIEStarted;\n  /** Sent when a PIE session is ending, before anything else happens */\n  static FOnPIEEvent PrePIEEnded;\n  /** Sent when a PIE session is ending */\n  static FOnPIEEvent EndPIE;\n\n\n/** Called before SaveWorld is processed */\nstatic FOnPreSaveWorld PreSaveWorld;\n/** Called after SaveWorld is processed */\nstatic FOnPostSaveWorld PostSaveWorld;\n\n\nstruct ENGINE_API FEditorSupportDelegates\n{\n  /** delegate type for when the editor is about to cleanse an object that *must* be purged ( Params: UObject* Object ) */\n  DECLARE_MULTICAST_DELEGATE_OneParam(FPrepareToCleanseEditorObject, UObject*);\n  /** delegate type for force property window rebuild events ( Params: UObject* Object ) */\n  DECLARE_MULTICAST_DELEGATE_OneParam(FOnForcePropertyWindowRebuild, UObject*);\n  /** delegate type for material texture setting change events ( Params: UMaterialIterface* Material ) */\n  DECLARE_MULTICAST_DELEGATE_OneParam(FOnMaterialTextureSettingsChanged, class UMaterialInterface*);\n  /** delegate type for windows messageing events ( Params: FViewport* Viewport, uint32 Message )*/\n  DECLARE_MULTICAST_DELEGATE_TwoParams(FOnWindowsMessage, class FViewport*, uint32);\n  /** delegate type for material usage flags change events ( Params: UMaterial* material, int32 FlagThatChanged ) */\n  DECLARE_MULTICAST_DELEGATE_TwoParams(FOnMaterialUsageFlagsChanged, class UMaterial*, int32);\n  /** delegate type for vector parameter default change event */\n  DECLARE_MULTICAST_DELEGATE_ThreeParams(FOnVectorParameterDefaultChanged, class UMaterialExpression*, FName, const FLinearColor&amp;);\n  /** delegate type for scalar parameter default change event */\n  DECLARE_MULTICAST_DELEGATE_ThreeParams(FOnScalarParameterDefaultChanged, class UMaterialExpression*, FName, float);\n\n  /** Called when all viewports need to be redrawn */\n  static FSimpleMulticastDelegate RedrawAllViewports;\n  /** Called when the editor is about to cleanse an object that *must* be purged (such as when changing the active map or level) */\n  static FPrepareToCleanseEditorObject PrepareToCleanseEditorObject;\n  /** Called when the editor is cleansing of transient references before a map change event */\n  static FSimpleMulticastDelegate CleanseEditor;\n  /** Called when the world is modified */\n  static FSimpleMulticastDelegate WorldChange;\n  /** Sent to force a property window rebuild */\n  static FOnForcePropertyWindowRebuild ForcePropertyWindowRebuild;\n  /** Sent when events happen that affect how the editors UI looks (mode changes, grid size changes, etc) */\n  static FSimpleMulticastDelegate UpdateUI;\n  /** Called for a material after the user has change a texture's compression settings.\n    Needed to notify the material editors that the need to reattach their preview objects */\n  static FOnMaterialTextureSettingsChanged MaterialTextureSettingsChanged;\n  /** Refresh property windows w/o creating/destroying controls */\n  static FSimpleMulticastDelegate RefreshPropertyWindows;\n  /** Sent before the given windows message is handled in the given viewport */\n  static FOnWindowsMessage PreWindowsMessage;\n  /** Sent after the given windows message is handled in the given viewport */\n  static FOnWindowsMessage PostWindowsMessage;\n  /** Sent after the usages flags on a material have changed*/\n  static FOnMaterialUsageFlagsChanged MaterialUsageFlagsChanged;\n  /** Sent after vector param default changed */\n  static FOnVectorParameterDefaultChanged VectorParameterDefaultChanged;\n  /** Sent after scalar param default changed */\n  static FOnScalarParameterDefaultChanged ScalarParameterDefaultChanged;\n\n};\n</code></pre> C++<pre><code>ULevel::LevelDirtiedEvent.Broadcast();\n\nFEditorSupportDelegates::RefreshPropertyWindows.Broadcast();\n\nFEditorDelegates::RefreshEditor.Broadcast();\n\nRedrawLevelEditingViewports( true );\n\n// Called when a map is opened, giving map name, and whether it was a template\nFEditorDelegates::OnMapOpened\n\nGEngine-&gt;RedrawLevelEditingViewports();\n\nFEditorSupportDelegates::UpdateUI.Broadcast();\n\nGWorld-&gt;BroadcastLevelsChanged();\n\nULevel::LevelDirtiedEvent.Broadcast();\n\nGEngine-&gt;BroadcastLevelActorListChanged();\n\nGEngine-&gt;BroadcastLevelActorDeleted();\n\nGLevelEditorModeTools().DeactivateAllModes();\n\nFAssetRegistryModule::AssetCreated(NewLevelWorld);\n</code></pre>"},{"location":"ue4guide/gameplay-programming/master-engine-flow/core-eventsdelegates/#fcoredelegates","title":"FCoreDelegates","text":"<p>Located in <code>CoreDelegates.h</code></p>"},{"location":"ue4guide/gameplay-programming/master-engine-flow/core-eventsdelegates/#applicationengine-lifetime","title":"Application/Engine Lifetime","text":"C++<pre><code>  // Callback for platform specific very early init code.\n  DECLARE_MULTICAST_DELEGATE(FOnPreMainInit);\n  static FOnPreMainInit&amp; GetPreMainInitDelegate();\n\n  /** Sent when GConfig is finished initializing */\n  DECLARE_MULTICAST_DELEGATE(FConfigReadyForUse);\n  static FConfigReadyForUse ConfigReadyForUse;\n\n  // Called when appInit is called, very early in startup\n  static FSimpleMulticastDelegate OnInit;\n\n  // Called at the end of UEngine::Init, right before loading PostEngineInit modules for both normal execution and commandlets\n  static FSimpleMulticastDelegate OnPostEngineInit;\n\n  // Called at the very end of engine initialization, right before the engine starts ticking. This is not called for commandlets\n  // 'if (GIsRunning)' =&gt; to test whether OnEngineInitComplete has already finished\n  static FSimpleMulticastDelegate OnFEngineLoopInitComplete;\n\n  // Called when the application is about to exit.\n  static FSimpleMulticastDelegate OnExit;\n\n  // Called when before the application is exiting.\n  static FSimpleMulticastDelegate OnPreExit;\n\n  // This is called when the application is about to be deactivated (e.g., due to a phone call or SMS or the sleep button).\n  // The game should be paused if possible, etc...\n  static FApplicationLifetimeDelegate ApplicationWillDeactivateDelegate;\n\n  // Called when the application has been reactivated (reverse any processing done in the Deactivate delegate)\n  static FApplicationLifetimeDelegate ApplicationHasReactivatedDelegate;\n\n  // This is called when the application is being backgrounded (e.g., due to switching\n  // to another app or closing it via the home button)\n  // The game should release shared resources, save state, etc..., since it can be\n  // terminated from the background state without any further warning.\n  static FApplicationLifetimeDelegate ApplicationWillEnterBackgroundDelegate; // for instance, hitting the home button\n\n                                        // Called when the application is returning to the foreground (reverse any processing done in the EnterBackground delegate)\n  static FApplicationLifetimeDelegate ApplicationHasEnteredForegroundDelegate;\n\n  // This *may* be called when the application is getting terminated by the OS.\n  // There is no guarantee that this will ever be called on a mobile device,\n  // save state when ApplicationWillEnterBackgroundDelegate is called instead.\n  static FApplicationLifetimeDelegate ApplicationWillTerminateDelegate;\n\n  DECLARE_MULTICAST_DELEGATE(FApplicationRequestAudioState);\n  static FApplicationRequestAudioState ApplicationRequestAudioState;\n\n  // Called when the OS is running low on resources and asks the application to free up any cached resources, drop graphics quality etc.\n  static FApplicationLifetimeDelegate ApplicationShouldUnloadResourcesDelegate;\n\n  DECLARE_MULTICAST_DELEGATE_OneParam(FApplicationStartupArgumentsDelegate, const TArray&lt;FString&gt;&amp;);\n\n  // Called with arguments passed to the application on statup, perhaps meta data passed on by another application which launched this one.\n  static FApplicationStartupArgumentsDelegate ApplicationReceivedStartupArgumentsDelegate;\n\n// called when the user grants permission to register for remote notifications\n  static FApplicationRegisteredForRemoteNotificationsDelegate ApplicationRegisteredForRemoteNotificationsDelegate;\n\n  // called when the user grants permission to register for notifications\n  static FApplicationRegisteredForUserNotificationsDelegate ApplicationRegisteredForUserNotificationsDelegate;\n\n  // called when the application fails to register for remote notifications\n  static FApplicationFailedToRegisterForRemoteNotificationsDelegate ApplicationFailedToRegisterForRemoteNotificationsDelegate;\n\n  // called when the application receives a remote notification\n  static FApplicationReceivedRemoteNotificationDelegate ApplicationReceivedRemoteNotificationDelegate;\n\n  // called when the application receives a local notification\n  static FApplicationReceivedLocalNotificationDelegate ApplicationReceivedLocalNotificationDelegate;\n\n  // called when the application receives notice to perform a background fetch\n  static FApplicationPerformFetchDelegate ApplicationPerformFetchDelegate;\n\n  // called when the application receives notice that a background download has completed\n  static FApplicationBackgroundSessionEventDelegate ApplicationBackgroundSessionEventDelegate;\n\n  /** Sent when a device screen orientation changes */\n  DECLARE_MULTICAST_DELEGATE_OneParam(FApplicationReceivedOnScreenOrientationChangedNotificationDelegate, int32);\n  static FApplicationReceivedOnScreenOrientationChangedNotificationDelegate ApplicationReceivedScreenOrientationChangedNotificationDelegate;\n\n  // Called when an application is notified that the application license info has been updated.\n  // The new license data should be polled and steps taken based on the results (i.e. halt application if license is no longer valid).\n  DECLARE_MULTICAST_DELEGATE(FApplicationLicenseChange);\n  static FApplicationLicenseChange ApplicationLicenseChange;\n</code></pre>"},{"location":"ue4guide/gameplay-programming/master-engine-flow/core-eventsdelegates/#streaming","title":"Streaming","text":"C++<pre><code>// Callback for platform handling when flushing async loads.\n  DECLARE_MULTICAST_DELEGATE(FOnAsyncLoadingFlush);\n  static FOnAsyncLoadingFlush OnAsyncLoadingFlush;\n\n  // Callback for a game thread interruption point when a async load flushing. Used to updating UI during long loads.\n  DECLARE_MULTICAST_DELEGATE(FOnAsyncLoadingFlushUpdate);\n  static FOnAsyncLoadingFlushUpdate OnAsyncLoadingFlushUpdate;\n\n  // Callback on the game thread when an async load is started. This goes off before the packages has finished loading\n  DECLARE_MULTICAST_DELEGATE_OneParam(FOnAsyncLoadPackage, const FString&amp;);\n  static FOnAsyncLoadPackage OnAsyncLoadPackage;\n\n  DECLARE_MULTICAST_DELEGATE_OneParam(FOnSyncLoadPackage, const FString&amp;);\n  static FOnSyncLoadPackage OnSyncLoadPackage;\n\n  // Called when an error occurred.\n  static FSimpleMulticastDelegate OnShutdownAfterError;\n</code></pre>"},{"location":"ue4guide/gameplay-programming/master-engine-flow/core-eventsdelegates/#rendering","title":"Rendering","text":"C++<pre><code>// Called at the beginning of a frame\nstatic FSimpleMulticastDelegate OnBeginFrame;\n\n// Called at the end of a frame\nstatic FSimpleMulticastDelegate OnEndFrame;\n\n// Called at the beginning of a frame on the renderthread\nstatic FSimpleMulticastDelegate OnBeginFrameRT;\n\n// Called at the end of a frame on the renderthread\nstatic FSimpleMulticastDelegate OnEndFrameRT;\n\nDECLARE_MULTICAST_DELEGATE_TwoParams(FOnSystemResolutionChanged, uint32 /*ResX*/, uint32 /*ResY*/);\nstatic FOnSystemResolutionChanged OnSystemResolutionChanged;\n\n/** Sent just after the rendering thread has been created. */\nstatic FRenderingThreadChanged PostRenderingThreadCreated;\n/* Sent just before the rendering thread is destroyed. */\nstatic FRenderingThreadChanged PreRenderingThreadDestroyed;\n</code></pre>"},{"location":"ue4guide/gameplay-programming/master-engine-flow/core-eventsdelegates/#vr-specific","title":"VR Specific","text":"C++<pre><code>/** Sent when the platform needs the user to fix headset tracking on startup (PS4 Morpheus only) */\n  DECLARE_MULTICAST_DELEGATE(FVRHeadsetTrackingInitializingAndNeedsHMDToBeTrackedDelegate);\n  static FVRHeadsetTrackingInitializingAndNeedsHMDToBeTrackedDelegate VRHeadsetTrackingInitializingAndNeedsHMDToBeTrackedDelegate;\n\n  /** Sent when the platform finds that needed headset tracking on startup has completed (PS4 Morpheus only) */\n  DECLARE_MULTICAST_DELEGATE(FVRHeadsetTrackingInitializedDelegate);\n  static FVRHeadsetTrackingInitializedDelegate VRHeadsetTrackingInitializedDelegate;\n\n  /** Sent when the platform requests a low-level VR recentering */\n  DECLARE_MULTICAST_DELEGATE(FVRHeadsetRecenter);\n  static FVRHeadsetRecenter VRHeadsetRecenter;\n\n  /** Sent when connection to VR HMD is lost */\n  DECLARE_MULTICAST_DELEGATE(FVRHeadsetLost);\n  static FVRHeadsetLost VRHeadsetLost;\n\n  /** Sent when connection to VR HMD is restored */\n  DECLARE_MULTICAST_DELEGATE(FVRHeadsetReconnected);\n  static FVRHeadsetReconnected VRHeadsetReconnected;\n\n  /** Sent when connection to VR HMD connection is refused by the player */\n  DECLARE_MULTICAST_DELEGATE(FVRHeadsetConnectCanceled);\n  static FVRHeadsetConnectCanceled VRHeadsetConnectCanceled;\n\n  /** Sent when the VR HMD detects that it has been put on by the player. */\n  DECLARE_MULTICAST_DELEGATE(FVRHeadsetPutOnHead);\n  static FVRHeadsetPutOnHead VRHeadsetPutOnHead;\n\n  /** Sent when the VR HMD detects that it has been taken off by the player. */\n  DECLARE_MULTICAST_DELEGATE(FVRHeadsetRemovedFromHead);\n  static FVRHeadsetRemovedFromHead VRHeadsetRemovedFromHead;\n\n  /** Sent when a 3DOF VR controller is recentered */\n  DECLARE_MULTICAST_DELEGATE(FVRControllerRecentered);\n  static FVRControllerRecentered VRControllerRecentered;\n</code></pre>"},{"location":"ue4guide/gameplay-programming/master-engine-flow/core-eventsdelegates/#error","title":"Error","text":"C++<pre><code>  // Called when displaying on screen messages (like the \"Lighting needs to be rebuilt\"), to let other systems add any messages as needed\n  // Sample Usage:\n  // void GetMyOnScreenMessages(FCoreDelegates::FSeverityMessageMap&amp; OutMessages)\n  // {\n  //\t\tOutMessages.Add(FCoreDelegates::EOnScreenMessageSeverity::Info, FText::Format(LOCTEXT(\"MyMessage\", \"My Status: {0}\"), SomeStatus));\n  // }\n  DECLARE_MULTICAST_DELEGATE_OneParam(FGetOnScreenMessagesDelegate, FSeverityMessageMap&amp;);\n  static FGetOnScreenMessagesDelegate OnGetOnScreenMessages;\n\n  // Callback when an ensure has occurred\n  static FOnHandleSystemEnsure OnHandleSystemEnsure;\n  // Callback when an error (crash) has occurred\n  static FOnHandleSystemError OnHandleSystemError;\n\n  /** called when the main loop would otherwise starve. */\n  DECLARE_DELEGATE(FStarvedGameLoop);\n  static FStarvedGameLoop StarvedGameLoop;\n\n  // Called to request that systems free whatever memory they are able to. Called early in LoadMap.\n  // Caller is responsible for flushing rendering etc. See UEngine::TrimMemory\n  static FSimpleMulticastDelegate&amp; GetMemoryTrimDelegate();\n\n  // Called when OOM event occurs, after backup memory has been freed, so there's some hope of being effective\n  static FSimpleMulticastDelegate&amp; GetOutOfMemoryDelegate();\n</code></pre>"},{"location":"ue4guide/gameplay-programming/master-engine-flow/core-eventsdelegates/#fgamedelegates","title":"FGameDelegates","text":"C++<pre><code>DEFINE_GAME_DELEGATE_TYPED(EndPlayMapDelegate, FSimpleMulticastDelegate);\nDEFINE_GAME_DELEGATE_TYPED(PendingConnectionLostDelegate, FSimpleMulticastDelegate);\nDEFINE_GAME_DELEGATE(PreCommitMapChangeDelegate);\nDEFINE_GAME_DELEGATE_TYPED(PostCommitMapChangeDelegate, FSimpleMulticastDelegate);\n</code></pre>"},{"location":"ue4guide/gameplay-programming/master-engine-flow/core-eventsdelegates/#fcoreuobjectdelegates","title":"FCoreUObjectDelegates","text":"<p>Located in <code>UObjectGlobals</code></p> C++<pre><code>// Called when any object is modified at all\n  static FOnObjectModified OnObjectModified;\n\n  // Called before a property is changed\n    static FOnPreObjectPropertyChanged OnPreObjectPropertyChanged;\n  // Called when a property is changed\n    static FOnObjectPropertyChanged OnObjectPropertyChanged;\n\n\n  // Set of objects modified this frame, to prevent multiple triggerings of the OnObjectModified delegate.\n  static TSet&lt;UObject*&gt; ObjectsModifiedThisFrame;\n// Sent at the very beginning of LoadMap\n  DECLARE_MULTICAST_DELEGATE_OneParam(FPreLoadMapDelegate, const FString&amp; /* MapName */);\n  static FPreLoadMapDelegate PreLoadMap;\n\n  // Sent at the _successful_ end of LoadMap &amp; after LoadedWorld-&gt;BeginPlay()\n  DECLARE_MULTICAST_DELEGATE_OneParam(FPostLoadMapDelegate, UWorld* /* LoadedWorld */);\n  static FPostLoadMapDelegate PostLoadMapWithWorld;\n</code></pre>"},{"location":"ue4guide/gameplay-programming/master-engine-flow/core-eventsdelegates/#fworlddelegates","title":"FWorldDelegates","text":"<p>Located in <code>World.h</code></p> C++<pre><code>    // NOTE: Called for each UWorld at the top, before networking drivers tick/network receive. Gets called with undilated/unclamped delta time\n  FWorldDelegates::OnWorldTickStart;\n  // Note: This gets dilated/clamped delta time and called after networking/initial uworld frame setup. Aka this is right before actors can start icking\n  FWorldDelegates::OnWorldPreActorTick;\n  // NOTE: This gets called right before netdrivers do TickFlush() aka right before all the replication send magic happens\n  FWorldDelegates::OnWorldPostActorTick;\n\n  // Gets called in UWorldConstructor()\n  FWorldDelegates::OnPostWorldCreation;\n  // Called at start of UWorld::InitWorld(), before UWorld managers are allocated/created (ie Physics scene, I system, Navigation system)\n  FWorldDelegates::OnPreWorldInitialization;\n  // Called at end of UWorld::InitWorld(), after UWorld managers are allocated/created (ie Physics scene, I system, Navigation system)\n  // NOTE: Level Actors are loaded by here but using TActorRange&lt;&gt; won't work. You have to manually iterate the actors. Look at FindActorsOfClass\n  FWorldDelegates::OnPostWorldInitialization;\n  // Gets called near end of UWorld::InitializeActorsForPlay(), after level map got initialized ie SpawnServerActors(), Levels-&gt;RouteActorInitialize(),etc.\n  // NOTE: Not called in editor loading process (will be called in PIE)\n  FWorldDelegates::OnWorldInitializedActors\n    - UWorld::OnActorsInitialized // Exact same as FWorldDelegates::OnWorldInitializedActors but bound to a UWorld object\n    - UWorld::AreActorsInitialized() // Can use to check if the world is ready\n\n  // Called at start of UWorld::CleanupWorld(), before world cleanup start\n  FWorldDelegates::OnWorldCleanup;\n  // Called at end of UWorld::CleanupWorld(), after world cleanup finishes\n  FWorldDelegates::OnPostWorldCleanup;\n  // Callback for world destruction (only called for initialized worlds)\n  FWorldDelegates::OnPreWorldFinishDestroy;\n\n#if WITH_EDITOR\n  // Callback for world rename event (pre)\n  static FWorldRenameEvent OnPreWorldRename;\n#endif // WITH_EDITOR\n\n  // Post duplication event.\n  static FWorldPostDuplicateEvent OnPostDuplicate;\n\n  // Sent when a ULevel is added to the world via UWorld::AddToWorld\n  static FOnLevelChanged\t\t\tLevelAddedToWorld;\n\n  // Sent when a ULevel is removed from the world via UWorld::RemoveFromWorld or\n  // LoadMap (a NULL object means the LoadMap case, because all levels will be\n  // removed from the world without a RemoveFromWorld call for each)\n  static FOnLevelChanged\t\t\tLevelRemovedFromWorld;\n\n  // Called after offset was applied to a level\n  DECLARE_MULTICAST_DELEGATE_FourParams(FLevelOffsetEvent, ULevel*,  UWorld*, const FVector&amp;, bool);\n  static FLevelOffsetEvent\t\tPostApplyLevelOffset;\n\n  // called by UWorld::GetAssetRegistryTags()\n  static FWorldGetAssetTags GetAssetTags;\n\n#if WITH_EDITOR\n  // Called when changes in the levels require blueprint actions to be refreshed.\n  static FRefreshLevelScriptActionsEvent RefreshLevelScriptActions;\n#endif\n</code></pre>"},{"location":"ue4guide/gameplay-programming/master-engine-flow/core-eventsdelegates/#engine-delegates","title":"Engine Delegates","text":"<p>Located in <code>Engine.h</code></p> C++<pre><code>/** Broadcasts when a world is added. */\n  FWorldAddedEvent\t\t\tWorldAddedEvent;\n\n  /** Broadcasts when a world is destroyed. */\n  FWorldDestroyedEvent\t\tWorldDestroyedEvent;\nprivate:\n\n#if WITH_EDITOR\n\n  /** Broadcasts whenever a world's actor list changes in a way not specifiable through other LevelActor__Events */\n  FLevelActorListChangedEvent LevelActorListChangedEvent;\n\n  /** Broadcasts whenever an actor is added. */\n  FLevelActorAddedEvent LevelActorAddedEvent;\n\n  /** Broadcasts whenever an actor is removed. */\n  FLevelActorDeletedEvent LevelActorDeletedEvent;\n\n  /** Broadcasts whenever an actor is attached. */\n  FLevelActorAttachedEvent LevelActorAttachedEvent;\n\n  /** Broadcasts whenever an actor is detached. */\n  FLevelActorDetachedEvent LevelActorDetachedEvent;\n\n  /** Broadcasts whenever an actor's folder has changed. */\n  FLevelActorFolderChangedEvent LevelActorFolderChangedEvent;\n\n  /** Broadcasts whenever an actor is being renamed */\n  FLevelActorRequestRenameEvent LevelActorRequestRenameEvent;\n\n  /** Broadcasts whenever a component is being renamed */\n  FLevelComponentRequestRenameEvent LevelComponentRequestRenameEvent;\n\n  /** Broadcasts after an actor has been moved, rotated or scaled */\n  FOnActorMovedEvent\t\tOnActorMovedEvent;\n\n  /** Broadcasts after a component has been moved, rotated or scaled */\n  FOnComponentTransformChangedEvent OnComponentTransformChangedEvent;\n\n  /** Delegate broadcast after UEditorEngine::Tick has been called (or UGameEngine::Tick in standalone) */\n  FPostEditorTick PostEditorTickEvent;\n\n  /** Delegate broadcast when the editor is closing */\n  FEditorCloseEvent EditorCloseEvent;\n</code></pre>"},{"location":"ue4guide/gameplay-programming/master-engine-flow/input-processing-architecture-diagram-flow/","title":"Input processing architecture diagram flow","text":"<p>https://docs.unrealengine.com/latest/INT/Gameplay/Input/index.html</p>"},{"location":"ue4guide/gameplay-programming/master-engine-flow/input-processing-architecture-diagram-flow/#input-processing","title":"Input Processing","text":"<p>UPlayerInput:</p> <ul> <li> <p>PlayerInput Uobject exists within PlayerController class that manages player input state</p> </li> <li> <p>Handles mouse smoothing, custom debug , gesture recognition, etc</p> </li> <li> <p>Spawned only on clients</p> </li> <li> <p>Contains input *mappings* e.g. FInputActionKeyMapping &amp; FInputAxisKeyMapping map friendly names to Keys e.g. 'W' to MoveForward</p> </li> <li> <p>As an exception, contains debug function *bindings* that can be executed through console.</p> </li> <li> <p>Bindings to actual functions (e.g. what happens when MoveForward is pressed) should be placed in UInputComponent</p> </li> <li> <p>InputCoreTypes.cpp contains the hardware button definition mappings to keys</p> </li> </ul>"},{"location":"ue4guide/gameplay-programming/master-engine-flow/input-processing-architecture-diagram-flow/#uinputcomponent","title":"UInputComponent","text":"<ul> <li> <p>Contains all the input delegate *bindings* for an Actor</p> </li> <li> <p>Links AxisMappings/ActionMappings to game actions/functions</p> </li> </ul>"},{"location":"ue4guide/gameplay-programming/master-engine-flow/input-processing-architecture-diagram-flow/#input-processing-loop","title":"Input Processing Loop:","text":"<ol> <li>FEngineLoop::Tick() process input</li> </ol> <ul> <li> <p>FPlatformMisc::PumpMessages() processes mouse &amp; keyboard while SlateApp.PollGameDeviceState() process gamepad</p> </li> <li> <p>The Windows MsgPump happens during the main engine loop (at least on Windows, controlled by GPumpingMessagesOutsideOfMainLoop)</p> </li> <li> <p>Gamepad input always happens inside the main loop</p> </li> <li> <p>Actual Input keys are recorded in a side band channel through WindowsMsgPmp-&gt;SceneViewport-&gt;GameViewport</p> </li> <li> <p>Calls into PlayerController::InputKey() to give PlayerController a chance to add logic around input capture (e.g. execute custom debug binds)</p> <ul> <li> <p>We use PlayerController::InputKey() to execute our custom debug input binds before normal engine Input processing</p> </li> <li> <p>PlayerInput::InputKey() - record the key events in PlayerInput::KeyStateMap. This is where you can add smoothing or custom input history</p> </li> </ul> </li> <li> <p>Input is polled in FEngineLoop.Tick() by calling which is before GEngine-&gt;Tick()</p> </li> </ul> <ol> <li>World::Tick()=&gt; Process Input &amp; Fire Bindings on components (during PlayerController's tick group, default PrePhysics</li> </ol> <ul> <li> <p>PlayerController::TickActor() calls PlayerController::PlayerTick() only on local PlayerController that has PlayerInput object so not servers. Won't be called on servers for nonlocal PCs</p> </li> <li> <p>PlayerController::PlayerTick()</p> </li> <li> <p>PlayerController::TickPlayerInput()</p> </li> <li> <p>PlayerInput::Tick()</p> </li> <li> <p>PlayerController::ProcessPlayerInput</p> </li> <li> <p>PlayerController::BuildInputStack() =&gt; Adds InputComponents in a stack that defines priority of what components get access to inputs first. Order from lowest priority to highest:</p> <ul> <li> <p>ControlledPawn (if input enabled)</p> </li> <li> <p>any components inside ControlledPawn with InputComponent</p> </li> <li> <p>LevelScriptActors with InputEnabled</p> </li> <li> <p>PlayerController</p> </li> <li> <p>All other Actors that have called Aactor::EnableInput(PlayerController) where PlayerController is this player controller</p> </li> </ul> </li> <li> <p>PlayerInput::ProcessInputStack() - Process the frame input's events with Input stack from BuildInputStack</p> <ul> <li> <p>virtual PlayerController::PreProcessInput() - can be overridden for work before firing input delegates</p> </li> <li> <p>PlayerInput::ProcessInputStack() =&gt; Processes all the input delegate binds</p> </li> <li> <p>virtual PlayerController::PostProcessInput() - can be overridden for work post firing input delegates</p> </li> </ul> </li> </ul> <ol> <li>Tick Player Controller Actor</li> </ol>"},{"location":"ue4guide/gameplay-programming/master-engine-flow/master-engine-flow/","title":"Game Flow Diagram","text":"<p> Related: Detailed Actor LifeCycle Diagram</p>"},{"location":"ue4guide/gameplay-programming/master-engine-flow/master-engine-flow/#details","title":"Details","text":"<p>Numbers signify steps not necessarily at the same class nesting</p> <ul> <li> <p>UGameEngine::Init</p> </li> <li> <p>UGameInstance::InitializeStandalone()</p> <ul> <li>UGameInstance::Init() - CreateUOnlineSession and Register Delegates()</li> </ul> </li> <li> <p>UGameEngine::Start</p> </li> <li> <p>UGameInstance::StartGameInstance()=&gt;</p> <ul> <li>UEngine::LoadMap()</li> </ul> <ol> <li> <p>UWorld::InitializeActorsForPlay() - Call register components on all actor components in all levels. Note: Construction scripts are rerun in uncooked mode</p> <ul> <li>UActorComponent::RegisterComponent() - Adding itself to its owner and inside owner's world, possibly creating rendering/physics state</li> </ul> </li> <li> <p>ABBGameModeBase::InitGame - Create the Game Session and register FGameDelegates (ex: PreCommitMapChangeDelegate, HandleDisconnectDelegate)</p> </li> <li> <p>Ulevel::RouteActorInitialize() -</p> <ul> <li> <p>a) Actor::PreInitializeComponents() - On all actors in the level</p> </li> <li> <p>Side Note: AGameModeBase::PreInitializeComponents() creates</p> <ul> <li> <p>AGameStateBase and calls InitGameState()</p> </li> <li> <p>AGameNetworkManager which handles game-specific networking management (cheat detection, bandwidth management, etc)</p> </li> </ul> </li> <li> <p>b) Iterate through Ulevel::Actors[] and call these functions on them one at a time</p> </li> <li> <p>Actor::InitializeComponents()</p> <ul> <li> <p>UActorComponent::Activate() - Sets Component Tick To Be Enables &amp; bIsActive = true</p> </li> <li> <p>UActorComponent::InitializeComponent() - Place for components to Initialize themselves before BeginPlay (Actor or Component for anything in the world)</p> </li> </ul> </li> <li> <p>PostInitializeComponents() - Code that can run after gaurantee that all components have been initialized</p> </li> <li> <p>c) Iterate through all Ulevel::ActorsToBeginPlay[] and call BeginPlay() to allows code to run with assumption that all other level actors have been PostInitializeComponents()</p> </li> <li> <p>Not sure why this is here instead of the main call to BeginPlay(possibly for networked late joins?)</p> </li> </ul> </li> <li> <p>FWorldDelegates::OnWorldInitializedActors.Broadcast(OnActorInitParams)</p> </li> </ol> </li> </ul> <ol> <li>Uworld::BeginPlay()</li> </ol> <ul> <li> <p>a) GameMode::StartPlay()</p> <ul> <li> <p>GameMode::StartMatch()</p> </li> <li> <p>GameState::HandleBeginPlay()</p> <ul> <li> <p>AWorldSettings::NotifyBeginPlay()</p> </li> <li> <p>Actor::BeginPlay(), for all actors</p> <ul> <li>UActorComponent::RegisterAllComponentTickFunctions() - Allows components to register multiple tick functions (ex: Physics tick, cloth tick in skeletalmeshcomponent)</li> <li>UActorComponent::BeginPlay()</li> </ul> </li> </ul> </li> </ul> </li> </ul> <p>FEngineLoop::Tick()</p> <ul> <li> <p>UGameEngine::Tick()</p> </li> <li> <p>Uworld::Tick()</p> <ul> <li> <p>FTiskTaskManagerInterface::StartFrame()</p> </li> <li> <p>Queues up all the TickFunctions according to their dependency graph &amp; TickGroup</p> </li> <li> <p>Ticking within each group is done by a dependency graph (AddTickPrerequisite) of tick functions of various objects during TickFunction registration</p> </li> <li> <p>This function might change what TickGroup something runs in according to the prerequisite tick function's tickgroup</p> </li> <li> <p>Actor Components do not necessarily tick after their owner Actor</p> </li> <li> <p>Calls RunTickGroup() for various tick groups which ticks components</p> </li> <li> <p>FTickableGameObject::TickObjects() - ticks UObjects or anything that derives from FTickableGameObject (e.g. SceneCapturerCubes or LevelSequencePlayers )</p> </li> </ul> </li> <li> <p>FTicker::GetCoreTicker().Tick(FApp::GetDeltaTime()) - Ticks all objects of type FTickerObjectBase. Ex: FHttpManager, FAvfMediaPlayer, FVoiceCapture, FSteamSocketSubsystem)</p> </li> <li> <p>This would be great place to add Objects that need to tick at the end of the frame that are engine/world agnostic</p> </li> <li> <p>Good possible place for our own UDP network ticking replication</p> </li> </ul> <p>GameMode Flow:</p> <ul> <li>InitGame()</li> <li>InitGameState()</li> <li>PostInitializeComponents()</li> <li>ChoosePlayerStart_Implementation()</li> <li>PostLogin()</li> <li>HandleStartingNewPlayer_Implementation()</li> <li>ChoosePlayerStart_Implementation()</li> <li>SetPlayerDefaults()</li> <li>RestartPlayerAtPlayerStart()</li> <li>StartPlay()</li> </ul>"},{"location":"ue4guide/gameplay-programming/master-engine-flow/ticking-order-execution-dependencygraph/","title":"Ticking order execution dependencygraph","text":"<p>Actor Components do not necessarily tick before/after owning Actor</p> <p>Components that are attached tick after their parents</p> <p>Actors/components tick after the matinee actor/levelsequencer that controls it (you can configure level sequencer to not do this)</p> <p>Some common dependencies in order of priority: sub-bullet points mean they get run after their header</p> <p>PossessingController.ActorTick</p> <ul> <li> <p>PossessedPawn.ActorTick</p> </li> <li> <p>PossessedPawn.MovementComponent (look below for this ones other dependencies)</p> </li> </ul> <p>{PossessingController.ActorTick, MovementBasePrimitiveComponent.Primary, Owner of MovementBasePrimitiveComponent, &amp; all of its the ticking child components}</p> <ul> <li> <p>MovementComponent.Primary</p> </li> <li> <p>PostPhysicsTickFunction</p> </li> <li> <p>OwnerActor.PrimaryActorTick</p> </li> <li> <p>ACharacter::Mesh.Primary</p> </li> <li> <p>MovementComponent.UpdatedComponent (e.g. Capsule component of ACharacter)</p> </li> </ul> <p>World-&gt;EndPhysicsTickFunction</p> <ul> <li>SkeletalMeshComponent.EndPhysicsTickFunction</li> </ul> <p>MasterPoseComponentTick.Primary</p> <ul> <li>SkinnedMeshComponent.PrimaryComponent</li> </ul> <p>{PrimitiveComponent.Primary &amp;&amp; World-&gt;EndPhysicsTickFunction}</p> <ul> <li>PostPhysicsComponentTick</li> </ul> <p>Engine Flow</p> <p>FWorldDelegates::OnWorldTickStart.Broadcast(TickType, DeltaSeconds);</p> <p>//Happens before net code/update all incoming packets</p> <p>FEngineLoop::TotalTickTime</p> <p>World::Tick()</p> <p>[TG_PrePhysics, TG_PostPhysics]</p> <p>ProcessLatentActions</p> <p>FTickableObjects::Tick</p> <p>[TG_PostUpdateWork, TG_LastDemotable]</p> <p>FXSystem</p> <p>FTickableObjects::Tick() ones that don't belong to world</p>"},{"location":"ue4guide/gameplay-programming/physics/async-physics-traces/","title":"Async physics traces","text":"<p>https://medium.com/@bryan.corell/using-async-collision-traces-in-unreal-engine-4-2cc312c825f5</p>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-console-commands/","title":"Udk console commands","text":"<p>https://docs.unrealengine.com/udk/Three/ConsoleCommands.html#Editor-Specific%20Commands</p>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-console-commands/#unreal-engine-3-console-commands","title":"Unreal Engine 3 Console Commands","text":"<ul> <li> <p>Unreal Engine 3 Console Commands</p> </li> <li> <p>Overview</p> </li> <li> <p>Command List</p> </li> <li> <p>General Commands</p> </li> <li> <p>Debugging Commands</p> </li> <li> <p>Statistics Commands</p> </li> <li> <p>Memory and Performance Commands</p> </li> <li> <p>Display Commands</p> </li> <li> <p>Rendering Commands</p> </li> <li> <p>Texture Mip-Map Fading Commands</p> </li> <li> <p>Physics Commands</p> </li> <li> <p>Audio Commands</p> </li> <li> <p>Networking Commands</p> </li> <li> <p>Still Captures and Demo Recording Commands</p> </li> <li> <p>Movie Capture</p> </li> <li> <p>Gameplay Commands</p> </li> <li> <p>Navigation and Pathfinding Commands</p> </li> <li> <p>User Interface Commands</p> </li> <li> <p>Miscellaneous Commands</p> </li> <li> <p>System Settings Commands</p> </li> <li> <p>Mobile Commands</p> </li> <li> <p>Editor-Specific Commands</p> </li> </ul>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-console-commands/#overview","title":"Overview","text":"<p>Console commands are string-based commands that you can run in the game or in the editor. They are also known as exec commands.</p> <p>To use console commands, bring up the console by pressing Tab or Tilde (~), type them in, and press Enter. Console commands may be executed from within the game, from within the editor, or if the game has been started using the -server switch, from the server's console. They can do various things from resetting the engine to setting particular actor's variables.</p> <p>Lists of commands can also be stored in text files in the system directory and executed by typing exec _filename_ at the console.</p>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-console-commands/#command-list","title":"Command List","text":"<p>The following is a list of engine supported console commands...</p>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-console-commands/#general-commands","title":"General Commands","text":"<ul> <li> <p>CANCEL - tells the engine to cancel an in progress connection attempt</p> </li> <li> <p>DISCONNECT - disconnects the client from the current game/server</p> </li> <li> <p>EXIT - tells the engine to shutdown and close the application.</p> </li> <li> <p>MAP - alias for START</p> </li> <li> <p>OPEN [url] - tells the engine to open a map by the name of the string that comes immediately after, including any additional URL Parameters (via command-line arguments); uses TRAVEL_Partial</p> </li> <li> <p>QUIT - same as EXIT</p> </li> <li> <p>RECONNECT - reconnects the client to the current game/server</p> </li> <li> <p>SERVERTRAVEL - travels the client to the server by the name/address of the string that comes immediately after</p> </li> <li> <p>START [url] - similar to OPEN, difference is it does a TRAVEL_Absolute instead of TRAVEL_Partial.</p> </li> <li> <p>STREAMMAP [url] \u2013 Does a prepare and commit map change on the URL.</p> </li> </ul>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-console-commands/#debugging-commands","title":"Debugging Commands","text":"<ul> <li> <p>ANALYZEOCTREE [option] \u2013 Outputs information about the octree.</p> </li> <li> <p>VERBOSE \u2013 Outputs detailed information.</p> </li> <li> <p>CANCELMATINEE [param] \u2013 Skips current matinee; parameter is the number of seconds into the matinee the player must be before the command will work.</p> </li> <li> <p>CLOSEEDITORVIEWPORT \u2013 Closes the PIE viewport.</p> </li> <li> <p>COLLAPSEOCTREE \u2013 Collapses tree children in the octree.</p> </li> <li> <p>CONFIGHASH - Displays configuration information</p> </li> <li> <p>CONFIGMEM \u2013 Displays memory usage</p> </li> <li> <p>COUNTDISABLEDPARTICLEITEMS \u2013 Outputs the number of disabled particle systems, lod levels, and modules.</p> </li> <li> <p>CUSTOMLODDATA [LOD=lod] \u2013 Set a custom level of detail to use for static meshes.</p> </li> <li> <p>DEBUG - Is used to simulate various errors with the following parameters identifying which</p> </li> <li> <p>ASSERT \u2013 Tells the engine to simulate an Assert being triggered.</p> </li> <li> <p>BUFFEROVERRUN \u2013 Tells the engine to performa stack overflow test.</p> </li> <li> <p>CRASH - Tells the engine to simulate a fatal crash</p> </li> <li> <p>EATMEM - Tells the engine to simulate eating up all available system memory</p> </li> <li> <p>GPF - tells the engine to simulate a general protection fault</p> </li> <li> <p>HITCH \u2013 Tells the engine to simulate a hitch in the game by sleeping for one second.</p> </li> <li> <p>LONGLOG \u2013 Outputs a long log message to test the buffer resize code used for the log.</p> </li> <li> <p>RECURSE - tells the engine to simulate a runaway recursion or loop</p> </li> <li> <p>RENDERCRASH - tells the engine to simulate a fatal crash on the render thread</p> </li> <li> <p>SLEEP - sleep for a couple seconds</p> </li> <li> <p>DEBUGPREFAB [object] [command] \u2013 Output info about the specified prefab. Command can be one of the following:</p> </li> <li> <p>GRAPH \u2013 Show sub-object graph for prefab.</p> </li> <li> <p>SHOWMAP - Show archetype mappings for prefab.</p> </li> <li> <p>DIR - displays all used directories and files</p> </li> <li> <p>DISABLEALLSCREENMESSAGES \u2013 Disables al onscreen message or warnings.</p> </li> <li> <p>DISTFACTORSTATS \u2013 Outputs information on DistanceFactor used for rendering SkeletalMeshComponents during the game.</p> </li> <li> <p>DN [comment] \u2013 Creates a note actor with the specified comment at the current location. Only in PIE game.</p> </li> <li> <p>DUMPDYNAMICLIGHTSHADOWINTERACTONS \u2013 Outputs dynamic lighting and shadow interactions for the scene to the log; only includes shadow casting interactions.</p> </li> <li> <p>DUMPLINECHECKS \u2013 Output results of line checks since last reset if LINE_CHECK_TRACING is defined.</p> </li> <li> <p>DUMPMATERIALSTATS [platform] \u2013 Outputs material statistics for the specified platform.</p> </li> <li> <p>DUMPNATIVES - displays all native functions.</p> </li> <li> <p>DUMPSHADERSTATS [platform] \u2013 Outputs shader statistics for the specified platform.</p> </li> <li> <p>EDITACTOR [parameter] \u2013 Edit the properties of first found actor according to the parameter.</p> </li> <li> <p>CLASS= - Class to look for.</p> </li> <li> <p>NAME= - Name to look for</p> </li> <li> <p>TRACE \u2013 Trace player view for first hit actor.</p> </li> <li> <p>EDITDEFAULT [CLASS=class] \u2013 Open property editor for default properties of specified class. Only allowed in standalone.</p> </li> <li> <p>EDITOBJECT [parameter] \u2013 Edit the properties of the first found object of the specified class or with the given name.</p> </li> <li> <p>CLASS= - Class to look for.</p> </li> <li> <p>NAME= - Name to look for.</p> </li> <li> <p>ENABLEALLSCREENMESSAGES \u2013 Enables all onscreen messages or warnings.</p> </li> <li> <p>EXEC [filename] \u2013 Executes the contents (other console commands) of the specified file.</p> </li> <li> <p>FORCESKELLOD [option] \u2013 Force a specific level of detail for skeletal meshes. Option is:</p> </li> <li> <p>LOD= - LOD to force.</p> </li> <li> <p>GAMEVER / GAMEVERSION \u2013 Outputs the engine version and changelist to the log.</p> </li> <li> <p>GETMAXTICKRATE \u2013 Outputs the max tick rate to the log.</p> </li> <li> <p>FLUSH - tells the engine to flush all engine caches</p> </li> <li> <p>FLUSHLOG \u2013 Tells the engine to flush the logs.</p> </li> <li> <p>FLUSHPERSISTENTDEBUGLINES \u2013 Clears all persistent debug line draws.</p> </li> <li> <p>FRAMECOMPUPDATES \u2013 Outputs a list of all component updates over one frame.</p> </li> <li> <p>HIDELOGDETAILEDTICKSTATS \u2013 Turns off output of all detailed statistics.</p> </li> <li> <p>KILLPARTICLES \u2013 Deactivate particle systems and destroy all particles.</p> </li> <li> <p>KISMETLOG \u2013 Enables Kismet logging and forces all sequences to output logs.</p> </li> <li> <p>LISTAWAKEBODIES \u2013 Outputs a list of all rigid bodies that are currently awake.</p> </li> <li> <p>LISTDYNAMICLEVELS \u2013 Outputs a list of all dynamic streaming levels in the world.</p> </li> <li> <p>LISTLOADEDPACKAGES \u2013 Outputs a list of loaded packages.</p> </li> <li> <p>LISTPAWNCOMPONENTS \u2013 Outputs a list of all components for all Pawns in the world.</p> </li> <li> <p>LISTPRECACHEMAPPACKAGES \u2013 Outputs a list of the packages in the precache list which have not been \u201cloaded\u201d out.</p> </li> <li> <p>LISTSKELMESHES \u2013 Outputs a list of mappings from skeletal meshes to instances for all skeletal meshes.</p> </li> <li> <p>LISTSPAWNEDACTORS - lists all dynamic actors in persistent level with some info; also implicitly called by MEMLEAKCHECK.</p> </li> <li> <p>LISTTHREADS - gives a lot of info about what thread is running on which core.</p> </li> <li> <p>LOGACTORCOUNTS \u2013 Outputs counts for all actors, dynamic actors, and ticked actors.</p> </li> <li> <p>LOGOUTSTATLEVELS \u2013 Outputs information about streaming levels.</p> </li> <li> <p>MERGEMESH [meshes] \u2013 Merges the specified skeletal meshes (space delimited list) using the mesh merge utility.</p> </li> <li> <p>MOVEACTORTIMES \u2013 Outputs all actor move times over one frame.</p> </li> <li> <p>NAMEHASH \u2013 Displays information about the name table.</p> </li> <li> <p>OBJ - is used in conjunction with the following parameters</p> </li> <li> <p>BULK -</p> </li> <li> <p>CLASSES - displays a list of all loaded classes</p> </li> <li> <p>COMPONENTS -</p> </li> <li> <p>DEPENDENCIES - displays a list of dependencies upon a specific package as passed by a string parameter</p> <ul> <li>PACKAGE= - The package to inspect.</li> </ul> </li> <li> <p>DUMP - Dump all variable values for the specified object, supports specifying categories to hide or show (hide=movement,collision)</p> <ul> <li> <p>[class] - plain name or CLASS= or NAME=</p> </li> <li> <p>HIDE= - Comma separated list of categories to exclude.</p> </li> <li> <p>SHOW= - Comma separated list of categories to include.</p> </li> </ul> </li> <li> <p>FLAGS -</p> </li> <li> <p>GARBAGE - Forces a garbage collection sweep.</p> </li> <li> <p>GC - Forces a garbage collection sweep.</p> </li> <li> <p>HASH - Displays a count of how many objects have hashes.</p> </li> <li> <p>INSTRINISICCLASSES -</p> </li> <li> <p>LINKERS - iterates through GObjLoaders and displays info about their linkers</p> </li> <li> <p>LIST - displays a list of objects of a class, from a package, or inside a package.</p> <ul> <li> <p>CLASS= - the string value is the class of object to find</p> </li> <li> <p>INSIDE= - the string value is the name of the package to look in for objects</p> </li> <li> <p>PACKAGE= - the string value is the name of the package to list objects which have an outer of that package</p> </li> <li> <p>COUNT - number of instances</p> </li> <li> <p>NUMBYTES - size determined by serialization and class size</p> </li> <li> <p>MAXBYTES - same as above but also taking into account TArray slack</p> </li> <li> <p>RESBYTES - max size of resource (textures, sound, animation, etc.)</p> </li> </ul> </li> <li> <p>MARK - tells the engine to iterate through all objects and set their marked flag</p> </li> <li> <p>MARKCHECK - displays a list of objects that aren't marked</p> </li> <li> <p>REFS - takes two parameters which identify a class and name of an object, then displays all objects that reference it (NOTE: OBJ REFS uses a lot of stack, so, if you get strange crashes while trying to use it, try greatly increasing your stack size - for PC this is in the Linker-&gt;System section of the Visual Studio project compiler settings<sup>?</sup>.)</p> <ul> <li> <p>CLASS= - Class to check.</p> </li> <li> <p>NAME= - Name of the object to check.</p> </li> </ul> </li> <li> <p>PARANOIDDEVICELOSTCHECKING \u2013 Toggles checking for device lost every draw call.</p> </li> <li> <p>PARTICLETICKSTATS \u2013 Track particle tick statistics</p> </li> <li> <p>DUMP \u2013 Output particle tick stats in CSV format to log file.</p> </li> <li> <p>RESET \u2013 Empty tracked particle tick stats.</p> </li> <li> <p>START \u2013 Begin tracking particle tick stats.</p> </li> <li> <p>STOP \u2013 End tracking particle tick stats.</p> </li> <li> <p>PHYSASSETBOUNDS \u2013 Outputs a list of all physics assets bounds updates over one frame.</p> </li> <li> <p>PUSHVIEW [command] \u2013 Command for controlling object propagation from editor.</p> </li> <li> <p>START \u2013 Start propagation.</p> </li> <li> <p>STOP \u2013 Stop propagation.</p> </li> <li> <p>SYNC \u2013 If propagation is enabled, sync the player\u2019s location and rotation.</p> </li> <li> <p>[X] [Y] [Z] [PITCH] [YAW] [ROLL] \u2013 Directly set the location and rotation of the player.</p> </li> <li> <p>REATTACHCOMPONENTS [CLASS=class] \u2013 Force all components of the specified class to be reattached.</p> </li> <li> <p>RELOADCFG [class/object] \u2013 Reloads the config for the specified class or object.</p> </li> <li> <p>RELOADCONFIG [class/object] \u2013 Reloads the config for the specified class or object.</p> </li> <li> <p>RELOADLOC [class/object] \u2013 Reloads the localization data for the specified class or object.</p> </li> <li> <p>RESETLINECHECKS \u2013 Clears line check results if LINE_CHECK_TRACING is defined.</p> </li> <li> <p>SAVESHADERS \u2013 Saves local shader caches.</p> </li> <li> <p>SHOWEXTENTLINECHECK \u2013 Draw debug lines for non-zero extent line checks and debug boxes at end of checks.</p> </li> <li> <p>SHOWFACEFXBONES \u2013 Verifies that the FaceFX bone indices match the skeletal mesh bone indices.</p> </li> <li> <p>SHOW FACEFXDEBUG \u2013 Traces FaceFX bone list to see if more than one mesh is referencing or re-linking the master bone list.</p> </li> <li> <p>SHOWISOVERLAPPING \u2013 Outputs a list of all IsOverlapping calls over one frame.</p> </li> <li> <p>SHOWLIGHTENVS \u2013 Outputs a list of all light environments that were ticked over one frame.</p> </li> <li> <p>SHOWLINECHECK \u2013 Draw debug lines for zero extent line checks.</p> </li> <li> <p>SHOWLOG \u2013 Toggles display of the console log window.</p> </li> <li> <p>SHOWOCTREE \u2013 Toggles display of the octree.</p> </li> <li> <p>SHOWPOINTCHECK \u2013 Draw boxes at extent of point checks.</p> </li> <li> <p>SHOWSKELCOMPLODS \u2013 Outputs all skeletal component LODs over one frame.</p> </li> <li> <p>SHOWSKELCOMPTICKTIME \u2013 Outputs a list of all skeletal mesh components that were ticked over one frame.</p> </li> <li> <p>SHOWSKELMESHLODS \u2013 Outputs all skeletal mesh LODs over one frame.</p> </li> <li> <p>SHRINKOCTREE \u2013 Removes any slack in the octree.</p> </li> <li> <p>STRUCTPERFDATA \u2013 Enables tracking of serialization performance. Requires TRACK_SERIALIZATION_PERFORMANCE or LOOKING_FOR_PERF_ISSUES to be defined.</p> </li> <li> <p>DUMP \u2013 Outputs serialization performance data.</p> </li> <li> <p>RESET \u2013 Clears serialization performance data.</p> </li> <li> <p>SUPPRESS [tag] - suppress log messages.</p> </li> <li> <p>TICKFREQ \u2013 Toggles use of decreased tick frequency if required.</p> </li> <li> <p>TOGGLEALLSCREENMESSAGES \u2013 Toggles the display of all onscreen messages or warnings.</p> </li> <li> <p>TOGGLECROWDS \u2013 Toggle all crowds on or off.</p> </li> <li> <p>TOGGLEDEBUGGER \u2013 Toggles the use of the script debugger.</p> </li> <li> <p>TOGGLEDRAWEVENTS \u2013 Toggles display of draw events.</p> </li> <li> <p>TOGGLEFLUIDS \u2013 Toggles all fluid surfaces on or off.</p> </li> <li> <p>TOGGLELINECHECKS \u2013 Toggles line check stack tracing on or off.</p> </li> <li> <p>TOGGLELINECHECKSPIKES [value] \u2013 Sets the number of line checks which will cause line checks to be dumped for the current frame if exceeded.</p> </li> <li> <p>TOGGLELOGDETAILEDACTORUPDATESTATS \u2013 Toggles the output of detailed actor update statistics on or off.</p> </li> <li> <p>TOGGLELOGDETAILEDCOMPONENTSTATS \u2013 Toggles the output of detailed component statistics on or off.</p> </li> <li> <p>TOGGLELOGDETAILEDTICKSTATS \u2013 Toggles the output of detailed tick statistics on or off.</p> </li> <li> <p>TOGGLEMOBILEEMULATION \u2013 Toggles the use of mobile emulation on the PC (game or editor).</p> </li> <li> <p>TOGGLEONSCREENDEBUGMESSAGESYSTEM - toggles the display of all on-screen debug messages</p> </li> <li> <p>TOGGLEONSCREENDEBUGMESSAGEDISPLAY - toggle on-screen debug messages</p> </li> <li> <p>TOGGLERENDERINGTHREAD \u2013 Starts/Stops the rendering thread.</p> </li> <li> <p>TOGGLESTREAMINGVOLUMES [ON/OFF] \u2013 Turns streaming volumes on or off according to the parameter specified. If none is specified, a toggle is performed.</p> </li> <li> <p>TRACEFACEFX - Traces FaceFX bone list to see if more than one mesh is referencing or re-linking the master bone list.</p> </li> <li> <p>UNSUPPRESS [tag] \u2013 Tells the engine to unsuppress log messages.</p> </li> <li> <p>USENEWMOUSEINPUT \u2013 Toggles use of new DirectInput mouse input method.</p> </li> <li> <p>VIEWNAMES [Number] \u2013 Displays the last Number of names added to the name table.</p> </li> </ul>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-console-commands/#statistics-commands","title":"Statistics Commands","text":"<p>The STAT command is responsible for enabling the display of statistical data on the screen during runtime as well as controlling how and what data is shown. It can be used in conjunction with the following parameters to toggle on/off the display of statistics for the specified group of data (see Stats Descriptions for more details):</p> <ul> <li> <p>ANIM \u2013 Toggles display of animation system statistics.</p> </li> <li> <p>ASYNCIO \u2013 Toggles asynchronous loading statistics.</p> </li> <li> <p>AUDIO \u2013 Toggles display of audio system statistics.</p> </li> <li> <p>CANVAS \u2013 Toggles display of canvas drawing statistics.</p> </li> <li> <p>CHART [command] [parameters] \u2013 Command for controlling the stat chart. Command and parameters can be the following:</p> </li> <li> <p>Command</p> <ul> <li> <p>KEY \u2013 Toggles display of the chart key.</p> </li> <li> <p>LOCKSCALE \u2013 Locks scaling of the chart.</p> </li> <li> <p>RESCALE \u2013 Rescales the chart to fit all data.</p> </li> <li> <p>RESET \u2013 Removes all chart lines.</p> </li> <li> <p>SHOW \u2013 Toggles rendering of the stat chart.</p> </li> </ul> </li> <li> <p>Parameters</p> <ul> <li> <p>XRANGE= - Sets the range of the chart in the x axis.</p> </li> <li> <p>XSIZE= - Sets the chart size in the x axis.</p> </li> <li> <p>YSIZE= - Sets the chart size in the y axis.</p> </li> <li> <p>XPOS= - Sets the chart origin in the x axis.</p> </li> <li> <p>YPOS= - Sets the chart origin in the y axis.</p> </li> <li> <p>ALPHA= - Sets the chart\u2019s background alpha.</p> </li> <li> <p>FILTER= - Sets the filter string for the chart.</p> </li> </ul> </li> <li> <p>COLLISION \u2013 Toggles display of collision statistics.</p> </li> <li> <p>CROWD \u2013 Toggles display of crowd system statistics.</p> </li> <li> <p>D3D10RHI \u2013 Toggles display of DirectX 10 statistics.</p> </li> <li> <p>D3D9RHI \u2013 Toggles display of DirectX 9 statistics.</p> </li> <li> <p>DECALS \u2013 Toggles display of decal rendering statistics.</p> </li> <li> <p>DLE \u2013 Toggles display of dynamic light environment rendering statistics.</p> </li> <li> <p>ENGINE \u2013 Toggles display of general engine statistics.</p> </li> <li> <p>FACEFX \u2013 Toggles display of FaceFX animation statistics.</p> </li> <li> <p>FLUIDS \u2013 Toggles display of fluid simulation statistics (i.e., fluidsurfaces).</p> </li> <li> <p>FPS \u2013 Toggles display of frames per second (fps) statistics.</p> </li> <li> <p>FPSCHART \u2013 Toggles display of the fps chart statistics.</p> </li> <li> <p>GAME \u2013 Toggles display of game statistics. (tick times, etc.)</p> </li> <li> <p>INSTANCING \u2013 Toggles display of instancing statistics.</p> </li> <li> <p>MEMORY \u2013 Toggles display of general memory statistics.</p> </li> <li> <p>MEMORYCHURN \u2013 Toggles display of statistics dealing with memory allocation.</p> </li> <li> <p>NAVMESH \u2013 Toggles display of navigation mesh statistics.</p> </li> <li> <p>NET - toggles on/off (inter)net(work) statistics display</p> </li> <li> <p>NONE - toggles off all statistics display</p> </li> <li> <p>OCTREE \u2013 Toggles display of octree-related statistics.</p> </li> <li> <p>PARTICLES \u2013 Toggle display of general particle statistics.</p> </li> <li> <p>BEAMPARTICLES \u2013 Toggles display of statistics dealing with beam emitters.</p> </li> <li> <p>MESHPARTICLES \u2013 Toggles display of statistics dealing with mesh emitters.</p> </li> <li> <p>TRAILPARTICLES \u2013 Toggles display of statistics dealing with trail emitters.</p> </li> <li> <p>PATHFINDING \u2013 Toggles display of general pathfinding statistics.</p> </li> <li> <p>PHYSICS \u2013 Toggles display of general physics statistics.</p> </li> <li> <p>PHYSICSCLOTH \u2013 Toggles display of statistics dealing with cloth simulation.</p> </li> <li> <p>PHYSICSFIELDS \u2013 Toggles display of statistics dealing with physics fields.</p> </li> <li> <p>PHYSICSFLUIDS \u2013 Toggles display of statistics dealing with PhysX fluid simulations.</p> </li> <li> <p>SCENRENDERING \u2013 Toggles display of scene rendering statistics.</p> </li> <li> <p>SCENEUPDATE \u2013 Toggles display of general scene updating statistics.</p> </li> <li> <p>SCRIPT \u2013 No stats associated with this command.</p> </li> <li> <p>SHADERCOMPILING \u2013 Toggles display of shader compiling statistics.</p> </li> <li> <p>SHADERCOMPRESSION \u2013 Toggles display of shader compression statistics.</p> </li> <li> <p>STREAMING \u2013 Toggles display of streaming levels statistics.</p> </li> <li> <p>THREADING \u2013 Toggles display of statistics for the various threads running in the engine.</p> </li> <li> <p>UI \u2013 Toggles display of general UIScene statistics.</p> </li> </ul> <p>STAT can also be used with the following parameters to modify settings about how and what data is displayed:</p> <ul> <li> <p>COLOR \u2013 Unimplemented</p> </li> <li> <p>COUNTERS \u2013 Toggles rendering of counters and accumulators.</p> </li> <li> <p>CYCLES - Toggles rendering of cycle counters.</p> </li> <li> <p>EXCLUSIVE \u2013 Toggles display of all exclusive data.</p> </li> <li> <p>FONTSCALE [scale] - Scales the size of the font that's used for drawing the stats.</p> </li> <li> <p>GROUPED \u2013 Sets the stat rendering mode to grouped.</p> </li> <li> <p>HIER / HIERARCHY \u2013 Sets the rendering mode to hierarchical.</p> </li> <li> <p>INCLUSIVE \u2013 Toggles display of all inclusive data.</p> </li> <li> <p>LIST \u2013 Displays the names of stat groups in the console according to the following</p> </li> <li> <p>GROUPS \u2013 Display the names of all available groups</p> </li> <li> <p>SETS \u2013 Displays the names of any saved sets in the CustomStats section of the .ini file</p> </li> <li> <p>Group [name] \u2013 Displays the stats contained within the specified group.</p> </li> <li> <p>NAME [name] \u2013 Enables or disables a stat specified by name.</p> </li> <li> <p>NAV [index] \u2013 Navigates the stats tree when in the hierarchical rendering mode. The index is the number of the stat to navigate to.</p> </li> <li> <p>NONE \u2013 Toggle display of all currently visible stats.</p> </li> <li> <p>SAVE [name] \u2013 Output to the *Engine.ini file in the CustomStats section all currently visible stats using the specified name as the group name.</p> </li> <li> <p>SLOW [threshold] [duration] \u2013 Sets rendering mode to only display slow cycle stats. Threshold defaults to 0.01f and duration defaults to 10.0f.</p> </li> <li> <p>STARTFILE \u2013 Begin capturing stats file for use with the StatsViewer</p> </li> <li> <p>STOPFILE \u2013 Finish capturing stats file</p> </li> </ul>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-console-commands/#memory-and-performance-commands","title":"Memory and Performance Commands","text":"<ul> <li> <p>BEGINTRACKINGTHREAD \u2013 Begins tracking the current thread.</p> </li> <li> <p>DEFERRED_STOPMEMTRACKING_AND_DUMP - Executes the SNAPSHOTMEMORY, STOPTRACKING and DUMPALLOCSTOFILE commands in a deferred manner.</p> </li> <li> <p>DUMPFPSCHART \u2013 Outputs FPS chart information.</p> </li> <li> <p>DUMPMEMCHART \u2013 Outputs memory chart information.</p> </li> <li> <p>DUMPPARTICLECOUNTS \u2013 Outputs information about particle counts</p> </li> <li> <p>DUMPSLACKTRACES \u2013 Outputs the traces of the array slack tracking; only valid if TRACK_ARRAY_SLACK is defined.</p> </li> <li> <p>ENDTRACKINGTHREAD \u2013 Stops tracking the current thread.</p> </li> <li> <p>MEM - displays allocated memory information.</p> </li> <li> <p>MEMFRAGCHECK \u2013 Performs a memory fragmentation check. Defers the actual execution until after the next garbage collection to get an accurate reading.</p> </li> <li> <p>MEMLEAKCHECK \u2013 Performs a check for memory leaks. Defers actual execution until after next garbage collection to get an accurate reading.</p> </li> <li> <p>MEMORYSPLIT \u2013 Outputs information about how memory is split between various resources.</p> </li> <li> <p>MEMREPORT [option] \u2013 Executes a conglomerate of commands to output various info as well as memory stats. The only option is:</p> </li> <li> <p>FRAG \u2013 Causes MEMFRAGCHECK to be executed as well.</p> </li> <li> <p>MEMTAG_UPDATE \u2013 Force an update to the MemTagging system.</p> </li> <li> <p>MESHESWITHCOLLISION \u2013 Outputs list of all loaded static meshes and whether they have collision meshes.</p> </li> <li> <p>PARTICLEMEMORY \u2013 Outputs information about how memory is used for particles.</p> </li> <li> <p>PARTICLEMESHUSAGE \u2013 Outputs info about the amount of static meshes used with particles systems.</p> </li> <li> <p>PROFILESCRIPT / SCRIPTPROFILER - for profiling script execution;</p> </li> <li> <p>* START* - begin script profiling</p> <ul> <li>TIME= - captures data for a given duration (in seconds)</li> </ul> </li> <li> <p>STOP - end script profiling</p> </li> <li> <p>RESET \u2013 reset script profiling</p> </li> <li> <p>QUERYPERFDB \u2013 Outputs aggregated duration of tasks on this machine; grouped by task, sorted by duration.</p> </li> <li> <p>RENDERTARGET_MEM_USAGE \u2013 Outputs memory usage info for render targets to the log.</p> </li> <li> <p>RESETFPSCHART \u2013 Resets the FPS chart information.</p> </li> <li> <p>RESTEMEMCHART \u2013 Resets the memory chart information.</p> </li> <li> <p>RESETSLACKTRACKING \u2013 Resets the array slack tracking; only valid if TRACK_ARRAY_SLACK is defined.</p> </li> <li> <p>SNAPSHOTMEMORY -</p> </li> <li> <p>TOGGLESLACKTRACKING \u2013 Turns array slack tracking on or off; only valid if TRACK_ARRAY_SLACK is defined.</p> </li> <li> <p>TRIMMEMORY \u2013 Attempts to return memory back to the OS from unused segments.</p> </li> </ul>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-console-commands/#display-commands","title":"Display Commands","text":"<ul> <li>GAMMA [value] \u2013 Modifies the display gamma level.</li> <li>SETRES [height]x[width][w|f] - changes the resolution (w = windowed; f = fullscreen) for example: 800x600f</li> </ul>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-console-commands/#rendering-commands","title":"Rendering Commands","text":"<ul> <li> <p>AVAILABLETEXMEM \u2013 Outputs the amount of available texture memory.</p> </li> <li> <p>CAPTUREMODE - Toggles the display of all onscreen messages or warnings.</p> </li> <li> <p>COLORGRADING \u2013 Toggles the use of color grading.</p> </li> <li> <p>DUMPAVAILABLERESOLUTIONS \u2013 Outputs all available display resolutions.</p> </li> <li> <p>FREEZEALL \u2013 Freezes rendering and streaming.</p> </li> <li> <p>FREEZERENDERING \u2013 Forces rendering to freeze or resume. Allows viewing of the scene as it was rendered from the point the command was entered.</p> </li> <li> <p>FREEZESTREAMING \u2013 Forces streaming to freeze or resume.</p> </li> <li> <p>FULLMOTIONBLUR [value] \u2013 A value of -1 uses default engine setting for FullMotionBlur. A value of 0 forces Full MotionBlur off. A value of 1 forces FullmotionBlur on.</p> </li> <li> <p>LIGHTMAPSTREAMINGFACTOR [value] \u2013 Sets how aggressively lightmaps are streamed out. Smaller values (default 0.03f) mean more aggressive.</p> </li> <li> <p>LISTMISSINGPHYSICALMATRIALS \u2013 Outputs a list of all material instances without a physical material association.</p> </li> <li> <p>LISTTEXTURES \u2013 Output a list of textures.</p> </li> <li> <p>ALPHASORT \u2013 Force list to be sorted alphabetically instead of by size.</p> </li> <li> <p>NONSTREAMING \u2013 List non-streaming textures.</p> </li> <li> <p>STREAMING \u2013 list streaming textures.</p> </li> <li> <p>LOWRESTRANSLUCENCY \u2013 Toggles the use of the down sampled translucency buffer.</p> </li> <li> <p>MOVIE [command] \u2013 Controls all movies. Command can be one of the following.</p> </li> <li> <p>PAUSE \u2013 Pauses all movies.</p> </li> <li> <p>PLAY \u2013 Starts playing all movies.</p> </li> <li> <p>STOP \u2013 Stops playing all movies.</p> </li> <li> <p>MOVIEHIDE \u2013 Sets current movie hidden.</p> </li> <li> <p>MOVIESHOW \u2013 Sets current movie visible.</p> </li> <li> <p>MOVIETEST [movie] \u2013 Plays the specified movie for testing purposes, waits for it to finish, and then stops the movie.</p> </li> <li> <p>NEXTVIEWMODE \u2013 Switches to the next viewmode.</p> </li> <li> <p>NUMSTREAMEDMIPS [lodgroup] [mips] \u2013 Sets the number of mips to use for the specified texture group.</p> </li> <li> <p>PREVVIEWMODE \u2013 switches to the previous viewmode.</p> </li> <li> <p>RECOMPILESHADERS \u2013 Forces shaders to be recompiled according to one of the following:</p> </li> <li> <p>ALL \u2013 Recompiles all shaders.</p> </li> <li> <p>BPCF \u2013 Recompiles only SRG_GLOBAL_BPCF_SHADOW_LOW shaders.</p> </li> <li> <p>CHANGED \u2013 Recompiles only changes shaders.</p> </li> <li> <p>GLOBAL \u2013 Recompiles global shaders.</p> </li> <li> <p>GLOBALMISC \u2013 Recompiles only SRG_GLOBAL_MISC shaders</p> </li> <li> <p>MATERIAL [name] \u2013 Recompiles the specified material.</p> </li> <li> <p>MATERIALSHADERTYPE [type] \u2013 Recompiles materials of the specified shader type.</p> </li> <li> <p>SHADOW \u2013 Recompiles only SRG_GLOBAL_MISC_SHADOW shaders.</p> </li> <li> <p>VF [name] - Recompiles the specified vertex factory.</p> </li> <li> <p>RECOMPILEGLOBALSHADERS \u2013 Recompiles global shaders. Same as RECOMPILESHADERS GLOBAL.</p> </li> <li> <p>SETMAXMIPLEVEL [max] \u2013 Sets the largest mip level to use for lightmaps.</p> </li> <li> <p>SHADERCOMPLEXITY [max] \u2013 Sets the maximum complexity value for use with the SHADERCOMPLEXITY viewmode.</p> </li> <li> <p>SHADOWMAPSTREAMINGFACTOR \u2013 Sets how aggressively shadow maps are streamed out. Smaller values (default 0.09f) mean more aggressive.</p> </li> <li> <p>SHOW - toggle display of various items (only for clients)</p> </li> <li> <p>BOUNDS \u2013 Toggle display of actor bounds.</p> </li> <li> <p>BSP \u2013 Toggle display of BSP geometry.</p> </li> <li> <p>BSPSPLIT \u2013 Toggle display of BSP splits. Colors BSP based on model component association.</p> </li> <li> <p>CAMFRUSTUMS \u2013 Toggle display of camera frustums.</p> </li> <li> <p>COLLISION \u2013 Toggle display of collision primitives.</p> </li> <li> <p>CONSTRAINTS \u2013 Toggle display of physical constraints.</p> </li> <li> <p>COVER \u2013 Toggle display of cover locations.</p> </li> <li> <p>DECALINFO \u2013 Toggle display of debug dev information for decals (frustums, tangent axes, etc.)</p> </li> <li> <p>DECAL \u2013 Toggle display of decal actors.</p> </li> <li> <p>DYNAMICSHADOWS \u2013 Toggle display of dynamic shadows.</p> </li> <li> <p>FOG \u2013 Toggle display of fog actors.</p> </li> <li> <p>FOLIAGE \u2013 Toggle display of foliage.</p> </li> <li> <p>HITPROXIES \u2013 Toggle display of hit proxies. Draws each hit proxy with a different color.</p> </li> <li> <p>INSTANCEDSTATICMESHES \u2013 Toggle display of instanced static meshes.</p> </li> <li> <p>LENSFLARES \u2013 Toggle display of lens flares.</p> </li> <li> <p>LEVELCOLORATION \u2013 Toggle rendering all objects within the same level using the same color.</p> </li> <li> <p>MESHEDGES \u2013 Toggle display of mesh edges in filled view modes.</p> </li> <li> <p>MISSINGCOLLISION \u2013 Toggle highlighting of static meshes with collsion turned on but no collision mesh.</p> </li> <li> <p>NAVNODES \u2013 Toggles display of actors associated pathing.</p> </li> <li> <p>NONZEROEXTENT</p> </li> <li> <p>PARTICLES \u2013 Toggles display of particle geometry.</p> </li> <li> <p>PATHS \u2013 Toggles display of paths or navigation meshes.</p> </li> <li> <p>POSTPROCESS \u2013 Toggle display of post process effects.</p> </li> <li> <p>RIGIDBODY</p> </li> <li> <p>SCENCAPTURE \u2013 Toggles updating of scene capture probes.</p> </li> <li> <p>SHADOWFRUSTUMS \u2013 Toggle display of un-occluded shadow frustums.</p> </li> <li> <p>SKELETALMESHES - Toggle display of skeletal mesh geometry.</p> </li> <li> <p>SKELMESHES \u2013 Toggle display of skeletal mesh geometry.</p> </li> <li> <p>SPEEDTREES \u2013 Toggle display of speedtree geometry.</p> </li> <li> <p>SPLINES \u2013 Toggles display of splines.</p> </li> <li> <p>SPRITES \u2013 Toggle display of sprite components.</p> </li> <li> <p>STATICMESHES \u2013 Toggle display of static mesh geometry.</p> </li> <li> <p>TERRAIN \u2013 Toggle display of terrain geometry.</p> </li> <li> <p>TERRAINPATCHES \u2013 Toggle display of terrain patches. Draws an outline around each patch.</p> </li> <li> <p>TRANSLUCENCYDOF \u2013 Toggle display of translucency blur factor.</p> </li> <li> <p>UNLITTRANSLUCENCY \u2013 Toggle display of unlit translucency.</p> </li> <li> <p>VOLUMES \u2013 Toggles display of volumes.</p> </li> <li> <p>ZEROEXTENT</p> </li> <li> <p>SHOWMATERIALDRAWEVENTS \u2013 Toggles draw events emission.</p> </li> <li> <p>SHOWMIPLEVELS \u2013 Toggles the use of solid colors in place of lightmaps to visualize mip levels.</p> </li> <li> <p>TEXTUREDEFRAG \u2013 Defragments the texture pool.</p> </li> <li> <p>TEXTUREDENSITY [min] [ideal] [max] \u2013 Sets the minimum, ideal, and maximum texture density values for use with the TEXTUREDNEISTY viewmode.</p> </li> <li> <p>SHOWSELECTEDLIGHTMAP \u2013 Toggles whether to visualize the lightmap selected by the debug camera.</p> </li> <li> <p>TOGGLEAO \u2013 Toggles ambient occlusion post process.</p> </li> <li> <p>TOGGLECOLLISIONOVERLAY \u2013 Toggles rendering of the collision mesh overlay for terrain.</p> </li> <li> <p>TOGGLEMINDISTORTION \u2013 Toggles whether distortion s applied to minimal screen extents or entire screen.</p> </li> <li> <p>TOGGLEMINTRNSLUCENCY \u2013 Toggles whether translucent resolve to the raw format or not.</p> </li> <li> <p>TOGGLEOCCLUSION \u2013 Toggles use of occlusion.</p> </li> <li> <p>TOGGLESCENE \u2013 Toggle scene color post process.</p> </li> <li> <p>TOGGLEUI \u2013 Toggles updating and display of the UI.</p> </li> <li> <p>TRACKTEXTURE [name] \u2013 Adds the texture name into the streaming system to track all textures containing that name.</p> </li> <li> <p>UNTRACKTEXTURE [name] \u2013 Removes the texture name from texture tracking.</p> </li> <li> <p>VIEWMODE [value] - set the render mode</p> </li> <li> <p>BRUSHWIREFRAME \u2013 Renders scene in a wireframe view showing brush edges.</p> </li> <li> <p>LIGHTCOMPLEXITY \u2013 Renders scene using a special shader that displays the complexity of the lighting on (number of dynamic lights affecting) each surface using specific colors to denote the number of lights.</p> </li> <li> <p>LIGHTINGONLY \u2013 Renders scene using only the lighting information on the geometry.</p> </li> <li> <p>DETAILLIGHTING - Renders scene using a neutral material affected by lighting with normals.</p> </li> <li> <p>LIGHTMAPDENSITY \u2013 Renders scene using a special shader that displays the density of texels for the lightmap on each surface.</p> </li> <li> <p>LITLIGHTMAPDENSITY - Renders scene fully lit using a special shader that displays the density of texels for the lightmap on each surface. This is essentially a combination of the LIGHTMAPDENSITY and LIGHTINGONLY viewmodes.</p> </li> <li> <p>SHADERCOMPLEXITY \u2013 Renders scene using a special shader that displays the complexity of the material being used by each surface using specific colors to denote ranges of shader instructions.</p> </li> <li> <p>TEXTUREDENSITY \u2013 Renders scene using a special shader that displays the density of texels for the diffuse channel on each surface using specific colors to indicate the density.</p> </li> <li> <p>UNLIT \u2013 Renders scene with flat shading, i.e., no lighting.</p> </li> <li> <p>WIREFRAME \u2013 Renders scene in a wireframe view.</p> </li> </ul>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-console-commands/#texture-mip-map-fading-commands","title":"Texture Mip-Map Fading Commands","text":"<ul> <li>TOGGLEMIPFADE - Toggles all texture fading on/off.</li> <li>PAUSERENDERCLOCK - Pauses/unpauses the renderthread clock that's used by texture fading. Pausing it will freeze the fading. Any new textures that are streamed in will then be low-res (not fading in). Then you can togglemipfade or unpause the clock to see the difference (and measure performance).</li> </ul>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-console-commands/#physics-commands","title":"Physics Commands","text":"<ul> <li> <p>DUMPAWAKE \u2013 Output list of all awake physical bodies.</p> </li> <li> <p>MESHSCALES \u2013 Outputs scale values of all static meshes to the log file.</p> </li> <li> <p>NXDUMP \u2013 Output all physics information to an XML file.</p> </li> <li> <p>NXDUMPMEM \u2013 Output all PhysX memory allocations to the log.</p> </li> <li> <p>NXSTATS \u2013 Enables output of all physics statistics.</p> </li> <li> <p>NXVIS \u2013 Enable visualization of physics simulation.</p> </li> <li> <p>PHYSX_CLEAR_ALL \u2013 Clear all currently enabled visualization flags.</p> </li> <li> <p>ACTOR_AXES \u2013 Toggle vis of actor axes.</p> </li> <li> <p>BODYAXES \u2013 Toggle vis of bodies\u2019 axes</p> </li> <li> <p>BODY_ANGULAR_VELOCITY \u2013 Toggle vis of angular velocities of physical bodies.</p> </li> <li> <p>BODY_JOINT_GROUPS \u2013 Toggle vis of joint groups.</p> </li> <li> <p>BODY_LINEAR_VELOCITY \u2013 Toggle vis of linear velocities of physical bodies.</p> </li> <li> <p>CCD \u2013 Toggle vis of CCD skeletons.</p> </li> <li> <p>CCDTESTS \u2013 Toggle vis of CCD tests.</p> </li> <li> <p>CLOTH_ATTACHMENT \u2013 Toggle vis of cloth attachments.</p> </li> <li> <p>CLOTH_COLLISIONS \u2013 Toggle vis of cloth collisions.</p> </li> <li> <p>CLOTH_MESH \u2013 Toggle vis of cloth mesh wireframe.</p> </li> <li> <p>CLOTH_SELFCOLLISIONS \u2013 Toggle vis of cloth self collisions.</p> </li> <li> <p>CLOTH_SLEEP \u2013 Toggle vis of overall cloth sleeping.</p> </li> <li> <p>CLOTH_SLEEPVERTEX \u2013 Toggle vis of vertex sleeping.</p> </li> <li> <p>CLOTH_TEARABLE_VERTICES \u2013 Toggle vis of tearable vertices.</p> </li> <li> <p>CLOTH_TEARING \u2013 Toggle vis of cloth tearing.</p> </li> <li> <p>CLOTH_VALIDBOUNDS \u2013 Toggle vis of valid bounds for cloth.</p> </li> <li> <p>CLOTH_WORKPACKETS \u2013 Toggle vis of clustering for the PPU simulation.</p> </li> <li> <p>COLLISION \u2013 Toggle vis of physics simplified collision geometry.</p> </li> <li> <p>COLLISION_AABBS \u2013 Toggle vis of axis-aligned bounds in world space.</p> </li> <li> <p>COLLISION_AXES \u2013 Toggle vis of collision geometry axes.</p> </li> <li> <p>COLLISION_COMPOUNDS \u2013 Toggle vis of compound bounds.</p> </li> <li> <p>COLLISION_DYNAMIC \u2013 Toggle vis of dynamic pruning structures.</p> </li> <li> <p>COLLISION_EDGES \u2013 Toggle vis of collision mesh active edges.</p> </li> <li> <p>COLLISION_FNORMALS \u2013 Toggle vis of collision mesh and face normals.</p> </li> <li> <p>COLLISION_FREE \u2013 Toggle vis of \u201cfree\u201d pruning structures.</p> </li> <li> <p>COLLISION_SPHERES \u2013 Toggle vis of bounding spheres.</p> </li> <li> <p>COLLISION_STATIC \u2013 Toggle vis of static pruning structures.</p> </li> <li> <p>COLLISON_VNORMALS \u2013 Toggle vis of collision mesh and vertex normals.</p> </li> <li> <p>CONTACTERROR \u2013 Toggle vis of contact errors.</p> </li> <li> <p>CONTACTFORCE \u2013 Toggle vis of contact forces.</p> </li> <li> <p>CONTACTPOINT \u2013 Toggle vis of contact points.</p> </li> <li> <p>CONTACTS \u2013 Toggle vis of contact normals.</p> </li> <li> <p>FLUID_BOUNDS \u2013 Toggle vis of fluid emitter AABB bounds.</p> </li> <li> <p>FLUID_DRAINS \u2013 Toggle vis of fluid emitter drain shapes.</p> </li> <li> <p>FLUID_DYN_COLLISION \u2013 Toggle vis of fluid emitter dynamic collisions.</p> </li> <li> <p>FLUID_EMITTERS \u2013 Toggle vis of fluid emitters.</p> </li> <li> <p>FLUID_KERNEL_RADIUS \u2013 Toggle vis of fluid emitter kernel radius.</p> </li> <li> <p>FLUID_MESH_PACKETS \u2013 Toggle vis of fluid emitter available mesh packets.</p> </li> <li> <p>FLUID_MOTION_LIMIT \u2013 Toggle vis of fluid emitter motion limits.</p> </li> <li> <p>FLUID_PACKET_DATA \u2013 Toggle vis of fluid emitter packet data.</p> </li> <li> <p>FLUID_PACKETS \u2013 Toggle vis of fluid emitter packets.</p> </li> <li> <p>FLUID_POSITION - -Toggle vis of fluid emitter particle positions.</p> </li> <li> <p>FLUID_STC_COLLISION \u2013 Toggle vis of fluid emitter static collisions.</p> </li> <li> <p>FLUID_VELOCITY \u2013 Toggle vis of fluid emitter particle velocities.</p> </li> <li> <p>FORCEFIELDS \u2013 Toggle vis of force fields.</p> </li> <li> <p>JOINTLIMITS \u2013 Toggle vis of joint limits.</p> </li> <li> <p>JOINTLOCALAXES \u2013 Toggle vis of joint local axes.</p> </li> <li> <p>JOINTWORLDAXES \u2013 Toggle viz of joint world axes.</p> </li> <li> <p>MASSAXES \u2013 Toggle vis of bodies\u2019 mass axes. Draws sleeping bodies in black, awake bodies in white, and sleeping bodies that are also part of a sleeping group in red.</p> </li> <li> <p>SOFTBODY_ATTACHMENTS \u2013 Toggle vis of soft body attachments.</p> </li> <li> <p>SOFTBODY_COLLISIONS \u2013 Toggle vis of soft body rigid body collisions.</p> </li> <li> <p>SOFTBODY_MESH \u2013 Toggle vis of soft body meshes.</p> </li> <li> <p>SOFTBODY_SLEEP \u2013 Toggle vis of soft body overall sleeping.</p> </li> <li> <p>SOFTBODY_SLEEP_VERTEX \u2013 Toggle vis of soft body per vertex sleeping.</p> </li> <li> <p>SOFTBODY_TEARABLE_VERTICES \u2013 Toggle vis of soft body tearable vertices.</p> </li> <li> <p>SOFTBODY_TEARING \u2013 Toggle vis of soft body tearing.</p> </li> <li> <p>SOFTBODY_VALIDBOUNDS \u2013 Toggle vis of soft body valid bounds.</p> </li> <li> <p>SOFTBODY_WORKPACKETS \u2013 Toggle vis of soft body clustering for the PPU simulation.</p> </li> <li> <p>WORLDAXES \u2013 Toggle vis of world axes</p> </li> <li> <p>NXVRD \u2013 Use remote debugger</p> </li> <li> <p>CONNECT [ip] \u2013 Connect to the remote debugger using specified ip address or localhost if none.</p> </li> <li> <p>DISCONNECT \u2013 Disconnect from the remote debugger.</p> </li> </ul>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-console-commands/#audio-commands","title":"Audio Commands","text":"<ul> <li>AUDIO FLUSH TRUE - flush all sound buffers</li> <li>DISABLELPF \u2013 Disables the low pass filter on all sources for testing.</li> <li>ISOLATEDRYAUDIO \u2013 Removes reverb to isolate the dry audio.</li> <li>ISOLATEREVERB \u2013 Removes the dry audio to isolate the reverb.</li> <li>LISTAUDIOCOMPONENTS \u2013 Outputs a list of all audio components.</li> <li>LISTSOUNDCLASSES \u2013 Outputs a list of loaded sounds collated by class.</li> <li>LISTSOUNDCLASSVOLUMES \u2013 Outputs a list of all the volume and pitch for each sound class.</li> <li>LISTSOUNDDURATIONS \u2013 Outputs a list of all sounds waves and their durations.</li> <li>LISTSOUNDMODES \u2013 Outputs a list of all sound modes.</li> <li>LISTSOUNDS \u2013 Outputs a list of all loaded sounds and their memory footprints.</li> <li>LISTWAVES \u2013 Outputs a list of wave instances and whether they have a source.</li> <li>MODIFYSOUNDCLASS [soundclass] [VOL=volume] \u2013 Modifies the specified sound class with the given volume.</li> <li>PLAYSOUNDCUE \u2013 Plays an arbitrary sound cue.</li> <li>PLAYSOUNDWAVE \u2013 Plays an arbitrary sound wave.</li> <li>RESETSOUNDSTATE \u2013 Resets all volumes to their default values and removes all test filters.</li> <li>SETSOUNDMODE [mode] \u2013 Sets the sound mode to the specified mode.</li> <li>SOUNDTEMPLATEINFO \u2013 Outputs info about each unique sound.</li> <li>TESTFEBLEED \u2013 Sets the low frequency effect bleed to maximum on all audio sources for testing.</li> <li>TESTLPF \u2013 Sets the low pass filter to maximum on all audio sources for testing.</li> <li>TESTSTEREOBLEED \u2013 Sets stereo bleed to maximum on all audio sources for testing.</li> </ul>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-console-commands/#networking-commands","title":"Networking Commands","text":"<ul> <li>CRACKURL - breaks down passed URL and parameters<sup>?</sup> to the engine for the map/game and displays all parameters</li> <li>PACKAGEMAP \u2013 Outputs the packagemap for all open network connections to the log fil.</li> <li>SOCKETS \u2013 Outputs a list of all open network connections to the log file.</li> </ul>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-console-commands/#still-captures-and-demo-recording-commands","title":"Still Captures and Demo Recording Commands","text":"<p>More information about this can be found in the [DemoRecording] document.</p> <ul> <li>BUGSCREENSHOT \u2013 Takes a screenshot of a bug.</li> <li>DEMOPLAY - Play a previously recorded demo.</li> <li>DEMOREC - Record a demo for later playback.</li> <li>DEMOSTOP - Stop demo playback\\recording.</li> <li>SHOT / SCREENSHOT \u2013 Takes a screenshot at the current screen resolution.</li> <li>TILEDSHOT [factor] \u2013 Takes a screenshot with the current resolution multiplied by the specified factor.</li> </ul>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-console-commands/#movie-capture","title":"Movie Capture","text":"<p>More information about this can be found in the MovieCapture document.</p> <ul> <li>STARTMOVIECAPTURE \u2013 Start in-game movie capture.</li> <li>STOPMOVIECAPTURE - Stop in-game movie capture.</li> </ul>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-console-commands/#gameplay-commands","title":"Gameplay Commands","text":"<ul> <li>SAVEGAME - tells the engine to save the current game state. See SavingAndLoadingGames<sup>?</sup> for more info.</li> <li>SAY - GUI server only</li> </ul>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-console-commands/#navigation-and-pathfinding-commands","title":"Navigation and Pathfinding Commands","text":"<ul> <li> <p>ADDLONGREACHSPECS [option] \u2013 Add long range reach specs. Option is:</p> </li> <li> <p>NUMPATHS= - Number of paths to add.</p> </li> <li> <p>BUILDCOVER [option] \u2013 Generates fire links and special move flags after reach specs have been added. Option is:</p> </li> <li> <p>FROMDEFINEPATHS= - Whether to use defined paths or not.</p> </li> <li> <p>BUILDNETWORKIDS \u2013 Builds the network IDs for the navigation points.</p> </li> <li> <p>DEFINEPATHS [options] \u2013 Clears all paths and then rebuilds them. Options are:</p> </li> <li> <p>REVIEWPATHS= - Causes paths to be reviewed if any were created.</p> </li> <li> <p>SHOWMAPCHECK= - Causes the Map Check dialog to be shown after the paths have been built.</p> </li> <li> <p>UNDEFINEPATHS= - Causes paths to be undefined before building.</p> </li> <li> <p>FINISHPATHBUILD \u2013 Performs finalization and cleanup for path building process.</p> </li> <li> <p>GENERATENAVMESH \u2013 Rebuilds the navigation mesh.</p> </li> <li> <p>NAVOCTREE [options] \u2013 Takes one of the following options:</p> </li> <li> <p>STATS \u2013 Outputs stats about the navigation octree.</p> </li> <li> <p>FIND \u2013 Finds the specified node in the octree.</p> <ul> <li>NAME= - Name of the node to find.</li> </ul> </li> <li> <p>POSTDEFINEPATHS \u2013 Calls PostPathBuild on all Kismet sequence objects.</p> </li> <li> <p>PREDEFINEPATHS \u2013 Calls PrePathbuild on all Kismet sequence objects.</p> </li> <li> <p>SETPATHCOLLISION [option] \u2013 Enables or disables path collision. Option is:</p> </li> <li> <p>ENABLED= - Whether to enable or disable path collsiions.</p> </li> </ul>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-console-commands/#user-interface-commands","title":"User Interface Commands","text":"<ul> <li> <p>DEBUGUIPREFAB [object] \u2013 Output information about the specified UI prefab object.</p> </li> <li> <p>SHOWINPUTHANDLERS \u2013 Output input handlers for a specific key in a specific UIScene.</p> </li> <li> <p>SCENE= - Specifies a UIScene to search within.</p> </li> <li> <p>KEY= - Specifies a key to look for subscribers for.</p> </li> <li> <p>SHOWUNRESOLVEDPOSITIONS \u2013 Output any objects with outdated positions within a specific UIScene.</p> </li> <li> <p>SCENE= - Specifies a UIScene to search within.</p> </li> <li> <p>TOGGLEDEBUGINPUT [true/false] - display debug info then (CTRL-ALT-D to toggle displaying the info; then CTRL-F to toggle displaying the focused widget).</p> </li> </ul>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-console-commands/#miscellaneous-commands","title":"Miscellaneous Commands","text":"<ul> <li> <p>GET [class] [property] - returns the default value of a class property</p> </li> <li> <p>GETALL [class] [property] - returns the value property for all instantiated classes</p> </li> <li> <p>DISPLAYALL / DISPLAYALLSTATE - Identical to \"getall\", but displays output on the screen in realtime, similarly to stats.</p> </li> <li> <p>DISPLAY [object] [property] - Displays only the specified property for the specified single object. Only enough of the outer chain is required to make the object uniquely identifiable.</p> </li> <li> <p>DISPLAYCLEAR - Clears all display* output.</p> </li> <li> <p>DLE \u2013 Outputs a list of all disabled dynamic light environments.</p> </li> <li> <p>VERIFYCOMPONENTS \u2013 Iterates through all components to verify integrity.</p> </li> <li> <p>LISTANIMSETS \u2013 Output a list of animation sets</p> </li> <li> <p>ALPHASORT \u2013 Sort list alphabetically.</p> </li> <li> <p>ANIMSEQSTATS \u2013 Outputs animation sequence statistics.</p> </li> <li> <p>LISTANIMSETS \u2013 Output a list of animation sets.</p> </li> <li> <p>ALPHASORT \u2013 Sort list alphabetically.</p> </li> <li> <p>LISTANIMTREES \u2013 Outputs a list of animation trees</p> </li> <li> <p>ALPHASORT \u2013 Sort list alphabetically.</p> </li> <li> <p>LISTMATINEEANIMSETS \u2013 Output a list of animation sets used by Matinee in the current level.</p> </li> <li> <p>ALPHASORT \u2013 Sort list alphabetically.</p> </li> <li> <p>SET - this one is the most powerful of them all. It takes as the first parameter string a class name, the second string a variable name, and the third string, a value. All objects of the given class (including subclasses) will have the given variable set to the given value. For example \"set Pawn CollisionRadius 200\" will make all pawns have a collision radius of 200. (See PawnTricksAndTips<sup>?</sup> for more details). In v3323 the set command has limited functionality when using online, this is to limit cheating.</p> </li> <li> <p>SETNOPEC \u2013 Same as SET command but does not fire off Pre/Post Edit Change notifications.</p> </li> <li> <p>SHOWHOTKISMET \u2013 Outputs the top 10 most used Kismet sequence ops.</p> </li> </ul>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-console-commands/#system-settings-commands","title":"System Settings Commands","text":"<p>The System Settings commands allow you to change the settings as described by the SystemSettings document, which are normally set by the [Application Compatibility] system.</p> <ul> <li> <p>SCALE [scale command] - where [scale command] is one of:</p> </li> <li> <p>ADJUST - enable/disable using the Xbox \"shoulder\" buttons to bind to SCALE DECR and SCALE INCR</p> </li> <li> <p>DECR - decrement the ScreenPercentage setting</p> </li> <li> <p>DUMP - dump current system settings to the log</p> </li> <li> <p>DUMPINI - dump the INI system settings to the log</p> </li> <li> <p>INCR - increment the ScreenPercentage setting</p> </li> <li> <p>LEVEL [0-5] - set one of the Application Compatibility levels, from 0 to 5.</p> </li> <li> <p>LOWEND - assume a very low end list of settings</p> </li> <li> <p>HIGHEND - assume a very high end list of settings</p> </li> <li> <p>RESET - reload the system settings from the INI file</p> </li> <li> <p>SET [setting] [value] - set a specific setting (listed in the SystemSettings document) to a certain value</p> </li> <li> <p>TOGGLE [setting] - toggle a boolean setting</p> </li> </ul>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-console-commands/#mobile-commands","title":"Mobile Commands","text":"<p>These commands only work on mobile platforms (specifically iOS)</p> <ul> <li> <p>CALIBRATETILT - Recalibrates the device's tilt based on the current orientation of the device.</p> </li> <li> <p>MOBILE/IPHONE [command] - where command is one of:</p> </li> <li> <p>DISABLEROTATION - Disables the view autorotation when the user rotates the view.</p> </li> <li> <p>ENABLEROTATION - Enables the view autorotation when the user rotates the view.</p> </li> <li> <p>DISABLESLEEP - Keeps the screen of the device from going to sleep.</p> </li> <li> <p>ENABLESLEEP - Lets the screen of the device to go to sleep.</p> </li> <li> <p>ABOUT [url] - Loads a web page in the platform's web browser. Uses the AboutURL config setting in MobileEngine.ini and replaces the `~ with the url specified int he command.</p> </li> <li> <p>SAVESETTING [key] [value] - Saves a key/value string pair to the user's settings.</p> </li> <li> <p>LOADSETTING [key] - Loads a value from the user's settings for the given key.</p> </li> <li> <p>PLAYSONG [song] - Plays the given mp3 song (file name without path or extension) in hardware.</p> </li> <li> <p>STOPSONG - Stops the mp3 song currently playing in hardware.</p> </li> <li> <p>APPEXIT - Exits the app on the device.</p> </li> </ul>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-console-commands/#editor-specific-commands","title":"Editor-Specific Commands","text":"<p>See the Editor Console Commands page for more commands that are used only in the editor.</p>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-editor-console-commands/","title":"Udk editor console commands","text":"<p>https://docs.unrealengine.com/udk/Three/EditorConsoleCommands.html</p>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-editor-console-commands/#unreal-editor-console-commands","title":"Unreal Editor Console Commands","text":"<ul> <li> <p>Unreal Editor Console Commands</p> </li> <li> <p>Overview</p> </li> <li> <p>Command List</p> </li> <li> <p>General Commands</p> </li> <li> <p>Actor Commands</p> </li> <li> <p>Editor Mode Commands</p> </li> <li> <p>Map Commands</p> </li> <li> <p>CSG Brush Commands</p> </li> <li> <p>Static Mesh Commands</p> </li> <li> <p>CSG Surface Commands</p> </li> </ul>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-editor-console-commands/#overview","title":"Overview","text":"<p>Console commands are string-based commands that you can run in the game or in the editor. They are also known as exec commands.</p> <p>To use the editor console commands, type them into the editor command line input box or the command line of the editor log window, and press Enter. They can perform most of the common functions used when editing maps in the editor.</p> <p>Lists of commands can also be stored in text files in the system directory and executed by typing exec [filename] at the console.</p>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-editor-console-commands/#command-list","title":"Command List","text":"<p>In addition to the general engine console commands, the following is a list of engine supported editor console commands...</p>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-editor-console-commands/#general-commands","title":"General Commands","text":"<ul> <li> <p>BAKEANIMSETS \u2013 Iterates over all animation sets used in the level, creates copies of them, removes all unused animation sequences in the duplicates, and assigns the duplicates in place of the originals.</p> </li> <li> <p>BUGITGO [location] [rotation] \u2013 Moves all viewport cameras to the given location with the given rotation.</p> </li> <li> <p>BUILDLIGHTING \u2013 Rebuilds the lighting for the current map.</p> </li> <li> <p>CAMERA \u2013 General Camera commands</p> </li> <li> <p>ALIGN \u2013 Focuses all of the viewport cameras on selected actors</p> <ul> <li> <p>NAME= - Focuses all of the viewport cameras on the actor with the given name.</p> </li> <li> <p>ACTIVEVIEWPORTONLY \u2013 Only focuses the active viewport.</p> </li> </ul> </li> <li> <p>SNAP \u2013 Snaps the perspective viewport camera to the first selected actor.</p> </li> <li> <p>CHECKSOUNDS \u2013 Outputs information about all soundwaves marked by using the TAGSOUNDS command.</p> </li> <li> <p>CLASS SPEW [PACKAGE=package] \u2013 Exports all the scripts in the given package to the ExportedScript directory.</p> </li> <li> <p>CLEANBSPMATERIALS \u2013 Clears null BSP materials.</p> </li> <li> <p>CLEANUPOLDBUILDINGS \u2013 Rebuild all ProcBuildings in the map.</p> </li> <li> <p>CLEANUPOLDBUILDINGTEXTURES \u2013 Fixes up textures and materials associated with ProcBuildings with the wrong flags set.</p> </li> <li> <p>CTRLTAB \u2013 Brings up the Ctrl + Tab menu.</p> </li> <li> <p>DELETE \u2013 Deletes the selected actors.</p> </li> <li> <p>DETLIGHT - Toggles deterministic lighting mode for Lightmass builds.</p> </li> <li> <p>DUMPMODELGUIDS \u2013 Outputs the GUID of all models.</p> </li> <li> <p>DUMPPRIMITIVESTATS \u2013 Outputs a CSV file containing stats about primitives used in the level.</p> </li> <li> <p>DUMPSELECTION \u2013 Outputs lists of all selected actors and all selected objects.</p> </li> <li> <p>DUMPTHUMBNAILSTATS [option] \u2013 Outputs number of thumbnails in each package. Option can be:</p> </li> <li> <p>SHOWIMAGEDATA \u2013 Include data about thumbnail images.</p> </li> <li> <p>DUPLICATE \u2013 Duplicates the selected actors.</p> </li> <li> <p>EDCALLBACK \u2013 General editor callbacks</p> </li> <li> <p>FITTEXTURETOSURFACE \u2013 Adjusts the UVs of the selected surface(s) so that the material applied fits the surface(s).</p> </li> <li> <p>SELECTEDPROPS \u2013 Opens the Properties Window for the selected actor(s).</p> </li> <li> <p>SURFPROPS \u2013 Opens the Surface Properties Window for the selected surface(s).</p> </li> <li> <p>EDIT \u2013 General editing commands</p> </li> <li> <p>COPY \u2013 Copy the selection to the clipboard.</p> </li> <li> <p>CUT \u2013 Cut the selection to the clipboard.</p> </li> <li> <p>PASTE [TO=location] \u2013 Paste clipboard contents into the map. The location can be:</p> <ul> <li> <p>HERE \u2013 Pastes the clipboard contents to the mouse location.</p> </li> <li> <p>ORIGIN \u2013 Pastes the clipboard contents to the world origin.</p> </li> </ul> </li> <li> <p>EXEFILE [filename] \u2013 Execute a file containing a list of commands.</p> </li> <li> <p>EXPORTLOC [package] \u2013 Exports and generates the localization file for the given package.</p> </li> <li> <p>FARPLANE [DIST=dist] \u2013 Sets the far plane for rendering to the given distance.</p> </li> <li> <p>FIXBUILDINGLODS [building] \u2013 Fixes the LODs for the given ProcBuilding.</p> </li> <li> <p>FIXUPPROCBUILDINGLODQUADSAFTERSAVE \u2013 Fixes material pointers on ProcBuildings after saving the map.</p> </li> <li> <p>FORCEREALTIMECOMPRESSION [Package=package] \u2013 Forces the use of real-time compression on all sound waves within the given package.</p> </li> <li> <p>INSTCOMPOUNT \u2013 Outputs list of all InstancedStaticMeshComponents and how many instances of each are used.</p> </li> <li> <p>JUMPTO [location] \u2013 Moves all viewport cameras to the given location.</p> </li> <li> <p>LIGHTMASSDEBUG \u2013 Toggles whether Lightmass is launched automatically or must be launched manually.</p> </li> <li> <p>LIGHTMASSSTATS \u2013 Toggles whether participating Lightmass agents report detailed stats to the log.</p> </li> <li> <p>LMDEBUGMAT \u2013 Toggles whether Lightmass will output BMP images for each generated material property sample to the Screenshots\\Materials directory.</p> </li> <li> <p>LMDEBUGPAD \u2013 Toggles debug padding of lightmaps by Lightmass.</p> </li> <li> <p>LMIMM - Toggles whether mappings are imported, but not processed, immediately as they complete.</p> </li> <li> <p>LMIMMEDIATE \u2013 Toggles whether mappings are imported, but not processed, immediately as they complete.</p> </li> <li> <p>LMIMP \u2013 Toggles whether mappings are processed as they are imported. Requires immediate mode to be enabled.</p> </li> <li> <p>LMPADDING \u2013 Toggles padding of mappings by Lightmass.</p> </li> <li> <p>LMSORT \u2013 Toggles whether mappings are sorted by texel cost.</p> </li> <li> <p>OBJ \u2013 General object commands</p> </li> <li> <p>EXPORT [PACKAGE=package] [TYPE=type] [FILE=file] [NAME=name] \u2013 Export the object of the given type with the given name to the specified file.</p> </li> <li> <p>RENAME [OLDPACKAGE=oldpackage] [OLDGROUP=oldgroup] [OLDNAME=oldname] [NEWPACKAGE=newpackage] [NEWGROUP=newgroup] [NEWNAME=newname] \u2013 Renames the object matching the old package, old group, and old name to the new package, new group, and new name.</p> </li> <li> <p>SAVEPACKAGE [FILE=file] [PACKAGE=package] \u2013 Save the given package to the specified file.</p> </li> <li> <p>PARTICLE \u2013 General particle commands</p> </li> <li> <p>RESET \u2013 Restarts a particle system or particle systems in the level.</p> <ul> <li> <p>ALL \u2013 Resets all particle systems.</p> </li> <li> <p>SELECTED \u2013 Resets only the selected particle system.</p> </li> </ul> </li> <li> <p>PIVOT \u2013 General pivot commands</p> </li> <li> <p>CENTERSELECTION \u2013 Moves pivot of the selection to the center point of all selected actors.</p> </li> <li> <p>HERE \u2013 Moves the pivot of the selection to mouse location.</p> </li> <li> <p>SNAPPED \u2013 Moves the pivot of the selection to the mouse location, but snapped to the grid.</p> </li> <li> <p>PREFAB SELECTACTORSINPREFAB \u2013 Selects all the actors that make up the selected prefab instance.</p> </li> <li> <p>PROCBUILDINGUPDATE [building] \u2013 Updates the given ProcBuilding.</p> </li> <li> <p>PRUNEANIMSETS \u2013 Iterates over all used animation sets and trims sequences off of the beginning or ending which are not used. Should only be used after running BAKEANIMSETS.</p> </li> <li> <p>QUIT_EDITOR \u2013 Exits the editor.</p> </li> <li> <p>REMOVECOOKEDPS3AUDIO [PACKAGE=package] \u2013 Removes all cooked PS3 audio data for sound waves in the given package.</p> </li> <li> <p>SAVEBRUSHASCOLLISION \u2013 Saves the builder brush geometry as the currently selected static mesh\u2019s collision geometry.</p> </li> <li> <p>SELECT \u2013 General selection commands</p> </li> <li> <p>BUILDERBRUSH \u2013 Selects the builder brush.</p> </li> <li> <p>NONE \u2013 Deselects all actors.</p> </li> <li> <p>SELECTDYNAMIC \u2013 Selects all actors which have terrain, static mesh, or skeletal mesh components and are not set up to use static or pre-computed lighting and are visible in-game.</p> </li> <li> <p>SELECTNAME [NAME=name] \u2013 Select actors with names matching the given name.</p> </li> <li> <p>SETDETAILMODE [MODE=mode] \u2013 Sets the detail mode to be used for the selected actors.</p> </li> <li> <p>SETDETAILMODEVIEW [MODE=mode] \u2013 Set the detail mode to be used for rending.</p> </li> <li> <p>SETREPLACEMENT [COMPONENT=component] [CLASS=class] \u2013 Replaces the components of the selected actors with the specified component (mandatory). If a class is specified, only components matching that class are replaced.</p> </li> <li> <p>SETSHADOWPARENT \u2013 Forcibly sets the first selected dynamic actor as the shadow parent of all remaining selected dynamic actors. Requires at least 2 dynamic actors to be selected.</p> </li> <li> <p>SKELETALMESH \u2013 General skeletal mesh commands</p> </li> <li> <p>CHARBITS [OFFSET=offset] [ORIENTATION=orientation] \u2013 Sets the offset and orientation for all skeletal meshes in the currently selected packages. (Only works with Generic Browser)</p> </li> <li> <p>SWARMDISTRIBUTION \u2013 Toggles whether to enable Swarm distribution for jobs.</p> </li> <li> <p>TAGSOUNDS \u2013 Marks all sound waves for debugging purposes/</p> </li> <li> <p>TOGGLEDETERMINISTICLIGHTING \u2013 Toggles deterministic lighting mode for Lightmass builds.</p> </li> <li> <p>TRANSACTION \u2013 Undo and redo commands</p> </li> <li> <p>REDO \u2013 Performs the last undone operation.</p> </li> <li> <p>UNDO \u2013 Undoes the last performed operation.</p> </li> <li> <p>UNMOUNTALLFACEFX \u2013 Unmounts all FaceFX assets unless currently open in the FaceFX editor.</p> </li> </ul>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-editor-console-commands/#actor-commands","title":"Actor Commands","text":"<ul> <li> <p>ACTOR \u2013 General actor commands</p> </li> <li> <p>ADD [CLASS=class] [SNAP=snap] \u2013 Adds a new actor of the given class to the map with optional snapping.</p> </li> <li> <p>ALIGN \u2013 Snaps all vertices to the grid.</p> </li> <li> <p>MOVETOGRID \u2013 Snaps all selected actors to the nearest grid point.</p> </li> <li> <p>ORIGIN \u2013 Moves selected actors to the world origin.</p> </li> <li> <p>SNAPTOFLOOR \u2013 Snaps the selected actors to the nearest surface directly below them.</p> </li> <li> <p>BAKEPREPIVOT \u2013 Sets the current pivot location as the PrePivot of all selected actors.</p> </li> <li> <p>CREATE_BV_BOUNDINGBOX [SNAPTOGRID=snap] \u2013 Creates a blocking volume from the bounding box of the selected static meshes with optional snapping.</p> </li> <li> <p>CREATE_BV_CONVEXVOLUME [SNAPTOGRID=snap] [NORMALTOLERANCE=tolerance] [NLIMITTX=limitx] [NLIMITY=limity] [NLIMITZ=limitz] \u2013 Creates a blocking volume from a convex volume containing the selected static meshes using the given normal tolerance and limits with optional snapping.</p> </li> <li> <p>DELETE \u2013 Deletes selected actors.</p> </li> <li> <p>DESELECT \u2013 Deselects everything in the world.</p> </li> <li> <p>DUPLICATE \u2013 Creates copies of all selected actors.</p> </li> <li> <p>FIND KISMET \u2013 Find the selected actors in Kismet.</p> </li> <li> <p>HIDE \u2013 Hides actors in the editor.</p> </li> <li> <p>SELECTED \u2013 Only hides selected actors.</p> <ul> <li>STARTUP \u2013 Hides selected actors at startup.</li> </ul> </li> <li> <p>UNSELECTED \u2013 Only hides the unselected actors.</p> </li> <li> <p>LEVELCURRENT \u2013 Makes the level containing the selected actors the current level.</p> </li> <li> <p>LEVELGRIDVOLUMECURRENT \u2013 Sets the level grid volume of the selected actors as the current level grid volume if all selected actors belong to the same level grid volume.</p> </li> <li> <p>LINKSELECTED \u2013 Links the selected actors if they implement the LinkSelection interface.</p> </li> <li> <p>MIRROR [scaleVector] \u2013 Mirror the selected actors applying the given scale.</p> </li> <li> <p>MOVETOCURRENT - Moves the selected actors to the current level.</p> </li> <li> <p>REPLACE \u2013 Replaces selection.</p> </li> <li> <p>BRUSH \u2013 Replace the selected brushes with the default brush.</p> </li> <li> <p>CLASS= - Replaces the selected actors with an instance of the given class.</p> </li> <li> <p>RESET \u2013 Resets certain properties of selected actors.</p> <ul> <li> <p>ALL - Resets location, pivot, rotation, and scale of selected actors.</p> </li> <li> <p>LOCATION \u2013 Resets the location of the selected actors.</p> </li> <li> <p>PIVOT \u2013 Resets the pivot of the selected actors.</p> </li> <li> <p>ROTATION \u2013 Resets the rotation of the selected actors.</p> </li> <li> <p>SCALE \u2013 Resets the scale of the selected actors.</p> </li> </ul> </li> <li> <p>SELECT \u2013 Actor selection commands.</p> </li> <li> <p>ALL \u2013 Selects all actors.</p> <ul> <li>FROMOBJ \u2013 Selects all actors of the same class, or with matching static mesh, or with matching speedtree as the current selection.</li> </ul> </li> <li> <p>BASED \u2013 Selects all actors based on the current selection.</p> </li> <li> <p>BYPROPERTY \u2013 Select actors with matching property values.</p> </li> <li> <p>DELETED \u2013 Select all actors in the map marked for deletion.</p> </li> <li> <p>INVERT \u2013 Inverts the current selection.</p> </li> <li> <p>KISMETREF [referenced] \u2013 Selects actors referenced or not referenced by Kismet depending on the value of referenced. A value of 1 means select referenced.</p> </li> <li> <p>MATCHINGEMITTER - Select all actors of the same class and with a particle system matching that used by the current selection.</p> </li> <li> <p>MATCHINGPROCBUILDINGRULESETS - Select all actors of the same class and with a ProcBuilding rule set matching that used by the current selection.</p> </li> <li> <p>MATCHINGSKELETALMESH - Select all actors of the same class and with a skeletal mesh matching that used by the current selection.</p> <ul> <li>ALLCLASSES \u2013 Removes the same class restriction.</li> </ul> </li> <li> <p>MATCHINGSTATICMESH \u2013 Select all actors of the same class and with a static mesh matching that used by the current selection.</p> <ul> <li>ALLCLASSES \u2013 Removes the same class restriction.</li> </ul> </li> <li> <p>NAME= - Select the actor with the given name.</p> </li> <li> <p>NONE \u2013 Deselects all actors.</p> </li> <li> <p>OFCLASS [CLASS=class] \u2013 Selects all actors of the same class as the current selection.</p> </li> <li> <p>OFSUBCLASS [Class=class] \u2013 Selects all actors of the same class as the current selection or a subclass thereof.</p> </li> <li> <p>RELEVANTLIGHTS \u2013 Selects the relevant lights for all of the currently selected actors.</p> </li> <li> <p>SYNCBROWSER \u2013 Finds the asset used by the selected actor(s) in the browser if possible.</p> </li> <li> <p>TOGGLE LOCKMOVEMENT \u2013 Toggles whether the selected actors can be transformed with the transform widget.</p> </li> <li> <p>UNBAKEPREPIVOT \u2013 Resets the PrePivot of all selected actors to (0,0,0).</p> </li> <li> <p>UNHIDE \u2013 Unhides actors in the editor.</p> </li> <li> <p>ALL \u2013 Unhides all actors.</p> <ul> <li>STARTUP \u2013 Unhides all actors at startup.</li> </ul> </li> <li> <p>SELECTED \u2013 Only unhides the selected actors.</p> <ul> <li>STARTUP - Unhides selected actors at startup.</li> </ul> </li> <li> <p>UNLINKSELECTED \u2013 Unlinks the selected actors if they implement the LinkSelection interface.</p> </li> <li> <p>UPDATE \u2013 Updates the selected actors.</p> </li> </ul>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-editor-console-commands/#editor-mode-commands","title":"Editor Mode Commands","text":"<ul> <li>MODE \u2013 General mode commands</li> <li>ALWAYSSHOWTERRAIN= - Enables or disables always rendering terrain in the overhead 2D view.</li> <li>CAMERAMOVE \u2013 Sets the editor into camera mode (the default mode).</li> <li>COVEREDIT \u2013 Sets the editor into cover editing mode.</li> <li>GEOMETRY \u2013 Sets the editor into geometry mode.</li> <li>GRID= - Enables or disables the snapping grid.</li> <li>MESHPAINT \u2013 Sets the editor into mesh painting mode.</li> <li>ROTGRID= - Enables or disables the rotation grid.</li> <li>SELECTIONLOCK= - Enables or disables selecting or deselecting of actors.</li> <li>SHOWBRUSHMARKERPOLYS= - Enables or disables display of marker polygons on the builder brush and volumes.</li> <li>SNAPDIST= - Sets the snapping distance tolerance.</li> <li>SNAPVERTEX= - Enables or disables snapping to vertices.</li> <li>SPEED= - Sets the camera movement speed.</li> <li>STATICMESH \u2013 Sets the editor into static mesh placement mode.</li> <li>TERRAINEDIT \u2013 Sets the editor into terrain editing mode.</li> <li>TEXTURE \u2013 Sets the editor into texture alignment mode.</li> <li>USEACTORROTATIONGIZMO= - Enables or disables the actor rotation gizmo (Deprecated?)</li> <li>USESIZINGBOX= - Enables or disables the display of sizing information in the top left corner of the viewports.</li> <li>WIDGETCOORDSYSTEMCYCLE \u2013Cycles through the available coordinate systems, i.e. Local and World.</li> <li>WIDGETMODECYCLE - Cycles the transform widget through the available options.</li> </ul>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-editor-console-commands/#map-commands","title":"Map Commands","text":"<ul> <li> <p>MAP \u2013 General map commands</p> </li> <li> <p>BRUSH - Brush commands</p> <ul> <li> <p>GET \u2013 Replaces the builder brush shape with the first selected brush shape.</p> </li> <li> <p>PUT \u2013 Replaces all selected brushes with the current builder brush shape.</p> </li> </ul> </li> <li> <p>CHECK \u2013 Perform a map check for errors.</p> </li> <li> <p>DONTCLEARMESSAGES \u2013 Does not clear the map check dialog.</p> </li> <li> <p>DONTDISPLAYDIALOG \u2013 Does not display the map check dialog after the check.</p> </li> <li> <p>CHECKDEP - Perform a map check for deprecated references only.</p> <ul> <li> <p>DONTCLEARMESSAGES \u2013 Does not clear the map check dialog.</p> </li> <li> <p>DONTDISPLAYDIALOG \u2013 Does not display the map check dialog after the check.</p> </li> </ul> </li> <li> <p>EXPORT</p> </li> <li> <p>IMPORT [FILE=file] \u2013 Imports the given file into a new map.</p> </li> <li> <p>IMPORTADD [FILE=file] \u2013 Imports the given file into the current map additively.</p> </li> <li> <p>LOAD [FILE=file] [STREAMVL=streamvl] \u2013 Load the specified map file. Semicolon separated list of streaming maps to load.</p> </li> <li> <p>REBUILD \u2013 Map rebuilding commands</p> </li> <li> <p>ALLDIRTYFORLIGHTING \u2013 Rebuilds only the CSG geometry that is out of date.</p> </li> <li> <p>ALLVISIBLE \u2013 Rebuilds all visible CSG geometry.</p> </li> <li> <p>ROTGRID [PITCH=pitch] [YAW=yaw] [ROLL=roll] \u2013 Sets the rotation grid snap setting to the specified pitch value.</p> </li> <li> <p>SCALE [FACTOR=factor] [ADJUSTLIGHTS=adjustlights] [SCALESPRITES=scalesprites] [SCALELOCATIONS=scalelocations] [SCALECOLLISION=scalecollision] \u2013 Scales the map by the given factor using the given parameters.</p> </li> <li> <p>SELECT \u2013 Selection commands</p> <ul> <li> <p>ADDS \u2013 Selects all additive brushes.</p> </li> <li> <p>NONSOLIDS \u2013 Selects all non-solid brushes.</p> </li> <li> <p>SEMISOLIDS \u2013 Selects all semi-solid brushes.</p> </li> <li> <p>SUBTRACTS \u2013 Selects all subtractive brushes.</p> </li> </ul> </li> <li> <p>SENDTO \u2013 Brush order commands</p> </li> <li> <p>FIRST \u2013 Sends all selected brushes to the front of the hierarchy.</p> </li> <li> <p>LAST \u2013 Sends all selected brushes to the back of the hierarchy.</p> </li> <li> <p>SWAP \u2013 Swaps the first two selected brushes\u2019 positions in the hierarchy.</p> </li> <li> <p>SETBRUSH</p> </li> </ul>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-editor-console-commands/#csg-brush-commands","title":"CSG Brush Commands","text":"<ul> <li> <p>BRUSH - General CSG brush commands</p> </li> <li> <p>ADD [FLAGS=flags] \u2013 Create a new additive brush with the given flags.</p> </li> <li> <p>ADDVOLUME[CLASS=class] \u2013 Create a new volume of the given class.</p> </li> <li> <p>EXPORT [FILE=file] - Export the selected brush to the given file.</p> </li> <li> <p>FROM</p> </li> <li> <p>DEINTERSECTION \u2013 Create new brush from de-intersection of contained brushes.</p> </li> <li> <p>INTERSECTION \u2013 Create new brush from intersection of contained brushes.</p> </li> <li> <p>IMPORT [FILE=file] - Import a brush from the given file.</p> </li> <li> <p>LOAD [FILE=file] - Load a new brush from the given file.</p> </li> <li> <p>MERGEPOLYS \u2013 Merges the selected faces of the current brush.</p> </li> <li> <p>MOVEREL [vector] \u2013 Move the selected brush the given amount in each axis.</p> </li> <li> <p>MOVETO [vector] \u2013 Move the selected brush to the given location.</p> </li> <li> <p>NEW \u2013 Create a new empty builder brush.</p> </li> <li> <p>RESET \u2013 Resets the builder brush to initial state.</p> </li> <li> <p>SAVE [FILE=file] - Save the selected brush to the given file.</p> </li> <li> <p>SCALE [vector] \u2013 Scales the selected brush with the given scale.</p> </li> <li> <p>SEPARATEPOLYS \u2013 Separates the selected faces from the current brush.</p> </li> <li>SUBTRACT \u2013 Create a new subtractive brush.</li> </ul>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-editor-console-commands/#static-mesh-commands","title":"Static Mesh Commands","text":"<ul> <li> <p>STATICMESH \u2013 General static mesh commands</p> </li> <li> <p>FROM SELECTION [PACKAGE=package] [NAME=name] \u2013 Creates a new static mesh from the selected brush in the given package with the given name</p> </li> <li> <p>REBUILD \u2013 Forces a rebuild of the selected static mesh.</p> </li> <li> <p>SMOOTH \u2013 Sets smoothing mask of all triangles in selected static mesh to 1.</p> </li> <li> <p>TO BRUSH \u2013 Uses first selected static mesh to create a new builder brush shape.</p> </li> <li>UNSMOOTH \u2013 Sets the smoothing mask of all triangles in the selected static mesh to 0.</li> </ul>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-editor-console-commands/#csg-surface-commands","title":"CSG Surface Commands","text":"<ul> <li> <p>POLY \u2013 CSG surface commands</p> </li> <li> <p>SELECT \u2013 Surface selection commands</p> <ul> <li> <p>ADJACENT \u2013 Adjacent surface selection commands</p> </li> <li> <p>ALL \u2013 Selects all adjacent surfaces to the currently selected surfaces.</p> </li> <li> <p>CEILINGS \u2013 Selects all adjacent ceiling surfaces (surfaces with normals pointing down) to the currently selected surfaces.</p> </li> <li> <p>COPLANAR \u2013 Selects all adjacent surfaces to the currently selected surfaces which share the same plane.</p> </li> <li> <p>FLOORS - Selects all adjacent floor surfaces (surfaces with normals pointing up) to the currently selected surfaces.</p> </li> <li> <p>SLANTS - Selects all adjacent slant surfaces (surfaces that are not walls or floors or ceilings according to their normals) to the currently selected surfaces.</p> </li> <li> <p>WALLS \u2013 Select all adjacent upright surfaces, i.e. like walls.</p> </li> <li> <p>ALL \u2013 Selects all surfaces.</p> </li> <li> <p>MATCHING \u2013 Select surfaces with specific matching criteria.</p> </li> <li> <p>BRUSH \u2013 Selects all surfaces belonging to the same brush as the currently selected surfaces.</p> </li> <li> <p>GROUPS \u2013 Selects all surfaces belonging to any brush contained within the same group as the brush which contains the currently selected surfaces.</p> </li> <li> <p>RESOLUTION \u2013 Selects surfaces whose lightmap resolution matches that of any surface currently selected.</p> <ul> <li>CURRENT \u2013 Only selects surfaces contained in the same level as the currently selected surfaces.</li> </ul> </li> <li> <p>TEXTURE \u2013 Selects surfaces with the same material applied.</p> </li> <li> <p>MEMORY</p> </li> <li> <p>INTERSECT \u2013 Replace the current selection with only the surfaces which are both currently selected and contained within the saved selection in memory.</p> </li> <li> <p>RECALL \u2013 Replace the current selection with the selection saved in memory.</p> </li> <li> <p>SET \u2013 Save the current selection to memory.</p> </li> <li> <p>UNION \u2013 Add the selection of surfaces saved in memory to the current selection.</p> </li> <li> <p>XOR \u2013 Replace the current selection with only the surfaces that are not in both the current selection and the selection saved in memory.</p> </li> <li> <p>NONE \u2013 Deselect all surfaces.</p> </li> <li> <p>REVERSE \u2013 Invert the current selection.</p> </li> <li> <p>ZONE \u2013 Select surfaces contained within the same zone as any currently selected surface.</p> </li> </ul> </li> <li> <p>SET \u2013 Sets surface properties.</p> <ul> <li> <p>CLEARFLAGS= - Unsets the given flags on the currently selected surfaces.</p> </li> <li> <p>SETFLAGS= - Sets the given flags on the currently selected surfaces.</p> </li> <li> <p>TEXTURE= - Applies the given material to the selected surfaces.</p> </li> </ul> </li> <li> <p>SETMATERIAL \u2013 Set the material applied to the currently selected surfaces using the first selected material in the Content Browser.</p> </li> <li> <p>TEXMULT [UU=uu] [UV=uv] [VU=vu] [VV=vv] \u2013 Sets the scaling of the material on the currently selected surfaces relative to the current values.</p> </li> <li> <p>TEXPAN [U=u] [V=v] \u2013 Pans the material on the currently selected surfaces by the given amounts.</p> <ul> <li>RESET \u2013 Resets the panning on the surfaces before applying the new values.</li> </ul> </li> <li> <p>TEXSCALE [UU=uu] [UV=uv] [VU=vu] [VV=vv] \u2013 Sets the scaling of the material on the currently selected surfaces.</p> <ul> <li>RELATIVE \u2013 Scales relative to current values.</li> </ul> </li> </ul>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-gameplay-debugging/","title":"Udk gameplay debugging","text":""},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-gameplay-debugging/#gameplay-debugging","title":"Gameplay Debugging","text":"<ul> <li> <p>Gameplay Debugging</p> </li> <li> <p>Overview</p> </li> <li> <p>Remote Control</p> </li> <li> <p>Property Inspection and Manipulation</p> </li> <li> <p>Object Data Manipulation</p> </li> <li> <p>EditActor</p> </li> <li> <p>EditObject</p> </li> <li> <p>EditDefault</p> </li> <li> <p>EditArchetype</p> </li> <li> <p>Static Object Data Inspection</p> </li> <li> <p>GetAll</p> </li> <li> <p>GetAllState</p> </li> <li> <p>Dynamic Object Data Inspection</p> </li> <li> <p>DisplayAll</p> </li> <li> <p>DisplayAllState</p> </li> <li> <p>DisplayClear</p> </li> <li> <p>Object Data Modification</p> </li> <li> <p>Set</p> </li> <li> <p>Gameplay Code Profiling</p> </li> <li> <p>STAT Commands</p> </li> </ul>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-gameplay-debugging/#overview","title":"Overview","text":"<p>This is a quick guide to using some of UE3's runtime gameplay debugging features. When implementing new features, actors, or gameplay elements, things seldom work exactly as intended the first time through. Being able to quickly adjust property values on the fly or easily view property values, Actor states, or other information while the game is running is imperative to an efficient process. Unreal Engine 3 contains several features, in the form of console commands and applications, which make this debugging process as painless and as efficient as possible. These features can be quite useful for making tweaks, inspecting variables, and tracking down issues without needing to rebuild the engine, rebuild scripts, or restart the game; each of which is a time-consuming process.</p>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-gameplay-debugging/#remote-control","title":"Remote Control","text":"<p>The RemoteControl is a special window that can be opened while the game is running to provide information and control over certain aspects of the game.</p> <p>As this window is external to the game window and is created using wxWindows, it is unavailable if wxWindows is disabled, which it is by default except when running a Play In Editor game session from within UnrealEd. To enable wxWindows and the RemoteControl, the game must be run with the -wxwindows command line argument.</p> <p>For more information and a complete guide to using this feature, see the Remote Control page.</p>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-gameplay-debugging/#property-inspection-and-manipulation","title":"Property Inspection and Manipulation","text":"<p>Inspecting properties of Actors in the game and being able to modify them on the fly is a huge benefit not only when debugging, but also for tweaking and tuning the behavior of gameplay elements. The ability to view and adjust Actor properties is provided through the use of a special set of console commands.</p>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-gameplay-debugging/#object-data-manipulation","title":"Object Data Manipulation","text":"<p>These console commands allow you to open a property window for an in-game object or even for the class default object, which can then be viewed or modified at runtime. Note that there is a None category that contains all the variables that have not been declared with var(), giving you complete access to all of the object's data.</p> <p>As these commands rely on property windows external to the game window which are created using wxWindows, these commands are unavailable if wxWindows is disabled, which it is by default. To enable wxWindows and thus these console commands, the game must be run with the -wxwindows command line argument.</p> <p>Note: This will also enable the Remote Control. You can also add the -norc command line argument to disable the Remote Control window if you like.</p>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-gameplay-debugging/#editactor","title":"EditActor","text":"<p>The editactor console command makes the properties of an actor in the game available in the property window. This command only works for classes extending from Actor.This command can take a name or a class as an argument. Optionally, the trace argument can be passed in place of the name or class causing the Actor the player's camera is currently aiming at to be used.</p> <p>If a name of an Actor is specified, either with the name= prefix or not, the properties of that Object will be displayed.</p> C++<pre><code>editactor name=UTPawn_0\n</code></pre> <p>This will open a property window for the object UTPawn_0.</p> <p>If a class is specified, the properties of the first Actor of that class, or a subclass thereof, are displayed.</p> C++<pre><code>editactor class=UTPawn\n</code></pre> <p>This will choose the first UTPawn. In this case, it would most likely open the properties for the current player's UTPawn.</p> <p>If the trace argument is specified, the properties of the Actor being aimed at are displayed.</p> C++<pre><code>editactor trace\n</code></pre> <p>This will open a property window for the object at which the camera is aiming.</p> <p>Example Usage:</p> <p>In the case of creating a new vehicle, the need to fine-tune the properties of the vehicle to make driving feel right will no doubt arise. Setting the property values in the defaultproperties or even in an .ini file would require starting the game up, testing out the current values, shutting the game down, tweaking the values, starting the game up again, testing the values, etc. This is obviously less than ideal and not very efficient by any means. Using the editactor command allows any and all of the properties of the vehicle to be tweaked while the game is running, even while the player is sitting in the vehicle ready to test it out. This is a much more efficient and intuitive method of tuning gameplay.</p> <p>The simplest method here is probably to use the trace argument and just aim at the vehicle in question, but specifying the class is easy enough as well.</p> <p>For vehicles, it may be unlikely you will know the exact name of the vehicle as they are usually spawned dynamically from factories and not placed directly in a map.</p> <p></p> <p></p>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-gameplay-debugging/#editobject","title":"EditObject","text":"<p>The editobject console command makes the properties of a specific object in the game available in the property window. This command is functionally identical to the editactor command without the limitation that the class must extend from Actor and it has no optional trace argument.</p> <p>Note: This command may not work for certain classes or objects when running a map from within UnrealEd through a Play In Editor session.</p> <p>If a name of an Object is specified, either with the name= prefix or not, the properties of that Object will be displayed.</p> C++<pre><code>editobject GameThirdPersonCamera_0\n\neditobject name=GameThirdPersonCamera_0\n</code></pre> <p>Both of these are functionally identical, and will display the properties for the GameThirdPersonCamera_0 object.</p> <p>If a class is specified, the properties of the first Object of that class, or a subclass thereof, are displayed.</p> C++<pre><code>editobject class=GameThirdPersonCamera\n</code></pre> <p>This will choose the first GameThirdPersonCamera. In this case, it would most likely open the properties for the current player's GameThirdPersonCamera</p>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-gameplay-debugging/#example-usage","title":"Example Usage","text":"<p>Implementing a camera other than first person usually requires having the camera offset from the player mesh, among other aspects that may need tuning. Of course, getting the camera offset the proper distance to get the desired look and feel can be tricky. You certainly do not want to be constantly going back and forth between code and testing needing to compile with each tweak. If you are also working with a system similar to the modular system that is part of the GameFramework examples that means you are dealing with objects and not actors. The editobject command enables you to easily view and modify the properties of those modules with the game running to make the process of tweaking your camera extremely simple and incredibly intuitive.</p> <p>By using the editobject command and passing it the class of the camera module, the properties for the module will be displayed and tuned to get the offset just right.</p> C++<pre><code>editobject class=UDNCameraModule\n</code></pre> <p>This will open the property window for the camera module currently in use.</p> <p></p> <p></p>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-gameplay-debugging/#editdefault","title":"EditDefault","text":"<p>The editdefault console command makes the properties of a class default object available, similar to specifying a class with the editobject console command. The class can be specified using the class= prefix, but it is not necessary. This command is extremely useful for classes that are frequently spawned, such as projectiles or units in a real-time strategy game.</p> <p>Note: This command is not allowed when running a map from within UnrealEd through a Play In Editor session.</p>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-gameplay-debugging/#example-usage_1","title":"Example Usage:","text":"<p>Tweaking the behavior of projectiles can be tedious if you are constantly going between code and testing. By editing the default values directly inside the game while you are testing, the process becomes extremely streamlined.</p> <p>Simply use the editdefault command and pass it the name of a projectile class:</p> C++<pre><code>editdefault UTProj_LinkPlasma\n\neditdefault class=UTProj_LinkPlasma\n</code></pre> <p>Both of these are functionally identical and will display the default properties of the UTProj_LinkPlasma class which can then be modified allowing you to adjust the behavior of all future instances of that class.</p> <p></p>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-gameplay-debugging/#editarchetype","title":"EditArchetype","text":"<p>The editarchetype console command makes the properties of an archetype available. The archetype to edit is specified by passing the path (Package.Group.Name) to the archetype following the command. Like the editdefault command, this command is also extremely useful for archetypes that are used as templates for objects that are frequently spawned, such as projectiles or units in a real-time strategy game, or for archetypes used as data definitions or content holders.</p> <p>In addition to being able to edit the properties of the archetype, the settings can be saved to the archetype in the package using the  button in the properties window so they are not lost.</p> <p>Note: This command is not allowed when running a map from within UnrealEd through a Play In Editor session.</p>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-gameplay-debugging/#example-usage_2","title":"Example Usage","text":"<p>Say you have a weapon class set up to use archetypes as templates for its projectiles. This allows the look and behavior of the projectiles to easily be tweaked without having to modify and recompile the scripts. However, it would also usually require running the game and testing, closing the game and making changes, running the game and testing, etc. By using the editarchetype command, the modifications can be made while the game is running for an easy and efficient workflow.</p> <p>The projectile using the current settings of the archetype:</p> <p></p> <p>Simply use the editarchetype command and pass it the path of the archetype:</p> C++<pre><code>editarchetype UDNProjectiles.RedPlasma\n</code></pre> <p></p> <p>By modifying the proeprties, the look and behavior of the projectiles is changed in realtime:</p> <p></p> <p>Once you are satisfied with the settings, press the button in the proeperties window to save the current settings to the archetype.</p>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-gameplay-debugging/#static-object-data-inspection","title":"Static Object Data Inspection","text":"<p>These console commands are useful for inspecting a static snapshot of object data while the game is running. They will capture the values of the specified data at the time the command is executed and display that data in the console and output it to the log as well.</p>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-gameplay-debugging/#getall","title":"GetAll","text":"<p>The getall console command returns the value of a particular variable for all objects of a particular class and displays them in the console in-game, visible by pressing the '~' key, and outputs them to the log. The command is followed by the name of the class and variable within that class to access.</p> <p>Example usage:</p> <p>When implementing a new custom camera system, it can be frustrating to run the game to test out the new camera only to find it not working as expected. It is possible the camera is not functioning correctly, but it could be something more simple such as the camera is not getting created and assigned correctly in the first place. Adding log statements to the code and then running the game and then closing the game to check the logs to see the results is one method to see if the camera is getting assigned. However, it would be so much easier and efficient if you could check right there in the game while it is running. The getall command makes this possible.</p> <p>By using this command and passing it your custom PlayerController class and the name of the camera variable contained within it, the current value of that variable will be displayed right there in the console, immediately letting you know if the camera is not being assigned properly or if the problem lies elsewhere.</p> C++<pre><code>getall UDNPlayerController PlayerCamera\n</code></pre> <p>This will list out the Name and PlayerCamera of every UDNPlayerController actor in memory in the console in-game.</p> <p></p> <p>Since the PlayerCamera has a value and not None, you know the camera is being assigned properly.</p>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-gameplay-debugging/#additional-parameters","title":"Additional Parameters:","text":"<p>This command can also be used to obtain the value of a particular variable for a single instance of a particular class by specifying some optional parameters.</p> <ul> <li> <p>Name= - Displays the particular variable's value for the Object having this Name.</p> </li> <li> <p>Outer= - Displays the particular variable's value for all instances of the specified class having this Object as its Outer.</p> </li> </ul> <p>In addition, other special information can be displayed along with the particular variable value.</p> <ul> <li> <p>SHOWDEFAULTS - Displays the default value for the particular variable in addition to the current value.</p> </li> <li> <p>SHOWPENDINGKILLS - Displays instances even if they are orphaned and pending deletion.</p> </li> <li> <p>DETAILED - Displays detailed information about the instance(s) via the GetDetailedInfoInternal() function.</p> </li> </ul>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-gameplay-debugging/#getallstate","title":"GetAllState","text":"<p>The getallstate console command returns the current state of all objects of a particular class and displays them in the console in-game, visible by pressing the '~' key, and outputs them to the log. The command is followed by the name of the class to access.</p>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-gameplay-debugging/#example-usage_3","title":"Example usage:","text":"C++<pre><code>getallstate UTPawn\n</code></pre> <p>This will list the current state of every UTPawn in memory in the console in-game.</p> <p></p> <p>This gives you a quick overview of what the UTPawns in the game are doing. It can quickly point out an anomaly, such as you see in the screenshot as this snapshot was taken at the time the bots were spawning and yet one UTPawn is in the Dying state.</p>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-gameplay-debugging/#dynamic-object-data-inspection","title":"Dynamic Object Data Inspection","text":"<p>These console commands are useful for inspecting object data as it changes over time. They will display a set of data which dynamically updates each frame directly on the screen overlaying the game as part of the HUD.</p>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-gameplay-debugging/#displayall","title":"DisplayAll","text":"<p>The displayall console command returns the value of a particular variable for all objects of a particular class and displays them on the screen. The command is followed by the name of the class and the variable within that class to access.</p> <p>Example usage:</p> C++<pre><code>displayall UTPawn Location\n</code></pre> <p>This will list the Name and Location of every UTPawn on the screen, updated every frame.</p> <p></p>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-gameplay-debugging/#displayallstate","title":"DisplayAllState","text":"<p>The displayallstate console command returns the current state of all objects of a particular class and displays them on the screen. The command is followed by the name of the class to access.</p> <p>Example usage:</p> <p>Creating believable AI in a game is a difficult task to begin with, but without a way to keep an eye on all the AI as they interact it would become even more so. The displayallstate command makes one aspect of this quick and easy. You can have the current state of every AI entity displayed right on the screen, updating every frame as they make new decisions.</p> <p>By using this command and passing it the class of the AI entities, you can have an overview of your AI at the ready.</p> C++<pre><code>displayallstate UTBot\n</code></pre> <p>This will list the current state of every UTBot in memory on the screen, updated every frame, making it extremely easy to see exactly what each bot is doing.</p> <p></p>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-gameplay-debugging/#displayclear","title":"DisplayClear","text":"<p>The displayclear console command clears all object data currently being displayed on the screen. This command takes no arguments.</p> <p>Example usage:</p> C++<pre><code>displayclear\n</code></pre> <p>This will clear the object data being displayed on the screen from a previous DisplayAll or DisplayAllState command.</p> <p></p> <p></p>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-gameplay-debugging/#object-data-modification-set","title":"Object Data Modification Set","text":"<p>The set console command will set the value of a variable for all instances of a particular class, as well as the class default object. The command is followed by the name of the class, the variable within the class to modify, and the value to set the variable to. This can be very useful for tweaking weapons, projectiles, bots, units in an RTS, etc.</p> <p>Note: This command is not allowed when running a map from within UnrealEd through a Play In Editor session.</p> <p>Example usage:</p> <p>Balancing weapons can be a tricky feat, constantly tweaking properties to get just the right combination so that no one weapon is overpowering the others. No one in their right mind would want to try to do this by resorting to changing properties in code and compiling and testing. And since you really want to affect all instances of the weapons at once, the editactor command just will not cut it. The set command, however, is perfectly suited for such a task.</p> <p>By this command and passing it a class name, a variable name, and a value for that variable, it is easy to modify the value of that variable for all instances of that class that currently exist and any instances that may be spawned subsequently.</p> C++<pre><code>set utweap_linkgun maxammocount 150\n</code></pre> <p>This will increase the maximum ammo count that all link guns can hold.</p> <p></p>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-gameplay-debugging/#gameplay-code-profiling","title":"Gameplay Code Profiling","text":"<p>The Gameplay Profiler is a tool that provides a detailed breakdown of where time is being spent when executing UnrealScript gameplay code.</p> <p></p> <p>For a detailed overview, see the Gameplay Profiler page.</p> <p>For more information on the command line arguments useful for profiling gameplay, see the Gameplay Profiling page.</p>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/udk-gameplay-debugging/#stat-commands","title":"STAT Commands","text":"<p>The STAT commands can be useful in getting a quick look at how much time certain aspects of your code are taking to execute. The STAT GAME command is especially useful as it shows the cumulative time your scripts are taking to update each tick.</p> <p></p> <p>For more information on this and other STAT commands, see the Stats Description page.</p>"},{"location":"ue4guide/gameplay-programming/useful-console-commands/useful-console-commands/","title":"Console Tips &amp; Tricks","text":"<p>Useful list from UE3: https://docs.unrealengine.com/udk/Three/ConsoleCommands.html</p> <ul> <li> <p>GET [class][property] - returns the default value of a class property</p> </li> <li> <p>GETALL [class][property] - returns the value property for all instantiated classes</p> </li> <li> <p>DISPLAYALL / DISPLAYALLSTATE - Identical to \"getall\", but displays output on the screen in realtime, similarly to stats.</p> </li> <li> <p>DISPLAY [object][property] - Displays only the specified property for the specified single object. Only enough of the outer chain is required to make the object uniquely identifiable.</p> </li> <li> <p>DISPLAYCLEAR - Clears all display* output.</p> </li> <li> <p>SET - this one is the most powerful of them all. It takes as the first parameter string a class name, the second string a variable name, and the third string, a value. All objects of the given class (including subclasses) will have the given variable set to the given value. For example \"set Pawn CollisionRadius 200\" will make all pawns have a collision radius of 200. (See PawnTricksAndTips<sup>?</sup> for more details). In v3323 the set command has limited functionality when using online, this is to limit cheating.</p> </li> <li> <p>EDITACTOR [parameter] \u2013 Will bring up property detail view &amp; edit the properties of first found actor according to the parameter.</p> </li> <li> <p>CLASS= - Class to look for.</p> </li> <li> <p>NAME= - Name to look for</p> </li> <li> <p>TRACE \u2013 Trace player view for first hit actor.</p> </li> <li> <p>EDITDEFAULT [CLASS=class] \u2013 Open property editor for default properties of specified class. Only allowed in standalone.</p> </li> <li> <p>EDITOBJECT [parameter] \u2013 Edit the properties of the first found object of the specified class or with the given name.</p> </li> <li> <p>CLASS= - Class to look for.</p> </li> <li> <p>NAME= - Name to look for.</p> </li> <li> <p>LISTPROPS</p> </li> <li> <p>LISTFUNCS</p> </li> <li> <p>CHEATSCRIPT</p> </li> <li> <p>LISTFUNC &lt;classname&gt; &lt;functionname&gt;: Parse the function and display details</p> </li> <li> <p>Calling events from the console:</p> </li> <li> <p>Invoke a level blueprint event:</p> <p>ce EventName OptionalParamValue</p> </li> <li> <p>Invoke an actor event:</p> </li> </ul> <p>ke ActorName EventName ParamValue</p> <ul> <li>Invoke an actor event with wildcards to invoke on every actor in the world:</li> </ul> <p>ke * TestConsoleEvent 25</p> <p>Reference From https://docs.unrealengine.com/udk/Three/ConsoleCommands.html</p> <ul> <li> <p>How to find problem actors for lightmapping/baking or fixing \"Lighting Needs to be rebuilt\" error message</p> </li> <li> <p>Console command DumpUnbuiltLightInteractions</p> </li> </ul> <p>Reference From https://wiki.unrealengine.com/LightingTroubleshootingGuide</p> <ul> <li>How to improve light build times, look at the Lightmass statistics window</li> </ul> <p>The Lighting Build Info dialog is a very important tool for improving lighting build times. First, build lighting in the level that you want to see stats for. Then, open the dialog under Build-&gt;Lighting Info-&gt;Lighting StaticMesh Info. Change the drop down to Lighting Build Info. This will show a sorted list of meshes and how long they took to compute lighting for.</p> <p>Reference From https://docs.unrealengine.com/latest/INT/Engine/Rendering/LightingAndShadows/Lightmass/#gettingthebestlightingbuildtimes</p> <p>How To Execute Multiple/Chain Console Commands /string console commands. Use the pipe as a console command separator</p> <ul> <li>stat unit | stat scenerendering</li> </ul> <p>Dump all console commands:</p> <p>dumpconsolecommands: dump all console commands to output</p> <p>help: Generate html file of all console commands</p>"},{"location":"ue4guide/general-debugging/add-vs-autoattach-to-ue4-button/","title":"Add vs autoattach to ue4 button","text":"<ul> <li> <p>https://blog.markvincze.com/attach-to-process-shortcut-in-visual-studio</p> </li> <li> <p>Example script for UE4:</p> </li> </ul> C#<pre><code>  using EnvDTE;\n  using EnvDTE80;\n  using System;\n\npublic class C : VisualCommanderExt.ICommand\n{\n  public void Run(EnvDTE80.DTE2 DTE, Microsoft.VisualStudio.Shell.Package package)\n  {\n    foreach(Process2 proc in DTE.Debugger.LocalProcesses)\n    {\n      if(proc.Name.ToString().Contains(\"UE4Editor\"))\n      {\n        proc.Attach2(\"\"); //Can specify specific debug engine like \"Native\" \"Managed\"\n        return;\n      }\n    }\n\n    System.Windows.MessageBox.Show(\"UE4 instance was not found.\");\n  }\n}\n</code></pre> <ul> <li>To add it to the toolbar:</li> </ul> <p></p> <p></p>"},{"location":"ue4guide/general-debugging/display-all-blueprint-properties/","title":"Display all blueprint properties","text":"<p>Add these settings in the DefaultEditorPerProjectUserSettings.ini:</p> INI<pre><code>[PropertySettings]\nShowHiddenProperties=True\n\n[/Script/UnrealEd.EditorPerProjectUserSettings]\nbShowAllAdvancedDetails=True\nbShowHiddenPropertiesWhilePlaying=True\n\n; Dangerous: Allow editing of all properties\n[/Script/UnrealEd.EditorExperimentalSettings]\nbAllowPotentiallyUnsafePropertyEditing=true\n</code></pre> <p>You can also create a custom detailview with <code>FDetailsViewArgs::bForceHiddenPropertyVisibility = true</code></p>"},{"location":"ue4guide/general-debugging/print-bp-callstack/","title":"Print bp callstack","text":"<p>When running an Editor build of your game, you can now use the command:</p> C++<pre><code>{,,UE4Editor-Core}::PrintScriptCallstack()\n\n::PrintScriptCallstack()\n</code></pre> <p>Reference From https://www.unrealengine.com/en-US/blog/debugging-ufunction-invoke</p> <p>Print Blueprint CallStack from Visual Studio:</p> <ul> <li> <p>In the immediate window: <code>{,,UE4Editor-Core}::PrintScriptCallstack(false)</code></p> </li> <li> <p>How to make a command alias &amp; button for it with Visual Commander Macro</p> </li> <li> <p>Create a VCMD Command called 'PrintScriptCallstack' and use this code</p> </li> </ul> C#<pre><code>using EnvDTE;\nusing EnvDTE80;\n\npublic class C : VisualCommanderExt.ICommand\n{\n    public void Run(EnvDTE80.DTE2 DTE, Microsoft.VisualStudio.Shell.Package package)\n    {\n      if (DTE.Mode == EnvDTE.vsIDEMode.vsIDEModeDebug)\n      {\n        //In monolothic builds, it should be ::PrintScriptCallstack()\n        DTE.ExecuteCommand(\"? {,,UE4Editor-Core}::PrintScriptCallstack(false)\");\n      }\n    }\n}\n</code></pre> <ul> <li> <p>Then do this in Visual Studio to setup a command shortcut alias:</p> <p><code>alias pbs VCmd.CCommandPrintBPStack</code></p> </li> </ul>"},{"location":"ue4guide/graphics-development/coordinate-spaces/","title":"Coordinate spaces","text":""},{"location":"ue4guide/graphics-development/coordinate-spaces/#ue4-is-a-left-handed-coordinate-system","title":"UE4 is a Left Handed Coordinate System","text":"<p>**Coordinate System: **Left handed, Z-Up, X-axis is forward, Y-axis is right</p> <ul> <li> <p>UV (0,0) =&gt; is Top Left corner of image</p> </li> <li> <p>NOTE: UVs get flipped on import from FBX files</p> </li> </ul> <p>Matrix</p> <ul> <li> <p>Row addressable M[RowIndex][ColumnIndex]</p> </li> <li> <p>Matrix stored as row major m[0]-m[3] = first row, m[4]-m[7] = second row</p> </li> <li> <p>Matrices are post multiplied (x * M * V * P)</p> </li> <li> <p>Which basically just means you can treat everything as column addressable, column major and pretending matrices are pre-multiplied</p> </li> </ul>"},{"location":"ue4guide/graphics-development/coordinate-spaces/#spaces","title":"Spaces","text":"Space in Unreal Other Names Description Tangent Orthogonal (can deviate after interpolation), can be left or right handed. The TangentToLocal transform contains rotation only, so it is OrthoNormal (can be inverted by transposing). Local Object Space Orthogonal, can be left or right handed (triangle cull order needs adjustment). The LocalToWorld transform contains rotation, non-uniform scaling (including negative non-uniform scaling which can change the winding order), and translation. World The WorldToView transform contains only rotation and translation, so distances in View space are the same as in World space. TranslatedWorld World       TranslatedWorld - PreviewTranslation                                                                    TranslatedWorld    World + PreviewTranslation View CameraSpace The ViewToClip transform contains scale on x and y, but no translation (which would be an off center projection). It scales and translates z. It also applies a projection to convert into the homogeneous ClipSpace. Clip HomogeniousCoordinates, PostProjectionSpace, ProjectionSpace After the perspective projection matrix was applied. Note that W in Clip space is the same as View Space Z. Screen NormalizedDeviceCoordinates from OpenGL After the perspective divide:                                 left/right -1,1                                                                       top/bottom 1,-1                                            near/far 0,1 (OpenGL RHI needs to transform this to -1,1) Viewport ViewportCoordinates, WindowCoordinates In pixels:                                                                                                          left/right 0,width-1                                                               top/bottom 0,height-1"},{"location":"ue4guide/graphics-development/coordinate-spaces/#space-transformations","title":"Space Transformations","text":"<p>Transformation between spaces should always be named using the form X To Y.</p> <p>Examples:</p> <ul> <li> <p>WorldToView</p> </li> <li> <p>TranslatedWorldToView</p> </li> <li> <p>TangentToWorld</p> </li> </ul> <p>Reference From https://docs.unrealengine.com/en-us/Engine/Basics/CoordinateSpace</p>"},{"location":"ue4guide/graphics-development/lit-translucency-settings/","title":"Alter Translucency Lighting","text":"Bash<pre><code>r.TranslucentLightingVolume\nr.TranslucentVolumeMinFOV\nr.TranslucentVolumeFOVSnapFactor\nr.TranslucencyVolumeBlur\nr.TranslucencyLightingVolumeDim\nr.TranslucencyLightingVolumeInnerDistance\nr.TranslucencyLightingVolumeOuterDistance\n</code></pre> <p>Inner &amp; Outer distance are the ones to change for getting around the popping.</p>"},{"location":"ue4guide/graphics-development/custom-passes-extensions/color-gradingpostprocess/","title":"Color gradingpostprocess","text":"<p>Efficient implementation of custom grading/adding custom post process pass</p> <ul> <li> <p>Look at deferred decals/deferred decal mesh (PostProcessDeferredDecals.cpp &amp; PostProcessMeshDecals.cpp)</p> </li> <li> <p>Look at RenderMeshDecals()</p> </li> <li> <p>Look at FDecalRendering::BuildVisibleDecalList</p> </li> <li> <p>Also look at possibly following UDecalComponent()</p> </li> <li> <p>Derive from USceneComponent instead of UPrimitiveComponent and manually add the color grade sphere to a list on FScene in CrateRenderState_Concurrent()</p> </li> <li> <p>FDeferredShadingSceneRenderer::Render()</p> </li> <li> <p>GCompositionLighting.ProcessAfterBasePass(RHICmdList, Views[ViewIndex])</p> </li> <li> <p>FCompositionLighting::ProcessAfterBasePass()</p> <ul> <li> <p>Sets up composition graph for deferred decals and ambient occlusion</p> </li> <li> <p>Deferred decals are done with normal rendering</p> </li> <li> <p>Ambient occlusion can be done with Compute shader. Look at AddPostProcessingAmbientOcclusion() for compute shader version of a postprocess pass</p> </li> <li> <p>Actual rendering/processing happens in FRCPassPostProcessDeferredDecals::Process() or FRCPassPostProcessAmbientOcclusion::Process()</p> </li> </ul> </li> </ul>"},{"location":"ue4guide/graphics-development/custom-passes-extensions/custom-primitive/","title":"Custom primitive","text":"<p>Add Custom InitView data (used by Landscape Component):</p> C++<pre><code>/**\n * Called during the visibility and shadow setup for each primitives with either static or dynamic relevancy, so we can store custom data for the frame that can be reused later. \n * Keep in mind this can be called in multihread as it's called during the InitViews()\n * This will only be called if bUseCustomViewData is true in the GetViewRelevance()\n * @param InView - Current View\n * @param InViewLODScale - View LOD scale\n * @param InCustomDataMemStack - MemStack to allocate the custom data\n * @param InIsStaticRelevant - Tell us if it was called in a static of dynamic relevancy context\n * @param InVisiblePrimitiveLODMask - Calculated LODMask for visibile primitive in static relevancy\n * @param InMeshScreenSizeSquared - Computed mesh batch screen size, passed to prevent recalculation\n*/\nENGINE_API virtual void* InitViewCustomData(const FSceneView&amp; InView, float InViewLODScale, FMemStackBase&amp; InCustomDataMemStack, bool InIsStaticRelevant = false, const struct FLODMask* InVisiblePrimitiveLODMask = nullptr, float InMeshScreenSizeSquared = -1.0f) { return nullptr; }\n\n\n\n\n/**\n * Called during post visibility and shadow setup, just before the frame is rendered. It can be used to update custom data that had a dependency between them.\n * Keep in mind this can be called in multihread.\n * This will only be called on primitive that added view custom data during the InitViewCustomData.\n * @param InView - Current View\n * @param InViewCustomData - Custom data to update\n */\nENGINE_API virtual void PostInitViewCustomData(const FSceneView&amp; InView, void* InViewCustomData) { }\n</code></pre>"},{"location":"ue4guide/graphics-development/custom-passes-extensions/custom-stencil-notes/","title":"Custom stencil notes","text":"<p>https://udn.unrealengine.com/questions/270970/stencil-testing-opaque-pass.html</p> <p>https://udn.unrealengine.com/questions/189594/on-using-intermediate-render-targets.html</p> <p>https://udn.unrealengine.com/questions/266792/using-customdepth-in-material.html</p> <p>The gist is to search for \"CustomDepth\" and do almost the exact same thing, except bind the main scene depth buffer and your custom color buffer, instead of a custom depth buffer. We use this as a mask to blend a scene capture with the main scene view in a postprocess material, but it should work just as well to sample it in base pass materials.</p> <p>Reference From https://udn.unrealengine.com/questions/270970/stencil-testing-opaque-pass.html</p> <ul> <li>Add a new pass to the deferred shading renderer for setting up this texture. Search for bRenderCustomDepth and CustomDepthSet to use the custom depth rendering pass as an example. You won't need any new drawing policies. While rendering to this target you can bind the scene depth buffer so you can depth test against the main scene.</li> </ul> <p>Reference From https://udn.unrealengine.com/questions/189594/on-using-intermediate-render-targets.html</p>"},{"location":"ue4guide/graphics-development/custom-passes-extensions/custom-stencil-notes/#useful-classes","title":"Useful classes","text":"<p>EMaterialDomain</p> <p>bUseWithSkeletalMesh</p> <p>LOOKING_FOR_PERF_ISSUES</p> <p>RHITransitionResources</p>"},{"location":"ue4guide/graphics-development/custom-passes-extensions/custom-stencil-notes/#forward-shading-forces-earlyzpassmovable--ddm_alloccluders","title":"Forward Shading Forces EarlyZPassMovable &amp; DDM_AllOccluders","text":"<p>// DBuffer decals force a full prepass  EarlyZPassMode = DDM_AllOccluders;  bEarlyZPassMovable = true;</p> <p>Look at Landscape material for getting custom attributes in a material (LandscapelayerBlend,LandscapeLayerCoords)</p>"},{"location":"ue4guide/graphics-development/custom-passes-extensions/custom-stencil-notes/#useful-functions","title":"Useful functions","text":"C++<pre><code>static void SetDecalDepthState(FDecalDepthState DecalDepthState, FRHICommandListImmediate&amp; RHICmdList, FDrawingPolicyRenderState&amp; DrawRenderState)\n\nSetDepthStencilStateForBasePass()\n\nTStaticDepthStencilState&amp;lt;...&gt;::GetStaticState() for the class defining all the stencil op state\n\nTStaticDepthStencilState&amp;lt;&gt;::GetRHI() for getting the default stencil (iirc, stencil expects to be set back to the default but not sure)\n\nRHICommandSetStencilRef() for setting stencil\n\nFRCPassPostProcessDeferredDecals::Process() - full breakdown of a complete custom pass (setting different states, rendering scoped meshes, etc)\n\nFDrawingPolicyRenderState\n\nTStaticDepthStencilState\n\nApplyDitheredLODTransitionState\n\nSetDepthStencilStateForBasePass\n\nMeshDecalPrimSet\nCustomDepthSet\n\nFMaterialRelevance MaterialRelevance;\n\nFScene::AddDecal(UDecalComponent\\* Component)\n\nFMaterialAttributeDefinitionMap::InitializeAttributeMap()\n\nEMaterialProperty\n\nFMaterialAttributeDefinitionMap::AddCustomAttribute\n\nRHICmdList.SetDepthStencilState(TStaticDepthStencilState&amp;lt; false, CF_Always &gt;::GetRHI());\n\nSetUniformBufferParameter\n\nSetShaderValue\n\nSetSRVParameter\n\nFParticleSpriteVertexFactoryShaderParameters::SetMesh\n\nFLocalVertexFactory::ConstructShaderParameters\n\nFMeshVertexFactory\n\nFStaticMeshLODResources::InitResources\n\nFStaticMeshLODResources::InitVertexFactory\n\n## Extending Custom Occlusion Culling:\n\nICustomVisibilityQuery\n\nICustomCulling\n\nGCustomCullingImpl\n\nFCableVertexFactory\n&lt;https://wiki.unrealengine.com/Procedural_Mesh_Generation&gt;\n</code></pre> FScene is the renderer equivalent of UWorld(). Objects only exist to renderer when they call their Component::OnRegister() FPrimitiveSceneProxy Renderer version of UPrimitiveComponent FPrimitiveSceneInfo Internal renderer state for single UPrimitiveComponent/FPrimitiveSceneProxy FPrimitiveViewRelevance Stores info on what effects/passes are relevant to the primtive. FSceneView Renderer View into an FScene. One scene can be rendered with different views (splitscreen, stereo rendering, editor windows) FViewInfo Internal renderer representation of a view FSceneViewState private renderer info about view that's needed across frames. Renderer analog of ULocalPlayer FSceneRenderer Class that manages rendering FMaterial Abstract Interface to a material used for rendering. Provides access to material properties, shader map FMaterialResource Concrete implementation of UMaterial, the asset FMaterialRenderProxy Material representation on the rendering thread (equiv to FPrimitiveSceneProxy) UMaterialInterface Game thread interface for material func. Corresponds to FMaterialRenderProxy UMaterial Material asset UMaterialInstance Concerete Instance of a UMaterial with concrete parameters for the UMaterial <p>Drawing policies:</p> <p>Logic to render meshes with pass specific shaders. Takes set of mesh material shaders + vertex factory =&gt; binds vertex factory's buffers to RHI =&gt; binds mesh material shaders to RHI =&gt; sets shader parameters =&gt; issues RHI drawcall</p> <ul> <li> <p>FVertexFactory to itnerface to abstract mesh type</p> </li> <li> <p>FMaterial interface to abstrat material details</p> </li> </ul> <p>FlushRenderingCommands is standard method of blocking the game thread until rendering thread has caught up. Mainly useful for offline/editor operations</p> <p>FRenderResource: base rendering resource interface (e.g. FVertexBuffer, FIndexBuffer, etc)</p> <ul> <li>Use helper function BeginInitResource() which calls FRenderResource::InitResource() on the render thread</li> </ul> <p>FRenderCommandFence: Used to sync operations from GT &amp; RT</p> <ul> <li>UPrimitiveComponent::DetachFence used on deleting</li> </ul> <p>[Great example is USkinnedMeshComponent/USkeletalMesh]</p> <p>Static Render Resources:</p> <ul> <li> <p>Initialized using BeginInitResource, usually after PostLoad.</p> </li> <li> <p>Component registration happens after which adds primitive/primitivesceneproxy to FScene to start rendering</p> </li> <li> <p>GC calls BeginDestroy() to call BeginReleaseResource(IndexBufferRenderRsrc) &amp; DetachFence.BeginFence()</p> </li> <li> <p>UPrimitiveComponent::IsReadyForFinishDestroy() - returns if true if DetachFence.IsFenceComplete()</p> </li> <li> <p>GC calls FinishDestroy() to actually delete. Usually destructor's handle this</p> </li> </ul> <p>Dynamic Render Resources:</p> <ul> <li> <p>CreateRenderState_Concurrent to allocate dynamic render thread object (e.g. FSkeletalMeshObject)</p> </li> <li> <p>Should derive from FDeferredCleanupInterface</p> </li> <li> <p>SendRenderDynamicData_Concurrent() allocates/computes data on GT and sends them to render thread through ENQUEUE_UNIQUE_RENDER_COMMAND</p> </li> <li> <p>Usually the dynamicData pointer is copied to the dynamic render thread object (e.g. FSkeletalMeshObject.DynamicData) bc the object now owns it and is responsible for freeing it</p> </li> <li> <p>DestroyRenderState_Concurrent() is where GT marks dynamic render resources for deletion. Calls</p> </li> <li> <p>Render Thread Object (e.g. FSkeletalMeshObject) calls BeginReleaseResource() on all FRenderResources it owns</p> </li> <li> <p>Calls BeginCleanup() on Render Thread Objects (e.g. FSkeletalMeshObject)</p> <ul> <li>Make sure to delete any remaining allocated dynamic data struct that was used to pass stuff between GT to RT in SendRenderDynamicData_Concurrent() (e.g. delete (FDynamicSkelMeshObjectDataCPUSkin*)DynamicData;)</li> </ul> </li> <li> <p>Nullptr out the Render Thread Object. Ex: MeshObject = nullptr</p> </li> </ul> <p>Approaches to Create separate stencil buffer</p> <p>New Pass: Render ArenaMask Sphere into stencil buffer</p> <p>Create new material domain ? Shading model</p> <p>Extend view relevance with new arena bit?</p> <p>Separate render pass, after all opaque?</p> <p>Extend FrustumCull&lt;&gt;() to cull objects based on View cone direction</p>"},{"location":"ue4guide/graphics-development/custom-passes-extensions/custom-stencil-notes/#early-zstencilhi-zhi-stencilz-cull-rules","title":"Early-Z/Stencil/Hi-Z/Hi-Stencil/Z-Cull Rules:","text":"<p>TLDR:</p> <ul> <li>If you force the hardware to go to late-z, it wont' reset until the next zbuffer clear/pipeline flush/next frame</li> </ul> Early-Z Hi-Z Shader depth output Disabled Disabled Alpha test, alpha to coverage or texkill with depth or stencil writes on Disabled Enabled Alpha test, alpha to coverage or texkill with depth and stencil writes off Enabled Enabled Stencil op fail or zfail is not KEEP Enabled Disabled Stencil op fail and zfail is KEEP, pass is any op Enabled Enabled Depth test comparison is EQUAL Enabled Enabled Depth test comparison is NOTEQUAL Enabled Disabled Reversed depth comparison direction Enabled Disabled Reversed stencil comparison direction Enabled Enabled <ul> <li> <p>Don't switch depth comparison direction</p> </li> <li> <p>Discard + depth writes OFF =&gt; still keeps EarlyZ on</p> </li> <li> <p>[earlydepthstencil] + discard + depth writes =&gt; color will be discarded but depth will get writtten (bc it already got written to in the earlyz test phase before the pixel shader)</p> </li> </ul> <p>Resources:</p> <ul> <li> <p>http://files.cnblogs.com/files/OpenGPU/Depth_in-depth.pdf</p> </li> <li> <p>https://github.com/buildaworldnet/IrrlichtBAW/wiki/Early-Fragment-Tests,-Hi-Z,-Depth,-Stencil-and-other-benchmarks</p> </li> <li> <p>https://fgiesen.wordpress.com/2011/07/08/a-trip-through-the-graphics-pipeline-2011-part-7</p> </li> </ul> <p>Force earlydepthstencil (if we're not doing an earlyZ pass)</p> <ul> <li> <p>Make sure z/stencil-fail op == KEEP. Otherwise early/hiZ might get disabled</p> </li> <li> <p>Alpha test/texkill/alpha to coverage will disable EarlyZ but sometimes ok with HiZ</p> </li> </ul> <p></p> <p>Early/HiZ AMD circa 2007:</p> <p>Early Z Hierarchical Z Shader depth output Disabled Disabled Alpha test, alpha to coverage or texkill with depth or stencil writes on Disabled Enabled Alpha test, alpha to coverage or texkill with depth and stencil writes off Enabled Enabled Stencil op fail or zfail is not KEEP Enabled Disabled Stencil op fail and zfail is KEEP, pass is any op Enabled Enabled Depth test comparison is EQUAL Enabled X8xx: Disabled X1xxx: Enabled Depth test comparison is NOTEQUAL Enabled Disabled Reversed depth comparison direction Enabled Disabled Reversed stencil comparison direction Enabled Enabled</p> C++<pre><code>/*\n* Stencil layout during basepass / deferred decals:\n*                BIT ID    | USE\n*                [0]       | sandbox bit (bit to be use by any rendering passes, but must be properly reset to 0 after using)\n*                [1]       | unallocated\n*                [2]       | unallocated\n*                [3]       | Temporal AA mask for translucent object.\n*                [4]       | Lighting channels\n*                [5]       | Lighting channels\n*                [6]       | Lighting channels\n*                [7]       | primitive receive decal bit\n*\n* After deferred decals, stencil is cleared to 0 and no longer packed in this way, to ensure use of fast hardware clears and HiStencil.\n*/\n</code></pre> TBasePassPSFNoLightMapPolicy Base pass shader without light map TBasePassPSTDistanceFieldShadowsAndLightMapPolicyHQ Base pass shader with static lighting TBasePassPSFNoLightMapPolicy Base pass shader with only dynamic lighting TBasePassPSFSelfShadowedTranslucencyPolicy Base pass shader for self shadowed translucency TBasePassVSFNoLightMapPolicy Vertex shader <p>FSceneRenderTargets() is central class to manage binding render targets for variouis passes (e.g. BeginRenderingSceneColor, BeginRenderingGBuffer)</p> <p>D3D11 Stencil pipeline:</p> <p></p>"},{"location":"ue4guide/graphics-development/custom-passes-extensions/custom-stencil-walkthrough-pt1/","title":"GOAL/Endresult","text":"<ul> <li>Apply Material with MD=Arena to Objects in Scene</li> <li>Expected result: they get culled out through a hardcoded stencil sphere</li> </ul> <p>Two cases:</p> <ol> <li>Normal gameboard arena</li> <li>Half-dome portal gameboard</li> </ol>"},{"location":"ue4guide/graphics-development/custom-passes-extensions/custom-stencil-walkthrough-pt1/#stencilmaskval-1-","title":"StencilMaskVal: 1 =&gt;","text":"<p>arena:   allowed to write: stencil_val == 1 &amp;&amp; depth_near stadium: allowed to write:                  &amp;&amp; depth_near</p>"},{"location":"ue4guide/graphics-development/custom-passes-extensions/custom-stencil-walkthrough-pt1/#stencilmaskval-2-","title":"StencilMaskVal: 2 =&gt;","text":"<p>arena:   allowed to write: stencil_val == 2 &amp;&amp; depth_near stadium: allowed to write: stencil_val != 2 &amp;&amp; depth_near</p>"},{"location":"ue4guide/graphics-development/custom-passes-extensions/custom-stencil-walkthrough-pt1/#steps","title":"Steps","text":"<p>Sphere write out stencil_val = 1</p> <p>Draw Arena: StencilOp = &lt; 3 DepthOp = depth_near</p> <p>Draw Stadium: StencilOp != 2 DepthOp    = depth_near</p>"},{"location":"ue4guide/graphics-development/custom-passes-extensions/custom-stencil-walkthrough-pt1/#highlevel-implementation-tasks","title":"Highlevel implementation tasks","text":"<ol> <li> <p>Hardcode render two spheres as the stencil geo into stencil buffer (just piggy back on custom depth)    Case: Normal gameboard    Case: Portal gameboard    Case: Special (space tear)    - Sphere one writes stencil value that masks arena geo    - Sphere two writes stencil value that masks stadium geo</p> <ul> <li>Nongoal: Exact stencil operations/mask bits unimportant; figure them out later. Just need to make sure it doesn't get stomped</li> <li>Goal: See how this affects translucent/masked materials whether in the arena or stadium and others that may not be thinking of (like decals/particles/etc)</li> </ul> </li> <li> <p>Modify prepass :    - Prepass arena geo with stencil ops: Depth Test, Depth Write, Stencil=Keep (do not write), Stencil Test      Stencil Compare = Equal &amp; Stencil Op = Keep, Depth Write, Depth Compare = Greater    - Prepass everything else as normal</p> </li> <li> <p>Modify the basepass:    - Render arena geo first    - Render everything else as normal    - Possible Issues: Filtering out arena geo from the normal execution flow</p> </li> </ol>"},{"location":"ue4guide/graphics-development/custom-passes-extensions/custom-stencil-walkthrough-pt1/#approaches","title":"Approaches","text":"<ol> <li>MaterialDomain + ViewRelevance as the extension point</li> </ol> <p>GameThread:</p> <ul> <li>CreateSceneProxies/Renderstate</li> <li>Sometimes dirty it/recreate it for dynamic stuff</li> </ul> <p>RenderThread: SceneProxies implements:</p> <ul> <li>(Everyframe for dynamic/mebbe not for static)GetDynamicMeshElements/GetStaticElements</li> <li> <p>ComputeViewRelevance =&gt;</p> </li> <li> <p>Mark which passes to mark this component to be included in that pass</p> </li> <li> <p>This also more complicated than just what is being returned here bc we also have to take into account the material (e.g. if the material is translucent=&gt;viewrelevance for translucency)     NOTE: Look at how custom depth property in the component is percolated all the way to the RT and how it gets added to custom depth primset</p> </li> <li> <p>Extend SetPrimitiveViewRelevance(FPrimitiveViewRelevance&amp; OutViewRelevance) const</p> <ul> <li>If MaterialDomain == MD_BBArena, outviewrelevance.arenarelevance = 1</li> </ul> </li> </ul> <p>Render Side:</p> <ul> <li> <p>Gather all viewrelevance.arena into a drawlist/primset</p> </li> <li> <p>REFERENCES: custom depth, StaticMeshBatchVisibility, VisibleDynamicPrimitives, TranslucentPrimSet, CustomDepthSet      DynamicMeshElements       To add to custom primsets (e.g. customdepthprimset/translucent), it's in this function:       FRelevancePacket::ComputeRelevance() is where it updatees them (in parallel way)       FRelevancePacket::RenderThreadFinalize() is where it writes them back out to FSceneView/FScene</p> </li> <li> <p>REFERENCES: PositionOnlyDepthDrawList, DepthDrawList, BasePassUniformLightMapPolicyDrawList       Here's where we create the drawlists: <code>void FStaticMesh::AddToDrawLists(FRHICommandListImmediate&amp; RHICmdList, FScene* Scene)</code></p> </li> <li> <p>Depth: Prepass Render Arena</p> </li> <li> <p>Prepass arena geo with stencil ops: Depth Test, Depth Write, Stencil=Keep (do not write), Stencil Test\u000b       - This is done in FDeferredShadingSceneRenderer::RenderPrePassView</p> </li> <li> <p>Base Pass:</p> </li> <li>Custom Function to render our arnea-&gt; ?????</li> <li>Make sure it doesn't get rendered in normal pass -&gt; ????</li> </ul> C++<pre><code>UPrimitiveComponent.bRenderinmainpass\nShouldUseAsOccluder()\nShouldRenderInMainPass()\n    - Looks like it's used alongside ShouldIncludeDomainInMeshPass\n\nGetMaterialRelevance\nShouldIncludeDomainInMeshPass()\n\nFMeshBatch.UseDynamicData\nFMeshBatch.ReverseCulling\nFMeshBatch.CastShadow\nFMeshBatch.bUseAsOccluder\n</code></pre> <ol> <li> <p>Create separate primsets like custom depth and add our arena components to that    Advnatages: Might be simpler    Disadvantage: Might be rigid and inflexible with lots of edge cases        Ex: What happens when we need to draw things that are in both stadium &amp; arena? viewrelevance bitmask sounds better</p> </li> <li> <p>Just take a look at decals/mesh decals</p> </li> </ol>"},{"location":"ue4guide/graphics-development/custom-passes-extensions/custom-stencil-walkthrough-pt1/#helpful-bits","title":"Helpful bits","text":"C++<pre><code>SetDepthStencilStateForBasePass()\nTStaticDepthStencilState&lt;...&gt;::GetStaticState() for the class defining all the stencil op state\nTStaticStencilState&lt;&gt;::GetRHI() for getting the default stencil (iirc, stencil expects to be set back to the default but not sure)\nRHICommandSetStencilRef() for setting stencil\nCustom depth primset\nDecals\nDecals:PostProcessing\n\n  FTranslucentPrimSet\n  FCustomDepthPrimSet\n  StencilDithering for LOD transitoins\n</code></pre>"},{"location":"ue4guide/graphics-development/custom-passes-extensions/custom-stencil-walkthrough-pt1/#visiblity-culling-interesting-things","title":"Visiblity Culling Interesting things","text":"C++<pre><code>virtual bool CanBeOccluded() const override\n    -Gets Called in FPrimitiveSceneInfo::AddToScene() &amp; setting FScene.PrimitiveOcclusionFlags\n\nFrustumCull&lt;true, true&gt;(Scene, View);\n\nFViewInfo\n    FSceneBitArray PrimitiveVisibilityMap;\n    ICustomVisibilityQuery* CustomVisibilityQuery\n</code></pre> <p>There's a separation between PrimitiveBounds &amp; PrimitiveOcclusionBounds</p>"},{"location":"ue4guide/graphics-development/custom-passes-extensions/custom-stencil-walkthrough-pt2/","title":"STATIC PATH FOR STATICMESHCOMPONENT","text":"<p>AddPrimitive-&gt;   AddPrimitiveSceneInfo_RenderThread-&gt;     FPrimitiveSceneInfo::AddToScene-&gt;       FPrimitiveSceneInfo::AddStaticMeshes-&gt;         SceneProxy::DrawStaticElements           Collects FMeshBatch elemets and sets flags on them:</p> Text Only<pre><code>      NOTE: need to update this line\n        bSafeToUseUnifiedMesh =\n          !(bAnySectionUsesDitheredLODTransition &amp;&amp; !bAllSectionsUseDitheredLODTransition) // can't use a single section if they are not homogeneous\n          &amp;&amp; Material-&gt;WritesEveryPixel()\n          &amp;&amp; !Material-&gt;IsTwoSided()\n          &amp;&amp; !IsTranslucentBlendMode(Material-&gt;GetBlendMode())\n          &amp;&amp; !Material-&gt;MaterialModifiesMeshPosition_RenderThread()\n          &amp;&amp; Material-&gt;GetMaterialDomain() == MD_Surface;\n      NOTE: Check everywhere in the code you have (Material-&gt;GetMaterialDomain() == MD_Surface)\n\n      NOTE: Re-eval this line of code (StaticMeshRender.cpp)\n          // Depth pass is only used for deferred renderer. The other conditions are meant to match the logic in FStaticMesh::AddToDrawLists.\n          // Could not link to \"GEarlyZPassMovable\" so moveable are ignored.\n          bUseUnifiedMeshForDepth = ShouldUseAsOccluder() &amp;&amp; GetScene().GetShadingPath() == EShadingPath::Deferred &amp;&amp; !IsMovable();\n    Mesh::AddToDrawLists - Add the static mesh to the appropriate draw lists.\n      NOTE JACKPOT: here's where we add to various drawlists.\n        Ex: FDepthDrawingPolicyFactory::AddStaticMesh() &amp;\n          FBasePassOpaqueDrawingPolicyFactory::AddStaticMesh(RHICmdList, Scene, this);\n\n        FBasePassOpaqueDrawingPolicyFactory::AddStaticMesh\n          Static (not movable) StaticMeshComponent gets added iff ShouldIncludeDomainInMeshPass(Material-&gt;GetMaterialDomain()) &amp;&amp; !IsTranslucentBlendMode(BlendMode)\n\n          FBasePassOpaqueDrawingPolicyFactory::ProcessBasePassMesh() - this function stores the renderstate for this mesh batch\n\n        NOTE: If we want to piggy back off the existing drawingpolicies &amp; existing basepasses, extend TBasePassDrawingPolicy() to handle arenamaterial domain\n            and set the correct stencil render state\n\n        NOTE: JACKPOT: Also might be able to expand BasePassDrawListTYpe in FDrawBasePassStaticMeshAction::Process&lt;&gt;\n            enum EBasePassDrawListType\n            {\n              EBasePass_Default=0,\n              EBasePass_Masked,\n              EBasePass_MAX\n            };\n\n            Which means add BasePassUniformLightMapPolicyDrawList, BasePassSelfShadowedTranslucencyDrawList, BasePassSelfShadowedCachedPointIndirectTranslucencyDrawList\n            variables to FScene as drawlists for our custom geo\n\n            And extend Scene-&gt;GetBasePassDrawList&lt;LightMapPolicyType&gt;(DrawType);\n</code></pre> <p>BaseDrawingPolicy::   SetSharedState   SetMeshRenderState</p>"},{"location":"ue4guide/graphics-development/custom-passes-extensions/custom-stencil-walkthrough-pt3/","title":"Custom stencil walkthrough pt3","text":"<p>Review:</p> <p>Use proper commenting for editor changes:</p> <p>// @third party code - BEGIN Bebylon - #Eng-Feature: ArenaStencilPass - Comment describing specific change</p> <p>// @third party code - END Bebylon</p> <p>Why BBArenaStencilMD? Overkill just to specify a couple of spheres</p> <ul> <li> <p>Use custom property on static mesh components similar to custom depth/stencil properties</p> </li> <li> <p>FStaticMesh::AddToDrawLists(), add a check against stencil geo and don't add it to the basedrawlists</p> </li> </ul> <p>Are these being used? Remove</p> <p>BeginRenderingCustomPrePass() FinishRenderingCustomPrePass() DrawPrimsStencilOnly() DrawPrimsStencilWriteOnlyOnDepthPass()</p> <p>Fold RenderCustomDepthStencilPrePass() implementation into RenderPrePass()</p> <p>SetDepthStencilStateForBasePass(): Is this doing the right thing?</p> <ul> <li>Revert this back to normal and verify it doesn't break</li> </ul> <p>FDeferredShadingSceneRenderer::RenderPrePassView()</p> <p>-Do all the arena static lists &amp; dynamic</p> <p>-Do all the stadium static lists &amp; dynamic</p> <p>RenderPrePassViewDynamic()</p> <p>-Change to use viewrelevance instead of materialdomain</p> <p>Extend EBasePassDrawListType</p> <p>-FStaticMesh::AddToDrawLists()</p> <p>-Extend *Factory::AddStaticMesh()</p> <p>\u200b   -In this function, you should add</p> <p>\u200b   -*MeshAction::Process()</p> <p>-Extend: *Factory::DrawDynamicMesh()</p> <p>-Rely on viewrelevance instead of material domain</p> <p>To set stencil state: Extend the TBasePassDrawingPolicy:</p> <ul> <li>SetSharedState() &amp; SetMeshRenderState()</li> </ul> <p>Render Pass Order is incorrect in FDeferredShadingSceneRenderer::RenderBasePassView():</p> <p>Draw Static arena, draw dynamic arena</p> <p>Draw Static stadium , dynamic Static</p> <p>Perf degredation setting stencil state over and over</p> <p>Follow-up</p> <p>Tested in VR?</p> <p>Tested packaged?</p> <p>Tested Parallel Render Paths?</p> <p>Searched everywhere MD_Surface &amp; MD_Volume was being referenced?</p> <p>MeshBatchAndRelevance.GetRenderInMainPass()/ should probably do similar to cache</p> <p>ShouldIncludeDomainInMeshPass() to find all references</p>"},{"location":"ue4guide/graphics-development/custom-passes-extensions/custom-stencil-walkthrough-pt4/","title":"Stencil Layers","text":""},{"location":"ue4guide/graphics-development/custom-passes-extensions/custom-stencil-walkthrough-pt4/#properties-to-expose","title":"Properties to expose:","text":"<p>L1_StencilMesh.twosided (Handled</p> <p>L1_StencilMesh.reverse</p>"},{"location":"ue4guide/graphics-development/custom-passes-extensions/custom-stencil-walkthrough-pt4/#prepass","title":"Prepass:","text":"<p>Draw L0_Geo</p>"},{"location":"ue4guide/graphics-development/custom-passes-extensions/custom-stencil-walkthrough-pt4/#draw-l1_stencilmesh","title":"Draw L1_StencilMesh","text":"depth cmp &lt;= L1_StencilMesh.bNotInDbgForceAlways ? near : always depth write = L1_StencilMesh.bIsAnotherWorldPorthole ? infinity : keep stencil_write = L1_StencilRef stencil_cmp &gt;= L0_StencilRef"},{"location":"ue4guide/graphics-development/custom-passes-extensions/custom-stencil-walkthrough-pt4/#draw-l1_geo","title":"Draw L1_Geo:","text":"depth cmp &lt;= near depth_write = fragment_depth stencil cmp == StencilRef_L1 stencil_write = Keep"},{"location":"ue4guide/graphics-development/custom-passes-extensions/custom-stencil-walkthrough-pt4/#draw-l2_stencilmesh","title":"Draw L2_StencilMesh","text":"depth cmp &lt;= L2_StencilMesh.bNotInDbgForceAlways ? near : always depth_write = L2_StencilMesh.bIsAnotherWorldPorthole ? infinity : keep stencil_write = L2_StencilRef stencil_cmp =&gt; <p>\u200b   if L2_StencilMesh.bIsScopedToPreviousLayer</p> <p>\u200b   ? GreaterOrEq to StencilRef_L2</p> <p>\u200b   : Always</p>"},{"location":"ue4guide/graphics-development/custom-passes-extensions/custom-stencil-walkthrough-pt4/#draw-l2_geo","title":"Draw L2_Geo:","text":"depth cmp &lt;= near depth_write = fragment_depth stencil cmp == StencilRef_L2 stencil_write = Keep"},{"location":"ue4guide/graphics-development/custom-passes-extensions/custom-stencil-walkthrough-pt4/#final-layer","title":"FINAL LAYER:","text":"depth cmp &lt;= near Avatar/Asteroids"},{"location":"ue4guide/graphics-development/custom-passes-extensions/custom-stencil-walkthrough-pt4/#question","title":"Question:","text":"What happens when you're inside? Avatar hands? Objects that cross the boundary of portal"},{"location":"ue4guide/graphics-development/custom-passes-extensions/custom-stencil-walkthrough-pt4/#basepass","title":"Basepass:","text":"<p>Draw everything with depth_cmp = equal</p>"},{"location":"ue4guide/graphics-development/custom-passes-extensions/custom-stencil-walkthrough-pt4/#translucents","title":"Translucents:","text":"<p>Draw everything in its already sorted back-to-front order, Because this pass hasn't primed the depth we can't use depth_cmd = equal to scope. We need to just let these draw and rely on artist constraints to stop particles/transparents from crossing the portal boundaries unless intended that way (smoke pouring out a hell portal for example).</p>"},{"location":"ue4guide/graphics-development/custom-passes-extensions/custom-stencil-walkthrough-pt5/","title":"Custom stencil walkthrough pt5","text":"<p>DONE: Parallel render paths need updated to work.</p> <p>DONE: bSafeToUseUnifiedMesh needs to be looked at, using any MD_ArenaSurface objects in it causes issues.</p> <p>DONE: There is a single viewport stencil clear used in FSceneRenderTargets::BeginRenderingTranslucency that needs commented out to work in VR mode.</p> <p>DONE: Current implementation will result in higher layers stomping over lower ones in the base-pass if their depth is equal to an object in the lower layer, the current workaround is to offset depth slightly.</p> <p>TODO: TemporalAA not tested.</p> <p>Generate_StencilMask_DepthTest: {T,F}</p> <p>Composite_StencilMask_Func:</p> <p>PrvLayerMask: {Ignore|Invert|Src}</p> <p>CurLayerMask:</p> <p>MaskOp: MaskStencilPass_MaskDepthPass, MaskStencilPass_MaskDepthPass</p> <p>====================</p> <p>DepthEnable: {True, False}</p> <p>DepthWriteMask: 8bits</p> <p>Cmp: {False, True, !=, ==, &lt;, &gt;=, &gt;, &gt;= }</p> <p>StencilEnable: {True, False}</p> <p>StencilReadMask: 8bits</p> <p>StencilWriteMask: 8bits</p> <p>FrontFacingPoly:</p> <p>StencilFail_Depth*: {OP_KEEP, OP_ZERO, OP_REPLACE, OP_INCR_SAT, OP_DECR_SAT, OP_INVERT, OP_INCR, OP_DECR}</p> <p>StencilPass_DepthFail: {OP_KEEP, OP_ZERO, OP_REPLACE, OP_INCR_SAT, OP_DECR_SAT, OP_INVERT, OP_INCR, OP_DECR}</p> <p>StencilPass_DepthPass: {OP_KEEP, OP_ZERO, OP_REPLACE, OP_INCR_SAT, OP_DECR_SAT, OP_INVERT, OP_INCR, OP_DECR}</p> <p>BackFacingPoly:</p> <p>StencilFail_Depth*: {OP_KEEP, OP_ZERO, OP_REPLACE, OP_INCR_SAT, OP_DECR_SAT, OP_INVERT, OP_INCR, OP_DECR}</p> <p>StencilPass_DepthFail: {OP_KEEP, OP_ZERO, OP_REPLACE, OP_INCR_SAT, OP_DECR_SAT, OP_INVERT, OP_INCR, OP_DECR}</p> <p>StencilPass_DepthPass: {OP_KEEP, OP_ZERO, OP_REPLACE, OP_INCR_SAT, OP_DECR_SAT, OP_INVERT, OP_INCR, OP_DECR}</p>"},{"location":"ue4guide/graphics-development/custom-passes-extensions/stencil-masking-feature/","title":"Approach","text":"<ol> <li>Render a sphere into stencil channel. Goal: In 2-4 hrs, extend UE4 to write to stencil buffer. Non-goal: any generality support, edge cases with drawing arena vs stadium order, etc.</li> <li>Set render states to stencil buffer</li> <li>Render Sphere (hardcoded) into stencil channel</li> <li>Ensure it doesn't mess with the remaining pipeline<ol> <li>Test in a simple test level</li> <li>Test in U-Master-GoldFingers</li> </ol> </li> <li>Validate in RenderDoc</li> <li> <p>Hardcode some test geo to stencil clip against the mask you created. Validate that it works</p> <ol> <li>Try with Opaque</li> <li>Try with Translucent for shits &amp; giggles</li> </ol> </li> <li> <p>Integrate stenciling for all materials on Material Domain BBArena. Goal: Only support happy path (opaque objects + ground floor within arena sphere. Non-goal: fixing any problems with objects in the arena edge, translucency, particles if they don't work</p> </li> <li>For any material in Arena, stencil mask with the hardcoded rendered sphere mask.</li> <li>Extend BasePass with custom subpass</li> <li>Might need to Create DrawingPolicy for Arena (avoid at this stage if you can easily hardcode around it)</li> <li> <p>Might need to extend PrimitiveViewRelevance for arena (avoid at this stage if you can easily hardcode around it)</p> </li> <li> <p>Frustum Culling</p> </li> <li> <p>Extend FrustumCull&lt;&gt;() to sphere cull arena primitive components from current arena zone</p> </li> <li> <p>Finishing pass. Goal: Make feature production ready</p> </li> <li>Work through possible bugs with particles, translucent materials, objects coming in &amp; out of the edge</li> <li>Test with three different arenas</li> <li>Test with panning and zooming</li> <li>Test with half-dome special portal (should be in Alex's dev folder)</li> <li>Test with laser special that has full-dome portal</li> </ol>"},{"location":"ue4guide/graphics-development/custom-passes-extensions/stencil-masking-feature/#documentation","title":"Documentation","text":"<p>https://docs.unrealengine.com/latest/INT/Programming/Rendering/Overview/index.html https://docs.unrealengine.com/latest/INT/Programming/Rendering/ThreadedRendering/index.html https://medium.com/@lordned/unreal-engine-4-rendering-overview-part-1-c47f2da65346</p>"},{"location":"ue4guide/graphics-development/custom-passes-extensions/stencil-masking-feature/#helpful-areas-for-reference","title":"Helpful areas for reference","text":""},{"location":"ue4guide/graphics-development/custom-passes-extensions/stencil-masking-feature/#scenevisibilitycpp","title":"SceneVisibility.cpp","text":"<ul> <li> <p>FSceneRenderer::PreVisibilityFrameSetup()</p> </li> <li> <p>OcclusionCull()</p> </li> <li> <p>FSceneRenderer::ComputeViewVisibility()</p> </li> </ul>"},{"location":"ue4guide/graphics-development/custom-passes-extensions/stencil-masking-feature/#custom-depthcustom-stencil-feature","title":"Custom Depth/Custom Stencil feature","text":"<ul> <li>bool FCustomDepthPrimSet::DrawPrims(FRHICommandListImmediate&amp; RHICmdList, const FViewInfo&amp; View, FDrawingPolicyRenderState&amp; DrawRenderState, bool bWriteCustomStencilValues)</li> </ul>"},{"location":"ue4guide/graphics-development/custom-passes-extensions/stencil-masking-feature/#understanding-primitivecomponents","title":"Understanding PrimitiveComponents","text":"<ul> <li> <p>CableComponent</p> </li> <li> <p>CustomMeshComponent</p> </li> <li> <p>GetDynamicMeshElements()/DrawStaticMeshElements()</p> </li> </ul>"},{"location":"ue4guide/graphics-development/custom-passes-extensions/stencil-masking-feature/#escenedepthprioritygroup","title":"ESceneDepthPriorityGroup","text":"<ul> <li>False hope - just used for Editor compositing</li> </ul>"},{"location":"ue4guide/graphics-development/custom-passes-extensions/stencil-masking-feature/#ebasepassdrawlisttype","title":"EBasePassDrawListType","text":"<ul> <li>seems we might be able to sort arena &amp; stadium primitives by extending this enum</li> </ul>"},{"location":"ue4guide/graphics-development/custom-passes-extensions/stencil-masking-feature/#fprimitivesceneinfoaddtoscene","title":"FPrimitiveSceneInfo::AddToScene()","text":"<ul> <li> <p>Sets lots of OcclusionFlags (CanBeOccluded, HasPrecomputedVisibility, etc)</p> </li> <li> <p>Might be a good place to add ArenaOcclusion flag</p> </li> <li> <p>Also look at FPrimitiveSceneInfo::AddStaticMeshes()</p> </li> <li> <p>Decals</p> </li> <li> <p>UE4 Git repo commits related to BB Custom Materials</p> </li> <li> <p>BBArenaSurface</p> </li> <li> <p>BBFakeSSShadingMode</p> </li> <li> <p>https://docs.unrealengine.com/latest/INT/Programming/Rendering/Overview/index.html</p> </li> <li> <p>void FDeferredShadingSceneRenderer::Render(FRHICommandListImmediate&amp; RHICmdList)</p> </li> </ul>"},{"location":"ue4guide/graphics-development/custom-passes-extensions/stencil-masking-feature/#stadium-scaling-future-work","title":"Stadium Scaling Future Work","text":"<ul> <li>For Stadium primitives: See if we can move them to the static rendering path even though they're dynamic so that we can cache scene traversal as close to RHI level</li> <li>If possible, maybe we can add another rendering path instead of static vs. dynamic</li> <li>Fixing indirect lighting cache (rotate SH lights for stadium objects)</li> </ul>"},{"location":"ue4guide/graphics-development/how-to/explicit-render-to-rendertarget/","title":"Explicit RenderTarget Operations","text":""},{"location":"ue4guide/graphics-development/how-to/explicit-render-to-rendertarget/#gamethread-update--upload-to-gpu","title":"Gamethread Update &amp; Upload To GPU","text":"<p>Look at UCanvasRenderTarget2D &amp; UCanvas</p> C++<pre><code>void UCanvasRenderTarget2D::RepaintCanvas()\n{\n  // Create or find the canvas object to use to render onto the texture.  Multiple canvas render target textures can share the same canvas.\n  static const FName CanvasName(TEXT(\"CanvasRenderTarget2DCanvas\"));\n  UCanvas* Canvas = (UCanvas*)StaticFindObjectFast(UCanvas::StaticClass(), GetTransientPackage(), CanvasName);\n  if (Canvas == nullptr)\n  {\n    Canvas = NewObject&lt;UCanvas&gt;(GetTransientPackage(), CanvasName);\n    Canvas-&gt;AddToRoot();\n  }\n\n  // Create the FCanvas which does the actual rendering.\n  const UWorld* WorldPtr = World.Get();\n  const ERHIFeatureLevel::Type FeatureLevel = WorldPtr != nullptr ? World-&gt;FeatureLevel : GMaxRHIFeatureLevel;\n  FCanvas RenderCanvas(GameThread_GetRenderTargetResource(), nullptr, FApp::GetCurrentTime() - GStartTime, FApp::GetDeltaTime(), FApp::GetCurrentTime() - GStartTime, FeatureLevel);\n\n  Canvas-&gt;Init(GetSurfaceWidth(), GetSurfaceHeight(), nullptr, &amp;RenderCanvas);\n  Canvas-&gt;Update();\n\n  // Update the resource immediately to remove it from the deferred resource update list. This prevents the texture\n  // from being cleared each frame.\n  UpdateResourceImmediate(bShouldClearRenderTargetOnReceiveUpdate);\n\n  // Enqueue the rendering command to set up the rendering canvas.\n  ENQUEUE_UNIQUE_RENDER_COMMAND_ONEPARAMETER\n    (\n      CanvasRenderTargetMakeCurrentCommand,\n      FTextureRenderTarget2DResource*,\n      TextureRenderTarget,\n      (FTextureRenderTarget2DResource*)GameThread_GetRenderTargetResource(),\n      {\n        SetRenderTarget(RHICmdList, TextureRenderTarget-&gt;GetRenderTargetTexture(), FTexture2DRHIRef(), true);\n        RHICmdList.SetViewport(0, 0, 0.0f, TextureRenderTarget-&gt;GetSizeXY().X, TextureRenderTarget-&gt;GetSizeXY().Y, 1.0f);\n      }\n  );\n\n\n  if (!IsPendingKill() &amp;&amp; OnCanvasRenderTargetUpdate.IsBound())\n  {\n    OnCanvasRenderTargetUpdate.Broadcast(Canvas, GetSurfaceWidth(), GetSurfaceHeight());\n  }\n\n  ReceiveUpdate(Canvas, GetSurfaceWidth(), GetSurfaceHeight());\n\n  // Clean up and flush the rendering canvas.\n  Canvas-&gt;Canvas = nullptr;\n  RenderCanvas.Flush_GameThread();\n\n  // Enqueue the rendering command to copy the freshly rendering texture resource back to the render target RHI\n  // so that the texture is updated and available for rendering.\n  ENQUEUE_UNIQUE_RENDER_COMMAND_ONEPARAMETER\n    (\n      CanvasRenderTargetResolveCommand,\n      FTextureRenderTargetResource*,\n      RenderTargetResource,\n      GameThread_GetRenderTargetResource(),\n      {\n        RHICmdList.CopyToResolveTarget(RenderTargetResource-&gt;GetRenderTargetTexture(), RenderTargetResource-&gt;TextureRHI, true, FResolveParams());\n      }\n  );\n}\n</code></pre>"},{"location":"ue4guide/graphics-development/how-to/explicit-render-to-rendertarget/#render-from-game-thread","title":"Render from Game Thread:","text":"C++<pre><code>bool FCanvasTriangleRendererItem::Render_GameThread(const FCanvas* Canvas)\n{\n  float CurrentRealTime = 0.f;\n  float CurrentWorldTime = 0.f;\n  float DeltaWorldTime = 0.f;\n\n  if (!bFreezeTime)\n  {\n    CurrentRealTime = Canvas-&gt;GetCurrentRealTime();\n    CurrentWorldTime = Canvas-&gt;GetCurrentWorldTime();\n    DeltaWorldTime = Canvas-&gt;GetCurrentDeltaWorldTime();\n  }\n\n  checkSlow(Data);\n  // current render target set for the canvas\n  const FRenderTarget* CanvasRenderTarget = Canvas-&gt;GetRenderTarget();\n  FSceneViewFamily* ViewFamily = new FSceneViewFamily(FSceneViewFamily::ConstructionValues(\n    CanvasRenderTarget,\n    Canvas-&gt;GetScene(),\n    FEngineShowFlags(ESFIM_Game))\n    .SetWorldTimes(CurrentWorldTime, DeltaWorldTime, CurrentRealTime)\n    .SetGammaCorrection(CanvasRenderTarget-&gt;GetDisplayGamma()));\n\n  FIntRect ViewRect(FIntPoint(0, 0), CanvasRenderTarget-&gt;GetSizeXY());\n\n  // make a temporary view\n  FSceneViewInitOptions ViewInitOptions;\n  ViewInitOptions.ViewFamily = ViewFamily;\n  ViewInitOptions.SetViewRectangle(ViewRect);\n  ViewInitOptions.ViewOrigin = FVector::ZeroVector;\n  ViewInitOptions.ViewRotationMatrix = FMatrix::Identity;\n  ViewInitOptions.ProjectionMatrix = Data-&gt;Transform.GetMatrix();\n  ViewInitOptions.BackgroundColor = FLinearColor::Black;\n  ViewInitOptions.OverlayColor = FLinearColor::White;\n\n  FSceneView* View = new FSceneView(ViewInitOptions);\n\n  bool bNeedsToSwitchVerticalAxis = RHINeedsToSwitchVerticalAxis(Canvas-&gt;GetShaderPlatform()) &amp;&amp; XOR(IsMobileHDR(),Canvas-&gt;GetAllowSwitchVerticalAxis());\n\n  struct FDrawTriangleParameters\n  {\n    FSceneView* View;\n    FRenderData* RenderData;\n    uint32 bIsHitTesting : 1;\n    uint32 AllowedCanvasModes;\n  };\n  FDrawTriangleParameters DrawTriangleParameters =\n  {\n    View,\n    Data,\n    (uint32)Canvas-&gt;IsHitTesting(),\n    Canvas-&gt;GetAllowedModes()\n  };\n\n  InitTriangleBuffers(&amp;Data-&gt;VertexFactory, Data-&gt;Triangles, *View, bNeedsToSwitchVerticalAxis);\n\n  FDrawTriangleParameters Parameters = DrawTriangleParameters;\n  ENQUEUE_RENDER_COMMAND(DrawTriangleCommand)(\n    [Parameters](FRHICommandListImmediate&amp; RHICmdList)\n    {\n      FDrawingPolicyRenderState DrawRenderState(*Parameters.View);\n\n      // disable depth test &amp; writes\n      DrawRenderState.SetDepthStencilState(TStaticDepthStencilState&lt;false, CF_Always&gt;::GetRHI());\n\n      SCOPED_DRAW_EVENT(RHICmdList, CanvasDrawTriangle);\n      for (int32 TriIdx = 0; TriIdx &lt; Parameters.RenderData-&gt;Triangles.Num(); TriIdx++)\n      {\n        const FRenderData::FTriangleInst&amp; Tri = Parameters.RenderData-&gt;Triangles[TriIdx];\n        // update the FMeshBatch\n        FMeshBatch&amp; TriMesh = Parameters.RenderData-&gt;TriMesh.TriMeshElement;\n        TriMesh.VertexFactory = &amp;Parameters.RenderData-&gt;VertexFactory;\n        TriMesh.MaterialRenderProxy = Parameters.RenderData-&gt;MaterialRenderProxy;\n        TriMesh.Elements[0].BaseVertexIndex = 3 * TriIdx;\n\n        GetRendererModule().DrawTileMesh(RHICmdList, DrawRenderState, *Parameters.View, TriMesh, Parameters.bIsHitTesting, Tri.HitProxyId);\n      }\n\n      Parameters.RenderData-&gt;StaticMeshVertexBuffers.PositionVertexBuffer.ReleaseResource();\n      Parameters.RenderData-&gt;StaticMeshVertexBuffers.StaticMeshVertexBuffer.ReleaseResource();\n      Parameters.RenderData-&gt;StaticMeshVertexBuffers.ColorVertexBuffer.ReleaseResource();\n      Parameters.RenderData-&gt;TriMesh.ReleaseResource();\n      Parameters.RenderData-&gt;VertexFactory.ReleaseResource();\n\n      delete Parameters.View-&gt;Family;\n      delete Parameters.View;\n      if (Parameters.AllowedCanvasModes &amp; FCanvas::Allow_DeleteOnRender)\n      {\n        delete Parameters.RenderData;\n      }\n    });\n\n  if (Canvas-&gt;GetAllowedModes() &amp; FCanvas::Allow_DeleteOnRender)\n  {\n    Data = nullptr;\n  }\n  return true;\n}\n</code></pre>"},{"location":"ue4guide/graphics-development/how-to/render-with-pipelinestateobject/","title":"Render With PipelineStateObject","text":"C++<pre><code>static const FName RendererModuleName( \"Renderer\" );\n  // @todo: JIRA UE-41879 and UE-43829 - added defensive guards against memory trampling on this render command to try and ascertain why it occasionally crashes\n  uint32 MemoryGuard1 = 0xaffec7ed;\n\n  // Load the renderermodule on the main thread, as the module manager is not thread-safe, and copy the ptr into the render command, along with 'this' (which is protected by BlockUntilAvailable in ~FViewportSurfaceReader())\n  IRendererModule* RendererModule = &amp;FModuleManager::GetModuleChecked&lt;IRendererModule&gt;(RendererModuleName);\n\n  uint32 MemoryGuard2 = 0xaffec7ed;\n  IRendererModule* RendererModuleDebug = RendererModule;\n\n  auto RenderCommand = [=](FRHICommandListImmediate&amp; RHICmdList){\n\n    // @todo: JIRA UE-41879 and UE-43829. If any of these ensures go off, something has overwritten the memory for this render command (buffer underflow/overflow?)\n    bool bMemoryTrample = !ensureMsgf(RendererModule, TEXT(\"RendererModule has become null. This indicates a memory trample.\")) ||\n      !ensureMsgf(RendererModule == RendererModuleDebug, TEXT(\"RendererModule and RendererModuleDebug are not equal (0x%016x != 0x%016x). This indicates a memory trample.\"), (void*)RendererModule, (void*)RendererModuleDebug) ||\n      !ensureMsgf(MemoryGuard1 == 0xaffec7ed, TEXT(\"Memory guard 1 is now 0x%08x, expected 0xaffec7ed.\"), MemoryGuard1) ||\n      !ensureMsgf(MemoryGuard2 == 0xaffec7ed, TEXT(\"Memory guard 2 is now 0x%08x, expected 0xaffec7ed.\"), MemoryGuard2);\n\n    if (bMemoryTrample)\n    {\n      // In the hope that 'this' is still ok, triggering the event will prevent a deadlock. If it's not ok, this may crash, but it was going to crash anyway\n      AvailableEvent-&gt;Trigger();\n      return;\n    }\n\n    const FIntPoint TargetSize(ReadbackTexture-&gt;GetSizeX(), ReadbackTexture-&gt;GetSizeY());\n\n    FPooledRenderTargetDesc OutputDesc = FPooledRenderTargetDesc::Create2DDesc(\n      TargetSize,\n      ReadbackTexture-&gt;GetFormat(),\n      FClearValueBinding::None,\n      TexCreate_None,\n      TexCreate_RenderTargetable,\n      false);\n\n    // @todo: JIRA UE-41879 and UE-43829. If any of these ensures go off, something has overwritten the memory for this render command (buffer underflow/overflow?)\n    bMemoryTrample = !ensureMsgf(RendererModule, TEXT(\"RendererModule has become null. This indicates a memory trample.\")) ||\n      !ensureMsgf(RendererModule == RendererModuleDebug, TEXT(\"RendererModule and RendererModuleDebug are not equal (0x%16x != 0x%16x). This indicates a memory trample.\"), (void*)RendererModule, (void*)RendererModuleDebug) ||\n      !ensureMsgf(MemoryGuard1 == 0xaffec7ed, TEXT(\"Memory guard 1 is now 0x%08x, expected 0xaffec7ed.\"), MemoryGuard1) ||\n      !ensureMsgf(MemoryGuard2 == 0xaffec7ed, TEXT(\"Memory guard 2 is now 0x%08x, expected 0xaffec7ed.\"), MemoryGuard2);\n\n    if (bMemoryTrample)\n    {\n      // In the hope that 'this' is still ok, triggering the event will prevent a deadlock. If it's not ok, this may crash, but it was going to crash anyway\n      AvailableEvent-&gt;Trigger();\n      return;\n    }\n\n    TRefCountPtr&lt;IPooledRenderTarget&gt; ResampleTexturePooledRenderTarget;\n    RendererModule-&gt;RenderTargetPoolFindFreeElement(RHICmdList, OutputDesc, ResampleTexturePooledRenderTarget, TEXT(\"ResampleTexture\"));\n    check(ResampleTexturePooledRenderTarget);\n\n    const FSceneRenderTargetItem&amp; DestRenderTarget = ResampleTexturePooledRenderTarget-&gt;GetRenderTargetItem();\n\n    SetRenderTarget(RHICmdList, DestRenderTarget.TargetableTexture, FTextureRHIRef());\n    RHICmdList.SetViewport(0, 0, 0.0f, TargetSize.X, TargetSize.Y, 1.0f);\n\n    FGraphicsPipelineStateInitializer GraphicsPSOInit;\n    RHICmdList.ApplyCachedRenderTargets(GraphicsPSOInit);\n    GraphicsPSOInit.BlendState = TStaticBlendState&lt;&gt;::GetRHI();\n    GraphicsPSOInit.RasterizerState = TStaticRasterizerState&lt;&gt;::GetRHI();\n    GraphicsPSOInit.DepthStencilState = TStaticDepthStencilState&lt;false,CF_Always&gt;::GetRHI();\n\n    const ERHIFeatureLevel::Type FeatureLevel = GMaxRHIFeatureLevel;\n\n    TShaderMap&lt;FGlobalShaderType&gt;* ShaderMap = GetGlobalShaderMap(FeatureLevel);\n    TShaderMapRef&lt;FScreenVS&gt; VertexShader(ShaderMap);\n    TShaderMapRef&lt;FScreenPS&gt; PixelShader(ShaderMap);\n\n    GraphicsPSOInit.BoundShaderState.VertexDeclarationRHI = RendererModule-&gt;GetFilterVertexDeclaration().VertexDeclarationRHI;\n    GraphicsPSOInit.BoundShaderState.VertexShaderRHI = GETSAFERHISHADER_VERTEX(*VertexShader);\n    GraphicsPSOInit.BoundShaderState.PixelShaderRHI = GETSAFERHISHADER_PIXEL(*PixelShader);\n    GraphicsPSOInit.PrimitiveType = PT_TriangleList;\n\n    SetGraphicsPipelineState(RHICmdList, GraphicsPSOInit);\n\n    FTexture2DRHIRef SourceBackBuffer = RHICmdList.GetViewportBackBuffer(ViewportRHI);\n\n    if (TargetSize.X != SourceBackBuffer-&gt;GetSizeX() || TargetSize.Y != SourceBackBuffer-&gt;GetSizeY())\n    {\n      PixelShader-&gt;SetParameters(RHICmdList, TStaticSamplerState&lt;SF_Bilinear&gt;::GetRHI(), SourceBackBuffer);\n    }\n    else\n    {\n      PixelShader-&gt;SetParameters(RHICmdList, TStaticSamplerState&lt;SF_Point&gt;::GetRHI(), SourceBackBuffer);\n    }\n\n    float U = float(CaptureRect.Min.X) / float(SourceBackBuffer-&gt;GetSizeX());\n    float V = float(CaptureRect.Min.Y) / float(SourceBackBuffer-&gt;GetSizeY());\n    float SizeU = float(CaptureRect.Max.X) / float(SourceBackBuffer-&gt;GetSizeX()) - U;\n    float SizeV = float(CaptureRect.Max.Y) / float(SourceBackBuffer-&gt;GetSizeY()) - V;\n\n    RendererModule-&gt;DrawRectangle(\n      RHICmdList,\n      0, 0,\t\t\t\t\t\t\t\t\t// Dest X, Y\n      TargetSize.X,\t\t\t\t\t\t\t// Dest Width\n      TargetSize.Y,\t\t\t\t\t\t\t// Dest Height\n      U, V,\t\t\t\t\t\t\t\t\t// Source U, V\n      1, 1,\t\t\t\t\t\t\t\t\t// Source USize, VSize\n      CaptureRect.Max - CaptureRect.Min,\t\t// Target buffer size\n      FIntPoint(1, 1),\t\t\t\t\t\t// Source texture size\n      *VertexShader,\n      EDRF_Default);\n\n    // Asynchronously copy render target from GPU to CPU\n    const bool bKeepOriginalSurface = false;\n    RHICmdList.CopyToResolveTarget(\n      DestRenderTarget.TargetableTexture,\n      ReadbackTexture,\n      bKeepOriginalSurface,\n      FResolveParams());\n\n    void* ColorDataBuffer = nullptr;\n\n    int32 Width = 0, Height = 0;\n    RHICmdList.MapStagingSurface(ReadbackTexture, ColorDataBuffer, Width, Height);\n\n    Callback((FColor*)ColorDataBuffer, Width, Height);\n\n    RHICmdList.UnmapStagingSurface(ReadbackTexture);\n    AvailableEvent-&gt;Trigger();\n  };\n\n  ENQUEUE_UNIQUE_RENDER_COMMAND_ONEPARAMETER(\n    ResolveCaptureFrameTexture,\n    TFunction&lt;void(FRHICommandListImmediate&amp;)&gt;, InRenderCommand, RenderCommand,\n  {\n    InRenderCommand(RHICmdList);\n  });\n</code></pre>"},{"location":"ue4guide/graphics-development/how-to/rendering-outside-normal-render-path/","title":"Rendering Outside Normal Render Path","text":"<p>Also take a look at SceneCaptureRenderer: which creates a separate renderer to do captures</p> C++<pre><code>RHICreateTargetableShaderResource3D\n\nDrawWindow_RenderThread\nFTexture2DRHIRef ViewportRT = bRenderedStereo ? nullptr : ViewportInfo.GetRenderTargetTexture();\nFTexture2DRHIRef BackBuffer = (ViewportRT) ? ViewportRT : RHICmdList.GetViewportBackBuffer(ViewportInfo.ViewportRHI);\n\nFResolveParams ResolveParams;\n                bClear = true; // Force a clear of the UI buffer to black\n\n                // Grab HDR backbuffer\n                RHICmdList.CopyToResolveTarget(FinalBuffer, ViewportInfo.HDRSourceRT, false, ResolveParams);\n\n                // UI backbuffer is temp target\n                BackBuffer = ViewportInfo.UITargetRT;\n\n// Reset the backbuffer as our color render target and also set a depth stencil buffer\nFRHIRenderTargetView ColorView(BackBuffer, 0, -1, bClear ? ERenderTargetLoadAction::EClear : ERenderTargetLoadAction::ELoad, ERenderTargetStoreAction::EStore);\n    FRHIDepthRenderTargetView DepthStencilView(ViewportInfo.DepthStencil, ERenderTargetLoadAction::ENoAction, ERenderTargetStoreAction::ENoAction, ERenderTargetLoadAction::ENoAction, ERenderTargetStoreAction::EStore);\n    FRHISetRenderTargetsInfo Info(1, &amp;ColorView, DepthStencilView);\n\n// Clear the stencil buffer\nRHICmdList.SetRenderTargetsAndClear(Info);\n\n\nSCOPED_DRAW_EVENT(RHICmdList, SlateUI_Composition);\n\nstatic const FName RendererModuleName(\"Renderer\");\nIRendererModule&amp; RendererModule = FModuleManager::GetModuleChecked&lt;IRendererModule&gt;(RendererModuleName);\n\nconst auto FeatureLevel = GMaxRHIFeatureLevel;\nauto ShaderMap = GetGlobalShaderMap(FeatureLevel);\n\n// Generate composition LUT\nif (bLUTStale)\n{\n    SetRenderTarget(RHICmdList, ViewportInfo.ColorSpaceLUTRT, FTextureRHIRef());\n\n    FGraphicsPipelineStateInitializer GraphicsPSOInit;\n    RHICmdList.ApplyCachedRenderTargets(GraphicsPSOInit);\n    GraphicsPSOInit.BlendState = TStaticBlendState&lt;&gt;::GetRHI();\n    GraphicsPSOInit.RasterizerState = TStaticRasterizerState&lt;&gt;::GetRHI();\n    GraphicsPSOInit.DepthStencilState = TStaticDepthStencilState&lt;false, CF_Always&gt;::GetRHI();\n\n    TShaderMapRef&lt;FWriteToSliceVS&gt; VertexShader(ShaderMap);\n    TOptionalShaderMapRef&lt;FWriteToSliceGS&gt; GeometryShader(ShaderMap);\n    TShaderMapRef&lt;FCompositeLUTGenerationPS&gt; PixelShader(ShaderMap);\n    const FVolumeBounds VolumeBounds(CompositionLUTSize);\n\n    GraphicsPSOInit.BoundShaderState.VertexDeclarationRHI = GScreenVertexDeclaration.VertexDeclarationRHI;\n    GraphicsPSOInit.BoundShaderState.VertexShaderRHI = GETSAFERHISHADER_VERTEX(*VertexShader);\n    GraphicsPSOInit.BoundShaderState.GeometryShaderRHI = GETSAFERHISHADER_GEOMETRY(*GeometryShader);\n    GraphicsPSOInit.BoundShaderState.PixelShaderRHI = GETSAFERHISHADER_PIXEL(*PixelShader);\n    GraphicsPSOInit.PrimitiveType = PT_TriangleStrip;\n    SetGraphicsPipelineState(RHICmdList, GraphicsPSOInit);\n\n    VertexShader-&gt;SetParameters(RHICmdList, VolumeBounds, FIntVector(VolumeBounds.MaxX - VolumeBounds.MinX));\n    if(GeometryShader.IsValid())\n    {\n        GeometryShader-&gt;SetParameters(RHICmdList, VolumeBounds.MinZ);\n    }\n    PixelShader-&gt;SetParameters(RHICmdList);\n\n    RasterizeToVolumeTexture(RHICmdList, VolumeBounds);\n\n    FResolveParams ResolveParams;\n    RHICmdList.CopyToResolveTarget(ViewportInfo.ColorSpaceLUTRT, ViewportInfo.ColorSpaceLUTSRV, false, ResolveParams);\n}\n\n// Composition pass\n{\n    FResolveParams ResolveParams;\n    RHICmdList.CopyToResolveTarget(ViewportInfo.UITargetRT, ViewportInfo.UITargetSRV, false, ResolveParams);\n\n    SetRenderTarget(RHICmdList, FinalBuffer, FTextureRHIRef());\n\n    FGraphicsPipelineStateInitializer GraphicsPSOInit;\n    RHICmdList.ApplyCachedRenderTargets(GraphicsPSOInit);\n    GraphicsPSOInit.BlendState = TStaticBlendState&lt;&gt;::GetRHI();\n    GraphicsPSOInit.RasterizerState = TStaticRasterizerState&lt;&gt;::GetRHI();\n    GraphicsPSOInit.DepthStencilState = TStaticDepthStencilState&lt;false, CF_Always&gt;::GetRHI();\n\n    TShaderMapRef&lt;FScreenVS&gt; VertexShader(ShaderMap);\n\n    if (HDROutputDevice == 5 || HDROutputDevice == 6)\n    {\n        // ScRGB encoding\n        TShaderMapRef&lt;FCompositePS&lt;1&gt;&gt; PixelShader(ShaderMap);\n\n        GraphicsPSOInit.BoundShaderState.VertexDeclarationRHI = RendererModule.GetFilterVertexDeclaration().VertexDeclarationRHI;\n        GraphicsPSOInit.BoundShaderState.VertexShaderRHI = GETSAFERHISHADER_VERTEX(*VertexShader);\n        GraphicsPSOInit.BoundShaderState.PixelShaderRHI = GETSAFERHISHADER_PIXEL(*PixelShader);\n        GraphicsPSOInit.PrimitiveType = PT_TriangleList;\n\n        SetGraphicsPipelineState(RHICmdList, GraphicsPSOInit);\n\n        PixelShader-&gt;SetParameters(RHICmdList, ViewportInfo.UITargetSRV, ViewportInfo.HDRSourceSRV, ViewportInfo.ColorSpaceLUTSRV);\n    }\n    else\n    {\n        // ST2084 (PQ) encoding\n        TShaderMapRef&lt;FCompositePS&lt;0&gt;&gt; PixelShader(ShaderMap);\n\n        GraphicsPSOInit.BoundShaderState.VertexDeclarationRHI = RendererModule.GetFilterVertexDeclaration().VertexDeclarationRHI;\n        GraphicsPSOInit.BoundShaderState.VertexShaderRHI = GETSAFERHISHADER_VERTEX(*VertexShader);\n        GraphicsPSOInit.BoundShaderState.PixelShaderRHI = GETSAFERHISHADER_PIXEL(*PixelShader);\n        GraphicsPSOInit.PrimitiveType = PT_TriangleList;\n\n        SetGraphicsPipelineState(RHICmdList, GraphicsPSOInit);\n\n        PixelShader-&gt;SetParameters(RHICmdList, ViewportInfo.UITargetSRV, ViewportInfo.HDRSourceSRV, ViewportInfo.ColorSpaceLUTSRV);\n    }\n\n    RendererModule.DrawRectangle(\n        RHICmdList,\n        0, 0,\n        ViewportWidth, ViewportHeight,\n        0, 0,\n        ViewportWidth, ViewportHeight,\n        FIntPoint(ViewportWidth, ViewportHeight),\n        FIntPoint(ViewportWidth, ViewportHeight),\n        *VertexShader,\n        EDRF_UseTriangleOptimization);\n}\n\nRHICmdList.TransitionResource(EResourceTransitionAccess::EReadable, BackBuffer);\n</code></pre>"},{"location":"ue4guide/graphics-development/lightmass-lightmapping/debugging-lightmass/","title":"Debugging lightmass","text":"<p>Manually launching lightmass steps (allows placing breakpoints in lightmass, stepping through, etc)</p> <ul> <li> <p>Have a visual studio open to the UE4 solution, build lightmass in debug win64, set as startup project</p> </li> <li> <p>Launch editor, enter the console command 'lightmassdebug'</p> </li> <li> <p>Start a lighting build, watch the swarm log window until it says something like waiting for connection</p> </li> <li> <p>Launch lightmass in debug, should complete the lighting build, and UE4 should import the results when it completes</p> </li> </ul> <p>Texel debugging steps</p> <ul> <li> <p>define ALLOW_LIGHTMAP_SAMPLE_DEBUGGING to 1 in both places</p> </li> <li> <p>Disable lightmap compression with bCompressLightmaps=False in baselightmass.ini</p> </li> <li> <p>Build lighting once with that in a map with static meshes</p> </li> <li> <p>Hold T and select a texel on one of the built static meshes</p> </li> <li> <p>Now launch lightmass manually as above, you should be able to hit breakpoints at the various 'bDebugThisTexel = true;' lines in lightmass</p> </li> </ul> <p>Reference From https://udn.unrealengine.com/questions/171210/view.html</p> <p>Debug lightmass:</p> <ol> <li>Lightmassdebug command</li> </ol> <p></p> <ol> <li>Build Lighting Only</li> </ol> <p></p> <ol> <li>Launch Lightmass from visual studio manually in debug</li> </ol> <p></p>"},{"location":"ue4guide/graphics-development/lightmass-lightmapping/indirect-lighting-cachevolumetric-lightmap-notes/","title":"Indirect lighting cachevolumetric lightmap notes","text":"<p>Rotating/Translating Indirect Lighting Cache/Volume Lightmaps for streamed level instances or sublevels:</p> <ul> <li> <p>Some performance functions to transform the stadium world or streamed levels: Loading level instances:</p> </li> <li> <p>ApplyWorldOffset</p> </li> <li>StaticMeshDrawListApplyWorldOffset</li> <li> <p>ApplyWorldOffset_RenderThread</p> </li> <li> <p>Level streaming + applying world offset to precomputed lighting:</p> </li> </ul> <p>https://answers.unrealengine.com/questions/604070/brushes-stay-in-place-in-transformed-level-instanc.html&gt;  https://github.com/EpicGames/UnrealEngine/pull/3627</p> <p>Each level has a FPrecomputedLightVolume object, which is used to sample pre-computed lighting. This class has a method called \"ApplyWorldOffset\", which is used for world origin rebasing. The FPrecomputedLightVolume internal world offset is then subtracted to light sample query coordinates, so the data itself doesn't need to be actually moved around. It doesn't support rotation, so that would require modifications to the FPrecomputedLightVolume class.</p> <p>Streaming levels are transformed using FLevelUtils::ApplyLevelTransform() in LevelUtils.cpp after they are loaded or made visible. All it does is loop through all Actors in the level and adjust their transforms accordingly.</p> <p>Levels have a multicast delegate called OnApplyLevelTransform which is broadcast after FLevelUtils::ApplyLevelTransform(), which can be used so other parts of code can react to level transformations without the need to modify LevelUtils.cpp.</p> <p>Since all that stuff is marked as ENGINE_API, I did a quick test which doesn't involve modifying the engine (because I didn't download the source for 4.16 yet). I created an actor class with a SceneComponent root and added this to its BeginPlay:</p> <p>GetLevel()-&gt;PrecomputedLightVolume-&gt;ApplyWorldOffset(GetActorLocation());</p> <ul> <li> <p>Rotate/scale/translate rotation matrix</p> </li> <li> <p>Change reflection captures to take their rotation data of their transform</p> </li> <li> <p>https://udn.unrealengine.com/questions/329303/load-level-instance-volume-lighting-samples-not-of.html</p> </li> <li> <p>https://udn.unrealengine.com/questions/352438/indirect-light-cache-with-respect-to-load-level-in.html</p> </li> <li> <p>Volumetric Lightmaps: https://udn.unrealengine.com/questions/394256/offsetting-volumetric-lightmap-in-streamed-levels.html</p> </li> </ul> <p>There's only one volumetric lightmap, since the feature does not currently support sublevel streaming.</p> <p>WorldOffset probably needs to be applied here: ViewUniformShaderParameters.VolumetricLightmapWorldToUVAdd = -VolumeBounds.Min * InvVolumeSize;</p> <p>Something like</p> <p>i. FVector WorldOffset = Scene-&gt;VolumetricLightmapSceneData.GetLevelVolumetricLightmap()-&gt;WorldOffset;</p> <p>ii. ViewUniformShaderParameters.VolumetricLightmapWorldToUVAdd = -(VolumeBounds.Min + WorldOffset) * InvVolumeSize;</p> <p>Reference From https://udn.unrealengine.com/questions/394256/offsetting-volumetric-lightmap-in-streamed-levels.html </p> <ul> <li>Streaming Volumetric Lighting Maps:</li> </ul> <p>I don't think it would be difficult to swap volumetric lightmaps at all, in fact that's what lighting scenarios are doing already. If you can just use lighting scenarios then you are done =)</p> <p>Otherwise, you need to: 1) Have lightmass generate all the different volumetric lightmaps 2) Import each and store in the right spot 3) Activate the one you want to use by setting it on the FScene, and initializing its rendering resources (create volume textures)</p> <p>More detail: </p> <ol> <li>How you tell lightmass to generate the different volumetric lightmaps depends on what you want to change in between. If you want full lightmaps generated, that's the same as lighting scenarios and you can look at FStaticLightingManager::CreateStaticLightingSystem, it makes a whole different FStaticLightingSystem for each scenario, which will calculate all static lighting.</li> <li>Importing volumetric lightmap happens in FLightmassProcessor::ImportVolumetricLightmap, and normally it goes into the UMapBuildDataRegistry of System.GetWorld()-&gt;PersistentLevel, but you could put it anywhere.</li> <li>Finally, the volumetric lightmap is made active on the FScene in ULevel::InitializeRenderingResources. You can select your custom volumetric lightmaps here. Normally it just selects from the active LightingScenario level's MapBuildData.</li> </ol> <p>Reference From https://udn.unrealengine.com/questions/394256/offsetting-volumetric-lightmap-in-streamed-levels.html</p>"},{"location":"ue4guide/graphics-development/lightmass-lightmapping/lightmass-2d-lightmaps/","title":"Lightmass 2d lightmaps","text":"<p>ConvertToLightSampleHelper:</p> <ul> <li> <p>Calculate Luma L1SH vector</p> </li> <li> <p>Apply SH Normalization to factor out L0 term</p> </li> </ul> <p>float DirCorrection = 1.0f / FMath::Max( 0.0001f, InGatheredLightSample.SHCorrection );</p> <p>DirLuma[i] *= DirCorrection / PI;</p> <ul> <li>SHCorrection is a normalization factor. Done to normalize SH vector s.t. luminance(irradiance) (Not radiance) at smoothed vertex normal = 1</li> </ul> <p>// Evaluate lighting along the smoothed vertex normal direction, so that later we can guarantee an SH intensity of 1 along the normal</p> <p>// These scaling coefficients are SHBasisFunction and CalcDiffuseTransferSH baked down</p> <p>// 0.325735f = 0.488603f from SHBasisFunction * \u2154 from CalcDiffuseTransferSH</p> <p>// Only using V[2] which is the tangent space Z</p> <p>FSHVector2 SH = FSHVector2::SHBasisFunction(TangentDirection);</p> <p>Result.SHCorrection = Color.GetLuminance() * (0.282095f * SH.V[0] + 0.325735f * SH.V[2]);</p> <p>Result.IncidentLighting = Color * FMath::Max(0.0f, TangentDirection.Z);</p> <ul> <li>Apply SH scale/bias normalization so that L0 == 1</li> </ul> <p>float DirScale = 1.0f / FMath::Max( 0.0001f, DirLuma[0] );</p> <p>float ColorScale = DirLuma[0];</p> <p>// IncidentLighting is ground truth for a representative direction, the vertex normal</p> <p>OutCoefficients[0][0] = ColorScale * InGatheredLightSample.IncidentLighting.R;</p> <p>OutCoefficients[0][1] = ColorScale * InGatheredLightSample.IncidentLighting.G;</p> <p>OutCoefficients[0][2] = ColorScale * InGatheredLightSample.IncidentLighting.B;</p> <p>// Will force DirLuma[0] to 0.282095f</p> <p>OutCoefficients[1][0] = -0.325735f * DirLuma[1] * DirScale;</p> <p>OutCoefficients[1][1] = 0.325735f * DirLuma[2] * DirScale;</p> <p>OutCoefficients[1][2] = -0.325735f * DirLuma[3] * DirScale;</p> <p>GetLightMapColorHQ: L1 SH Band Data Reconstruction</p> <p>Sample1.rgb encodes the L1 SH band data</p> <p>NOTE: SH basis is in the canonical math coordinate frame so you have to swizzle (eg: dot( SH, float4(WorldNormal.yzx, 1) )</p> <ul> <li> <p>Reconstruct primary average color for lightmap texel (aka SH L0 term)</p> </li> <li> <p>Luma is stored in Lightmap0.w in Log space</p> </li> <li> <p>Lightmap chromaticity is in UVW in Lightmap0.xyz (aka RGB * 1/L)</p> </li> <li> <p>Everything is range/scaled for compression. PrecomputedLightingBuffer.LightMapScale[0] &amp; LightMapAdd[0] stored the factors for color</p> </li> <li> <p>Reconstruct directionality</p> </li> <li> <p>SH is in Lightmap1. But Lightmap1 is encoded specially in reverse order (L0 term is in Lightmap1.w; L1 terms are in zyx)</p> </li> <li> <p>Also, SH is normalized s.t. L0 factor = 1 (Lightmap1.w would be 1.0); they use this to store residual for Logspace compression compression. Lightmap1.w is not used for SH (happens in LightmapData.cpp:QuantizeLightSamples())</p> </li> <li> <p>PrecomputedLightingBuffer.LightMapScale[0] &amp; LightMapAdd[0] stores the scale/bias</p> </li> <li> <p>All done bc Lightmap0 &amp; Lightmap1 are 32-bit quantized textures (8bits per component)</p> </li> </ul> <p>Key Data Structures:</p> C++<pre><code>class FGatheredLightMapSample\n\n{\n\nFGatheredLightSample HighQuality;\n\nFGatheredLightSample LowQuality;\n\n/** True if this sample maps to a valid point on a triangle. This is only meaningful for texture lightmaps. */\n\nbool bIsMapped;\n\nFLightSample ConvertToLightSample(bool bDebugThisSample) const;\n\n..\n\n}\n\nFGatheredLightMapData2D::ConvertToLightmap2D()\n\nData[SampleIndex].ConvertToLightSample(bDebugThisSample);\n\nFGatheredLightMapSample::ConvertToLightSample():\n\nFLightSample NewSample;\n\nNewSample.bIsMapped = bIsMapped;\n\nConvertToLightSampleHelper(HighQuality, &amp;NewSample.Coefficients[0]);\n\nConvertToLightSampleHelper(LowQuality, &amp;NewSample.Coefficients[ LM_LQ_LIGHTMAP_COEF_INDEX ]);\n\nstatic void ConvertToLightSampleHelper(const FGatheredLightSample&amp; InGatheredLightSample, float OutCoefficients[2][3]):\n\n{\n\n// SHCorrection is SHVector sampled with the normal\n\nfloat DirCorrection = 1.0f / FMath::Max( 0.0001f, InGatheredLightSample.SHCorrection );\n\nfloat DirLuma[4];\n\nfor( int32 i = 0; i &lt; 4; i++ )\n\n{\n\nDirLuma[i] = 0.30f * InGatheredLightSample.SHVector.R.V[i];\n\nDirLuma[i] += 0.59f * InGatheredLightSample.SHVector.G.V[i];\n\nDirLuma[i] += 0.11f * InGatheredLightSample.SHVector.B.V[i];\n\n// Lighting is already in IncidentLighting. Force directional SH as applied to a flat normal map to be 1 to get purely directional data.\n\nDirLuma[i] *= DirCorrection / PI;\n\n}\n\n// Scale directionality so that DirLuma[0] == 1. Then scale color to compensate and toss DirLuma[0].\n\nfloat DirScale = 1.0f / FMath::Max( 0.0001f, DirLuma[0] );\n\nfloat ColorScale = DirLuma[0];\n\n// IncidentLighting is ground truth for a representative direction, the vertex normal\n\nOutCoefficients[0][0] = ColorScale * InGatheredLightSample.IncidentLighting.R;\n\nOutCoefficients[0][1] = ColorScale * InGatheredLightSample.IncidentLighting.G;\n\nOutCoefficients[0][2] = ColorScale * InGatheredLightSample.IncidentLighting.B;\n\n// Will force DirLuma[0] to 0.282095f\n\nOutCoefficients[1][0] = -0.325735f * DirLuma[1] * DirScale;\n\nOutCoefficients[1][1] = 0.325735f * DirLuma[2] * DirScale;\n\nOutCoefficients[1][2] = -0.325735f * DirLuma[3] * DirScale;\n\n}\n\nNewSample.SkyOcclusion[0] = HighQuality.SkyOcclusion.X;\n\nNewSample.SkyOcclusion[1] = HighQuality.SkyOcclusion.Y;\n\nNewSample.SkyOcclusion[2] = HighQuality.SkyOcclusion.Z;\n\nNewSample.AOMaterialMask = HighQuality.AOMaterialMask;\n\n}\n\n/**\n\n* Incident lighting for a single sample, as produced by a lighting build.\n\n* FGatheredLightSample is used for gathering lighting instead of this format as FLightSampleData is not additive.\n\n*/\n\nstruct FLightSampleData\n\n{\n\n/**\n\n* Coefficients[0] stores the normalized average color,\n\n* Coefficients[1] stores the maximum color component in each lightmap basis direction,\n\n* and Coefficients[2] stores the simple lightmap which is colored incident lighting along the vertex normal.\n\n*/\n\nfloat Coefficients[LM_NUM_STORED_LIGHTMAP_COEF]\\[3];\n\nfloat SkyOcclusion[3];\n\nfloat AOMaterialMask;\n\n/** True if this sample maps to a valid point on a triangle. This is only meaningful for texture lightmaps. */\n\nbool bIsMapped;\n\n}\n\n/**\n\n* The quantized coefficients for a single light-map texel.\n\n*/\n\nstruct FQuantizedLightSampleData\n\n{\n\nuint8 Coverage;\n\nuint8 Coefficients[LM_NUM_STORED_LIGHTMAP_COEF][4];\n\nuint8 SkyOcclusion[4];\n\nuint8 AOMaterialMask;\n\n};\n\n/** The number of coefficients that are stored for each light sample. */\n\nstatic const int32 LM_NUM_STORED_LIGHTMAP_COEF = 4;\n\n/** The number of high quality coefficients which the lightmap stores for each light sample. */\n\nstatic const int32 LM_NUM_HQ_LIGHTMAP_COEF = 2;\n\n/** The index at which low quality coefficients are stored in any array containing all LM_NUM_STORED_LIGHTMAP_COEF coefficients. */\n\nstatic const int32 LM_LQ_LIGHTMAP_COEF_INDEX = 2;\n\n#define LM_NUM_SH_COEFFICIENTS 9\n\nstruct FLightMapDataBase\n\n{\n\n/** Size of compressed lightmap data */\n\nuint32 CompressedDataSize;\n\n/** Size of uncompressed lightmap data */\n\nuint32 UncompressedDataSize;\n\n/** Scale applied to the quantized light samples */\n\nfloat Multiply\\[LM_NUM_STORED_LIGHTMAP_COEF]\\[4];\n\n/** Bias applied to the quantized light samples */\n\nfloat Add\\[LM_NUM_STORED_LIGHTMAP_COEF]\\[4];\n\n};\n\n/** LightMap data 2D */\n\nstruct FLightMapData2DData : public FLightMapDataBase\n\n{\n\nFLightMapData2DData(uint32 InSizeX,uint32 InSizeY):\n\nSizeX(InSizeX),\n\nSizeY(InSizeY),\n\nbHasSkyShadowing(false)\n\n{\n\n}\n\n/** The width of the light-map. */\n\nuint32 SizeX;\n\n/** The height of the light-map. */\n\nuint32 SizeY;\n\nbool bHasSkyShadowing;\n\n};\n\nstatic void GetLUVW( const float RGB[3], float&amp; L, float&amp; U, float&amp; V, float&amp; W )\n\n{\n\nfloat R = FMath::Max( 0.0f, RGB[0] );\n\nfloat G = FMath::Max( 0.0f, RGB[1] );\n\nfloat B = FMath::Max( 0.0f, RGB[2] );\n\nL = 0.3f * R + 0.59f * G + 0.11f * B;\n\nif( L &lt; 1e-4f )\n\n{\n\nU = 1.0f;\n\nV = 1.0f;\n\nW = 1.0f;\n\n}\n\nelse\n\n{\n\nU = R / L;\n\nV = G / L;\n\nW = B / L;\n\n}\n\n}\n\n/**\n\n* Quantizes floating point light samples down to byte samples with a scale applied to all samples\n\n*\n\n* @param InLightSamples Floating point light sample coefficients\n\n* @param OutLightSamples Quantized light sample coefficients\n\n* @param OutScale Scale applied to each quantized sample (to get it back near original floating point value)\n\n* @param bUseMappedFlag Whether or not to pay attention to the bIsMapped flag for each sample when calculating max scale\n\n*\n\n* TODO Calculate residual after compression, not just quantization.\n\n* TODO Factor out error from directionality compression and push it to color. This requires knowing a representative normal.\n\n* Best way is probably to create a new texture compression type and do error correcting during compression.\n\n*/\n\nFLightMapData2D::Quantize()\n\nvoid QuantizeLightSamples(\n\nTArray&lt;FLightSample&gt;&amp; InLightSamples,\n\nTArray&lt;FQuantizedLightSampleData&gt;&amp; OutLightSamples,\n\nfloat OutMultiply\\[LM_NUM_STORED_LIGHTMAP_COEF][4],\n\nfloat OutAdd\\[LM_NUM_STORED_LIGHTMAP_COEF][4],\n\nint32 DebugSampleIndex,\n\nbool bUseMappedFlag)\n\n{\n\n//Looks like SH is stored in reverse order L1.zyxL0\n\n//Scale/Bias made so that SH term is 0.282095\n\n// Force SH constant term to 0.282095f. Avoids add in shader.\n\nOutMultiply[1][3] = 0.0f;\n\nOutAdd[1][3] = 0.282095f;\n\nOutMultiply[3][3] = 0.0f;\n\nOutAdd[3][3] = 0.282095f;\n\n..\n\n}\n\n//==================================================================\n\n/** A sample of the visibility factor between a light and a single point. */\n\nstruct FShadowSampleData\n\n{\n\n/** The fraction of light that reaches this point from the light, between 0 and 1. */\n\nfloat Visibility;\n\n/** True if this sample maps to a valid point on a surface. */\n\nbool bIsMapped;\n\n/**\n\n* Export helper\n\n* @param Component Which directional lightmap component to retrieve\n\n* @return An FColor for this component, clamped to White\n\n*/\n\nFColor GetColor(int32 Component) const\n\n{\n\nuint8 Gray = (uint8)FMath::Clamp&lt;int32&gt;(Visibility * 255, 0, 255);\n\nreturn FColor(Gray, Gray, Gray, 0);\n\n}\n\n};\n\n/** The quantized value for a single shadowmap texel */\n\nstruct FQuantizedShadowSampleData\n\n{\n\nuint8 Visibility;\n\nuint8 Coverage;\n\n};\n\n/** ShadowMap data 2D */\n\nstruct FShadowMapData2DData : public FShadowMapDataBase\n\n{\n\nFShadowMapData2DData(uint32 InSizeX,uint32 InSizeY):\n\nSizeX(InSizeX),\n\nSizeY(InSizeY)\n\n{\n\n}\n\n/** The width of the shadow-map. */\n\nuint32 SizeX;\n\n/** The height of the shadow-map. */\n\nuint32 SizeY;\n\n};\n</code></pre>"},{"location":"ue4guide/graphics-development/lightmass-lightmapping/lightmass-misc-lightmapping-notes/","title":"Lightmass misc lightmapping notes","text":"<p>StaticLightingDebug.cpp:::What goodies lie here?</p> <p>LightaMapRendering (in Renderer Module): Handles render thread side of lightmaps (setting/creating uniform buffers)</p> <p>FLightmap/FlightMap2D</p> <ul> <li>GameThread struct containing lightmap data</li> <li>Contains a reference (LightmapSetBelongsTo) to the lightmap set this lightmap refers to</li> <li>LightmapSetBelongsTo set when FLightMap struct is allocated</li> <li>Components handle allocating the FLightmap bookkepping data</li> <li>Stores references to actual textures for the lightmaps</li> </ul> <p>FLightMapInteraction</p> <ul> <li>Defines interaction between mesh &amp; lightmap</li> <li>Just stores references to the textures in FlightMap + coefficients</li> <li>Value struct b/c it gets blitted to the render thread</li> </ul> <p>Registry-&gt;AllocateMeshBuildData</p> <ul> <li>This actually creates the MeshMapBuildData struct</li> <li>This gets written out to a sideband package next to the level (ex: MyHellzoneLevel_BuildData)</li> </ul> <p>FLightMap2D::AllocateLightMap/FLightMap2D::AllocateInstancedLightMap</p> <ul> <li>Seems to be called during light builds only</li> <li>Actually allocates the lightmap texture</li> </ul> <p>Components that require static lighting interaction (ex: landscape or staticmesh) have follow this file convention</p> <ul> <li>[ComponentName]Lighting.cpp handles lightmapping functionality</li> <li>[ComponentName]Rendering.cpp handles rendering</li> </ul> <p>High-level process of baking</p> <p>Start with StaticLightingManager::UpdateBuildLighting</p> <p>AllocateLightMap populates PendingLightMaps (static array&lt;FlightMapAllocationGroup&gt; that gets procesed during Encode)</p> <p>FlightMapAllocationGroup: Container of set of FLightMapAllocation</p> <p>FlightMapAllocationGroup: Allocation of a region of lightmap texture to a specific lightmap</p> <p>EncodeTextures() takes all the data in the PendingLightMaps allocation groups and turns them into FLightMapPendingTexture</p> <p>FLightMapPendingTexture::StartEncoding()</p> <p>Multiple Lightmaps</p> <p>r.HighQualityLightMaps</p> <p>TODO:</p> <p>grep GCurrentLightmapSetIndex</p> <p>grep LightmapSets</p> <p>grep GCurrentILCIndex</p> <p>add suffix to engine modification tag @third party code - Bebylon - MultiLightmap</p> <p>coalesce cvars &amp; rename to be better</p> <p>change forward pass to use precomputed lightmap blends</p> <p>store reference to MeshMapBuildDataID for LightmapSetsBelongTo</p> <p>rename references of TArray&lt;FLightMapRef&gt; to typedef TArray&lt;FLightMapRef&gt; Lightmapset</p> <p>FVector PrecomputedLightVolumeOffset = InWorldOffset - FVector(LightBuildLevelOffset);</p> <p>PrecomputedLightVolume-&gt;ApplyWorldOffset(PrecomputedLightVolumeOffset);</p> <p>void ULevel::OnApplyNewLightingData(bool bLightingSuccessful)</p> <p>{</p> <p>// Store level offset that was used during static light data build</p> <p>// This will be used to find correct world position of precomputed lighting samples during origin rebasing</p> <p>LightBuildLevelOffset = FIntVector::ZeroValue;</p> <p>if (bLightingSuccessful &amp;&amp; OwningWorld &amp;&amp; OwningWorld-&gt;WorldComposition)</p> <p>{</p> <p>LightBuildLevelOffset = OwningWorld-&gt;WorldComposition-&gt;GetLevelOffset(this);</p> <p>}</p> <p>}</p> <p>ULightComponent::IsPrecomputedLightingValid()</p>"},{"location":"ue4guide/graphics-development/lightmass-lightmapping/lightmass-volumetric-lightmaps/","title":"Lightmass volumetric lightmaps","text":"<p>Key functions:</p> <ul> <li>CalculateVolumeSampleIncidentRadiance(): Main function</li> </ul> <p>For volumetric irradience brick:</p> <p>SetFromVolumeLightingSample(): Defines spherical harmonic encoding of what gets stored in the lightmap</p> C++<pre><code>/*\n\n SH directional coefficients can be normalized by their ambient term, and then ranges can be derived from SH projection\n\n This allows packing into an 8 bit format\n\n [-1, 1] Normalization factors derived from SHBasisFunction\n\n Result.V0.x = 0.282095f;\n\n Result.V0.y = -0.488603f * InputVector.y;\n\n Result.V0.z = 0.488603f * InputVector.z;\n\n Result.V0.w = -0.488603f * InputVector.x;\n\n half3 VectorSquared = InputVector * InputVector;\n\n Result.V1.x = 1.092548f * InputVector.x * InputVector.y;\n\n Result.V1.y = -1.092548f * InputVector.y * InputVector.z;\n\n Result.V1.z = 0.315392f * (3.0f * VectorSquared.z - 1.0f);\n\n Result.V1.w = -1.092548f * InputVector.x * InputVector.z;\n\n Result.V2 = 0.546274f * (VectorSquared.x - VectorSquared.y);\n\n */\n\n // Note: encoding behavior has to match CPU decoding in InterpolateVolumetricLightmap and GPU decoding in GetVolumetricLightmapSH3\n\n FLinearColor CoefficientNormalizationScale0(\n\n 0.282095f / 0.488603f,\n\n 0.282095f / 0.488603f,\n\n 0.282095f / 0.488603f,\n\n 0.282095f / 1.092548f);\n\n FLinearColor CoefficientNormalizationScale1(\n\n 0.282095f / 1.092548f,\n\n 0.282095f / (4.0f * 0.315392f),\n\n 0.282095f / 1.092548f,\n\n 0.282095f / (2.0f * 0.546274f));\n\n for (int32 ChannelIndex = 0; ChannelIndex &lt; 3; ChannelIndex++)\n\n {\n\n const float InvAmbient = 1.0f / FMath::Max(Sample.HighQualityCoefficients[0] [ChannelIndex], .0001f);\n\nconst FLinearColor Vector0Normalized =\n\n FLinearColor(Sample.HighQualityCoefficient [1] [ChannelIndex], Sample.HighQualityCoefficients [2] [ChannelIndex], Sample.HighQualityCoefficients[3] [ChannelIndex], Sample.HighQualityCoefficients [4] [ChannelIndex])\n\n \\* CoefficientNormalizationScale0\n\n \\*FLinearColor(InvAmbient, InvAmbient, InvAmbient, InvAmbient);\n\n SHCoefficients\\[ChannelIndex \\* 2 + 0]\\[Index] = (Vector0Normalized \\* FLinearColor(.5f, .5f, .5f, .5f) + FLinearColor(.5f, .5f, .5f, .5f)).QuantizeRound();\n\nconst FLinearColor Vector1Normalized =\n\nFLinearColor(Sample.HighQualityCoefficients\\[5]\\[ChannelIndex], Sample.HighQualityCoefficients\\[6]\\[ChannelIndex], Sample.HighQualityCoefficients\\[7]\\[ChannelIndex], Sample.HighQualityCoefficients\\[8]\\[ChannelIndex])\n\n\\* CoefficientNormalizationScale1\n\n\\* FLinearColor(InvAmbient, InvAmbient, InvAmbient, InvAmbient);\n\nSHCoefficients\\[ChannelIndex \\* 2 + 1]\\[Index] = (Vector1Normalized \\* FLinearColor(.5f, .5f, .5f, .5f) + FLinearColor(.5f, .5f, .5f, .5f)).QuantizeRound();\n\n}\n</code></pre> <ul> <li> <p>GatherVolumeImportancePhotonDirections()</p> </li> <li> <p>CalculateApproximateDirectLighting()</p> </li> <li> <p>IncomingRadianceAdaptive()</p> </li> </ul> C++<pre><code>/**\n\n* Precomputed lighting volumes in the scene, used for interpolating dynamic object lighting.\n\n* These are typically one per streaming level and they store volume lighting samples computed by Lightmass.\n\n*/\n\nTArray&lt;const FPrecomputedLightVolume*&gt; PrecomputedLightVolumes;\n\n/** Interpolates and caches indirect lighting for dynamic objects. */\n\nFIndirectLightingCache IndirectLightingCache;\n\nFVolumetricLightmapSceneData VolumetricLightmapSceneData;\n\n/**\n\n* Represents the Volumetric Lightmap for a specific ULevel.\n\n*/\n\nclass FPrecomputedVolumetricLightmap\n\n/**\n\n* The light incident for a point on a surface, in the representation used when gathering lighting.\n\n* This representation is additive, and allows for accumulating lighting contributions in-place.\n\n*/\n\ntemplate &lt;int32 SHOrder&gt;\n\nclass TGatheredLightSample\n\n/** Lighting for a point in space. */\n\nclass FVolumeLightingSampleData\n\n{\n\npublic:\n\n/** World space position and radius. */\n\nFVector4 PositionAndRadius;\n\n/** SH coefficients used with high quality lightmaps. */\n\nfloat HighQualityCoefficients [LM_NUM_SH_COEFFICIENTS] [3];\n\n/** SH coefficients used with low quality lightmaps. */\n\nfloat LowQualityCoefficients [LM_NUM_SH_COEFFICIENTS] [3];\n\nFVector SkyBentNormal;\n\n/** Shadow factor for the stationary directional light. */\n\nfloat DirectionalLightShadowing;\n\n};\n</code></pre>"},{"location":"ue4guide/graphics-development/lightmass-lightmapping/swarm-overview/","title":"Swarm overview","text":"<p>One of the challenges in game development is pre-computing static lighting. Emulating photons bouncing around in a virtual environment can require legions of compute cycles. This process is called baking. The end result is a lightmap, a compact data structure that represents the way static objects are lit.</p> <p>The Unreal Engine suite provides software that makes baking lightmaps easy and fast. There are three components involved:</p> <ul> <li> <p>Unreal Lightmass: the app that does the actual lighting computations. It\u2019s designed to run on many different PCs simultaneously.</p> </li> <li> <p>Swarm Agent: a background app that runs on any PC that has been designated to bake lighting. The Swarm Agent invokes Lightmass to do bakes.</p> </li> <li> <p>Swarm Coordinator: an app that runs on a single always-on PC that receives requests for lighting builds and determines which Swarm Agents are available to participate in the bake.</p> </li> </ul> <p>To build lighting, anybody running the Unreal Editor can kick off a bake by selecting Build Lighting in the editor. This results in a number of Swarm Agents across the local network participating in the build. The number is a function of the size and quality of the bake, and also depends on which Agents have free CPU cycles. Each selected Swarm Agents receives Lightmass along with enough data to run its portion of the bake. The combined results are ultimately assembled back into a complete lightmap.</p> <p>By running Swarm Agents on many computers on your local network, lighting builds can be performed very quickly. What might take hours on a single machine takes only a few minutes with Swarm.</p> <p>The documentation on Swarm and Lightmass is sparse. The best reference is a single Unreal AnswerHub post.</p> <p>Where I work at HBO, only a subset of employees use Unreal. However, we want every machine on our network to participate in lighting builds \u2014 without the hassle of installing Unreal. That goal turned into an interesting adventure. Although Epic recommends copying the Engine\\Binaries\\DotNET folder to install Swarm, that alone is insufficient.</p> <p>Without rehashing what the existing documentation already covers, I\u2019m including everything I\u2019ve learned about Swarm as of Unreal version 4.9. This information is useful to anybody setting up Swarm on your network or wanting to understand how to best configure Swarm.</p>"},{"location":"ue4guide/graphics-development/lightmass-lightmapping/swarm-overview/#swarm-coordinator","title":"Swarm Coordinator","text":"<p>The Coordinator keeps track of all of the Swarm Agents on the network and the status of each. You can also use the Coordinator to restart Swarm Agent instances.</p> <ul> <li>SwarmCoordinator.exe is designed to run on a single machine on your network. We run it on a low-end always-on Windows box. We also run Swarm Agent on the same machine.</li> <li>Swarm Coordinator does not require that Unreal Engine be installed. I didn\u2019t do the original setup of the Coordinator on our network, but based on empirical evidence, it requires the same files as the Swarm Agent (see below), plus the SwarmCoordinator.exe.config file.</li> <li>We place a shortcut to SwarmCoordinator.exe in the Windows Startup folder so that the Coordinator always begins at system start.</li> <li>In theory you could have multiple Coordinators on the network, each managing an independent set of machines/Agents. We haven\u2019t tested this theory.</li> </ul>"},{"location":"ue4guide/graphics-development/lightmass-lightmapping/swarm-overview/#unreal-lightmass","title":"Unreal Lightmass","text":"<p>Lightmass is the workhorse application that bakes lighting. It is automatically distributed to Swarm Agents on a per bake basis.</p> <ul> <li> <p>Do not install UnrealLightmass.exe directly; it\u2019s automatically copied and run whenever a bake is kicked off.</p> </li> <li> <p>Because Lightmass is completely independent of Swarm, Swarm Agents can run different versions of Lightmass. That means you can have teams running different versions of Unreal and using different versions of Swarm Agents to bake lighting. Nice.</p> </li> <li> <p>Lightmass will utilize multiple CPU cores (you can configure how many) and peg the CPU on most machines. However, because (by default) it is run at below normal priority, it doesn\u2019t normally impact the productivity of anybody actually using the machine.</p> </li> <li> <p>Lightmass is RAM intensive. It is not uncommon for it to use 1GB or more RAM depending on the bake size/quality.</p> </li> <li> <p>Lightmass does not utilize the GPU (as of 4.9).</p> </li> <li> <p>Depending on the size/quality of your bakes, Lightmass can require significant hard drive space. For instance, for our current small project, Lightmass uses many hundreds of MB per lighting build. See notes on configuring the Swarm cache for more details.</p> </li> <li> <p>Lightmass source code is located at Engine\\Source\\Editor\\UnrealEd\\Private\\Lightmass and Engine\\Source\\Programs\\UnrealLightmass</p> </li> <li> <p>The version of UnrealLightmass.exe that an Agent receives is dependent on processor architecture. There are 32 and 64-bit versions. Epic [recommends][post] only using Swarm/Lightmass on 64-bit systems for best performance, and we follow this advice.</p> </li> <li> <p>Lightmass requires the following be installed in order to run. If you\u2019re installing Swarm Agents on machines, you\u2019ll need to be sure these components are also installed.</p> </li> <li> <p>DirectX v9 extensions, specifically D3DX9_43.dll, DComp.dll and XInput1_3.dll</p> </li> <li> <p>Microsoft C runtime for Visual Studio 2013, specifically MSVCP120.dll and MSVCR120.dll</p> </li> </ul>"},{"location":"ue4guide/graphics-development/lightmass-lightmapping/swarm-overview/#swarm-agent","title":"Swarm Agent","text":"<p>Swarm Agent is designed to run on multiple machines across your network, building lighting on demand.</p> <ul> <li> <p>SwarmAgent.exe runs on Windows XP and up. It does not run on MacOS or Linux (as of 4.9).</p> </li> <li> <p>Swarm is built with C# using the .NET 4.0 framework</p> </li> <li> <p>SwarmAgent.exe and its associated DLLs are 32-bit images</p> </li> <li> <p>We place a shortcut to SwarmAgent.exe in the Windows Startup folder so that the Agent always begins at system start.</p> </li> <li> <p>Swarm can technically run a variety of distributed tasks, but as of 4.9 it only runs lighting calculations by distributing and spawning Lightmass</p> </li> <li> <p>There are two types of logical Swarm Agents. The same SwarmAgent.exe client supports both modes.</p> </li> <li> <p>The Local agent is the agent that kicked off the lighting bake</p> </li> <li> <p>Remote agents running on other network PCs are assigned to participate in a given lighting bake</p> </li> <li> <p>After initial communication with the Coordinator, Swarm Agents appear to perform all Agent-to-Agent communication in a peer-to-peer fashion.</p> </li> <li> <p>The Local agent distributes UnrealLightmass.exe and lighting information to each assigned Remote agent. The Local agent also participates in the bake (unless otherwise configured), collects the work from remote agents and merges the results.</p> </li> <li> <p>Swarm will not execute bakes on machines where it detects that the CPU usage has been, on average, above 20% for the past 10 seconds (see CPUBusyThreshold in Agent.cs)</p> </li> <li> <p>Swarm spawns the Lightmass process at BELOW_NORMAL_PRIORITY_CLASS on the Local agent and IDLE_PRIORITY_CLASS on Remote agents to reduce the CPU impact on busy machines. These values are configurable.</p> </li> <li> <p>Swarm will not necessarily use all available non-busy agents. The number of agents appears to depend on the size and complexity of the lighting bake.</p> </li> <li> <p>Swarm does not require that Unreal Engine be installed.</p> </li> <li> <p>Swarm requires the following files be present in the same folder as SwarmAgent.exe. These files are found in the Engine/Binaries/DotNET folder.</p> </li> <li> <p>SwarmAgent.exe</p> </li> <li> <p>AgentInterface.dll</p> </li> <li> <p>SwarmCommonUtils.dll</p> </li> <li> <p>SwarmCoordinatorInterface.dll</p> </li> <li> <p>UnrealControls.dll</p> </li> <li> <p>SwarmAgent.Options.xml</p> </li> <li> <p>Swarm requires that the .NET 4.0 framework (or greater) be installed. If you\u2019re running on Windows 8 or better, it\u2019s already present. On Windows 7, it\u2019s not preloaded, but comes automatically with Windows Update.</p> </li> <li> <p>Although Swarm itself doesn\u2019t require DirectX v9 extensions or the C runtime, Lightmass does need these, so if you\u2019re installing Swarm, be sure to install those components, too.</p> </li> <li> <p>Swarm Agent runs as a Notification (or System Tray) app. It is designed to run continuously in the background.</p> </li> <li> <p>To view the Swarm Agent interface, locate the app in the system tray (yellow and black S icon) and double click the icon.</p> </li> <li> <p>SwarmAgent.exe does not respond to WM_CLOSE. To close it manually, you must choose File-&gt;Exit from the main menu. To close it programatically, you can run taskkill.exe SwarmAgent.exe.</p> </li> <li> <p>Empirically (using Microsoft Message Analyzer) SwarmAgent and SwarmCoordinator use the following protocols and ports:</p> </li> <li> <p>ICMP protocol for ping requests between agents</p> </li> <li> <p>TCP protocol for all other communication, using ports: 8008, 8009, 54430, 56574, 56587 and 56589</p> </li> <li> <p>Some ports are configurable. For instance, SwarmCoordinator.exe.config allow you to remap port 8009.</p> </li> <li> <p>Swarm will not activate on sleeping PCs. I recommend that if you always want your Swarm Agents to be available, those PCs should not enter power-saving sleep states. Alternatively, you can use Windows Task Scheduler to wake machines at the appropriate times to run your bakes. See powercfg command line tool for details. We\u2019ve found that not all machines have BIOS configurations that support powercfg, so your mileage may vary.</p> </li> <li> <p>Until we explored the issue in detail, the most common Swarm problem was blocked communication between different Swarm agents. Firewalls are the culprits. Windows Firewall will block Swarm by default, even if the user chooses to allow Swarm to do outbound communications. Because Swarm communicates in a peer-to-peer fashion, it must also be configured to allow inbound communication from other agents.</p> </li> <li> <p>Programmatically, the Windows Firewall can be configured to permit Swarm usage with the following commands. We also do IP filtering to make sure these firewall exceptions only happen on our local network \u2014 replace x.y with your actual leading IP octets.</p> </li> <li> <p>Allow Swarm ICMP pings: netsh advfirewall firewall add rule name=\u201dUnreal Swarm\u201d dir=in action=allow enable=yes remoteip=x.y.0.0-x.y.255.255 protocol=icmpv4 interfacetype=lan</p> </li> <li> <p>Allow Swarm TCP commands: netsh advfirewall firewall add rule name=\u201dUnreal Swarm\u201d dir=in action=allow enable=yes remoteip=x.y.0.0-x.y.255.255 protocol=tcp interfacetype=lan localport=8008,8009,54430,56574,56587 remoteport=8008,8009,54430,56574,56587</p> </li> <li> <p>Uninstall firewall exceptions: netsh advfirewall firewall delete rule name=\u201dUnreal Swarm\u201d</p> </li> </ul> <p></p> <p>This diagram shows a scenario where the PC in the bottom center has kicked off a Unreal lighting bake. Three PCs have Unreal installed, but all the PCs are running Swarm Agents. The top center PC is running the Swarm Coordinator. Five PCs were chosen to participate in the bake. The other PC was busy (compiling code, etc.). Communication between the local agent and the remote agents, represented by the arrows, happens in a peer-to-peer fashion.</p>"},{"location":"ue4guide/graphics-development/lightmass-lightmapping/swarm-overview/#swarm-parameters","title":"Swarm Parameters","text":"<p>Many elements of how Swarm operates can be modified. The Settings tab in Swarm Agent allows you to change settings. Configuration information is stored in SwarmAgent.Options.xml and SwarmCoordinator.exe.config. Here are some of the most interesting elements, in order of importance.</p> <ul> <li> <p>CoordinatorRemotingHost: must match the Swarm Coordinator Computer name from Control Panel-&gt;System</p> </li> <li> <p>CacheFolder: where Swarm caches job information. At install time, we set this to the equivalent of %temp%/SwarmCache</p> </li> <li> <p>MaximumCacheSize: the maximum amount of HDD space that Swarm will consume in GB. We use 10 (the default).</p> </li> <li> <p>MaximumJobsToKeep: the maximum number of cached jobs (and logs) to keep around. We use 5 (the default), but it\u2019s extremely rare that we need to look at logs of old jobs, so I think 1 or 2 would be fine.</p> </li> <li> <p>AllowedRemoteAgentNames: allows you to select a subset of Remote agents that you want to use. We always want to use all available, so we set this to *</p> </li> <li> <p>AllowedRemoteAgentGroup: allows different PCs to participate in different Swarm groups. We currently have a single group with our team name.</p> </li> <li> <p>AgentGroupName: this is the name of the group that the local agent belongs to. We use our team name.</p> </li> <li> <p>LocalJobsDefaultProcessorCount and RemoteJobsDefaultProcessorCount (developer settings): the number of CPU cores used by Lightmass for local and remote bakes. These are set automatically to reasonable values, but can be reduced to lessen CPU impact at the cost of bake speed.</p> </li> </ul>"},{"location":"ue4guide/graphics-development/lightmass-lightmapping/swarm-overview/#swarm-installer","title":"Swarm Installer","text":"<p>To make life easier for our extended team, I wrote a Windows installer that handles the complexity described above. The installer uses the WiX Toolset to generate a standard Windows MSI file. Notes about the installer:</p> <ul> <li> <p>The installer is a 64-bit package. This addresses: 1) Unreal\u2019s recommendation that Lightmass run on 64-bit systems only, 2) a limitation of WiX that doesn\u2019t allow 32-bit packages to include/install 64-bit binaries, plus 3) the fact that everybody in our office is running 64-bit Windows anyway</p> </li> <li> <p>The following DirectX v9 files must be installed: dxsetup.exe, dxupdate.cab, dsetup.dll, dsetup32.dll, Jun2010_d3dx9_43_x64.cab and Apr2007_XInput_x64.cab. You can grab these files from the DirectX SDK. The WiX toolset page has good instructions for installing DX extensions.</p> </li> <li> <p>In addition to the normal installer-y stuff (copying files and updating the registry), the installer:</p> </li> <li> <p>Places a shortcut to SwarmAgent.exe in the Startup folder</p> </li> <li> <p>Configures the Swarm cache folder in SwarmAgent.Options.xml</p> </li> <li> <p>Punches holes in the firewall</p> </li> <li> <p>For uninstalls, in addition to nuking the right files, the installer:</p> </li> <li> <p>Shuts down Swarm</p> </li> <li> <p>Nukes the cache folder</p> </li> <li> <p>Restores the firewall</p> </li> </ul> <p>The Swarm requirements we publish to our team:</p> <ul> <li> <p>64-bit Windows 7 or above</p> </li> <li> <p>4+ GB RAM</p> </li> <li> <p>10+ GB free hard drive space</p> </li> </ul> <p>We recommend that everybody on the team with machines that meet the spec \u2014 including people that already have Unreal installed \u2014 install Swarm Agent.</p> <p>Reference From https://pkisensee.wordpress.com/2015/11/06/baking-with-swarm</p>"},{"location":"ue4guide/graphics-development/lightmass-lightmapping/using-lightmass/","title":"Using Lightmass","text":""},{"location":"ue4guide/graphics-development/lightmass-lightmapping/using-lightmass/#guides","title":"Guides","text":""},{"location":"ue4guide/graphics-development/lightmass-lightmapping/using-lightmass/#ue4-lightmass-deep-dives","title":"UE4 Lightmass Deep Dives","text":"<ul> <li>2016 UE4 Lightmass Deep Dive</li> <li>Vol 1: UE4 Lightmass for Large Console Games</li> <li>Vol 2: Practical usage of Lightmass in Architectural Visualization</li> <li>2018 UE4 Lightmass Deep Dive</li> <li>Vol 1: Lightmass \u5185\u90e8\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u6982\u8981(Lightmap \u7de8)]</li> <li>Vol 2: Lightmap \u4f5c\u6210\u306e\u305f\u3081\u306e Lightmass \u8a2d\u5b9a\u65b9\u6cd5</li> </ul>"},{"location":"ue4guide/graphics-development/lightmass-lightmapping/using-lightmass/#making-lightmass-understandable","title":"Making Lightmass Understandable","text":"<p>https://forums.unrealengine.com/development-discussion/architectural-and-design-visualization/60547-lets-make-lightmass-epic-and-understandable?88952-Lets-make-Lightmass-EPIC-(and-understandable)=&amp;highlight=swarm</p> <p>First, there are two completely separate paths for punctual lights (directional, spot, point) than for sky lights.</p> <p>Lightmass is heavily optimized around solving indirect lighting from punctual lights with high quality. In particular, the case where you have bright sunlight coming in a small window and hitting the wall/floor, lighting up the whole room, is what I would consider the primary use case. Lighting with sky lights / HDRI is a much more recent implementation and honestly it's not very high quality.</p>"},{"location":"ue4guide/graphics-development/lightmass-lightmapping/using-lightmass/#punctual-light-method","title":"Punctual light method","text":"<p>The short summary is that Final gathering is used to solve the first lighting bounce, and photons are used for bounces after that along with guiding the final gather.</p> <ol> <li> <p>Many photons are emitted from the light and deposited on the scene as directly visible (direct photons). We bounce these once and record any direct photon paths that resulted in a bounced photon being deposited. This identifies small (but critical) light entrances like windows. DirectPhotonDensity controls how many photons are emitted in this stage, and IndirectPhotonPathDensity controls how many paths are recorded (how accurately we find small windows).</p> </li> <li> <p>Many more photons are emitted from the light, along the direct photon paths. These are bounced for as many times as you requested NumIndirectLightingBounces. Each bounce has a much smaller number of photons successfully bouncing so more bounces after 2 has only a small impact on build times. IndirectPhotonDensity + IndirectIrradiancePhotonDensity control how many photons are emitted to represent multi-bounce lighting.    Now that the photons are ready for the entire scene we can start operating on each lightmap texel.</p> </li> <li> <p>Direct shadowing is computed for static and stationary lights. For static lights which use area shadows, NumShadowRays and NumPenumbraShadowRays control the quality of the penumbra, more samples are needed to support very large, smooth penumbras.</p> </li> <li> <p>We check to see if this texel is covered by other irradiance computations (steps 5-7). If there is, we reuse these nearby irradiance samples through interpolation. If not, we continue to steps 5-7. This is called Irradiance caching. Too much interpolation causes indirect shadows to be lost. The amount of reuse is controlled by RecordRadiusScale, PointBehindRecordMaxAngle, InterpolationMaxAngle. During the interpolation, we can gather even more nearby irradiance samples to further smooth the lighting.</p> </li> <li> <p>Nearby indirect photons are gathered around the lightmap texel. These tell us where most of the bright lighting is coming from, eg the small bright spot that lights up the entire room.</p> </li> <li> <p>We begin the final gather. Rays are traced out in all directions for the hemisphere of the texel. At the end of the ray we either hit some geometry, where we gather the lighting from photons at that point, or we miss geometry and hit the sky, where we evaluate the sky lighting. NumHemisphereSamples controls how many rays there are in this first refinement step.</p> </li> <li> <p>We do multiple iterations of refining the final gather. Each sector of the hemisphere is subdivided and we trace more rays to discover incoming lighting. We subdivide deeply around incoming indirect photons to make sure we resolve the small bright spot on the ground lighting the whole room. This is a form of importance sampling, also called importance driven final gathering. We also subdivide anytime there are significant differences between neighbors to reduce noise, this is called adaptive sampling. NumAdaptiveRefinementLevels controls how many refinement levels there are, AdaptiveBrightnessThreshold controls how big of a neighbor difference there must be to refine a sector.</p> </li> </ol> <p>As to the Lightmass WorldSettings options, IndirectLightingSmoothness operates on the settings in step 4), the amount of irradiance cache smoothing.</p> <p>IndirectLightingQuality increases the number of samples and depth of refinement in steps 5-7, the final gathering.</p>"},{"location":"ue4guide/graphics-development/lightmass-lightmapping/using-lightmass/#sky-light-method","title":"Sky light method","text":"<p>Assuming static skylight, stationary is a bit different</p> <ol> <li> <p>The sky light HDR texture is exported to Lightmass as an 3 band spherical harmonic, which you can think of as an extremely low resolution cubemap (2x2 on each face approx). So if you have a very bright spot in the sky cubemap it will be spread out over a large region. This is basically prefiltering to avoid noise.</p> </li> <li> <p>We do a mini final gather at each lightmap texel and compute sky lighting with a very low number of rays. This is cached on the surface and will become the first bounce of skylight GI once the final gather accesses it.</p> </li> <li> <p>During the final gather, any rays that hit the scene look up the cached sky direct lighting from step 2), which now becomes first bounce sky lighting. Any rays that miss the scene and hit the background lookup from the sky SH, this is sky direct lighting. We refine the final gather based on brightness differences between sectors of the hemisphere, but no importance sampling is done because we don't have any photons from the sky.</p> </li> </ol> <p>So now you can see why static sky lights have limited quality and only support one indirect lighting bounce. This is something we could improve, but it's a lot of work and complexity. Specifically, we should actually export a cubemap to Lightmass, and do importance sampling of the cubemap's contents (trace more rays to the brighter texels).</p> <p>(Reference)</p>"},{"location":"ue4guide/graphics-development/lightmass-lightmapping/using-lightmass/#lightmass-lightmap-config","title":"Lightmass Lightmap Config","text":"<p>Most common settings to tweak: INI<pre><code>[DevOptions.PrecomputedDynamicObjectLighting]\nSurfaceLightSampleSpacing=300\nFirstSurfaceSampleLayerHeight=50\nSurfaceSampleLayerHeightSpacing=250\nNumSurfaceSampleLayers=2\n</code></pre></p> <p>Look at <code>BaseLightmass.ini</code> for all of the settings to tweak baking lightmaps</p> <p>Tweak multiple skybounce lighting</p> <p>(Reference)</p>"},{"location":"ue4guide/graphics-development/render-architecture/base-usf-shaders-code-flow/","title":"Common Info:","text":""},{"location":"ue4guide/graphics-development/render-architecture/base-usf-shaders-code-flow/#params","title":"Params:","text":"C++<pre><code>- Specular = 0.5 by default, \\[0,1]\n\n- GBuffer.SpecularColor = lerp(0.08 * Specular.xxx, BaseColor, Metallic.xxx); //Think this means index of refraction\n\n- GBuffer.DiffuseColor = BaseColor - BaseColor * Metallic;\n\n\n- struct **FDeferredLightData**\n\n{\n\nfloat4 LightPositionAndInvRadius;\n\nfloat4 LightColorAndFalloffExponent;\n\nfloat3 LightDirection;\n\nfloat3 LightTangent;\n\nfloat SoftSourceRadius;\n\nfloat4 SpotAnglesAndSourceRadius;\n\nfloat MinRoughness;\n\nfloat ContactShadowLength;\n\nfloat2 DistanceFadeMAD;\n\nfloat4 ShadowMapChannelMask;\n\n/** Whether to use inverse squared falloff. */\n\nbool bInverseSquared;\n\n/** Whether this is a light with radial attenuation, aka point or spot light. */\n\nbool bRadialLight;\n\n/** Whether this light needs spotlight attenuation. */\n\nbool bSpotLight;\n\n/** Whether the light should apply shadowing. */\n\nuint ShadowedBits;\n\n};\n</code></pre> <ul> <li>Primitive Uniform Buffer:</li> </ul> <p>DECLARE_UNIFORM_BUFFER_STRUCT_MEMBER(FMatrix,LocalToWorld)                // always needed</p> <p>DECLARE_UNIFORM_BUFFER_STRUCT_MEMBER(FMatrix,WorldToLocal)                // rarely needed</p> <p>DECLARE_UNIFORM_BUFFER_STRUCT_MEMBER(FVector4,ObjectWorldPositionAndRadius)        // needed by some materials</p> <p>DECLARE_UNIFORM_BUFFER_STRUCT_MEMBER(FVector,ObjectBounds)                // only needed for editor/development</p> <p>DECLARE_UNIFORM_BUFFER_STRUCT_MEMBER_EX(float,LocalToWorldDeterminantSign,EShaderPrecisionModifier::Half)        // could be stored in the sign bit of the object radius</p> <p>DECLARE_UNIFORM_BUFFER_STRUCT_MEMBER(FVector,ActorWorldPosition)</p> <p>DECLARE_UNIFORM_BUFFER_STRUCT_MEMBER_EX(float,DecalReceiverMask,EShaderPrecisionModifier::Half)</p> <p>DECLARE_UNIFORM_BUFFER_STRUCT_MEMBER_EX(float,PerObjectGBufferData,EShaderPrecisionModifier::Half)                // 0..1, 2 bits, bDistanceFieldRepresentation, bHeightfieldRepresentation</p> <p>DECLARE_UNIFORM_BUFFER_STRUCT_MEMBER_EX(float,UseSingleSampleShadowFromStationaryLights,EShaderPrecisionModifier::Half)</p> <p>DECLARE_UNIFORM_BUFFER_STRUCT_MEMBER_EX(float,UseVolumetricLightmapShadowFromStationaryLights,EShaderPrecisionModifier::Half)</p> <p>DECLARE_UNIFORM_BUFFER_STRUCT_MEMBER_EX(float,UseEditorDepthTest,EShaderPrecisionModifier::Half)</p> <p>DECLARE_UNIFORM_BUFFER_STRUCT_MEMBER_EX(FVector4,ObjectOrientation,EShaderPrecisionModifier::Half)</p> <p>DECLARE_UNIFORM_BUFFER_STRUCT_MEMBER_EX(FVector4,NonUniformScale,EShaderPrecisionModifier::Half)</p> <p>DECLARE_UNIFORM_BUFFER_STRUCT_MEMBER_EX(FVector4,InvNonUniformScale,EShaderPrecisionModifier::Half)</p> <p>DECLARE_UNIFORM_BUFFER_STRUCT_MEMBER(FVector, LocalObjectBoundsMin)                // This is used in a custom material function (ObjectLocalBounds.uasset)</p> <p>DECLARE_UNIFORM_BUFFER_STRUCT_MEMBER(FVector, LocalObjectBoundsMax)                // This is used in a custom material function (ObjectLocalBounds.uasset)</p> <p>DECLARE_UNIFORM_BUFFER_STRUCT_MEMBER(uint32,LightingChannelMask)</p> <p>DECLARE_UNIFORM_BUFFER_STRUCT_MEMBER(float,LpvBiasMultiplier)</p> <ul> <li> <p>View.SkyLightParameters: X = max mip, Y = 1 if sky light should be rendered, 0 otherwise, Z = 1 if sky light is dynamic, 0 otherwise, W = blend fraction.</p> </li> <li> <p>FMaterialVertexParameters: Parameters needed by vertex shader material inputs. Are independent of vertex factory.</p> </li> <li> <p>FMaterialPixelParameters: parameters needed by pixel shader material inputs, related to Geometry.</p> </li> <li> <p>FPixelMaterialInputs: the result of the calculated per-pixel shared material properties from the material graph. Eg: basecolor, emissive, etc)</p> </li> </ul> <p>Shading Model:</p> <ul> <li> <p>Microfacet specular = D*G*F / (4*NoL*NoV) = D*Vis*F</p> </li> <li> <p>Vis = G / (4*NoL*NoV)</p> </li> </ul>"},{"location":"ue4guide/graphics-development/render-architecture/base-usf-shaders-code-flow/#base-pass-pixel-shaderusffpixelshaderinout_mainps","title":"Base Pass Pixel Shader.usf::FPixelShaderInOut_MainPS():","text":""},{"location":"ue4guide/graphics-development/render-architecture/base-usf-shaders-code-flow/#forward-lighting-pre-amblesetup","title":"Forward Lighting Pre-amble/setup:","text":"<ul> <li> <p>Calculate Material attributes for pixel that are shared (FPixelMaterialInputs)</p> </li> <li> <p>GetMaterialPixelParameters(): Converts from vertex factory specific interpolants FVertexFactoryInterpolants) to FMaterialPixelParameters</p> <ul> <li> <p>Implemented on each vertexfactory (ex: LocalVertexFactory.usf)</p> </li> <li> <p>Responsible for fully initializing FMaterialPixelParameters result</p> </li> </ul> </li> <li> <p>If HQ_TEXTURE_LIGHTMAP &amp;&amp; USES_AO_MATERIAL_MASK: GetLightMapCoordinates() &amp;&amp; GetAOMaterialMask()</p> </li> <li> <p>CalcMaterialParametersEx(): Runs the UE4 Node-based Material to calculate material attributes (FPixelMaterialInputs ) like basecolor, emissive, etc</p> </li> <li> <p>Initializes the subset of Parameters that was not set in GetMaterialPixelParameters</p> </li> <li> <p>Calculate the Material Input/Attributes and Normal. This is in the generated MaterialTemplate.usf from Material Editor</p> </li> <li> <p>Filled in by FHLSLMaterialTranslator::GetMaterialShaderCode() for each compiled material</p> </li> <li> <p>Output stored in the FPixelMaterialInputs PixelMaterialInputs parameter</p> </li> <li> <p>MaterialTemplate.usf Notes:</p> </li> <li> <p>CalcMaterialParametersEx() is where the actual shader computation happens and it gets stored in PixelMaterialInputs</p> </li> <li> <p>To retrieve those values in other parts of the shader, there are helper functions like GetMaterialRoughness()/GetMaterialRoughnessRaw()</p> </li> <li> <p>These look up the value from the PixelMaterialInputs parameter. Raw variant returns it directly, the non-raw might have some guarding/saturation</p> </li> <li> <p>Some functions like GetMaterialTranslucentBackscatteringExponent() just return a hardcoded value for that material</p> </li> <li> <p>There's also several helper functions that are implemented like GetObjectWorldPosition() or TransformWorldVectorToLocal()</p> </li> <li> <p>ApplyPixelDepthOffsetForBasePass()</p> </li> <li> <p>GetMaterialCoverageAndClipping()/DiscardMaterialWithPixelCoverage(): Clip if blend mode needs it</p> </li> <li> <p>Cache common results in local variables:</p> </li> </ul> <p>half3 BaseColor = GetMaterialBaseColor(PixelMaterialInputs);</p> <p>half Metallic = GetMaterialMetallic(PixelMaterialInputs);</p> <p>half Specular = GetMaterialSpecular(PixelMaterialInputs);</p> <p>float MaterialAO = GetMaterialAmbientOcclusion(PixelMaterialInputs);</p> <p>float Roughness = GetMaterialRoughness(PixelMaterialInputs);</p> <ul> <li> <p>Other Misc Stuff:</p> </li> <li> <p>SubsurfaceProfile/SubsurfaceData from GetMaterialSubsurfaceData(PixelMaterialInputs)</p> </li> <li> <p>Debuffer stuff ApplyDBufferData()</p> </li> <li> <p>half Opacity = GetMaterialOpacity(PixelMaterialInputs);</p> </li> <li> <p>VolumetricLightmapBrickTextureUVs = ComputeVolumetricLightmapBrickTextureUVs(MaterialParameters.AbsoluteWorldPosition);</p> </li> <li> <p>Initialize FGBufferData GBuffer struct (even in the forward pass)</p> </li> <li> <p>GetPrecomputedShadowMasks(): (deferred only) Gets volumetric shadowing/stationary shadowing from precomputed lighting. Volume LightMap is a 3D texture</p> <ul> <li> <p>SignedDistanceField &amp;&amp; StaticLighting:</p> </li> <li> <p>Use SDF for precomputed shadowing</p> </li> <li> <p>Statically Lightmapped Obj (HQ_TEXTURE_LIGHTMAP):</p> </li> <li> <p>return 0</p> </li> <li> <p>Everything else:</p> </li> <li> <p>ILCQ:</p> <ul> <li> <p>If UseSingleSampleShadowFromStationaryLights =&gt; use PrecomputedLightingBuffer.DirectionalLightShadowing which is calculated at that location in the LCQ cache (code comment in PrimitiveSceneProxy.h says bSingleSampleShadowFromStationaryLights is only precomputed for stationary directional lights)</p> </li> <li> <p>Otherwise it uses the shadowmaps so it returns 1 here (aka no shadowing)</p> </li> </ul> </li> <li> <p>UseVolumetricLightmapShadowFromStationaryLights (which is bUseVolumetricLightmap &amp;&amp; bUseSingleSampleShadowFromStationaryLights):</p> <ul> <li> <p>GetVolumetricLightmapDirectionalLightShadowing()</p> </li> <li> <p>This will only come from stationary directional lights as well</p> </li> </ul> </li> </ul> </li> <li> <p>SetGBufferForShadingModel(): Different MATERIAL*SHADINGMODEL** adjust the gbuffer here and write custom data</p> </li> <li> <p>(USES_GBUFFER ONLY): Velocity calculation</p> </li> <li> <p>Adjust GBuffer struct values based on shader:</p> </li> <li> <p>GBuffer.SpecularColor: lerp(0.08 * Specular.xxx, BaseColor, Metallic.xxx); //Think this means index of refraction</p> </li> <li> <p>GBuffer.Roughness: NormalCurvatureToRoughness(MaterialParameters.WorldNormal)</p> </li> <li> <p>(Subsurface_Profile &amp;&amp; USES_GBUFFER) AdjustBaseColorAndSpecularColorForSubsurfaceProfileLighting()</p> </li> <li> <p>GBuffer.DiffuseColor = BaseColor - BaseColor * Metallic;</p> </li> <li> <p>FORCE_FULLY_ROUGH optimization</p> </li> <li> <p>DiffuseOcclusion, SpecOcclusion = MaterialAO as initial values</p> </li> <li> <p>ApplyBentNormal(): Evaluate DiffOcclusion &amp; SpecOcclusion based on bentnormal</p> <ul> <li>Applies a vsibility cone intersection using bent normal &amp; roughness by converting to Spherical Gaussians and convolving there</li> </ul> </li> <li> <p>GBuffer.GBufferAO = AOMultiBounce()</p> </li> </ul>"},{"location":"ue4guide/graphics-development/render-architecture/base-usf-shaders-code-flow/#getprecomputedindirectlightingandskylight-indirect-diffuse-lighting","title":"GetPrecomputedIndirectLightingAndSkyLight(): Indirect Diffuse Lighting","text":"<p>Where we compute precalculated diffuse lightmap/indirect lighting cache light contribution. Specular comes from GetImageBasedReflectionLighting()</p> <ul> <li> <p>Pre-amble: before this function is called in BasePassPixelShader</p> </li> <li> <p>Calculate Color, DiffuseColor, IndirectIrradiance. NOTE: DiffuseColor is just for accumulating indirect/precalculated diffuse color. Color is the final total color that everything gets accumulated in. Direct dynamic lighting gets accumulated directly into Color variable</p> </li> <li> <p>Calculate BRDF for Indirect Diffuse</p> <ul> <li> <p>NOTE: DiffuseColorForIndirect/SubsurfaceColor is BRDF for indirect, not final color combined with lighting</p> </li> <li> <p>Default DiffuseColorForIndirect = GBuffer.DiffuseColor</p> </li> <li> <p>Default SubsurfaceColor= Normal materials =&gt; 0 | Subsurface/skin/twosided_foliage =&gt; SubsurfaceData.rgb</p> </li> <li> <p>Different materials can adjust this (eg MATERIAL_SHADINGMODEL_HAIR)</p> </li> </ul> </li> <li> <p>Lightmap Calculation: Also calculates subsurface indirect lighting</p> </li> <li> <p>PRECOMPUTED_IRRADIANCE_VOLUME_LIGHTING: Used by primitives that have volumetric lightmap data &amp;&amp; movable or LightAsIfVolumetric</p> <ul> <li> <p>FThreeBandSHVectorRGB IrradianceSH = GetVolumetricLightmapSH3(VolumetricLightmapBrickTextureUVs);</p> </li> <li> <p>// Diffuse convolution</p> </li> <li> <p>FThreeBandSHVector DiffuseTransferSH = CalcDiffuseTransferSH3(DiffuseDir, 1);</p> </li> <li> <p>OutDiffuseLighting = max(float3(0,0,0), DotSH3(IrradianceSH, DiffuseTransferSH)) / PI;</p> </li> </ul> </li> <li> <p>CACHED_POINT_INDIRECT_LIGHTING/CACHED_VOLUME_INDIRECT_LIGHTING: This is the old indirect lighting cache. ILCQ setting determines what to use (sample at a single point vs a per object volume texture of interpolated SH samples computed on CPU)</p> </li> <li> <p>HQ_TEXTURE_LIGHTMAP/LQ_TEXTURE_LIGHTMAP: GetLightMapColorHQ: Static lightmaps. LQ is non-directional and just used for mobile</p> </li> <li> <p>Lightmap data is stored as</p> <p>2 samples from the same texture:</p> </li> </ul> <p>Sample0.a and Sample1.a encodes the precomputed HDR luminance in LogL space</p> <p>Sample0.rgb encodes the precomputed lighting color.</p> <ul> <li>L1 SH Band Data Reconstruction</li> </ul> <p>Sample1.rgb encodes the L1 SH band data</p> <p>NOTE: SH basis is in the canonical math coordinate frame so you have to swizzle (eg: dot( SH, float4(WorldNormal.yzx, 1) )</p> <ul> <li> <p>Reconstruct primary average color for lightmap texel (aka SH L0 term)</p> </li> <li> <p>Luma is stored in Lightmap0.w in Log space</p> </li> <li> <p>Lightmap chromaticity is in UVW in Lightmap0.xyz (aka RGB * 1/L)</p> </li> <li> <p>Everything is range/scaled for compression. PrecomputedLightingBuffer.LightMapScale[0] &amp; LightMapAdd[0] stored the factors for color</p> </li> <li> <p>Reconstruct directionality</p> </li> <li> <p>SH is in Lightmap1. But Lightmap1 is encoded specially in reverse order (L0 term is in Lightmap1.w; L1 terms are in zyx)</p> </li> <li> <p>Also, SH is normalized s.t. L0 factor = 1 (Lightmap1.w would be 1.0); they use this to store residual for Logspace compression compression. Lightmap1.w is not used for SH (happens in LightmapData.cpp:QuantizeLightSamples())</p> </li> <li> <p>PrecomputedLightingBuffer.LightMapScale[0] &amp; LightMapAdd[0] stores the scale/bias</p> </li> <li> <p>All done bc Lightmap0 &amp; Lightmap1 are 32-bit quantized textures (8bits per component)</p> </li> <li> <p>The HDR luminance data is only encoded when using HQ lightmaps (see \"r.HighQualityLightMaps\").</p> </li> </ul> <p>This doubles the lightmap sizes but allows smooth gradients and wider range support.</p> <p>You can look at how the channels are used in LightmapCommon.usf if you want the details.</p> <ul> <li> <p>For shadowmaps, the engine encodes 1 light shadow attenuation per channel, supporting up to 4 precomputed shadows per mesh.</p> </li> <li> <p>GetSkyLighting(): Computes sky diffuse lighting, including precomputed shadowing</p> </li> <li> <p>Retrieves SkyBentNormal and SkyVisibility occlusion from cached volume texture/SkyOcclusionTexture/PrecomputedLightingBuffer.PointSkyBentNormal]</p> <ul> <li> <p>Dynamic objects using Volumetric Lightmap:</p> </li> <li> <p>SkyBentNormal = Looked up from the Volumetric Lightmap using GetVolumetricLightmapSkyBentNormal() which samples View.SkyBentNormalBrickTexture</p> </li> <li> <p>SkyVisibility = len(SkyBentNormal)</p> </li> <li> <p>Static Lightmap objects:</p> </li> <li> <p>WorldSkyBentNormalAndOcclusion from prebaked lightmap texture using GetSkyBentNormalAndOcclusion() sampling PrecomputedLightingBuffer.SkyOcclusionTexture</p> </li> <li> <p>SkyVisibility = SkyBentNormal .w;</p> </li> <li> <p>ILCQ Point or ILCQ Volume:</p> </li> <li> <p>NormalizedBentNormal is coming from uniform parameter PrecomputedLightingBuffer.PointSkyBentNormal</p> </li> <li> <p>The same bent normal is used for the entire object</p> </li> </ul> </li> <li> <p>Calculates occlusion from bent normal</p> </li> <li> <p>Translucent|Additive &amp;&amp; TransLightingVolumetricIsNonDir:</p> <ul> <li>Just use SkyBentNormal for the normal calculation in indirect lighting</li> </ul> </li> <li> <p>Everything else:</p> <ul> <li> <p>Lerping between the inputs of two lighting scenarios based on occlusion</p> </li> <li> <p>In the mostly unoccluded case, evaluate sky lighting with the material normal, because it has higher detail</p> </li> <li> <p>In the mostly occluded case, evaluate sky lighting with the bent normal, because it is a better representation of the incoming lighting</p> </li> <li> <p>Then treat the lighting evaluated along the bent normal as an area light, so we must apply the lambert term</p> </li> <li> <p>Also account for darkening due to the geometry term</p> </li> <li> <p>BentNormalWeightFactor = 1 - (1 - SkyVisibility) * (1 - SkyVisibility);</p> </li> <li> <p>SkyLightingNormal = lerp(NormalizedBentNormal, WorldNormal, BentNormalWeightFactor);</p> </li> <li> <p>GeometryTerm = lerp(saturate(dot(NormalizedBentNormal, WorldNormal)), 1, BentNormalWeightFactor);</p> </li> </ul> </li> <li> <p>Calculate Diffuse SH Irradiance:</p> </li> <li> <p>Standard analytical SH cosine clamped convolution with Irradiance SH factors from uniform buffer ( = GetEffectiveSkySHDiffuse(SkyLightingNormal) * ResolvedView.SkyLightColor.rgb)</p> </li> <li> <p>Modulate with Visibility factors (OutDiffuseLighting = DiffuseLookup * (SkyVisibility * GeometryTerm)</p> </li> <li> <p>Calculate Subsurface Skylighting for certain materials (Foliage):</p> </li> <li> <p>Same calculation as above except with -WorldNormal vs SkyBentNormal</p> </li> <li> <p>Modulated by SkyVisibility only</p> </li> <li> <p>Returns OutDiffuseLighting &amp; OutSubsurfaceLighting</p> </li> <li> <p>Returns OutDiffuseLighting, OutSubsurfaceLighting, OutIndirectIrradiance (luminance of OutDiffuseLighting)</p> </li> <li> <p>Post-amble: After this function returns back to BasePassPixelShader</p> </li> <li> <p>(FORWARD_SHADING &amp;&amp; Solid|Masked) Calculate IndirectOcclusion</p> <ul> <li> <p>IndirectOcclusion = GetIndirectOcclusion() which pulls from IndirectOcclusionTexture and does some biasing based on HasDynamicIndirectShadowCasterRepresentation()/HasCapsuleShadowRepresentation()</p> </li> <li> <p>Modulate DiffuseIndirectLighting, SubsurfaceIndirectLighting, IndirectIrradiance by IndirectOcclusion</p> </li> </ul> </li> <li> <p>DiffuseColor = (DiffuseIndirectLighting * DiffuseColorForIndirect + SubsurfaceIndirectLighting * SubsurfaceColor) * AOMultiBounce( GBuffer.BaseColor, DiffOcclusion ).</p> </li> </ul> <p>NOTE: DiffuseColor in FPixelShaderInOut_MainPS is actually indirect diffuse contribution. Direct Dynamic Lighting is accumulated directly into Color variable</p>"},{"location":"ue4guide/graphics-development/render-architecture/base-usf-shaders-code-flow/#getforwarddirectlighting","title":"GetForwardDirectLighting():","text":"<p>Get's final shaded pixel value from direct lights</p> <ul> <li> <p>Looks up shadow factors, shadow map channel for static shadowing, &amp; dynamic shadowing</p> </li> <li> <p>GetDynamicLighting(): on each light in the light grid cell. Calculates shading from that light</p> </li> <li> <p>If radial light =&gt; GetLocalLightAttenuation()</p> </li> <li> <p>Calculates light contribution (inverse falloff)</p> </li> <li> <p>Calcluates Contact Shadows by sampling zprepass depth</p> </li> <li> <p>AreaLightSpecular(): Calculate LobeEnergy modification for specular for area lights.</p> <ul> <li> <p>LobeEnergy = float3(ClearCoatRoughness, Specular Roughness, Diffuse Roughness); Default: 1.0</p> </li> <li> <p>LobeRoughness = float3(ClearCoatRoughness, Specular Roughness, Diffuse Roughness); Default: float3(ClearCoatRoughness, GBuffer.Roughness, 1)</p> </li> <li> <p>These are filled only for area lights</p> </li> </ul> </li> <li> <p>SurfaceShading(): Main call to actually shade based on GBuffer.ShadingModelID. Returns BRDF value.</p> <ul> <li> <p>StandardShading(): Normal Shading Model</p> </li> <li> <p>D_GGX, Vis_SmithJointApprox, Schick approximation, Diffuse_Lambert</p> </li> </ul> </li> <li> <p>LightAccumulator_Add()/LightAccumulator_GetResult(): Simple accumulator/return. Apply light falloff attenuation. Only does something special for subsurface models</p> </li> </ul>"},{"location":"ue4guide/graphics-development/render-architecture/base-usf-shaders-code-flow/#getimagebasedreflectionlighting","title":"GetImageBasedReflectionLighting():","text":"<p>Get indirect specular from image based reflection environment.</p> <ul> <li> <p>If REFLECTION_COMPOSITE_USE_BLENDED_REFLECTION_CAPTURES, use multiple reflection probes</p> </li> <li> <p>CompositeReflectionCapturesAndSkylight(): If HQ_REFLECTION is enabled in forward mode, it will blend multiple reflection captures vs using one</p> </li> <li> <p>Calculate average CompositedAverageBrightness from reflection captures based on view direction</p> </li> <li> <p>Get Skylight specular: (Forward mode) =&gt; GetSkyLightReflection(), (Deferred Mode GetSkyLightReflectionSupportingBlend())</p> <ul> <li>/** X = max mip, Y = 1 if sky light should be rendered, 0 otherwise, Z = 1 if sky light is dynamic, 0 otherwise, W = blend fraction. */</li> </ul> <p>float4 SkyLightParameters;</p> </li> <li> <p>For static skylights, modulate based on IndirectIrradiance &amp; CompositedAverageBrightness based on roughness &amp; IndirectSpecularOcclusion (which always seems to be 1 in forward)</p> </li> <li> <p>Returns SpecularIBL</p> </li> <li> <p>EnvBRDFApprox() - analytical approximation instead of using LUT of preconvolved splitsum approximation (https://www.unrealengine.com/en-US/blog/physically-based-shading-on-mobile; environment map convolution described here https://jmonkeyengine.github.io/wiki/jme3/advanced/pbr_part3.html)</p> </li> <li> <p>GetSimpleForwardLightingDirectionalLight(): For Simple directional lighting only for low-end hw</p> </li> </ul> <p>Prefiltering/baking:</p> <p>Prefiltering split sum approximation for Image based lighting (https://de45xmedrsdbp.cloudfront.net/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf):</p> <p>ImportanceSampleGGX()</p> <p>SpecularIBL()</p> <p>DiffuseIBL()</p> <p>PrefilterEnvMap()</p> <p>ApproximateSpecularIBL()</p> <p>IntegrateBRDF()</p> <p>Common #if Defines</p> <p>Below are some common pre-processor defines found in the deferred shading pipeline. I have put together a list of their intended meaning based on what C++ code triggers them. This will hopefully let you figure out which sections of the deferred pipeline apply to your code as you can check the pre-processor define against this list to see what it translates into in terms of UE4 settings.</p> <ul> <li> <p>#if NON_DIRECTIONAL_DIRECT_LIGHTING This is found in DeferredLightingCommon.ush but only seems to be defined in ForwardLightingCommon.ush as #define NON_DIRECTIONAL_DIRECT_LIGHTING (TRANSLUCENCY_LIGHTING_VOLUMETRIC_NONDIRECTIONAL || TRANSLUCENCY_LIGHTING_VOLUMETRIC_PERVERTEX_NONDIRECTIONAL).</p> </li> <li> <p>#if SUPPORT_CONTACT_SHADOWS provides support for Unreal\u2019s Contact Shadows Feature.</p> </li> <li> <p>#if REFERENCE_QUALITY is defined to 0 at the top of DeferredLightingCommon.ush\u200a\u2014\u200amight be for cinematic rendering?</p> </li> <li> <p>#if ALLOW_STATIC_LIGHTING is true if the r.AllowStaticLighting console variable is set to 1. This matches the Project Settings &gt; Rendering option for Static Lighting support.</p> </li> <li> <p>#if USE_DEVELOPMENT_SHADERS is true if COMPILE_SHADERS_FOR_DEVELOPMENT is true (and the platform supports it). COMPILE_SHADERS_FOR_DEVELOPMENT is true if r.CompileShadersForDevelopment is set.</p> </li> <li> <p>#if TRANSLUCENT_SELF_SHADOWING is defined for objects being rendered with a FSelfShadowedTranslucencyPolicy. I believe this is for Lit Translucency support.</p> </li> <li> <p>#if SIMPLE_FORWARD_DIRECTIONAL_LIGHT and #if SIMPLE_FORWARD_SHADING seem to be set during Light Map rendering for stationary directional lights.</p> </li> <li> <p>#if FORWARD_SHADING is set when r.ForwardShading is set to 1.</p> </li> <li> <p>#if IMPORTANCE_SAMPLE =&gt; Doesn't seem to be used</p> </li> <li> <p>Calls ImageBasedLightingHair() &amp; ImageBasedLightingMIS()</p> </li> </ul> <p>Misc funcs:</p> <p>VolumetricLightmapBrickTextureUVs = ComputeVolumetricLightmapBrickTextureUVs(WorldPosition);</p> <p>ComputeVolumetricLightmapBrickTextureUVs(VolumetricLightmapBrickTextureUVs)</p> <p>GetVolumetricLightmapAmbient(VolumetricLightmapBrickTextureUVs)</p> <p>GetVolumetricLightmapSH1(VolumetricLightmapBrickTextureUVs)</p> <p>GetVolumetricLightmapSHCoefficients0(VolumetricLightmapBrickTextureUVs)</p> <p>GetVolumetricLightmapSH2(VolumetricLightmapBrickTextureUVs)</p> <p>GetVolumetricLightmapSH3(VolumetricLightmapBrickTextureUVs)</p> <p>GetVolumetricLightmapDirectionalLightShadowing(VolumetricLightmapBrickTextureUVs)</p>"},{"location":"ue4guide/graphics-development/render-architecture/detailed-render-flow/","title":"Detailed render flow","text":"<p>The start of Deferred Rendering is</p> <p>Engine / Source / Runtime / Renderer / Private / DeferredShadingRenderer.cpp (532)</p> <p>FDeferredShadingSceneRenderer :: Render ()</p> <p>It starts from here.</p> Number of lines Code piece Contents 539 GRenderTargetPool.TransitionTargetsWritable () Transition to the state where the target of the target pool can be drawn 542 SceneContext.ReleaseSceneColor () Release scene color buffer 546 to 552 FRHICommandListExecutor :: WaitOnRHIThreadFence () If RHI is running in a separate thread, wait for OcculusionSubmittedFence here Wait for completion of the OcculusionCulling process of the previous stage? 568 GSystemTextures.InitializeTextures () Initialization of system texture Nothing is done if initialized 571 SceneContext.Allocate () Secure the buffer for the render target matching the ViewFamily Information on whether ViewFamily has FeatureLevel or SceneCapture 573 SceneContext.AllocDummyGBufferTargets () Assign dummy black texture to GBuffer 579 InitViews () Various initialization of view About crawling of transformation meshes, translucent sorting, initialization of shadow and write cash 581-588 PostInitViewFamily_RenderThread () etc. Unimplemented 599 to 606 GetEyeAdaptation () It is meaningless because it calls the const function but it does not store the acquired one? 608 to 631 if (ShouldPrepareDistanceFieldScene ()) This block becomes effective when the DistanceField system (AO, Shadow, etc.) is used However, IntelHD 4000 series seems to fail to generate 3D texture, and processing contents which are forcibly invalidated are required for DF technology Creation, update, etc. of Volume texture aligned in View space 720 to 727 FGlobalDynamicVertexBuffer :: Get (). Commit () Commit processing of dynamic vertex buffer and index buffer Mainly unlock vertices and index buffers for particles (unmapped) 732 to 737 Scene-&gt; FXSystem-&gt; PreRender () Preprocessing rendering effects It is not done here if planar reflection mainly for updating GPU particles is effective or render thread is effective 767 to 788 RenderPrePass () Performing Z Pre-Pass rendering 807 SceneContext.ResolveSceneDepthTexture () Deployment of resolve compression depth of depth buffer rendered with Z Pre-Pass and resolve processing of MSAA 811 ComputeLightGrid () From the computational shader code of the light grid, it is mainly for semi-transparent Forward Rendering which is generating light link list for Clusterd lighting 821 - 826 SceneContext.AllocGBufferTargets () Memory allocation for GBuffer 830 - 841 RenderOcclusion () Occlusion related rendering We also create a hierarchical depth buffer here, such as occlusion queries for low resolution buffers It is effective when Z Pre-Pass draws everything in the depth buffer When parallel processing of SSAO is performed, processing starts here 845 to 849 RenderShadowDepthMaps () Draw shadow map Render it to an atlased shadow map unlike in the past 852 to 857 ClearLPVs () Clear the buffer used for Light Propagation Volume 859 to 863 RenderCustomDepthPassAtLocation () Draw CustomDepth before base pass If you set 0 in r.CustomDepth.Order, draw at this stage It can be used in the DBuffer path 865 to 868 ComputeVolumetricFog () In order to apply volume fog, only one parallel light source that lights space-divided 3D texture (probably) corresponds to light function 870 - 878 RenderForwardShadingShadowProjections () Project shadow on scene in case of Forward Rendering In Forward, it is difficult to process multiple shadows at the time of material calculation, so calculate the shadow attenuation in a pure white buffer called a white buffer 885 to 900 if (bDBuffer) Draw Deferred Decal when DBuffer is enabled 902 to 934 AllocateDeferredShadingPathRenderTargets () Secure render target for Deferred shading Depending on conditions, clear GBuffer and volume write buffer for translucency 936 to 946 BeginRenderingGBuffer () Render target setting For wire frame display, use MSAA buffer 951 to 958 RenderBasePass () Drawing the base path Resolving the depth buffer after the end of the base pass which seems to be loading commands in parallel by multiple threads 976 to 985 ClearGBufferAtMaxZ () Clear GBuffer of unpainted part Usually it is not necessary, but for GBuffer display correspondence? 987 VisualizeVolumetricLightmap () Visualization of volume light map 989 ResolveSceneDepthToAuxiliaryTexture () Resolve the depth buffer to another buffer Depth Test for hardware that can not be fetched while testing 991 to 1002 RenderOcclusion () Occlusion drawing after base pass If rendering is not done at line 830, rendering here 1012 to 1017 RenderShadowDepthMaps () Draw shadow map and volume fog If the occlusion drawing is after the base pass, do it here 1019 to 1023 RenderCustomDepthPassAtLocation () Custom depth drawing after base pass Normally it will be drawn here 1028 to 1038 FXSystem-&gt; PostRenderOpaque () Effect drawing after base pass Maintenance of GPU particles taking a collision judgment is done 1042 to 1054 RenderVelocities () Draw speed buffer 1057 CopyStencilToLightingChannelTexture () Copy the write channel information written to the stencil buffer 1059 to 1061 GfxWaitForAsyncSSAO () Wait for rendering of parallel processing SSAO 1065 to 1081 ProcessAfterBasePass () Post process after base pass If unprocessed yet, perform Deferred Decal or SSAO processing 1084 to 1101 SetRenderTargetsAndClear () Clear stencil buffer only 1111 to 1114 RenderIndirectCapsuleShadows () Indirect lighting calculation by capsule shadow Multiplication with SceneColor and SSAO At this stage, SceneColor should have the base pass emissivity written 1118 RenderDFAOAsIndirectShadowing () We also calculate the vent normal for the drawing of DistanceFieldAO, and then use it in several stages 1121 to 1124 ClearTranslucentVolumeLighting () Clear the translucent volume light 1127 RenderLights () Rendering lights <p>From here we enter the RenderLights () function once.</p> <p>The source code is below.</p> <p>Engine / Source / Runtime / Renderer / Private / LightRendering.cpp (316)</p> Number of lines Code piece Contents 329 - 332 GatherSimpleLights () Collect particle light as SimpleLight Mainly for tile based lighting 340 to 365 LightSceneInfo-&gt; ShouldRenderLight () Create a list of lights to draw 368 to 375 SortedLights.Sort () Sort the light with shadow, with light function etc. 420 to 424 WaitComputeFence (TranslucencyLightingVolumeClearEndFence) Wait for asynchronous execution of translucent write volume 435 to 455 RenderTiledDeferredLighting () Perform tile-based Deferred Lighting 457-461 RenderSimpleLightsStandardDeferred () If tile-based rendering that renders SimpleLight is executed, rendering here is not performed 463-478 RenderLight () Render with light without shadows, no light function 480 - 495 InjectTranslucentVolumeLightingArray () Draw shadowless light, SimpleLight on translucent light volume 1 Write 1 for each slice with geometry shader Draw with DrawCall 499 to 559 UpdateLPVs () When LPV is valid, update LPV Reflective Shadow Maps and direct light into the volume 569 for (int32 LightIndex = AttenuationLightStart; ... From here shadowed or / and processing with light with write function 592 to 631 RenderShadowProjections () Shadow rendering shadow attenuation to the white buffer is not performed at lighting calculation but once drawn in the white buffer of the same size as the frame buffer It also draws to translucent volume light and height map light 633 to 637 HeightfieldLightingViewInfo.ComputeLighting () Heightfield lighting calculation Heightfield only Lighting results are rendered to an atlas texture 640 to 657 RenderPreviewShadowsIndicator () Draw attenuation by write function in white buffer 659 to 662 CopyToResolveTarget () White buffer resolve 664 to 669 InjectTranslucentVolumeLighting () If the shadow is not valid, render to the semitransparent light volume here 674 to 677 RenderLight () Direct rendering of lights <p>Light rendering is here.</p> <p>After that we will return to DeferredShadingRenderer.cpp again.</p> Number of lines Code piece Contents 1133 InjectAmbientCubemapTranslucentVolumeLighting () Render Ambient CubeMap to translucent light volume 1137 FilterTranslucentVolumeLighting () Filtering translucent light volume 3 x 3 x 3 box filter 1142 to 1153 ProcessLpvIndirect () Post process process after lighting Currently only LPV application 1155 RenderDynamicSkyLighting () Drawing dynamic skylights 1159 ResolveSceneColor () Resolve the target of the SceneColor drawn so far Usually, you use the resolve command of RHI, but if mobile emulation is required special processing 1162 RenderDeferredReflections () Apply environmental reflection as post process Alsocalculate Screen Space Reflection here 1169 to 1173 ProcessAfterLighting () Post process after applying reflection Currently only post process processing of Screen Space Subsurface Scattering 1180 to 1185 RenderLightShaftOcclusion () Drawing shielding information on the light shaft Although you can activate the light shaft without this, there is a difference in quality when there is a shielding near the camera 1188 to 1212 RenderAtmosphere () Drawing Atomospheric Fog 1217 to 1222 RenderFog () Drawing volume fog of Height Fog is also applied here 1224 to 1236 RenderPostOpaqueExtensions () Additional processing after opaque rendering is like a rendering process that the user can specify in C ++ ? 1252 to 1261 RenderTranslucency () Draw translucent objects In case of Separate Translucency, draw it in another buffer and do it until composition 1267 to 1275 RenderDistortion () Drawing material with Refraction enabled 1280 to 1286 RenderLightShaftBloom () Results differ depending on whether shielding information for drawing the light shaft is drawn or not 1288 to 1293 RenderOverlayExtensions () Perhaps user-executable rendering passes Like RenderPostOpaqueExtensions 1295 to 1303 RenderDistanceFieldLighting () DistanceField type lighting processing (GI etc.) 1306 to 1318 RenderMeshDistanceFieldVisualization () RenderStationaryLightOverlap () Information for debugging Information on visualized mesh DF and StationaryLight overlap information 1336 to 1341 GPostProcessing.Process () Drawing post process 1361 to 1366 RenderFinish () Drawing end processing Debug visualization etc. <p>that's all.</p> <p>From here it is a post process.</p> <p>Engine / Source / Runtime / Renderer / Private / PostProcess / PostProcessing.cpp (1262) From this location.</p> Number of lines Code piece Contents 1385 to 1451 AddPostProcessDepthOfFieldGaussian () AddPostProcessDepthOfFieldCircle () AddPostProcessDepthOfFieldBokeh () Drawing of depth of field (DoF) In the case of BokehDoF, synthesis with the Separate Translucency buffer is also done here 1453 - 1463 RegisterPass (new (FMemStack :: Get ()) FRCPassPostProcessBokehDOFRecombine (bIsComputePass)) If it is not BokehDoF, synthesize Separate Translucency here 1465 AddPostProcessMaterial (Context, BL_BeforeTonemapping, SeparateTranslucency) Apply post process material before tone map 1469 - 1482 AddTemporalAA () Apply TemporalAA 1484 to 1544 FRCPassPostProcessMotionBlur () Apply motion blur Using an improved version of [A Reconstruction Filter for Plausible Motion Blur ] It is also possible to apply higher quality blur by 2-pass rendering using scale values changed If 1 is specified for r.MotionBlurSeparable it becomes valid 1546 to 1559 FRCPassPostProcessVisualizeMotionBlur () Visualization of motion blur and bloom 1562 to 1572 FRCPassPostProcessDownsample () Downscaling the SceneColor buffer to a half resolution buffer 1574 to 1609 FRCPassPostProcessHistogram () Use the down-sampled SceneColor to obtain the histogram of the screen 1612 to 1625 CreateDownSampleArray () Perform multiple downsampling from the half resolution SceneColor for Bloom If Eye Adaptation is enabled, set up in this 1628 to 1653 AddPostProcessBasicEyeAdaptation () AddPostProcessHistogramEyeAdaptation If bloom which executes Eye Adaptation is invalid, it downsamples here 1655 to 1756 AddBloom () Apply blooming Also perform lens flare and lens blur in this function 1760 to 1790 AddTonemapper () Apply tone map 1792 - 1795 AddPostProcessAA () Apply FXAA 1797-1804 FRCPassPostProcessVisualizeDOF () DoF Visualization 1808 to 1823 AddGammaOnlyTonemapper () If it is not a full post process, apply Separate Translucency synthesis and simple tone mapper 1826 to 1906 FRCPassPostProcessVisualizeComplexity () etc. Various visualization etc. 1908 AddPostProcessMaterial (Context, BL_AfterTonemapping ... Apply post-process material after tone map 1910-1982 FRCPassPostProcessSubsurfaceVisualize () etc. Various visualization etc. 1986 to 2025 FRCPassPostProcessUpscale () If the screen percentage is valid, upscale here <p>Or more.</p> <p>Congratulations!</p> <p>Normally, when you use UE 4 , you do not need to be conscious of the order of these paths, but you should read the source code if you really want to replace the processing, or want to avoid wasteful processing.</p> <p>I hope this article will help such people.</p> <p>Reference From http://monsho.hatenablog.com/entry/2017/12/16/012502</p>"},{"location":"ue4guide/graphics-development/render-architecture/drawing-policies/","title":"Drawing policies","text":""},{"location":"ue4guide/graphics-development/render-architecture/drawing-policies/#drawing-policies","title":"Drawing Policies","text":"<p>Drawing policies contain the logic to render meshes with pass specific shaders. They use the FVertexFactory interface to abstract the mesh type, and the FMaterial interface to abstract the material details. At the lowest level, a drawing policy takes a set of mesh material shaders and a vertex factory, binds the vertex factory's buffers to the RHI, binds the mesh material shaders to the RHI, sets the appropriate shader parameters, and issues the RHI draw call.</p> <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/Rendering/index.html</p>"},{"location":"ue4guide/graphics-development/render-architecture/drawing-policies/#drawing-policy-methods","title":"Drawing Policy methods","text":"Function Description Constructor Finds the appropriate shader from the given vertex factory and material shader map, stores these references. CreateBoundShaderState Creates an RHI bound shader state for the drawing policy. Matches/Compare Provides methods to sort the drawing policy with others in the static draw lists. Matches must compare on all the factors that DrawShared depends on. DrawShared Sets RHI state that is constant between drawing policies that return true from Matches. For example, most drawing policies sort on material and vertex factory, so shader parameters depending only on the material can be set, and the vertex buffers specific to the vertex factory can be bound. State should always be set here if possible instead of SetMeshRenderState, since DrawShared is called less times in the static rendering path. SetMeshRenderState Sets RHI state that is specific to this mesh, or anything not set in DrawShared. This is called many more times than DrawShared so performance is especially critical here. DrawMesh Actually issues the RHI draw call. <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/Rendering/index.html</p>"},{"location":"ue4guide/graphics-development/render-architecture/drawing-policies/#rendering-paths","title":"Rendering paths","text":"<p>UE4 has a dynamic path which provides more control but is slower to traverse, and a static rendering path which caches scene traversal as close to the RHI level as possible. The difference is mostly high level, since they both use drawing policies at the lowest level. Each rendering pass (drawing policy) needs to be sure to handle both rendering paths if needed.</p>"},{"location":"ue4guide/graphics-development/render-architecture/drawing-policies/#dynamic-rendering-path","title":"Dynamic rendering path","text":"<p>The dynamic rendering path uses TDynamicPrimitiveDrawer and calls DrawDynamicElements on each primitive scene proxy to render. The set of primitives that need to use the dynamic path to be rendered is tracked by FViewInfo::VisibleDynamicPrimitives. Each rendering pass needs to iterate over this array, and call DrawDynamicElements on each primitive's proxy. DrawDynamicElements of the proxy then needs to assemble as many FMeshElements as it needs and submit them with DrawRichMesh or TDynamicPrimitiveDrawer::DrawMesh. This ends up creating a new temporary drawing policy, calling CreateBoundShaderState, DrawShared, SetMeshRenderState, and finally DrawMesh.</p> <p>The dynamic rendering path provides a lot of flexibility because each proxy has a callback in DrawDynamicElements where it can execute logic specific to that component type. It also has minimal insertion cost but high traversal cost, because there is no state sorting, and nothing is cached.</p>"},{"location":"ue4guide/graphics-development/render-architecture/drawing-policies/#static-rendering-path","title":"Static rendering path","text":"<p>The static rendering path is implemented through static draw lists. Meshes are inserted into the draw lists when they are attached to the scene. During this insertion, DrawStaticElements on the proxy is called to collect the FStaticMeshElements. A drawing policy instance is then created and stored, along with the result of CreateBoundShaderState. The new drawing policy is sorted based on its Compare and Matches functions and inserted into the appropriate place in the draw list (see TStaticMeshDrawList::AddMesh). In InitViews, a bitarray containing visibility data for the static draw list is initialized and passed into TStaticMeshDrawList::DrawVisible where the draw list is actually drawn. DrawShared is only called once for all the drawing policies that match each other, while SetMeshRenderState and DrawMesh are called for each FStaticMeshElement (see TStaticMeshDrawList::DrawElement).</p> <p>The static rendering path moves a lot of work to attach time, which significantly speeds up scene traversal at rendering time. Static draw list rendering is about 3x faster on the rendering thread for Static Meshes, which allows a lot more Static Meshes in the scene. Because static draw lists cache data at attach time, they can only cache view independent state. Primitives that are rarely reattached but often rendered are good candidates for the static draw lists.</p> <p>The static rendering path can expose bugs because of the way it only calls DrawShared once per state bucket. These bugs can be difficult to detect, since they depend on the rendering order and the attach order of meshes in the scene. Special viewmodes such as lighting only, unlit, etc will force all primitives to use the dynamic path, so if a bug goes away when forcing the dynamic rendering path, there is a good chance it is due to an incorrect implementation of a drawing policy's DrawShared and/or the Matches function.</p> <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/Rendering/index.html</p> <p>Look at Fluid Surface Plugin that has a custom shader/draw path https://github.com/Ehamloptiran/UnrealEngine/releases</p> <p>Global shaders</p> <p>Global shaders are shaders which operate on fixed geometry (like a full screen quad) and do not need to interface with materials. Examples would be shadow filtering, or post processing. Only one shader of any given global shader type exists in memory.</p> <p>Material and Mesh types</p> <p>Materials are defined by a set of states that control how the material is rendered (blend mode, two sided, etc) and a set of material inputs that control how the material interacts with the various rendering passes (BaseColor, Roughness, Normal, etc).</p> <p>Vertex Factories</p> <p>Materials have to support being applied to different mesh types, and this is accomplished with vertex factories. A **FVertexFactoryType**represents a unique mesh type, and a FVertexFactory instance stores the per-instance data to support that unique mesh type. For example, FGPUSkinVertexFactory stores the bone matrices needed for skinning, as well as references to the various vertex buffers that the GPU skin vertex factory shader code needs as input. The vertex factory shader code is an implicit interface which is used by the various pass shaders to abstract mesh type differences. Vertex factories consist of mainly vertex shader code, but some pixel shader code as well. Some important components of the vertex factory shader code are:</p> Function Description FVertexFactoryInput Defines what the vertex factory needs as input to the vertex shader. These must match the vertex declaration in the C++ side FVertexFactory. For example, LocalVertexFactory's FVertexFactoryInput has float4 Position : POSITION;, which corresponds to the position stream declaration in FStaticMeshLODResources::SetupVertexFactory. FVertexFactoryIntermediates Used to store cached intermediate data that will be used in multiple vertex factory functions. A common example is the TangentToLocal matrix, which had to be computed from unpacked vertex inputs. FVertexFactoryInterpolantsVSToPS Vertex factory data to be passed from the vertex shader to the pixel shader. VertexFactoryGetWorldPosition This is called from the vertex shader to get the world space vertex position. For Static Meshes this merely transforms the local space positions from the vertex buffer into world space using the LocalToWorld matrix. For GPU skinned meshes, the position is skinned first and then transformed to world space. VertexFactoryGetInterpolantsVSToPS Transforms the FVertexFactoryInput to FVertexFactoryInterpolants, which will be interpolated by the graphics hardware before getting passed into the pixel shader. GetMaterialPixelParameters This is called in the pixel shader and converts vertex factory specific interpolants (FVertexFactoryInterpolants) to the FMaterialPixelParameters structure which is used by the pass pixel shaders. <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/Rendering/ShaderDevelopment/index.html</p>"},{"location":"ue4guide/graphics-development/render-architecture/drawing-policies/#material-shaders","title":"Material Shaders","text":"<p>Shaders using FMaterialShaderType are pass specific shaders which need access to some of the material's attributes, and therefore must be compiled for each material, but do not need to access any mesh attributes. The light function pass shaders are an example of FMaterialShaderTypes.</p> <p>Shaders using FMeshMaterialShaderType are pass specific shaders which depend on the material's attributes AND the mesh type, and therefore must be compiled for each material/vertex factory combination. For example TBasePassVS / TBasePassPS need to evaluate all of the material inputs in a forward rendering pass.</p> <p>A material's set of required shaders is contained in a FMaterialShaderMap. It looks like this:</p> C++<pre><code>FMaterialShaderMap\nFLightFunctionPixelShader - FMaterialShaderType\nFLocalVertexFactory - FVertexFactoryType\nTDepthOnlyPS - FMeshMaterialShaderType\nTDepthOnlyVS - FMeshMaterialShaderType\nTBasePassPS - FMeshMaterialShaderType\nTBasePassVS - FMeshMaterialShaderType\nEtc\nFGPUSkinVertexFactory - FVertexFactoryType\nEtc\n</code></pre> <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/Rendering/ShaderDevelopment/index.html</p>"},{"location":"ue4guide/graphics-development/render-architecture/drawing-policies/#creating-a-material-shader","title":"Creating a material shader","text":"<p>A material shader type is created with the DECLARE_SHADER_TYPE macro:</p> <p>class FLightFunctionPixelShader : public FShader { DECLARE_SHADER_TYPE(FLightFunctionPixelShader,Material);</p> <p>This declares the necessary metadata and functions for a material shader type. The material shader type is instantiated with IMPLEMENT_MATERIAL_SHADER_TYPE:</p> <p>IMPLEMENT_MATERIAL_SHADER_TYPE(,FLightFunctionPixelShader,TEXT(\"LightFunctionPixelShader\")</p> <p>This generates the material shader type's global metadata, which allows us to do things like iterate through all shaders using a given shader type at runtime.</p> <p>A typical material pixel shader type will first create a FMaterialPixelParameters struct by calling the GetMaterialPixelParameters vertex factoryfunction. GetMaterialPixelParameters transforms the vertex factory specific inputs into properties like WorldPosition, TangentNormal, etc that any pass might want to access. Then a material shader will call CalcMaterialParameters, which writes out the rest of the members of FMaterialPixelParameters, after which FMaterialPixelParameters is fully initialized. The material shader will then access some of the material's inputs through functions in MaterialTemplate.usf (GetMaterialEmissive for the material's emissive input for example), do some shading and output a final color for that pass.</p> <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/Rendering/ShaderDevelopment/index.html</p>"},{"location":"ue4guide/graphics-development/render-architecture/drawing-policies/#special-engine-materials","title":"Special Engine Materials","text":"<p>UMaterial has a setting called bUsedAsSpecialEngineMaterial that allows the material to be used with any vertex factory type. This means all vertex factories are compiled with the material, which will be a very large set. bUsedAsSpecialEngineMaterial is useful for:</p> <ul> <li> <p>Materials used with rendering viewmodes like lighting only.</p> </li> <li> <p>Materials used as fallbacks when there is a compilation error (DefaultDecalMaterial, DefaultMaterial, etc).</p> </li> <li> <p>Materials whose shaders are used when rendering other materials in order to cut down on the number of shaders that have to be cached. For example, an opaque material's depth-only shaders will produce the same depth output as the DefaultMaterial, so the DefaultMaterial's shaders are used instead and the opaque material skips caching the depth-only shader.</p> </li> </ul> <p>Shader compilation</p> <p>UE4 compiles shaders asynchronously using a streaming system. Compile requests are enqueued when materials load that do not have a cached shader map, and compile results are applied as they become available, without blocking the engine. This is optimal in terms of load time and compile throughput, but it does mean that there are quite a few layers between the actual platform shader compile and the material that requested it.</p> <p>The actual compiling work is done in helper processes called the Shader Compile Workers, because the platform shader compile functions (D3DCompile) often contain critical sections within them that prevent multi-core scaling within a single process.</p> <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/Rendering/ShaderDevelopment/index.html</p> <p>Debugging shader compilers</p> <p>There are some settings to control how compilation is done which can simplify debugging of the shader compilers. These can be found in the*[DevOptions.Shaders]* section of BaseEngine.ini.</p> Setting Description bAllowCompilingThroughWorkers Whether to launch the SCW to call the compiler DLL's or whether UE4 should call the compiler DLL's directly. If disabled, compiling will be single-core. bAllowAsynchronousShaderCompiling Whether compiling should be done on another thread within UE4. <p>If you want to step into the shader compiler DLL's directly from UE4 (CompileD3D11Shader for example), you should set both of these to false. Compilation will take a long time though, so make sure all other shaders have been cached.</p> <p>Retrying on compile errors</p> <p>With r.ShaderDevelopmentMode enabled, you will get the opportunity to retry on shader compile error. This is especially important for global shaders since it is a fatal error if they do not compile sucessfully.</p> <p>In debug, with the debugger attached, you will hit a breakpoint and get the compile error in the Visual Studio output window. You can then double-click the error log to be taken directly to the offending line.</p> <p></p> <p>Otherwise you will get a Yes/No dialog</p> <p></p> <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/Rendering/ShaderDevelopment/index.html</p> <p>Dumping debug info</p> <p>You can also use r.DumpShaderDebugInfo=1 to get files saved out to disk for all the shaders that get compiled. It can be useful to set this inConsoleVariables.ini just like r.ShaderDevelopmentMode. Files are saved to GameName/Saved/ShaderDebugInfo, including</p> <ul> <li> <p>Source files and includes</p> </li> <li> <p>A preprocessed version of the shader</p> </li> <li> <p>A batch file to compile the preprocessed version with equivalent commandline options to the compiler that were used</p> </li> </ul> <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/Rendering/ShaderDevelopment/index.html</p>"},{"location":"ue4guide/graphics-development/render-architecture/game-thread-update-code-flow/","title":"Game thread update code flow","text":"<p>For UPrimitiveComponent:</p> <p>PostLoad()</p> <ul> <li>BeginInitResources(): Create static render resources (e.g. index/vertex buffer)</li> </ul> <p>Component Register</p> <ul> <li> <p>FScene::AddPrimitive()</p> </li> <li> <p>Calls PrimitiveSceneProxy::CreateSceneProxy()</p> </li> <li> <p>GT Enqueues PrimitiveSceneProxy::SetTransform(): Updates render side xforms, local bounds, &amp; actor position,</p> <ul> <li> <p>Calls UpdateUniformBufferMaybeLazy(): Lazily updates uniform buffer</p> </li> <li> <p>Calls virtual OnTransformChanged(): StaticMesh just caches TotalScale3D but isn't used</p> </li> </ul> </li> <li> <p>RT Enqueue AddPrimitiveSceneInfo_RenderThread(): Only</p> </li> <li> <p>Allocates new entries into FScene arrays (Bounds, VisiblityIds,OcclusionBounds,ComponentIds)</p> </li> <li> <p>Sets up attachment group, Parent LOD, DistanceFieldSceneData</p> </li> <li> <p>PrimitiveSceneInfo::AddToScene()</p> <ul> <li> <p>Mark Precomputed Lighting Buffer Dirty</p> </li> <li> <p>PrimtiiveSceneInfo::AddStaticMeshes(): Add this primtive to StaticMeshDrawlist</p> </li> <li> <p>Proxy::DrawStaticElements(): Collects Static Mesh BatchElements from ScenePrimtiveProxy</p> <ul> <li>StaticMeshSceneProxy adds 2 batch elements per mesh element. One for optimized shadows and one for normal rendering</li> </ul> </li> <li> <p>AddToDrawLists(): Called on all the FStaticMesh elements added from DrawStaticElements(). Goes through and adds each them to respective StaticMeshDrawList</p> <ul> <li> <p>Each DrawPolicyFactory::AddStaticMesh() creates a Drawing Policy for the specific mesh and TStaticMeshDrawlist::AddMesh() it to the corresponding list. Drawing Policies define specific parameters on how to draw this mesh in this specific pass, e.g. DepthDrawingPolicy. They're sorted based on state to minimize state changes</p> </li> <li> <p>FBasePassOpaqueDrawingPolicyFactory::AddStaticMesh() is the main responsible BasePass factory. TBasePassDrawingPolicy is the main draw policy <li> <p>Update PrimitiveOctree</p> </li> <li> <p>Compute Bounds, Visibility Id index, OcclusionFlags, Occlusion Bounds, ComponentIds</p> </li> <li> <p>Loop through Light Octree and create LightPrimitiveInteractions for each Light affecting this Primitive</p> </li> <li> <p>PrimitiveSceneProxy::GetLightRelevance() based on FlightInteraction for primitive (retrieved through PrimitiveSceneProxy::GetInteraction())</p> </li> <p>Component Transform Update</p> <ul> <li> <p>MarkRenderTransformDirty(): Calls MarkForNeededEndOfFrameUpdate() so component can send transform updates at end of frame</p> </li> <li> <p>UWorld::MarkActorComponentForNeededEndOfFrameUpdate() stores this component in its list to do deferred marshalling of sending updates to render thread</p> </li> <li> <p>UActorComponent::DoDeferredRenderUpdates_Concurrent(): Is parallel called to actually send updates to render thread</p> </li> <li> <p>SendRenderTransform_Concurrent() calls FScene::UpdatePrimitiveTransform()</p> <ul> <li> <p>For some objects (PrimitiveSceneProxy::ShouldRecreateProxyOnUpdateTransform()), this recreates the render state so it's expensive</p> </li> <li> <p>GT Enqueues UpdatePrimitiveTransform_RenderThread()</p> </li> <li> <p>PrimitiveSceneInfo::RemoveFromScene(): Remove primitive from scene at old location, octree, LightInteractions, &amp; PrecomputedLightingBuffer, and</p> </li> <li> <p>PrimitiveSceneProxy::SetTransform(): Updates render side xforms, local bounds, &amp; actor position,</p> <ul> <li> <p>Calls UpdateUniformBufferMaybeLazy(): Lazily updates uniform buffer</p> </li> <li> <p>Calls virtual OnTransformChanged(): StaticMesh just caches TotalScale3D but isn't used</p> </li> </ul> </li> <li> <p>PrimitiveSceneInfo::AddToScene(): Cross reference list above</p> </li> </ul> </li> <li> <p>Same things happens when render state is marked dirty (gets recreated with remove/add) or render dynamic data gets marked as dirty (SendRenderDynamicData_Concurrent()</p> </li> </ul> <p>For other render components not deriving from UPrimitiveComponent (e.g. Lights/Decals),</p> <p>Component::CreateRenderState_Concurrent(): - Create dynamic render resources</p> <ul> <li> <p>FScene::AddLight/AddDecal()</p> </li> <li> <p>Calls respective CreateSceneProxy()</p> </li> </ul>"},{"location":"ue4guide/graphics-development/render-architecture/misc-useful-functions/","title":"Misc useful functions","text":"<p>What does HiddenIngame - Hidden In Game will hide the object from the rendering system entirely. The renderthread proxies will not exist. If this value is toggled they will either be created/destroyed according to the new setting. When Hidden there will be no calculations of any time. There will be a cost for hiding/showing lots of things dynamically.</p> <p>bOwnerNoSee and bOnlyOwnerSee work as you would expect. An object marked 'bOwnerNoSee' will not render in the 'owning' view. 'Ownership' is determined by walking up the Ownership chain from the actor when creating the scene proxy. You can see this in the FPrimitiveSceneProxy constructor.</p> <p>Reference From https://udn.unrealengine.com/questions/349480/mesh-visibility-parameters-explanation.html</p> <p>Print debugging:</p> <ul> <li> <p>PrintScientific/PrintFixed()</p> </li> <li> <p>PrintCharacter()</p> </li> <li> <p>PrintFloat/PrintSmallFloat()</p> </li> </ul>"},{"location":"ue4guide/graphics-development/render-architecture/new-render-pipeline/","title":"TLDR","text":"<p>Steps to implement custom meshpass</p> <ol> <li> <p>Add new render pass method FDeferredShadingSceneRenderer::RenderPrePass</p> </li> <li> <p>Debug Stats &amp; flags:</p> C++<pre><code>check(RHICmdList.IsOutsideRenderPass());\n\nif (!ShouldRenderTranslucency(TranslucencyPass))\n{\n  return; // Early exit if nothing needs to be done.\n}\n\nSCOPED_DRAW_EVENT(RHICmdList, Translucency);\nSCOPED_GPU_STAT(RHICmdList, Translucency);\n</code></pre> </li> <li> <p>Call &amp; Implement CreateCustomPassUniformBuffer(RHICmdList, View, PassUniformBuffer);</p> </li> <li> <p>Create Pass Render State with UniformBufferParms: FMeshPassProcessorRenderState DrawRenderState(View, BasePassUniformBuffer);</p> </li> <li> <p>Call &amp; Implement SetupCustomPassState(DrawRenderState);</p> </li> <li> <p>Scene-&gt;UniformBuffers.UpdateViewUniformBuffer(View);</p> </li> <li> <p>FDeferredShadingSceneRenderer::RenderBasePassView</p> <ol> <li>SetupCustomPassView<ol> <li>SetViewport</li> </ol> </li> <li>DispatchDraw</li> </ol> </li> <li> <p>Implement FMeshPassProcessor. Ex: class FDepthPassMeshProcessor : public FMeshPassProcessor</p> </li> <li>Register the pass: FRegisterPassProcessorCreateFunction RegisterCustomPass()</li> <li> <p>Implement AddMeshBatch</p> <ul> <li>Pass Filter</li> <li>Select Shader to use. Ex: GetDepthPassShaders</li> <li>Implement CalculateCustomPassMeshStaticSortKey() to calculate SortKey for mesh state</li> <li>Gather bindings: BuildMeshDrawCommands()</li> </ul> </li> <li> <p>FRelevancePacket::MarkRelevant() &amp;&amp; FRelevancePacket::ComputeDynamicMeshRelevance()</p> </li> <li> <p>Drawcall Merging: class FMeshDrawCommand::MatchesForDynamicInstancing</p> </li> </ol> <p>Notes: Update Shaders from Primitive.PrimitiveId =&gt; GetPrimitiveData(Parameters.PrimitiveId).</p> <ol> <li> <p>Need to use GetPrimitiveData(Parameters.PrimitiveId)</p> </li> <li> <p>FDeferredShadingSceneRenderer::ClearGBufferAtMaxZ(FRHICommandList&amp; RHICmdList)</p> </li> </ol>"},{"location":"ue4guide/graphics-development/render-architecture/new-render-pipeline/#overview","title":"Overview","text":"<p>Motivation: Need to execute lot of draws</p> <ul> <li> <p>Modular construction</p> </li> <li> <p>Dynamic lighting/shadowing need extra mesh passes</p> </li> <li> <p>Some techniques (DXR/GPU culling) needs to eval entire scene</p> </li> </ul> <p>Approach:</p> <ul> <li>Draw call merging based on RHI</li> <li>No more per draw per frame shader params</li> </ul> <p>Mesh Drawing/Render Refactor:</p> <ul> <li> <p>Very quick description would be: no more draw policies and static draw lists. Everything is now done through mesh processors, mesh draw commands (draw state) and EMeshPass lists.</p> </li> <li> <p>Mesh draw commands are build and cached when you attach your prim to scene.</p> </li> </ul> <p>Mesh processors convert mesh batches to mesh draw commands.</p> <p>EMeshPass is basically a list of visible mesh draw commands for a given pass, which is sorted, merged and drawn.</p> <p>Now, as for render graph it's currently not used too much in 4.22 :)</p> <p>\u200b   MeshBatch is now converted into mesh draw command, which contains all the draw state (binding etc).</p> <p>\u200b   FMeshBatch is like an interface for rendering.</p>"},{"location":"ue4guide/graphics-development/render-architecture/new-render-pipeline/#review","title":"Review","text":"<ul> <li>FPrimitiveSceneProxy: Render Thread View of UE4 Gamecode Component</li> <li>FMeshBatch: decouples FPrimitiveSceneProxy implementations from mesh passes</li> <li>Contains everything pass needs to know</li> <li>Agnostic of passes</li> <li>DrawingPolicy: Converts FMeshBatch to RHIDrawCommands</li> <li>RHICommandList: Platform independent render commands</li> </ul> <p>Every frame, generate FMeshBatch from Scene proxies </p>"},{"location":"ue4guide/graphics-development/render-architecture/new-render-pipeline/#new-way","title":"New Way","text":"<ul> <li>FMeshDrawCommand: Stateless description of draw command</li> <li>FMeshPassProcessor: Builds one ore more FMeshDrawCommands from FMeshBatch</li> <li>Select shader</li> <li>Collect pass/vertex factory/material bindings</li> <li>Describes a mesh pass</li> </ul>"},{"location":"ue4guide/graphics-development/render-architecture/new-render-pipeline/#shader-binding","title":"Shader Binding","text":""},{"location":"ue4guide/graphics-development/render-architecture/new-render-pipeline/#overview_1","title":"Overview","text":"<ul> <li>Shader Parms are submitted in big GPU buffers</li> <li>Anything referenced by FMeshDrawCommands must not change frequently bc it will be invalidated</li> <li>Instead, keep bindings stable and reference one big Uniform Buffer</li> <li>Code path to update uniform buffer: RHIUpdateUniformBuffer </li> <li>Uniform Buffers: FPersistentUniformBuffers</li> <li>PrimitiveUniformBuffer: Data unique to primitive like LocalToWorldTransform</li> <li>MaterialUniformBuffer: Material params</li> <li>MaterialParameterCollections: MPC</li> <li>PrecomputedLightingUniformBuffer: Which lightmaps to reference, etc</li> <li>PassUniformBuffers: Any data that pass needs that's per primitive that's not shared across passes</li> <li>Validation Mode: VALIDATE_UNIFORM_BUFFER_LIFETIME</li> <li>Remember, shader bindings are cached so those need to be invalidated (eg: changing skylight)</li> <li>VertexFactory: How UE4 generates vertex data from CPU to GPU</li> <li>Only VFs that don't require View are cached (eg: FLocalVertexFactory) </li> </ul>"},{"location":"ue4guide/graphics-development/render-architecture/new-render-pipeline/#high-level-frame-with-caching","title":"High level Frame with Caching","text":"<ul> <li>FPrimitiveSceneInfo::AddToScene</li> <li>If Static, cache FMeshBatch\u2019s on FPrimitiveSceneInfo<ul> <li>Also generate FMeshDrawCommands and store on the scene</li> </ul> </li> <li>FScene::SetSkyLight</li> <li>Invalidate cached FMeshDrawCommands<ul> <li>FPrimitiveSceneInfo::BeginDeferredUpdateStaticMeshes: Invalidate specific mesh</li> <li>FScene-&gt;bScenesPrimitivesNeedStaticMeshElementUpdate: Invalidate entire Scene's cached commands</li> <li>Ex: FScene::SetSkyLight()</li> </ul> </li> <li>InitViews</li> <li>Foreach Primitive<ul> <li>If Static Relevance</li> <li>Compute LOD and add cached FMeshDrawCommands to visible list</li> <li>If Dynamic Relevance</li> <li>Gather FMeshBatch\u2019s with GetDynamicMeshElements</li> </ul> </li> <li>RenderDepth</li> <li>Foreach FMeshDrawCommand in visible list, Draw</li> </ul>"},{"location":"ue4guide/graphics-development/render-architecture/new-render-pipeline/#drawcall-merging","title":"Drawcall Merging","text":"<ul> <li>FMeshDrawCommand captures all the state for the draw</li> <li>Currently only D3D11 style merging implemented, so only drawcalls with identitcal shader bindings merge</li> <li> <p>Future will be D3D12 Execute Indirect that can change state in-between</p> </li> <li> <p>Happens in FMeshDrawCommand::MatchesForDynamicInstancing</p> </li> <li> <p>Shader Parameters must be crafted to enable this</p> </li> </ul> Pass Types Description Pass Parameters These are placed in the pass uniform buffer, where any draws in the pass can merge. FLocalVertexFactory Parameters These are placed in a uniform buffer owned by UStaticMesh where any draws with the same UStaticMesh can merge. Material Instance Parameters These are palced in a material uniform buffer where any draws using the same Material Instance can merge. Lightmap Resource Parameters These are placed in a LightmapResourceCluster uniform buffer where any draws using the same LightmapTexture can merge. Primitive Parameters These are placed in a scene-wide primitive data buffer called GPUScene and indexed in the shader using PrimitiveID. <ul> <li>Assigning state buckets for merging is slow so its cached at FPrimitive::AddToScene</li> <li> <p><code>TSet&lt;FMeshDrawCommandStateBucket, MeshDrawCommandKeyFuncs&gt; CachedMeshDrawCommandStateBuckets;</code></p> </li> <li> <p>Actual merging operation is just transformation on visible FMeshDrawCommand list</p> </li> <li> <p>For each drawcommand in the same statebucket, it gets replaced with an instanced mesh draw command</p> </li> <li> <p>To be effective, need to get rid of per-draw bindings</p> </li> <li> <p>Created Pass uniform buffer frequency</p> </li> <li> <p>Moved 64 per-draw bindings into OpaqueBasePassUniformBuffer</p> </li> </ul> C++<pre><code>BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT(FSharedBasePassUniformParameters,)\n  SHADER_PARAMETER_STRUCT(FForwardLightData, Forward)\n  SHADER_PARAMETER_STRUCT(FForwardLightData, ForwardISR)\n  SHADER_PARAMETER_STRUCT(FReflectionUniformParameters, Reflection)\n  SHADER_PARAMETER_STRUCT(FPlanarReflectionUniformParameters, PlanarReflection) // Single global planar reflection for the forward pass.\n  SHADER_PARAMETER_STRUCT(FFogUniformParameters, Fog)\n  SHADER_PARAMETER_TEXTURE(Texture2D, SSProfilesTexture)\nEND_GLOBAL_SHADER_PARAMETER_STRUCT()\n\nBEGIN_GLOBAL_SHADER_PARAMETER_STRUCT(FTranslucentBasePassUniformParameters,)\n  SHADER_PARAMETER_STRUCT(FSharedBasePassUniformParameters, Shared)\n  SHADER_PARAMETER_STRUCT(FSceneTexturesUniformParameters, SceneTextures)\n  // Material SSR\n  SHADER_PARAMETER(FVector4, HZBUvFactorAndInvFactor)\n  SHADER_PARAMETER(FVector4, PrevScreenPositionScaleBias)\n  SHADER_PARAMETER(float, PrevSceneColorPreExposureInv)\n  SHADER_PARAMETER_TEXTURE(Texture2D, HZBTexture)\n  SHADER_PARAMETER_SAMPLER(SamplerState, HZBSampler)\n  SHADER_PARAMETER_TEXTURE(Texture2D, PrevSceneColor)\n  SHADER_PARAMETER_SAMPLER(SamplerState, PrevSceneColorSampler)\n  // Translucency Lighting Volume\n  SHADER_PARAMETER_TEXTURE(Texture3D, TranslucencyLightingVolumeAmbientInner)\n  SHADER_PARAMETER_SAMPLER(SamplerState, TranslucencyLightingVolumeAmbientInnerSampler)\n  SHADER_PARAMETER_TEXTURE(Texture3D, TranslucencyLightingVolumeAmbientOuter)\n  SHADER_PARAMETER_SAMPLER(SamplerState, TranslucencyLightingVolumeAmbientOuterSampler)\n  SHADER_PARAMETER_TEXTURE(Texture3D, TranslucencyLightingVolumeDirectionalInner)\n  SHADER_PARAMETER_SAMPLER(SamplerState, TranslucencyLightingVolumeDirectionalInnerSampler)\n  SHADER_PARAMETER_TEXTURE(Texture3D, TranslucencyLightingVolumeDirectionalOuter)\n  SHADER_PARAMETER_SAMPLER(SamplerState, TranslucencyLightingVolumeDirectionalOuterSampler)\nEND_GLOBAL_SHADER_PARAMETER_STRUCT()\n</code></pre> <ul> <li>Remaining per draw bindings</li> <li>We can upload these to a scene-wide unified buffer</li> <li>Dynamically index them from the shader via InstanceId</li> <li> <p>Ex:</p> <ul> <li>GlobalConstantBuffer values</li> <li>PreviousLocalToWorld BasePass Velocity</li> <li>Dither LOD</li> <li>PrimitiveUniformBuffer</li> <li>PrecomputedLightingUniformBuffer</li> <li>DistanceCullFadeUniformBuffer</li> </ul> </li> <li> <p>GPU Scene Primitive Data buffer: GPU TArray implementation with dynamic resizing</p> </li> <li>Renderthread tracks Primitive add / update / remove, uses a compute shader to update them on the next frame (only operate on deltas)</li> <li>Need to use GetPrimitiveData(Parameters.PrimitiveId) in shaders now</li> </ul>"},{"location":"ue4guide/graphics-development/render-architecture/new-render-pipeline/#gotchas","title":"Gotchas","text":"<ul> <li>Static Mesh Components that are in different lightmaps wont get merged</li> <li>Tweak DefaultEngine.ini MaxLightmapRadius</li> <li>Deferred primtive update is gone (r.DeferUniformBufferUpdatesUntilVisible)</li> <li>before, if an out of view primitive moved, its primitive buffer wouldn't be updated</li> <li>Now it has to bc of caching</li> <li>Forward renderer now supports only single global planar reflection</li> <li>FMeshDrawCommand Performance Hazards</li> <li>Going over inline allocator limit will cause performance hazard</li> <li>FMeshDrawShaderBindings assumes 2 shader frequencies (Vertex + Pixel): <code>TArray&lt;FMeshDrawShaderBindingsLayout, TInlineAllocator&lt;2&gt;&gt;ShaderLayouts</code></li> <li>FMeshDrawCommand assumes 10 shader bindings among all frequencies: <code>const int32 NumInlineShaderBindings = 10;</code></li> <li>FMeshDrawCommand assumes 4 vertex streams from the vertex factory: <code>typedef TArray&lt;FVertexInputStream, TInlineAllocator&lt;4&gt;&gt;FVertexInputStreamArray;</code></li> </ul>"},{"location":"ue4guide/graphics-development/render-architecture/new-render-pipeline/#upgrade-notes","title":"Upgrade Notes","text":""},{"location":"ue4guide/graphics-development/render-architecture/new-render-pipeline/#static-draw-lists-and-primitive-sets","title":"Static Draw Lists and Primitive Sets","text":"<ul> <li>static draw lists (TStaticMeshDrawList) and primitive sets (for example, FTranslucentPrimSet, FCustomDepthPrimSet) were replaced by FParallelMeshDrawCommandPass. FParallelMeshDrawCommandPass encapsulates a single per pass visible mesh draw command list</li> <li>per scene mesh lists were replaced by visible mesh lists</li> <li>previously drawing a Static Mesh pass would traverse the entire list of per-pass Static Meshes in-scene (TStaticMeshDrawList) to select visible ones by checking FViewInfo::StaticMeshVisibilityMap for each Static Mesh</li> <li>new design, drawing is just a simple traversal of a visible mesh draw command array (FMeshDrawCommandPassSetupTaskContext::MeshDrawCommands)</li> <li>pipeline also has an immediate mode mesh rendering emulation through DrawDynamicMeshPass function.</li> <li>should only be used for non-performance critical mesh passes, as it doesn\u2019t support caching, automatic instancing, and makes multiple dynamic memory allocations. For example, it replaces DrawViewElements, which was responsible for rendering Editor-only helper meshes</li> </ul>"},{"location":"ue4guide/graphics-development/render-architecture/new-render-pipeline/#drawing-policies","title":"Drawing Policies","text":"<ul> <li>Drawing policies like FDepthDrawingPolicy or FBasePassDrawingPolicy were replaced by FDepthPassMeshProcessor and FBasePassMeshProcessor</li> <li>Specific pass mesh processors are derived from a FMeshProcessor base class and are responsible for converting each FMeshBatch into a set of mesh draw commands for the pass.</li> </ul>"},{"location":"ue4guide/graphics-development/render-architecture/new-render-pipeline/#shader-bindings","title":"Shader Bindings","text":"<ul> <li> <p>Previously all shader parameters were directly set on RHICmdList by drawing policies</p> </li> <li> <p>Now, All parameters are gathered into FMeshDrawSingleShaderBindings (which later are set on RHICmdList by calling SetOnCommandList during drawing)</p> </li> <li> <p>Old: FDrawingPolicyRenderState to pass common high-level mesh pass render state (e.g. pass uniform buffer)</p> </li> <li> <p>New: Renames FDrawingPolicyRenderState to FMeshPassProcessorRenderState without major changes to its functionality</p> </li> <li> <p>Old: Other parts of shader bindings were filled inside of shader\u2019s SetParameters and SetMesh functions</p> </li> <li> <p>New: Replaced by GetShaderBindings and GetElementShaderBindings, and pass per-draw parameters inside a customizable ShaderElementDataType</p> </li> <li> <p>Since each FMeshPassProcessor must go through BuildMeshDrawCommands() to call the pass shader\u2019s GetShaderBindings(), we need a mechanism to pass arbitrary data from the FMeshPassProcessor to the GetShaderBindings() call. This is accomplished with the ShaderElementData parameter to BuildMeshDrawCommands()</p> </li> <li> <p>Many loose parameters were pulled out into per-pass or other uniform buffers (do not use loose parameters)</p> </li> <li> <p>Old: uniform buffers like ViewUniformBuffer or DepthPassUniformBuffer were recreated every frame with new data</p> </li> <li> <p>New: those are persistent and global (kept inside FScene::FPersistentUniformBuffers)</p> </li> <li>instead of recreating them to pass new data \u2014 their contents are updated using new RHI function \u2014 to RHIUpdateUniformBuffer</li> <li>This indirection enables shaders to receive per-frame data even though their mesh draw commands are cached</li> </ul>"},{"location":"ue4guide/graphics-development/render-architecture/new-render-pipeline/#fprimitiveviewrelevance","title":"FPrimitiveViewRelevance","text":"<ul> <li>Extended with two extra relevance flags:</li> <li>bVelocityRelevance is required for separate velocity pass</li> <li>bTranslucentSelfShadow is required for translucency self shadow</li> <li>New: all dynamic draws now rely on view relevance, and disabling certain passes in view relevance will also disable its rendering</li> </ul>"},{"location":"ue4guide/graphics-development/render-architecture/new-render-pipeline/#shaders","title":"Shaders","text":"<ul> <li>The new pipeline introduced GPUScene, which is a structured buffer containing primitive uniform buffer data for all the primitives in the scene.</li> <li>Currently only the local vertex factory (Static Mesh Component) and the SM5 feature level can utilize this rendering path.</li> <li>Shaders need to use GetPrimitiveData(PrimitiveId) instead of accessing the Primitive uniform buffer directly to compile with GPUScene enabled.</li> <li>Primitive.Member =&gt; GetPrimitiveData(Parameters.PrimitiveId).Member</li> </ul>"},{"location":"ue4guide/graphics-development/render-architecture/new-render-pipeline/#misc","title":"Misc:","text":"<ul> <li>https://github.com/EpicGames/UnrealEngine/commit/b5d7db368977e263092be9b97f78944739f80476 </li> </ul>"},{"location":"ue4guide/graphics-development/render-architecture/new-render-pipeline/#add-immediate-mode-custom-mesh-pass","title":"Add Immediate Mode Custom Mesh Pass","text":"C++<pre><code>void DrawDecalMeshCommands(FRenderingCompositePassContext&amp; Context, EDecalRenderStage CurrentDecalStage, FDecalRenderingCommon::ERenderTargetMode RenderTargetMode)\n{\n  FRHICommandListImmediate&amp; RHICmdList = Context.RHICmdList;\n  const FViewInfo&amp; View = Context.View;\n\n  const bool bPerPixelDBufferMask = IsUsingPerPixelDBufferMask(View.GetShaderPlatform());\n\n  FGraphicsPipelineStateInitializer GraphicsPSOInit;\n  FDecalRenderTargetManager RenderTargetManager(Context.RHICmdList, Context.GetShaderPlatform(), CurrentDecalStage);\n  RenderTargetManager.SetRenderTargetMode(RenderTargetMode, true, bPerPixelDBufferMask);\n  Context.SetViewportAndCallRHI(Context.View.ViewRect);\n  RHICmdList.ApplyCachedRenderTargets(GraphicsPSOInit);\n\n\n  DrawDynamicMeshPass(View, RHICmdList,\n    [&amp;View, CurrentDecalStage, RenderTargetMode](FDynamicPassMeshDrawListContext* DynamicMeshPassContext)\n  {\n    FMeshDecalMeshProcessor PassMeshProcessor(\n      View.Family-&gt;Scene-&gt;GetRenderScene(),\n      &amp;View,\n      CurrentDecalStage,\n      RenderTargetMode,\n      DynamicMeshPassContext);\n\n    for (int32 MeshBatchIndex = 0; MeshBatchIndex &lt; View.MeshDecalBatches.Num(); ++MeshBatchIndex)\n    {\n      const FMeshBatch* Mesh = View.MeshDecalBatches[MeshBatchIndex].Mesh;\n      const FPrimitiveSceneProxy* PrimitiveSceneProxy = View.MeshDecalBatches[MeshBatchIndex].Proxy;\n      const uint64 DefaultBatchElementMask = ~0ull;\n\n      PassMeshProcessor.AddMeshBatch(*Mesh, DefaultBatchElementMask, PrimitiveSceneProxy);\n    }\n  });\n}\n\nvoid RenderMeshDecals(FRenderingCompositePassContext&amp; Context, EDecalRenderStage CurrentDecalStage)\n{\n  FRHICommandListImmediate&amp; RHICmdList = Context.RHICmdList;\n  FSceneRenderTargets&amp; SceneContext = FSceneRenderTargets::Get(RHICmdList);\n  const FViewInfo&amp; View = Context.View;\n  FScene* Scene = (FScene*)View.Family-&gt;Scene;\n\n  QUICK_SCOPE_CYCLE_COUNTER(STAT_FSceneRenderer_RenderMeshDecals);\n  SCOPED_DRAW_EVENT(RHICmdList, MeshDecals);\n\n  FSceneTexturesUniformParameters SceneTextureParameters;\n  SetupSceneTextureUniformParameters(SceneContext, View.FeatureLevel, ESceneTextureSetupMode::All, SceneTextureParameters);\n  Scene-&gt;UniformBuffers.MeshDecalPassUniformBuffer.UpdateUniformBufferImmediate(SceneTextureParameters);\n\n  if (View.MeshDecalBatches.Num() &gt; 0)\n  {\n    switch (CurrentDecalStage)\n    {\n    case DRS_BeforeBasePass:\n      DrawDecalMeshCommands(Context, CurrentDecalStage, FDecalRenderingCommon::RTM_DBuffer);\n      break;\n\n    case DRS_AfterBasePass:\n      DrawDecalMeshCommands(Context, CurrentDecalStage, FDecalRenderingCommon::RTM_SceneColorAndGBufferDepthWriteWithNormal);\n      break;\n\n    case DRS_BeforeLighting:\n      DrawDecalMeshCommands(Context, CurrentDecalStage, FDecalRenderingCommon::RTM_GBufferNormal);\n      DrawDecalMeshCommands(Context, CurrentDecalStage, FDecalRenderingCommon::RTM_SceneColorAndGBufferWithNormal);\n      break;\n\n    case DRS_Mobile:\n      DrawDecalMeshCommands(Context, CurrentDecalStage, FDecalRenderingCommon::RTM_SceneColor);\n      break;\n\n    case DRS_AmbientOcclusion:\n      DrawDecalMeshCommands(Context, CurrentDecalStage, FDecalRenderingCommon::RTM_AmbientOcclusion);\n      break;\n\n    case DRS_Emissive:\n      DrawDecalMeshCommands(Context, CurrentDecalStage, FDecalRenderingCommon::RTM_SceneColor);\n      break;\n    }\n  }\n}\n</code></pre>"},{"location":"ue4guide/graphics-development/render-architecture/new-render-pipeline/#render-graph","title":"Render Graph","text":"<p>Main file: UnrealEngine\\Engine\\Source\\Runtime\\RenderCore\\Public\\RenderGraph.h</p> <p>Main class: FRDGBuilder Currently used very lightly in 4.22 but looks like Compute Shaders can be dispatched with it FComputeShaderUtils::AddPass(...)</p>"},{"location":"ue4guide/graphics-development/render-architecture/new-render-pipeline/#debugging","title":"Debugging","text":"<p>FMeshDrawCommand:</p> <ul> <li>FMeshDrawCommand::DebugData is a debug data struct</li> <li>WANTS_DRAW_MESH_EVENTS (RHI_COMMAND_LIST_DEBUG_TRACES || (WITH_PROFILEGPU &amp;&amp; PLATFORM_SUPPORTS_DRAW_MESH_EVENTS))</li> <li>VALIDATE_UNIFORM_BUFFER_LAYOUT_LIFETIME</li> <li>Whether to assert in cases where the layout is released before uniform buffers created with that layout</li> <li> <p>VALIDATE_UNIFORM_BUFFER_LIFETIME 0</p> </li> <li> <p>Whether to assert when a uniform buffer is being deleted while still referenced by a mesh draw command</p> </li> <li>Enabling this requires -norhithread to work correctly since FRHIResource lifetime is managed by both the RT and RHIThread</li> </ul> Command Desc r.MeshDrawCommands.DynamicInstancing Whether to dynamically combine multiple compatible visible Mesh Draw Commands into one instanced draw on vertex factories that support it. r.MeshDrawCommands.LogDynamicInstancingStats Whether to log dynamic instancing stats on the next frame r.MeshDrawCommands.LogMeshDrawCommandMemoryStats Whether to log mesh draw command memory stats on the next frame r.GPUScene.UploadEveryFrame Forces GPU Scene to be fully updated every frame, which is useful for diagnosing issues with stale GPU Scene data. r.GPUScene.ValidatePrimitiveBuffer This downloads GPU Scene to the CPU and validates its contents against primitive uniform buffers. r.RHICmdUseThread To Use a separate thread for RHICmdList r.RHIThread.Enable To Disable RHI Thread r.RHICmdBypass Set to 1 to disable r.RHICmdUseParallelAlgorithms True to use parallel algorithms. Ignored if r.RHICmdBypass is 1. r.MeshDrawCommands.ParallelPassSetup Whether to setup mesh draw command pass in parallel. r.RHICmdBasePassDeferredContexts Disable the parallel tasks for base pass draw dispatch, causing those to happen on the RenderingThread. r.MeshDrawCommands.UseCachedCommands Whether to render from cached mesh draw commands (on vertex factories that support it), or to generate draw commands every frame. r.RDG.ImmediateMode Toggle get render graph executing passes as they get created to easily debug crashes caused by pass wiring logic. r.RDG.EmitWarnings Toggle render graph emitting warnings about inefficiencies. r.GPUScene.ValidatePrimitiveBuffer Readback the GPU primitive data and assert if it doesn't match the RT primitive data. r.GPUScene.UploadEveryFrame Upload the entire scene's primitive data every frame"},{"location":"ue4guide/graphics-development/render-architecture/overview/","title":"Overview","text":""},{"location":"ue4guide/graphics-development/render-architecture/overview/#this-is-a-good-bite-sized-detailed-overview","title":"This is a good bite-sized detailed overview:","text":"<p>https://www.blaenkdenum.com/notes/unreal-engine/#rendering</p> <p>**Global Shaders **- Shaders that are not created using the material editor, typically compute shaders, post-processing shaders, etc. This is one of the meta types (i.e., Global, Material, Mesh); the remaining meta types will be covered in the future.</p> <p>FShaderType - A \u2018template\u2019 or \u2018class\u2019 specified by shader code, which maps to a physical C++ class specified in the code.</p> <p>FShaderResource - The compiled shader microcode and its runtime RHI resource.</p> <p>FShader - A compiled shader instance of an FShaderType, built from the information of an FShaderResource.</p> <p>TShaderMap - A collection of shaders of different FShaderTypes, but with the same meta type (Global).</p> <p>Reference From https://www.unrealengine.com/en-US/blog/how-to-add-global-shaders-to-ue4</p>"},{"location":"ue4guide/graphics-development/render-architecture/overview/#primary-scene-classes","title":"Primary scene classes","text":"<p>There is a Rendering Thread in UE4 which operates in parallel with the game thread. Most classes that bridge the gap between the game thread and rendering thread are split into two parts based on which thread has ownership of that state.</p> <p>The primary classes are:</p> Class Description UWorld A world contains a collection of Actors and Components that can interact with each other. Levels can be streamed in and out of the world, and multiple worlds can be active in the program. ULevel Collection of Actors and Components that are loaded / unloaded together and saved in a single map file. USceneComponent Base class of any object that needs to be added to an FScene, like lights, meshes, fog, etc. UPrimitiveComponent Base class of anything that can be rendered or interact with physics. Also acts as the granularity of visibility culling and rendering property specification (casts shadows, etc). Just like all UObjects, the game thread owns all variables and state and the rendering thread should not access it directly. ULightComponent Represents a light source. The Renderer is responsible for computing and adding its contribution to the scene. FScene Renderer version of the UWorld. Objects only exist to the renderer once they are added to the FScene, which is called registering a component. The rendering thread owns all states in the FScene -the game thread cannot modify it directly. FPrimitiveSceneProxy Renderer version of UPrimitiveComponent, mirrors UPrimitiveComponent state for the rendering thread. Exists in the engine module and intended to be subclassed to support different types of primitives (skeletal, rigid, BSP, etc). Implements some very important functions like GetViewRelevance, DrawDynamicElements, etc. FPrimitiveSceneInfo Internal renderer state (specific to the FRendererModule implementation) that corresponds to a UPrimitiveComponent and FPrimitiveSceneProxy. Exists in the renderer module, so the engine cannot see it. FSceneView Engine representation of a single view into an FScene. A scene can be rendered with different views in different calls to FSceneRenderer::Render (multiple editor viewports) or with multiple views in the same call to FSceneRenderer::Render (splitscreen in game). A new View is constructed for each frame. FViewInfo Internal renderer representation of a view, exists in the renderer module. FSceneViewState The ViewState stores private renderer information about a view which is needed across frames. In game, there is one view state per ULocalPlayer. FSceneRenderer A class created each frame to encapsulate inter-frame temporaries. <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/Rendering/Overview/index.html</p> Engine Module Renderer Module UWorld FScene UPrimitiveComponent / FPrimitiveSceneProxy FPrimitiveSceneInfo FSceneView FViewInfo ULocalPlayer FSceneViewState ULightComponent / FLightSceneProxy FLightSceneInfo <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/Rendering/Overview/index.html</p>"},{"location":"ue4guide/graphics-development/render-architecture/overview/#material-classes","title":"Material classes","text":"Class Description FMaterial An interface to a material used for rendering. Provides access to material properties (e.g. blend mode). Contains a shader map used by the renderer to retrieve individual shaders. FMaterialResource UMaterial's implementation of the FMaterial interface. FMaterialRenderProxy A material's representation on the rendering thread. Provides access to an FMaterial interface and the current value of each scalar, vector, and texture parameter. UMaterialInterface [abstract] Game thread interface for material functionality. Used to retrieve the FMaterialRenderProxy used for rendering and the UMaterial that is used as the source. UMaterial A material asset. Authored as a node graph. Computes material attributes used for shading, sets blend mode, etc. UMaterialInstance [abstract] An instance of a UMaterial. Uses the node graph in the UMaterial but provides different parameters (scalars, vectors, textures, static switches). Each instance has a parent UMaterialInterface. Therefore a material instance's parent may be a UMaterial or another UMaterialInstance. This creates a chain that will eventually lead to a UMaterial. UMaterialInstanceConstant A UMaterialInstance that may only be modified in the editor. May provide scalar, vector, texture, and static switch parameters. UMaterialInstanceDynamic A UMaterialInstance that may be modified at runtime. May provide scalar, vector, and texture parameters. It cannot provide static switch parameters and it cannot be the parent of another UMaterialInstance. <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/Rendering/Overview/index.html</p>"},{"location":"ue4guide/graphics-development/render-architecture/overview/#primitive-components-and-proxies","title":"Primitive components and proxies","text":"<p>Primitive components are the basic unit of visibility and relevance determination. For example, occlusion and frustum culling happen on a per-primitive basis. Therefore it is important when designing a system to think about how big to make components. Each component has a bounds that is used for various operations like culling, shadow casting, and light influence determination.</p> <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/Rendering/Overview/index.html</p>"},{"location":"ue4guide/graphics-development/render-architecture/overview/#fprimitivesceneproxy-and-fprimitivesceneinfo","title":"FPrimitiveSceneProxy and FPrimitiveSceneInfo","text":"<p>FPrimitiveSceneProxy is the rendering thread version of UPrimitiveComponent that is intended to be subclassed depending on the component type. It lives in the Engine module and has functions called during rendering passes. FPrimitiveSceneInfo is the primitive component state that is private to the renderer module.</p> <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/Rendering/Overview/index.html</p>"},{"location":"ue4guide/graphics-development/render-architecture/overview/#important-fprimitivesceneproxy-methods","title":"Important FPrimitiveSceneProxy methods","text":"Function Description GetViewRelevance Called from InitViews at the beginning of the frame, and returns a populated FPrimitiveViewRelevance. DrawDynamicElements Called to draw the proxy in any passes which the proxy is relevant to. Only called if the proxy indicated it has dynamic relevance. DrawStaticElements Called to submit StaticMesh elements for the proxy when the primitive is being attached on the game thread. Only called if the proxy indicated it has static relevance. <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/Rendering/Overview/index.html</p>"},{"location":"ue4guide/graphics-development/render-architecture/overview/#relevance","title":"Relevance","text":"<ul> <li> <p>FPrimitiveViewRelevance is the information on what effects (and therefore passes) are relevant to the primitive. A primitive may have multiple elements with different relevance, so FPrimitiveViewRelevance is effectively a logical OR of all the element's relevancies.</p> </li> <li> <p>This means that a primitive can have both opaque and translucent relevance, or dynamic and static relevance; they are not mutually exclusive.</p> </li> <li> <p>FPrimitiveViewRelevance also indicates whether a primitive needs to use the dynamic and/or static rendering path with bStaticRelevance and bDynamicRelevance.</p> </li> </ul> <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/Rendering/Overview/index.html</p>"},{"location":"ue4guide/graphics-development/render-architecture/overview/#drawing-policies","title":"Drawing Policies","text":"<ul> <li> <p>Drawing policies contain the logic to render meshes with pass specific shaders.</p> </li> <li> <p>They use the FVertexFactory interface to abstract the mesh type, and the FMaterial interface to abstract the material details.</p> </li> <li> <p>At the lowest level, a drawing policy</p> </li> </ul> <ol> <li> <p>Takes a set of mesh material shaders and a vertex factory</p> </li> <li> <p>Binds the vertex factory's buffers to the Rendering Hardware Interface (RHI)</p> </li> <li> <p>Binds the mesh material shaders to the RHI</p> </li> <li> <p>Sets the appropriate shader parameters</p> </li> <li> <p>Issues the RHI draw call.</p> </li> </ol> <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/Rendering/Overview/index.html</p>"},{"location":"ue4guide/graphics-development/render-architecture/overview/#drawing-policy-methods","title":"Drawing Policy methods","text":"Function Description Constructor Finds the appropriate shader from the given vertex factory and material shader map, stores these references. CreateBoundShaderState Creates an RHI bound shader state for the drawing policy. Matches/Compare Provides methods to sort the drawing policy with others in the static draw lists. Matches must compare on all the factors that DrawShared depends on. DrawShared Sets RHI state that is constant between drawing policies that return true from Matches. For example, most drawing policies sort on material and vertex factory, so shader parameters depending only on the material can be set, and the vertex buffers specific to the vertex factory can be bound. State should always be set here if possible instead of SetMeshRenderState, since DrawShared is called less times in the static rendering path. SetMeshRenderState Sets RHI state that is specific to this mesh, or anything not set in DrawShared. This is called many more times than DrawShared so performance is especially critical here. DrawMesh Actually issues the RHI draw call. <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/Rendering/Overview/index.html</p>"},{"location":"ue4guide/graphics-development/render-architecture/overview/#rendering-paths","title":"Rendering paths","text":"<p>UE4 has a dynamic path which provides more control but is slower to traverse, and a static rendering path which caches scene traversal as close to the RHI level as possible. The difference is mostly high level, since they both use drawing policies at the lowest level. Each rendering pass (drawing policy) needs to be sure to handle both rendering paths if needed.</p> <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/Rendering/Overview/index.html</p>"},{"location":"ue4guide/graphics-development/render-architecture/overview/#dynamic-rendering-path","title":"Dynamic rendering path","text":"<p>The dynamic rendering path uses TDynamicPrimitiveDrawer and calls DrawDynamicElements on each primitive scene proxy to render. The set of primitives that need to use the dynamic path to be rendered is tracked by FViewInfo::VisibleDynamicPrimitives. Each rendering pass needs to iterate over this array, and call DrawDynamicElements on each primitive's proxy. DrawDynamicElements of the proxy then needs to assemble as many FMeshElements as it needs and submit them with DrawRichMesh or TDynamicPrimitiveDrawer::DrawMesh. This ends up creating a new temporary drawing policy, calling CreateBoundShaderState, DrawShared, SetMeshRenderState, and finally DrawMesh.</p> <p>The dynamic rendering path provides a lot of flexibility because each proxy has a callback in DrawDynamicElements where it can execute logic specific to that component type. It also has minimal insertion cost but high traversal cost, because there is no state sorting, and nothing is cached.</p> <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/Rendering/Overview/index.html</p>"},{"location":"ue4guide/graphics-development/render-architecture/overview/#static-rendering-path","title":"Static rendering path","text":"<p>The static rendering path is implemented through static draw lists. Meshes are inserted into the draw lists when they are attached to the scene. During this insertion, DrawStaticElements on the proxy is called to collect the FStaticMeshElements. A drawing policy instance is then created and stored, along with the result of CreateBoundShaderState. The new drawing policy is sorted based on its Compare and Matches functions and inserted into the appropriate place in the draw list (see TStaticMeshDrawList::AddMesh). In InitViews, a bitarray containing visibility data for the static draw list is initialized and passed into TStaticMeshDrawList::DrawVisible where the draw list is actually drawn. DrawShared is only called once for all the drawing policies that match each other, while SetMeshRenderState and DrawMesh are called for each FStaticMeshElement (see TStaticMeshDrawList::DrawElement).</p> <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/Rendering/Overview/index.html</p> <p>The static rendering path moves a lot of work to attach time, which significantly speeds up scene traversal at rendering time. Static draw list rendering is about 3x faster on the rendering thread for Static Meshes, which allows a lot more Static Meshes in the scene. Because static draw lists cache data at attach time, they can only cache view independent state. Primitives that are rarely reattached but often rendered are good candidates for the static draw lists.</p> <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/Rendering/Overview/index.html</p> <p>The static rendering path can expose bugs because of the way it only calls DrawShared once per state bucket. These bugs can be difficult to detect, since they depend on the rendering order and the attach order of meshes in the scene. Special view modes such as lighting only, unlit, etc will force all primitives to use the dynamic path, so if a bug goes away when forcing the dynamic rendering path, there is a good chance it is due to an incorrect implementation of a drawing policy's DrawShared and/or the Matches function.</p> <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/Rendering/Overview/index.html</p>"},{"location":"ue4guide/graphics-development/render-architecture/overview/#high-level-rendering-order","title":"High level Rendering order","text":"<p>Here is a description of the control flow when rendering a frame starting from FDeferredShadingSceneRenderer::Render:</p> Operation Description GSceneRenderTargets.Allocate Reallocates the global scene render targets to be large enough for the current view, if needed. InitViews Initializes primitive visibility for the views through various culling methods, sets up dynamic shadows that are visible this frame, intersects shadow frustums with the world if necessary (for whole scene shadows or preshadows). PrePass / Depth only pass RenderPrePass / FDepthDrawingPolicy. Renders occluders, outputting only depth to the depth buffer. This pass can operate in several modes: disabled, occlusion only, or complete depths, depending on what is needed by active features. The usual purpose of this pass is to initialize Hierarchical Z to reduce the shading cost of the Base pass, which has expensive pixel shaders. Base pass RenderBasePass / TBasePassDrawingPolicy. Renders opaque and masked materials, outputting material attributes to the GBuffer. Lightmap contribution and sky lighting is also computed here and put in scene color. Issue Occlusion Queries / BeginOcclusionTests Kicks off latent occlusion queries that will be used in the next frame's InitViews. These are done by rendering bounding boxes around the objects being queried, and sometimes grouping bounding boxes together to reduce draw calls. Lighting Shadowmaps are rendered for each light and light contribution is accumulated to scene color, using a mix of standard deferred and tiled deferred shading. Light is also accumulated in the translucency lighting volumes. Fog Fog and atmosphere are computed per-pixel for opaque surfaces in a deferred pass. Translucency Translucency is accumulated into an offscreen render target where it has fogging applied per-vertex so it can integrate into the scene. Lit translucency computes final lighting in a single pass to blend correctly. Post Processing Various post process effects are applied using the GBuffers. Translucency is composited into the scene. <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/Rendering/Overview/index.html</p>"},{"location":"ue4guide/graphics-development/render-architecture/overview/#render-hardware-interface-rhi","title":"Render Hardware Interface (RHI)","text":"<p>The RHI is a thin layer above the platform specific graphics API. The RHI abstraction level in UE4 is as low level as possible, with the intention that most features can be written in platform independent code and 'just work' on all platforms that support the required feature level.</p> <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/Rendering/Overview/index.html</p> <p>Rendering state defaults</p> <p>Since there are so many rendering states, it is not practical to set them all every time we want to draw something. Instead, UE4 has an implicit set of states which are assumed to be set to the defaults (and therefore must be restored to those defaults after they are changed), and a much smaller set of states which have to be set explicitly. The set of states that do not have implicit defaults are:</p> <ul> <li> <p>RHISetRenderTargets</p> </li> <li> <p>RHISetBoundShaderState</p> </li> <li> <p>RHISetDepthState</p> </li> <li> <p>RHISetBlendState</p> </li> <li> <p>RHISetRasterizerState</p> </li> <li> <p>Any dependencies of the shaders set by RHISetBoundShaderState</p> </li> </ul> <p>All other states are assumed to be at their defaults (as defined by the relevant TStaticState, for example the default stencil state is set by RHISetStencilState(TStaticStencilState&lt;&gt;::GetRHI()).</p> <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/Rendering/Overview/index.html</p>"},{"location":"ue4guide/graphics-development/render-architecture/overview/#rendering-state-grouping","title":"Rendering state grouping","text":"<p>Render states are grouped based on what part of the pipeline they affect. For example, RHISetDepthState sets all state relevant to depth buffering.</p> <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/Rendering/Overview/index.html</p> <p>FMaterial serves 3 intertwined purposes:</p> <p>Represents a material to the material compilation process, and provides hooks for extensibility (CompileProperty, etc)</p> <p>Represents a material to the renderer, with functions to access material properties</p> <p>Stores a cached shader map, and other transient output from a compile, which is necessary with async shader compiling</p> <p>(when a material finishes async compilation, the shader map and compile errors need to be stored somewhere)</p>"},{"location":"ue4guide/graphics-development/render-architecture/render-thread-code-flow/","title":"Threading Model","text":"<p>Scalability for All: Unreal Engine 4 with Intel gives a good overview on the UE4 render arch</p>"},{"location":"ue4guide/graphics-development/render-architecture/render-thread-code-flow/#--render-thread-vs-rhithread-vs-rendertaskgraph-threads","title":"- Render Thread vs. RHIThread vs. RenderTaskgraph threads","text":""},{"location":"ue4guide/graphics-development/render-architecture/render-thread-code-flow/#how-unreal-renders-a-frame-417-great-general-high-level-overview-breakdowns","title":"How Unreal Renders A Frame (~4.17): Great General high level overview breakdowns","text":"<p>https://interplayoflight.wordpress.com/2017/10/25/how-unreal-renders-a-frame</p> <p>https://interplayoflight.wordpress.com/2017/10/25/how-unreal-renders-a-frame-part-2</p> <p>https://interplayoflight.wordpress.com/2017/10/25/how-unreal-renders-a-frame-part-3</p> <p>https://medium.com/@lordned/unreal-engine-4-rendering-overview-part-1-c47f2da65346</p> <p>Render thread runs a frame or two behind</p> <p>Game thread blocks at end of Tick() to allow render thread to catch up</p> <p>On D3D12, there's a separate RHIThread that's just responsible for submitting to the driver</p> <ul> <li>On D3D11, the renderthread is what submits to the driver</li> </ul> <p>Asynchronous communication between two threads through ENQUEUE RENDER CMD Macro</p> <p>(basically a command buffer that render thread executes)</p> <ul> <li> <p>CreateRenderState_Concurrent creates initial render state (not dynamic data). This happens on the Game Thread</p> </li> <li> <p>Can create fences</p> </li> <li> <p>Can do deferred deletion (BeginDestroy, FinishDestroy for objects derived from (FDeferredCleanupInterface). Necessary bc can't GC objects while render thread is still using them</p> </li> <li> <p>Gamethread objects own memory init &amp; deletion of RHI resources, even though they're used in render thread</p> </li> <li> <p>Allows for asynchronous, centralized, deterministic memory allocation</p> </li> <li> <p>MarkRenderStateDirty()</p> </li> </ul> <p>Triggered by MarkRenderDynamicDataDirty() or MarkRenderStateDirty()</p> <p>Ex: Dynamic Resource interaction with SkinnedMeshComponent</p> <p>Gamethread</p> <ol> <li> <p>Initializes RHI</p> </li> <li> <p>Overrides CreateRenderState_Concurrent so that it can create renderstate</p> </li> </ol> <ul> <li>SkeletalMeshObject manages sending skinned mesh bone xforms, vertex anim state, etc to the render thread</li> </ul> <ol> <li> <p>TickComponent() updates animations, calls MarkRenderDynamicDataDirty()</p> </li> <li> <p>MarkRenderDynamicDataDirty() flags this component to be updated at the end of the frame on a thread (can override RequiresGameThreadEndOfFrameUpdates() to specify game thread)</p> </li> <li> <p>At the end of the frame, a task job processor calls DoDeferredRenderUpdates_Concurrent() on each actor that needs updates</p> </li> <li> <p>DoDeferredRenderUpdates_Concurrent -&gt;</p> </li> </ol> <ul> <li> <p>(Renderstate_Dirty)=&gt;RecreateRenderState_Concurrent</p> </li> <li> <p>(bRenderTransformDirty) =&gt; SendRenderTransform_Concurrent</p> </li> <li> <p>(bRenderDynamicDataDirty) =&gt; SendRenderDynamicData_Concurrent</p> </li> </ul> <ol> <li> <p>SkinnedMeshComponent::SendRenderDynamicData_Concurrent() then is responsible for sending updated render data to the render thread (through Enqueue_Unique_Render_Command)    - Uses SkeletalMeshObject as the helper class to manage that    - Payload is a struct of FDynamicSkelMeshObjectData</p> </li> <li> <p>On Component detachment/destruction, game thread enqueues commands to release all RHI FRenderResources</p> </li> </ol> <ul> <li> <p>a. DestroyRenderState_Concurrent () called when component is unregistered</p> </li> <li> <p>b. FSkeletalMeshObject::ReleaseResources() is called to free up RHIs owned by this object</p> <ul> <li>Calls BeginReleaseResource() on all RHI objects</li> <li>Enqueues Render Command: Resource::ReleaseResource()</li> <li>ReleaseResource() is responsible for deallocating the RHI Resource (e.g. calls VertexBuffer:ReleaseResource-&gt;ReleaseRHI/ReleaseDynamicRHI)</li> </ul> </li> <li> <p>c. BeginCleanup(MeshObject) is called to do a deferred deletion of the object</p> </li> <li> <p>d. After the render command buffer has been flushed, FSkeletalMeshObject::FinishCleanup() ( which is a delete this; for FSkeletalMeshObject)</p> </li> </ul> <p>Ex: Static Resource interaction with USkeletalMesh</p> <ol> <li>On Component detachment/destruction, game thread enqueues commands to release all RHI FRenderResources</li> </ol> <p>a. GC Calls MeshObject::ReleaseResources(). This doesn't immediately destroy anything.</p> <ol> <li> <p>Calls BeginReleaseResource() to enqueue command on render thread to release RHI resources (e.g. BeginReleaseResource(&amp;ColorVertexBuffer);)</p> </li> <li> <p>Game thread creates a fence so it can continue so we don't block on render thread processing the delete</p> </li> <li> <p>GC calls USkeletalMesh::IsReadyForFinishDestroy() which checks if the fence is set or not</p> </li> <li> <p>GC calls UObject::FinishDestroy()</p> </li> </ol> <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/Rendering/ThreadedRendering/index.html</p> <p>FSceneView is per Eye scene view. Calculates offsets &amp; HMD rotation</p> <p>Depth Priority Groups are deprecated even though they don't show up that way in the API</p> <p>PlayerController is where you handle keyboard inputs for map/game/hud</p> <p>Creating HUD:</p> <ul> <li> <p>Powerful but complicated: Derive AHUD. Ex: Shooter Game</p> </li> <li> <p>Blueprint way:</p> </li> </ul> <p>The high level outline would be that your map needs a GameMode blueprint (see here) which will allow you to specify blueprints that will likely control your HUD--PlayerController Class and HUD Class.</p> <p>Your PlayerController Class would ideally be where you want to handle any keyboard inputs for your map/game/HUD. For example, in Blueprint_HUD map, the BP_PlayerController_HUD blueprint is where we have our Input M to open the menu.</p> <p>Your HUD Class is where all the magic happens with drawing your HUD. Event Receive Draw HUD is a Tick event, meaning it will fire off every frame of your game to draw your HUD given the instructions you connect to it. In the Blueprint_HUD map, our BP_HUD_Example has a branch early on that is toggled based on if the Menu should be drawn or not. If not, the main gameplay HUD is drawn, if yes, the Menu HUD is drawn (and gameplay HUD is not).</p> <p>The HUD Class also contains the events for when you click the Hitboxes that are drawn by the Receive Draw HUD event.</p> <p>Hopefully this enough to keep you going on working with Blueprint HUD. We're working hard to get more official documentation for both Blueprint HUD and C++ HUD and hope to be able to provide it soon!</p> <p>Reference From https://wiki.unrealengine.com/Content_example_blueprint_HUD</p>"},{"location":"ue4guide/graphics-development/render-architecture/shader-common-params/","title":"Shader common params","text":"<p>Coordinate Spaces:</p> <ul> <li> <p>Camera Space: X+ gets mapped to Z+, Y+ gets mapped to X+, Z+ gets mapped to Y+. Basically Right handed Y-up</p> </li> <li> <p>View Space: Same as camera space except in shadow rendering</p> </li> <li> <p>PreViewTranslation/etc is confusing. Here's the math:</p> </li> <li> <p>ViewMatrix = PreViewTranslation * ViewRotationMatrix</p> </li> <li> <p>It's just separating out camera translation from rotation for accuracy</p> </li> <li> <p>\"Translated\" prefix means camera relative space (aka 0,0,0 is camera position in world space) aka it's WorldPos * TranslationMatrix(-CameraOrigin)</p> </li> <li> <p>\"PreViewTranslation\" prefix just means before this translation happened so in actual world space</p> </li> <li> <p>TranslatedWorldToCameraView = TranslatedWorldToView = TranslatedViewMatrix = Inverse of camera rotation matrix</p> </li> </ul> <p>TranslatedWorldCameraOrigin = 0,0,0 (post -vieworigin translation)</p> <p>WorldCameraOrigin = Camera Position</p> <p>WorldViewOrigin = Camera Position (different during shadow pass)</p> <p>PreViewTranslation = -CameraPosition</p> <ul> <li> <p>TranslatedWorldToView = TranslatedViewMatrix</p> </li> <li> <p>FMaterialPixelParameters</p> </li> <li> <p>SvPosition: Like SV_Position (.xy is pixel position at pixel center, z:DeviceZ, .w:SceneDepth)</p> </li> </ul> <p>this is not relative to the current viewport. RelativePixelPosition = MaterialParameters.SvPosition.xy - View.ViewRectMin.xy;</p> <ul> <li> <p>ScreenPosition: Post projection position reconstructed from SvPosition, before the divide by W. left..top -1..1, bottom..top -1..1 within the viewport, W is the SceneDepth</p> </li> <li> <p>WorldPosition_CamRelative: This is just absoluteworldposition - WorldCameraOrigin. Not rotation adjusted in viewspace</p> </li> <li> <p>PreViewTranslation = -ViewOrigin</p> </li> <li> <p>ViewRotationMatrix = FInverseRotationMatrix(ViewRotation) * ViewPlanesMatrix;</p> </li> <li> <p>TranslatedViewMatrix = ViewRotationMatrix;</p> </li> <li> <p>ViewMatrix = FTranslationMatrix(-ViewLocation) * ViewRotationMatrix;</p> </li> <li> <p>WorldPosition_CamRelative =&gt; PixelPosWS - CameraOrigina1`</p> </li> <li> <p>GetMaterialSharedSampler(Material.Texture2D_0Sampler,Material.Clamp_WorldGroupSettings)</p> </li> </ul>"},{"location":"ue4guide/graphics-development/render-architecture/shader-compilation-code-flow/","title":"Shader compilation code flow","text":"<ul> <li> <p>Initializes FHLSLMaterialTranslator()</p> </li> <li> <p>Set up which material properties are shared (ex: SharedPixelProperties[MP_Normal] = true;)</p> </li> <li> <p>Calls FHLSLMaterialTranslator::Translate(): Translate from Material Node graph into textual shader code representation</p> </li> <li> <p>Material-&gt;GatherExpressionsForCustomInterpolators(Expressions);</p> </li> <li> <p>GatherCustomVertexInterpolators(Expressions);</p> </li> <li> <p>Material-&gt;GatherCustomOutputExpressions(CustomOutputExpressions);</p> </li> <li> <p>CompileCustomOutputs(CustomOutputExpressions, SeenCustomOutputExpressionsClases, true);</p> </li> <li> <p>Material-&gt;CompilePropertyAndSetMaterialProperty() on MP_Normal, MP_DiffuseColor, MP_Specular, MP_Roughness, etc</p> </li> <li> <p>Determines if properties are actually used &amp;&amp; validation checking. Eg:</p> <p>bUsesEmissiveColor = IsMaterialPropertyUsed(MP_EmissiveColor, Chunk[MP_EmissiveColor], FLinearColor(0, 0, 0, 0), 3);</p> </li> <li> <p>Determines number of vertex interpolators/uv tex coords/etc</p> </li> <li> <p>MaterialCompilationOutput.UniformExpressionSet.SetParameterCollections(ParameterCollections);</p> </li> <li> <p>MaterialCompilationOutput.UniformExpressionSet.CreateBufferStruct();</p> </li> <li> <p>Calls FHLSLMaterialTranslator::GetMaterialEnvironment()</p> </li> <li> <p>Sets more fundamental defines such as: NEEDS_PARTICLE_POSITION, NEEDS_SCENE_TEXTURES, USES_TRANSFORM_VECTOR, USES_EMISSIVE_COLOR</p> </li> <li> <p>Add uniform buffer declarations for any parameter collections referenced</p> <p>const FString CollectionName = FString::Printf(TEXT(\"MaterialCollection%u\"), CollectionIndex);</p> <p>FShaderUniformBufferParameter::ModifyCompilationEnvironment(*CollectionName, ParameterCollections[CollectionIndex]-&gt;GetUniformBufferStruct(), InPlatform, OutEnvironment);</p> </li> <li> <p>Calls FHLSLMaterialTranslator::GetMaterialShaderCode():</p> </li> <li> <p>Responsible for compiling and filling MaterialTemplate.ush</p> </li> <li> <p>Uses LazyPrintf.PushParam() and Printf() to stringify everything into the generated Material.ush file</p> </li> <li> <p>GetSharedInputsMaterialCode():</p> <ul> <li> <p>Generates the fields for FPixelMaterialInputs which are shared properties across the shader (like MP_Normal, MP_BaseColor, MP_Roughness, etc)</p> </li> <li> <p>Generates initializers for them too</p> </li> </ul> </li> <li> <p>Calls main compilation in NewShaderMap-&gt;Compile():</p> </li> <li> <p>Material-&gt;SetupMaterialEnvironment(): Sets majority of shader defines (including material specific ones like staticswitches, etc) by calling. Ex:</p> </li> <li> <p>Defines from the umaterial uproperties such as: MATERIAL_TWOSIDED, MATERIAL_NONMETAL, MATERIAL_HQ_FORWARD_REFLECTIONS</p> </li> <li> <p>Defines from the material itself such as: GetBlendMode() =&gt; MATERIALBLENDING_MASKED|MATERIALBLENDING_SOLID, MATERIAL_FULLY_ROUGH</p> </li> <li> <p>Defines also fundamental things such as MATERIAL_DOMAIN_SURFACE|MATERIAL_DOMAIN_DEFERREDDECAL|\u2026 &amp; MATERIAL_SHADINGMODEL_UNLIT|MATERIAL_SHADINGMODEL_DEFAULT_LIT|\u2026</p> </li> <li> <p>Also uses cvar values to determine whether to set defines or not: r.StencilForLODDither =&gt; USE_STENCIL_LOD_DITHER_DEFAULT</p> </li> <li> <p>Iterate over all vertex factories and materials and compile them together if this material applies</p> </li> </ul>"},{"location":"ue4guide/graphics-development/render-architecture/shader-uniform-buffers/","title":"Shader uniform buffers","text":"<ul> <li>Primitive Uniform Buffer</li> </ul> C++<pre><code>BEGIN_UNIFORM_BUFFER_STRUCT(FPrimitiveUniformShaderParameters,ENGINE_API)  \n        UNIFORM_MEMBER(FMatrix,LocalToWorld)                // always needed  \n        UNIFORM_MEMBER_EX(FVector4,InvNonUniformScaleAndDeterminantSign,EShaderPrecisionModifier::Half) //often needed  \n        UNIFORM_MEMBER(FVector4,ObjectWorldPositionAndRadius)        // needed by some materials  \n        UNIFORM_MEMBER(FMatrix,WorldToLocal)                // rarely needed  \n        UNIFORM_MEMBER(FVector,ActorWorldPosition)  \n        UNIFORM_MEMBER_EX(float,UseSingleSampleShadowFromStationaryLights,EShaderPrecisionModifier::Half)          \n        UNIFORM_MEMBER(FVector,ObjectBounds)                // only needed for editor/development  \n        UNIFORM_MEMBER(float,LpvBiasMultiplier)  \n        UNIFORM_MEMBER_EX(float,DecalReceiverMask,EShaderPrecisionModifier::Half)  \n        UNIFORM_MEMBER_EX(float,PerObjectGBufferData,EShaderPrecisionModifier::Half)                // 0..1, 2 bits, bDistanceFieldRepresentation, bHeightfieldRepresentation  \n        UNIFORM_MEMBER_EX(float,UseVolumetricLightmapShadowFromStationaryLights,EShaderPrecisionModifier::Half)                  \n        UNIFORM_MEMBER_EX(float,UseEditorDepthTest,EShaderPrecisionModifier::Half)  \n        UNIFORM_MEMBER_EX(FVector4,ObjectOrientation,EShaderPrecisionModifier::Half)  \n        UNIFORM_MEMBER_EX(FVector4,NonUniformScale,EShaderPrecisionModifier::Half)  \n        UNIFORM_MEMBER(FVector, LocalObjectBoundsMin)                // This is used in a custom material function (ObjectLocalBounds.uasset)  \n        UNIFORM_MEMBER(FVector, LocalObjectBoundsMax)                // This is used in a custom material function (ObjectLocalBounds.uasset)  \n        UNIFORM_MEMBER(uint32,LightingChannelMask)  \nEND_UNIFORM_BUFFER_STRUCT(FPrimitiveUniformShaderParameters)\n</code></pre> <ul> <li>View Uniform Buffer</li> </ul> C++<pre><code>\\#define VIEW_UNIFORM_BUFFER_MEMBER_TABLE \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(FMatrix, TranslatedWorldToClip) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(FMatrix, WorldToClip) \\ \n        VIEW_UNIFORM_BUFFER_MEMBER(FMatrix, TranslatedWorldToView) \\ \n        VIEW_UNIFORM_BUFFER_MEMBER(FMatrix, ViewToTranslatedWorld) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(FMatrix, TranslatedWorldToCameraView) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(FMatrix, CameraViewToTranslatedWorld) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(FMatrix, ViewToClip) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(FMatrix, ViewToClipNoAA) \\ \n        VIEW_UNIFORM_BUFFER_MEMBER(FMatrix, ClipToView) \\\n        VIEW_UNIFORM_BUFFER_MEMBER(FMatrix, ClipToTranslatedWorld) \\ \n        VIEW_UNIFORM_BUFFER_MEMBER(FMatrix, SVPositionToTranslatedWorld) \\ \n        VIEW_UNIFORM_BUFFER_MEMBER(FMatrix, ScreenToWorld) \\\n        VIEW_UNIFORM_BUFFER_MEMBER(FMatrix, ScreenToTranslatedWorld) \\ \n        VIEW_UNIFORM_BUFFER_MEMBER_EX(FVector, ViewForward, EShaderPrecisionModifier::Half) \\\n        VIEW_UNIFORM_BUFFER_MEMBER_EX(FVector, ViewUp, EShaderPrecisionModifier::Half) \\\n        VIEW_UNIFORM_BUFFER_MEMBER_EX(FVector, ViewRight, EShaderPrecisionModifier::Half) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER_EX(FVector, HMDViewNoRollUp, EShaderPrecisionModifier::Half) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER_EX(FVector, HMDViewNoRollRight, EShaderPrecisionModifier::Half) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(FVector4, InvDeviceZToWorldZTransform) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER_EX(FVector4, ScreenPositionScaleBias, EShaderPrecisionModifier::Half) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(FVector, WorldCameraOrigin) \\ \n        VIEW_UNIFORM_BUFFER_MEMBER(FVector, TranslatedWorldCameraOrigin) \\ \n        VIEW_UNIFORM_BUFFER_MEMBER(FVector, WorldViewOrigin) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(FVector, PreViewTranslation) \\ \n        VIEW_UNIFORM_BUFFER_MEMBER(FMatrix, PrevProjection) \\ \n        VIEW_UNIFORM_BUFFER_MEMBER(FMatrix, PrevViewProj) \\ \n        VIEW_UNIFORM_BUFFER_MEMBER(FMatrix, PrevViewRotationProj) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(FMatrix, PrevViewToClip) \\ \n        VIEW_UNIFORM_BUFFER_MEMBER(FMatrix, PrevClipToView) \\ \n        VIEW_UNIFORM_BUFFER_MEMBER(FMatrix, PrevTranslatedWorldToClip) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(FMatrix, PrevTranslatedWorldToView) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(FMatrix, PrevViewToTranslatedWorld) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(FMatrix, PrevTranslatedWorldToCameraView) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(FMatrix, PrevCameraViewToTranslatedWorld) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(FVector, PrevWorldCameraOrigin) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(FVector, PrevWorldViewOrigin) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(FVector, PrevPreViewTranslation) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(FMatrix, PrevInvViewProj) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(FMatrix, PrevScreenToTranslatedWorld) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(FMatrix, ClipToPrevClip) \\ \n        VIEW_UNIFORM_BUFFER_MEMBER(FVector4, TemporalAAJitter) \\ \n        VIEW_UNIFORM_BUFFER_MEMBER(FVector4, GlobalClippingPlane) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(FVector2D, FieldOfViewWideAngles) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(FVector2D, PrevFieldOfViewWideAngles) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER_EX(FVector4, ViewRectMin, EShaderPrecisionModifier::Half) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(FVector4, ViewSizeAndInvSize) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(FVector4, BufferSizeAndInvSize) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(FVector4, BufferBilinearUVMinMax) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(int32, NumSceneColorMSAASamples) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER_EX(float, PreExposure, EShaderPrecisionModifier::Half) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER_EX(float, OneOverPreExposure, EShaderPrecisionModifier::Half) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER_EX(FVector4, DiffuseOverrideParameter, EShaderPrecisionModifier::Half) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER_EX(FVector4, SpecularOverrideParameter, EShaderPrecisionModifier::Half) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER_EX(FVector4, NormalOverrideParameter, EShaderPrecisionModifier::Half) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER_EX(FVector2D, RoughnessOverrideParameter, EShaderPrecisionModifier::Half) \\ \n        VIEW_UNIFORM_BUFFER_MEMBER(float, PrevFrameGameTime) \\ \n        VIEW_UNIFORM_BUFFER_MEMBER(float, PrevFrameRealTime) \\ \n        VIEW_UNIFORM_BUFFER_MEMBER_EX(float, OutOfBoundsMask, EShaderPrecisionModifier::Half) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(FVector, WorldCameraMovementSinceLastFrame) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(float, CullingSign) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER_EX(float, NearPlane, EShaderPrecisionModifier::Half) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(float, AdaptiveTessellationFactor) \\ \n        VIEW_UNIFORM_BUFFER_MEMBER(float, GameTime) \\ \n        VIEW_UNIFORM_BUFFER_MEMBER(float, RealTime) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(float, MaterialTextureMipBias) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(float, MaterialTextureDerivativeMultiply) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(uint32, Random) \\\n        VIEW_UNIFORM_BUFFER_MEMBER(uint32, FrameNumber) \\\n        VIEW_UNIFORM_BUFFER_MEMBER(uint32, StateFrameIndexMod8) \\\n        VIEW_UNIFORM_BUFFER_MEMBER_EX(float, CameraCut, EShaderPrecisionModifier::Half) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER_EX(float, UnlitViewmodeMask, EShaderPrecisionModifier::Half) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER_EX(FLinearColor, DirectionalLightColor, EShaderPrecisionModifier::Half) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER_EX(FVector, DirectionalLightDirection, EShaderPrecisionModifier::Half) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER_ARRAY(FVector4, TranslucencyLightingVolumeMin, \\[TVC_MAX]) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER_ARRAY(FVector4, TranslucencyLightingVolumeInvSize, \\[TVC_MAX]) \\ \n        VIEW_UNIFORM_BUFFER_MEMBER(FVector4, TemporalAAParams) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(FVector4, CircleDOFParams) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(float, DepthOfFieldSensorWidth) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(float, DepthOfFieldFocalDistance) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(float, DepthOfFieldScale) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(float, DepthOfFieldFocalLength) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(float, DepthOfFieldFocalRegion) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(float, DepthOfFieldNearTransitionRegion) \\ \n        VIEW_UNIFORM_BUFFER_MEMBER(float, DepthOfFieldFarTransitionRegion) \\ \n        VIEW_UNIFORM_BUFFER_MEMBER(float, MotionBlurNormalizedToPixel) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(float, bSubsurfacePostprocessEnabled) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(float, GeneralPurposeTweak) \\\n        VIEW_UNIFORM_BUFFER_MEMBER_EX(float, DemosaicVposOffset, EShaderPrecisionModifier::Half) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(FVector, IndirectLightingColorScale) \\ \n        VIEW_UNIFORM_BUFFER_MEMBER_EX(float, HDR32bppEncodingMode, EShaderPrecisionModifier::Half) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(FVector, AtmosphericFogSunDirection) \\ \n        VIEW_UNIFORM_BUFFER_MEMBER_EX(float, AtmosphericFogSunPower, EShaderPrecisionModifier::Half) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER_EX(float, AtmosphericFogPower, EShaderPrecisionModifier::Half) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER_EX(float, AtmosphericFogDensityScale, EShaderPrecisionModifier::Half) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER_EX(float, AtmosphericFogDensityOffset, EShaderPrecisionModifier::Half) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER_EX(float, AtmosphericFogGroundOffset, EShaderPrecisionModifier::Half) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER_EX(float, AtmosphericFogDistanceScale, EShaderPrecisionModifier::Half) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER_EX(float, AtmosphericFogAltitudeScale, EShaderPrecisionModifier::Half) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER_EX(float, AtmosphericFogHeightScaleRayleigh, EShaderPrecisionModifier::Half) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER_EX(float, AtmosphericFogStartDistance, EShaderPrecisionModifier::Half) \\ \n        VIEW_UNIFORM_BUFFER_MEMBER_EX(float, AtmosphericFogDistanceOffset, EShaderPrecisionModifier::Half) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER_EX(float, AtmosphericFogSunDiscScale, EShaderPrecisionModifier::Half) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(uint32, AtmosphericFogRenderMask) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(uint32, AtmosphericFogInscatterAltitudeSampleNum) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(FLinearColor, AtmosphericFogSunColor) \\\n        VIEW_UNIFORM_BUFFER_MEMBER(FVector, NormalCurvatureToRoughnessScaleBias) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(float, RenderingReflectionCaptureMask) \\ \n        VIEW_UNIFORM_BUFFER_MEMBER(FLinearColor, AmbientCubemapTint) \\ \n        VIEW_UNIFORM_BUFFER_MEMBER(float, AmbientCubemapIntensity) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(float, SkyLightParameters) \\ \n        VIEW_UNIFORM_BUFFER_MEMBER(FLinearColor, SkyLightColor) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER_ARRAY(FVector4, SkyIrradianceEnvironmentMap, \\[7]) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(float, MobilePreviewMode) \\ \n        VIEW_UNIFORM_BUFFER_MEMBER(float, HMDEyePaddingOffset) \\ \n        VIEW_UNIFORM_BUFFER_MEMBER_EX(float, ReflectionCubemapMaxMip, EShaderPrecisionModifier::Half) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(float, ShowDecalsMask) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(uint32, DistanceFieldAOSpecularOcclusionMode) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(float, IndirectCapsuleSelfShadowingIntensity) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(FVector, ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(int32, StereoPassIndex) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER_ARRAY(FVector4, GlobalVolumeCenterAndExtent, \\[GMaxGlobalDistanceFieldClipmaps]) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER_ARRAY(FVector4, GlobalVolumeWorldToUVAddAndMul, \\[GMaxGlobalDistanceFieldClipmaps]) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(float, GlobalVolumeDimension) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(float, GlobalVolumeTexelSize) \\ \n        VIEW_UNIFORM_BUFFER_MEMBER(float, MaxGlobalDistance) \\\n        VIEW_UNIFORM_BUFFER_MEMBER(float, bCheckerboardSubsurfaceProfileRendering) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(FVector, VolumetricFogInvGridSize) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(FVector, VolumetricFogGridZParams) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(FVector2D, VolumetricFogSVPosToVolumeUV) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(float, VolumetricFogMaxDistance) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(FVector, VolumetricLightmapWorldToUVScale) \\ \n        VIEW_UNIFORM_BUFFER_MEMBER(FVector, VolumetricLightmapWorldToUVAdd) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(FVector, VolumetricLightmapIndirectionTextureSize) \\  \n        VIEW_UNIFORM_BUFFER_MEMBER(float, VolumetricLightmapBrickSize) \\\n        VIEW_UNIFORM_BUFFER_MEMBER(FVector, VolumetricLightmapBrickTexelSize) \\ \n        VIEW_UNIFORM_BUFFER_MEMBER(float, StereoIPD)\n\nBEGIN_UNIFORM_BUFFER_STRUCT_WITH_CONSTRUCTOR(FViewUniformShaderParameters, ENGINE_API)\n\nVIEW_UNIFORM_BUFFER_MEMBER_TABLE\n\n// Same as Wrap_WorldGroupSettings and Clamp_WorldGroupSettings, but with mipbias=MaterialTextureMipBias.  \n        UNIFORM_MEMBER_SAMPLER(SamplerState, MaterialTextureBilinearWrapedSampler)  \n        UNIFORM_MEMBER_SAMPLER(SamplerState, MaterialTextureBilinearClampedSampler)\n\nUNIFORM_MEMBER_TEXTURE(Texture3D&amp;lt;uint4&gt;, VolumetricLightmapIndirectionTexture) // FPrecomputedVolumetricLightmapLightingPolicy  \n        UNIFORM_MEMBER_TEXTURE(Texture3D, VolumetricLightmapBrickAmbientVector) // FPrecomputedVolumetricLightmapLightingPolicy  \n        UNIFORM_MEMBER_TEXTURE(Texture3D, VolumetricLightmapBrickSHCoefficients0) // FPrecomputedVolumetricLightmapLightingPolicy  \n        UNIFORM_MEMBER_TEXTURE(Texture3D, VolumetricLightmapBrickSHCoefficients1) // FPrecomputedVolumetricLightmapLightingPolicy  \n        UNIFORM_MEMBER_TEXTURE(Texture3D, VolumetricLightmapBrickSHCoefficients2) // FPrecomputedVolumetricLightmapLightingPolicy  \n        UNIFORM_MEMBER_TEXTURE(Texture3D, VolumetricLightmapBrickSHCoefficients3) // FPrecomputedVolumetricLightmapLightingPolicy  \n        UNIFORM_MEMBER_TEXTURE(Texture3D, VolumetricLightmapBrickSHCoefficients4) // FPrecomputedVolumetricLightmapLightingPolicy  \n        UNIFORM_MEMBER_TEXTURE(Texture3D, VolumetricLightmapBrickSHCoefficients5) // FPrecomputedVolumetricLightmapLightingPolicy  \n        UNIFORM_MEMBER_TEXTURE(Texture3D, SkyBentNormalBrickTexture) // FPrecomputedVolumetricLightmapLightingPolicy  \n        UNIFORM_MEMBER_TEXTURE(Texture3D, DirectionalLightShadowingBrickTexture) // FPrecomputedVolumetricLightmapLightingPolicy\n\nUNIFORM_MEMBER_SAMPLER(SamplerState, VolumetricLightmapBrickAmbientVectorSampler) // FPrecomputedVolumetricLightmapLightingPolicy  \n        UNIFORM_MEMBER_SAMPLER(SamplerState, VolumetricLightmapTextureSampler0) // FPrecomputedVolumetricLightmapLightingPolicy  \n        UNIFORM_MEMBER_SAMPLER(SamplerState, VolumetricLightmapTextureSampler1) // FPrecomputedVolumetricLightmapLightingPolicy  \n        UNIFORM_MEMBER_SAMPLER(SamplerState, VolumetricLightmapTextureSampler2) // FPrecomputedVolumetricLightmapLightingPolicy  \n        UNIFORM_MEMBER_SAMPLER(SamplerState, VolumetricLightmapTextureSampler3) // FPrecomputedVolumetricLightmapLightingPolicy  \n        UNIFORM_MEMBER_SAMPLER(SamplerState, VolumetricLightmapTextureSampler4) // FPrecomputedVolumetricLightmapLightingPolicy  \n        UNIFORM_MEMBER_SAMPLER(SamplerState, VolumetricLightmapTextureSampler5) // FPrecomputedVolumetricLightmapLightingPolicy  \n        UNIFORM_MEMBER_SAMPLER(SamplerState, SkyBentNormalTextureSampler) // FPrecomputedVolumetricLightmapLightingPolicy  \n        UNIFORM_MEMBER_SAMPLER(SamplerState, DirectionalLightShadowingTextureSampler) // FPrecomputedVolumetricLightmapLightingPolicy\n\nUNIFORM_MEMBER_TEXTURE(Texture3D, GlobalDistanceFieldTexture0)  \n        UNIFORM_MEMBER_SAMPLER(SamplerState, GlobalDistanceFieldSampler0)  \n        UNIFORM_MEMBER_TEXTURE(Texture3D, GlobalDistanceFieldTexture1)  \n        UNIFORM_MEMBER_SAMPLER(SamplerState, GlobalDistanceFieldSampler1)  \n        UNIFORM_MEMBER_TEXTURE(Texture3D, GlobalDistanceFieldTexture2)  \n        UNIFORM_MEMBER_SAMPLER(SamplerState, GlobalDistanceFieldSampler2)  \n        UNIFORM_MEMBER_TEXTURE(Texture3D, GlobalDistanceFieldTexture3)  \n        UNIFORM_MEMBER_SAMPLER(SamplerState, GlobalDistanceFieldSampler3)\n\nUNIFORM_MEMBER_TEXTURE(Texture2D, AtmosphereTransmittanceTexture)  \n        UNIFORM_MEMBER_SAMPLER(SamplerState, AtmosphereTransmittanceTextureSampler)  \n        UNIFORM_MEMBER_TEXTURE(Texture2D, AtmosphereIrradianceTexture)  \n        UNIFORM_MEMBER_SAMPLER(SamplerState, AtmosphereIrradianceTextureSampler)  \n        UNIFORM_MEMBER_TEXTURE(Texture3D, AtmosphereInscatterTexture)  \n        UNIFORM_MEMBER_SAMPLER(SamplerState, AtmosphereInscatterTextureSampler)  \n        UNIFORM_MEMBER_TEXTURE(Texture2D, PerlinNoiseGradientTexture)  \n        UNIFORM_MEMBER_SAMPLER(SamplerState, PerlinNoiseGradientTextureSampler)  \n        UNIFORM_MEMBER_TEXTURE(Texture3D, PerlinNoise3DTexture)  \n        UNIFORM_MEMBER_SAMPLER(SamplerState, PerlinNoise3DTextureSampler)  \n        UNIFORM_MEMBER_TEXTURE(Texture2D&amp;lt;uint&gt;, SobolSamplingTexture)  \n        UNIFORM_MEMBER_SAMPLER(SamplerState, SharedPointWrappedSampler)  \n        UNIFORM_MEMBER_SAMPLER(SamplerState, SharedPointClampedSampler)  \n        UNIFORM_MEMBER_SAMPLER(SamplerState, SharedBilinearWrappedSampler)  \n        UNIFORM_MEMBER_SAMPLER(SamplerState, SharedBilinearClampedSampler)  \n        UNIFORM_MEMBER_SAMPLER(SamplerState, SharedTrilinearWrappedSampler)  \n        UNIFORM_MEMBER_SAMPLER(SamplerState, SharedTrilinearClampedSampler)  \n        UNIFORM_MEMBER_TEXTURE(Texture2D, PreIntegratedBRDF)  \n        UNIFORM_MEMBER_SAMPLER(SamplerState, PreIntegratedBRDFSampler)\n\nEND_UNIFORM_BUFFER_STRUCT(FViewUniformShaderParameters)\n</code></pre>"},{"location":"ue4guide/graphics-development/shader-development/add-custom-shading-model/","title":"Add Custom Shading Model","text":"<p>Global Shader: https://www.unrealengine.com/en-US/blog/how-to-add-global-shaders-to-ue4 Custom Shading Model: http://blog.felixkate.net/2016/05/22/adding-a-custom-shading-model-1/ Updated Method For Custom Shading Model: https://medium.com/@lordned/ue4-rendering-part-6-adding-a-new-shading-model-e2972b40d72d</p>"},{"location":"ue4guide/graphics-development/shader-development/add-custom-shading-model/#add-new-custom-material-properties","title":"Add New Custom Material Properties","text":"<p>Add defaults to custom material properties (eg MP_CustomData2) in:</p> C++<pre><code>int32 FMaterialAttributeDefintion::CompileDefaultValue(FMaterialCompiler* Compiler)\n{\n  int32 Ret;\n\n    // @third party code - BEGIN Bebylon - #Eng-Feature: BBFakeSSShadingMode - Adding new property\n    if (Compiler-&gt;GetMaterialShadingModel() == MSM_BBFakeSS &amp;&amp;\n        (Property == MP_CustomData0 || Property == MP_CustomData1 || Property == MP_CustomData2 || Property == MP_CustomData3))\n    {\n        // Standard value type\n        switch (Property)\n        {\n        case MP_CustomData0: Ret = Compiler-&gt;Constant(0.0f); break;\n        case MP_CustomData1: Ret = Compiler-&gt;Constant(0.0f); break;\n        case MP_CustomData2: Ret = Compiler-&gt;Constant(0.0f); break;\n        case MP_CustomData3: Ret = Compiler-&gt;Constant(0.0f); break;\n        }\n    }\n  // @third party code - END Bebylon\n  ...\n}\n</code></pre>"},{"location":"ue4guide/graphics-development/shader-development/add-custom-shading-model/#gbufferviewmode-extensions","title":"GBuffer/Viewmode extensions","text":"<p>Useful Links: https://www.unrealengine.com/en-US/blog/how-to-add-global-shaders-to-ue4 http://blog.felixkate.net/2016/05/22/adding-a-custom-shading-model-1/ https://medium.com/@lordned/ue4-rendering-part-6-adding-a-new-shading-model-e2972b40d72d https://forums.unrealengine.com/development-discussion/rendering/1409859-custom-hlsl-tips https://forums.unrealengine.com/development-discussion/rendering/113855-extending-custom-hlsl-custom-expressions</p> <p>https://wiki.unrealengine.com/HLSL_Shaders https://forums.unrealengine.com/showthread.php?71334-Anybody-written-a-Plugin-that-adds-Material-Nodes https://forums.unrealengine.com/showthread.php?27766-Odessey-Creating-my-own-G-Buffer-in-UE4 https://forums.unrealengine.com/showthread.php?58489-Tutorial-Pixel-and-Compute-Shaders-in-UE4 Compute and pixel shader: https://github.com/sp0lsh/UE4ShaderPluginDemo/ https://github.com/slomp/UE4RenderDocPlugin</p>"},{"location":"ue4guide/graphics-development/shader-development/add-custom-shading-model/#example-custom-material-model","title":"Example Custom Material Model","text":"<p>Toon Shading: https://github.com/marynate/UnrealEngine/tree/4.16-release-toon Compute Shader Sample with FluidSurface: https://github.com/marynate/FluidSurface</p>"},{"location":"ue4guide/graphics-development/shader-development/add-custom-shading-model/#custom-shaders-development-brain-dump","title":"Custom Shaders Development Brain Dump","text":"<p>Overview documentation at https://docs.unrealengine.com/latest/INT/Programming/Rendering/ShaderDevelopment/index.html</p> <p>Vertex Factories interface between specific mesh &amp; shader</p> <p>FVertexFactoryType represents a unique mesh type</p> <p>FVertexFactory instance contains per-instance data to support that unique mesh (e.g. bone matrices needed for skinning)</p>"},{"location":"ue4guide/graphics-development/shader-development/add-custom-shading-model/#config-settings","title":"Config settings","text":"INI<pre><code>r.ShaderDevelopmentMode=1\n; Uncomment to dump shaders in the Saved folder\n; Warning: leaving this on for a while will fill your hard drive with many small files and folders\nr.DumpShaderDebugInfo=1\nr.CompileShadersForDevelopment=1\n</code></pre> <p>VertexFactory:</p> <ul> <li> <p>Creates/Sets shader bindings through ConstructShaderParameters &amp; FVertexFactoryShaderParameters</p> </li> <li> <p>Sets the Vertex Declaration Format (FVertexDeclarationElementList) through FVertexFactory::DataType which contains FVertexStreamComponent structs that define the stride, offset, size of each vertex element</p> </li> <li> <p>FVertexStreamComponent is intiialized with macros such as STRUCTMEMBER_VERTEXSTREAMCOMPONENT</p> </li> <li> <p>FLocalVertexFactory::InitRHI is where all the magic happens. It actually sets everything</p> </li> </ul> <ol> <li> <p>Set the uniform buffers</p> </li> <li> <p>Modify localvertexfactory.usf</p> </li> <li> <p>Checkout PreRenderView to update constantbuffers</p> </li> </ol> <p>A. PreRenderView is deprecated</p> <ol> <li>Add ResourceRelease for all the uniformbuffers/vertexfactories</li> </ol> <p>Interesting code to look at to directly render stuff, create uniform constant buffers, and create a custom vertex declaration:</p> <p>UnrealEngine\\Engine\\Source\\Runtime\\Engine\\Private\\Particles\\ParticleBeamTrailVertexFactory.cpp</p> <p>UnrealEngine\\Engine\\Source\\Runtime\\Eengine\\Private\\Particles\\ParticleVertexFactory.cpp</p> <p>To bind LocalVertexFactory with a shader you have to use:</p> C++<pre><code>DECLARE_VERTEX_FACTORY_TYPE( FFluidSurfaceVertexFactory );\n\nIMPLEMENT_VERTEX_FACTORY_TYPE( FFluidSurfaceVertexFactory, \"FluidSurfaceVertexFactory\", true, true, true, true, false );\n</code></pre> <p>VertexFactory::InitRHI() is where the vertex declaration is created</p> C++<pre><code>void FLocalVertexFactory::InitRHI()\n\nBEGIN_UNIFORM_BUFFER_STRUCT( FParticleSpriteUniformParameters, )\n        DECLARE_UNIFORM_BUFFER_STRUCT_MEMBER_EX( FVector4, AxisLockRight, EShaderPrecisionModifier::Half )\n        DECLARE_UNIFORM_BUFFER_STRUCT_MEMBER_EX( FVector4, AxisLockUp, EShaderPrecisionModifier::Half )\n        DECLARE_UNIFORM_BUFFER_STRUCT_MEMBER_EX( FVector4, TangentSelector, EShaderPrecisionModifier::Half )\n        DECLARE_UNIFORM_BUFFER_STRUCT_MEMBER_EX( FVector4, NormalsSphereCenter, EShaderPrecisionModifier::Half )\n        DECLARE_UNIFORM_BUFFER_STRUCT_MEMBER_EX( FVector4, NormalsCylinderUnitDirection, EShaderPrecisionModifier::Half )\n        DECLARE_UNIFORM_BUFFER_STRUCT_MEMBER_EX( FVector4, SubImageSize, EShaderPrecisionModifier::Half )\n        DECLARE_UNIFORM_BUFFER_STRUCT_MEMBER( FVector4, MacroUVParameters )\n        DECLARE_UNIFORM_BUFFER_STRUCT_MEMBER_EX( float, RotationScale, EShaderPrecisionModifier::Half )\n        DECLARE_UNIFORM_BUFFER_STRUCT_MEMBER_EX( float, RotationBias, EShaderPrecisionModifier::Half )\n        DECLARE_UNIFORM_BUFFER_STRUCT_MEMBER_EX( float, NormalsType, EShaderPrecisionModifier::Half )\n        DECLARE_UNIFORM_BUFFER_STRUCT_MEMBER_EX( float, InvDeltaSeconds, EShaderPrecisionModifier::Half )\n        DECLARE_UNIFORM_BUFFER_STRUCT_MEMBER_EX( FVector2D, PivotOffset, EShaderPrecisionModifier::Half )\nEND_UNIFORM_BUFFER_STRUCT( FParticleSpriteUniformParameters )\ntypedef TUniformBufferRef&amp;lt;FParticleSpriteUniformParameters&gt; FParticleSpriteUniformBufferRef;\n\nFParticleVertexFactoryBase\n\nFParticleSpriteVertexFactory\n\nvoid FParticleSpriteVertexFactory::InitRHI()\n{\n        InitStreams();\n        SetDeclaration(GetParticleSpriteVertexDeclaration(GetFeatureLevel()).VertexDeclarationRHI);\n}\n\nvirtual void InitDynamicRHI()\n        {\n                FVertexDeclarationElementList Elements;\n                int32        Offset = 0;\n\nFillDeclElements(Elements, Offset);\n\n// Create the vertex declaration for rendering the factory normally.\n                // This is done in InitDynamicRHI instead of InitRHI to allow FParticleSpriteVertexFactory::InitRHI\n                // to rely on it being initialized, since InitDynamicRHI is called before InitRHI.\n                VertexDeclarationRHI = RHICreateVertexDeclaration(Elements);\n        }\n</code></pre> <ol> <li> <p>Need to run with -d3ddebug in order to set debug flag to device. Now I have informative errors descriptions.</p> </li> <li> <p>float3 to float4 conversion is automatic for position elements, so thats why its defined as a float3 in code and float4 in the shader, And of course it's legal to use VET_Float4 for initialization.</p> </li> <li> <p>this Data.PositionComponent = FVertexStreamComponent actually says which field in vertex structure points to which field in the stream. The actual binding of *.usf and code fields are done, for example, in FLocalVertexFactory::InitRHI - attribute index is plays main role.</p> </li> <li> <p>Similar way other attributes initialized in appropriate classes. In FInstancedStaticMeshVertexFactory::InitRHI, for example.</p> </li> </ol> <p>Reference From https://forums.unrealengine.com/showthread.php?15761-How-does-FVertexFactoryInput-works</p> <p>FSkeletalMeshObject:Update -&gt; Calculates new bones</p> <ul> <li> <p>Calls on RenderThread UpdateDynamicData_RenderThread</p> </li> <li> <p>UpdateBoneData() -&gt; RHICreateUniformBuffer and stores locally to Uniform buffer</p> </li> </ul> <p>UpdateData_RenderThread calls CreateRenderThreadResources which calls UpdateRenderThraedResourcesEmitter</p> <ul> <li>FDynamicMeshEmitter::UpdateRenderThreadResourcesEmitter -&gt; CreateUniformBufferImmediate and stores it in the class instance</li> </ul> <p>During FParticleSystemSceneProxy::GetDynamicMeshElements</p> <ul> <li>GetDynamicMeshElementsEmitter-&gt; Allocates Per Frame structure and sets a reference to the FDynamicMeshEmitter::UniformBuffer</li> </ul> <p>HLSL</p> <ul> <li> <p>Row-major addressing</p> </li> <li> <p>In shader code, always row-major</p> </li> <li> <p>When passing data to uniform buffers, you can specify packing order (default is column major)</p> </li> </ul> <p>How To Debug Shaders:</p> <ul> <li>Modify shader compiler compilation flags</li> </ul> C++<pre><code>void FKAbcRigidVertexFactory::ModifyCompilationEnvironment(EShaderPlatform Platform, const FMaterial* Material, FShaderCompilerEnvironment&amp; OutEnvironment) {\n\nFVertexFactory::ModifyCompilationEnvironment(Platform, Material, OutEnvironment);\n\nOutEnvironment.CompilerFlags.Remove(CFLAG_StandardOptimization);\n\nOutEnvironment.CompilerFlags.Add(CFLAG_Debug);\n\nOutEnvironment.CompilerFlags.Add(CFLAG_PreferFlowControl);\n\n}\n</code></pre> <ul> <li> <p>Remove the call to D3DStripShader in D3D11ShaderCompiler.cpp. You have to recompile ShaderCompileWorker Win64 Development to propagate the change. And then add a space or something to common.usf to force shaders to recompile (if you are working on a global shader just edit it a bit).</p> </li> <li> <p>In UE4 we compile the shaders in a different app (ShaderCompileWorker) which allows making use of all your cores. However tools like NSight don't know about this other app and they only hook the compile calls in the main executable. If you open BaseEngine.ini and set bAllowCompilingThroughWorkers=False, any future shaders will be compiled from the main executable. Of course, this will make compiling super slow.</p> </li> </ul> <p>Reference From https://forums.unrealengine.com/showthread.php?6719-Debugging-USF-(Unreal-Shader-Files)</p>"},{"location":"ue4guide/graphics-development/shader-development/tips-tricks/","title":"Fast Custom Shader Iteration Tips","text":""},{"location":"ue4guide/graphics-development/shader-development/tips-tricks/#creating-global-functions","title":"Creating Global Functions","text":"<p>As stated above, the compiler will literally copy-paste the text in a Custom node into a function. So if you have the following:</p> GLSL<pre><code>return 1;\n</code></pre> <p>The compiler will paste it into a CustomExpressionX function. It doesn\u2019t even indent it!</p> GLSL<pre><code>MaterialFloat3 CustomExpression0(FMaterialPixelParameters Parameters)\n{\n  return 1;\n}\n</code></pre> <p>Look what happens if you use this code instead:</p> GLSL<pre><code>return 1;\n}\n\nfloat MyGlobalVariable;\n\nint MyGlobalFunction(int x)\n{\nreturn x;\n\nThe generated HLSL now becomes this:\n\nMaterialFloat3 CustomExpression0(FMaterialPixelParameters Parameters)\n{\nreturn 1;\n}\n\nfloat MyGlobalVariable;\n\nint MyGlobalFunction(int x)\n{\nreturn x;\n}\n</code></pre> <p>As you can see, MyGlobalVariable and MyGlobalFunction() are not contained within a function. This makes them global and means you can use them anywhere.</p> <p>Note: Notice that the final brace is missing in the input code. This is important since the compiler inserts a brace at the end. If you leave in the brace, you will end up with two braces and receive an error.</p> <p>Now let\u2019s use this behavior to create the Gaussian function.</p> <p>Reference From https://www.raywenderlich.com/190254/unreal-engine-4-custom-shaders-tutorial</p>"},{"location":"ue4guide/graphics-development/shader-development/tips-tricks/#define-multiple-functions-inside-ue4s-custom-node","title":"Define Multiple Functions inside UE4's Custom Node","text":"<p>Modifying the Engine's USF files to define custom functions triggers an overhaul shader recompilation of thousands of materials. This is unusable for creative iteration. Also #include-ing files outsides the Engine's Shaders directory crashes the Editor at startup. CustomExpression nodes wrap your code inside CustomExpression#() functions, and that normally prohibits defining your own functions.</p> <p>However, there seems to be a barely documented feature in HLSL that allows defining functions (methods) inside struct definitions. struct definitions can be nested inside functions (like the wrapper CustomExpression#).</p> <p>So in your CustomExpression Code you can do:</p> GLSL<pre><code>struct Functions\n{\n  float3 OrangeBright(float3 c)\n  {\n      return c * float3(1, .7, 0);\n  }\n  float3 Out()\n  {\n    return OrangeBright(InColor);\n  }\n};\nFunctions f;\nreturn f.Out();\n</code></pre> <p>Create and connect an input pin \"InColor\" of float3 on the CustomExpression node. Any Node inputs passed into CustomExpression#(), like InColor above is available inside nested function definitions.</p> <p>The cool part is, this is all happening inside your own effective namespace, not interfering with Unreal's USF files, and the compilation is Fast for iteration. So now, you can start to build a library of custom functions, and more complex shaders. It seems HLSL is prohibiting defining a struct nested inside a struct, so make sure to define your custom structs above and outside struct Functions.</p>"},{"location":"ue4guide/graphics-development/shader-development/tips-tricks/#include-custom-hlsl-file-inside-ue4s-custom-node","title":"Include custom hlsl file inside UE4's Custom Node","text":"<p>Instead of editing intricate code and custom libraries inside the little primitive textbox of CustomExpression, you can edit them in a better external editor with syntax highlighting, code navigation etc, and #include that file. So if you put the above code in a file named Test.hlsl, you can:</p> GLSL<pre><code>#include \"Your Path...\\Test.hlsl\"\nreturn 0;\n// enter spaces here and press enter to retrigger compilation\n</code></pre> <p>The dummy \"return 0;\" is to tell CustomExpression node that this not a single line expression but a full function body. The spaces will be required to signal the CustomExpression textbox that it changed, and pressing enter will compile your externally changed and saved Test.hlsl. Of course, you can split the external file and the dynamic code portion, if you prefer to make quick changes and compiles inside the textbox.</p> <p>Reference From https://forums.unrealengine.com/development-discussion/rendering/113855-extending-custom-hlsl-custom-expressions</p>"},{"location":"ue4guide/graphics-development/shader-development/tips-tricks/#general-tips","title":"General Tips","text":"<ul> <li>In newer UE4 (I'm using 4.18 but I think it was added in 4.17) you can have per-plugin and per-project directories. For example, in my project I have:</li> </ul> Batchfile<pre><code>myprj\\myprj.uproject\nmyprj\\Content\n...\nmyprj\\Shaders\\myshader.ush\n</code></pre> <p>and then in my material I have a custom node with this:</p> GLSL<pre><code>#include \"/Project/myshader.ush\"\nreturn 0;\n</code></pre> <p>If you create the directories while UE4 is running, you need to restart the editor before they get picked up - on editor startup you'll see some log messages about the mapping of virtual shader directories (e.g. from '/Project/' to the full path on disk).</p> <ul> <li> <p>Editing the shader file outside of UE4 is of course a much better dev experience. Also, if you're just tweaking the shader code iteratively, your cycle can go like this:</p> </li> <li> <p>edit code in external editor and save</p> </li> <li> <p>in the material editor, make a dummy change (such as moving a node's position) and click the Apply button</p> </li> </ul> <p>At this point the changes are in effect - i.e. you can see them in the Level Editor w/o even starting PIE (assuming of course that the camera is looking at an object that uses the material, etc. - the point being that this ends up being a relatively fast way to iterate).</p> <p>In the event that your edits cause a shader compilation error, you can't get by with a dummy change in the graph but instead you need to add a space at the end of the text in the custom node box as described in B\u00fcke's post. Still, that doesn't slow you down too much.</p> <ul> <li> <p>See the generated code by looking in Window -&gt; HLSL Code in the Material Editor. This is probably obvious to a lot of people, but it was awhile before I ever even saw it, so I figured I'd mention it. It's super helpful in troubleshooting because you can also see all of the auto-generated boilerplate code that gets included in the final shader.</p> </li> <li> <p>Even if you are not building from source, you can look at the code for built in shaders (assuming you checked the 'engine source' box in the engine options in the Epic Games Launcher) by going to e.g. c:\\Program Files\\Epic Games\\UE_4.18\\Engine\\Shaders - lots of good stuff in there.</p> </li> <li> <p>Some of the boilerplate code (mentioned in #4, above) uses conditional logic to determine what to make available to your Custom shader node. For example, I was working on a postprocessing material and by default I couldn't get access to PostProcessingInput0 in my shader code, so I just added a ShaderTexture:PostProcessInput0 node as an input to my Custom node. Not only did that make that value available to use in the shader (obviously), it triggered the boilerplate code to include some additional helper functions.</p> </li> <li> <p>In addition to whatever input parameters you explicitly pass to your Custom node, it will also receive a 'parameters' parameter that often has a lot of the inputs you might need. Look in the generated HLSL code for 'customexpression' to find your custom node and you'll see something like:</p> </li> </ul> GLSL<pre><code>MaterialFloat4 CustomExpression0(FMaterialPixelParameters Parameters,...)\n{\n#include \"/Project/myshader.ush\"\nreturn 0;\n}\n</code></pre> <p>And then look in Engine/Source/Shaders/Private/MaterialTemplate.ush to see the definition of the struct (FMaterialPixelParameters in this case) - you may find what you need is already provided there (e.g. Parameters.SvPosition.xy).</p> <p>Reference From https://forums.unrealengine.com/development-discussion/rendering/1409859-custom-hlsl-tips</p>"},{"location":"ue4guide/graphics-development/shader-development/tips-tricks/#misc","title":"Misc","text":"<p>Compile out Compute shader instructions with a define. Ex:</p> GLSL<pre><code>float DDY(float Input)\n{\n#if COMPUTESHADER\n        return 0;\n#else\n        return ddy(Input);\n#endif\n}\n</code></pre> <p>Useful functions:</p> GLSL<pre><code>UnitVectorToOctahedron()\n\n// Spherical Harmonic Functions\nstruct FTwoBandSHVectorRGB\nMulSH()\nAddSH()\nDotSH()\nSHBasisFunction3()\nCalcDiffuseTransferSH3()\n</code></pre>"},{"location":"ue4guide/graphics-development/shader-development/tips-tricks/#visual-studio","title":"Visual Studio","text":""},{"location":"ue4guide/graphics-development/shader-development/tips-tricks/#hlsl-tools-extension","title":"HLSL Tools Extension","text":"<p>Provides intellisense support for your project shaders: https://marketplace.visualstudio.com/items?itemName=TimGJones.HLSLToolsforVisualStudio</p>"},{"location":"ue4guide/graphics-development/shader-development/tips-tricks/#enable-visual-studio-syntax-highlighting-in-usf-files","title":"Enable Visual Studio syntax highlighting in .usf files","text":"<ul> <li> <p>Post-VS2017: Add extension support in options directly </p> </li> <li> <p>Pre-VS2017: Import this registery key:</p> </li> </ul> INI<pre><code>Windows Registry Editor Version 5.00\n[HKEY_CURRENT_USER\\\\Software\\\\Microsoft\\\\VisualStudio\\\\14.0_Config\\\\Languages\\\\File Extensions\\\\.usf]\n\"HLSLFile\"=dword:00000001\n@=\"{B2F072B0-ABC1-11D0-9D62-00C04FD9DFD9}\"\n</code></pre>"},{"location":"ue4guide/graphics-development/shader-development/useful-functions/","title":"Brain Dump of Useful Functions","text":"C++<pre><code>/** \n      * Called during the visibility and shadow setup for each primitives with either static or dynamic relevancy, so we can store custom data for the frame that can be reused later. \n      * Keep in mind this can be called in multihread as it's called during the InitViews()\n      * This will only be called if bUseCustomViewData is true in the GetViewRelevance()\n      * @param InView - Current View\n      * @param InViewLODScale - View LOD scale\n      * @param InCustomDataMemStack - MemStack to allocate the custom data\n      * @param InIsStaticRelevant - Tell us if it was called in a static of dynamic relevancy context\n      * @param InVisiblePrimitiveLODMask - Calculated LODMask for visibile primitive in static relevancy\n      * @param InMeshScreenSizeSquared - Computed mesh batch screen size, passed to prevent recalculation\n      */\n     ENGINE_API virtual void* InitViewCustomData(const FSceneView&amp; InView, float InViewLODScale, FMemStackBase&amp; InCustomDataMemStack, bool InIsStaticRelevant = false, const struct FLODMask* InVisiblePrimitiveLODMask = nullptr, float InMeshScreenSizeSquared = -1.0f) { return nullptr; }\n\n/**\n      * Called during post visibility and shadow setup, just before the frame is rendered. It can be used to update custom data that had a dependency between them.\n      * Keep in mind this can be called in multihread.\n      * This will only be called on primitive that added view custom data during the InitViewCustomData.\n      * @param InView - Current View\n      * @param InViewCustomData - Custom data to update\n      */\n     ENGINE_API virtual void PostInitViewCustomData(const FSceneView&amp; InView, void* InViewCustomData) { }\n</code></pre>"},{"location":"ue4guide/graphics-development/shader-development/useful-functions/#uniform-expressions","title":"Uniform expressions","text":"C++<pre><code>int32 UMaterialExpressionConstant::Compile(class FMaterialCompiler* Compiler, int32 OutputIndex)\n{\n     return Compiler-&gt;Constant(R);\n\n     virtual int32 FHLSLMaterialTranslator::Constant(float X) override\n          {\n               return AddUniformExpression(new FMaterialUniformExpressionConstant(FLinearColor(X,X,X,X),MCT_Float),MCT_Float,TEXT(\"%0.8f\"),X);\n          }\n\n\nint32 UMaterialExpressionTime::Compile(class FMaterialCompiler* Compiler, int32 OutputIndex)\n     return bIgnorePause ? Compiler-&gt;RealTime(bOverride_Period, Period) : Compiler-&gt;GameTime(bOverride_Period, Period);\n\n     virtual int32 FHLSLMaterialTranslator::GameTime(bool bPeriodic, float Period) override\n     return AddUniformExpression(\n                    new FMaterialUniformExpressionFmod(\n                         new FMaterialUniformExpressionTime(),\n                         new FMaterialUniformExpressionConstant(FLinearColor(Period, Period, Period, Period), MCT_Float)\n                         ),\n                    MCT_Float, TEXT(\"\")\n                    );\n</code></pre>"},{"location":"ue4guide/graphics-development/shader-development/useful-functions/#implement-them-as","title":"Implement them as","text":"C++<pre><code>**\n * Represents an expression which only varies with uniform inputs.\n */\nclass FMaterialUniformExpression : public FRefCountedObject\n{\npublic:\n\n     virtual ~FMaterialUniformExpression() {}\n\n     virtual FMaterialUniformExpressionType* GetType() const = 0;\n     virtual void Serialize(FArchive&amp; Ar) = 0;\n     virtual void GetNumberValue(const struct FMaterialRenderContext&amp; Context,FLinearColor&amp; OutValue) const {}\n     virtual class FMaterialUniformExpressionTexture* GetTextureUniformExpression() { return nullptr; }\n     virtual class FMaterialUniformExpressionExternalTexture* GetExternalTextureUniformExpression() { return nullptr; }\n     virtual bool IsConstant() const { return false; }\n     virtual bool IsChangingPerFrame() const { return false; }\n     virtual bool IsIdentical(const FMaterialUniformExpression* OtherExpression) const { return false; }\n};\n\n */\nclass FMaterialUniformExpressionRealTime: public FMaterialUniformExpression\n{\n     DECLARE_MATERIALUNIFORMEXPRESSION_TYPE(FMaterialUniformExpressionRealTime);\npublic:\n\n     // FMaterialUniformExpression interface.\n     virtual void Serialize(FArchive&amp; Ar)\n     {\n     }\n     virtual void GetNumberValue(const FMaterialRenderContext&amp; Context,FLinearColor&amp; OutValue) const\n     {\n          OutValue.R = Context.RealTime;\n          OutValue.G = Context.RealTime;\n          OutValue.B = Context.RealTime;\n          OutValue.A = Context.RealTime;\n     }\n     virtual bool IsConstant() const\n     {\n          return false;\n     }\n     virtual bool IsChangingPerFrame() const { return true; }\n     virtual bool IsIdentical(const FMaterialUniformExpression* OtherExpression) const\n     {\n          return GetType() == OtherExpression-&gt;GetType();\n     }\n};\n\n\n\n\n/**\n */\nclass FMaterialUniformExpressionLength: public FMaterialUniformExpression\n{\n     DECLARE_MATERIALUNIFORMEXPRESSION_TYPE(FMaterialUniformExpressionLength);\npublic:\n\n     FMaterialUniformExpressionLength() : ValueType(MCT_Float) {}\n     FMaterialUniformExpressionLength(FMaterialUniformExpression* InX, uint32 InValueType = MCT_Float):\n          X(InX),\n          ValueType(InValueType)\n     {}\n\n     // FMaterialUniformExpression interface.\n     virtual void Serialize(FArchive&amp; Ar)\n     {\n          Ar.UsingCustomVersion(FRenderingObjectVersion::GUID);\n          Ar &lt;&lt; X;\n\n          if (Ar.CustomVer(FRenderingObjectVersion::GUID) &gt;= FRenderingObjectVersion::TypeHandlingForMaterialSqrtNodes)\n          {\n               Ar &lt;&lt; ValueType;\n          }\n     }\n     virtual void GetNumberValue(const FMaterialRenderContext&amp; Context,FLinearColor&amp; OutValue) const\n     {\n          FLinearColor ValueX = FLinearColor::Black;\n          X-&gt;GetNumberValue(Context,ValueX);\n\n          check(ValueType &amp; MCT_Float);\n          float LengthSq = ValueX.R * ValueX.R;\n          LengthSq += (ValueType &gt;= MCT_Float2) ? ValueX.G * ValueX.G : 0;\n          LengthSq += (ValueType &gt;= MCT_Float3) ? ValueX.B * ValueX.B : 0;\n          LengthSq += (ValueType &gt;= MCT_Float4) ? ValueX.A * ValueX.A : 0;\n\n          OutValue.R = OutValue.G = OutValue.B = OutValue.A = FMath::Sqrt(LengthSq);\n     }\n     virtual bool IsConstant() const\n     {\n          return X-&gt;IsConstant();\n     }\n     virtual bool IsChangingPerFrame() const\n     {\n          return X-&gt;IsChangingPerFrame();\n     }\n     virtual bool IsIdentical(const FMaterialUniformExpression* OtherExpression) const\n     {\n          if (GetType() != OtherExpression-&gt;GetType())\n          {\n               return false;\n          }\n          FMaterialUniformExpressionLength* OtherSqrt = (FMaterialUniformExpressionLength*)OtherExpression;\n          return X-&gt;IsIdentical(OtherSqrt-&gt;X) &amp;&amp; ValueType == OtherSqrt-&gt;ValueType;\n     }\n\nprivate:\n     TRefCountPtr&lt;FMaterialUniformExpression&gt; X;\n     uint32 ValueType;\n};\n\n\nclass FMaterialUniformExpressionScalarParameter: public FMaterialUniformExpression\n</code></pre>"},{"location":"ue4guide/graphics-development/shader-development/shader-debugging/debugging-shaders/","title":"Commands for toggling debug &amp; perf markers","text":"Bash<pre><code>ToggleDrawEvents: Emits helpful draw event markers for use with GPU Capture/PIX\nr.ShowMaterialDrawEvents: Shows material around each drawcall in profilegpu\nr.EmitMeshDrawEvents\nr.RHISetGPUCaptureOptions\nr.ProfileGPUSort 2, ProfileGPU\nr.ProfileGPU.Pattern\nr.ProfileGPU.ShowLeafEvents\nr.ProfileGPU.ShowTransitions\nr.ProfileGPU.PrintAssetSummary\nr.ProfileGPU.AssetSummaryCallOuts\nr.ProfileGPU.Sort\n\nr.RHICmdUseThread=0\nr.RHICmdBypass=1\nr.RHICmdUseParallelAlgorithms=1\nToggleRHIThread\nr.ParallelTranslucency\n</code></pre>"},{"location":"ue4guide/graphics-development/shader-development/shader-debugging/debugging-shaders/#commands-for-debug-logging","title":"Commands for debug logging","text":"Bash<pre><code>r.D3DDumpAMDCodeXLFile\nr.D3DDumpD3DAsm\n</code></pre>"},{"location":"ue4guide/graphics-development/shader-development/shader-debugging/debugging-shaders/#general","title":"General","text":"Bash<pre><code>; Uncomment to get detailed logs on shader compiles and the opportunity to retry on errors\nr.ShaderDevelopmentMode=1\nr.CompileShadersForDevelopment=1\nr.MaterialEditor.UseDevShaders=1\n</code></pre> INI<pre><code>[DevOptions.Shaders]\n; See FShaderCompilingManager for documentation on what these do\nbAllowCompilingThroughWorkers=True\nbAllowAsynchronousShaderCompiling=True\n; Make sure we don't starve loading threads\nNumUnusedShaderCompilingThreads=3\n; Make sure the game has enough cores available to maintain reasonable performance\nNumUnusedShaderCompilingThreadsDuringGame=4\n; Batching multiple jobs to reduce file overhead, but not so many that latency of blocking compiles is hurt\nMaxShaderJobBatchSize=10\nbPromptToRetryFailedShaderCompiles=True\nbLogJobCompletionTimes=False\n; Only using 10ms of game thread time per frame to process async shader maps\nProcessGameThreadTargetTime=.01\n;For XboxOne PIX support\nShaderPDBRoot=D:\\DirectoryOfChoice\n</code></pre>"},{"location":"ue4guide/graphics-development/shader-development/shader-debugging/debugging-shaders/#sanity-checking-commands","title":"Sanity Checking Commands","text":"Bash<pre><code>r.ShowShaderCompilerWarnings=1\nr.D3DCheckShadersForDouble=1\n</code></pre>"},{"location":"ue4guide/graphics-development/shader-development/shader-debugging/debugging-shaders/#debug-logging","title":"Debug Logging","text":"Bash<pre><code>; Uncomment to dump shaders in the Saved folder\n; Warning: leaving this on for a while will fill your hard drive with many small files and folders\nr.DumpShaderDebugInfo=1\n; When this is enabled, dumped shader paths will get collapsed (in the cases where paths are longer than the OS's max)\nr.DumpShaderDebugShortNames=1\n; When this is enabled, when dumping shaders an additional file to use with ShaderCompilerWorker -direct mode will be generated\nr.DumpShaderDebugWorkerCommandLine=1\n</code></pre>"},{"location":"ue4guide/graphics-development/shader-development/shader-debugging/debugging-shaders/#add-these-when-running-with-a-graphical-debugger-like-nsight-but-not-when-profiling","title":"Add these when running with a graphical debugger like NSight (but not when profiling):","text":"Bash<pre><code>r.Shaders.Optimize=0\nr.Shaders.KeepDebugInfo=1\nr.ShowShaderCompilerWarnings=1\nr.XGEShaderCompile=0\nr.D3D.RemoveUnusedInterpolators=0\nr.GraphicsAdapter=0\nr.D3D12GraphicsAdapter=0\n; Uncomment to disable engine and app registration, e.g. to disable GPU driver optimizations during debugging and development\n; (Setting r.ShaderDevelopmentMode=1 will also disable engine and app registration)\n;r.DisableEngineAndAppRegistration=1\n; Uncomment to enable frame markers in D3D12 for the Radeon GPU Profiler (RGP)\n; (Vulkan will auto-enable frame markers for RGP, but in D3D12, they have to be enabled manually for now.)\n;D3D12.EmitRgpFrameMarkers=1\n;r.AsyncPipelineCompile=0\nToggleDrawEvents: Emits helpful draw event markers for use with GPU Capture/PIX\nr.ShowMaterialDrawEvents: Shows material around each drawcall in profilegpu\nr.EmitMeshDrawEvents=1\nr.RHISetGPUCaptureOptions=1\nr.RHICmdUseThread=0\nr.RHICmdBypass=1\nbb.IsGPUProfiling=1 ; Prevents render heartbeat thread from reporting a deadlock if we're in a debugger and paused\nbb.perf.SetShaderCompileMode 0 ; This is equivalent to at runtime doing adding this in your ini\n                               ; [DevOptions.Shaders]\n                               ; bAllowCompilingThroughWorkers=False\n                               ; bAllowAsynchronousShaderCompiling=False\n</code></pre>"},{"location":"ue4guide/graphics-development/shader-development/shader-debugging/debugging-shaders/#guidance-tips-on-how-to-debug-ue4-usf-shaders","title":"Guidance Tips on how to debug UE4 USF shaders","text":"<p>A lot of these are now configurable through environment flags/switches:</p> <ul> <li>D3D11ShaderCompiler.cpp: Set DEBUG_SHADERS to 1.</li> <li>D3D11ShaderCompiler.cpp: Force TranslateCompilerFlagD3D11 to always return D3D10_SHADER_DEBUG | D3D10_SHADER_SKIP_OPTIMIZATION</li> <li>D3D11ShaderCompiler.cpp: Force the fxc command line to contain \"/Gfp /Zi /Od\", and comment out the usage of /O1 and /O3</li> <li>D3D11ShaderCompiler.cpp: Remove the \"Strip shader reflection\" step in CompileD3DShader()</li> <li>ShaderCompiler.cpp: Force bAllowCompilingThroughWorkers and bAllowAsynchronousShaderCompiling to be false</li> <li>Sacrifice a chicken to the dark lords of GPU debugging</li> <li>Delete any .shaderbin files that you want to be rebuilt</li> <li>Delete the entire contents of your DerivedDataCache folders (in both Engine and your game-specific subdirectory)</li> <li>Start Unreal Editor. It should sit on the splash screen for around 45 minutes while it rebuilds the shaders, rather than going directly into the editor and showing the \"Compiling Shaders\" notification in the lower-right corner of your screen.</li> <li>Suggestions on things to do while waiting for the shaders to rebuild: Watch your favorite TV show, eat a sandwich, enjoy a leisurely glass of soda, annoy the QA department, spin around in a circle for 45 minutes</li> <li>Fire up GPU PerfStudio 2 and run UE4</li> <li>Rejoice at seeing the source code for your shaders show up in GPU PerfStudio 2.</li> </ul> <p>https://udn.unrealengine.com/questions/166316/dx11-hlsl-shader-debugging.html https://www.unrealengine.com/blog/debugging-the-shader-compiling-process https://wiki.unrealengine.com/Debugging_Renderer_Code https://forums.unrealengine.com/showthread.php?6719-Debugging-USF-(Unreal-Shader-Files)</p>"},{"location":"ue4guide/graphics-development/shader-development/shader-debugging/shader-debuggers-tools/","title":"RenderDoc","text":""},{"location":"ue4guide/graphics-development/shader-development/shader-debugging/shader-debuggers-tools/#custom-visualization-shader-to-display-stencil-values","title":"Custom visualization shader to display stencil values","text":"GLSL<pre><code>uint RENDERDOC_TextureType; // hlsl\n// selected MSAA sample or -numSamples for resolve. See docs\nint RENDERDOC_SelectedSample;\n\nTexture2DArray&lt;uint2&gt; texDisplayTexStencilArray : register(t5);\nTexture2DMSArray&lt;uint2&gt; texDisplayTexStencilMSArray : register(t7);\nuint4 RENDERDOC_TexDim; // xyz == width, height, depth. w == # mips Texture2DArray&lt;uint2&gt; texDisplayTexStencilArray : register(t5);\n\n#define KL_GOLDEN_RATIO_CONJUGATE   0.618033988749895\n\n\nfloat3 hsv2rgb(float3 c)\n{\n  float4 K = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  float3 p = abs(frac(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * lerp(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n\nfloat3 GetGoldenRatioColor(const int colorIndex, const float3 baseHSVColor, const float hueRange) {\n  float hue = (baseHSVColor.r + frac(float(colorIndex) * KL_GOLDEN_RATIO_CONJUGATE) * hueRange) % 360.0f;\n  return hsv2rgb(float3(hue/360.0f, baseHSVColor.g, baseHSVColor.b));\n}\n\nfloat3 GetGoldenRatioColor(const int colorIndex){\n  return GetGoldenRatioColor(colorIndex, float3(0.0, 0.5, 0.99), 360.0);\n}\n\nfloat4 main(float4 pos : SV_Position, float4 uv : TEXCOORD0) : SV_Target0 {\n  float4 Colors[8] =\n  {\n    float4(116/255.0,187/255.0,134/255.0, 1.0),\n    float4(153/255.0,101/255.0,197/255.0, 1.0),\n    float4(193/255.0,81/255.0,58/255.0, 1.0),\n    float4(76/255.0,63/255.0,61/255.0, 1.0),\n    float4(153/255.0,173/255.0,189/255.0, 1.0),\n    float4(182/255.0,154/255.0,75/255.0, 1.0),\n    float4(144/255.0,209/255.0,73/255.0, 1.0),\n    float4(186/255.0,82/255.0,131/255.0, 1.0)\n  };\n\n  uint stencil = 0;\n  if (RENDERDOC_TextureType == 5) {\n    stencil = texDisplayTexStencilArray.Load(int4(uv.xy * RENDERDOC_TexDim.xy, 0, 0)).g;\n  }\n  else if (RENDERDOC_TextureType == 7) {\n    stencil = texDisplayTexStencilMSArray.Load(int3(uv.xy * RENDERDOC_TexDim.xy, 0), RENDERDOC_SelectedSample).g;\n  }\n  stencil = stencil &amp; 0x7;\n\n  float4 ret = float4(0,0,0,1);\n\n  //ret = Colors[(stencil+4) % 8];\n  ret = float4(GetGoldenRatioColor(stencil, float3(0,0.5,0.99), 360), 1.0);\n\n  return ret;\n}\n</code></pre>"},{"location":"ue4guide/graphics-development/shader-development/shader-debugging/shader-debuggers-tools/#nvidia-insight","title":"Nvidia Insight","text":""},{"location":"ue4guide/graphics-development/shader-development/shader-debugging/shader-debuggers-tools/#installation","title":"Installation","text":"<p>For the full on debug experience (shader GPU debugging), you'll need a target &amp; host machine because the debugger's going to halt your GPU which means no OS updates.</p> <p>High-level installation steps:</p> <ul> <li> <p>Install the latest nVidia drivers on the target machine</p> </li> <li> <p>Install nVidia Insight on your target &amp; host machine</p> </li> <li> <p>Ensure the requisite firewall exceptions have been set on both machines</p> </li> <li> <p>NSight Monitor needs to have an exception on the host &amp; target</p> </li> <li> <p>Visual Studio needs to have an exception on the host</p> </li> </ul> <p>Download and detailed configuration instructions: http://developer.nvidia.com/nvidia-nsight-visual-studio-edition (You'll need to register for a free dev account).</p>"},{"location":"ue4guide/graphics-development/shader-development/shader-debugging/shader-debuggers-tools/#debug-the-unity-project","title":"Debug the Unity Project","text":"<ul> <li> <p>Open up the Unity solution in visual studio and configure the remote debugging options for nvidia nsight.</p> </li> <li> <p>Unity can't use msbuild to generate the solution so you have to build your project inside of Unity (so do a standalone Development build with script debugging to a Debug/ folder)</p> </li> <li> <p>Make sure you set this as the working directory for Nvidia's Nsight profiler and make sure to add this directory to the list of directories to synchronize</p> </li> <li> <p>Select the Launch External Program option and set the path to your Unity project</p> </li> <li> <p>Problem: For some reason, when the file gets sync'ed over, the app bitches when it gets launched on the target machine, saying it can't find the [project]_Data folder. Still investigating this, but for now, workaround is to just manually copy over the project directory to the target machine.  (Default: C:\\Users\\[current-user-on-target]\\AppData\\Roaming\\NVIDIA Corporation\\Nsight\\Monitor\\Mirror\\[hostname]\\[host-outdir] so for example</p> </li> </ul> <p></p> <p>All the Paths you specify are relative to the target machine's synchronization directory (the default is specified above). However, if you select \"Don't synchronize\", all of the paths will be relative to the machine</p>"},{"location":"ue4guide/graphics-development/shader-development/shader-debugging/shader-debuggers-tools/#profiling-tips","title":"Profiling Tips","text":"<ul> <li> <p>HUD can be activated in real-time by pressing CTRL-Z</p> </li> <li> <p>Will show you in real-time performance counters &amp; graphs overlayed on your Unity Window</p> </li> <li> <p>Problem: In full screen mode, the Unity Oculus app won't release the hardware cursor to allow you to click around the Nvidia Nsight graphs. Just alt-tab in and out of the app and that should fix your problem.</p> </li> <li> <p>CTRL+D will give you a depth complexity test. Test to see if you're getting a lot of overdraw =&gt; do better culling, render front to back, z-only pass</p> </li> <li> <p>CTRL+M will give you minimum geometry</p> </li> <li> <p>Frame Capture: Allows you to capture an entire frame's rendering</p> </li> <li> <p>Can scrub through the timeline to see the drawcalls build on</p> </li> <li> <p>Hold CTRL+SHIFT key to get an even more zoomed in view around mouse cursor</p> </li> <li> <p>Hold SHIFT to zoom around a render target.</p> </li> <li> <p>Right click to re-center everything</p> </li> <li> <p>Shader Debugger: Can set breakpoints in your shader, step-in/over functions, add variables to watch. Full on visual studio editing for your shaders</p> </li> <li> <p>Can also dynamically modify your shaders and A/B test your shaders</p> </li> <li> <p>Graphics Focus picker allows you to visually see the pixel/vertices that have changed. Can also pick the pixel you want to break on</p> </li> <li> <p>Can also pick a pixel to show the entire pixel history to see the different values of the pixel</p> </li> <li> <p>Breakpoint conditionals evaluated on GPU so it's at full speed</p> </li> </ul>"},{"location":"ue4guide/graphics-development/shader-development/shader-debugging/shader-debuggers-tools/#launch-project-with-nsight-hud","title":"Launch Project with NSight HUD","text":"<p>Commandline: <code>C:\\\\Program Files (x86)\\\\NVIDIA Corporation\\\\Nsight Visual Studio Edition 5.3\\\\Monitor\\\\Common\\\\Nvda.Launcher.exe\" \"%1\"</code></p> <p>Ex: <code>C:\\\\Program Files (x86)\\\\NVIDIA Corporation\\\\Nsight Visual Studio Edition 5.3\\\\Monitor\\\\Common\\\\Nvda.Launcher.exe\" \"C:\\\\UE4Editor.exe\" BBR.uproject -log</code></p>"},{"location":"ue4guide/graphics-development/shader-development/shader-debugging/shader-debuggers-tools/#nsight--visual-studio","title":"Nsight + Visual Studio","text":""},{"location":"ue4guide/graphics-development/shader-development/shader-debugging/shader-debuggers-tools/#debug-an-exe-not-part-of-vs-solution","title":"Debug an Exe Not Part of VS Solution","text":"<p>Sometimes, you may want to debug an executable that is not part of a Visual Studio project. It may be an executable you created outside of Visual Studio or an executable you received from someone else.</p> <p>The usual answer to this problem is to start the executable outside of Visual Studio and attach to it using the Visual Studio debugger. For more information, see Attach to Running Processes with the Visual Studio Debugger</p> <p>Attaching to an application requires some manual steps, so it takes a few seconds. This slight delay means that attaching will not help if you are trying to debug a problem that occurs during startup. Also, if you are debugging a program that does not wait for user input and finishes quickly, you may not have time to attach to it. If you have Visual C++ installed, you can create an EXE project for such a program.</p> <p>To create an EXE project for an existing executable</p> <ol> <li> <p>On the File menu, click Open and select Project.</p> </li> <li> <p>In the Open Project dialog box, click the drop-down list next to the File name box, and select All Project Files.</p> </li> <li> <p>Locate the executable, and click OK.</p> </li> </ol> <p>This creates a temporary solution that contains the executable.</p> <p>Reference From http://msdn.microsoft.com/en-us/library/0bxe8ytt.aspx</p>"},{"location":"ue4guide/graphics-development/shader-development/shader-debugging/shader-debuggers-tools/#debugging-external-applications","title":"Debugging External Applications","text":"<p>NVIDIA\u00ae Nsight\u2122 Development Platform, Visual Studio Edition 4.2 User Guide</p> <p>Early versions of NVIDIA Nsight were only able to debug projects built in Visual C++. However, with NVIDIA Nsight 4.2, CUDA and graphics debugging are now supported for both C++ and C# projects.</p> <p>If you would like to use NVIDIA Nsight to debug an application that is built in an environment other than C++ or C#, use the tutorial outlined below.</p> <p>Using NVIDIA Nsight Debugging with Other Project Types</p> <ol> <li> <p>In Visual Studio, create a \"dummy\" project by going to File &gt; New &gt; Project.</p> </li> <li> <p>On the node for Visual C++ templates, select Empty Project.</p> </li> </ol> <p>Enter the name for your project and click OK.</p> <p></p> <ol> <li>Select the project's Nsight User Properties to edit the default settings. (As an alternative, you can also go to the Project menu &gt; Nsight User Properties.)</li> </ol> <p></p> <ol> <li>Select Launch external program, and enter the path to the external program for the application that is to be debugged.</li> </ol> <p></p> <ol> <li>Configure any other launch options or file synchronization settings which may be necessary for your particular debugging environment.</li> </ol> <p>(For assistance, refer to Host Basics and Synchronization.)</p> <ol> <li> <p>Click OK to save your settings.</p> </li> <li> <p>You can now begin debugging your application with NVIDIA Nsight.</p> </li> </ol> <p>To do so, go to the Nsight menu or right-click on your project, then select the appropriate activity (Start CUDA Debugging, Start Graphics Debugging, etc.).</p> <p>Reference From http://docs.nvidia.com/gameworks/content/developertools/desktop/debug_external_applications.htm</p>"},{"location":"ue4guide/graphics-development/shader-development/shader-debugging/shader-validation/","title":"Debugging Shader Compilation Process","text":"<p>https://www.unrealengine.com/en-US/blog/debugging-the-shader-compiling-process</p>"},{"location":"ue4guide/graphics-development/shader-development/shader-debugging/shader-validation/#debugging-validation","title":"Debugging Validation","text":"<ul> <li> <p>Pass -d3ddebug to turn on d3d debug validation layer   FMeshDrawCommand:</p> </li> <li> <p>FMeshDrawCommand::DebugData is a debug data struct</p> </li> <li> <p>WANTS_DRAW_MESH_EVENTS (RHI_COMMAND_LIST_DEBUG_TRACES || (WITH_PROFILEGPU &amp;&amp; PLATFORM_SUPPORTS_DRAW_MESH_EVENTS))</p> </li> <li> <p>VALIDATE_UNIFORM_BUFFER_LAYOUT_LIFETIME</p> </li> <li> <p>Whether to assert in cases where the layout is released before uniform buffers created with that layout</p> </li> <li> <p>VALIDATE_UNIFORM_BUFFER_LIFETIME 0</p> </li> <li> <p>Whether to assert when a uniform buffer is being deleted while still referenced by a mesh draw command</p> </li> <li>Enabling this requires -norhithread to work correctly since FRHIResource lifetime is managed by both the RT and RHIThread</li> </ul> Command Desc r.MeshDrawCommands.DynamicInstancing Whether to dynamically combine multiple compatible visible Mesh Draw Commands into one instanced draw on vertex factories that support it. r.MeshDrawCommands.LogDynamicInstancingStats Whether to log dynamic instancing stats on the next frame r.MeshDrawCommands.LogMeshDrawCommandMemoryStats Whether to log mesh draw command memory stats on the next frame r.GPUScene.UploadEveryFrame Forces GPU Scene to be fully updated every frame, which is useful for diagnosing issues with stale GPU Scene data. r.GPUScene.ValidatePrimitiveBuffer This downloads GPU Scene to the CPU and validates its contents against primitive uniform buffers. r.RHICmdUseThread To Use a separate thread for RHICmdList r.RHIThread.Enable To Disable RHI Thread r.RHICmdBypass Set to 1 to disable r.RHICmdUseParallelAlgorithms True to use parallel algorithms. Ignored if r.RHICmdBypass is 1. r.MeshDrawCommands.ParallelPassSetup Whether to setup mesh draw command pass in parallel. r.RHICmdBasePassDeferredContexts Disable the parallel tasks for base pass draw dispatch, causing those to happen on the RenderingThread. r.MeshDrawCommands.UseCachedCommands Whether to render from cached mesh draw commands (on vertex factories that support it), or to generate draw commands every frame. r.RDG.ImmediateMode Toggle get render graph executing passes as they get created to easily debug crashes caused by pass wiring logic. r.RDG.EmitWarnings Toggle render graph emitting warnings about inefficiencies. r.GPUScene.ValidatePrimitiveBuffer Readback the GPU primitive data and assert if it doesn't match the RT primitive data. r.GPUScene.UploadEveryFrame Upload the entire scene's primitive data every frame"},{"location":"ue4guide/misc-ue4-editor/content-browser-search-syntax/","title":"Content Browser Advanced Search Syntax","text":"<p>https://docs.unrealengine.com/en-US/Engine/Content/Browser/AdvancedSearchSyntax/index.html</p>"},{"location":"ue4guide/misc-ue4-editor/content-browser-search-syntax/#examples","title":"Examples","text":"<ul> <li> <p><code>ParentClass=='foo'</code> which is often what you want (so it doesn't matter how nested the BP is).  You can see what tags are available in column/detail view (when filtered to a specific type) or in the tooltip of an asset</p> </li> <li> <p><code>NativeParentClass=</code></p> </li> <li> <p><code>Triangles &gt;=10500 &amp;&amp; Type == Skeletal &amp;&amp; CollisionPrims != 0</code></p> </li> </ul>"},{"location":"ue4guide/misc-ue4-editor/content-browser-search-syntax/#details","title":"Details","text":""},{"location":"ue4guide/misc-ue4-editor/content-browser-search-syntax/#syntax-reference","title":"Syntax Reference","text":"<p>Reference: https://drive.google.com/file/d/0B6NVuVhmRCE-VHhMQ1dycXlBMWs/view</p> <p>The following table shows the available operators: Operator (Type) Syntax Description Example Equal (Binary) == = : Tests the value returned for the given key to see if it is equal to the given value.</p> <p>Name==Blast Name=\u201dBlast\u201d Name:Bla...</p> <p>NotEqual (Binary) != !: Tests the value returned for the given key to see if it is not equal to the given value.</p> <p>Name!=Blast Name!:\u201dBlast\u201d</p> <p>Less (Binary) &lt; Tests the value returned for the given key to see if it is smaller than the given value (numeric types only).</p> <p>Triangles&lt;92</p> <p>LessOrEqual (Binary) &lt;= &lt;:</p> <p>Tests the value returned for the given key to see if it is smaller than, or equal to, the given value (numeric types only).</p> <p>Triangles&lt;=92 Triangles&lt;:92</p> <p>Greater (Binary) &gt; Tests the value returned for the given key to see if it is larger than the given value (numeric types only).</p> <p>Triangles&gt;92</p> <p>GreaterOrEqual (Binary) &gt;=</p> <p>:</p> <p>Tests the value returned for the given key to see if it is larger than, or equal to, the given value (numeric types only).</p> <p>Triangles&gt;=92 Triangles&gt;:92</p> <p>Or (Binary) OR || | Tests two operands and returns true if either evaluate to true.</p> <p>Blast OR Type:Blueprint !Blast || Path:Testing Name:\u201dBlast\u201d | Path:Testing...</p> <p>And (Binary) AND &amp;&amp; &amp; Tests two operands and returns true if both evaluate to true.</p> <p>Blast AND Type:Blueprint !Blast &amp;&amp; Path:Testing Name:\u201dBlast\u201d &amp; Path:Testing...</p> <p>Not (Pre-Unary) NOT ! Tests the operand that follows it, and then returns the inverted result.</p> <p>NOT Blast !\u201dBlast\u201d</p> <p>TextCmpInvert (Pre-Unary) - Modifies a text operand so that it will return the inverted result of the operation it is involved in.</p> <p>-Blast -\u201dBlast\u201d</p> <p>TextCmpExact (Pre-Unary) + Modifies a text operand so that it will perform an</p> <p>\u201cexact\u201d text comparison.</p> <p>+Blast +\u201dBlast\u201d TextCmpAnchor (Pre-Unary) ... Modifies a text operand so that it will perform an ...ast</p> <p>\u201cends with\u201d text comparison. ...\u201dast\u201d</p> <p>TextCmpAnchor (Post-Unary) ... Modifies a text operand so that it will perform a</p> <p>\u201cstarts with\u201d text comparison.</p> <p>Bla... \u201cBla\u201d...</p> <p>Special Keys Most keys that are available for searching come from the asset metadata that was extracted from the asset registry, however there are several special keys that exist for all asset types. These special keys only support the Equal or NotEqual comparison operators. Key Alias Description Name Tests against the asset name. Path Tests against the asset path. Class Type Tests against the asset class. Collection Tag Tests against the names of any collections that contain the asset.</p>"},{"location":"ue4guide/misc-ue4-editor/lighting/","title":"3 classes of lights:","text":"<ol> <li> <p>Static: Precomputed lighting &amp; shadowing stored in the lightmap for static objects.</p> </li> <li> <p>Stationary: Lights can't move but color &amp; brightness can change.</p> </li> </ol> <ul> <li> <p>Indirect is baked through Lightmass (and always used even if the Light visibility is off; can control though through IndirectLightingIntensity)</p> </li> <li> <p>Direct lighting is calculated as normal using deferred shading</p> </li> <li> <p>Static Object Shadowing is stored in distance field shadow maps (crisp even at low resolution)</p> </li> <li> <p>Dynamic Object Shadowing uses two dynamic lights: one to create distance field shadows for casting shadows from dynamic objects to static objects, the other to cast shadows from world onto objects</p> </li> <li> <p>Directional Stationary Lights: Special case that uses Cascaded Shadow Maps as well as static shadows. Has ability to define a smaller cascade and blend between CSM to Distance Field Shadows</p> </li> </ul> <ol> <li>Movable: Fully dynamic lights</li> </ol>"},{"location":"ue4guide/misc-ue4-editor/lighting/#sky-lights","title":"Sky Lights","text":"<ul> <li> <p>Basically a cubemap capture of everything in the scene farther from SkyDistanceThreshold from the light position</p> </li> <li> <p>Static at runtime but code looks as if it calculates it every frame</p> </li> </ul> C++<pre><code>  GameEngine.cpp: USkyLightComponent::UpdateSkyCaptureContents(Context.World());)\n</code></pre> <ul> <li>Applies bent normal ambient occlusion for local shadowing</li> </ul>"},{"location":"ue4guide/misc-ue4-editor/lighting/#ambient-cube","title":"Ambient Cube","text":"<ul> <li> <p>Cubemap IBL; doesn't use ambient occlusion baked data</p> </li> <li> <p>Not really sure how this is any different than Sky Lights?</p> </li> </ul>"},{"location":"ue4guide/misc-ue4-editor/lighting/#lightmass","title":"Lightmass","text":"<ul> <li> <p>GI Solver for baking lighting</p> </li> <li> <p>Ambient Occlusion is turned off by default in lightmass. Turn it on in the World Settings</p> </li> <li> <p>AO is baked into the resulting lightmap</p> </li> <li> <p>Generates Bent-normal data for use with Stationary Skylights</p> </li> <li> <p>Generates Distance Shadowmaps for Stationary lights</p> </li> <li> <p>Static Lights: Supports Area lights, Translucent Shadows</p> </li> <li> <p>Lightmass Importance Volume controls photon distribution. Movable objects outside of Lightmass Importance Volume get zero indirect. Static geo gets one bounce indirect</p> </li> <li> <p>Static Lighting Level Scale: Set physical scale of the world for baking (adjusts heuristics for photon firing)</p> </li> </ul>"},{"location":"ue4guide/misc-ue4-editor/lighting/#reflection-capture","title":"Reflection Capture","text":"<ul> <li> <p>Reflection Captures are cubemaps for providing indirect specular</p> </li> <li> <p>ReflectionCaptureActors update dynamically for editing but are static at runtime</p> </li> <li> <p>Specular Convolution on the environment map is used for different roughness materials</p> </li> <li> <p>Pure reflection capture on rough surfaces results in overbrightness b/c lack of local occlusion. As a workaround, the lightmap data is interpolated with the reflection capture based on material roughness. B/c of this,</p> </li> </ul> <p>Static light types should not be used together with the Reflection Environment as they will put direct lighting in the lightmap.</p>"},{"location":"ue4guide/misc-ue4-editor/lighting/#stationary-lights--shadowing","title":"Stationary Lights &amp; Shadowing:","text":"<p>Stationary lights generate two shadow maps per movable object. Can be a perfect hit if movable object is large or there are lots of them.</p> <p>Any movable meshes (Mobility == Movable or InterpActor / KActor / SkeletalMeshActor) when combined with stationary lights have to use a special kind of shadow called a Preshadow. This handles the static environment casting dynamic shadows onto the dynamic object. The entire environment between the movable object and the stationary light will have to be rendered into the Preshadow, but only when the movable object actually moves enough to require an update.</p> <p>Some general info on stationary lights here, doesn't go into detail on Preshadows, but they are what allows the static and lightmapped arches to cast shadows on the movable spheres.https://rocket.unrealengine.com/docs/ue4/INT/Engine/Subsystems/Rendering/LightingAndShadows/Precomputed/StationaryLights/index.html#directshadowing</p> <p>There are a few performance hazards that happen with movable objects and stationary lights:</p> <ul> <li> <p>If there are lots of movable objects (hundreds), the per-object shadow method used can end up being less efficient than if whole scene shadows were used. You don't have much control over this right now other than to limit the number of stationary lights that affect an area, hopefully we will get better controls in the future.</p> </li> <li> <p>If the movable object is very large, and it moves, this can cause the entire scene to have to be re-rendered into the Preshadow depth map. This is what the warning is talking about. This will be both a CPU and GPU cost, however it will only happen for one frame (results are cached until the object moves far enough to invalidate the cache) so it's usually pretty hard to measure. If the movable objects move every frame, it can show up in 'stat shadowrendering' (CPU) or 'profilegpu' (GPU).</p> </li> </ul> <p>If the movable object is only changed occasionally you are probably fine. In the end you just need to make sure your performance is good enough on your target hardware. Useful commands for investigation are:</p> <ul> <li> <p>'stat unit' - shows the 3 parallel thread - max of GT, RT and GPU gives the frame time</p> </li> <li> <p>'stat scenerendering' - overview of CPU rendering thread time</p> </li> <li> <p>'stat dumpframe -ms=.1' - full stat hierarchy of where CPU time is going</p> </li> <li> <p>'stat shadowrendering' - CPU RT time issuing shadow depth draw calls</p> </li> <li> <p>'profilegpu' - measures GPU execution time</p> </li> </ul> <p>Reference From https://answers.unrealengine.com/questions/3438/large-actor-receives-a-pre-shadow-and-will-cause-a.html</p>"},{"location":"ue4guide/misc-ue4-editor/maya-pipeline/","title":"Maya pipeline","text":""},{"location":"ue4guide/misc-ue4-editor/maya-pipeline/#general-notes","title":"GENERAL NOTES:","text":""},{"location":"ue4guide/misc-ue4-editor/maya-pipeline/#lod","title":"LOD","text":"<ul> <li> <p>LOD objects in Maya must be a single piece of geometry or UE4 will fail on Import</p> </li> <li> <p>UE4 cannot properly create a lightmap UV set for LOD objects so this must be done in Maya (updated in 4.5 so it should work now)</p> </li> </ul>"},{"location":"ue4guide/misc-ue4-editor/maya-pipeline/#textures","title":"TEXTURES","text":"<ul> <li> <p>Textures must be photoshop files in Maya in order to link up in UE4</p> </li> <li> <p>Diffuse map should have roughness map in its alpha channel</p> </li> </ul>"},{"location":"ue4guide/misc-ue4-editor/maya-pipeline/#importing-fbx-into-ue4","title":"IMPORTING FBX INTO UE4","text":"<ul> <li> <p>*Re-Importing is very weak.</p> </li> <li> <p>Re-Importing Textures after adding an Alpha channel does nothing</p> </li> <li> <p>Re-Importing Geometry after changing Uvs does work as expected</p> </li> <li> <p>When you reimport an animation, you can mess with the structure of the object (thus changing the skeleton) but you need to reimport the animation first, then the mesh.</p> </li> <li> <p>If you receive an error that the skeleton is not the same, you need to reimport again, animation first, then mesh. But at least you do not need to start from scratch!</p> </li> <li> <p>If reimporting doesn't do anything, try exporting the FBX again. That seems to get it unstuck.</p> </li> </ul>"},{"location":"ue4guide/misc-ue4-editor/movingrenaming-files/","title":"Movingrenaming files","text":"<p>When you move or rename a file in Unreal, it is replaced with an invisible file called a Redirector. You should not let these files linger too long. The Epic Games team finds them useful, because one person can reorganize the project without needing to checkout all of the maps first, which would disrupt other users. However, it quickly turns into a big mess unless housekeeping steps are taken.</p> <ol> <li> <p>Thou shalt not move a file or rename it more than once without cleaning up redirectors.</p> </li> <li> <p>To fix up redirectors:</p> </li> </ol> <p>a. Go to the root level of the Content Browser (or select the folder that encompasses all the changes you just made)</p> <p>b. Clear the search field</p> <p>c. Add Filters-&gt;Miscellaneous-&gt;Redirector</p> <p>d. Right click on the Redirector and Choose \"Fix Up\"</p> <p>e. You can do this to more than one at a time.</p> <p>f. If you get a reference error, it's usually about an unloaded map. Load that map and do the operation again.</p> <p>g. Otherwise there might be references between Redirectors (if you didn't follow step 1), in this case, fix up the redirectors one at a time, starting with the first ones to be created.</p>"},{"location":"ue4guide/misc-ue4-editor/movingrenaming-files/#gotchas","title":"Gotchas","text":"<p>Unfortunately, if you're working with assets for the currently opened level, Unreal will complain that the current level still references the asset. It doesn't update references until you save the level. Once you do that, run the fix up command again.</p> <p>It's extremely helpful to have all the levels loaded at once and then use \"Save All Levels\" to speed up this process.</p>"},{"location":"ue4guide/misc-ue4-editor/movingrenaming-files/#renaming","title":"Renaming","text":"<p>If you create an object, rename it, and then create a new object with the same name as the original, an error will occur. This is because a Redirector was created when the first object was renamed, and a Redirector and a resource cannot have the same name. To solve this try the FixupRedirects commandlet.</p>"},{"location":"ue4guide/misc-ue4-editor/movingrenaming-files/#dangling-redirector","title":"Dangling Redirector","text":"<p>There are a few known issues with Redirectors that can be reproduced as follows:</p> <p>Scenario 1</p> <ol> <li> <p>Rename object A to B</p> </li> <li> <p>Delete B</p> </li> </ol> <p>An error message will say that B couldn't be deleted because it is in use. This happens because the Redirector created during the rename will still point to B.</p> <p>Scenario 2</p> <ol> <li> <p>Rename object A to B</p> </li> <li> <p>Rename object B back to A</p> </li> <li> <p>Delete A</p> </li> </ol> <p>The redirector that was created for the first rename will be destroyed, but a new one will be created at B. As a result, A will not be able to be deleted because it is being referenced.</p> <p>Running the FixupRedirects commandlet before deleting should solve these problems.</p>"},{"location":"ue4guide/misc-ue4-editor/particles/","title":"Particles","text":"<p>https://www.imbuefx.com/downloads/vfx-quick-tips-introduction-to-gpu-lit-particles-in-unreal-engine-4</p> <p>https://www.imbuefx.com</p> <p>http://www.fxguide.com/featured/art-directing-effects-for-infamous-second-son</p> <p>https://www.youtube.com/watch?v=hZLbGvtyS6g</p>"},{"location":"ue4guide/misc-ue4-editor/streaming-levels/","title":"Streaming levels","text":"<p>Outstanding question: what effect does \"should block on load\" have. Sounds like it would interrupt the event loop, which sounds like a bad thing for OR, don't want to interrupt head tracking.</p> <p>Two ways to do it:</p> <ol> <li> <p>Set a streaming volume.</p> </li> <li> <p>Wire it up with a Blueprint.</p> </li> </ol> <p>The latter is probably more useful, as well as being a bit more user-friendly, but takes more steps to set up. The techniques can also be used together.</p> <p>Levels need to be positioned relative to one another, even within their own file. You can't offset a level when it is streamed in, even though there is a place to set a level's position, it has no effect.</p> <p>If you wanted to stream in levels dynamically and offset them, for example to make a procedurally generated map, you should create the level as a blueprint Class instead (so technically, it isn't a level in that case, but it works in pretty much the exact same way).</p> <p>Streaming volume method:</p> <p></p> <p></p>"},{"location":"ue4guide/misc-ue4-editor/streaming-levels/#blueprint-method","title":"Blueprint Method:","text":"<p>It is required that the level was added in the Levels panel, or nothing will happen!</p> <p></p>"},{"location":"ue4guide/misc-ue4-editor/streaming-levels/#seamless-travel-between-levels","title":"Seamless Travel between Levels:","text":"<p>At the moment there are few ways to keep actors alive between levels, and we are discussing a new idea to help this going forward.</p> <p>For now you'll want to use \"seamless travel\", which keeps network connections alive between server/clients while loading the next map/level. On the AGameMode there is a boolean \"bUseSeamlessTravel\", that will make sure calls to ServerTravel will go a different path when loading maps. Seamless travel basically loads a small map as a transition so that it can garbage collect the previous map. It then continues to load the destination map afterward. This way, we can prevent a memory high watermark and possible out of memory conditions on limited memory platforms (ie console). You'll need to specify a small transition map in DefaultEngine.ini</p> C++<pre><code>[/Script/EngineSettings.GameMapsSettings]\n\nTransitionMap=/Game/Maps/SmallTransitionMap\n</code></pre> <p>With seamless travel, there is a call GetSeamlessTravelActorList which will allow you to add actors to an array of AActors to preserve between levels. It guarantees they won't garbage collected and will be \"renamed\" into the next level. I don't know why it's called Rename, but basically it moves the AActor into the next UWorld and in fact the name does change (the FName gets its _ number incremented).</p> <p>Now, not many things get preserved across travel, the point being that whatever object had a pointer to the object you're preserving is probably getting garbage collected, so the direct reference to your AActor is going to be lost. APlayerController typically survives longer than other AActors (unless the class of controller is changing). You can always do a TActorIterator to find the object(s) again and reestablish the linkage. There are a couple of places at this transition where you still have the old AGameMode and AGameState and could theoretically hand off a pointer, but I just looked and it isn't well exposed in an overload fashion (ie you'd have to modify the engine code a little). <p>The GetSeamlessTravelActorList function will be called twice, once when the transition map is reached, and again when the destination map is reached.</p> <p>Hope this helps, let me know any addition questions you have as you work through this.</p> <p>Reference From https://forums.unrealengine.com/showthread.php?3435-Keeping-Actors-Between-Levels</p>"},{"location":"ue4guide/networking/character-movement/","title":"Overview","text":"<p>Here's how player movement prediction, replication and correction works in network games:</p> <p>Every tick, the TickComponent() function is called. It figures out the acceleration and rotation change for the frame, and then calls PerformMovement() (for locally controlled Characters), or ReplicateMoveToServer() (if it's a network client).</p> <p>PerformMovement(): Root Motion is calculated inside here</p> C++<pre><code>if (CharacterMesh-&gt;ShouldTickPose())\n  {\n    // Keep track of if we're playing root motion, just in case the root motion montage ends this frame.\n    const bool bWasPlayingRootMotion = CharacterOwner-&gt;IsPlayingRootMotion();\n\n    CharacterMesh-&gt;TickPose(DeltaTime, true);\n    ...\n</code></pre> <p>ReplicateMoveToServer() saves the move (in the PendingMove list), calls PerformMovement(), and then replicates the move to the server by calling the replicated function ServerMove() - passing the movement parameters, the client's resultant position, and a timestamp.</p> <p>ServerMove() is executed on the server. It decodes the movement parameters and causes the appropriate movement to occur. It then looks at the resulting position an if enough time has passed since the last response, or the position error is significant enough, the server calls ClientAdjustPosition(), a replicated function.</p> <p>ClientAdjustPosition() is executed on the client. The client sets its position to the servers version of position, and sets the bUpdatePosition flag to true.</p> <p>When TickComponent() is called on the client again, if bUpdatePosition is true, the client will call ClientUpdatePosition() before calling PerformMovement(). ClientUpdatePosition() replays all the moves in the pending move list which occurred after the timestamp of the move the server was adjusting.</p> UNetDriver::ServerReplicateActors https://docs.unrealengine.com/latest/INT/API/Runtime/Engine/Engine/UNetDriver/ServerReplicateActors/index.html Also look at PlayerController::SendClientAdjustment &amp; INetworkPredictionInterface Authoritative Networked Character Movement Custom Character Movement: https://docs.unrealengine.com/en-us/Gameplay/Networking/CharacterMovementComponent Concrete example of networked custom character movement:   1) https://wiki.unrealengine.com/Authoritative_Networked_Character_Movement#Boost_Dodge                             2) http://error454.com/2015/03/20/ue4/movement/replication                                                          3) https://github.com/error454/CharacterMovementReplication-UE4 Rollback Networking in INVERSUS http://blog.hypersect.com/rollback-networking-in-inversus"},{"location":"ue4guide/networking/character-movement/#details","title":"Details","text":"<ul> <li>PerformMovement():</li> <li>Does the actual location update in characters</li> <li>StartNewPhysics(float deltaTime, int32 Iterations): Actual physics application<ul> <li>MoveAlongFloor() - does walking movement on the ground</li> </ul> </li> <li>ServerMove()</li> <li>What authoratatively does the move:</li> <li>MoveAutonomous()</li> </ul>"},{"location":"ue4guide/networking/configuration/","title":"Configuration","text":"<p>Pass -lanplay command arg to use lan bandwidth settings</p>"},{"location":"ue4guide/networking/configuration/#low-level-constants","title":"Low Level Constants:","text":"C++<pre><code>enum { MAX_PACKET_SIZE = 1024 }; // MTU for the connection\nenum { LAN_BEACON_MAX_PACKET_SIZE = 1024 }; // MTU for the connection\n\nenum { RELIABLE_BUFFER = 256 }; // Power of 2 &gt;= 1.\nenum { MAX_PACKETID = 16384 };  // Power of 2 &gt;= 1, covering guaranteed loss/misorder time.\nenum { MAX_CHSEQUENCE = 1024 }; // Power of 2 &gt;RELIABLE_BUFFER, covering loss/misorder time.\nenum { MAX_BUNCH_HEADER_BITS = 64 };\nenum { MAX_PACKET_HEADER_BITS = 15 }; // = FMath::CeilLogTwo(MAX_PACKETID) + 1 (IsAck)\nenum { MAX_PACKET_TRAILER_BITS = 1 };\n</code></pre>"},{"location":"ue4guide/networking/configuration/#runtime-lag-bandwidth-data","title":"Runtime lag bandwidth data:","text":"<p>UPlayer/UNetConnection:</p> <ul> <li>CurrentNetSpeed: Actual net speed that gets updated</li> <li>MaxPacket: Maximum packet size.</li> <li>LastReceiveTime; // Last time a packet was received, for timeout checking.</li> <li>LastReceiveRealtime; // Last time a packet was received, using real time seconds (FPlatformTime::Seconds)</li> <li>LastGoodPacketRealtime; // Last real time a packet was considered valid</li> <li>LastSendTime; // Last time a packet was sent, for keepalives.</li> <li>LastTickTime; // Last time of polling.</li> <li>QueuedBits; // Bits assumed to be queued up.</li> <li>TickCount; // Count of ticks.</li> <li>LastRecvAckTime; // The last time an ack was received */</li> </ul> <p>Misc Details:</p> <ul> <li> <p>NetClientTicksPerSecond: is actually how many client connections the server will tick on each of its frames. Similar for the NetUpdateFrequency values, those control how often the server will consider the actor's properties for replication.</p> </li> <li> <p>bClampListenServerTickRate: Clamp maxtickrate if listenserver by using NetServerMaxTickRate</p> </li> </ul>"},{"location":"ue4guide/networking/configuration/#ini-config","title":"Ini Config","text":"INI<pre><code>[/Script/Engine.Player]\n; Bandwidth Settings For Client\nConfiguredInternetSpeed=10000\nConfiguredLanSpeed=20000\n\n[/Script/OnlineSubsystemUtils.IpNetDriver]\n; Not used\n;MaxDownloadSize\n; Clamp maxtickrate if listenserver by using NetServerMaxTickRate; Not needed bc we have our own custom GetMaxTickRate()\n;bClampListenServerTickRate=False\n; Only used for dedis and listenserver if bClampListenServerTickRate\nNetServerMaxTickRate=60\n; Client rates for internet vs lan play; \nMaxInternetClientRate=10000\nMaxClientRate=15000\n; Amount of time a server will wait before traveling to next map, gives clients time to receive final RPCs on existing level @see NextSwitchCountdown\nServerTravelPause=4.0\nSpawnPrioritySeconds=1.0\nRelevantTimeout=5.0\nKeepAliveTime=0.2\n; Amount of time to wait for a new net connection to be established before destroying the connection\nInitialConnectTimeout=30.0\n; Amount of time to wait before considering an established connection timed out.  \n; Typically shorter than the time to wait on a new connection because this connection\n; should already have been setup and any interruption should be trapped quicker.\nConnectionTimeout=15.0\n; A multiplier that is applied to the above values when we are running with unoptimized builds (debug)\n; or data (uncooked). This allows us to retain normal timeout behavior while debugging without resorting\n; to the nuclear 'notimeouts' option or bumping the values above. If ==0 multiplier = 1\nTimeoutMultiplierForUnoptimizedBuilds=1\n; If true, ignore timeouts completely.  Should be used only in development\n;bNoTimeouts=True\nNetConnectionClassName=\"/Script/OnlineSubsystemUtils.IpConnection\"\n; Number of ports which will be tried if current one is not available for binding (i.e. if told to bind to port N, will try from N to N+MaxPortCountToTry inclusive)\nMaxPortCountToTry=512\n; Number of bytes that will be passed to FSocket::SetBufferSize\\* when initializing.\n;ServerDesiredSocketReceiveBufferBytes\n;ServerDesiredSocketSendBufferBytes\n;ClientDesiredSocketReceiveBufferBytes\n;ClientDesiredSocketSendBufferBytes\n\n[/Script/Engine.GameNetworkManager]\n; Looks like a lot of this isnt actually used wrt to setting bandwidth limits\n; CharacterMovementComponent seems to be the only main thing using this class\n; ----------------------------\n; Listen server dynamic netspeed adjustment - not used anywhere by default\n; values stored in AdjustedNetSpeed &amp; LastNetSpeedUpdateTime\n; Total available bandwidth for listen server, split dynamically across net connections\nTotalNetBandwidth=32000\n; Min/Max bandwidth dynamically set per connection\nMaxDynamicBandwidth=7000\nMinDynamicBandwidth=4000\n; ----------------------------\n; Player replication\nMoveRepSize=42.0f\nMAXPOSITIONERRORSQUARED=3.0f\nMAXNEARZEROVELOCITYSQUARED=9.0f\nCLIENTADJUSTUPDATECOST=180.0f\nMAXCLIENTUPDATEINTERVAL=0.25f\nMaxMoveDeltaTime=0.125f\nClientNetSendMoveDeltaTime=0.0166\nClientNetSendMoveDeltaTimeThrottled=0.0222\nClientNetSendMoveThrottleAtNetSpeed=10000\nClientNetSendMoveThrottleOverPlayerCount=10\nClientAuthorativePosition=false\nClientErrorUpdateRateLimit=0.0f\n; ----------------------------\n; Movement Time Discrepancy settings for Characters (speed hack detection and prevention)\nbMovementTimeDiscrepancyDetection=false\nbMovementTimeDiscrepancyResolution=false\nMovementTimeDiscrepancyMaxTimeMargin=0.25f\nMovementTimeDiscrepancyMinTimeMargin=-0.25f\nMovementTimeDiscrepancyResolutionRate=1.0f\nMovementTimeDiscrepancyDriftAllowance=0.0f\nbMovementTimeDiscrepancyForceCorrectionsDuringResolution=false\nbUseDistanceBasedRelevancy=true\n; Standby cheat detection\n; Used to determine if checking for standby cheats should occur\n; bIsStandbyCheckingEnabled:1;\n; Used to determine whether we've already caught a cheat or not\n; bHasStandbyCheatTriggered:1;\n; The amount of time without packets before triggering the cheat code\n; StandbyRxCheatTime;\n; The amount of time without packets before triggering the cheat code\n; StandbyTxCheatTime;\n; The point we determine the server is either delaying packets or has bad upstream\n; BadPingThreshold;\n; The percentage of clients missing RX data before triggering the standby code\n; PercentMissingForRxStandby;\n; The percentage of clients missing TX data before triggering the standby code\n; PercentMissingForTxStandby;\n; The percentage of clients with bad ping before triggering the standby code\n; PercentForBadPing;\n; The amount of time to wait before checking a connection for standby issues\n; JoinInProgressStandbyWaitTime;\n</code></pre>"},{"location":"ue4guide/networking/connection-flow/","title":"Connection flow","text":"<p>Control messages are handled in UWorld::NotifyControlMessage (mostly for server) and UPendingNetGame (mostly for client). The general flow looks like this:</p> <ol> <li> <p>Client sends Hello,</p> </li> <li> <p>Server receives Hello, sends Challenge.</p> </li> <li> <p>Client receives Challenge, sends Login.</p> </li> <li> <p>Server sees login, attempts to log player in (AGameModeBase::PreLogin). If that's successful, then server sends Welcome.</p> </li> <li> <p>The client gets the welcome message (this has info about the Game / Level the server is on). Client sends a NetSpeed message which reports the NetSpeed the client has, and starts loading the map.</p> </li> <li> <p>Server receives NetSpeed, and clamps the speed according to the Game's actual netspeed. Server waits for Client to load map</p> </li> <li> <p>Once the client has loaded the map, it sends the Join message to actually join the game.</p> </li> <li> <p>After load, server locally calls AGameMode::PreLogin()</p> </li> </ol> <ul> <li> <p>Gives GameMode chance to reject the connection</p> </li> <li> <p>ShooterGame checks for if the match has already ended during prelogin to reject people.</p> </li> <li> <p>UT Lobby GameMode checks to make sure they're rankings are within the bounds of the lobby game mode (not too weak, not too strong)</p> </li> </ul> <ol> <li>If accepted, server calls AGameMode::Login</li> </ol> <ul> <li> <p>Role of this function is to create a PlayerController that will be replicated to connected client</p> </li> <li> <p>Once received, PlayerController will replace the client's temporary placeholder PlayerController</p> </li> <li> <p>PlayerController::BeginPlay will be called here</p> </li> <li> <p>It's not safe to call RPC functions on this actor yet; must wait until AGameMode::PostLogin</p> </li> </ul> <ol> <li>PostLogin is called, now safe for the Server to start calling RPC functions on the PlayerController</li> </ol> <p>Client Connection Events:</p> <ul> <li> <p>To catch the moment when a new connection is made is by hooking into the NotifyAcceptedConnection method of UWorld or AOnlineBeacon. They both manage an UNetDriver and inherit from FNetworkNotify.</p> </li> <li> <p>Another point to catch when a new connection is being linked to a player controller could be OnActorChannelOpen from AActor. This one is the client side place where the PC binds itself to a local viewport, so from there you could notify the server about the connection.</p> </li> <li> <p>Yet another way is to use the login chain within the GameMode, there you got PreLogin, Login and PostLogin, those are commonly used to reject entering players and do some initial setup. You can start calling replication methods on the PlayerController from PostLogin but not in PreLogin nor Login, while you can reject an entering player in PreLogin or Login specifying an error if you like, for example if the game is full.</p> </li> <li> <p>On the client's Player controller, these calls happen:</p> </li> </ul> <p>SetPlayer()</p> <p>-&gt;ReceivedPlayer();</p> <p>Reference From https://answers.unrealengine.com/questions/161894/c-networking-how-to-get-a-client-connection-event.html</p> <p>Connections are not actually established until after the challenge is sent and passes to help protect against DDoS attacks (e.g., it's significantly cheaper to handle incoming packets without fully establishing a UNetConnectiong and having to do cleanup if things fail).</p> <p>At that point, the client should be loaded into the correct map and the server should fully log the player in and assign them a PlayerController.</p> <p>There are a few things you can do to debug this. First, make sure LogNet is set to at least Log (`log lognet log`). Control messages are only printed at that level.</p> <p>If you still don't see any messages, try to put a breakpoint in either UIpNetDriver::TickDispatch, or the TickDispatch of whatever NetDriver you're using. This is where packets will be processed.</p> <p>Reference From https://udn.unrealengine.com/questions/404339/accessing-oculussteam-apis-without-respective-oss.html</p> <p>NetDrivers are distinct from OSSs.</p> <p>OSSs ultimately aim to provide a platform agnostic interface to the features that a given back end can support (achievements, friends, matches / lobbies / sessions, etc.)</p> <p>NetDrivers are more focused around the direct communication (e.g., managing connections / sockets, handling hand shakes, reading and writing packets, etc.)</p> <p>With that said, most of the NetDrivers inherit from IPNetDriver. Things like Oculus and Steam do allow a \"PassThrough\" mode that will have them more or less rely directly on the implementations of the IpNetDriver.</p> <p>Looking at the SteamNetDriver, it looks like it does have some special case code to handle Steam IDs (like the one you ran into). However, it can also handle \"normal\" IP addresses and in that case functions as a PassThrough.</p> <p>The Oculus net driver seems a bit less flexible. Instead of having a Pass Through mode and will immediately exit out in the case of the Subsystem not being enabled.</p> <p>Reference From https://udn.unrealengine.com/questions/404339/accessing-oculussteam-apis-without-respective-oss.html</p>"},{"location":"ue4guide/networking/debugging-tips-tricks/","title":"Debug Configuration","text":"<p>n.IpNetDriverMaxFrameTimeBeforeAlert: Time to spend processing networking data in a single frame before an alert is raised (in seconds). It may get called multiple times in a single frame if additional processing after a previous alert exceeds the threshold again default: 1 s n.IpNetDriverMaxFrameTimeBeforeLogging: Time to spend processing networking data in a single frame before an output log warning is printed (in seconds). default: 10 s n.VerifyPeer:</p>"},{"location":"ue4guide/networking/debugging-tips-tricks/#debugging-console-commands","title":"Debugging Console Commands","text":""},{"location":"ue4guide/networking/debugging-tips-tricks/#lag-simulation","title":"Lag Simulation","text":"<p>Console commands Simulate network packet loss/lag/congestion/latency:</p> Bash<pre><code>net PktLoss=1\nnet pktlossburst=x\nnet PktOrder=0\nnet PktDup=0\nnet PktLag=75\nnet PktLagVariance=0\nDumpOnlineSessionState\n</code></pre>"},{"location":"ue4guide/networking/debugging-tips-tricks/#debug-character-movementclient-side-prediction","title":"Debug Character Movement/Client Side prediction","text":"<ul> <li>Draw green/red collision bounds at server correction/client incorrect positions of replicated objects</li> </ul> Bash<pre><code>p.netshowcorrections 1\n</code></pre> <ul> <li>Control lifetime of visualizations</li> </ul> Bash<pre><code>p.NetCorrectionLifetime 5\n</code></pre> <ul> <li>Verbose logging</li> </ul> Bash<pre><code>log lognetplayermovement verbose\n</code></pre>"},{"location":"ue4guide/networking/debugging-tips-tricks/#other-commands","title":"Other Commands","text":"<p>SOCKETS: List open sockets PauseReceive: Pause Net recieve</p>"},{"location":"ue4guide/networking/debugging-tips-tricks/#logging","title":"Logging","text":""},{"location":"ue4guide/networking/debugging-tips-tricks/#most-useful-categories","title":"Most Useful Categories","text":"<ul> <li>LogNet: Verbose info on channels/connections/control messages &amp; handshake</li> <li>LogNetPlayerMovement: Detailed info about movement from clients &amp; corrections</li> <li>LogNetTraffic: Verbose information about data sent on a connection</li> </ul>"},{"location":"ue4guide/networking/debugging-tips-tricks/#advanced-categories","title":"Advanced Categories","text":"Bash<pre><code>LogCoreNet                                Log\nLogGameNetworkManager                     Log\nLogNet                                    Log\nLogNetDormancy                            Log\nLogNetSerialization                       Log\nLogNetPackageMap                          Log\n\nLogNetFastTArray                          Log\nLogNetPartialBunch                        Log\nLogNetTraffic                             Log\nLogSockets                                Log\nPacketHandlerLog                          Log\n\nLogNetVersion                             Log\n\nLogNetPlayerMovement                      Log\nLogCharacterNetSmoothing                  Log\n\nLogRep                                    Log\nLogRepTraffic                             Log\nLogRepProperties                          Log\n</code></pre>"},{"location":"ue4guide/networking/debugging-tips-tricks/#online-subsystem-categories","title":"Online Subsystem Categories","text":"Bash<pre><code>LogOnline                                 Log\nLogOnlineAchievements                     Log\nLogOnlineChat                             Log\nLogOnlineCloud                            Log\nLogOnlineEntitlement                      Log\nLogOnlineEvents                           Log\nLogOnlineExternalUI                       Log\nLogOnlineFriend                           Log\nLogOnlineGame                             Log\nLogOnlineIdentity                         Log\nLogOnlineLeaderboard                      Log\nLogOnlineParty                            Log\nLogOnlinePresence                         Log\nLogOnlinePurchase                         Log\nLogOnlineSession                          Log\nLogOnlineSharing                          Log\nLogOnlineStats                            Log\nLogOnlineStore                            Log\nLogOnlineStoreV2                          Log\nLogOnlineTitleFile                        Log\nLogOnlineTournament                       Log\nLogOnlineUser                             Log\nLogOnlineVoice                            Log\n</code></pre>"},{"location":"ue4guide/networking/debugging-tips-tricks/#stats","title":"Stats","text":""},{"location":"ue4guide/networking/debugging-tips-tricks/#useful-stat-commands","title":"Useful Stat Commands","text":"<ul> <li><code>stat net</code>: lists ping, channel count, in/out bytes, etc</li> <li><code>stat game</code>: List of network processing information</li> </ul>"},{"location":"ue4guide/networking/debugging-tips-tricks/#detailed-stat-groups","title":"Detailed Stat Groups","text":"C++<pre><code>DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Net Tick Time\"),STAT_NetWorldTickTime,STATGROUP_Game, );\nDECLARE_CYCLE_STAT_EXTERN(TEXT(\"Nav Tick Time\"),STAT_NavWorldTickTime,STATGROUP_Game, );\nDECLARE_CYCLE_STAT_EXTERN(TEXT(\"Reset Async Trace Time\"),STAT_ResetAsyncTraceTickTime,STATGROUP_Game, );\nDECLARE_CYCLE_STAT_EXTERN(TEXT(\"GT Tickable Time\"),STAT_TickableTickTime,STATGROUP_Game, );\nDECLARE_CYCLE_STAT_EXTERN(TEXT(\"Runtime Movie Tick Time\"),STAT_RuntimeMovieSceneTickTime,STATGROUP_Game, );\nDECLARE_CYCLE_STAT_EXTERN(TEXT(\"Finish Async Trace Time\"),STAT_FinishAsyncTraceTickTime,STATGROUP_Game, );\nDECLARE_CYCLE_STAT_EXTERN(TEXT(\"Net Broadcast Tick Time\"),STAT_NetBroadcastTickTime,STATGROUP_Game, );\nDECLARE_CYCLE_STAT_EXTERN(TEXT(\"ServerReplicateActors Time\"),STAT_NetServerRepActorsTime,STATGROUP_Game, );\nDECLARE_CYCLE_STAT_EXTERN(TEXT(\"Consider Actors Time\"),STAT_NetConsiderActorsTime,STATGROUP_Game, );\nDECLARE_CYCLE_STAT_EXTERN(TEXT(\"Update Unmapped Objects Time\"),STAT_NetUpdateUnmappedObjectsTime,STATGROUP_Game, );\nDECLARE_CYCLE_STAT_EXTERN(TEXT(\"Inital Dormant Time\"),STAT_NetInitialDormantCheckTime,STATGROUP_Game, );\nDECLARE_CYCLE_STAT_EXTERN(TEXT(\"Prioritize Actors Time\"),STAT_NetPrioritizeActorsTime,STATGROUP_Game, );\nDECLARE_CYCLE_STAT_EXTERN(TEXT(\"Replicate Actor Time\"),STAT_NetReplicateActorTime,STATGROUP_Game, );\nDECLARE_CYCLE_STAT_EXTERN(TEXT(\"Dynamic Property Rep Time\"),STAT_NetReplicateDynamicPropTime,STATGROUP_Game, );\nDECLARE_CYCLE_STAT_EXTERN(TEXT(\"Dynamic Property Compare Time\"),STAT_NetReplicateDynamicPropCompareTime,STATGROUP_Game, );\nDECLARE_CYCLE_STAT_EXTERN(TEXT(\"Dynamic Property Send Time\"),STAT_NetReplicateDynamicPropSendTime,STATGROUP_Game, );\nDECLARE_CYCLE_STAT_EXTERN(TEXT(\"Dynamic Property Send BackCompat Time\"),STAT_NetReplicateDynamicPropSendBackCompatTime,STATGROUP_Game, );\nDECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Skipped Dynamic Props\"),STAT_NetSkippedDynamicProps,STATGROUP_Game, );\nDECLARE_CYCLE_STAT_EXTERN(TEXT(\"NetSerializeItemDelta Time\"),STAT_NetSerializeItemDeltaTime,STATGROUP_Game, );\nDECLARE_CYCLE_STAT_EXTERN(TEXT(\"NetUpdateGuidToReplicatorMap Time\"), STAT_NetUpdateGuidToReplicatorMap,STATGROUP_Game, );\n\nDECLARE_CYCLE_STAT_EXTERN(TEXT(\"Static Property Rep Time\"),STAT_NetReplicateStaticPropTime,STATGROUP_Game, );\nDECLARE_CYCLE_STAT_EXTERN(TEXT(\"Rebuild Conditionals\"),STAT_NetRebuildConditionalTime,STATGROUP_Game, );\nDECLARE_CYCLE_STAT_EXTERN(TEXT(\"Net Post BC Tick Time\"),STAT_NetBroadcastPostTickTime,STATGROUP_Game, );\nDECLARE_CYCLE_STAT_EXTERN(TEXT(\"Net PackageMap SerializeObject\"),STAT_PackageMap_SerializeObjectTime,STATGROUP_Game, );\n</code></pre>"},{"location":"ue4guide/networking/debugging-tips-tricks/#vr-network-debugging","title":"VR Network Debugging","text":"<p>Debug networking on local machine with VR (launch order important!)</p> Bash<pre><code>Server: UE4Editor.exe MPRepro mptest -server -log\nNon-VR Client: UE4Editor.exe MPRepro 127.0.0.1 -game -nohmd\nVR Client: UE4Editor.exe MPRepro 127.0.0.1 -game -vr\n</code></pre> <p>https://udn.unrealengine.com/questions/307536/debugging-multiplayer-vr.html&gt;</p>"},{"location":"ue4guide/networking/debugging-tips-tricks/#code-debugging","title":"Code Debugging","text":"<p>Getting around breakpoint timeouts</p> <ul> <li>You should be able to launch with -notimeouts as a cmdline option Reference From https://udn.unrealengine.com/questions/283473/multiplayer-breakpoints.html</li> </ul>"},{"location":"ue4guide/networking/debugging-tips-tricks/#how-to-check-if-player-is-local-vs-server","title":"How To Check If Player Is Local vs Server","text":"<p>Use these functions:</p> <ul> <li>IsLocalController() or GetRemoteRole()</li> </ul>"},{"location":"ue4guide/networking/debugging-tips-tricks/#checking-server-build","title":"Checking Server build","text":"<p>How to check for the server build: client vs server vs listen server: editor vs game vs pie vs editorpreview vs gamepreview</p> C++<pre><code>AActor::IsNetMode\nUEngine::GetNetMode\n</code></pre> <p>Which calls these functions</p> C++<pre><code>FPlatformProperties::IsServerOnly()\nFPlatformProperties::IsGameOnly()\nIsRunningDedicatedServer()\nIsRunningGame()\nIsRunningClientOnly()\n</code></pre> <p>The <code>UE_SERVER</code> define for compile time check of server build</p> C++<pre><code>/** Returns whether script is executing within the editor. */\n\nclass UWorld\n{\n  bool IsPlayInEditor() const;\n\n  /** Returns whether script is executing within a preview window */\n  bool IsPlayInPreview() const;\n\n  /** Returns whether script is executing within a mobile preview window */\n  bool IsPlayInMobilePreview() const;\n\n  /** Returns whether script is executing within a vulkan preview window */\n  bool IsPlayInVulkanPreview() const;\n\n  /** Returns true if this world is any kind of game world (including PIE worlds) */\n  bool IsGameWorld() const;\n\n  /** Returns true if this world is a preview game world (blueprint editor) */\n  bool IsPreviewWorld() const;\n}\n\nGetWorld()-&gt;WorldType\nnamespace EWorldType\n{\n  enum Type\n  {\n    /** An untyped world, in most cases this will be the vestigial worlds of streamed in sub-levels */\n    None,\n    /** The game world */\n    Game,\n    /** A world being edited in the editor */\n    Editor,\n    /** A Play In Editor world */\n    PIE,\n    /** A preview world for an editor tool */\n    EditorPreview,\n    /** A preview world for a game */\n    GamePreview,\n    /** An editor world that was loaded but not currently being edited in the level editor */\n    Inactive\n  };\n\n  /**\n  * The network mode the game is currently running.\n  * @see https://docs.unrealengine.com/latest/INT/Gameplay/Networking/Replication/\n  */\n  enum ENetMode\n  {\n    /** Standalone: a game without networking, with one or more local players. Still considered a server because it has all server functionality. */\n    NM_Standalone,\n    /** Dedicated server: server with no local players. */\n    NM_DedicatedServer,\n    /** Listen server: a server that also has a local player who is hosting the game, available to other players on the network. */\n    NM_ListenServer,\n    /**\n     * Network client: client connected to a remote server.\n     * Note that every mode less than this value is a kind of server, so checking NetMode &lt; NM_Client is always some variety of server.\n     */\n    NM_Client,\n    NM_MAX,\n  };\n}\n</code></pre>"},{"location":"ue4guide/networking/debugging-tips-tricks/#client-authoritative","title":"Client Authoritative","text":"<p>There is a config option for \"ClientAuthorativePosition\" [sic, I know it's misspelled] on the GameNetworkManager that changes the rules: the server will accept client movement as authoritative and not force a correction if it's within a squared distance (MAXPOSITIONERRORSQUARED) from where the server last saw it. So in this case, the server would warp the character to where the client tried to move, and the client's position is the authority. The server can still replicate movement to the client normally, this just handles rogue client movements.</p> <p>You set this in your game ini settings:</p> INI<pre><code>[/Script/Engine.GameNetworkManager]\nMAXPOSITIONERRORSQUARED=625\nClientAuthorativePosition=true\n</code></pre> <p>Reference From https://answers.unrealengine.com/questions/26116/able-to-replicate-movement-when-using-addmovement.html</p>"},{"location":"ue4guide/networking/debugging-tips-tricks/#misc-info","title":"Misc Info","text":"<ul> <li>PlayerIndex is 0 for multiplayer games. It's only different for local multiplayer</li> <li>If your project is a code project with a *.Build.cs file, you'll need a dependency on the \"OnlineSubsystemNull\" module.</li> <li>For both code and blueprint projects, you also need to set the DefaultPlatformService in your DefaultEngine.ini file, like this:</li> </ul> INI<pre><code>[OnlineSubsystem]\nDefaultPlatformService=Null\n</code></pre>"},{"location":"ue4guide/networking/dedicated-server-on-aws/","title":"Dedicated server on aws","text":"<p>For Fortnite, we actually run multiple instances of the engine on single Amazon E3 instances. That is, we actually just spawn and run multiple UE4 server applications. In cases where the server isn't doing a lot of strenuous animation or physics calculations, you can even force it to run in a single threaded mode (which may be the default).</p> <p>The trick with this sort of approach is properly routing connections to the right port, but luckily that's not too hard. The engine already uses code (like ISocketSubsystem::BindNextPort) that will find the next available port. So, if your default port is 7000, then as you spawn more instances they will just take the next available port (7001, 7002, ...). Then, as long as your server instances register with some sort of backend (your own matchmaking, steam, w/e) things will mostly just work.</p> <p>Now, this does mean that you'll need enough IO / Memory to support this, but those are typically cheaper and easier to scale.</p> <p>Reference From https://udn.unrealengine.com/questions/440313/multiple-game-instances-on-one-server.html</p> <p>The nomenclature below is my own, nothing official really</p> <ol> <li> <p>VM Instance - Third party service (AWS/GCE) hosting a game.</p> </li> <li> <p>Dedicated Server Instance - a single running executable of the Unreal Engine dedicated server</p> </li> <li> <p>Game Instance - a single instance of the game rules / etc (1 World)</p> </li> <li> <p>Forked Instance - one dedicated server instance (2) that hosts multiple game instances in multiple sub processes</p> </li> <li> <p>MultiWorld Instance - one dedicated server instance (2) that hosts multiple game instances in one process</p> </li> </ol> <p>Right now (2) and (3) are 1:1 as Jon describes. Fortnite is working on (4) for a 1:N ratio. We are not trying (5) because the engine doesn't work this way at present and if anything crashed it would bring down all the games inside.</p> <p>A VM Instance (1) typically runs many of (2) and therefore (3) right now. The comments about ports and such from the other answer becomes relevant.</p> <p>Forking is being evaluated based on the idea that it shares memory between the sub processes. There was some work to not garbage collect various things as well as some startup and shutdown changes to prevent UObject system cleanup. I can't speak to the implementation details or its current performance wins, but you could try this as well.</p> <p>As another data point, Gears of War was actually 7 instances per core. I don't have Fortnite specific details, but it depends on our Save the World and Battle Royale modes. Clearly it is based on the game CPU demands. You may have a simpler/faster/better game that can run more instances.</p> <p>Reference From https://udn.unrealengine.com/questions/440313/multiple-game-instances-on-one-server.html</p>"},{"location":"ue4guide/networking/epic-networking-experts/","title":"Networking Subject Matter Experts","text":"<ul> <li>Ryan's answers, network programmer: https://udn.unrealengine.com/users/12932/ryangerleve.html</li> <li>Brian's answers, network programmer: https://udn.unrealengine.com/users/15496/barthawthorne.html</li> <li>Dave Ratti: https://udn.unrealengine.com/users/814/daveratti.html</li> </ul>"},{"location":"ue4guide/networking/misc-notes/","title":"Misc Brain Dump","text":"<p>Manage ParticleSpawning:</p> C++<pre><code>class AParticleEventManager : public AActor\nFString ParticleEventManagerClassPath;\n\nstruct CORE_API FNetworkVersion\n\nINetworkPredictionInterface\\* **NetworkPredictionInterface** = Cast&lt;INetworkPredictionInterface&gt;(**PawnMovement**);\n</code></pre> <p>bNetLoadOnClient : If true the Actor will load from a level file on a network client. This should be set to true for Actors you place in a map that you want to exist on a client (typically most Actors want this).</p> <p>Reference From https://wiki.unrealengine.com/Replication</p> <p>IsNetStartupActor(): Returns true if this is a replicated actor that was placed in the map</p>"},{"location":"ue4guide/networking/misc-notes/#useful-functions","title":"Useful Functions","text":""},{"location":"ue4guide/networking/misc-notes/#helper-functions","title":"Helper Functions","text":"<p>FHttpModule/IHttpRequest/IHttpResponse: Wrapper to easily make http requests</p> C++<pre><code>// Add a new actor for replication programmatically\nSetReplicates(bool bInReplicates)\n{\n    if (Role == ROLE_Authority)\n    {\n        if (bReplicates == false &amp;&amp; bInReplicates == true)\n        {\n            if (UWorld* MyWorld = GetWorld())       // GetWorld will return nullptr on CDO, FYI\n            {\n                MyWorld-&gt;AddNetworkActor(this);\n            }\n        }\n\n        RemoteRole = (bInReplicates ? ROLE_SimulatedProxy : ROLE_None);\n        bReplicates = bInReplicates;\n    }\n    else\n    {\n        UE_LOG(LogActor, Warning, TEXT(\"SetReplicates called on actor '%s' that is not valid for having its role modified.\"), *GetName());\n    }\n}\n</code></pre>"},{"location":"ue4guide/networking/misc-notes/#json","title":"JSON","text":"<p>JSON documentation: http://www.wraiyth.com/?p=198</p> C++<pre><code>/** Class that handles converting Json objects to and from UStructs */\nclass JSONUTILITIES_API FJsonObjectConverter\n\n/**\n * Base class for a JSON serializable object. Derive from this to make your object serializable\n */\nstruct FJsonSerializable\n\n// FJsonSerializable\nBEGIN_JSON_SERIALIZER\n  JSON_SERIALIZE( \"AppName\",\t\tAppName );\n  JSON_SERIALIZE( \"SessionName\",\tSessionName );\n  JSON_SERIALIZE( \"FriendlyName\",\tFriendlyName );\n  JSON_SERIALIZE( \"Timestamp\",\t\tTimestamp );\n  JSON_SERIALIZE( \"SizeInBytes\",\tSizeInBytes );\n  JSON_SERIALIZE( \"DemoTimeInMs\",\tDemoTimeInMs );\n  JSON_SERIALIZE( \"NumViewers\",\tNumViewers );\n  JSON_SERIALIZE( \"bIsLive\",\t\tbIsLive );\n  JSON_SERIALIZE( \"Changelist\",\tChangelist );\n  JSON_SERIALIZE( \"shouldKeep\",\tbShouldKeep );\nEND_JSON_SERIALIZER\n</code></pre>"},{"location":"ue4guide/networking/networkid-funiquenetid-fnetworkguid/","title":"Network IDs","text":"<p>FUniqueNetID vs FNetworkGUID vs PlayerId</p>"},{"location":"ue4guide/networking/networkid-funiquenetid-fnetworkguid/#getuniqueid","title":"GetUniqueID()","text":"<p>GetUniqueID() is a UObject framework feature that is only unique while the object is active, and could be different on the client vs the server, so it's not a good candidate for identifying objects if you need these values to be the same across all machines.</p>"},{"location":"ue4guide/networking/networkid-funiquenetid-fnetworkguid/#fnetworkguid","title":"FNetworkGUID","text":"<p>The method we use to identify objects across machines.</p> <p>This value isn't easily accessible though, and is more of a low level way of allowing objects to be referenced as RPC parameters, or replicated property values. These values are also only initialized when the object in question is replicating (which will likely be true for characters though). This value can be obtained through the NetGUIDLookup map that is on that FNetGUIDCache class (which is in turn stored on the UNetDriver object).</p> <p>If you truly need this exposed more readily, this is definitely something we can explore, or walk you through the steps to expose this from the FNetGUIDCache class.</p>"},{"location":"ue4guide/networking/networkid-funiquenetid-fnetworkguid/#aplayerstateplayerid","title":"APlayerState.PlayerId","text":"<p>This value is assigned by the server, and is replicated to all clients. This value is consistent for the duration of play. This might be the way to go if you only need this for players.</p>"},{"location":"ue4guide/networking/networkid-funiquenetid-fnetworkguid/#aplayerstateuniqueid","title":"APlayerState.UniqueID","text":"<p>This is a FUniqueNetID, and is only valid though if you connect through matchmaking using the online subsystems, so is a bit more involved to explain here. Used for online subsystem communication</p> <p>Reference From https://udn.unrealengine.com/questions/232509/about-testing-multiplayer.html</p>"},{"location":"ue4guide/networking/networking-overview/","title":"Networking overview","text":"<p>https://udn.unrealengine.com/questions/446465/expense-analysis-for-networkingvariable-replicatio.html</p> <p>Networking Guide Compendium</p> <p>http://cedric.bnslv.de/Downloads/UE4_Network_Compendium_by_Cedric_eXi_Neukirchen.pdf</p> <p>Networking Replication Guide:</p> <p>https://wiki.unrealengine.com/Replication</p> <p>https://wiki.beyondunreal.com/Everything_you_ever_wanted_to_know_about_replication_(but_were_afraid_to_ask)</p> <p>https://wiki.beyondunreal.com/What_happens_at_map_startup</p> <p>Survival Game - C++ Networking Sample</p> <p>https://wiki.unrealengine.com/Survival_Sample_Game:_Section_5</p>"},{"location":"ue4guide/networking/networking-overview/#different-types-of-replication","title":"Different types of replication:","text":"<ul> <li> <p>Actor Replication</p> </li> <li> <p>Variable Replication</p> </li> <li> <p>Subobject/Component replication</p> </li> <li> <p>Function Replication (RPC, can only mark UFUNCTION to be replicated in C++ but are BP callable)</p> </li> <li> <p>Event Replication</p> </li> </ul>"},{"location":"ue4guide/networking/networking-overview/#gamestate-vs-game-instance","title":"Gamestate vs Game Instance","text":"<ul> <li> <p>Gamestate is replicated extension of GameMode b/c GameMode only exists on the server for security. GameMode contains the win/loss rules of the games. Should not hav emuch data that changes during Play</p> </li> <li> <p>GameState would hold the positions of the chess pieces on the board. GameState tracks current state of the game (player kills/team kills)</p> </li> <li> <p>Gamestate allows clients to access game data like scores &amp; match time, scoreboard stuff. Freely replicated</p> </li> <li> <p>GameInstance is data that's persisted between levels. E.g. You want to keep track of what a player did in this level to affect the next level</p> </li> </ul> <p>Gamemode contains rules/logic e.g. conditions for a touchdown, first down in football. Gamestate is state that's replicated to everyone freely e.g. the scoreboard</p> <p>Playercontroller/playerstate is the equivelent. E.g. playerstate contains score, name, etc while setting those variables and when and routing input is through Playercontroller</p> <p>GameSession is meant to handle interactions with OnlineSubsystem like accepting login, checking ban lists/server capacity, spectator permissions, starting/ending session with platform</p>"},{"location":"ue4guide/networking/networking-overview/#objects-can-be-in-one-of-these-categories","title":"Objects Can Be In One of these Categories","text":"<ul> <li> <p>Server Only</p> </li> <li> <p>Server &amp; Clients</p> </li> <li> <p>Server &amp; Owning Client</p> </li> <li> <p>Owning Client</p> </li> </ul> <p></p> <p></p>"},{"location":"ue4guide/networking/networking-overview/#engine-practicalities","title":"Engine Practicalities:","text":"<ul> <li>Network debugging/testing - Launch network version of game through command line shortcut: https://docs.unrealengine.com/latest/INT/Programming/Basics/CommandLineArguments/index.html</li> </ul> Batchfile<pre><code>UnrealEngine\\\\Engine\\\\Binaries\\\\Win64\\\\UE4Editor.exe \"UnrealEngine\\BBR\\BBR.uproject\" 0-LevelStart?listen -Game\nUnrealEngine\\\\Engine\\\\Binaries\\\\Win64\\\\UE4Editor.exe \"UnrealEngine\\BBR\\BBR.uproject\" -Game 192.168.0.17\nUnrealEngine\\\\Engine\\\\Binaries\\\\Win64\\\\UE4Editor.exe\nUnrealEngine\\\\BBR\\\\BBR.uproject 0-LevelLockArena?listen -Game\nUnrealEngine\\\\Engine\\\\Binaries\\\\Win64\\\\UE4Editor-Win64-Debug.exe \"UnrealEngine\\\\BBR\\\\BBR.uproject\" 1-SimpleMasterArenaFlow?listen -Game -log\n</code></pre> <p>Launch server mode in standalone build:</p> C++<pre><code> ?listen -server\n</code></pre>"},{"location":"ue4guide/networking/replay-system/","title":"Useful Posts","text":"<p>https://udn.unrealengine.com/questions/403084/some-guidance-on-the-replay-system.html https://udn.unrealengine.com/questions/395835/replay-playback-stuck-at-origin.html https://udn.unrealengine.com/questions/320000/im-looking-at-the-fhttpnetworkreplaystreamer-class.html https://udn.unrealengine.com/questions/400129/in-memory-replay.html https://udn.unrealengine.com/questions/332388/getting-an-instant-replay-in-a-network-game.html https://udn.unrealengine.com/questions/379831/cant-get-replay-to-work-in-415.html</p>"},{"location":"ue4guide/networking/replay-system/#duplicating-worlduworldlevels","title":"Duplicating World/UWorld/Levels","text":"<p>https://udn.unrealengine.com/questions/417480/finmemorynetworkreplaystreamer-killcam.html</p> <p>Yes, this is likely a known issue. https://issues.unrealengine.com/issue/UE-48320</p> <p>The ticket doesn't elaborate heavily, but it comes down to how we manage level collections. Basically, if you try to start / stop / playback recording at certain times the underlying NetDriver may get switched out from underneath you.</p>"},{"location":"ue4guide/networking/replay-system/#how-can-i-stay-connected-with-the-same-controller","title":"How can I stay connected with the same controller?","text":"<p>We did this for Paragon, and also UT.</p> <p>Generally speaking, the process looks like this.</p> <ol> <li>Determine you need to do a replay.</li> <li>Create a duplicate LevelCollection with appropriate levels (see UWorld::DuplicateRequestedLevels)</li> <li>Set the LevelPrefixOverride (passed in as a URL / Additional option to PlayReplay).</li> <li>Detect once the replay has actually begin (via a PostLoadMap).</li> <li>Grab the demo time, and track it.</li> </ol> <p>The comments imply TimeBufferHintSeconds determines how long the replay will be</p> <p>Actually, that has nothing to do with how long the replay is. It's to help limit memory usage. In other ReplayStreamers, we just read the data directly from disk and don't keep anything in persistent memory (except for some buffered up packets).</p> <p>However, the memory streamer will try to keep things loaded up. The problem is that currently checkpoints store basically the entire state of the game, and so they get quite large. The TimeBufferHintSeconds helps us by allowing us to throw away checkpoints that may be unnecessary and instead rely on streaming data directly for the replay.</p>"},{"location":"ue4guide/networking/replay-system/#is-this-a-bug-is-there-a-better-way-to-teleport-instantly-without-interpolating-position-in-the-first-place","title":"Is this a bug? Is there a better way to teleport instantly without interpolating position in the first place?","text":"<p>How are you Teleporting? There are explicit Teleport functions on AActor (TeleportTo) that should play nice with movement components. When it detects a teleport (via TeleportSucceeded) the Character Movement Component code should detect this and set the mode appropriately. I would expect that to work in replays.</p> <p>Reference From https://udn.unrealengine.com/questions/417480/finmemorynetworkreplaystreamer-killcam.html</p>"},{"location":"ue4guide/networking/server-travel-connection-flow/","title":"Server travel connection flow","text":"<ul> <li>ServerTravel()</li> <li>Check if can server travel</li> <li>Get game mode</li> <li>GameMode::ProcessServerTravel()</li> <li>GameModeBase::ProcessServerTravel()<ul> <li>StartToLeaveMap()</li> <li>Sets match state to leaving map</li> <li>ProcessClientTravel()</li> <li>Iterates through list of player controllers and calls their client travel if they are Remote players and PreClientTravel if a local player</li> <li>If playing in editor both player controllers are considered local controllers and they get PreClientTravel() called and not ClientTravel()</li> <li>LocalPlayerController::PreClientTravel()<ul> <li>Calls delegate broadcast notifying the new level, type of travel and whether it is seamless</li> </ul> </li> <li>if(bSeamless)</li> <li>Do Seamless travel</li> <li>else (we are not seamless so we do this)</li> <li>Set World::NextSwitchCountdown = 0 so that switch happens immediately on next Tick in TickWorldTravel()</li> </ul> </li> </ul> <p>After the TickWorldTravelI(), the PlayerControllers ClientRestart() and ClientRestart_Implementation get called</p>"},{"location":"ue4guide/networking/useful-functions/","title":"Useful functions","text":"C++<pre><code>FHttpModule/IHttpRequest/IHttpResponse: Wrapper to easily make http requests\n\n// Add a new actor for replication programmatically\n\nSetReplicates(bool bInReplicates)\n\n{\n\nif (Role == ROLE_Authority)\n\n{\n\nif (bReplicates == false &amp;&amp; bInReplicates == true)\n\n{\n\nif (UWorld* MyWorld = GetWorld()) // GetWorld will return nullptr on CDO, FYI\n\n{\n\nMyWorld-&gt;AddNetworkActor(this);\n\n}\n\n}\n\nRemoteRole = (bInReplicates ? ROLE_SimulatedProxy : ROLE_None);\n\nbReplicates = bInReplicates;\n\n}\n\nelse\n\n{\n\nUE_LOG(LogActor, Warning, TEXT(\"SetReplicates called on actor '%s' that is not valid for having its role modified.\"), *GetName());\n\n}\n\n}\n</code></pre> <p>JSON</p> <p>JSON documentation: http://www.wraiyth.com/?p=198</p> JSON<pre><code>/** Class that handles converting Json objects to and from UStructs */\nclass JSONUTILITIES_API FJsonObjectConverter\n\n/**\n * Base class for a JSON serializable object. Derive from this to make your object serializable\n */\nstruct FJsonSerializable\n\n// FJsonSerializable\n        BEGIN_JSON_SERIALIZER\n                JSON_SERIALIZE( \"AppName\",                **AppName** );\n                JSON_SERIALIZE( \"SessionName\",        **SessionName** );\n                JSON_SERIALIZE( \"FriendlyName\",        **FriendlyName** );\n                JSON_SERIALIZE( \"Timestamp\",                **Timestamp** );\n                JSON_SERIALIZE( \"SizeInBytes\",        **SizeInBytes** );\n                JSON_SERIALIZE( \"DemoTimeInMs\",        **DemoTimeInMs** );\n                JSON_SERIALIZE( \"NumViewers\",        **NumViewers** );\n                JSON_SERIALIZE( \"bIsLive\",                **bIsLive** );\n                JSON_SERIALIZE( \"Changelist\",        **Changelist** );\n                JSON_SERIALIZE( \"shouldKeep\",        **bShouldKeep** );\n        END_JSON_SERIALIZER\n</code></pre>"},{"location":"ue4guide/networking/vr-preview-with-networking/","title":"Vr preview with networking","text":"<p>https://udn.unrealengine.com/questions/374348/vr-preview-with-dedicated-server.html&gt;</p> <p>Recommended approach is to run with editor</p> <ol> <li>Server:        <code>UE4Editor.exe MPRepro mptest -server -log</code></li> <li>VR Client(s):  <code>UE4Editor.exe MPRepro 127.0.0.1 -game -vr</code></li> <li>Non-VR Client: <code>UE4Editor.exe MPRepro 127.0.0.1 -game -nohmd</code></li> </ol> <p>Can also specify VR hmd:</p> <ol> <li>VR Client 1: <code>UE4Editor.exe MPRepro 127.0.0.1 -game -vr -hmd=steamvr</code></li> <li>VR Client 2: <code>UE4Editor.exe MPRepro 127.0.0.1 -game -vr -hmd=oculusrift</code></li> </ol> <p>Reference From https://udn.unrealengine.com/questions/374348/vr-preview-with-dedicated-server.html</p> <p>Dedicated server can work with this changelist: https://github.com/EpicGames/UnrealEngine/pull/2514</p>"},{"location":"ue4guide/networking/low-level-networking/adding-custom-multicast/","title":"Networking server call from unauthenticated client","text":"<p>HasNetOwner GetNetOwner GetNetConnection GetNetOwningPlayer</p> <p>https://udn.unrealengine.com/questions/192402/rmi-on-non-controlled-actors.html</p>"},{"location":"ue4guide/networking/low-level-networking/adding-custom-multicast/#functions-to-override","title":"Functions To Override","text":"<p>These are the functions to change client vs server networking checks:</p> <ul> <li>AActor::GetFunctionCallspace</li> <li>UObject::ProcessEvent</li> <li>UNetDriver::ProcessRemoteFunction</li> <li>UObject::CallRemoteFunction</li> </ul> <p>Look at GameplayAbility.cpp &amp; GameplayDebugger:</p> <ul> <li>You can also turn on LogNet verbose logging and follow the output messages when you try to call a non- owned object server function</li> </ul> <p>Other useful functions:</p> <ul> <li>virtual void PostNetReceive() override;</li> </ul>"},{"location":"ue4guide/networking/low-level-networking/low-level-networking-overview/","title":"High Level Overview","text":"<p>UE4 Networking</p> <p>Actor Relevancy: Trade CPU for network bandwidth</p> <p>Reliable function replication:</p> <ul> <li>Function is guaranteed to be called</li> <li>Resent when an error is present</li> <li>Delayed when bandwidth is saturated</li> </ul> <p>Unreliable function replication:</p> <ul> <li>Gets skipped if bandwidth is saturated</li> <li>Does not re-attempt if error occurs</li> </ul> <p>UNetDriver: contains list of connections to Tick</p> <ul> <li>Server: N connections</li> <li>Client: 1 connection</li> <li>UNetConnection: Contains list of channels to replicate</li> <li>UChannel: Logical construct to route data to proper object<ul> <li>Accessed by ChannelID, some have predefined ChannelIDs</li> <li>UControlChannel: For handshake exchange/non-gameplay/processing object loading requests</li> <li>UVoiceChannel: For Voice</li> <li>UActorChannel: For replicating actors</li> <li>Each replicated actor has a channel</li> <li>Actors replicated by dynamically assigned channel ID</li> </ul> </li> </ul>"},{"location":"ue4guide/networking/low-level-networking/low-level-networking-overview/#networking-classes","title":"Networking Classes","text":""},{"location":"ue4guide/networking/low-level-networking/low-level-networking-overview/#custom-unetdriver","title":"Custom UNetDriver","text":"<p>Can create custom netdrivers</p> <ul> <li>Specified through ini</li> </ul> INI<pre><code>[/Script/Engine.Engine]\n!NetDriverDefinitions=ClearArray\n+NetDriverDefinitions=(DefName=\"GameNetDriver\",DriverClassName=\"/Script/BBR.BBNetDriver\",DriverClassNameFallback=\"/Script/OnlineSubsystemUtils.IpNetDriver\")\n+NetDriverDefinitions=(DefName=\"DemoNetDriver\",DriverClassName=\"/Script/Engine.DemoNetDriver\",DriverClassNameFallback=\"/Script/Engine.DemoNetDriver\")\n</code></pre> <ul> <li>PacketHandler created in</li> </ul> C++<pre><code>UNetDriver::InitConnectionlessHandler()\nConnectionlessHandler-&gt;AddHandler(TEXT(\"Engine.EngineHandlerComponentFactory(StatelessConnectHandlerComponent)\"), true);\n</code></pre> <ul> <li> <p>Good starter examples: <code>USteamNetDriver/UOculusNetDriver</code></p> </li> <li> <p><code>UDemoNetDriver</code> is a more fleshed out/advanced example</p> </li> </ul>"},{"location":"ue4guide/networking/low-level-networking/low-level-networking-overview/#custom-unetconnection","title":"Custom UNetConnection","text":"<p>Can create custom UNetConnection</p> <ul> <li>Specified through ini</li> </ul> INI<pre><code>[/Script/OnlineSubsystemUtils.IpNetDriver]\nNetConnectionClassName=\"/Script/OnlineSubsystemUtils.IpConnection\"\n</code></pre> <ul> <li>PacketHandler created in</li> </ul> C++<pre><code>UNetConnection::InitHandler()\nHandler-&gt;AddHandler(TEXT(\"Engine.EngineHandlerComponentFactory(StatelessConnectHandlerComponent)\"), true);\n</code></pre> <ul> <li>These are great examples: <code>USteamNetConnection,UOculusNetConnection,UDemoNetConnection</code></li> </ul>"},{"location":"ue4guide/networking/low-level-networking/low-level-networking-overview/#custom-unetchannel","title":"Custom UNetChannel","text":"<p>Can create custom channels</p> <ul> <li>Specified through ini; can be customized per NetDriver</li> </ul> INI<pre><code>[/Script/Engine.NetDriver]\n+ChannelDefinitions=(ChannelName=Control, ClassName=/Script/Engine.ControlChannel, StaticChannelIndex=0, bTickOnCreate=true, bServerOpen=false, bClientOpen=true, bInitialServer=false, bInitialClient=true)\n</code></pre> <ul> <li> <p><code>SendBunch()</code> is the workhorse that preps stuff for sending</p> </li> <li> <p><code>UVoiceChannel</code> is a great simple starting point</p> </li> <li> <p><code>UActorChannel</code> is more fleshed out</p> </li> <li>ActorChannel manages the creation and lifetime of a replicated actor</li> <li>FObjectReplicator: Does Actual replication of properties and RPCs (see DataReplication.h)</li> </ul>"},{"location":"ue4guide/networking/low-level-networking/low-level-networking-overview/#code-flow","title":"Code Flow","text":""},{"location":"ue4guide/networking/low-level-networking/low-level-networking-overview/#broadcasttickdispatch","title":"BroadcastTickDispatch()","text":"<ul> <li>LevelTick.cpp:UWorld:Tick()::BroadcastTickDispatch()</li> <li>Called at Top of tick -&gt; BroadcastTickDispatch()</li> <li>Entry point where client receives all network requests</li> </ul>"},{"location":"ue4guide/networking/low-level-networking/low-level-networking-overview/#netdrivertickdispatch","title":"NetDriver::TickDispatch()","text":"<p>The main entry point for processing low level networking packets. WARNING: By default, this is packet processing from sockets is synchronous and happens on the game thread!</p> <p>NetDriver::TickDispatch</p> <ul> <li>Processes incoming packets from its SocketSubsystem</li> <li>Does some DDos logic</li> <li>Some useful bits here for debugging</li> <li>GIpNetDriverMaxDesiredTimeSliceBeforeAlarmSecs: Trigger warning if packet processing is longer than this timeslice</li> <li>OnNetworkProcessingCausingSlowFrame: Delegate if network processing blocks the frame for too long</li> <li>Handles initial connection handshake through PacketHandler</li> <li>PacketHandler is extended using HandlerComponents</li> <li>They process the raw packets</li> <li>Example Handler Components: StatelessHandler, AESEncryptionHandler, OodleHandler for packet compression</li> <li>Setup UNetConnection (these are the UE4 abstraction of connections to different machines)</li> <li>Server:<ul> <li>ServerConnection: <code>nullptr</code> This is assumption is baked in a lot of places that relies on IsServer() to mean <code>ServerConnection == null</code></li> <li>ClientConnections: One for each client</li> </ul> </li> <li>Client:<ul> <li>ServerConnection: connection to server</li> <li>ClientConnections: <code>nullptr</code></li> </ul> </li> <li>Read Packet data</li> <li>By default, socket recieve happens on this thread</li> <li>IpNetDriver: Can be configured so that it spawns a separate recieve thread to queue packets from the socket.</li> <li>If bUsingReceiveThread is enabled:<ul> <li>RecieveThread buffers packets into a queue</li> <li>TickDispatch() dequeues <code>FReceivedPacket</code> structs and copies the packet into a thread local memory buffer</li> </ul> </li> <li>If it's not enabled:<ul> <li>Reads the socket packets directly <code>bOk = Socket-&gt;RecvFrom(Data, sizeof(Data), BytesRead, *FromAddr);</code></li> </ul> </li> <li>(UNetConnection)Connection-&gt;ReceivedRawPacket(Data, BytesRead);</li> <li>Handler-&gt;Incoming(): Sends packet data to PacketHandler<ul> <li>Processes incoming packets at the PacketHandler level, before any UNetConnection processing takes place on the packet.</li> <li>Use this for more complex changes to packets, such as compression/encryption</li> <li>But be aware that compatibility problems with other HandlerComponent's are more likely.</li> </ul> </li> <li>Some very light security checking<ul> <li>Sets EngineNetworkProtocolVersion &amp; GameNetworkProtocolVersion in packet stream</li> </ul> </li> </ul>"},{"location":"ue4guide/networking/low-level-networking/low-level-networking-overview/#unetconnectionreceivedpacket","title":"UNetConnection::ReceivedPacket()","text":"<ul> <li>UNetConnection::ReceivedPacket(): Workhorse of packet processing (still lowlevel)</li> <li>ValidateSendBuffer()</li> <li>Handles Ack/Nacks</li> <li>Reads headers, the bunch' channel sequence number, etc</li> <li> <p>Constructs the FInBunch</p> C++<pre><code>FInBunch Bunch( this );\nint32 IncomingStartPos      = Reader.GetPosBits();\nuint8 bControl              = Reader.ReadBit();\nBunch.PacketId              = InPacketId;\nBunch.bOpen                 = bControl ? Reader.ReadBit() : 0;\nBunch.bClose                = bControl ? Reader.ReadBit() : 0;\nBunch.CloseReason           = Bunch.bClose ? (EChannelCloseReason)Reader.ReadInt((uint32)EChannelCloseReason::MAX) : EChannelCloseReason::Destroyed;\nBunch.bDormant              = (Bunch.CloseReason == EChannelCloseReason::Dormancy);\nBunch.bIsReplicationPaused  = Reader.ReadBit();\nBunch.bReliable             = Reader.ReadBit();\nBunch.ChIndex               = ChIndex;\nBunch.bHasPackageMapExports = Reader.ReadBit();\nBunch.bHasMustBeMappedGUIDs = Reader.ReadBit();\nBunch.bPartial              = Reader.ReadBit();\nBunch.ChName                = ...\nBunch.ChType                = ...\n</code></pre> </li> <li> <p>Constructs the UChannel object if needed</p> </li> <li>(UChannel)Channel-&gt;ReceivedRawBunch(): Lowlevel Bunch processing and construction with checking against attacks (like replay attacks)<ul> <li>ReceivedNextBunch():</li> <li>We received the next bunch. Basically at this point<ul> <li>We know this is in order if reliable</li> <li>We dont know if this is partial or not</li> <li>If its not a partial bunch, of it completes a partial bunch, we can call ReceivedSequencedBunch to actually handle it</li> </ul> </li> <li>ReceivedSequencedBunch(): Light wraper for main bunch processing that does cleanup after main call<ul> <li>ReceivedBunch(): Main entry point for bunch processing</li> </ul> </li> </ul> </li> </ul>"},{"location":"ue4guide/networking/low-level-networking/low-level-networking-overview/#uchannelreceivedbunch","title":"UChannel::ReceivedBunch()","text":"<p>This is where main bunch processing happens and the function overridden by UActorChannel, UVoiceChannel,etc</p> <ul> <li>UActorChannel::ReceivedBunch()</li> <li>Resolve NetGuids: Logic for netguid pammping, packagemapclient, etc</li> <li>ProcessBunch()</li> <li>Initialize client if first time through.<ul> <li>Spawn New Actor if necessary</li> <li>Connection-&gt;PackageMap-&gt;SerializeNewActor(Bunch, this, NewChannelActor);</li> <li>Sets if replication is paused</li> <li>Sets up FReplicationFlags like bIgnoreRPCs, bReplay, bRepPhysics, etc</li> </ul> </li> <li>Read chunks of actor content<ul> <li>ReadContentBlockPayload(): Read the content block header and payload</li> <li>FObjectReplicator&amp; Replicator = FindOrCreateReplicator(RepObj): Main workhorse for actor replication</li> <li>(FObjectReplicator)Replicator-&gt;ReceivedBunch()</li> </ul> </li> <li>Cleanup<ul> <li>Update UActorChannel.ReplicationMap</li> <li>ObjectReplicator-&gt;PostReceivedBunch()</li> <li>If new SpawnedActor: Actor-&gt;PostNetInit()</li> </ul> </li> </ul>"},{"location":"ue4guide/networking/low-level-networking/low-level-networking-overview/#fobjectreplicator","title":"FObjectReplicator","text":"<ul> <li>General Info</li> <li>Generic class that replicates properties for an object.</li> <li>All delta/diffing work is done in this class.</li> <li>Its primary job is to produce and consume chunks of properties/RPCs:</li> <li> <p>Layout</p> NetGUID ObjRef Properties... RPCs... ---------------- ---------------- </li> <li> <p>FObjectReplicator::ReceivedBunch(): Main entry point</p> </li> <li> <p>For RPCS: Calls FObjectReplicator::ReceivedRPC()</p> <ul> <li>Calls UE4's UFunction processing through Object-&gt;ProcessEvent()</li> <li>USEFUL NOTE: Has logic for automatically forwarding RPCs to other netdrivers (probably for demonetdriver)</li> </ul> C++<pre><code>if (Connection-&gt;Driver-&gt;ShouldForwardFunction(OwningActor, Function, Parms))\n{\n  FWorldContext* const Context = GEngine-&gt;GetWorldContextFromWorld(Connection-&gt;Driver-&gt;GetWorld());\n  if (Context != nullptr)\n  {\n    UObject* const SubObject = Object != OwningChannel-&gt;Actor ? Object : nullptr;\n\n    for (FNamedNetDriver&amp; Driver : Context-&gt;ActiveNetDrivers)\n    {\n      if (Driver.NetDriver != nullptr &amp;&amp; (Driver.NetDriver != Connection-&gt;Driver) &amp;&amp; Driver.NetDriver-&gt;ShouldReplicateFunction(OwningActor, Function))\n      {\n        Driver.NetDriver-&gt;ProcessRemoteFunction(OwningActor, Function, Parms, nullptr, nullptr, SubObject);\n      }\n    }\n  }\n}\n</code></pre> </li> <li> <p>Useful bits:</p> </li> <li><code>IsCustomDeltaProperty()</code>: &amp; STRUCT_NetDeltaSerializeNative</li> <li><code>FReplicatedActorProperty</code>: struct containing property and offset for replicated actor properties</li> <li><code>FReplicationChangelistMgr</code>: manages a list of change lists for a particular replicated object that have occurred since the object started replicating</li> <li>Once the history is completely full, the very first changelist will then be merged with the next one (freeing a slot)<ul> <li>This way we always have the entire history for join in progress players</li> <li>This information is then used by all connections, to share the compare work needed to determine what to send each connection</li> <li>Connections will send any changelist that is new since the last time the connection checked</li> </ul> </li> </ul>"},{"location":"ue4guide/networking/low-level-networking/low-level-networking-overview/#uworldbroadcastposttickdispatch","title":"UWorld::BroadcastPostTickDispatch()","text":"<ul> <li>LevelTick.cpp:UWorld:Tick()::BroadcastPostTickDispatch()</li> <li>Called right after BroadcastTickDispatch()</li> <li>Calls UNetDriver::PostTickDispatch<ul> <li>ReplicationDriver-&gt;PostTickDispatch()</li> <li>GRPCCSVTracker.EndTickDispatch()</li> </ul> </li> </ul>"},{"location":"ue4guide/networking/low-level-networking/low-level-networking-overview/#uworldticknetclient","title":"UWorld::TickNetClient()","text":"<ul> <li>LevelTick.cpp:UWorld:Tick()::UWorld::TickNetClient()</li> <li>Called right after BroadcastTickDispatch()</li> <li>Does checks if the socket is closed and if it was, throw a network failure error</li> </ul>"},{"location":"ue4guide/networking/low-level-networking/low-level-networking-overview/#uworldbroadcasttickflush","title":"UWorld::BroadcastTickFlush()","text":"<ul> <li>LevelTick.cpp:UWorld:Tick()::BroadcastTickFlush()</li> <li>Bottom of tick-&gt; UNetDriver::TickFlush() where all the Replication magic happens from client to everywhere else</li> </ul>"},{"location":"ue4guide/networking/low-level-networking/low-level-networking-overview/#uworldbroadcastposttickflush","title":"UWorld::BroadcastPostTickFlush()","text":"<ul> <li>LevelTick.cpp:UWorld:Tick()::BroadcastPostTickFlush()</li> <li>UNetDriver::PostTickFlush() is the only thing that's bound<ul> <li>Only calls UOnlineEngineInterface::Get()-&gt;ClearVoicePackets()</li> </ul> </li> </ul>"},{"location":"ue4guide/networking/low-level-networking/message-buspassingtcpudp/","title":"Message buspassingtcpudp","text":"<p>Unreal Message Bus / UDP / TCP Communication: Good example of how to do messaging/communication</p> <p>https://github.com/ue4plugins/GDC2016</p> <p>HttpPost requests in UE4:</p> <p>https://answers.unrealengine.com/questions/2830/best-way-to-perform-a-http-request.html</p> <p>https://answers.unrealengine.com/questions/16832/error-lnk2001-unresolved-external-symbol-fhttpmodu.html</p>"},{"location":"ue4guide/networking/low-level-networking/send-udp-packets-samplecustom-socket/","title":"Send udp packets samplecustom socket","text":"<p>https://wiki.unrealengine.com/UDP_Socket_Sender_Receiver_From_One_UE4_Instance_To_Another</p> <p>Older: https://wiki.unrealengine.com/Third_Party_Socket_Server_Connection</p>"},{"location":"ue4guide/networking/low-level-networking/thin-client-wrappers-and-custom-transport-messaging-example/","title":"Thin client wrappers and custom transport messaging example","text":"<p>https://github.com/andrewgrant/RemoteSession:</p> <ul> <li>A plugin for Unreal that allows one instance to act as a thin-client (rendering and input) to a second instance</li> <li>Shows how to capture the render target framedata (using FFrameGrabber) asynchronously</li> </ul> <p>https://github.com/andrewgrant/BackChannel:</p> <ul> <li>BackChannel is an experimetal plugin that allows external tools and apps to query for and push data into a running Unreal session.</li> <li>The goal is to support 2-3 ubiquitous protocols where implementations can be easily created or found for popular languages. The short term focus is OSC over TCP/IP and JSON REST over HTTP.</li> </ul>"},{"location":"ue4guide/networking/network-replication/custom-replication/","title":"Custom replication","text":"<p>https://udn.unrealengine.com/questions/383972/custom-replication-system.html</p> C++<pre><code>virtual void PreReplication(IRepChangedPropertyTracker &amp; ChangedPropertyTracker) override;\nvirtual void PreReplicationForReplay(IRepChangedPropertyTracker &amp; ChangedPropertyTracker) override;\n</code></pre>"},{"location":"ue4guide/networking/network-replication/custom-struct-serialization-for-networking/","title":"Custom struct serialization for networking","text":"<p>Using netserialize for custom struct serialization: http://www.aclockworkberry.com/custom-struct-serialization-for-networking-in-unreal-engine</p> <ul> <li>To define your own NetSerialize and NetDeltaSerialize on a structure</li> <li>GameplayDebuggerCategoryReplicator.h, FGameplayDebuggerNetPack, and AGameplayDebuggerCategoryReplicator  are good examples of full netserialization</li> </ul> C++<pre><code>struct FGameplayDebuggerNetPack\nclass GAMEPLAYDEBUGGER_API AGameplayDebuggerCategoryReplicator : public Aactor\n</code></pre> <p>NetSerialization.h has lots of comments:</p> C++<pre><code>/**\n * @param Ar                        FArchive to read or write from.\n * @param Map                        PackageMap used to resolve references to UObject\\*\n * @param bOutSuccess        return value to signify if the serialization was succesfull (if false, an error will be logged by the calling function)\n *\n * @return return true if the serialization was fully mapped. If false, the property will be considered 'dirty' and will replicate again on the next update.\n *        This is needed for UActor\\* properties. If an actor's Actorchannel is not fully mapped, properties referencing it must stay dirty.\n *        Note that UPackageMap::SerializeObject returns false if an object is unmapped. Generally, you will want to return false from your ::NetSerialize\n * if you make any calls to ::SerializeObject that return false.\n *\n */\nbool NetSerialize(FArchive&amp; Ar, class UPackageMap\\* Map, bool&amp; bOutSuccess)\n\n/**\n * @param DeltaParms        Generic struct of input parameters for delta serialization\n *\n * @return return true if the serialization was fully mapped. If false, the property will be considered 'dirty' and will replicate again on the next update.\n *        This is needed for UActor\\* properties. If an actor's Actorchannel is not fully mapped, properties referencing it must stay dirty.\n *        Note that UPackageMap::SerializeObject returns false if an object is unmapped. Generally, you will want to return false from your ::NetSerialize\n * if you make any calls to ::SerializeObject that return false.\n *\n*/\n\nbool NetDeltaSerialize(FNetDeltaSerializeInfo &amp; DeltaParms)\n</code></pre>"},{"location":"ue4guide/networking/network-replication/detailed-network-serialization/","title":"Detailed network serialization","text":"<p>NetSerialization.h:</p>"},{"location":"ue4guide/networking/network-replication/detailed-network-serialization/#an-overview-of-net-serialization-and-how-this-all-works","title":"An Overview of Net Serialization and how this all works","text":"<p>Everything originates in UNetDriver::ServerReplicateActors.</p> <p>Actors are chosen to replicate, create actor channels, and UActorChannel::ReplicateActor is called.</p> <p>ReplicateActor is ultimately responsible for deciding what properties have changed, and constructing a FOutBUnch to send to clients.</p> <p>The UActorChannel has 2 ways to decide what properties need to be sent.</p> <p>The traditional way, which is a flat TArray&lt;uint8&gt; buffer: UActorChannel::Recent. This represents a flat block of the actor properties.</p> <p>This block literally can be cast to an AActor* and property values can be looked up if you know the UProperty offset.</p> <p>The Recent buffer represents the values that the client using this actor channel has. We use recent to compare to current, and decide what to send.</p> <p>This works great for 'atomic' properties; ints, floats, object*, etc.</p> <p>It does not work for 'dynamic' properties such as TArrays, which store values Num/Max but also a pointer to their array data,</p> <p>The array data has no where to fit in the flat ::Recent buffer. (Dynamic is probably a bad name for these properties)</p> <p>To get around this, UActorChannel also has a TMap for 'dynamic' state. UActorChannel::RecentDynamicState. This map allows us to look up</p> <p>a 'base state' for a property given a property's RepIndex.</p>"},{"location":"ue4guide/networking/network-replication/detailed-network-serialization/#netserialize--netdeltaserialize","title":"NetSerialize &amp; NetDeltaSerialize","text":"<p>Properties that fit into the flat Recent buffer can be serialized entirely with NetSerialize. NetSerialize just reads or writes to an FArchive.</p> <p>Since the replication can just look at the Recent[] buffer and do a direct comparison, it can tell what properties are dirty. NetSerialize just reads or writes.</p> <p>Dynamic properties can only be serialized with NetDeltaSerialize. NetDeltaSerialize is serialization from a given base state, and produces</p> <p>both a 'delta' state (which gets sent to the client) and a 'full' state (which is saved to be used as the base state in future delta serializes).</p> <p>NetDeltaSerialize essentially does the diffing as well as the serialization. It must do the diffing so it can know what parts of the property it must send.</p>"},{"location":"ue4guide/networking/network-replication/detailed-network-serialization/#base-states-and-dynamic-properties-replication","title":"Base States and dynamic properties replication.","text":"<p>As far as the replication system / UActorChannel is concerned, a base state can be anything. The base state only deals with INetDeltaBaseState*.</p> <p>UActorChannel::ReplicateActor will ultimately decide whether to call UProperty::NetSerializeItem or UProperty::NetDeltaSerializeItem.</p> <p>As mentioned above NetDeltaSerialize takes in an extra base state and produces a diff state and a full state. The full state produced is used as the base state for future delta serialization. NetDeltaSerialize uses the base state and the current values of the actor to determine what parts it needs to send.</p> <p>The INetDeltaBaseStates are created within the NetDeltaSerialize functions. The replication system / UActorChannel does not know about the details.</p> <p>Right now, there are 2 forms of delta serialization: Generic Replication and Fast Array Replication.</p>"},{"location":"ue4guide/networking/network-replication/detailed-network-serialization/#generic-delta-replication","title":"Generic Delta Replication","text":"<p>Generic Delta Replication is implemented by UStructProperty::NetDeltaSerializeItem, UArrayProperty::NetDeltaSerializeItem, UProperty::NetDeltaSerializeItem.</p> <p>It works by first NetSerializing the current state of the object (the 'full' state) and using memcmp to compare it to previous base state. UProperty is what actually implements the comparison, writing the current state to the diff state if it has changed, and always writing to the full state otherwise.</p> <p>The UStructProperty and UArrayProperty functions work by iterating their fields or array elements and calling the UProperty function, while also embedding meta data.</p> <p>For example UArrayProperty basically writes:  \"Array has X elements now\" -&gt; \"Here is element Y\" -&gt; Output from UProperty::NetDeltaSerialize -&gt; \"Here is element Z\" -&gt; etc</p> <p>Generic Data Replication is the 'default' way of handling UArrayProperty and UStructProperty serialization. This will work for any array or struct with any</p> <p>sub properties as long as those properties can NetSerialize.</p>"},{"location":"ue4guide/networking/network-replication/detailed-network-serialization/#custom-net-delta-serialiation","title":"Custom Net Delta Serialiation","text":"<p>Custom Net Delta Serialiation works by using the struct trait system. If a struct has the WithNetDeltaSerializer trait, then its native NetDeltaSerialize</p> <p>function will be called instead of going through the Generic Delta Replication code path in UStructProperty::NetDeltaSerializeItem.</p>"},{"location":"ue4guide/networking/network-replication/detailed-network-serialization/#fast-tarray-replication","title":"Fast TArray Replication","text":"<p>Fast TArray Replication is implemented through custom net delta serialization. Instead of a flat TArray buffer to repesent states, it only is concerned with a TMap of IDs and ReplicationKeys. The IDs map to items in the array, which all have a ReplicationID field defined in FFastArraySerializerItem.</p> <p>FFastArraySerializerItem also has a ReplicationKey field. When items are marked dirty with MarkItemDirty, they are given a new ReplicationKey, and assigned a new ReplicationID if they don't have one.</p> <p>FastArrayDeltaSerialize (defined below)</p> <p>During server serialization (writing), we compare the old base state (e.g, the old ID&lt;-&gt;Key map) with the current state of the array. If items are missing we write them out as deletes in the bunch. If they are new or changed, they are written out as changed along with their state, serialized via a NetSerialize call.</p> <p>For example, what actually is written may look like:</p> <p>\"Array has X changed elements, Y deleted elements\" -&gt; \"element A changed\" -&gt; Output from NetSerialize on rest of the struct item -&gt; \"Element B was deleted\" -&gt; etc</p> <p>Note that the ReplicationID is replicated and in sync between client and server. The indices are not.</p> <p>During client serialization (reading), the client reads in the number of changed and number of deleted elements. It also builds a mapping of ReplicationID -&gt; local index of the current array.</p> <p>As it deserializes IDs, it looks up the element and then does what it needs to (create if necessary, serialize in the current state, or delete).</p> <p>There is currently no delta serialization done on the inner structures. If a ReplicationKey changes, the entire item is serialized. If we had use cases where we needed it, we could delta serialization on the inner dynamic properties. This could be done with more struct customization.</p> <p>ReplicationID and ReplicationKeys are set by the MarkItemDirty function on FFastArraySerializer. These are just int32s that are assigned in order as things change.</p> <p>There is nothing special about them other than being unique.</p>"},{"location":"ue4guide/networking/network-replication/detailed-replication-flow/","title":"Code Flow","text":"<p>UNetDriver::ServerReplicateActors. This is where the server will gather all of the actors that it has determined to be relevant for each client, and send any properties that have changed since the last time each connected client was updated.</p> <p>Reference From https://docs.unrealengine.com/en-us/Gameplay/Networking/Actors/ReplicationFlow</p> <p>Important functions for how actors are updated:</p> <ul> <li> <p>AActor::NetUpdateFrequency - Used to determine how often an actor replicates</p> </li> <li> <p>AActor::PreReplication - Called before any replication occurs</p> </li> <li> <p>AActor::bOnlyRelevantToOwner - True if this actor only replicates to owner</p> </li> <li> <p>AActor::IsRelevancyOwnerFor - Called to determine relevancy when bOnlyRelevantToOwner is true</p> </li> <li> <p>AActor::IsNetRelevantFor - Called to determine relevancy when bOnlyRelevantToOwner is false</p> </li> </ul> <p>The high level flow looks like this:</p> <ul> <li> <p>Loop over each actor that is actively replicating (AActor::SetReplicates( true ))</p> </li> <li> <p>Determine if this actor is initially dormant (DORM_Initial), and if so, skip immediately.</p> </li> <li> <p>Determine if the actor needs to update by checking the NetUpdateFrequency value, if not skip</p> </li> <li> <p>If AActor::bOnlyRelevantToOwner is true, check the owning connection of this actor for relevancy by calling AActor::IsRelevancyOwnerFor on the viewer of the owning connection. If relevant, add to owned relevant list on the connection.</p> <ul> <li>In this case, this actor will only send to a single connection.</li> </ul> </li> <li> <p>For any actor that passes these initial checks, AActor::PreReplication is called.</p> <ul> <li>PreReplication is a place where you can decide if you want properties to replicate for connections. Use the DOREPLIFETIME_ACTIVE_OVERRIDE for this.</li> </ul> </li> <li> <p>If we pass the above, add to the considered list</p> </li> <li> <p>For each connection:</p> </li> <li> <p>For each considered actor from above</p> <ul> <li> <p>Determine if dormant</p> </li> <li> <p>If there is no channel yet</p> </li> <li> <p>Determine if client has loaded the level the actor is in</p> <ul> <li>If not loaded, skip</li> </ul> </li> <li> <p>Determine if the actor is relevant by calling AActor::IsNetRelevantFor for the connection</p> <ul> <li>If not relevant, skip</li> </ul> </li> </ul> </li> <li> <p>Add any actors on the connections owned relevant list from above</p> </li> <li> <p>At this point, we have a list of actors that are relevant for this connection</p> </li> <li> <p>Sort actors by priority</p> </li> <li> <p>For each sorted actor:</p> <ul> <li> <p>If the connection hasn't loaded the level this actor is in, close the channel (if any), and continue</p> </li> <li> <p>Every 1 second, determine if actor is relevant to connection by calling AActor::IsNetRelevantFor</p> </li> <li> <p>If not relevant for 5 seconds, close channel</p> </li> <li> <p>If relevant and no channel is open, open one now</p> </li> <li> <p>If at any point this connection is saturated</p> </li> <li> <p>For remaining actors</p> <ul> <li> <p>If relevant for less than 1 second, force an update next tick</p> </li> <li> <p>If relevant for more than 1 second, call AActor::IsNetRelevantFor to determine if we should update next tick</p> </li> </ul> </li> <li> <p>For any actor that passes all of the above, the actor is replicated to the connection by calling UChannel::ReplicateActor</p> </li> </ul> </li> </ul> <p>Reference From https://docs.unrealengine.com/en-us/Gameplay/Networking/Actors/ReplicationFlow</p>"},{"location":"ue4guide/networking/network-replication/detailed-replication-flow/#detailed-actor-replication-flow","title":"Detailed Actor Replication Flow","text":"<p>The bulk of actor replication happens inside UNetDriver::ServerReplicateActor</p> <p>Reference From https://docs.unrealengine.com/latest/INT/Gameplay/Networking/Actors/ReplicationFlow/index.html</p> <p>USTRUCT updates aren't atomic:</p> <p>We are running into some infrequent crashes resulting from out-of-order property replication as a result of dropped packets. The situation is basically exactly what is described here:</p> <p>https://udn.unrealengine.com/questions/240480/are-structs-replicated-atomically.html</p> <ul> <li> <p>Frame 1 sets A.a = 0, A.b = 0</p> </li> <li> <p>Frame 2 sets A.a = 1, A.b = 1</p> </li> <li> <p>Frame 3 sets A.a = 1, A.b = 2</p> </li> </ul> <p>If the packet containing Frame 2's property updates gets dropped and Frame 3's doesn't, the client will momentarily see A.a = 0, A.b = 2, even though that state never existed on the server, and may be an entirely impossible and unhandled state. Upon receiving the network packet for Frame 3, the client will send a NAK to the server which will result in the missing data eventually making it to the client, but in the meantime the client is in an awkward state.</p> <p>Reference From https://udn.unrealengine.com/questions/287584/property-replication-promises.html</p>"},{"location":"ue4guide/networking/network-replication/detailed-replication-flow/#replicating-an-actor-to-a-connection","title":"Replicating an Actor to a Connection","text":"<p>UChannel::ReplicateActor is the workhorse for replicating an actor and all of its components to a connection. The flow looks something like this:</p> <ul> <li> <p>Determine if this is the first update since this actor channel was opened</p> </li> <li> <p>If so, serialize specific information that is needed (initial location, rotation, etc)</p> </li> <li> <p>Determine if this connection owns this actor</p> </li> <li> <p>If not owned, and this actor's role is ROLE_AutonomousProxy, then downgrade to ROLE_SimulatedProxy</p> </li> <li> <p>Replicate this actors changed properties</p> </li> <li> <p>Replicate each component's changed properties</p> </li> <li> <p>For any deleted components, send special delete command</p> </li> </ul> <p>Reference From https://docs.unrealengine.com/en-us/Gameplay/Networking/Actors/ReplicationFlow</p>"},{"location":"ue4guide/networking/network-replication/detailed-replication-flow/#spawninitial-replication-logic","title":"Spawn/Initial Replication Logic","text":"<p>Server tells client to spawn actor</p> <p>On the client:</p> <ul> <li>SpawnActor() locally on the client through its (network) ActorChannel</li> <li>This just uses the Spawn() template mechanism. <li>Then any UPROPERTY() (possibly only if they're marked for replication?) that come in the first replication bunch. Note: this can be any changes in the UPROPERTY that happened before engine got a chance to replicate, not just properties that have been set before a deferred spawn.</li> <li>PostNetInit() gets called, ensuring all the replicated initial properties of the actor have been initialized</li> <li>Also calls BeginPlay(). BeginPlay() is blocked for \"networked spawned\" Actors on clients. It still gets called in Spawn&lt;&gt; on the server during<ul> <li>IMPORTANT: Which really means BeginPlay() should only use UPROPERTIES() that are meant to be set and default configuration time</li> </ul> </li> <li>Can also create replication conditions on properties to only replicate on initial with COND_InitialOnly</li> <p>Reference:</p> <ul> <li> <p>When a replicated client is spawned on the server, an Actor channel is opened to the client, which spawns the Actor locally (the channel is used to keep the Actor up to date) when the Actor channel is closed, the client will delete the Actor. Reference From https://udn.unrealengine.com/questions/306400/spawn-an-actor-on-the-server-and-use-it-as-paramet.html</p> </li> <li> <p>Does this mean that it is safe to assume that PostNetInit() and BeginPlay() will not get called on the Client actor until it has received the entirety of it's initial network properties? This should be true for PostNetInit, not for BeginPlay though. Reference From https://udn.unrealengine.com/questions/226302/join-in-progress-initial-replication-completion.html</p> </li> <li> <p>We actually do know when a replication comes from the initial bunch that opens the channel. Since the initial bunch is reliable, any property that was changed from the default is guaranteed to come with that bunch, so we should be safe there. Maybe this is something we can explore more internally to expose. Reference From https://udn.unrealengine.com/questions/226302/join-in-progress-initial-replication-completion.html</p> </li> </ul> C++<pre><code>/**\n *Standard method of serializing a new actor.\n *For static actors, this will just be a single call to SerializeObject, since they can be referenced by their path name.\n *For dynamic actors, first the actor's reference is serialized but will not resolve on clients since they haven't spawned the actor yet.\n *The actor archetype is then serialized along with the starting location, rotation, and velocity.\n *After reading this information, the client spawns this actor in the NetDriver's World and assigns it the NetGUID it read at the top of the function.\n *\n*returns true if a new actor was spawned. false means an existing actor was found for the netguid.\n*/\nbool UPackageMapClient::SerializeNewActor(FArchive&amp; Ar, class UActorChannel *Channel, class AActor*&amp; Actor)\n</code></pre>"},{"location":"ue4guide/networking/network-replication/detailed-replication-flow/#how-to-dynamically-add-component-in-begin-play-c-with-replication","title":"How to dynamically add component in begin play C++ with replication","text":"<p>For posterity, the following code will successfully create and replicate a component dynamically in C++:</p> C++<pre><code>MyDynamicRepComponent = ConstructObject&amp;lt;UMyComponent&gt;(MyComponentClass, Outer);\nMyDynamicRepComponent-&gt;SetIsReplicated(true);\nMyDynamicRepComponent-&gt;RegisterComponent();\n</code></pre> <p>This must be executed only on the server (components will be spawned automatically on clients), and at an appropriate time when all the net plumbing is initialized (my test was in AMyController::BeginPlay). I did not need the function SetNetAddressable() anywhere, and doing so in fact causes the \"Stably named sub-object not found\" error to occur as in the OP. Outer is a pointer to the object this component is being created for/in, and MyComponentClass is a TSubclassOf. As you can see from the usage of ConstructObject, you do not need to provide your own (i.e. stable by convention) name for this new component.</p> <p>Reference From https://udn.unrealengine.com/questions/236164/dynamically-add-component-in-begin-play.html</p>"},{"location":"ue4guide/networking/network-replication/detailed-replication-flow/#replication-keys","title":"Replication Keys","text":"C++<pre><code>bool UActorChannel::ReplicateSubobject(UObject *Obj, FOutBunch &amp;Bunch, const FReplicationFlags &amp;RepFlags)\n{\n  // Hack for now: subobjects are SupportsObject==false until they are replicated via ::ReplicateSUbobject, and then we make them supported\n  // here, by forcing the packagemap to give them a NetGUID.\n  //\n  // Once we can lazily handle unmapped references on the client side, this can be simplified.\n  if ( !Connection-&gt;Driver-&gt;GuidCache-&gt;SupportsObject( Obj ) )\n  {\n    FNetworkGUID NetGUID = Connection-&gt;Driver-&gt;GuidCache-&gt;AssignNewNetGUID_Server( Obj );\t//Make sure he gets a NetGUID so that he is now 'supported'\n  }\n\n  bool NewSubobject = false;\n\n  TWeakObjectPtr&lt;UObject&gt; WeakObj(Obj);\n\n  if (!ObjectHasReplicator(WeakObj))\n  {\n    // This is the first time replicating this subobject\n    // This bunch should be reliable and we should always return true\n    // even if the object properties did not diff from the CDO\n    // (this will ensure the content header chunk is sent which is all we care about\n    // to spawn this on the client).\n    Bunch.bReliable = true;\n    NewSubobject = true;\n  }\n  bool WroteSomething = FindOrCreateReplicator(WeakObj).Get().ReplicateProperties(Bunch, RepFlags);\n  if (NewSubobject &amp;&amp; !WroteSomething)\n  {\n    // Write empty payload to force object creation\n    FNetBitWriter EmptyPayload;\n    WriteContentBlockPayload( Obj, Bunch, false, EmptyPayload );\n    WroteSomething= true;\n  }\n\n  return WroteSomething;\n}\n</code></pre>"},{"location":"ue4guide/networking/network-replication/fast-tarray-replication/","title":"Fast tarray replication","text":"<p>Reference From https://udn.unrealengine.com/questions/164217/how-can-i-improve-performance-of-tarray-replicatio.html</p>"},{"location":"ue4guide/networking/network-replication/fast-tarray-replication/#overview","title":"Overview","text":"<ul> <li>It\u2019s a faster way to replicate large TArrays of structs. For a large dataset of about 10K, we saw server cpu time go from 3ms to 0.05ms to replicate the very large array when it had changed. When the array has not changed, there is very little performance overhead.</li> <li>You also get add/delete/change events on the client side, and there isn\u2019t the \u2018remove from middle of array causes everything after it to be resent\u2019 problem that generic TArray replication has.</li> <li>The tradeoff is you have to mark elements in the array as dirty when game code changes them. List order is also not guaranteed to be preserved between client/server in all cases.</li> <li>You opt into this type of replication by setting up your structure a certain way. See NetSerialization.h and below.</li> </ul> <p>Keep in mind its still important to optimize your replicated data. The data set being replciated should be as small as possible. Even though the replication only sends the bare minimum of what data has changed, it still has to chew through the entire set of data to find out what changed.</p>"},{"location":"ue4guide/networking/network-replication/fast-tarray-replication/#details","title":"Details","text":"<p>Below is an example of using fast TArray in a structure called FExampleItemEntry (the same code can be found in NetSerialization.h for easier copy/paste). The TArray of these structs is then wrapped in another structure, FExampleArray. Follow the step in the comments to make use of it in your own structure.</p> C++<pre><code>/** Step 1: Make your struct inherit from FFastArraySerializerItem */\nUSTRUCT()\nstruct FExampleItemEntry : public FFastArraySerializerItem\n{\n  GENERATED_USTRUCT_BODY()\n  // Your data:\n  UPROPERTY()\n  int32 ExampleIntProperty;\n  UPROPERTY()\n  float ExampleFloatProperty;\n  /** Optional functions you can implement for client side notification of changes to items */\n  void PreReplicatedRemove();\n  void PostReplicatedAdd();\n  void PostReplicatedChange();\n};\n\n/** Step 2: You MUST wrap your TArray in another struct that inherits from FFastArraySerializer */\nUSTRUCT()\nstruct FExampleArray: public FFastArraySerializer\n{\n  GENERATED_USTRUCT_BODY()\n  UPROPERTY()\n  TArray&amp;lt;FExampleItemEntry&gt; Items; /** Step 3: You MUST have a TArray named Items of the struct you made in step 1. */\n  /** Step 4: Copy this, replace example with your names */\n  bool NetDeltaSerialize(FNetDeltaSerializeInfo &amp; DeltaParms)\n  {\n  return FastArrayDeltaSerialize&amp;lt;FExampleItemEntry&gt;( Items, DeltaParms );\n  }\n};\n\n/** Step 5: Copy and paste this struct trait, replacing FExampleArray with your Step 2 struct. */\ntemplate&lt;&gt;\nstruct TStructOpsTypeTraits&lt; FExampleArray &gt; : public TStructOpsTypeTraitsBase\n{\n  enum\n  {\n  WithNetDeltaSerializer = true,\n  };\n};\n</code></pre> <p>Now to use, just:</p> <ul> <li>Declare a UPROPERTY of your FExampleArray (step 2) type.</li> <li>You MUST call MarkItemDirty on the FExampleArray when you change an item in the array. You pass in a reference to the item you dirtied.</li> <li>See FFastArraySerializer::MarkItemDirty.</li> <li>You should call MarkArrayDirty on the FExampleArray when you remove an item from the array. It does not need to be called exactly 1 time per deletion (for example if you are removing 10 items in a function, call MarkArrayDirty once at the start or end of the function is sufficient).</li> <li>In your classes GetReplicationList, use DOREPSTRUCT(YourClass, YourArrayStructPropertyName);</li> <li>You can implement these functions in your structure (step 1) to get notifies before add/deletes/removes:</li> <li>void PreReplicatedRemove()</li> <li>void PostReplicatedAdd()</li> <li>void PostReplicatedChange()</li> </ul> <p>Thats it!</p>"},{"location":"ue4guide/networking/network-replication/general-replication/","title":"General replication","text":"<p>Object reference replication:</p> <ul> <li> <p>References are sent over with a special ID (FnetworkGUID).</p> </li> <li> <p>Server is in charge of assinging this ID and then notifying all connected clients of assignment</p> </li> <li> <p>For objects to be referenced, they have to return Uobject::IsSupportedForNetworking() which passes if:</p> </li> <li> <p>Any replicated actor can be replicated as a reference</p> </li> <li> <p>Any non-replicated actor must be stably named (UObject::IsNameStableForNetworking() == true)</p> </li> <li> <p>Any replicated component</p> </li> <li> <p>Any non-replicated component that is stably named (UObject::IsNameStableForNetworking() == true)</p> </li> <li> <p>All UObjects loaded from packagese</p> </li> <li> <p>Stably Named (aka UObject::IsNameStableForNetworking() default implementation)</p> </li> <li> <p>Actors - If loaded from packages</p> </li> <li> <p>Components</p> <ul> <li> <p>Loaded from packages</p> </li> <li> <p>Added via simple construction scripts/blueprints</p> </li> <li> <p>Manually marked (UActorComponent::SetNetAddressable()) - You have to make sure the component has the same name on both client &amp; server. Anything in the AActor C++ constructor fits this</p> </li> <li> <p>If you spawn a component and then on the client spawn it with the same name, you can mark it as stable named (SetNetAddressable()) and UE4 won't try to replicate the object but instead try to match up the objects on the server/client through the name. If you spawn on the server + mark it as replicated, then you are telling the client to try to create a new component instead of matching it up with an existing one. https://udn.unrealengine.com/questions/236164/dynamically-add-component-in-begin-play.html</p> </li> </ul> </li> </ul>"},{"location":"ue4guide/networking/network-replication/physics-replication/","title":"Physics replication","text":"<p>Physics simulation is run on both the client and the server. Updates are sent to the client from the server. The following struct is used to describe the physical state of a rigid body, and is replicated (as defined in Actor):</p> C++<pre><code>struct RigidBodyState\n{\n  var vector Position;\n  var Quat Quaternion;\n  var vector LinVel; // RBSTATE_LINVELSCALE times actual (precision reasons)\n  var vector AngVel; // RBSTATE_ANGVELSCALE times actual (precision reasons)\n  var int bNewData;\n};\n</code></pre> <p>A struct used so that all properties change at the same time. The vectors are compressed to integer resolution, so that they are scaled before sending. Quats are compressed to only send 3 values; the 4<sup>th</sup> value is inferred from the other 3.</p> <p>For physics replication, there are two types of correction:</p> <ul> <li>Small corrections and object moving: 20% position adjust, 80% additional velocity to target</li> <li>Large correction or object stopped: 100% position adjust</li> </ul>"},{"location":"ue4guide/networking/network-replication/physics-replication/#simulation","title":"Simulation","text":"<p>The following scenarios describe physics simulation:</p> <ul> <li> <p>ROLE_SimulatedProxy Actor simulation</p> </li> <li> <p>The client continuously updates the simulated actor position based on the received position and velocity.</p> </li> <li> <p>If bUpdateSimulatedPosition is true, authoritative position updates are continuously sent from the server to the client (otherwise, no position updates are sent after the initial replication of the Actor).</p> </li> <li> <p>Pawns on other clients</p> </li> <li>Unlike other Actors, simulated Pawns do not execute normal physics functions on the client. This means that physics events, like the Landed() event, are never called for pawns on non-owning clients.</li> <li> <p>The physics mode of the Pawn is inferred from its position, and the bSimulateGravity flag, and its predicted position is updated based on the replicated velocity.</p> <ul> <li>The bSimGravityDisabled flag is set, temporarily turning off gravity simulation, if Pawn didn\u2019t fit at the replicated position, and is in danger of falling through the world on the client.</li> </ul> </li> <li> <p>PHYS_RigidBody Actors (Vehicles, KActors, etc.)</p> </li> <li> <p>Both client and server simulate the objects, but the server sends authoritative updates to the client periodically (when the object is awake). The client then moves the object to match the server version</p> <ul> <li>Attempts to do so smoothly, by altering velocity to bring about convergence in positions rather than snapping the position if the error is below an acceptable threshold</li> </ul> </li> <li> <p>Use RigidBodyState struct for atomic replication, when all properties must be received in synch.</p> </li> </ul> <p>For Ragdoll physics, only the hip location is replicated. It is often possible to tear off completely and not replicate at all.</p> <p>For Vehicles (PHYS_RigidBody Actors), there is the following network flow:</p> <ol> <li> <p>Press key on client</p> </li> <li> <p>Send inputs (throttle, sterring, rise) to server - replicated function ServerDrive called</p> </li> <li> <p>Generate ouptut (OutputBrake, OutputGas, etc.); pack into replicated structs that can be sent to the client - ProcessCarInput() called on server</p> </li> <li> <p>Update vehicle on server and client; use outputs (OutputBrake, OutputGas, etc.) to apply forces/torques to wheels/vehicle - UpdateVehicle() called on client and server</p> </li> </ol> <p>Reference From https://udn.epicgames.com/Three/NetworkingOverview.html#Physics</p>"},{"location":"ue4guide/networking/network-replication/replication-cheat-sheet/","title":"Replication cheat sheet","text":"<p>RPC invoked from the server</p> Actor ownership Not replicated NetMulticast Server Client Client-owned actor Runs on server Runs on server and all clients Runs on server Runs on actor's owning client Server-owned actor Runs on server Runs on server and all clients Runs on server Runs on server Unowned actor Runs on server Runs on server and all clients Runs on server Runs on server <p>RPC invoked from a client</p> Actor ownership Not replicated NetMulticast Server Client Owned by invoking client Runs on invoking client Runs on invoking client Runs on server Runs on invoking client Owned by a different client Runs on invoking client Runs on invoking client Dropped Runs on invoking client Server-owned actor Runs on invoking client Runs on invoking client Dropped Runs on invoking client Unowned actor Runs on invoking client Runs on invoking client Dropped Runs on invoking client <p>Reference From https://docs.unrealengine.com/latest/INT/Gameplay/Networking/Actors/RPCs/index.html</p>"},{"location":"ue4guide/networking/network-replication/replication-related-functions/","title":"UObject:","text":"C++<pre><code>/** IsNameStableForNetworking means an object can be referred to its path name (relative to outer) over the network */\nvirtual bool IsNameStableForNetworking() const;\n\n/** IsFullNameStableForNetworking means an object can be referred to its full path name over the network */\nvirtual bool IsFullNameStableForNetworking() const;\n\n/** IsSupportedForNetworking means an object can be referenced over the network */\nvirtual bool IsSupportedForNetworking() const;\n\n/** Returns a list of sub-objects that have stable names for networking */\nvirtual void GetSubobjectsWithStableNamesForNetworking(TArray&lt;UObject\\*&gt; &amp;ObjList) {}\n\n/** Called right before receiving a bunch */\nvirtual void PreNetReceive();\n\n/** Called right after receiving a bunch */\nvirtual void PostNetReceive();\n\n/** Called right after calling all OnRep notifies (called even when there are no notifies) */\nvirtual void PostRepNotifies() {}\n\n/** Called right before being marked for destruction due to network replication */\nvirtual void PreDestroyFromReplication();\n</code></pre>"},{"location":"ue4guide/networking/network-replication/replication-related-functions/#actor-helpershighlevel","title":"Actor Helpers/HighLevel","text":"C++<pre><code>/** Returns a constant reference to the replicated components set */\nconst TArray&lt;UActorComponent*&gt;&amp; GetReplicatedComponents() const\n\n/** Get read-only access to current AttachmentReplication. */\nconst struct FRepAttachment&amp; GetAttachmentReplication() const { return AttachmentReplication; }\n\n/** Called on client when updated bReplicateMovement value is received for this actor. */\nUFUNCTION()\nvirtual void OnRep_ReplicateMovement();\n\n/** ReplicatedMovement struct replication event */\nUFUNCTION()\nvirtual void OnRep_ReplicatedMovement();\n\n/** Called on client when updated AttachmentReplication value is received for this actor. */\nUFUNCTION()\nvirtual void OnRep_AttachmentReplication();\n\n/** Update location and rotation from ReplicatedMovement. Not called for simulated physics! */\nvirtual void PostNetReceiveLocationAndRotation();\n\n/** Update velocity - typically from ReplicatedMovement, not called for simulated physics! */\nvirtual void PostNetReceiveVelocity(const FVector&amp; NewVelocity);\n\n/** Update and smooth simulated physic state, replaces PostNetReceiveLocation() and PostNetReceiveVelocity() */\nvirtual void PostNetReceivePhysicState();\n\nFindNetworkObjectInfo()\nFlushNetDormancy()\nForceNetRelevant()\nForceNetUpdate()\nNetUpdate()\nNetUpdateFrequency()\n\nIsNameStableForNetworking() const override\nIsNetRelevantFor(const AActor* RealViewer, const AActor* ViewTarget, const FVector&amp; SrcLocation) const\nIsNetStartupActor() const\n</code></pre>"},{"location":"ue4guide/networking/network-replication/replication-related-functions/#actor-specific","title":"Actor specific","text":"C++<pre><code>/**\n* Called on the actor right before replication occurs.\n* Only called on Server, and for autonomous proxies if recording a Client Replay.\n*/\nvirtual void PreReplication(IRepChangedPropertyTracker &amp; ChangedPropertyTracker);\n\n/**\n* Called on the actor right before replication occurs.\n* Called for everyone when recording a Client Replay, including Simulated Proxies.\n*/\nvirtual void PreReplicationForReplay(IRepChangedPropertyTracker &amp; ChangedPropertyTracker);\n\n/** Always called immediately after spawning and reading in replicated properties */\nvirtual void PostNetInit();\n\n/** Method that allows an actor to replicate subobjects on its actor channel */\nvirtual bool ReplicateSubobjects(class UActorChannel *Channel, class FOutBunch *Bunch, FReplicationFlags *RepFlags);\n\n/** Called on the actor when a new subobject is dynamically created via replication */\nvirtual void OnSubobjectCreatedFromReplication(UObject *NewSubobject);\n\n/** Called on the actor when a subobject is dynamically destroyed via replication */\nvirtual void OnSubobjectDestroyFromReplication(UObject *Subobject);\n\n/**\n* @param ViewPos       Position of the viewer\n* @param ViewDir       Vector direction of viewer\n* @param Viewer        \"net object\" owned by the client for whom net priority is being determined (typically player controller)\n* @param ViewTarget    The actor that is currently being viewed/controlled by Viewer, usually a pawn\n* @param InChannel     Channel on which this actor is being replicated.\n* @param Time          Time since actor was last replicated\n* @param bLowBandwidth True if low bandwidth of viewer\n* @return              Priority of this actor for replication\n*/\nvirtual float GetNetPriority(const FVector&amp; ViewPos, const FVector&amp; ViewDir, class AActor* Viewer, AActor* ViewTarget, UActorChannel* InChannel, float Time, bool bLowBandwidth);\n\n/** Returns true if the actor should be dormant for a specific net connection. Only checked for DORM_DormantPartial */\nvirtual bool GetNetDormancy(const FVector&amp; ViewPos, const FVector&amp; ViewDir, class AActor* Viewer, AActor* ViewTarget, UActorChannel* InChannel, float Time, bool bLowBandwidth);\n\n/**\n* Allows for a specific response from the actor when the actor channel is opened (client side)\n* @param InBunch Bunch received at time of open\n* @param Connection the connection associated with this actor\n*/\nvirtual void OnActorChannelOpen(class FInBunch&amp; InBunch, class UNetConnection* Connection) {};\n\n/**\n* Used by the net connection to determine if a net owning actor should switch to using the shortened timeout value\n*\n* @return true to switch from InitialConnectTimeout to ConnectionTimeout values on the net driver\n*/\nvirtual bool UseShortConnectTimeout() const { return false; }\n\n/**\n* SerializeNewActor has just been called on the actor before network replication (server side)\n* @param OutBunch Bunch containing serialized contents of actor prior to replication\n*/\nvirtual void OnSerializeNewActor(class FOutBunch&amp; OutBunch) {};\n\n/**\n* Handles cleaning up the associated Actor when killing the connection\n* @param Connection the connection associated with this actor\n*/\nvirtual void OnNetCleanup(class UNetConnection* Connection) {};\n\n/**\n* Called by DestroyActor(), gives actors a chance to op out of actor destruction\n* Used by network code to have the net connection timeout/cleanup first\n*\n* @return true if DestroyActor() should not continue with actor destruction, false otherwise\n*/\nvirtual bool DestroyNetworkActorHandled();\n\nActor Connection Functions:\n/** @return the actor responsible for replication, if any.  Typically the player controller */\nvirtual const AActor* GetNetOwner() const;\n\n/** @return the owning UPlayer (if any) of this actor. This will be a local player, a net connection, or NULL. */\nvirtual class UPlayer* GetNetOwningPlayer();\n\n/**\n * Get the owning connection used for communicating between client/server \n * @return NetConnection to the client or server for this actor\n */\nvirtual class UNetConnection* GetNetConnection() const;\n\nvirtual bool IsNetRelevantFor(const AActor* RealViewer, const AActor* ViewTarget, const FVector&amp; SrcLocation) const override;\n</code></pre>"},{"location":"ue4guide/networking/network-replication/replication-related-functions/#debugging-functions","title":"Debugging Functions","text":"C++<pre><code>/** Called by the networking system to call PreReplication on this actor and its components using the given NetDriver to find or create RepChangedPropertyTrackers. */\nvoid CallPreReplication(UNetDriver* NetDriver);\n\n/** Gives the actor a chance to pause replication to a player represented by the passed in actor - only called on server */\nvirtual bool IsReplicationPausedForConnection(const FNetViewer&amp; ConnectionOwnerNetViewer);\n/** Called on the client when the replication paused value is changed */\nvirtual void OnReplicationPausedChanged(bool bIsReplicationPaused);\n\n/** Sync IsSimulatingPhysics() with ReplicatedMovement.bRepPhysics */\nvoid SyncReplicatedPhysicsSimulation();\n\n/** Called when the replicated state of a component changes to update the Actor's cached ReplicatedComponents array */\nvoid UpdateReplicatedComponent(UActorComponent* Component);\n\n/** Completely synchronizes the replicated components array so that it contains exactly the number of replicated components currently owned */\nvoid UpdateAllReplicatedComponents();\n</code></pre>"},{"location":"ue4guide/networking/network-replication/sublevellevel-instance-streaming-replication/","title":"Sublevels aren't directly associated with ULevels","text":"<p>Instead, they are associated with UWorlds. See UWorld::StreamingLevels.</p> <p>Because of that, when you load in a Sublevel, there's no way to know what it's Sublevels are (unless you figure out the owning UPackage, load that, grab the UWorld, and then grab the levels).</p> <p>As far as how this typically works:</p> <ol> <li> <p>When a Client joins a Networked game, it does a bunch of handshaking.</p> </li> <li> <p>As a part of that, it's told the Level that it should load as the Persistent Level. This actually calls LoadMap and loads it as the World.</p> </li> <li> <p>Typically, Clients are responsible for managing which levels they will Stream in / out, and just notify the Server via ServerUpdateLevelVisbility.</p> </li> </ol> <p>In the approach above, it's common for the Server to have all sublevels always loaded. Ultimately, how to determine what levels should be streamed in / out is almost always a Game level decision, and the engine just has some tools to help.</p> <p>While ServerUpdateLevelVisibility notifies the Server of what levels a Client has loaded, if the Server is driving which levels should be loaded, it can use ClientUpdateLevelStreamingStatus. As the name implies, that will cause the Client to change what levels it has streamed in, and to what states. Notice, though, that it's a Unicast RPC, so you'd need to manage that for all clients.</p> <p>As far as loading in Sublevels of Sublevels, that's not technically supported by the engine, but it can actually be approximated. In that case, you'll need to use something closer to Level Instances. I cover how we approach a similar issue for Fortnite in this thread:</p> <p>https://udn.unrealengine.com/questions/399764/load-level-instance-with-replicated-actors.html</p> <p>Basically, what you'd do is have some sort of Actor / Manager in each level. This manager would know the names of the sublevels it wanted. This would be something done at Editor Time.</p> <p>When the Client / Server loads a Sublevel, that Manager would then be responsible for creating instances of ULevelStreaming objects (really, some subobject thereof like ULevelStreamingKismet). Clients would still need to send ServerUpdateLevelVisibility RPCs to the server to Allow / Prevent replication of Actors in those nested Sublevels.</p> <p>You also need to be careful with naming, making sure that the Server and Client have consistent names for the sublevels without clashing. Also, be careful of circular nested sublevels.</p> <p>Reference From https://udn.unrealengine.com/questions/426339/stream-sublevels-of-a-streamed-level.html</p>"},{"location":"ue4guide/networking/network-replication/sublevellevel-instance-streaming-replication/#fortnite-detailed-approach","title":"Fortnite detailed approach","text":"<p>https://udn.unrealengine.com/questions/399764/load-level-instance-with-replicated-actors.html</p>"},{"location":"ue4guide/networking/network-replication/sublevellevel-instance-streaming-replication/#multiplayer-issues-with-sublevel-streamingtoggling-visibility","title":"Multiplayer issues with sublevel streaming/toggling visibility","text":"<p>Level streaming client crash</p> <p>Network streaming level visibility, disconnect</p> <p>There is also an unresolved ticket related to this issue: Toggling ULevelStreaming::bShouldBeVisible causes replication errors</p> <p>Level streaming definitely should (and does generally) work with Multiplayer. For example, we use Level Streaming in Fortnite. That said, there are a few important things to note (I'll try not to rehash too much of what was in those tickets).</p> <p>The biggest issues arise when the Server tries to unload a level that Clients still have streamed in. The Server should trigger APlayerControllerLevelStreamingStatusChanged RPC which should cause the level to Stream Out / Unload. However, the Server will also send close bunches for any replicated actors within that sublevel.</p> <p>If the level is completely unloaded before the close bunches occur, there's no real problem. The associated actors won't be found and the bunches are effectively ignored. However, if the level isn't completely unloaded (e.g., if it's just changing visibility), what happens is the Actors end up getting destroyed. This isn't a problem for Dynamic actors, but any Static actors (e.g., actors placed in the map) will not get respawned, and you end up in an inconsistent state.</p> <p>The other problem is that you could still end up in situations where the Server quickly \"toggles\" level visibility in a few frames, sends multiple RPCs to the client, as well as those close bunches. In that case, what can happen is the client may process the RPCs on the same frame, not change level status at all, but still end up destroying all of those actors.</p> <p>Another important thing to note is that I have not been able to reproduce this issue using level streaming volumes.</p> <p>Streaming volumes use the same streaming systems underneath. The key differences are that they manage when levels stream in and out instead of it being up to game code.</p> <p>The way the volumes work is by iterating over the available Player Controllers and determining which levels are relevant based on the player viewpoints. As long as one player is within a volume, the level will remain streamed in.</p> <p>By default, this logic runs on the Server, so what you end up with is a situation where the both the Server and Clients have every level loaded that any Player has relevant.</p> <p>This approach generally avoids all of the problems I described above, because (generally) the Server never attempts to unload levels the Client has loaded. I say generally, because there's still technically timing / network connectivity issues that could crop up and cause the issue to appear, but it's generally harder.</p> <p>Another typical approach, at least when using Dedicated Servers, is to have the Server have all sublevels always loaded, and then just have the clients stream in and out the levels as they need. Again, this bypasses a lot of the same issues that Streaming Volumes do, for similar reasons.</p> <p>There are other issues even with potential fixes to the above. Any networking related functions on Actors in sublevels would effectively stop because they wouldn't be receiving Net Updates. Similarly, the Client wouldn't have anyway of notifying / requesting the Server to make changes to those Actors (imagine there's some Button or Lever that triggers an RPC that's only valid in a sublevel). Finally, we'd still likely need to destroy Dynamic Actors, otherwise we'd risk having duplicates created or weird behavior when getting initial replication on level stream in.</p> <p>TL;DR: Streaming should definitely work in multiplayer, and using BP vs. Streaming Volumes vs. Something else doesn't really matter. The biggest thing to make sure is that the Server doesn't unload levels Clients may need (which Streaming Volumes does inherently).</p> <p>Reference From https://udn.unrealengine.com/questions/429527/issue-with-level-streaming-in-multiplayer.html</p>"},{"location":"ue4guide/networking/network-replication/sublevellevel-instance-streaming-replication/#notification-in-c-on-all-streaming-levels-loaded-via-world-composition-in-a-multiplayer-scenario","title":"Notification (in C++) on all Streaming Levels loaded via World Composition in a multiplayer scenario","text":"<p>Whenever Clients have loaded levels (their persistent level, sublevels loaded via World Composition, or sublevels loaded in other ways), they have to notify the server via APlayerController::ServerUpdateLevelVisibility (and ServerUpdateMultipleLevelsVisibility in newer versions).</p> <p>I'll point out that it's a SealedEvent, meaning that it cannot be overridden in subclasses, but it would be extremely trivial to add in a delegate or virtual method that gets invoked there to allow you to do whatever you need.</p> <p>Depending on what you're actually trying to do, though, there may be better alternatives to getting around this type of thing. Are you trying to do this to control game state, to trigger events, something else?</p> <p>Reference From https://udn.unrealengine.com/questions/443407/notification-in-c-on-all-streaming-levels-loaded-v.html</p>"},{"location":"ue4guide/networking/online-subsystem/create-dedicated-server-session-and-wait/","title":"Create dedicated server session and wait","text":"<p>We have a dedicated server for our game, and want to specify the session name, number of players, Is LAN, and some custom variables like password, game version, and selected map.</p> <p>The best way would be with DefaultGame.ini or DefaultEngine.ini</p> <p>Looking through the UE4.18.2 source code I see various config=Engine style settings.</p> <p>I'm not sure that .ini files are necessarily the right choice here. You may be better off using CVars, as they can be passed in on the console. Therefore, changing server settings wouldn't mean changing anything you have checked in to your VCS but just modifying a command line with whatever system you use.</p> <p>However, if you wanted to use INIs, I'd recommend Game.ini (as this is a game specific setting). Really, the naming of the ini files doesn't really dictate what can be placed in them. They're really split for organization.</p> <p>For starters, take a look at these docs:</p> <p>https://docs.unrealengine.com/latest/INT/Programming/Development/Tools/ConsoleManager</p> <p>https://docs.unrealengine.com/latest/INT/Programming/Basics/ConfigurationFiles</p> <p>Those should get you started with Console Variables and INI Properties. What you choose is ultimately up to you.</p> <p>But in dedicated server I can not create a session, and there is no local player, and docs say a session is already created.</p> <p>A doc says the session is already created, or a log file? By default, I don't believe a session is automatically created for you.</p> <p>I'll point out that with no local player, there won't be a valid player controller. If there's no valid player controller, creating a session will fail.</p> <p>In UCreateSessionCallbackProxy and your UCustomCreateSession, the call to QueryIDFromPlayerController with a null PlayerController will cause the Helper to be invalid, and therefore it will trigger the OnFailure broadcast immediately.</p> <p>What I'd suggest trying is modifying your code like this:</p> C++<pre><code>void UCustomCreateSession::Activate()\n{\n  FCustomOnlineSubsystemBPCallHelper Helper(TEXT(\"CustomCreateSession\"), GEngine-&gt;GetWorldFromContextObject(WorldContextObject));\n\n  // !!!CHANGE!!! Get the session interface and set the settings first.\n  auto Sessions = Helper.OnlineSub-&gt;GetSessionInterface();\n  if (Sessions.IsValid())\n  {\n      CreateCompleteDelegateHandle = Sessions-&gt;AddOnCreateSessionCompleteDelegate_Handle(CreateCompleteDelegate);\n      SessionSettings = MakeShareable(new FOnlineSessionSettings());\n      SessionSettings-&gt;NumPublicConnections = NumPublicConnections;\n      SessionSettings-&gt;bShouldAdvertise = true;\n      SessionSettings-&gt;bAllowJoinInProgress = true;\n      SessionSettings-&gt;bIsLANMatch = bUseLAN;\n      SessionSettings-&gt;bUsesPresence = true;\n      SessionSettings-&gt;bAllowJoinViaPresence = true;\n      SessionSettings-&gt;Set(\"password\", DSS_password, EOnlineDataAdvertisementType::ViaOnlineService);\n      SessionSettings-&gt;Set(\"lobbyName\", DSS_lobbyName, EOnlineDataAdvertisementType::ViaOnlineService);\n      SessionSettings-&gt;Set(\"selectedMap\", FString(\"Echo\"), EOnlineDataAdvertisementType::ViaOnlineService);\n      // SessionSettings-&gt;Set(\"currentStatus\", FString(\"ok\"), EOnlineDataAdvertisementType::ViaOnlineService);\n      // SessionSettings-&gt;Set(\"currentBots\", FString(\"5\"), EOnlineDataAdvertisementType::ViaOnlineService);\n      // SessionSettings-&gt;Set(\"maxPlayers\", FString(\"32\"), EOnlineDataAdvertisementType::ViaOnlineService);\n      // SessionSettings-&gt;Set(\"currentPlayers\", FString(\"1\"), EOnlineDataAdvertisementType::ViaOnlineService);\n      // SessionSettings-&gt;Set(\"motd\", FString(\"Hello World\"), EOnlineDataAdvertisementType::ViaOnlineService);\n      SessionSettings-&gt;Set(\"versionNumber\", DSS_versionNumber, EOnlineDataAdvertisementType::ViaOnlineService);\n      // SessionSettings-&gt;Set(\"gametype\", FString(\"Normal\"), EOnlineDataAdvertisementType::ViaOnlineService);\n\n      Helper.QueryIDFromPlayerController(PlayerControllerWeakPtr.Get());\n      if (Helper.IsValid())\n      {\n          Sessions-&gt;CreateSession(*Helper.UserID, GameSessionName, *SessionSettings);\n          return;\n      }\n      // Helper isn't valid, try creating the session anyway.\n      // This can happen if there's no player controller, but the underlying OSS may\n      // still be able to handle it (like steam).\n      else if (Sessions-&gt;CreateSession(0, GameSessionName, *SessionSettings))\n      {\n          return;\n      }\n      else\n      {\n          FFrame::KismetExecutionMessage(TEXT(\"Unable to create session.\"), ELogVerbosity::Warning);\n      }\n  }\n  else\n  {\n      FFrame::KismetExecutionMessage(TEXT(\"Sessions not supported by Online Subsystem\"), ELogVerbosity::Warning);\n  }\n\n  // Fail immediately\n  OnFailure.Broadcast();\n}\n</code></pre> <p>How do I find the current session created by the dedicated server?</p> <ul> <li>You can try IOnlineSession::GetNamedSession. Unfortunately, that will only return the session if you already know the name. Usually, calling DestroySession should be enough (it will use GetNamedSession under the hood to grab the correct one).   What I'd recommend is actually debugging to see whether or not any sessions actually do exist. All OSSs should have some array or map so they can implement GetNamedSession. For example, in FOnlineSessionSteam there's a Sessions array. Putting a breakpoint somewhere in the interface and then inspecting that list would tell you for certain whether or not something was created.</li> </ul> <p>How do I get dedicated server to use my session variables and settings on startup?</p> <ul> <li>Take a look at AGameNetworkManager. We use this to access INI settings in multiple places. Basically, we mark the settings up that we need as either Config or GlobalConfig. Then, when we need to access them we do something like this:</li> </ul> <p>GetDefault&lt;AGameNetworkManager&gt;()-&gt;bUseDistanceBasedRelevancy</p> <p>What this will do is grab the Class Default Object (CDO) and read the settings from it. In the case where no CDO exists already, one will be created.   If you take the CVar approach, then all it would require would be for you to just query the CVars.</p> <p>From https://udn.unrealengine.com/questions/410222/specifying-net-session-name-and-other-vars-dedicat.html</p>"},{"location":"ue4guide/networking/online-subsystem/disconnecting-players-steam-lobbies-vs-ue4-game-session/","title":"Disconnecting players steam lobbies vs ue4 game session","text":"<p>I'm trying to implement quick match functionality in our game. Currently I have it working like so:</p> <ol> <li> <p>Player 1 searches for a Steam game lobby, if none is found, Player 1 creates one and waits for Player 2 to join.</p> </li> <li> <p>Player 2 finds Player 1's Steam game lobby, then joins it.</p> </li> <li> <p>Player 2 then connects to Player 1 via Unreal networking, and once Player 2 logs into Player 1's listen server, this seems to be when they are registered as being in the session.</p> </li> <li> <p>At this point Player 1 seamless travels to the correct level, bringing Player 2 along.</p> </li> </ol> <p>This mostly works, but the problem I am trying to solve is when Player 1 hits the cancel button between step 2 and 3. We'd like for Player 1 to reject the connection (via some code in PreLogin), but there doesn't seem to be a nice way to figure out who should be allowed to connect (if we break the OnlineSubsystem abstraction, we can see who is in the Steam lobby, but I'd prefer not to do that if possible), since players are not registered with the game session until they actually log into the server.</p> <p>Reference From https://udn.unrealengine.com/questions/215236/steam-lobbies-vs-ue4-game-session.html</p>"},{"location":"ue4guide/networking/online-subsystem/disconnecting-players-steam-lobbies-vs-ue4-game-session/#steam-lobby--game-layer","title":"Steam Lobby &amp; Game Layer","text":"<p>The Steam lobby and the players in it aren't meant to be exposed at the game layer.</p> <p>Player registration in general works at the Login time frame when a APlayerState is created with the APlayerController, its FUniqueNetId is assigned and then registered with the AGameMode/AGameSession via RegisterPlayer. So while players who are using the session interface are actually in the platform session, this book keeping is handled by the players themselves as long as they call CreateSession/JoinSession/DestroySession.</p> <p>So on to your issue. If the player is cancelling the game then they should be destroying their session and their hosting net driver for the game when they return to main menu via LoadMap and HandleDisconnect. Any players that are connecting during this time will be disconnected and any future players will be refused as unable to connect at all. When this happens, these clients should DestroySession which will remove them from the Steam lobbies as well.</p> <p>PreLogin is a fine place to add code that rejects all players if the host is in a state that is not ready to receive players. I don't think you need to know who is actually in the lobby.</p> <p>Reference From https://udn.unrealengine.com/questions/215236/steam-lobbies-vs-ue4-game-session.html</p>"},{"location":"ue4guide/networking/online-subsystem/online-networking-delegates-events/","title":"Online networking delegates events","text":"C++<pre><code>/**\n* Delegate fires whenever a client cheater is detected in the networking code\n*\n* @param PlayerId net id of the cheating client\n* @param PunishType type of punishment to apply to a cheating client\n* @param ReasonStr why the client is being punished due to cheating\n* @param InfoStr extra info about the punishment to be applied (eg. ban received, etc)\n*/\nDECLARE_DELEGATE_FourParams(FNetworkCheatDetected, const class FUniqueNetId&amp; /*PlayerId*/, ECheatPunishType /*PunishType*/, const FString&amp; /*ReasonStr*/, const FString&amp; /*InfoStr*/);\nstatic FNetworkCheatDetected OnNetworkCheatDetected;\n\n/**\n* Delegate fired when a pending net game has created a UNetConnection to the server but hasn't sent the initial join message yet.\n*\n* @param PendingNetGame pointer to the PendingNetGame that is initializing its connection to a server.\n*/\nDECLARE_MULTICAST_DELEGATE_OneParam(FOnPendingNetGameConnectionCreated, UPendingNetGame* /*PendingNetGame*/);\nstatic FOnPendingNetGameConnectionCreated OnPendingNetGameConnectionCreated;\n</code></pre>"},{"location":"ue4guide/networking/online-subsystem/online-subsystem/","title":"Online subsystem","text":"<p>Overview Documentation:</p> <p>https://docs.unrealengine.com/latest/INT/Programming/Online/index.html&gt;</p> <p>Getting PS4 Online Subsystem To Work (only needed to network multiple devkits through PSN):</p> <ul> <li> <p>https://answers.unrealengine.com/questions/339741/problem-while-connecting-ps4-game-client-to-a-wind.html</p> </li> <li> <p>https://forums.unrealengine.com/showthread.php?82928-Setup-UE4-game-for-PS4-online-multiplayer&amp;highlight=networking</p> </li> </ul>"},{"location":"ue4guide/networking/online-subsystem/online-subsystem/#how-to-show-steam-login-ui-or-external-ui","title":"How to show Steam Login UI or external UI","text":"<p>Register with IOnlineExternalUI</p>"},{"location":"ue4guide/networking/online-subsystem/online-subsystem/#overview","title":"Overview:","text":"<p>The online subsystem is meant, as you know, as an abstraction layer between all the common services available from all the major platforms, both PC and console. In UE3, much of the hookup code sat inside the GameInfo and PlayerController. Nothing inherently wrong with that, except that there was a bunch of network/online related code intertwined with the rest of the gameplay. A more subtle problem was the lifespan of the PlayerController and the need to talk between the online system and the game during times when the PlayerController may be out of scope (level loads and such).</p> <p>In UE4 we are making a conscience decision to have better code separation. This has necessitated the GameSession and OnlineSession class hierarchies.</p> <p>The GameSession class is intended to encapsulate functionality that the host would care about when talking to an online platform (creating/starting/ending sessions, joinability, etc).</p> <p>The OnlineSession (bad name I'm trying to come up with a better one) class is intended to encapsulate anything clients (including a listen client) would care about when talking to an online platform (invites, joins, presence, matchmaking).</p> <p>The LocalPlayer was chosen as the location for the OnlineSession due to its lifespan existing across server travel, able to intercept online messaging at any time and hopefully simplify the handling of disconnects and other such async callbacks.</p> <p>These classes will be maintained and expanded as we introduce the OSS into our games here. Any feedback is appreciated.</p> <p>Reference From https://udn.unrealengine.com/questions/168944/best-way-to-interface-with-onlinesubsystem.html</p>"},{"location":"ue4guide/networking/online-subsystem/online-subsystem/#heres-our-current-layout-in-broad-strokes","title":"Here's our current layout (in broad strokes):","text":"<ul> <li> <p>Matching Server M, which does matching making but also player lobbies</p> </li> <li> <p>Dedicated Server DS which the clients connect to after matching. These are spawned on demand with session information passed in via command line.</p> </li> <li> <p>Clients C, which communicate with the Matching Server and the connect to the DS based on the info the matching server passes back</p> </li> </ul> <p>So until M has matched players, the players are not \"connected\" to the DS or anyone else. As far as I can tell:</p> <p>Client: Needs a custom UOnlineSession which has a \"loginToMatchingServer()\", \"BeginMatching()\" and such. This would interact with our custom IOnlineSessionInterface which would communicate with the M's APIs. Q: since I don't care about the platform-specific session things for the client (I will always go through M), do I even need a custom OnlineSessionInterface?</p> <p>Dedicated Server: Needs a custom AGameSession which handles the \"game\" session. The session data is gotten when RegisterServer() is called, and this data will be authenticated against the values the client passes to it from Login, etc.</p> <p>Is my understanding correct? As far as I can tell, there is no reason for the DedicatedServer to worry about the OnlineSessionInterface in my case, as the Dedicated Server doesn't care about the matching server information. I need to be able to handle seamless travels that persist the session-specific information on both client and server (the client's infor is authenticated with the server's).</p> <p>Reference From https://udn.unrealengine.com/questions/264223/proper-way-to-use-uonlinesession-agamesession-and.html</p> <p>It sounds like you've worked out the basics, but your code doesn't have to follow such a rigid pattern. Online games will typically create a custom class derived from UOnlineSessionClient, but my first thought on how to implement this would be to implement IOnlineSession::FindSessions() and the related functions in your custom online subsystem such that that's where the communication with your matchmaking server takes place. But if it makes more sense for your use case to do that in a UOnlineSession subclass, then no, you probably don't need a custom OnlineSessionInterface.</p> <p>One potential benefit of doing matchmaking in the session interface is that you can more easily swap in another implementation (such as OnlineSubsystemNull) for testing purposes.</p> <p>You will want a custom AGameSession, but you can probably use the same class on both the dedicated server and the client, and just wrap the server (or client) specific functionality in runtime checks, if that's easier.</p> <p>Typically in our games the dedicated server does maintain a session with the OnlineSessionInterface, but I suppose this doesn't have to be the case if your matching server maintains the state you need.</p> <p>Reference From https://udn.unrealengine.com/questions/264223/proper-way-to-use-uonlinesession-agamesession-and.html</p> <p>Rationalize between Steam &amp; Oculus Online Subsystem or Platform Services:</p> <p>https://udn.unrealengine.com/questions/396718/how-much-work-is-needed-to-get-oculus-matchmaking.html</p>"},{"location":"ue4guide/networking/online-subsystem/useful-posts-on-playfab/","title":"Useful posts on playfab","text":"<p>Playfab OnlineSubsystem Plugin by a dev:</p> <ul> <li> <p>https://gitlab.com/mtuska/OnlineSubsystemPlayFab</p> </li> <li> <p>Corresponding thread on UE4 + Playfab + Custom servers: https://community.playfab.com/questions/9761/integration-with-unreal-dedicated-servers.html?childToView=10515#comment-10515</p> </li> </ul> <p>Connecting To UE4 Server on Playfab:</p> <p>https://community.playfab.com/comments/10515/view.html</p> <p>For connecting, the console command should be \"open ipaddress:port\". As I have ran this many times with success within the Unreal Engine, I don't believe there is any issues there.</p> <p>Now, as for RedeemMatchmakerTicket, this is something a bit more tricky that requires a bit of fangling. So, for now I'll assume you're using the C++ SDK. Unreal Engine doesn't have any real Authentication functions past the client side login. You you run \"open 127.0.0.1:7777\" you should as provide parameters for the ticket. i.e. \"open 127.0.0.1:7777?ticket=XXX?playfabid=XXX\" We want both the ticket and the PlayFabId as without the provided PlayFabId, there's no way to make sure that ticket is valid with that client. Now as I haven't tried this in Blueprint, I'm not sure what GameMode functions are available. So, what you can do is on AGameMode::Login, you can parse the Options parameter and use that info to send the RedeemMatchmakerTicket request. When it sends the info back, you compare the two PlayFabIds just to make sure they're equal. If equal, the player should be valid, yay! If not equal, something is either wrong or the client is trying to spoof something.</p> <p>https://community.playfab.com/questions/5530/can-i-get-a-conceptual-explanation-of-how-a-custom.html</p> <p>Correct, the Matchmaker API set is for developers who want to build their own custom matchmaking server. In general, the way one would work is:</p> <ul> <li> <p>Player sends request to match to your server</p> </li> <li> <p>Your server</p> </li> <li> <p>Manages active game server info (you need to have your game servers communicate status to it, so that it knows what's available)</p> </li> <li> <p>If you're hosting custom game servers with PlayFab, that may include using StartGame to start game instances</p> </li> <li> <p>The \"match score\" is entirely up to you - it's any logic you need (and the whole reason you want to run your own matchmaking)</p> </li> <li> <p>Validates the player is good with AuthUser, and optionally uses UserInfo to get any info needed</p> </li> <li> <p>Replies to client with info on the server it should connect to</p> </li> <li> <p>Player joins that session</p> </li> <li> <p>Your custom game server tells your matchmaker that the player joined (you'll want to use some form of validation on this, like our matchmaker receipt), and if it's valid, your matchmaker calls PlayerJoined to let our service know</p> </li> <li> <p>Player plays in the game session, and eventually either disconnects or leaves cleanly</p> </li> <li> <p>Your server determines when players have left servers and calls PlayerLeft to let our service know</p> </li> </ul> <p>So for your model, for players who can't get into a game right away (which I'm curious about - if games must be exactly 8 people, how could they ever join one that's already going - join in progress if someone leaves a game?), you would need to maintain a connection to the players until you've got the set needed to start a game session, start that session, and then send the players the info on that session so that they can join it.</p> <p>I will say that what some titles are doing is a basic matchmaking call in PlayFab to join players to a \"lobby\" server, which they use for persistent connections to the player while they decide how to group up players for actual gameplay. They then call StartGame and send the info on the session to those players, as described above. Some of those games are even using the lobby as another part of the game - a place for players to chat or even interact with parts of the world which require much less compute power than the action part of the game, so that they can have a smaller number of lobby servers</p> <p>The StartGame and Matchmake calls return the information for the server instance the player should connect to, and that info is returned immediately after the game wrangler service starts the executable for your game server. If your server has to load extra libraries or do other processing when it is run, that could mean that your client would try connecting before it is ready, so it's important to ensure you have a process running that listens for players as soon as your executable launches.</p> <p>Reference From https://community.playfab.com/questions/5530/can-i-get-a-conceptual-explanation-of-how-a-custom.html</p> <p>The way the PlayFab matchmaker works is that it finds all sessions that have available slots, which match the \"must have\" criteria - Build Version, Game Mode, and Region - and filters that based on Tags. If there's no statistic provided for the match, it just picks randomly from that list. If there is a statistic provided, it orders the available sessions by the ABS difference between the input statistic, and that of the active session, returning a session from the top of the list (closest to the input score). But it never waits - it always immediately returns the closest match, or if one cannot be found, either \"no match found\" or a new session, depending on whether you start sessions on calls to matchmake or not.</p> <p>I can think of somewhat convoluted schemes that would allow you to use our matchmaker the way you describe - joining the session, checking the stat difference, leaving, getting another search result, etc. - but you would need to make sure you're throttling the Matchmake calls from the client so that you're not hitting the service with many calls per user, introducing delays in the process. Also, since players would be \"locking\" slots in sessions briefly (as a result of the Matchmake call, the slot is \"claimed\" for a minute), that would also reduce the efficiency of the operation.</p> <p>What you're really looking for is \"queue\" matchmaking, in which the player asks for a match and waits for one to be found that's within the range requested - the match call doesn't return until it finds one, or hits a timeout. We do have a backlog item for such a matchmaker, but it is not something that's on our schedule for the near-term. For now, if you have a requirement for this type of matchmaking, I would have to recommend using a custom matchmaker.</p> <p>Reference From https://community.playfab.com/questions/969/211662267-Matchmaking-for-racing-games.html</p>"},{"location":"ue4guide/networking/online-subsystem/using-multiple-custom-online-subsystems/","title":"Using multiple custom online subsystems","text":"<p>https://udn.unrealengine.com/questions/404339/accessing-oculussteam-apis-without-respective-oss.html</p> <p>FWIW, the way we handle crossplatform on Paragon and Fortnite is using a Single backend (like I mentioned before) for the match making / connection stuff. This is implemented as an OSS. Then, on platforms we will still enable the necessary subsystems, but disable stuff.</p> <p>For example, if you take a look at FOnlineSubsystemPS4, you'll notice there are a bunch of flags like bAreRoomsEnabled, bAreAchievementsEnabled, etc:</p> <ol> <li>/** true by default, this enables room creation. Can be disabled to use third party matchmaking. */</li> <li>bool bAreRoomsEnabled;</li> </ol> <p>Then, in the OSS we've just guard any calls into related methods.</p> <p>We haven't done anything cross platform with Oculus internally, and we don't currently have any internal UE4 titles on Steam, so I don't know that internal work has been done to make those support similar cross-platform type things.</p> <p>So, the process for us would look a bit more like this:</p> <ol> <li>Create OSSPlayFab.</li> <li>Grab the platform specific backend / NetDriver.</li> <li>Disable any features we don't want to use.</li> </ol> <p>Reference From https://udn.unrealengine.com/questions/404339/accessing-oculussteam-apis-without-respective-oss.html</p> <p>To do this, it sounds like we need to create a custom OSS that communicates with PlayFab for match making, make calls into Steam/Oculus APIs for handling stuff like Friend Invites/Authentication, and use GameNetDriver for clients to join servers via IPs?</p> <ul> <li>Yes, that's probably going to be the easiest way to do it. Then, you could directly use any of the normal OSS interfaces and not worry too much.</li> </ul> <p>Additionally, is there a way to dynamically switch OSS? Sometimes we might not want to use PlayFab's matchmaker, and switch to say Steam matchmaker. So we will need to dynamically switch OSS in game. Is this possible?</p> <ul> <li>As I already pointed out, we do this in our games. We use our internal OSS for handling matchmaking, etc. Then we have the PS4 / XBoxLive OSSs enabled. You can do the same thing by specifying which OSSs to use in your Engine.ini file.</li> </ul> INI<pre><code>; In your case, you may want to have some other way (like packaging specific scripts / inis) that enable / disable OSS.\n; Here, I'll just have them all enabled.\n\n[OnlineSubsystemSteam]\nbEnabled=true\n; other options\n\n[OnlineSubsystemOculus]\nbEnabled=true\n; other options\n\n; You'd need to create this, or another OSS.\n[OnlineSubsystemPlayFab]\nbEnabled=true\n; other options\n\n; Here, you specify global options that other OSSs can override.\n; Also, you specify which OSS will be the default.\n[OnlineSubsystem]\n\n; This is going to be the default OSS used.\nDefaultPlatformService=PlayFab\n</code></pre> <p>In the scenario where you want to use a different OSS at runtime, you'd just interact with the FOnlineSubsystemModule normally. I'll point out that the interface is set up so you can pass in the name of OSS you want. E.G.:</p> C++<pre><code>/**\n* Main entry point for accessing an online subsystem by name\n* Will load the appropriate module if the subsystem isn't currently loaded\n* It's possible that the subsystem doesn't exist and therefore can return NULL\n*\n* @param InSubsystemName - name of subsystem as referenced by consumers\n*\n* @return Requested online subsystem, or NULL if that subsystem was unable to load or doesn't exist\n*/\nvirtual class IOnlineSubsystem* GetOnlineSubsystem(const FName InSubsystemName = NAME_None);\n\n/**\n* Destroys an online subsystem created internally via access with GetOnlineSubsystem\n* Typically destruction of the subsystem is handled at application exit, but\n* there may be rare instances where the subsystem is destroyed by request\n*\n* @param InSubsystemName - name of subsystem as referenced by consumers\n*/\nvirtual void DestroyOnlineSubsystem(const FName InSubsystemName);\n</code></pre> <p>If you wrapped your calls to the Online Subsystem stuff in some other manager class, it should be fairly easy to have multiple enabled and use different backend services without much hassle. Like I said, for games like Fortnite we take a similar approach so that we can use our OSS for match making and still use features like invitations, voice, friends, etc. from the underlying platform.</p>"},{"location":"ue4guide/oculus-stuff/controlling-rift-overscan-in-unreal-rendering/","title":"Controlling rift overscan in unreal rendering","text":"<p>bOverrideScreenPercentage=false</p> <p>; Value is out of range [30..300]</p> <p>ScreenPercentage=100.0</p> <p>Higher values create a larger rendering buffer prior to distortion.</p>"},{"location":"ue4guide/oculus-stuff/how-to-get-hmd-camera-in-worldspace--camera-issues/","title":"How to get hmd camera in worldspace  camera issues","text":"<p>Lots of Camera Issues in VR in 4.8:</p> <p>https://forums.oculus.com/viewtopic.php?f=60&amp;t=24683</p> <p></p> <p>https://answers.unrealengine.com/questions/243325/how-to-get-real-camera-position-in-vr-mode.html</p> <p>Oculus Rift Coordinate System:</p> <ul> <li> <p>Device Position is in the reference frame of the rift defined by the recalibration. So wherever you are looking IRL when you reset the HMD, that will be +X, right of that will be +Y, above that will be +Z.</p> </li> <li> <p>Device Rotation will be relative to the recalibration although only Yaw gets reset during recalibration</p> </li> </ul>"},{"location":"ue4guide/oculus-stuff/rift-gotchas/","title":"Rift gotchas","text":"<ul> <li> <p>Turn off these features for VR:</p> </li> <li> <p>Temporal AA (Use FXAA)</p> </li> <li> <p>Motion Blur</p> </li> <li> <p>Lens Flare</p> </li> <li> <p>Depth Of Field</p> </li> <li> <p>Bloom Dirt Mask</p> </li> <li> <p>Vignette Intensity</p> </li> <li> <p>Turn off smoothframerate</p> </li> <li> <p>Stereo rendering does not work in Editor viewports or PIE mode; must use Standalone Game mode</p> </li> <li> <p>Rift only supported on Windows</p> </li> <li> <p>Useful links for Oculus + UE4:</p> </li> <li> <p>Oculus Wiki Page: https://wiki.unrealengine.com/Oculus_Rift</p> </li> <li> <p>Separate Player movement orientation from HMD orientation https://wiki.unrealengine.com/Oculus_Rift_Separate_View</p> </li> <li> <p>Blueprints related to HMD https://wiki.unrealengine.com/Oculus_Rift_Blueprint</p> </li> <li> <p>Useful Console Commands</p> </li> <li> <p>stereo show: Print list of settings to log</p> </li> <li> <p>stereo on/off: Turn on/off stereo for any game. Rift must be plugged in</p> </li> <li> <p>stereo reset: Resets IPD and clears stereo overrides</p> </li> <li> <p>stereo e=&lt;value&gt;: Sets IPD</p> </li> <li> <p>hmd enable/disable: Enable/Disable HMD</p> </li> <li> <p>hmd sp 100: Sets HMD Screen Percentage</p> </li> <li> <p>hmd vsync on/off/reset: Self-explanatory</p> </li> <li> <p>ovrversion: Prints LibOVR version</p> </li> <li> <p>Useful Oculus Config settings &amp; console commands are all defined in OculusRiftHMD.cpp: bool FOculusRiftHMD::Exec( UWorld* InWorld, const TCHAR* Cmd, FOutputDevice&amp; Ar )</p> </li> </ul> <p>void FOculusRiftHMD::LoadFromIni()</p> <ul> <li>Oculus Config settings are in the DefaultEngine.ini file ([root]/Config/DefaultEngine.ini)</li> </ul> <p>\u200b [Oculus.Settings] \u200b ; In meters, not Unreal Units (cm) \u200b ; Recommended for true first person viewpoint \u200b ; since you are simulating the head. \u200b ;HeadModel_v2=(X=0.0,Y=0,Z=0.0) \u200b ; Default values \u200b HeadModel_v2=(X=0.12,Y=0,Z=0.17)</p> <p>\u200b bChromaAbCorrectionEnabled=true \u200b bMagEnabled=true \u200b bDevSettingsEnabled=false \u200b bMotionPredictionEnabled=true \u200b bTiltCorrectionEnabled=true \u200b AccelGain=0.0 \u200b MotionPrediction=0.04</p> <p>\u200b bOverrideIPD=false \u200b IPD=0.064</p> <p>\u200b bOverrideStereo=false \u200b ProjectionCenterOffset=0.0 \u200b LensCenterOffset=0.0 \u200b FOV=90.0</p> <p>\u200b bOverrideVSync=false \u200b bVSync=true</p> <p>\u200b bOverrideScreenPercentage=false \u200b ; Value is out of range [30..300] \u200b ScreenPercentage=100.0</p> <p>\u200b bAllowFinishCurrentFrame=false \u200b PositionScaleFactor=1.0 \u200b ; Defaults to true if DLL built with OVR_VISION_ENABLED defined. \u200b ; Positional tracking for DK2 onwards perhaps? \u200b bHmdPosTracking=false \u200b bLowPersistenceMode=false</p> <p>\u200b ; Defaults to true. \u200b ; If enabled, viewpoint rotation is updated during the render thread. \u200b ; Depending on how you control a players view rotation, you may need to disable this. \u200b bUpdateOnRT=true</p> <ul> <li>World Scale can be changed in Window-&gt;World Settings. Default is 100 uu =&gt; 1m (i.e. 1 uu = 1cm)</li> </ul> <p></p> <ul> <li>Player Settings: Can be changed in the Defaults or Components of your characters BluePrint</li> </ul> <p></p> <p></p> <ul> <li> <p>Height &amp; Width are based off Capsule Half Height &amp; Capsule Radius</p> </li> <li> <p>Virtual Head Model:</p> </li> </ul> <p>By default, a virtual head model will be used to offset the players viewpoint.</p> <p>For a traditional first person viewpoint that rotates on a central axis, this is fine.</p> <p>For a true first person viewpoint that is already positioned at the location of the players eyes, this extra offset is unnecessary.</p> <p>Similarly so for most third person viewpoints.</p> <p>The dimensions of this virtual head model are determined by the HeadModel_v2 config setting.</p> <ol> <li> <p>First of all, be sure to use the rift as recommand (by Oculus VR) as an extended monitor (not in clone mode, as it breaks things like vsync).</p> </li> <li> <p>[Disable the \"Aero\" Windows desktop composition engine. Right-click on your desktop, click \"Personalize\" and then select one of the \"Basic\" or \"Classic\" themes instead of an \"Aero\" theme.] I did not bother to measure impact about this; does anyone did?</p> </li> <li> <p>Then, launch the game in standalone mode, without opening the Editor. Right click in you project \".uproject\" file and hit \"Launch game\". This helps a lot!</p> </li> <li> <p>By then, you would run the game in default graphic config, that is \"Epic mode\"! This is a big problem here! You should tweak scalability parameters from Epic to High, at least. Read [this official post to learn about its effect on Editor mode] then read [my expl``anation on how to make this dynamic into your standalone game using blueprints]</p> </li> </ol> <p>From https://forums.unrealengine.com/showthread.php?3822-UE-4-and-Oculus-Rift-Framerate-Optimization</p> <p>Regarding cloning multiple monitors, I personally had the best performance with cloning enabled, and my game running in fullscreen mode, instead of running with my desktop extended and the game running in a \"fullscreen\" window.</p> <p>But to make vsync work (so that the Rift doesn't inherit the vsync timing of your primary monitor), at least with an Nvidia card, you can set the Rift as your clone source in the Nvidia Control Panel (#3 is my Rift in the screenshot below). This way the Rift's refresh timing will be used for vsync and you won't see any tearing on your headset, although if you primary monitor timing is even slightly different (probably the case) you will still see tearing on the primary monitor. Of course this shouldn't be a problem since only other people in the room will see your primary monitor while your Rift is on your head.</p> <p></p> <p>From https://forums.unrealengine.com/showthread.php?3822-UE-4-and-Oculus-Rift-Framerate-Optimization</p>"},{"location":"ue4guide/oculus-stuff/rift-gotchas/#guide-to-getting-good-fps-and-quality-in-ue4-demos-using-distortionscale-and-screenpercentage","title":"Guide to getting good FPS and quality in UE4 demos using DistortionScale and ScreenPercentage","text":"<p>tl;dr: The DistortionScale parameter trades off FOV and image quality. The ScreenPercentage parameter trades off FPS and image quality. Here's how to set them both.</p> <p>UPDATE: Now available in video form, see:[/r/oculus/comments/24lkxz/getting_good_fps_and_quality_in_ue4_demos_on/]</p> <p>I did some digging into the Oculus plugin in the UE4 source, and came up with the following strategy which will enable you to get a rock-solid 60 FPS in UE4 demos, while also getting the highest visual fidelity your GPU can handle. Be careful to follow the steps and not skip any.</p> <p>1) If you've messed with your GameUserSettings.ini file, change the following settings back:</p> <p>ResolutionSizeX=1280 ResolutionSizeY=800 bUseDesktopResolutionForFullscreen=False FullscreenMode=0</p> <p>The following steps will work at higher resolutions, but results will not be as good.</p> <p>2) Start up the demo. If you're not already in stereo mode, do ~ to enter the console and then \"stereo on\".</p> <p>3) Put on your Rift and type the following to pop up an FPS monitor in your view:</p> <p>stat fps</p> <p>Find the most complex scene in the demo exhibiting the poorest frame rate for testing. If your frame rate is good throughout, increase your ScreenPercentage with \"hmd sp 200\" or \"hmd sp 300\" and try again.</p> <p>4) Enter the console with ~ and type the following commands:</p> <p>oculusdev on hmdwarp 1=1</p> <p>These commands have no apparent effect, but unless you do both of them, the command in the next step will have no effect (the second command is a workaround for a bug).</p> <p>5) Set your DistortionScale to 0.5 using \"hmdwarp s=0.5\". This should cause your view in each eye to shrink to a small rectangle. Increase it gradually by 0.1 (e.g. \"hmdwarp s=0.6\") until you can no longer see black around the image. For me this happens around 1.3. (If you wish, you can fine tune it by increments of 0.01 at this point). The UE4 default is 1.715, which is really high.</p> <p>This parameter setting does not affect your frame rate at all, but does improve image quality dramatically. Once you've found a DistortionScale parameter you like, you can reuse it in every demo - it only depends on your vision and how close you put your eyes to the lenses.</p> <p>You will need to repeat steps 4 and 5 each time you run the demo. DistortionScale cannot currently be set in Engine.ini, and I don't know if it can be set programmatically. It might be possible to bind a key.</p> <p>6) ScreenPercentage varies between 30 and 300, and determines the resolution of the offscreen buffer. Start it at 30 with \"hmd sp 30\". Wait for 10-20 seconds for your \"stat fps\" reading to climb to a maximum value. Your frame rate should be maxed out, but the image will look terribly blurry.</p> <p>Increase it in steps of 10 while watching your frame rate (e.g. \"hmd sp 40\") - once your frame rate drops below your refresh rate, take it back down by 10 and you are done. If you later encounter frame drops, you can bring it down a little more.</p> <p>If you're not happy with your image quality at this point, you may wish to slightly decrease DistortionScale as in step 5, which will reduce FOV but give you more image quality in return.</p> <p>Very high ScreenPercentage values (e.g. in the 150-300 range) result in SSAA behind the scenes, and are roughly equivalent to running a Unity Rift demo at a higher screen resolution. This is why I said not to use a higher resolution in step (1).</p> <p>If you close the demo normally, it will save your modified ScreenPercentage to your Engine.ini file automatically, and you will not have to repeat this step.</p> <p>7) Hide your FPS again with \"stat fps\".</p> <p>That's it! I've tried this on both the Starship Bridge Demo (for which I got ScreenPercentage up to 250 on my GTX 780 Ti) and UE4EffectsCave (I got up to 130). Let me know what kind of results you get!</p> <p>From http://www.reddit.com/r/oculus/comments/24g92u/guide_to_getting_good_fps_and_quality_in_ue4</p>"},{"location":"ue4guide/oculus-stuff/tips-tricks-1/","title":"Tips tricks 1","text":"<p>Registry Key developer settings:</p> <ul> <li>Obscurely worded, but this seems to disable the Health and safety warning:</li> </ul> <p>HKLM\\Software\\WOW6432Node\\Oculus DWORD: ShowStartupPanelBackup = 1</p> <p>\u200b HKEY_LOCAL_MACHINE\\SOFTWARE\\Oculus VR, LLC\\LibOVR\\PurgatoryHudEnabled\", REG_DWORD or REG_SZ values of 0 or 1.</p> <ul> <li>Keep the screen on (may cause burn in):</li> </ul> <p>HKLM\\Software\\WOW6432Node\\Oculus: AllowScreenBurnIn = 1</p> <ul> <li>Debug console:</li> </ul> <p>HKLM\\Software\\WOW6432Node\\Oculus: ShowServiceConsole = 1</p> <ul> <li>Disable Oculus Home from auto-launching:</li> </ul> <p>Rename the .exe (C:\\Program Files (x86)\\Oculus\\Support\\oculus-home\\PC_OculusHome.exe)</p> <ul> <li>Disable updates</li> </ul> <p>[HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Oculus VR, LLC\\Oculus\\Config]</p> <p>\"CoreChannel\"=\"Rift18\" (change it to LIVE to continue updates)</p>"},{"location":"ue4guide/oculus-stuff/tips-tricks-1/#distributed-shader-compilation","title":"Distributed Shader Compilation","text":"<p>r.XGEShaderCompile=1</p> <p>Enable HMD head tracking without being in VR mode:</p> <p>Set Editor Settings-&gt;Player-&gt;ViewportGetsHMDControl to true &amp; console command \"hmdpos enforce on\" to enable head tracking in Unreal's Viewport or PIE mode without enabling stereo. Very useful for debugging multiplayer or testing hmd functionality like avatars.</p> <p>Don't minimize the editor window while in VR Mode</p> <ul> <li>You can maintain the Editor window during VR Preview mode by commenting out this line in PlayLevel.cpp:</li> </ul> <p>//TODO: ikrimae: Pipe disabling this based on a config variable. Not sure if this will crash the editor &amp; also it's a perf hit //RootWindow-&gt;Minimize();</p> <p>Rename Oculus Home exe to get rid of it (C:\\Program Files (x86)\\Oculus\\Support\\oculus-home\\PC_OculusHome.exe)</p> <p>Get rid of purgatory UI (L,C,F):</p> <ul> <li>HKEY_LOCAL_MACHINE\\SOFTWARE\\Oculus VR, LLC\\LibOVR\\PurgatoryHudEnabled\", REG_DWORD or REG_SZ values of 0 or 1.</li> </ul> <p>How to detect if VR Headset is Vive or Oculus</p> <p>if (GEngine-&gt;HMDDevice.IsValid() &amp;&amp; GEngine-&gt;HMDDevice-&gt;IsHMDEnabled())         {                 if (GEngine-&gt;HMDDevice-&gt;GetHMDDeviceType() == EHMDDeviceType::DT_SteamVR)                 {                         // BLAH!</p> <p>From https://forums.unrealengine.com/showthread.php?87727-How-to-Detect-if-using-Rift-or-Vive</p> <p>Useful Oculus console commands:</p> <p>Stereo/HMD Configuration</p> <p>stereo on|off|toggle                Stereo mode on/off</p> <p>stereo hmd                                        Turns stereo on and re-direct rendering to the Rift.</p> <p>hmd enable|disable                        Completely disables or re-enables HMD</p> <p>hmd pd 0.8                                        Sets pixel density in the center (default is 1.0).</p> <p>hmd sp 125                                        Overrides default screenpercentage for stereo mode. Deprecated, use 'hmd pd xxx' instead.</p> <p>hmd sp reset                                Resets to original r.ScreenPercentage value. Deprecated, use 'hmd pd 1' instead.</p> <p>hmd mirror [on|off|toggle]        Enables/disables/toggles mirroring in a window (for \"Application Only\" mode only).</p> <p>hmd mirror 800x600                        Sets mirror window dimension (for Direct mode only).</p> <p>hmd mirror mode 0|1|2                Sets mirror window mode: 0 - standard stereo distorted view, 1 - stereo undistorted view, 2 - mono viewa (a single eye)</p> <p>hmd qahead [on|off]                        Turns QueueAhead on / off or toggles it. Use 'hmd stats' to check its current state.</p> <p>stereo e=0.064                                Eye distance (m). Use 'stereo reset' to restore original value.</p> <p>stereo w2m=100                                Overrides default worldunits-to-meters scale. Use 'stereo reset' to restore original value.</p> <p>stereo ncp=10 fcp=10000                Overrides near clipping and/or far clipping planes for stereo rendering (in cm). Use 'stereo reset' to restore original value.</p> <p>stereo show                                        Shows current ipd and head model offset</p> <p>stereo reset                                Resets stereo settings</p> <p>hmdpos on|off                                Enables/disables positional tracking.</p> <p>hmdpos reset                                Resets forward direction and 'zero' position</p> <p>hmdpos reset -37                        Resets forward direction and apply yaw rotation (in degrees) and 'zero' position</p> <p>hmdpos show                                        Shows status of positional tracking.</p> <p>hmdpos enforce                                Toggles head tracking even if not in stereo (for testing purposes).</p> <p>Stereo/HMD Internals</p> <p>hmdmag on|off                                Turns magnetometer on/off</p> <p>hmdmag show                                        Shows state of magnetometer</p> <p>Misc</p> <p>hmd stats                                        Shows HMD-related stats.</p> <p>hmd grid                                        Toggles lens-centered grid.</p> <p>hmd setint PerfHudMode [0..4]                         Turns on [1..x] or off [0] builtin Performance HUD, modes 1-4.</p> <p>hmd setint DebugHudStereoMode [0..3]         Turns on [1..x] or off [0] builtin debug stereo HUD, modes 1-3.</p> <p>hmddbg showcamera [off | toggle] Draws a tracking camera frustum in the game's world.</p> <p>hmddbg cubes [on | off | toggle] Draws a 'sea of cubes' over the existing scene.</p> <p>hmd updateongt on|off                Turns on/off update-on-gamethread mode (for debugging). On by default.</p> <p>hmd updateonrt on|off                Turns on/off update-on-renderthread mode for lower latency. On by default.</p> <p>hmdversion                                        Prints Oculus SDK version used and Oculus Plugin info</p> <p>uncapfps                                         Uncaps FPS (allows FPS &gt; 62); to restore cap - \"set Engine bSmoothFrameRate 1\"; t.maxfps could also be used for the same purpose.</p>"},{"location":"ue4guide/packaging-cooking/cooking-witheditoronlydata-vs-witheditor/","title":"Cooking witheditoronlydata vs witheditor","text":"<p>If you declare a property in a class inside a WITH_EDITORONLY_DATA only block, then the cooker will detect that and not cook it, UNLESS you override the Serialize function, in which case you are taking serialization into your own hands.</p> <p>If you specifically serialize content which is WITH_EDITORONLY_DATA though then it will get put in the package. You would need to handle the FArchive.IsFilterEditorOnly() case to have the custom serialize code handle this case.</p> <p>Reference From https://udn.unrealengine.com/questions/337026/does-with-editoronly-data-get-cooked.html</p> <p>They are both similar but not identical. In some cases they overlap but they actually mean different things: WITH_EDITORONLY_DATA means that the current build supports editor-only data, i.e can load it. WITH_EDITOR means that the current build has editor functionality. Obviously in some cases one can not exist without the other, but you can have a non-editor builds that can load editor-only data (some of the programs in Engine/Source/Programs work like that) but not the other way around.</p> <p>Reference From https://udn.unrealengine.com/questions/204595/with-editoronly-data-vs-with-editor-and-serializat.html</p> <p>WITH_EDITOR means we are going to compile editor code.</p> <p>WITH_EDITORONLY_DATA means we want to compile the metadata describing the compiled editor code. In general, only the editor cares about this metadata.</p> <p>A program that needs editor metadata could define WITH_EDITORONLY_DATA, such as an editor plugin. Of course as the names suggest, run time code shouldn't use either of these.</p> <p>If you would like to investigate further:</p> <p>CoreMiscDefines.h will set WITH_EDITORONLY_DATA to true if it is able (not already defined, platform supports it, isnt a server and isnt IOS).</p> <p>UEBuildTarget.cs does most of the decision making regarding these defines.Notice that WITH_EDITORONLY_DATA is conditionally defined here GlobalCompileEnvironment.Config.Definitions.Add(\"WITH_EDITORONLY_DATA=0\"); which short circuits the definition in CoreMiscDefines.h.</p> <p>Reference From https://udn.unrealengine.com/questions/304659/the-difference-between-with-editoronly-data-and-wi.html</p> <p>To exclude from dedicated server:</p> C++<pre><code>Implement NeedsLoadForServer() and return false\n</code></pre> <p>Reference From https://udn.unrealengine.com/questions/365330/determining-references-in-the-cooking-time-for-ded.html</p> <p>To exclude stuff from dedicated client:</p> C++<pre><code>[CookerSettings]DedicatedClientExclusion\n</code></pre> <p>Reference From https://udn.unrealengine.com/questions/355061/is-there-existing-functionality-to-remove-server-b.html</p>"},{"location":"ue4guide/packaging-cooking/excluding-directories-using-pakblacklist/","title":"Excluding directories using pakblacklist","text":"<p>Make sure to use Win64 as the folder not WindowsNoEditor:</p> <p>https://answers.unrealengine.com/questions/364659/pakblacklist-developmenttxt.html</p> <p>https://docs.unrealengine.com/latest/INT/Platforms/Android/ReducingAPKSize/index.html#packageblacklist</p>"},{"location":"ue4guide/packaging-cooking/excluding-editor-objects-from-cooking/","title":"Excluding editor objects from cooking","text":"<p>Seems like this is a recurring question that gets answered partially all the time.</p> <p>I'm updating this reply with answers I'm gleaning from my investigation while the question's answered.</p>"},{"location":"ue4guide/packaging-cooking/excluding-editor-objects-from-cooking/#with_editoronly_data-vs-with_editor","title":"WITH_EDITORONLY_DATA vs WITH_EDITOR","text":"<p>WITH_EDITORONLY_DATA is a superset of WITH_EDITOR</p> <p>WITH_EDITOR means we are going to compile editor code.</p> <p>WITH_EDITORONLY_DATA means we want to compile the metadata describing the compiled editor code. In general, only the editor cares about this metadata.</p> <p>A program that needs editor metadata could define WITH_EDITORONLY_DATA, such as an editor plugin. Of course as the names suggest, run time code shouldn't use either of these.</p> <p>CoreMiscDefines.h will set WITH_EDITORONLY_DATA to true if it is able (not already defined, platform supports it, isnt a server and isnt IOS).</p> <p>If you declare a property in a class inside a WITH_EDITORONLY_DATA only block, then the cooker will detect that and not cook it, UNLESS you override the Serialize function, in which case you are taking serialization into your own hands.</p> <p>If you specifically serialize content which is WITH_EDITORONLY_DATA though then it will get put in the package. You would need to handle the FArchive.IsFilterEditorOnly() case to have the custom serialize code handle this case.</p> <p>Excluding content for cooking/loading from dedicated Server or Client</p> <p>To exclude from dedicated server</p> <p>Implement NeedsLoadForServer() and return false</p> <p>https://udn.unrealengine.com/questions/365330/determining-references-in-the-cooking-time-for-ded.html</p> <p>There's a NeedsLoadForClient(), virtual bool NeedsLoadForEditorGame() const override; virtual bool IsEditorOnly() const override calls</p> <p>Also To exclude stuff from dedicated client:</p> C++<pre><code>[CookSettings]\n\nDedicatedClientExclusion\n\nDedicatedServerExclusion\n</code></pre> <p>https://udn.unrealengine.com/questions/355061/is-there-existing-functionality-to-remove-server-b.html</p> <p>Excluding directories from packaging</p> <p>You can add a PakBlackList-Debug.txt in Root/Build/Win64/ to exclude directories or packages from being included in the final build. These are configuration and platform target dependent (e.g. Development + Win64)</p> <p>**Note for Windows:** TargetPlatform should be Win64, not WindowsNoEditor</p> <p>https://answers.unrealengine.com/questions/364659/pakblacklist-developmenttxt.html</p> <p>https://docs.unrealengine.com/latest/INT/Platforms/Android/ReducingAPKSize/index.html#packageblacklist</p> <p>Undocumented Magic Folders That Get Cooked:</p> <p>https://github.com/epicgames/unrealengine/blob/76085d1106078d8988e4404391428252ba1eb9a7/engine/source/editor/unrealed/private/cookontheflyserver.cpp#l5321</p> <p>If you have blueprints here, they &amp; their dependencies will force get added (https://udn.unrealengine.com/questions/351014/packaging-always-includes-content.html)</p> <p>Conversely, if you cook without Pak option on windows, UAT's stager will strip content in folders named UWP, XboxOne, PS4, etc (https://answers.unrealengine.com/questions/241947/additional-asset-directories-not-copied-to-package.html)</p> C++<pre><code>[UI]\n\n+ContentDirectories=/Game/UI\n\n+ContentDirectories=/Game/Widget\n\n+ContentDirectories=/Game/Widgets\n\n+ContentDirectories=/Engine/MobileResources\n</code></pre> <p>Set CanSkipEditorReferencedPackagesWhenCooking to true</p> <p>The way the referenced by editor only packages works is that the package is attempted to be saved, then at save time flags are checked on the package to find out if it's been referenced only by editor only properties (properties within a WITH_EDITORONLY_DATA #ifdef and UObjects that return IsEditorOnly() to true)</p> <p>**BUT**, some operations will clear the isreferencedbyeditoronlyproperties flag on a package. Ex: Calling **LoadObject(asset)** in a class constructor because it makes sense the loader doesn't know that package is being loaded into an editor only property. Similarly, loading an asset from a config ini will do the same (**LoadConfig()**)</p> <p>You can get around it with using static constructor helpers. See [here][https://udn.unrealengine.com/questions/374544/editor-only-data-appears-to-be-being-cooked.html] for more info.</p> <p>Override UObject::PreSave() to allow editor only objects to generate non-editor only data</p> <p>EditorOnly objects are processed in the cook to give them the opportunity to generate non-editor only content in their PreSave()</p> <p>Filtering FStringAssetReferences with LoadStringAssetReferenceInCook</p> <p>Your game can handle the FCoreDelegates::LoadStringAssetReferenceInCook function. Here you can decide what string asset references you want to be resolved at cook time. Just return false for everything and no string asset references will be cooked</p> <p>\"Epic uses this internally to remove all kinds of content from builds, mostly to prevent heros from being cooked which haven't been released yet.\"</p> <p>**Implementing CookModificationDelegate**</p> <p>You can use this to add extra packages to your cook and possibly filter existing ones</p> <p>Random Useful Info</p> <ul> <li> <p>Don't use multiprocess cooker. It's unreliable and seems like epic doesn't use it internally</p> </li> <li> <p>Since UDN's search functionality is lacking, combing through [daniel.lamb's][https://udn.unrealengine.com/users/5613/daniellamb.html?answerpage=1&amp;answerpagesize=15&amp;answersort=active] previous answers is a good resource</p> </li> <li> <p>If -iterate is clearing out the cooking directory on every run, you may need to add</p> </li> </ul> <p>[CookSettings]</p> <p>+ConfigSettingBlacklist=*.EditorKeyBindings</p> <p>+ConfigSettingBlacklist=*.SourceControlSettings</p> <p>+ConfigSettingBlacklist=*.SourceControl.SourceControlSettings</p> <ul> <li>Use these settings to increase cooking performance and remove -FORCELOGFLUSH from the cook commandlet param</li> </ul> <p>[1]: https://github.com/EpicGames/UnrealEngine/blob/76085d1106078d8988e4404391428252ba1eb9a7/Engine/Source/Editor/UnrealEd/Private/CookOnTheFlyServer.cpp#L5321</p> <p>[2]: https://udn.unrealengine.com/users/5613/daniellamb.html?answerPage=1&amp;answerPageSize=15&amp;answerSort=active</p> <p>https://udn.unrealengine.com/answers/375077/edit.html</p>"},{"location":"ue4guide/packaging-cooking/optimizing-cooking/","title":"Optimizing cooking","text":"<p>https://docs.unrealengine.com/latest/INT/Engine/Performance/CookingStats/index.html</p>"},{"location":"ue4guide/packaging-cooking/packaged-game-paths-obtain-directories-based-on-executable-location/","title":"Config File Paths Locations:","text":"<p>For Cooked Builds that are run from editor, visual studio, or run.py, they are in</p> C++<pre><code>\"BBR\\Saved\\Cooked\\WindowsNoEditor\\BBR\\Saved\\Config\\WindowsNoEditor\\\"\n\nStaged or Packaged Builds:\n\n\"BBR\\Saved\\StagedBuilds\\WindowsNoEditor\\BBR\\Config\\\"\n</code></pre>"},{"location":"ue4guide/packaging-cooking/packaged-game-paths-obtain-directories-based-on-executable-location/#general-paths","title":"General Paths:","text":""},{"location":"ue4guide/packaging-cooking/packaged-game-paths-obtain-directories-based-on-executable-location/#installdirwindowsnoeditorgamenamebinarieswin64","title":"InstallDir/WindowsNoEditor/GameName/Binaries/Win64","text":"C++<pre><code>//InstallDir/WindowsNoEditor/GameName/Binaries/Win64\n\nconst FString ThePath = FString(FPlatformProcess::BaseDir());\n</code></pre>"},{"location":"ue4guide/packaging-cooking/packaged-game-paths-obtain-directories-based-on-executable-location/#installdirwindowsnoeditor","title":"InstallDir/WindowsNoEditor/","text":"C++<pre><code>//InstallDir/WindowsNoEditor/\n\nconst FString ThePath = FPaths::ConvertRelativePathToFull(FPaths::RootDir());\n</code></pre>"},{"location":"ue4guide/packaging-cooking/packaged-game-paths-obtain-directories-based-on-executable-location/#installdirwindowsnoeditorgamename","title":"InstallDir/WindowsNoEditor/GameName","text":"C++<pre><code>//InstallDir/WindowsNoEditor/GameName\n\nconst FString ThePath = FPaths::ConvertRelativePathToFull(FPaths::GameDir());\n</code></pre>"},{"location":"ue4guide/packaging-cooking/packaged-game-paths-obtain-directories-based-on-executable-location/#installdirwindowsnoeditorgamename_1","title":"InstallDir/WindowsNoEditor/GameName","text":"C++<pre><code>//InstallDir/WindowsNoEditor/GameName/\n\nconst FString ThePath = FPaths::ConvertRelativePathToFull(FPaths::GameUserDir());\n</code></pre>"},{"location":"ue4guide/packaging-cooking/packaged-game-paths-obtain-directories-based-on-executable-location/#installdirwindowsnoeditorgamenamesaved","title":"InstallDir/WindowsNoEditor/GameName/Saved","text":"C++<pre><code>//InstallDir/WindowsNoEditor/GameName/Saved\n\nconst FString ThePath = FPaths::ConvertRelativePathToFull(FPaths::GameSavedDir());\n</code></pre>"},{"location":"ue4guide/packaging-cooking/packaged-game-paths-obtain-directories-based-on-executable-location/#installdirwindowsnoeditorgamenamesavedlogs","title":"InstallDir/WindowsNoEditor/GameName/Saved/Logs","text":"C++<pre><code>//InstallDir/WindowsNoEditor/GameName/Saved/Logs\n\nconst FString ThePath = FPaths::ConvertRelativePathToFull(FPaths::GameLogDir());\n</code></pre> <p>Project Directory:</p> C++<pre><code>FPlatformMisc::ProjectDir()\n\nFPlatformMisc::RootDir()\n\nFPlatformMisc::EngineDir()\n\nFPlatformMisc::LaunchDir()\n</code></pre> <p>Reference From https://wiki.unrealengine.com/Packaged_Game_Paths,_Obtain_Directories_Based_on_Executable_Location</p>"},{"location":"ue4guide/packaging-cooking/packaged-game-paths-obtain-directories-based-on-executable-location/#get-plugin-file-path","title":"Get Plugin File Path","text":"C++<pre><code>FString baseDir    = IPluginManager::Get().FindPlugin(\"LivePP\").IsValid() ? IPluginManager::Get().FindPlugin(\"LivePP\")-&gt;GetBaseDir() : \"\";\n</code></pre>"},{"location":"ue4guide/packaging-cooking/packaging-cooking/","title":"TODO:","text":"<ul> <li>Look into multiprocess cooking and how to enable if it's not on by default</li> </ul>"},{"location":"ue4guide/packaging-cooking/packaging-cooking/#useful-console-command-cooking","title":"Useful Console Command Cooking:","text":""},{"location":"ue4guide/packaging-cooking/packaging-cooking/#important-these-have-to-be-passed-directly-to-the-cook-commandlet","title":"IMPORTANT: THESE HAVE TO BE PASSED DIRECTLY TO THE COOK COMMANDLET.","text":""},{"location":"ue4guide/packaging-cooking/packaging-cooking/#check-the-variants-for-passing-to-project-launcherautomation-tool","title":"Check the variants for passing to project launcher/automation tool","text":"<ul> <li> <p>-NODEV pass itas a cooking command line switch to the cook commandlet to exclude content in developer folders</p> </li> <li> <p>**AUTOMATION VARIANT: -**AdditionalCookerOptions=\"-NODEV\"</p> </li> <li> <p>-verbosecookerwarnings</p> </li> <li> <p>**AUTOMATION VARIANT: -**AdditionalCookerOptions=\"-verbosecookerwarnings\"</p> </li> <li> <p>-skipeditorcontent</p> </li> <li> <p>AUTOMATION VARIANT: -SkipCookingEditorContent</p> </li> <li> <p>-LogCmds=\"global verbose\"</p> </li> <li> <p>For missing asset references, turn on LogRedirectors verbose logging to show property references to missing assets e.g. -LogCmds=\"LogRedirectors verbose\"</p> </li> <li> <p>**AUTOMATION VARIANT: -**AdditionalCookerOptions=\"-LogCmds=\\\"global verbose\\\"\"</p> </li> <li> <p>IMPORTANT: Don't have a trailing quote in Additional Cooker Options</p> </li> <li> <p>GOOD: -AdditionalCookerOptions=\"-LogCmds=\\\"LogRedirectors verbose\\\" -nodev\"</p> </li> <li> <p>BAD: -AdditionalCookerOptions=\"-nodev -LogCmds=\\\"LogRedirectors verbose\\\"\"</p> </li> </ul>"},{"location":"ue4guide/packaging-cooking/packaging-cooking/#packaging-test-build","title":"Packaging Test Build","text":"<ul> <li>Go to your UE4/Engine/Build/BatchFiles folder, and run the following:</li> </ul> Batchfile<pre><code>\"UnrealEngine\\Engine\\Build\\BatchFiles\\RunUAT.bat\" BuildCookRun -project=\"UnrealEngine\\GENeuro\\Neuro.uproject\" -windows-noeditor -cook -build -stage -pak -package -clientconfig=Test\n</code></pre>"},{"location":"ue4guide/packaging-cooking/packaging-cooking/#packaging-without-cooking-or-building","title":"Packaging without cooking or building","text":"<ul> <li>\"UnrealEngine\\Engine\\Build\\BatchFiles\\RunUAT.bat\" BuildCookRun -project=\"UnrealEngine\\GENeuro\\Neuro.uproject\" -windows-noeditor -skipcook -stage -pak -package -clientconfig=Test</li> </ul>"},{"location":"ue4guide/packaging-cooking/packaging-cooking/#only-cook-content","title":"Only Cook Content","text":"Batchfile<pre><code>\"UnrealEngine\\Engine\\Build\\BatchFiles\\RunUAT.bat\" BuildCookRun -project=\"UnrealEngine\\\\GENeuro\\\\Neuro.uproject\" -windows-noeditor -cook -iterate -clientconfig=Test\n</code></pre>"},{"location":"ue4guide/packaging-cooking/packaging-cooking/#cooking-content-detailed-sometimes-runuat-fails-but-this-direct-command-doesnt","title":"Cooking content Detailed [sometimes RunUAT fails but this direct command doesn't]:","text":"<ul> <li> <p>UE4Editor.exe  -run=cook -targetplatformname=WindowsNoEditor -targetconfiguration=DebugGame -targetplatform=+ [-cookonthefly][-iterate] [-map=+] <li> <p>UE4Editor-Cmd.exe  -run=cook -targetplatformname=WindowsNoEditor -targetconfiguration=DebugGame -targetplatform=+ [-cookonthefly][-iterate] [-map=+]"},{"location":"ue4guide/packaging-cooking/packaging-cooking/#cook-on-the-fly","title":"Cook On The Fly:","text":"Batchfile<pre><code>\"UnrealEngine\\Engine\\Binaries\\Win64\\UE4Editor.exe\" \"UnrealEngine\\\\BBR\\\\BBR.uproject\" -run=cook -targetplatform=Windows -cookonthefly -iterate -debug -log\n\n\"UnrealEngine\\Engine\\BBR\\Binaries\\Win64\\BBRProto-Win64-DebugGame.exe\" -Game -debug -log -filehostip=127.0.0.1\n\n\"UnrealEngine\\Engine\\Binaries\\Win64\\UE4Editor.exe\" \"UnrealEngine\\\\BBR\\\\BBR.uproject\" -targetplatform=Windows -Game -debug -log -filehostip=127.0.0.1\n</code></pre>"},{"location":"ue4guide/packaging-cooking/packaging-cooking/#cooking-on-the-fly-notes","title":"Cooking on the Fly Notes","text":""},{"location":"ue4guide/packaging-cooking/packaging-cooking/#server","title":"Server","text":""},{"location":"ue4guide/packaging-cooking/packaging-cooking/#basic-command-line","title":"Basic Command Line","text":"Batchfile<pre><code>\"UnrealEngine\\Engine\\Binaries\\Win64\\UE4Editor.exe\" \"UnrealEngine\\\\BBR\\\\BBR.uproject\" -run=cook -targetplatform=Windows -cookonthefly -iterate -debug -log\n</code></pre>"},{"location":"ue4guide/packaging-cooking/packaging-cooking/#project-file","title":"Project File","text":"<p>If you do not specify the Unreal project file, you will get a message box telling you paper2D is not present, and the program will exit when you click it.</p>"},{"location":"ue4guide/packaging-cooking/packaging-cooking/#targetplatform","title":"TargetPlatform","text":"<p>When running the standalone version, the game will fail to connect to a cook server run with \"-targetplatform=Windows\"; it requires \"-targetplatform=WindowsNoServer\". The target platforms must match completely. I haven't tried it, but that should imply that the server requires \"-targetplatform=WindowsServer\". That means that a server cannot fulfill request to both a standalone game and a server. There is no command line argument for port number. Thus, to have both a client and a server running with data cooked on the fly requires two computers right now.</p>"},{"location":"ue4guide/packaging-cooking/packaging-cooking/#client","title":"Client","text":""},{"location":"ue4guide/packaging-cooking/packaging-cooking/#basic-command-line_1","title":"Basic Command Line","text":"Batchfile<pre><code>UnrealEngine\\Engine\\Binaries\\Win64\\UE4Editor-Win64-Debug.exe\" \"UnrealEngine\\BBR\\BBR.uproject\" -targetplatform=Windows -Game -debug -log -filehostip=127.0.0.1\n</code></pre>"},{"location":"ue4guide/packaging-cooking/packaging-cooking/#targetplatform_1","title":"TargetPlatform","text":"<p>The -targetplatform argument is ignored when running the standalone. It always attempts to connect as WindowsNoServer. I don't know if the other builds make requests based on the argument.</p>"},{"location":"ue4guide/packaging-cooking/packaging/","title":"Packaging","text":"<p>UE4 packages everything in the project folder by default.</p> <p>Specify only the maps you care about in DefaultEditior.ini</p> <ul> <li> <p>UE will then package everything referenced within those files</p> </li> <li> <p>Note: Unused references are included (default texutres referenced in Materials or isolated blueprint nodes referencing assets). Be sure to clean up your graphs to minimize package size</p> </li> </ul> <p>To build for 64-bit release:</p> <p>Change this in the source code:</p> <p>Unfortunately there's no way of switching from the editor UI in the 4.2 build. If you want to change it manually,you can go to FMainFrameActionCallbacks::PackageProject() in Engine\\Source\\Editor\\MainFrame\\Private\\Frame\\MainFrameActions.cpp, and change this bit of code:</p> C++<pre><code>if (PlatformName == \"WindowsNoEditor\")\n{\nif (PackagingSettings-&gt;BuildConfiguration == PPBC_Shipping)\n{\nOptionalParams += TEXT(\" -targetplatform=Win32\");\n}\nelse\n{\nOptionalParams += TEXT(\" -targetplatform=Win64\");\n}\n}\n</code></pre> <p>If you get rid of the check for the shipping configuration, it should work.</p> <p>Reference From https://answers.unrealengine.com/questions/32490/ue4-editor-64-bit-vs-32-bit-why-does-the-editor-ru.html</p>"},{"location":"ue4guide/packaging-cooking/selecting-maps-to-cook/","title":"Selecting maps to cook","text":"<p>DefaultGame.ini</p> <p>[Script/UnrealEd.ProjectPackagingSettings]</p> <ul> <li> <p>bCookAll: if true, cook everything in the content directory. This means that if you have an asset that is not referenced by any others, it will still end up in the cook. From this it follows that the list of maps to be cooked is simply all of them, even if they are not in any other .inis.</p> </li> <li> <p>bCookMapsOnly: this setting only has any effect if bCookAll is set. If it is true, \"cook all\" does not actually cook every asset, just all maps and the assets they reference.</p> </li> <li> <p>DirectoriesToAlwaysCook: like bCookAll for subdirectories. You can have more than one of these (possibly combined with DirectoriesToNeverCook) to get more fine-grained control than you would with bCookAll.</p> </li> <li> <p>bCookSinglePackage: affects MapsToCook behaviour (and nothing else), see below.</p> </li> <li> <p>+MapsToCook: which maps to cook if: (1) bCookSinglePackage is false (the default), and (2) there are no maps specified on the command line.</p> </li> </ul> <p>DefaultEditor.ini</p> <p>[AlwaysCookMaps]</p> <p>+Map: map(s) to always cook (one line for each). Despite what the filename suggests, this setting is also used by the automation tool and project launcher/frontend. And as you suspected, these maps are cooked regardless of whether they are selected in the launcher or not.</p> <p>[AllMaps]</p> <p>+Map: map(s) listed here (one line for each) are used as a fallback option in case there are (1) no maps specified on the command line and (2) no maps in MapsToCook. This is for backwards compatibility only.</p> <p>If you want to make a selection of maps that should really always be cooked, use AlwaysCookMaps. I would not recommend using either AllMaps or MapsToCook, since their behaviour depends on other environment variables which makes them prone to unexpected breakage. If you want you can set MapsToCook, but be aware that if you specify maps on the command line this setting will be ignored.</p> <p>Reference From https://forums.unrealengine.com/development-discussion/c-gameplay-programming/72687-list-of-maps-to-cook</p>"},{"location":"ue4guide/packaging-cooking/speed-up-cooking-or-deploying-to-ps4/","title":"Speed up cooking or deploying to ps4","text":"<p>https://udn.unrealengine.com/questions/352615/feature-request-speed-up-deploying-to-consoletarge.html</p> <p>https://udn.unrealengine.com/questions/352872/fast-iteration-on-console.html</p>"},{"location":"ue4guide/packaging-cooking/strip-ps4-or-xbox-one-files-from-staging/","title":"Strip ps4 or xbox one files from staging","text":"<p>n CopyBuildToStagingDirectory.Automation.cs, a function is called to copy UFS and NonUFS folders to the staging folder (`SC.StageFiles(...)`):</p> <p>The final argument passed to the function is a bool called bStripFilesForOtherPlatforms that is determined using:</p> C++<pre><code>!Params.UsePak(SC.StageTargetPlatform)\\\n</code></pre> <p>So basically if you aren't using a pakfile, bStripFilesForOtherPlatforms will be true and you're in danger of getting the same behavior I describe.</p> C++<pre><code> public bool UsePak(Platform PlatformToCheck)\n {\n return Pak || PlatformToCheck.RequiresPak(this) == Platform.PakType.Always;\n }\n</code></pre> <p>When this boolean is set, there's some code in DeploymentContext.cs::StageFiles that looks at the full path of the content you are including. If this content contains a folder whose name matches any platforms that you are not building for then the content gets ignored - as in not copied.</p> <p>For future generations, strategically use platform names in your build folders: Win32 Win64 WinRT WinRT_ARM UWP Mac XboxOne PS4 IOS Android HTML5 Linux AllDesktop</p> <p>Reference From https://answers.unrealengine.com/questions/241947/additional-asset-directories-not-copied-to-package.html</p>"},{"location":"ue4guide/performance-optimization/asset-size-loading/","title":"Asset Size Reduction and Loading Time Optimization","text":""},{"location":"ue4guide/performance-optimization/asset-size-loading/#unrealfest-europe-2018-introduction-to-ue4-asset-reduction-tools-and-optimization-tips-for-load-times-and-gc","title":"UnrealFest Europe 2018: Introduction to UE4 Asset Reduction Tools and Optimization Tips for Load Times and GC","text":""},{"location":"ue4guide/performance-optimization/asset-size-loading/#find-objects-that-take-a-lot-of-time-to-do-vertex-calculations-using-graphics-debugger","title":"Find objects that take a lot of time to do vertex calculations using Graphics Debugger","text":"<p>Example:</p> <ol> <li> <p>To Eliminate pixel shader costs,    - set r.screenpacentage to a very low value.</p> </li> <li> <p>Capture and check cost of each draw call with GD    - (Set r.RHISetGPUGaptureOptions to 1, and then \u201cProfileGPU\u201d)</p> </li> </ol> <ul> <li> <p>SkeletalMesh</p> </li> <li> <p>r.skeletalmeshlodbias: add/subtract LOD levels</p> </li> <li> <p>r.skeletalmeshlodscale: Scale LOD distances</p> </li> <li> <p>Static Mesh</p> </li> <li> <p>r.StaticMeshLODDistanceScale: Scale LOD distances</p> </li> <li> <p>r.forceLOD: force LOD level</p> </li> </ul> <p>These commands affects all objects and can\u2019t target individual objects specifically, but can use them to do a quick check of the whole scene</p>"},{"location":"ue4guide/performance-optimization/asset-size-loading/#using-compressanimations-commandlet-you-can-compress-all-animation-sequences-in-your-project","title":"Using \u201cCompressAnimations\u201d Commandlet, You can compress all animation sequences in your project.","text":"<ul> <li> <p>Example)</p> </li> <li> <ul> <li>UE4Editor-cmd.exe [ProjectPath] \u2013run=CompressAnimations</li> </ul> </li> <li> <p>You can change the compression method in Project Settings</p> </li> <li> <p>You can set individual animations to not to be compressed</p> </li> <li> <ul> <li>\u201cDo not override compression\u201d option</li> </ul> </li> </ul> <p></p>"},{"location":"ue4guide/performance-optimization/asset-size-loading/#animation-compression","title":"Animation Compression","text":"<p>How to check the compressed asset data size 1</p> <p></p> <p>You can see sizes and compressed ratios</p> <p>in Content Browser.</p> <p>Can also verify by looking at the cooked asset\u2019s size, and the size in memory with memreport</p> <ul> <li> <p>Stat Levels</p> </li> <li> <p></p> <ul> <li> <p>Gray \uff1d Persistent Level</p> </li> <li> <p>Red \uff1d Unloaded</p> </li> <li> <p>Purple = Loading</p> </li> <li> <p>Orange\uff1d AddToWorld</p> </li> <li> <p>Green \uff1d Finished Loading</p> </li> <li> <p>The stat levels console command will show you a list of the current levels in your game, colored by their current load status</p> </li> <li> <p>You can see their state, whether it be unloaded (red), loading(purple), loaded to memory but still adding objects to the world (orange), and finally done loading (green)</p> </li> <li> <p>Can use this as a quick way to see which levels are taking the longest to load</p> </li> </ul> </li> <li> <p>Loadtimes.DumpReport (Loadtimes.reset): Dive deeper</p> </li> <li> <p>List load times for each package (asset)</p> <ul> <li> <p>\u201cFILE\u201d option outputs the result in a .loadreport file.</p> </li> <li> <p>\u201cLOWTIME=0.05\u201d option eliminates packages whose load-time is under the specified value from the list.</p> </li> </ul> </li> <li> <p>LoadTimes.Reset</p> </li> <li> <p>Clear all dumped loadtime data.</p> </li> <li> <p>You have to call this command before stating load levels you want to profile.</p> </li> <li> </li> <li> <p>Enable this define <code>PERF_TRACK_DETAILED_ASYNC_STATS</code> (AsyncLoading.h)</p> </li> <li> <p>This define dumps the details of AddToWorld()</p> </li> <li> <p>Can be a useful clue in finding AddToWorld bottlenecks</p> </li> <li> <p>Example:</p> </li> </ul> <p>UWorld::AddToWorld: updating components for /Game/Sub took (less than) 110.62 ms</p> <p>Detailed AddToWorld stats for '/Game/Sub' - Total 425.37ms</p> <p>Move Actors : 0.00 ms</p> <p>Shift Actors : 0.00 ms</p> <p>Update Components : 425.12 ms</p> <p>Init BSP Phys : 0.00 ms</p> <p>Init Actor Phys : 0.00 ms</p> <p>Init Actors : 0.00 ms</p> <p>Initialize : 0.08 m</p>"},{"location":"ue4guide/performance-optimization/asset-size-loading/#profiling--optimization-of-load-times-two-areas","title":"Profiling &amp; Optimization of load times: Two areas","text":""},{"location":"ue4guide/performance-optimization/asset-size-loading/#load-to-memory-from-storage","title":"Load to Memory from Storage","text":""},{"location":"ue4guide/performance-optimization/asset-size-loading/#addtoworld-hitches-when-streaming","title":"AddToWorld (hitches when streaming)","text":""},{"location":"ue4guide/performance-optimization/asset-size-loading/#load-to-memory-profiling","title":"Load To Memory Profiling","text":""},{"location":"ue4guide/performance-optimization/asset-size-loading/#profiling-addtoworld","title":"Profiling AddToWorld","text":""},{"location":"ue4guide/performance-optimization/asset-size-loading/#optimization","title":"Optimization","text":"<ul> <li> <p>Pak file should be used for load-time.</p> </li> <li> <p>Combining all content into a single UnrealPak is necessary to use the Event Driven Loader, which is the the loading method we wrote specifically optimized for consoles</p> </li> <li> <p>Compression: depends on the project</p> </li> <li> <p>Also whether or not to compress content can have different impacts on different projects, so need to test for your particular project on the target hardware</p> </li> <li> <p>Optimizing load times FileOpenOrder</p> </li> <li> <p>You can sort assets in Pak files in file open order.</p> <ul> <li> <p>FileOpenOrder is a really easy win for all projects. It just arranges the files on disk in the order they are loaded.</p> </li> <li> <p>You play the game once and record the order the files were loaded, and then you package again passing that data to the packaging process</p> </li> <li> <p>You have to play game and get file open order logs in advance</p> </li> <li> <p>Detailed explanation in the official docs Packaging Projects</p> </li> </ul> </li> <li> <p>It is effective on SSDs too Due to block read size in file system</p> </li> <li> <p>Eliminate data that is never used</p> </li> <li> <p>Material: Shader Permutation Reduction</p> </li> <li> <p>Vertex: Reverse Index Buffer</p> <p>Probably almost all of games should turn off\u2026</p> <ul> <li>Reverse Index Buffer</li> </ul> <p>used when rendering a negative scale object</p> </li> </ul> <p>Some games can disable\u2026</p> <ul> <li>Depth-only Index Buffer</li> </ul> <p>Index Buffer to make shadow rendering faster</p> <p>If you want to turn it off, ensure shadow rendering performance is acceptable</p> <p>No effect on Console</p> <p>- Adjacency Index Buffer</p> <p>This is for Tessellation. But UE4 doesn\u2019t support Tessellation on consoles</p> <p>So UE4 disregards this option when cooking for console</p> <ul> <li> <p>Preloading with Asset Manager</p> </li> <li> <p>Simplify logic in BeginPlay</p> </li> <li> <p>BeginPlay runs during AddToWorld()</p> </li> <li> <p>Move logic to Construction Script when possible</p> <ul> <li>Construction Script runs at cook time. Construction scripts are evaluated at cook time, and the post-construction script object state is serialized</li> </ul> </li> <li> </li> <li> <p>Noticeable and unacceptable hitches due to GC</p> </li> <li> <p>You might see hitches when streaming levels, because..</p> </li> <li> <p>The number of objects temporarily increases during the transition</p> </li> <li> <p>Many objects are deleted at once</p> </li> </ul> <p></p> <p>GC Cost = Checking cost + Deletion Cost is not entirely accurate</p> <p>Deletion Cost = Detaching Dependencies + **Deleting actual objects (**can be distributed to other frames )</p> <p>Cost at the frame GC is called = Checking cost + Detaching Dependencies cost</p> <p>GC implementation</p> <ul> <li>All UObjects are stored in an array</li> <li>When GC happens, by default UE4 will check all elements in the array and delete ones that aren\u2019t referenced</li> <li>So, there are two types of costs here, the costs of checking each object in the array (marking), and the costs of deleting each unreferenced object (sweeping)</li> <li>Means it is possible to see hitching even if no objects are actually being deleted if the number of UObjects is high</li> </ul>"},{"location":"ue4guide/performance-optimization/asset-size-loading/#garbage-collection","title":"Garbage Collection","text":""},{"location":"ue4guide/performance-optimization/asset-size-loading/#how-to-profile-gc-costs","title":"How to profile GC costs","text":"<p>The main command is \u201clog LogGarbage log\u201d</p> <p>The command name is a little confusing, but this command is saying \u201cI want to change logging settings, for the category of logging named \u201cLog Garbage\u201d, and I want to see all messages in that log category that are verbosity \u201clog\u201d or greater\u201d</p> <p>You can also do \u201clog LogGarbage verbose\u201d to see more log messages</p> <p>You can see the Checking cost and the deletion cost are printed out in this manner</p> <p></p> <p></p> <p></p> <ol> <li>(Stat Startfile/Stopfile)</li> </ol> <ul> <li>Use normal UE4 Profiler</li> </ul> <ol> <li>CBD Profiling Tools</li> </ol> C++<pre><code>#define PROFILE_ConditionalBeginDestory\n\n#define PROFILE_GCConditionalBeginDestroyByClass\n\nThese defines dump delete costs per each assets as below.\n\nLogTemp: 1090 cnt 2.23us per 2.43ms total /Game/Blueprints/Character/AAAAAAAAA\n\nLogTemp: 615 cnt 2.58us per 1.59ms total /Game/Blueprints/Character/BBBBBBBBBB\n\nLogTemp: 698 cnt 2.11us per 1.48ms total /Game/Blueprints/Character/CCCCCCCCCC\n\nLogTemp: 489 cnt 2.64us per 1.29ms total /Game/Blueprints/Gimmick/GimmickAAAAA\n\nLogTemp: 261 cnt 4.22us per 1.10ms total /Game/Maps/MAPMAPMAP\n</code></pre> <ol> <li>Obj list / Blueprint Stats</li> </ol> <p>The \u201cObj list\u201d command will allow you to see how many and what type of UObjects are in your scene</p> <p>Class Count</p> <p>MetaData 357</p> <p>SkeletalMesh 1</p> <p>Package 575</p> <p>Class 2393</p> <p>FontFace 6</p> <p>BoolProperty 4797</p> <p>FloatProperty 3788</p> <p>ObjectProperty 3251</p> <p>5/5 Command to output number of UObjects per Blueprint</p> <p></p> <ul> <li> <p>As you might have noticed on the previous slide, there were a lot of UProperties like Bool or Float Properties</p> </li> <li> <p>One thing that we\u2019ve seen before is heavy usage of macros leading to a lot of UProperty objects existing, and slow Garbage Collection times</p> </li> <li> <p>The blueprint stats plugin can help you find the blueprints with the most UObjects, so you know where to focus your efforts</p> </li> <li> <p>For each use of a macro in a blueprint graph, any local variables (inputs and outputs) create a UProperty to represent them. So using lots of macros with a lot of inputs and outputs can slow down garbage collection time when those blueprints are loaded.</p> </li> <li> <p>This per-instance cost of macros is not true of blueprint functions, so if you have blueprint macros with a lot of input and output variables that are used in many places, we recommend converting them to blueprint functions</p> </li> </ul>"},{"location":"ue4guide/performance-optimization/asset-size-loading/#log-loggarbage-log-log-loggarbage-verbose","title":"Log loggarbage log (Log loggarbage verbose)","text":""},{"location":"ue4guide/performance-optimization/asset-size-loading/#stat-dumphitches","title":"Stat dumphitches","text":""},{"location":"ue4guide/performance-optimization/asset-size-loading/#project-side-optimization-for-garbage-collection","title":"Project-side Optimization for Garbage Collection","text":"<ul> <li>DisregardGCObject</li> </ul> <p>1. Enable DisregardGCObject</p> C++<pre><code>[/Script/Engine.GarbageCollectionSettings]\n</code></pre> <p>gc.MaxObjectsNotConsideredByGC=1</p> C++<pre><code>gc.SizeOfPermanentObjectPool=0\n</code></pre> <p>2. When enabled, You can see the following log messages at boot time</p> C++<pre><code>LogUObjectArray: **52083** objects as part of root set at end of initial load.\n\nLogUObjectAllocator: **9937152** out of 0 bytes used by permanent object pool.\n</code></pre> <p>3. Set the 2 parameters to the 2 values you got above.</p> C++<pre><code>[/Script/Engine.GarbageCollectionSettings]\n\ngc.MaxObjectsNotConsideredByGC= **52083**\n\ngc.SizeOfPermanentObjectPool= **9937152**\n</code></pre> <ul> <li>GC Clustering</li> </ul> <p></p> <p>Concept:</p> <p>Try to cluster UObjects to decrease check costs.</p> <p>Note: GC Clustering doesn\u2019t improve delete costs.</p> <p>This presentation discusses two kinds of clustering,</p> <p>Actor Clustering</p> <ul> <li>Actors can be put in a cluster with the level they belong to, and just removed when the level is removed</li> <li>There is a setting for this, which is only enabled by default for static meshes and reflection captures</li> </ul> <p></p> <ul> <li>Clustering runs when actors are added to the scene (during AddtoWorld()), so new references to this object can\u2019t be added afterwards</li> <li>This can happen, for example, if you later load a sequencer sequence that references a static mesh</li> <li>In development builds there are warnings to help you correct the problem if you accidentally break that rule</li> </ul>"},{"location":"ue4guide/performance-optimization/asset-size-loading/#blueprint-clustering","title":"Blueprint Clustering.","text":"<ul> <li> <p>In general, Blueprint objects have a lot of UObjects (especially UProperties).</p> </li> <li> <p>So UObjects for each Blueprint should be an effective optimization</p> </li> <li> <p>\u201cBlueprint clustering has been enabled for Fortnite, which has significantly reduced garbage collection mark times (measured from ~66ms to ~22ms on PS4). Also made significant performance improvements to cluster verification code used in development builds, and started work on a technique that moves clustered objects into the disregard-to-GC pool for a faster early out during the scan.\u201d</p> </li> </ul>"},{"location":"ue4guide/performance-optimization/asset-size-loading/#file-profiler","title":"File Profiler","text":"<p>https://coconutlizard.co.uk/new/programming/improving-file-profiler</p>"},{"location":"ue4guide/performance-optimization/blueprint-optimization/","title":"Blueprint optimization","text":"<p>Inline Blueprint functions:</p> <p>Give BP compiler hints on inlining functions. Look at KismetMathLibrary.h for details:</p> C++<pre><code>// Conditionally inlined\n\n#if KISMET_MATH_INLINE_ENABLED\n\n#include \"KismetMathLibrary.inl\"\n\n#endif\n</code></pre>"},{"location":"ue4guide/performance-optimization/memory/","title":"Memory","text":"<p>https://www.unrealengine.com/en-US/blog/debugging-and-optimizing-memory</p> <p>Debugging Engine Memory Allocations</p>"},{"location":"ue4guide/performance-optimization/misc-helper-functions/","title":"Reducing Stat System Overhead","text":"<ul> <li>Set these defines to reduce stat system overhead for named events and/or external profilers</li> </ul> C++<pre><code>PLATFORM_USES_ANSI_STRING_FOR_EXTERNAL_PROFILING=1\nENABLE_STATNAMEDEVENTS_UOBJECT=0\nPLATFORM_LIMIT_PROFILER_UNIQUE_NAMED_EVENTS=1\nSLATE_VERBOSE_NAMED_EVENTS=0\n</code></pre> <ul> <li>You can also set <code>GCycleStatsShouldEmitNamedEvents = true|false</code> to prevent stat system from emitting cycle stats as named events</li> <li>Passing <code>-statnamedevents</code> as a command line argument toggles this on/off as well</li> </ul>"},{"location":"ue4guide/performance-optimization/performance-guide-overview/","title":"Performance Profiling &amp; Optimization Guide","text":""},{"location":"ue4guide/performance-optimization/performance-guide-overview/#overview","title":"Overview","text":"<p>The UE4 Documentation has been updated to be more useful (circa 4.22)  https://docs.unrealengine.com/en-US/Engine/Performance/index.html</p>"},{"location":"ue4guide/performance-optimization/performance-guide-overview/#important-settings","title":"Important settings","text":"<p>Make sure to perf profile under the right conditions:</p> <ul> <li>Never \"Debug\". \"Development\" is convenient, but \"Test\" is closer to shipping</li> <li>Never in Editor (Slate UI renders each frame &amp; some thumbnails update more irregularly)</li> <li>Make sure lighting is built; unbuilt lighting uses a slower path    https://answers.unrealengine.com/questions/17151/what-are-the-in-engine-tools-for-cpu-and-gpu-profi.html?sort=newest</li> </ul>"},{"location":"ue4guide/performance-optimization/performance-guide-overview/#controlling-quality-settings","title":"Controlling Quality Settings","text":"INI<pre><code>r.ScreenPercentage 25\nr.ViewDistanceScale 0.4\nr.PostProcessAAQuality 0\nr.PostProcessingQuality 0\nr.ShadowQuality 0\nr.TextureQuality 0\nr.EffectsQuality 0\nsg.ResolutionQuality 25\nsg.ViewDistanceQuality 0\nsg.AntiAliasingQuality 0\nsg.PostProcessQuality 0\nsg.ShadowQuality 0\nsg.TextureQuality 0\nsg.EffectsQuality 0\n</code></pre> <p>Toggle HMD Settings: <code>hmd vsync on/off/reset</code></p> <p>Reference From https://answers.unrealengine.com/questions/23023/trouble-configuring-game-settings.html</p> <p>Texture Quality Settings</p> INI<pre><code>[SystemSettingsEditor] ; For controlling system settings in the editor\n[SystemSettings]\n; NOTE THAT ANY ITEMS IN THIS SECTION WILL AFFECT ALL PLATFORMS!!!\n\nTEXTUREGROUP_World=(MinLODSize=1,MaxLODSize=4096,LODBias=0,MinMagFilter=aniso,MipFilter=point)\n\nTEXTUREGROUP_WorldNormalMap=(MinLODSize=1,MaxLODSize=4096,LODBias=0,MinMagFilter=aniso,MipFilter=point)\nTEXTUREGROUP_WorldSpecular=(MinLODSize=1,MaxLODSize=4096,LODBias=0,MinMagFilter=aniso,MipFilter=point)\nTEXTUREGROUP_Character=(MinLODSize=1,MaxLODSize=4096,LODBias=0,MinMagFilter=aniso,MipFilter=point)\nTEXTUREGROUP_CharacterNormalMap=(MinLODSize=1,MaxLODSize=4096,LODBias=0,MinMagFilter=aniso,MipFilter=point)\nTEXTUREGROUP_CharacterSpecular=(MinLODSize=1,MaxLODSize=4096,LODBias=0,MinMagFilter=aniso,MipFilter=point)\nTEXTUREGROUP_Weapon=(MinLODSize=1,MaxLODSize=4096,LODBias=0,MinMagFilter=aniso,MipFilter=point)\nTEXTUREGROUP_WeaponNormalMap=(MinLODSize=1,MaxLODSize=4096,LODBias=0,MinMagFilter=aniso,MipFilter=point)\nTEXTUREGROUP_WeaponSpecular=(MinLODSize=1,MaxLODSize=4096,LODBias=0,MinMagFilter=aniso,MipFilter=point)\nTEXTUREGROUP_Vehicle=(MinLODSize=1,MaxLODSize=4096,LODBias=0,MinMagFilter=aniso,MipFilter=point)\nTEXTUREGROUP_VehicleNormalMap=(MinLODSize=1,MaxLODSize=4096,LODBias=0,MinMagFilter=aniso,MipFilter=point)\nTEXTUREGROUP_VehicleSpecular=(MinLODSize=1,MaxLODSize=4096,LODBias=0,MinMagFilter=aniso,MipFilter=point)\nTEXTUREGROUP_Cinematic=(MinLODSize=1,MaxLODSize=4096,LODBias=0,MinMagFilter=aniso,MipFilter=point)\nTEXTUREGROUP_Effects=(MinLODSize=1,MaxLODSize=4096,LODBias=0,MinMagFilter=linear,MipFilter=point)\nTEXTUREGROUP_EffectsNotFiltered=(MinLODSize=1,MaxLODSize=4096,LODBias=0,MinMagFilter=aniso,MipFilter=point)\nTEXTUREGROUP_Skybox=(MinLODSize=1,MaxLODSize=4096,LODBias=0,MinMagFilter=aniso,MipFilter=point)\nTEXTUREGROUP_UI=(MinLODSize=1,MaxLODSize=4096,LODBias=0,MinMagFilter=aniso,MipFilter=point)\nTEXTUREGROUP_Lightmap=(MinLODSize=1,MaxLODSize=4096,LODBias=0,MinMagFilter=aniso,MipFilter=point)\nTEXTUREGROUP_Shadowmap=(MinLODSize=1,MaxLODSize=4096,LODBias=0,MinMagFilter=aniso,MipFilter=point,NumStreamedMips=3)\n\nTEXTUREGROUP_RenderTarget=(MinLODSize=1,MaxLODSize=4096,LODBias=0,MinMagFilter=aniso,MipFilter=point)\nTEXTUREGROUP_MobileFlattened=(MinLODSize=1,MaxLODSize=4096,LODBias=0,MinMagFilter=aniso,MipFilter=point)\nTEXTUREGROUP_Terrain_Heightmap=(MinLODSize=1,MaxLODSize=4096,LODBias=0,MinMagFilter=aniso,MipFilter=point)\nTEXTUREGROUP_Terrain_Weightmap=(MinLODSize=1,MaxLODSize=4096,LODBias=0,MinMagFilter=aniso,MipFilter=point)\nTEXTUREGROUP_Bokeh=(MinLODSize=1,MaxLODSize=256,LODBias=0,MinMagFilter=linear,MipFilter=linear)\n</code></pre> <p>Reference From https://docs.unrealengine.com/latest/INT/Engine/Content/Types/Textures/SupportAndSettings/index.html</p> <p></p> <p></p> <p></p>"},{"location":"ue4guide/performance-optimization/vr-performance-optimizations/","title":"Oculus Specific","text":"<p>https://developer.oculus.com/documentation/pcsdk/latest/concepts/dg-performance</p> <p>Oculus Connect 2: Integrating and Profiling VR in your Engine with the Oculus PC SDK </p>"},{"location":"ue4guide/performance-optimization/vr-performance-optimizations/#understanding-measuring-and-analyzing-vr-graphics-performance","title":"Understanding, Measuring, and Analyzing VR Graphics Performance","text":"<ul> <li>Turn off framerate smoothing</li> <li>Turnoff Generate Mesh Distance fields</li> <li>Turn off tiled deferred b/c you generally shouldn't have lots of overlapping dynamic lights</li> <li>HZB/Occlusion queries may hinder performance. Try them on/off</li> <li>Precomputed Visibility</li> <li>Make sure precomputed visibility is setup properly. To do this, you need to place PrecomputedVisibilityVolumes around anywhere that the player can walk, and build lighting. You need to make sure the same P level is used when building lighting and when running the game (aka do not build the sublevel by itself). You can verify that it is working by entering stat initviews on device or in previewer and make sure the Statically occluded primitives is &gt; 0. Use r.ShowPrecomputedVisibilityCells 1 to visualize the cells in the editor.</li> </ul> <p>Reference From: Engel, Wolfgang. GPU Zen: Advanced Rendering Techniques (Page 265)</p>"},{"location":"ue4guide/performance-optimization/gpu-perf-optimization/debugging-shaders-in-ue4/","title":"Debugging shaders in ue4","text":"<p>Debugging Shaders</p>"},{"location":"ue4guide/performance-optimization/gpu-perf-optimization/gpuview/","title":"GPUView","text":""},{"location":"ue4guide/performance-optimization/gpu-perf-optimization/gpuview/#useful-links","title":"Useful Links","text":"<p>http://nvidia.custhelp.com/app/answers/detail/a_id/3507/~/generating-an-event-trace-log-for-gpuview</p> <p>https://graphics.stanford.edu/~mdfisher/GPUView.html https://anteru.net/blog/2015/debugging-d3d12-fences-queues/ https://docs.microsoft.com/en-us/windows/desktop/direct2d/profiling-directx-applications https://msdn.microsoft.com/en-us/library/windows/desktop/jj585574(v=vs.85).aspx http://www.slideserve.com/libitha/using-gpuview-to-understand-your-directx-11-game-jon-story-developer-relations-engineer-amd https://developer.nvidia.com/content/are-you-running-out-video-memory-detecting-video-memory-overcommitment-using-gpuview https://knarkowicz.wordpress.com/2013/05/25/simple-gpuview-custom-event-markers/ https://software.intel.com/en-us/articles/removing-cpu-gpu-sync-stalls-in-galactic-civilizations-3</p> <p>https://graphics.stanford.edu/~mdfisher/Data/GPUView.ppt http://download.microsoft.com/download/F/A/7/FA70E919-8F82-4C4E-8D02-97DB3CF79AD5/GRA-T799_Blythe_Taiwan.pdf</p> <p>To get symbols: Enable symbol server (even though you don't have one) - it will pick up pdb-paths from the .exe (so don't move stuff too much around).</p> <p>Debugging GPUView on other languages http://www.yosoygames.com.ar/wp/2016/09/solving-gpuview-4000-was-unexpected-at-this-time-error/</p> <p>xperf in general https://randomascii.wordpress.com/2015/09/24/etw-central/ http://www.futuremark.com/pressreleases/a-closer-look-at-asynchronous-compute-in-3dmark-time-spy</p>"},{"location":"ue4guide/performance-optimization/gpu-perf-optimization/nvidia-nsight-breakdown/","title":"Overview","text":"<p>gr__busy_pct signal on the graph. High percentage =&gt; GPU bound</p> <p></p> <p></p> <p></p>"},{"location":"ue4guide/performance-optimization/gpu-perf-optimization/nvidia-nsight-breakdown/#range-profiler","title":"Range Profiler","text":"<ul> <li> <p>Finding most expensive drawcall: Capture frame and click action details in range info section. Sort table by draw call times</p> </li> <li> <p>Optimize range of draw calls: Pipeline section in Range details shows virtual GPU pipeline. Red bars indicate unused GPU units</p> </li> <li> <p>Draw calls common state: Range profiler's grouping capability to make new ranges based on common state</p> </li> </ul> IA Bottleneck &amp; SOL IA is the unit that handles vertex attribute assembly FB Bottleneck &amp; SOL The FB or frame buffer unit handles all requests for reading memory that missed any possible L1/L2 caches. Primitive Setup Bottleneck &amp; SOL Primitive setup happens right before rasterization and handles jobs like edge equation calculations Rasterization Bottleneck &amp; SOL Rasterization is when the primitives are split up into individual fragments to be shaded. ROP Bottleneck &amp; SOL ROP is the blending unit and handles both color blending and Z/stencil buffer handling. SHD Bottleneck &amp; SOL SHD (or SM) is the unified shader unit and handles processing of all shader types on various inputs. Stream Out Bottleneck &amp; SOL Stream out is the unit responsible for optionally writing data output from the geometry shader to memory Tessellator SOL Tessellator is the unit between the hull and domain shaders. This SOL does not include the shader. TEX Bottleneck &amp; SOL The TEX unit is responsible for reading samples from the L2 and frame buffer and calculating the texel value based on the current filtering mode.** ZCull Bottleneck &amp; SOL ZCull happens before the fragment shader is run and is able to discard fragments because they won\u2019t pass the z-test."},{"location":"ue4guide/performance-optimization/gpu-perf-optimization/render-budget/","title":"Render budget","text":"<p>Render Budget</p>"},{"location":"ue4guide/performance-optimization/notes-from-devs/deprecated-performance-profiling-guide-in-ue4/","title":"Deprecated performance profiling guide in ue4","text":"<p>Very useful article: http://www.gamasutra.com/blogs/LeszekGodlewski/20160721/272886/The_Vanishing_of_Milliseconds_Optimizing_the_UE4_renderer_for_Ethan_Carter_VR.php</p> <p>Useful Commands:</p> stat fps stat unit stat unitgraph stat raw stat scenerenderingOverall Scene Rendering Statsstat particlesshow particle statsstat shadowrenderingCPU Render Thread time ussuing shadow depth callsProfilegpuMeasures GPU execution timestat d3d11rhiD3D Driver rendering timesshowlog Vis freezerendering <p>Typing 'show' then enter shows you all the things you can turn on or off to see if perf goes up or down.</p> show staticmeshesTurn on or off static meshesshow particlesTurn on/off particlesshow translucency show postprocessing show skeletalmeshes DumpShaderStatsDump Shader Statsstat Slow [-ms=0.3] [-maxdepth=5]Command will dump all stats taking longer than specified ms &amp; lower than specific nested depth in their grouping. Really useful for quick perf tests if you don\u2019t have access to profiler. \"stat grouped\" disables it"},{"location":"ue4guide/performance-optimization/notes-from-devs/deprecated-scaling-down/","title":"Deprecated scaling down","text":"<p>Make sure to performance profile under right conditions</p> <ul> <li> <p>Never in Debug.</p> </li> <li> <p>Development is convenient</p> </li> <li> <p>Test gives near Shipping fps</p> </li> <li> <p>Make sure lighting is built (if it's not, uses a slower path)</p> </li> </ul> <p>Useful commands:</p> <ul> <li> <p>Stat unit / unitgraph / detailed</p> </li> <li> <p>Game is CPU on game thread (but includes vsync wait)</p> </li> <li> <p>Draw is CPU on render thread</p> </li> <li> <p>GPU is GPU time</p> </li> <li> <p>Make sure Max tick rate settings are disabled (t.MaxFPS, SmoothFrameRate=false, r.DontLimitOnBattery)</p> </li> <li> <p>Stat raw to disable smoothing</p> </li> <li> <p>StartFPSChart / EndFPSChart: Creates CSV with stats</p> </li> <li> <p>CPU Profiling</p> </li> <li> <p>Stat DumpFrame -ms=.1</p> </li> <li> <p>Outputs log of function calls with timings on game thread</p> </li> <li> <p>quick_scope_cycle_counter(MyOwnProfilerName)</p> </li> <li> <p>Stat StartFile/StopFile : takes DumpFrame output and puts it into a file. Can do it remotely + browse it with Unreal Front End</p> </li> <li> <p>GPU</p> </li> <li> <p>ProfileGPU or Ctrl+Shift+,</p> </li> </ul>"},{"location":"ue4guide/performance-optimization/notes-from-devs/deprecated-useful-console-commands/","title":"Deprecated useful console commands","text":"<p>VIEWMODE [Mode]</p> <p>\u200b Sets the rendering mode of the game viewport to the specified mode. The available modes are:</p> ModeDescriptionWIREFRAMEShows the wireframe of all meshes.UNLITRenders meshes using only the diffuse channel of materials.LITDefault. Renders meshes using their materials being affected by lighting.DETAILLIGHTINGRenders meshes using a neutral-colored material with normals being affected by lighting.LIGHTINGONLYRenders meshes using a neutral-colored material without normals being affected by lighting.LIGHTCOMPLEXITYRenders meshes using a solid color based on the number of dynamic lights affecting the mesh. Black means no dynamic lights affect the mesh. As more lights affect the mesh, the color goes from green to red.SHADERCOMPLEXITYRenders meshes using solid colors based on the number of shader instructions executed by the material applied to the surface. The colors range from green (0) to red (300) to pink (600) to white (900). <p>From https://docs.unrealengine.com/latest/INT/GettingStarted/RunningUnrealEngine/index.html</p> Console CommandDescription'stat unit'Shows overall frame time as well as the game thread, rendering thread and GPU times. Whichever is the longest is the bottleneck. However GPU time contains idle time, so is only the bottleneck if it is the longest and stands alone.Ctrl+Shift+. or 'recompileshaders changed'Recompile shaders that have changed since you last saved the .usf file. This will automatically happen on load.Ctrl+Shift+; or 'profilegpu'Measure GPU timings for the view being rendered. You can view the results in the UI that pops up or in the engine log.'Vis' or 'VisualizeTexture'Visualize the contents of various render targets with the ability to save as bmp.'show x'Toggles specified show flag. Use 'show' to get the list of showflags and their current state. In the editor, use the viewport UI instead.'pause'Pauses the game, but continues rendering. Any simulation rendering work will stop.'slomo x'changes the game speed. Can be very useful for slowing down time without skipping simulation work, when profiling. For example 'slomo .01''debugcreateplayer 1'For testing splitscreen.'r.CompositionGraphDebug'Execute to get a single frame dump of the composition graph of one frame (post processing and lighting).'r.DumpShaderDebugInfo'When set to 1, will cause any shaders that are then compiled to dump debug info to GameName/Saved/ShaderDebugInfo'r.RenderTargetPoolTest'Clears the texture returned by the rendertarget pool with a special color to track down color leaking bugs.'r.SetRes'Set the display resolution for the current game view. Has no effect in the editor.'r.ViewportTest'Allows to test different viewport rectangle configuations (in game only) as they can happen when using Matinee/Editor.ToggleDrawEventsEmits helpful draw event markers for use with GPU Capture/PIX <p>Useful command lines when working on rendering:</p> CommandlineDescription-d3ddebugEnables the D3D11 debug layer, useful for catching API errors.-sm4Forces Feature Level SM4 with the D3D11 RHI.-opengl3 / -opengl4Forces use of OpenGL RHI at the specified feature level.-ddc=nosharedPrevents the use of network (shared) Derived Data Cache. Can be useful when debugging shader caching issues.-VSPerf- Enables external VS Perf Profiler hooks-VTune- Enables external VTune Profiler hooks <p>From https://docs.unrealengine.com/latest/INT/Programming/Rendering/index.html</p> <p>* *</p>"},{"location":"ue4guide/performance-optimization/notes-from-devs/nick-whitingdonaldson-notes/","title":"Nick whitingdonaldson notes","text":"<p>stat unit</p> <p>stat fps</p> <p>hit pause to see if the gamethread is causing problems (hit pause key</p> <p>0.6.0 has Oculus</p> <p>IF RT was over 3 or 4 =&gt; causes problems</p> <p>stat scenerendering (gives good overview)</p> <p>NickP -&gt; Send code changes to read stats</p> <p>TiledDeferredRendering is 2 ms overhead</p> <p>r.TiledDeferredRendering to 0</p> <p>Hierarchy of ini's</p> <p>Scalability settings get applied last</p> <p>When fullscreening, scalability settings get reapplied</p> <p>How do you launch in fullscreen/stereo? NickP will follow-up</p> <p>stat unitgraph</p> <p>email NickD how to make stat raw and stat scenerendering vs stat d3drhicmds send them the UE4 project</p> <p>stat DumpHitches</p> <p>staticmaskednolightmapped staticopaquelightmaped staticopaquenolightmapped</p> <p>r.AllowOcclusionQueries EarlyZPass, auto heuristic is bad</p> <p>can control whether masked gets drawn into early Z pass</p> <p>Shader complexity view r.earlyzpass ? r.earlyzpassmovable can't be changed at runtime (look at the description)</p> <p>How do you do test builds? ask NickWhiting</p> <p>Show flags (show flags really meant for debug)</p> <p>Use layers Show [layer name] hit pause</p> <p>Show enter ambientcubemap is expensive</p>"},{"location":"ue4guide/performance-optimization/notes-from-devs/paragon-optimization-notes/","title":"Paragon optimization notes","text":"<p>Building Paragon in UE4  GDC 2016 Event Coverage Unreal Engine</p> <p>Fast player effect targetting:</p> <ul> <li> <p>Draw Actor Bounding box with material for player effect masked with Custom Stencil Buffer</p> </li> <li> <p>Easy to have lots of variation not in one being uber shader</p> </li> <li> <p></p> </li> </ul> <p>Reduce number of components on characters</p> <ul> <li> <p>Transform update is expensive</p> </li> <li> <p>Particles: Added auto attach/detach for particle systems when activating/deactivating so transform updates don't happen on particle system components all the time</p> </li> <li> <p>Spawns effects on-demand from game code on client only, no server management</p> </li> </ul> <p>Reduce tick rate of certain objects or manually use timer manager (e.g. if object ticks once every 10 seconds, no need for the tick check to happen every frame)</p> <ul> <li>Tick some objects manually to reduce task graph overhead and can improve cache coherence</li> </ul>"},{"location":"ue4guide/performance-optimization/notes-from-devs/robo-recall-optimization-talk-notes/","title":"Robo recall optimization talk notes","text":"<p>https://forums.unrealengine.com/development-discussion/vr-ar-development/1371458-make-maintain-framerate-technical-postmortem-for-robo-recall-and-beyond-by-nick-whiting</p> <p></p>"},{"location":"ue4guide/performance-optimization/notes-from-devs/robo-recall-optimization-talk-notes/#ticking-is-not-multithreaded","title":"Ticking is not multithreaded","text":"<ul> <li> <p>The Game Thread handles updates for gameplay, animation, physics, networking, etc., and most importantly, Actor ticking.</p> </li> <li> <p>TickGroups control Tick order but do not give parallelism</p> </li> <li> <p>Physics use tasks within the game thread to perform their work</p> </li> <li> <p>AnimGraphs can do parallel evaluation</p> </li> <li> <p>Trick: Can hide some of your tick work by moving Actors to TG_DuringPhysics, shortening your overall Game thread time</p> </li> <li> <p>Rule Of Thumb: Move things that don\u2019t affect velocity or position of Actors, or generate overlap events into TG_DuringPhysics.</p> </li> </ul> <p>A few of the heavier classes that we moved to TG_DuringPhysics in Robo Recall are:</p> <p>OdinAIManager</p> <p>OdinSpeechManager</p> <p>OdinWaveSpawner</p> <p>OdinPhysicalAudioComponent</p> <p>OdinGameMode</p> <p>OdinScoreManager</p> <p>OdinPopulationManager</p> <p></p>"},{"location":"ue4guide/performance-optimization/notes-from-devs/robo-recall-optimization-talk-notes/#render-thread","title":"Render Thread:","text":"<ul> <li> <p>Handles command list generation</p> </li> <li> <p>At top of thread, calculate final hmd pose</p> </li> <li> <p>Then traverse scene and do parallel command generation</p> </li> </ul>"},{"location":"ue4guide/performance-optimization/notes-from-devs/robo-recall-optimization-talk-notes/#audio-thread","title":"Audio Thread:","text":"<ul> <li> <p>The main audio thread is analogous to the Render Thread, and interfaces the game thread with the lower level mixing threads.</p> </li> <li> <p>The decoding and source worker tasks decode the audio information, and also do processing like spatialization and HRTF.</p> </li> <li> <p>The audio hardware thread is a platform dependent thread (e.g. XAudio2 on Windows), which consumes the mix.</p> </li> </ul>"},{"location":"ue4guide/performance-optimization/notes-from-devs/robo-recall-optimization-talk-notes/#debug-hmd-performance","title":"Debug HMD Performance:","text":"<p>-emulatestereo</p> <p>r.setres 2160x1200</p> <p>r.screenpercentage 140</p> <p>'pause' - pauses game thread and then use 'show' command to profile rendering</p> <p>Use stat physics &amp; stat anim</p> <p>Forward Renderer</p> <p></p> <p>Can do 70%-90% scale down with MSAA 2x/4x</p> <p>MSAA + subpixel geometry = bad juju</p> <p>Specular aliasing is an issue</p> <p>Give BP compiler hints on inlining functions. Look at KismetMathLibrary.h for details:</p> C++<pre><code>// Conditionally inlined\n\n#if KISMET_MATH_INLINE_ENABLED\n\n#include \"KismetMathLibrary.inl\"\n\n#endif\n</code></pre> <p>Game Thread Optimization:</p> <ul> <li> <p>Reduce # ticking actors</p> </li> <li> <p>Reduce # colliders</p> </li> <li> <p>Hide work in TG_DuringPhysics</p> </li> <li> <p>Check number of components in scene</p> </li> </ul>"},{"location":"ue4guide/performance-optimization/notes-from-devs/unreal-dev-day-montreal-performance-profiling/","title":"Unreal dev day montreal performance profiling","text":"<p>UE4 Performance and Profiling | Unreal Dev Day Montreal 2017 | Unreal Engine</p> <p></p> <p>Dev build -&gt; Noise in draw thread; Test is cleanest</p> <p>Profiling from editor:</p> <p>-&gt;Play in Standalone</p> <p>-&gt;Make sure Editor not updating in real time &amp; not updating in background</p> <p>-&gt;Make sure frame rate smoothing is off &amp; vsync is off</p> <p>-&gt;Minimize editor</p> <p>-&gt;Don't profile from PIE</p> <p>net.DumpRelevantActors</p> <p>to run on server: cheat net.* command</p> <p>stat net (4.19)</p>"},{"location":"ue4guide/performance-optimization/notes-from-devs/vanishing-of-ethan-carter/","title":"Vanishing of ethan carter","text":"<p>https://medium.com/@TheIneQuation/the-vanishing-of-milliseconds-dfe7572d9856</p>"},{"location":"ue4guide/performance-optimization/stats-perf-counters/accessing-single-stat-values/","title":"Accessing single stat values","text":"<p>Look at</p> <ul> <li> <p>DumpFrame(int64 Frame)</p> </li> <li> <p>DumpHistoryFrame(Stats, Latest, DumpCull, MaxDepth, *NameFilter);</p> </li> <li> <p>DumpCPUSummary()</p> </li> <li> <p>GetPermanentStats()</p> </li> </ul> <p>Detailed UDN Answer:</p> <ul> <li>https://udn.unrealengine.com/questions/302333/accessing-stat-values-in-c.html</li> </ul> <p>Well, you will have to do a bit of threading work. This is a good thing if you plan on doing \"a bit of analysis\" because this tends to be a firehose of data.</p> <p>GetPermanentStats() is an example of a synchronous call. It sends something to the stats thread and then waits to get the results back. That is one way to do it, but it will be slow if you need to do it every frame.</p> <p>You can use the same approach and just not block for the results; this is what DirectStatsCommand usually does.</p> <p>For example, one simple command is \"stat dumpcu\". That ends up calling this on the stats thread:</p> C++<pre><code>StatsMasterEnableAdd(); // make sure we are collecting data\n\nDumpCPUDelegateHandle = Stats.NewFrameDelegate.AddStatic(&amp;DumpCPU);\n</code></pre> <p>And that registers a call back on the stats thread so whenever a frame happens, you are informed. This is a fairly simple command, which does this on every frame....which turns out to be only one frame:</p> C++<pre><code> static void DumpCPU(int64 Frame)\n\n {\n\n FStatsThreadState&amp; Stats = FStatsThreadState::GetLocalState();\n\n int64 Latest = Stats.GetLatestValidFrame();\n\n check(Latest &gt; 0);\n\n DumpCPUSummary(Stats, Latest);\n\n Stats.NewFrameDelegate.Remove(DumpCPUDelegateHandle); // don't listen any more\n\n StatsMasterEnableSubtract(); // don't keep recording stats (unless someone else is looking)\n\n }\n</code></pre> <p>Actually parsing the stats is fairly complicated, but there are lots of examples in this file. You might have to ask questions about what specifically you would like to do.</p> <p>If you need to get your data back to the game thread (as opposed to just logging some stuff), then send a task back to the game thread like the \"HUD stats\" do:</p> C++<pre><code>FSimpleDelegateGraphTask::CreateAndDispatchWhenReady\n\n (\n\n FSimpleDelegateGraphTask::FDelegate::CreateRaw(&amp;FHUDGroupGameThreadRenderer::Get(), &amp;FHUDGroupGameThreadRenderer::NewData, ToGame),\n\n GET_STATID(STAT_FSimpleDelegateGraphTask_StatsHierToGame), nullptr, ENamedThreads::GameThread\n\n );\n</code></pre> <p>Depending on what you want to do, it might be easier to just hack the hud stats to display what you want instead setting up a different display from scratch.</p> <p>Let me know if you need more help on this. It is tedious and hard to understand, but you should be able to do anything you like.</p> <p>-Gil</p> <p>Reference From https://udn.unrealengine.com/questions/302333/accessing-stat-values-in-c.html</p> <p>The description is part of the stat declaration:</p> <ol> <li> <p>DECLARE_CYCLE_STAT(TEXT(\"Step: steering\"), STAT_AI_Crowd_StepSteeringTime, STATGROUP_AICrowd);</p> </li> <li> <p>TEXT(\"Step: steering\") is the description and all stat types have them. This is Item.NameAndInfo.GetDescription().</p> </li> </ol> <p>Another potential way to find what you are looking for is to put that stuff in a special (hardcoded) group....that is STATGROUP_AICrowd. Item.NameAndInfo.GetGroupName().</p> <p>And you can also look at the short name of the stat: STAT_AI_Crowd_StepSteeringTime. Item.NameAndInfo.GetShortName().</p> <p>The \"RawName\" is an FName that encodes all of these things, which is why you don't see it in the AddMessage stuff. FStatId is just the raw name with some other junk encoded in there. This complexity is related to making stat messages small and fast.</p> <p>In all cases, realize that you may be filtering quite a lot of data and string operations could be slow.</p> <p>DECLARE*FNAME_STAT is something it looks like we use in only one place. That is a stat type that has a FName as the _payload* (in all other cases it is a number). If you just need a string and no other payload, this might be a winner.</p> <p>Reference From https://udn.unrealengine.com/questions/302333/accessing-stat-values-in-c.html</p>"},{"location":"ue4guide/performance-optimization/stats-perf-counters/misc-functions/","title":"Misc functions","text":"C++<pre><code>**FStatsUtils::DebugPrint(FStatMessage const&amp; Item)**\n\n**Compute Stat Scope Cycle duration**\n\n**static FStatMessage ComputeCall(FStatMessage const&amp; ScopeStart, FStatMessage const&amp; ScopeEnd)**\n\n{\n\ncheckStats(ScopeStart.NameAndInfo.GetField&lt;EStatOperation&gt;() == EStatOperation::CycleScopeStart);\n\ncheckStats(ScopeEnd.NameAndInfo.GetField&lt;EStatOperation&gt;() == EStatOperation::CycleScopeEnd);\n\nFStatMessage Result(ScopeStart);\n\nResult.NameAndInfo.SetField&lt;EStatOperation&gt;(EStatOperation::Set);\n\nResult.NameAndInfo.SetFlag(EStatMetaFlags::IsPackedCCAndDuration, true);\n\ncheckStats(ScopeEnd.NameAndInfo.GetFlag(EStatMetaFlags::IsCycle));\n\n// cycles can wrap and are actually uint32's so we do something special here\n\nint64 Delta = int32(uint32(ScopeEnd.GetValue_int64()) - uint32(ScopeStart.GetValue_int64()));\n\ncheckStats(Delta &gt;= 0);\n\nResult.GetValue_int64() = ToPackedCallCountDuration(1, uint32(Delta));\n\nreturn Result;\n\n}\n</code></pre>"},{"location":"ue4guide/performance-optimization/stats-perf-counters/misc-functions/#examples-of-parsing-stats","title":"Examples of parsing stats:","text":"C++<pre><code>**FStatsThreadState::GetRawStackStats(int64 TargetFrame, FRawStatStackNode&amp; Root, TArray&lt;FStatMessage&gt;* OutNonStackStats)**\n\n**FRawProfilerSession::ProcessStatPacketArray**( const FStatPacketArray&amp; StatPacketArray, FProfilerFrame&amp; out_ProfilerFrame, int32 FrameIndex )\n\n**static void DumpCPU(int64 Frame)**\n\n{\n\n FStatsThreadState&amp; Stats = FStatsThreadState::GetLocalState();\n\n int64 Latest = Stats.GetLatestValidFrame();\n\n check(Latest &gt; 0);\n\n DumpCPUSummary(Stats, Latest);\n\n Stats.NewFrameDelegate.Remove(DumpCPUDelegateHandle);\n\n StatsMasterEnableSubtract();\n\n}\n</code></pre>"},{"location":"ue4guide/performance-optimization/stats-perf-counters/stats-system/","title":"Overview","text":"<p>Enable Stats from Command Line:</p> <ul> <li>StatCmds=\"startfile\"</li> </ul> <p>Reference From https://udn.unrealengine.com/questions/445587/long-initial-load-times.html</p> <p>Description of stats: https://docs.unrealengine.com/udk/Three/StatsDescriptions.html</p>"},{"location":"ue4guide/performance-optimization/stats-perf-counters/stats-system/#stats-system-diagram","title":"Stats System Diagram","text":"<ul> <li>FEventPayload</li> </ul>"},{"location":"ue4guide/performance-optimization/stats-perf-counters/stats-system/#common-functions--stats","title":"Common Functions &amp; Stats","text":"<p>Common options: [-ms=5.0][-root=None] [leaf=None][-depth=maxint] [-nodisplay] stat groupname[+] - toggles displaying stats group, + enables hierarchical display stat group list|listall|enable name|disable name|none|all|default - manages enabling/disabling recording of the stats groups. Doing stat [groupname] automatically enables that group</p> <ul> <li>Also supports [-group=groupname][-sortby=name] [-maxhistoryframes=60][-reset] [-maxdepth=4][-root=None] [-ms=0.2][-reset]</li> </ul> <p>stat namedmarker #markername# - adds a custom marker to the stats stream stat none - disables drawing all stats groups stat display -font=small[tiny]   - Changes stats rendering display options</p> <p>stat slow [-ms=1.0][-depth=4] - toggles displaying the game and render thread stats stat dumpframe - dumps a frame of stats</p> <ul> <li>stat dumpframe -ms=.001 -root=initviews</li> <li>stat dumpframe -ms=.001 -root=shadow   stat dumpave|dumpmax|dumpsum  [-start | -stop | -num=30]  - aggregate stats over multiple frames   stat dumphitches [-start | -stop | empty toggles] - toggles dumping hitches   stat dumpevents [-ms=0.2][-all] - dumps events history for slow events, -all adds other threads besides game and render   stat dumpcpu - dumps cpu stats   stat dumpnonframe [groupname] - dumps non-frame stats, usually memory stats</li> </ul> <p>stat hier -group=groupname [-sortby=name][-maxhistoryframes=60] [-reset][-maxdepth=4] [-root=None][-ms=0.2] [-reset]</p> <ul> <li>groupname is a stat group like initviews or statsystem</li> <li>sortby can be name (by stat FName), callcount (by number of calls, only for scoped cycle counters), num(by total inclusive time)</li> <li>maxhistoryframes (default 60, number of frames used to generate the stats displayed on the hud)</li> <li>reset (reset the accumulated history)</li> <li>maxdepth (default 4, maximum depth for the hierarchy)</li> </ul> <p>stat startfile - starts dumping a capture stat stopfile - stops dumping a capture (regular, raw, memory) stat startfileraw - starts dumping a raw capture stat toggledebug - toggles tracking the most memory expensive stats</p> <p>add -memoryprofiler in the command line to enable the memory profiling stat stopfile - stops tracking all memory operations and writes the results to the file stat testfile - loads the last saved capture and dumps first, middle and last frame</p>"},{"location":"ue4guide/performance-optimization/stats-perf-counters/stats-system/#details-from-statsh-implementing-custom-stats-or-cycle-counters","title":"Details from Stats.h: Implementing custom stats or cycle counters","text":"C++<pre><code>/**\n *  Unreal Engine Stats system\n *\n *  This is a preliminary version of the documentation, any comments are welcome :)\n *\n *  This system allows you to collect various performance data and then the data can be used to optimize your game.\n *  There are a few methods how to achieve this. This quick tutorial will describe all of them.\n *  For stats commands check out method PrintStatsHelpToOutputDevice();\n *\n *  Stats system in the UE4 supports following stats types:\n *      Cycle Counter - a generic cycle counter used to counting the number of cycles during the lifetime of the object\n *      Float/Dword Counter - a counter that is cleared every frame\n *      Float/Dword Accumulator - a counter that is not cleared every frame, persistent stat, but it can be reset\n *      Memory - a special type of counter that is optimized for memory tracking\n *\n *  Each stat needs to be grouped, this usually corresponds with displaying the specified stat group i.e. 'stat statsystem' which displays stats' related data.\n *\n *  To define a stat group you need to use one of the following methods:\n *              DECLARE_STATS_GROUP(GroupDesc,GroupId,GroupCat) - declares a stats group which is enabled by default\n *              DECLARE_STATS_GROUP_VERBOSE(GroupDesc,GroupId,GroupCat) - declares a stats group which is disabled by default\n *              DECLARE_STATS_GROUP_MAYBE_COMPILED_OUT(GroupDesc,GroupId,GroupCat) - declares a stats group which is disabled by default and may be stripped by the compiler\n *\n *  where\n *      GroupDesc is a text description of the group\n *      GroupId is an UNIQUE id of the group\n *      GroupCat is reserved for future use\n *      CompileIn if set to true, the compiler may strip it out\n *\n *  It can be done in the source or header file depending the usage scope.\n *\n *  Examples:\n *              DECLARE_STATS_GROUP(TEXT(\"Threading\"), STATGROUP_Threading, STATCAT_Advanced);\n *              DECLARE_STATS_GROUP_VERBOSE(TEXT(\"Linker Load\"), STATGROUP_LinkerLoad, STATCAT_Advanced);\n *\n *  Now, you can declare/define a stat.\n *  A stat can be used only in one cpp file, in the function scope, in the module scope or can be used in the whole project.\n *\n *  For one file scope you need to use one of the following methods depending on the stat type.\n *              DECLARE_CYCLE_STAT(CounterName,StatId,GroupId) - declares a cycle counter stat\n *\n *              DECLARE_SCOPE_CYCLE_COUNTER(CounterName,StatId,GroupId) - declares a cycle counter stat and uses it at the same time, it is limited to one function scope\n *              QUICK_SCOPE_CYCLE_COUNTER(StatId) - declares a cycle counter stat that will belong to stat group called 'Quick'\n *              RETURN_QUICK_DECLARE_CYCLE_STAT(StatId,GroupId) - returns a cycle counter, used by a few specialized classes, more information later\n *\n *              DECLARE_FLOAT_COUNTER_STAT(CounterName,StatId,GroupId) - declares a float counter, technically speaking it's based on the double type, 8 bytes\n *              DECLARE_DWORD_COUNTER_STAT(CounterName,StatId,GroupId) - declared a dword counter, technically speaking it's based on the qword type, 8 bytes\n *              DECLARE_FLOAT_ACCUMULATOR_STAT(CounterName,StatId,GroupId) - declares a float accumulator\n *              DECLARE_DWORD_ACCUMULATOR_STAT(CounterName,StatId,GroupId) - declares a dword accumulator\n *              DECLARE_MEMORY_STAT(CounterName,StatId,GroupId) - declares a memory counter, same as the dword accumulator, but will be displayed with memory specific units\n *              DECLARE_MEMORY_STAT_POOL(CounterName,StatId,GroupId,Pool) - declares a memory counter with a pool\n *\n *      If you want to have these stats accessible in the whole project/or wider range of files you need to use extern version.\n *      These methods are the same as the previously mentioned but with _EXTERN and the end of the name, here is the list:\n *              DECLARE_CYCLE_STAT_EXTERN(CounterName,StatId,GroupId, API)\n *              DECLARE_FLOAT_COUNTER_STAT_EXTERN(CounterName,StatId,GroupId, API)\n *              DECLARE_DWORD_COUNTER_STAT_EXTERN(CounterName,StatId,GroupId, API)\n *              DECLARE_FLOAT_ACCUMULATOR_STAT_EXTERN(CounterName,StatId,GroupId, API)\n *              DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(CounterName,StatId,GroupId, API)\n *              DECLARE_MEMORY_STAT_EXTERN(CounterName,StatId,GroupId, API)\n *              DECLARE_MEMORY_STAT_POOL_EXTERN(CounterName,StatId,GroupId,Pool, API)\n *\n *      Then in the source file you need to define those stats.\n *              DEFINE_STAT(CounterName) - defines stats declared with _EXTERN\n *\n *  where\n *      CounterName is a text description of the stat\n *      StatId is an UNIQUE id of the stat\n *      GroupId is an id of the group that the stat will belong to, the GroupId from DECLARE_STATS_GROUP*\n *      Pool is a platform specific memory pool, more details later\n *      API is the *_API of module, can be empty if the stat will be used only in that module\n *\n *  Examples:\n *      Custom memory stats with pools\n *          First you need to add a new pool to enum EMemoryCounterRegion, it can be global or platform specific.\n *\n *              enum EMemoryCounterRegion\n *              {\n *                  MCR_Invalid,    // not memory\n *                  MCR_Physical,   // main system memory\n *                  MCR_GPU,        // memory directly a GPU (graphics card, etc)\n *                  MCR_GPUSystem,  // system memory directly accessible by a GPU\n *                  MCR_TexturePool,// presized texture pools\n *                  MCR_MAX\n *              };\n *\n *          This is an example that will allow using the pools every where, see CORE_API.\n *          THE NAME OF THE POOL MUST START WITH MCR_\n *          Header file.\n *              DECLARE_MEMORY_STAT_POOL_EXTERN(TEXT(\"Physical Memory Pool [Physical]\"),    MCR_Physical,       STATGROUP_Memory,  FPlatformMemory::MCR_Physical,   CORE_API);\n *              DECLARE_MEMORY_STAT_POOL_EXTERN(TEXT(\"GPU Memory Pool [GPU]\"),              MCR_GPU,            STATGROUP_Memory,  FPlatformMemory::MCR_GPU,        CORE_API);\n *              DECLARE_MEMORY_STAT_POOL_EXTERN(TEXT(\"Texture Memory Pool [Texture]\"),      MCR_TexturePool,    STATGROUP_Memory,  FPlatformMemory::MCR_TexturePool,CORE_API);\n *\n *          Source file.\n *              DEFINE_STAT(MCR_Physical);\n *              DEFINE_STAT(MCR_GPU);\n *              DEFINE_STAT(MCR_TexturePool);\n *\n *          This is a pool, so it needs to be initialized. Usually in the F*PlatformMemory::Init()\n *              SET_MEMORY_STAT(MCR_Physical, PhysicalPoolLimit);\n *              SET_MEMORY_STAT(MCR_GPU, GPUPoolLimit);\n *              SET_MEMORY_STAT(MCR_TexturePool, TexturePoolLimit);\n *\n *          Now we have pools, so we can setup memory stats for those pools.\n *          Accessible everywhere.\n *              DECLARE_MEMORY_STAT_POOL_EXTERN(TEXT(\"Index buffer memory\"),        STAT_IndexBufferMemory,     STATGROUP_RHI, FPlatformMemory::MCR_GPU, RHI_API);\n *              DECLARE_MEMORY_STAT_POOL_EXTERN(TEXT(\"Vertex buffer memory\"),       STAT_VertexBufferMemory,    STATGROUP_RHI, FPlatformMemory::MCR_GPU, RHI_API);\n *              DECLARE_MEMORY_STAT_POOL_EXTERN(TEXT(\"Structured buffer memory\"),   STAT_StructuredBufferMemory,STATGROUP_RHI, FPlatformMemory::MCR_GPU, RHI_API);\n *              DECLARE_MEMORY_STAT_POOL_EXTERN(TEXT(\"Pixel buffer memory\"),        STAT_PixelBufferMemory,     STATGROUP_RHI, FPlatformMemory::MCR_GPU, RHI_API);\n *\n *          Accessible only in the module where defined.\n *              DECLARE_MEMORY_STAT_POOL_EXTERN(TEXT(\"Pool Memory Size\"), STAT_TexturePoolSize,             STATGROUP_Streaming, FPlatformMemory::MCR_TexturePool, );\n *              DECLARE_MEMORY_STAT_POOL_EXTERN(TEXT(\"Pool Memory Used\"), STAT_TexturePoolAllocatedSize,    STATGROUP_Streaming, FPlatformMemory::MCR_TexturePool, );\n *\n *          And the last thing, updating the memory stats.\n *              INC_MEMORY_STAT_BY(STAT_PixelBufferMemory,NumBytes) - increases a memory stat by the specified value\n *              DEC_MEMORY_STAT_BY(STAT_PixelBufferMemory,NumBytes) - decreases a memory stat by the specified value\n *              SET_MEMORY_STAT(STAT_PixelBufferMemory,NumBytes) - sets a memory stat to the specified value\n *\n *      Regular memory stats, without pools\n *              DECLARE_MEMORY_STAT(TEXT(\"Total Physical\"),     STAT_TotalPhysical,     STATGROUP_MemoryPlatform);\n *              DECLARE_MEMORY_STAT(TEXT(\"Total Virtual\"),      STAT_TotalVirtual,      STATGROUP_MemoryPlatform);\n *              DECLARE_MEMORY_STAT(TEXT(\"Page Size\"),          STAT_PageSize,          STATGROUP_MemoryPlatform);\n *              DECLARE_MEMORY_STAT(TEXT(\"Total Physical GB\"),  STAT_TotalPhysicalGB,   STATGROUP_MemoryPlatform);\n *\n *      Or DECLARE_MEMORY_STAT_EXTERN in the header file and then DEFINE_STAT in the source file.\n *      Updating the memory stats is done the same way as in the version with pools.\n *\n *\n *      Performance data using the cycle counters.\n *          First you need to add cycle counters.\n *              DECLARE_CYCLE_STAT(TEXT(\"Broadcast\"),   STAT_StatsBroadcast,STATGROUP_StatSystem);\n *              DECLARE_CYCLE_STAT(TEXT(\"Condense\"),    STAT_StatsCondense, STATGROUP_StatSystem);\n *\n *          Or DECLARE_CYCLE_STAT_EXTERN in the header file and then DEFINE_STAT in the source file.\n *\n *          Now you can grab the performance data.\n *\n *              Stats::Broadcast()\n *              {\n *                  SCOPE_CYCLE_COUNTER(STAT_StatsBroadcast);\n *                  ...\n *                  // a piece of code\n *                  ...\n *              }\n *\n *          and that's all.\n *          Sometimes you don't want to grab the stats every time the function is called, so you can use conditional cycle counter.\n *          It's not very common, but may be useful.\n *\n *              Stats::Broadcast(bool bSomeCondition)\n *              {\n *                  CONDITIONAL_SCOPE_CYCLE_COUNTER(STAT_StatsBroadcast,bSomeCondition);\n *                  ...\n *                  // a piece of code\n *                  ...\n *              }\n *\n *          If you want to grab the performance data from one function you can use following construction.\n *\n *              Stats::Broadcast(bool bSomeCondition)\n *              {\n *                  DECLARE_SCOPE_CYCLE_COUNTER(TEXT(\"Broadcast\"), STAT_StatsBroadcast, STATGROUP_StatSystem);\n *                  ...\n *                  // a piece of code\n *                  ...\n *              }\n *\n *          or\n *\n *              Stats::Broadcast(bool bSomeCondition)\n *              {\n *                  QUICK_SCOPE_CYCLE_COUNTER(TEXT(\"Stats::Broadcast\"));\n *                  ...\n *                  // a piece of code\n *                  ...\n *              }\n *\n *          Mostly used for temporary stats.\n *\n *          Those all cycle counters are used to generate the hierarchy. So you can get more detailed information about performance data.\n *          There is also an option to set flat cycle counter.\n *\n *              Stats::Broadcast(bool bSomeCondition)\n *              {\n *                  const uint32 BroadcastBeginTime = FPlatformTime::Cycles();\n *                  ...\n *                  // a piece of code\n *                  ...\n *                  const uint32 BroadcastEndTime = FPlatformTime::Cycles();\n *                  SET_CYCLE_COUNTER(STAT_StatsBroadcast, BroadcastEndTime-BroadcastBeginTime);\n *              }\n *\n *\n *      A few tasks implemented in the UE4 use a different approach in terms of getting the performance data.\n *      They implement method GetStatId(). If there is no GetStatId(), the code will not compile.\n *      Here is an example.\n *\n *              class FParallelAnimationCompletionTask\n *              {\n *                  // ...\n *                  // a piece of code\n *                  FORCEINLINE TStatId GetStatId() const\n *                  {\n *                      RETURN_QUICK_DECLARE_CYCLE_STAT(FParallelAnimationCompletionTask, STATGROUP_TaskGraphTasks);\n *                  }\n *                  // a piece of code\n *                  // ...\n *              };\n *\n *\n *      Generic data using the float or dword counters.\n *          First you need to add a few counters.\n *              DECLARE_FLOAT_COUNTER_STAT_EXTERN(STAT_FloatCounter,StatId,STATGROUP_TestGroup, CORE_API)\n *              DECLARE_DWORD_COUNTER_STAT_EXTERN(STAT_DwordCounter,StatId,STATGROUP_TestGroup, CORE_API)\n *              DECLARE_FLOAT_ACCUMULATOR_STAT_EXTERN(STAT_FloatAccumulator,StatId,STATGROUP_TestGroup, CORE_API)\n *              DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(STAT_DwordAccumulator,StatId,STATGROUP_TestGroup, CORE_API)\n *\n *          Updating counters.\n *              INC_DWORD_STAT(StatId) - increases a dword stat by 1\n *              DEC_DWORD_STAT(StatId) - decreases a dword stat by 1\n *              INC_DWORD_STAT_BY(StatId,Amount) - increases a dword stat by the specified value\n *              DEC_DWORD_STAT_BY(StatId,Amount) - decreases a dword stat by the specified value\n *              SET_DWORD_STAT(StatId,Value) - sets a dword stat to the specified value\n\n *              INC_FLOAT_STAT_BY(StatId,Amount) - increases a float stat by the specified value\n *              DEC_FLOAT_STAT_BY(StatId,Amount) - decreases a float stat by the specified value\n *              SET_FLOAT_STAT(StatId,Value) - sets a float stat to the specified value\n *\n *\n *      A few helper methods\n *               GET_STATID(StatId) - returns an instance of the TStatId of the stat, ADVANCED\n *               GET_STATDESCRIPTION(StatId) - returns a description of the stat\n *\n *\n *      If you don't want to use the stats system and just log some performance data, there is functionality for this.\n *\n *              SCOPE_SECONDS_COUNTER(double&amp;Seconds) - captures time passed in seconds, adding delta time to passed in variable\n *\n *              Stats::Broadcast()\n *              {\n *                  double ThisTime = 0;\n *                  {\n *                       SCOPE_SECONDS_COUNTER(ThisTime);\n*                       ...\n *                      // a piece of code\n *                      ...\n *                  }\n *                  UE_LOG(LogTemp, Log, TEXT(\"Stats::Broadcast %.2f\"), ThisTime );\n *              }\n *\n *              FScopeLogTime - utility class to log time passed in seconds, adding cumulative stats to passed in variable, print the performance data to the log in the destructor\n *\n *              SCOPE_LOG_TIME(Name,CumulativePtr) - using the given name prints the performance data and gathers cumulative stats\n *              SCOPE_LOG_TIME_IN_SECONDS(Name,CumulativePtr) - the same as above, but prints in seconds\n *\n *              SCOPE_LOG_TIME_FUNC() - using the funcion name prints the performance data, cannot be nested\n *              SCOPE_LOG_TIME_FUNC_WITH_GLOBAL(CumulativePtr), same as above, but gather cumulative stats\n *\n *          A few examples.\n *\n *              double GMyBroadcastTime = 0.0;\n *              Stats::Broadcast()\n *              {\n *                  SCOPE_LOG_TIME(\"Stats::Broadcast\", &amp;GMyBroadcastTime );\n *                  SCOPE_LOG_TIME_IN_SECONDS(\"Stats::Broadcast (sec)\", &amp;GMyBroadcastTime );\n *                  ...\n *                  // a piece of code\n *                  ...\n *              }\n *\n *              Stats::Condense()\n *              {\n *                  SCOPE_LOG_TIME_FUNC(); // The name should be \"Stats::Condense()\", may differ across compilers\n *                  SCOPE_LOG_TIME_FUNC_WITH_GLOBAL(&amp;GMyBroadcastTime);\n *                  ...\n *                  // a piece of code\n *                  ...\n *              }\n</code></pre>"},{"location":"ue4guide/performance-optimization/tolva-tool/misc-wip/","title":"Misc wip","text":"<p>Development Debugging:</p> <p>Useful Console Commands</p> <p>Memory Leaking:</p> <p>gc.CollectGarbageEveryFrame 1</p> <p>Physics:</p> <ol> <li>Visualize by using</li> </ol> <p>TraceTag or TraceTagAll</p> <ol> <li>Go into Debug Mode:</li> </ol> <ul> <li>ToggleDebugCamera</li> </ul> <p>Misc:</p> <ul> <li>Turn on show all properties while playing &amp; unsafe properties Display All Blueprint Properties</li> <li>Toggle allow execution of script functions in editor</li> <li>EditActor: to bring up detail view of actor</li> </ul> <p>RecompileShaders global</p> <p>RecompileShaders material</p> <p>RecompileShaders all</p> <p>Collision Analyzer Tool</p> <p>Lightbaking</p> <ul> <li>DumpUnbuiltLightInteractions</li> </ul> <p>Showlog</p> <p>Log/Log List [string]/Log [cat][level]</p> <p>ShowDebugToggleSubCategory *</p> <p>ShowDebug *</p> <p>Actor Select Relevant Lights</p> <p>Useful UDK/UE3 Links on Performance/Tooling:</p> <ul> <li> <p>Go through UDK console commands and make a list of applicable ones:</p> </li> <li> <p>UDK Console Commands https://docs.unrealengine.com/udk/Three/GameplayDebugging.html https://docs.unrealengine.com/udk/Three/StatsDescriptions.html https://docs.unrealengine.com/udk/Three/RemoteControl.html https://docs.unrealengine.com/udk/Three/GameplayProgrammingHome.html https://docs.unrealengine.com/udk/Three/PerformanceHome.html https://docs.unrealengine.com/udk/Three/GameplayPerformanceOptimization.html https://docs.unrealengine.com/udk/Three/PerfStats.html https://docs.unrealengine.com/udk/Three/GameplayProfiler.html https://docs.unrealengine.com/udk/Three/RenderingHome.html https://docs.unrealengine.com/udk/Three/WebHome.html https://docs.unrealengine.com/udk/Three/PerformanceDebugging.html http://www.hourences.com/tutorials-ue3-performance-profiling-introduction</p> </li> </ul> <p>Go to bool StaticExec( UWorld* InWorld, const TCHAR* Cmd, FOutputDevice&amp; Ar ) in Obj.cpp and extract out useful commands and arguments (eg listprops, getall, singleref, refs, etc)</p> <ul> <li> <p>Dev Tools</p> </li> <li> <p>Pause World Ticking</p> </li> <li>Tick One Frame Forward at Fixed Timestep</li> <li>Also enable UCheatManager() built-in functions on Dev Tool</li> <li>Fixed Random Seed &amp; Set Fixed Timestep dev options</li> </ul> <p>Networking Tips &amp; Tricks</p>"},{"location":"ue4guide/performance-optimization/tolva-tool/tolva-deep-shader/","title":"Tolva deep shader","text":"<p>Coming soon...</p>"},{"location":"ue4guide/performance-optimization/tolva-tool/tolva-enabling-debug-tools-notes/","title":"Tolva enabling debug tools notes","text":""},{"location":"ue4guide/performance-optimization/tolva-tool/tolva-enabling-debug-tools-notes/#commands-to-set-on-launch","title":"Commands to set on launch:","text":"<ul> <li> <p>t.maxfps=1000</p> </li> <li> <p>r.ForceDebugViewModes=1</p> </li> </ul> <p>renderdoc capture command:</p> <ul> <li> <p>rRHISetGPUCaptureOptions on</p> </li> <li> <p>capture</p> </li> <li> <p>restore rRHISetGPUCaptureOptions</p> </li> </ul>"},{"location":"ue4guide/performance-optimization/tolva-tool/tolva-enabling-debug-tools-notes/#memory","title":"Memory:","text":"<p>\u2013LLM to enable low level memory tracker</p> <p>liststreamingtextures</p> <p>listtextures</p> <p>stat llm/llmfull</p> <p>Stat Memory</p> <p>Stat MemoryPlatform</p> <p>Stat MemoryStaticMesh</p> <p>memreport &amp; memreport -full</p> <p>DUMPALLOCS</p> <p>IGMEMTrace</p> <ul> <li> <p>Enable by BB_MEMTRACE_ENABLE=1 in Core.Build.cs (disabled by default)</p> </li> <li> <p>Start by:</p> </li> <li> <p>passing -memtraceip=127.0.0.1 at command line</p> </li> <li> <p>using bb.mem.ToggleTrace to enable/disable at runtime &amp; bb.mem.UserMark</p> </li> </ul> <p>FMallocLeakDetectionProxy</p> <ul> <li>MALLOC_LEAKDETECTION</li> </ul> <p>Enabling StompAllocator</p> <ul> <li>USE_MALLOC_STOMP</li> </ul> <p>FMallocPoisonProxy</p> <ul> <li>UE_USE_MALLOC_FILL_BYTES</li> </ul> <p>FMallocProfiler</p> <ul> <li>in BuildConfiguration.xml, set bUseMallocProfiler to true, and bOmitFramePointers to false</li> </ul> <p>CPU Profiler:</p> <ul> <li> <p>VTune</p> </li> <li> <p>VSPerf</p> </li> </ul> <p>use Stat Namedevents or -statnamedevents in commandline to export markers to VTune. Not implemented for VSPerf</p> <p>Microprofile:</p> <ul> <li> <p>Compile with BB_DEV_TOOLS_MICROPROFILE=1 in Build_BBR.h (enabled by default)</p> </li> <li> <p>Enable by -mpenable=1 in commandline</p> </li> </ul> <p>FramePro:</p> <ul> <li> <p>Compile with FRAMEPRO_ENABLED=1 (enable experimental features to auto turn on</p> </li> <li> <p>framepro.enable=1</p> </li> <li> <p>Framepro.startrec</p> </li> <li> <p>Framepro.endrec</p> </li> </ul> <p>SuperLuminal:</p> <ul> <li>Start game with -Superluminal command arg</li> </ul>"},{"location":"ue4guide/performance-optimization/tolva-tool/tolva-perf-analyzer-mode/","title":"Quick Profiling Guide","text":""},{"location":"ue4guide/performance-optimization/tolva-tool/tolva-perf-analyzer-mode/#game-thread","title":"Game Thread","text":""},{"location":"ue4guide/performance-optimization/tolva-tool/tolva-perf-analyzer-mode/#general","title":"General","text":"<ol> <li> <p>Display RenderBudget:    - <code>Budget BebylonPerf</code></p> </li> <li> <p>Freeze Game Thread    - <code>Pause</code></p> </li> <li> <p>Check Game Thread Perf    - <code>stat Game</code></p> </li> <li> <p>Pause Rendering    - <code>show Rendering</code></p> </li> </ol>"},{"location":"ue4guide/performance-optimization/tolva-tool/tolva-perf-analyzer-mode/#animation","title":"Animation","text":"<ol> <li>Skeletal Meshes</li> </ol> Bash<pre><code>show SkeletalMeshes\nr.EnableMorphTargets\nr.SkinCache.Mode\na.URO.Enable\na.URO.ForceAnimRate\na.URO.ForceInterpolation\n</code></pre>"},{"location":"ue4guide/performance-optimization/tolva-tool/tolva-perf-analyzer-mode/#physics","title":"Physics","text":"<ol> <li>Toggle All Collision</li> </ol> <p>Might need to implement these.</p> <ol> <li>Toggle Generate All Overlap Events</li> </ol> <p>Might need to implement this either in python or you might be able to the editor commands to set on all actors/objects: <code>set &lt;classname&gt; &lt;propertyName&gt; &lt;value&gt;</code></p> <ol> <li>Toggle Anim Dynamics</li> </ol> Bash<pre><code>p.AnimDynamics\np.AnimDynamicsWind\np.AnimDynamicsRestrictLOD\np.RagdollPhysics\n</code></pre> <ol> <li>Visualize by:</li> </ol> <p><code>TraceTag</code> or <code>TraceTagAll</code></p>"},{"location":"ue4guide/performance-optimization/tolva-tool/tolva-perf-analyzer-mode/#gpu-profiling","title":"GPU Profiling","text":"<p><code>pause</code> - pauses game thread and then use <code>show</code> command to profile rendering</p> <p><code>FreezeFrame 0.5</code> - Freezes/Pauses game after a delay. Custom function in UCheatManager</p> <ol> <li>Test if GPU Bottleneck:</li> </ol> <ul> <li><code>r.screenpercentage=20</code> =&gt; fast test to see if GPU is bottleneck</li> <li><code>show Rendering</code> (verify this this actually disables rendering)</li> </ul> <ol> <li>Test if Texture Bandwidth is problem:</li> </ol> <ul> <li>Replace all textures with 2x2 textures (need to implement)</li> </ul> <ol> <li> <p>Test if Texture MipMaps are appropriate    - <code>Visualize mipmap scale</code>    - <code>Visualize UV scale</code></p> </li> <li> <p>Test quad overdraw/small triangle size</p> </li> </ol> <ul> <li><code>show QuadOverdraw</code></li> </ul> <ol> <li> <p>Test Overdraw is problem    - <code>show Translucency</code>    - <code>show SeparateTranslucency</code></p> </li> <li> <p>Test Meshes bottleneck</p> </li> </ol> <ul> <li><code>show StaticMeshes</code></li> <li><code>show InstancedStaticMeshes</code></li> <li><code>show SkeletalMeshes</code></li> <li><code>r.ForceLOD</code></li> <li>Animation Compute Shaders:<ul> <li><code>r.SkinCache.Mode</code></li> <li><code>r.MorphTarget.Mode</code></li> </ul> </li> </ul> <ol> <li>Test if Lighting is bottleneck</li> </ol> <ul> <li> <p>Toggle All Lighting</p> <ul> <li><code>show Lighting</code> (verify this this actually disables rendering)</li> <li><code>ToggleLight</code> (verify this this actually disables rendering)</li> <li><code>show DeferredLighting</code> (verify this this actually disables rendering)</li> <li><code>show VisualizeLightCulling</code></li> </ul> </li> <li> <p>Toggle Static Lighting</p> <ul> <li><code>r.AllowStaticLighting</code></li> <li><code>show DirectLighting</code> (verify this this actually disables rendering)</li> </ul> </li> <li> <p>Toggle Dynamic Lighting</p> <ul> <li><code>show DirectionalLights</code></li> <li><code>show PointLights</code></li> <li><code>show SpotLights</code></li> <li><code>show SkyLighting</code></li> </ul> </li> <li> <p>Toggle Lighting Components</p> <ul> <li>Direct Lighting</li> <li><code>show DirectLighting</code></li> <li><code>r.SimpleDynamicLighting</code></li> <li>Ambient Occlusion</li> <li><code>show AmbientOcclusion</code></li> <li><code>show Diffuse</code></li> <li><code>show Specular</code></li> <li>Global Illumination</li> <li><code>show GlobalIllumination</code></li> <li><code>show SubsurfaceScattering</code></li> <li>Indirect Lighting Cache</li> <li><code>r.IndirectLightingCache</code></li> <li><code>show IndirectLightingCache</code> (verify)</li> <li>Reflection Environment</li> <li><code>show ReflectionEnvironment</code></li> </ul> </li> </ul> <ol> <li> <p>Test if Shader Complexity Bound:    - <code>ToggleForceDefaultMaterial</code>    - <code>show Materials</code></p> </li> <li> <p>Test FX System</p> </li> </ol> <ul> <li> <p>Toggle Particles      (find all commands to turn them off completely)</p> </li> <li> <p>Toggle Particle Simulation</p> <ul> <li><code>r.GPUParticle.Simulate</code></li> <li><code>r.GPUParticle.FixDeltaSeconds</code></li> <li><code>FX.FreezeGPUSimulation</code></li> <li><code>FX.FreezeParticleSimulation</code></li> <li><code>FX.RestartAll</code></li> </ul> </li> <li> <p>Toggle Particle Rendering</p> <ul> <li><code>show Particles</code></li> </ul> </li> <li> <p>Turn Off CPU Particles</p> </li> <li> <p>Turn Off GPU Particles</p> <ul> <li><code>FX.AllowGPUParticles</code></li> </ul> </li> <li> <p>Misc Particle Commands</p> <ul> <li><code>PARTICLE</code></li> <li><code>KILLPARTICLES</code></li> <li><code>DUMPPARTICLEMEM</code></li> <li><code>CountDisabledParticleItems</code></li> <li><code>LISTPARTICLESYSTEMS</code></li> <li><code>PARTICLEMESHUSAGE</code></li> <li><code>DUMPPARTICLECOUNTS</code></li> <li><code>TRACKPARTICLERENDERINGSTATS</code></li> </ul> </li> <li> <p><code>Toggle Decals</code></p> </li> </ul> <ol> <li>Test If Post Processing</li> </ol> <ul> <li>show PostProcessing</li> <li>show PostProcessMaterial (this is for toggling custom postprocessing materials which are usually very expensive)</li> <li>show AntiAliasing</li> <li>show Decals</li> </ul> <ol> <li>Disable rendering features in order of priority by <code>r.LimitRenderingFeatures=FeatureLevel</code>. Feature Levels:</li> <li>AntiAliasing</li> <li>EyeAdaptation</li> <li>SeparateTranslucency</li> <li>DepthOfField</li> <li>AmbientOcclusion</li> <li>CameraImperfections</li> <li>Decals</li> <li>LensFlares</li> <li>Bloom</li> <li>ColorGrading</li> <li>Tonemapper</li> <li>Refraction</li> <li>ReflectionEnvironment</li> <li>AmbientCubemap</li> <li>MotionBlur</li> <li>DirectLighting</li> <li>Lighting</li> <li>Translucency</li> <li>TextRender</li> <li>Particles</li> <li>SkeletalMeshes</li> <li>StaticMeshes</li> <li>BSP</li> <li>Paper2DSprites</li> </ol>"},{"location":"ue4guide/performance-optimization/tolva-tool/tolva-perf-analyzer-mode/#draw-thread","title":"Draw Thread","text":"<ol> <li>Look at Draw Call Counter and make sure it's within budget</li> </ol> <ul> <li>stat RHI</li> <li>stat SceneRendering</li> <li>Look at triangle counts. You can do show [object category] to turn off big groups of objects to see where triangle counts are coming from<ul> <li>show shadows</li> <li>show dynamicshadows</li> </ul> </li> </ul> <ol> <li> <p>Freeze Rendering    - r.RenderTimeFrozen    - FreezeRendering    - FREEZESTREAMING    - FREEZEALL (freezes rendering &amp; level streaming)    - PAUSERENDERCLOCK    - FX.FreezeGPUSimulation    - FX.FreezeParticleSimulation</p> </li> <li> <p>Inspect Draw Lists:</p> </li> </ol> <ul> <li>r.DumpDrawListStats</li> </ul> <ol> <li>Occlusion/Visibility Culling:    - Use:<ul> <li>stat initviews - Displays information on how long visibility culling took and how effective it was. Visible section count is the single most important stat with respect to rendering thread performance, and that is dominated by Visible Static Mesh Elements under STAT INITVIEWS, but Visible Dynamic Primitives also factors in</li> </ul> </li> </ol> <ul> <li>FIX<ul> <li>show Bounds</li> <li>DumpVisibleActors</li> <li>r.VisualizeOccludedPrimitives</li> <li>showflag.visualizeculling</li> <li>show bounds</li> </ul> </li> </ul> <ol> <li> <p>Check if driver overhead is cause    - stat d3d11rhi</p> </li> <li> <p>GPU/CPU Stalls or Pipeline Bubbles    - Do RenderDoc/NSight capture, grab timings, and see if the perf goes up. If it does, the problem is a sync point</p> <ul> <li>stat scenerendering to look at Stats</li> <li>Launch GPUView to drill into specifics</li> </ul> </li> </ol>"},{"location":"ue4guide/performance-optimization/tolva-tool/tolva-perf-analyzer-mode/#vr-specific","title":"VR Specific","text":"<ul> <li>Launch Oculus Performance HUD Tool</li> <li>Should be accessible with console command from U4</li> <li>Disable ASW</li> <li>Look at these timings compared to emulate stereo mode. These are accurate GPU timings</li> <li>Targets:<ul> <li>Should have &lt;= 1 dropped frame per 5 seconds</li> <li>Should have GPU render time ~10ms</li> </ul> </li> </ul>"},{"location":"ue4guide/performance-optimization/tolva-tool/tolva-perf-analyzer-mode/#performance-tuning","title":"Performance Tuning","text":""},{"location":"ue4guide/performance-optimization/tolva-tool/tolva-perf-analyzer-mode/#tunable-optimizations","title":"Tunable Optimizations","text":"<ol> <li> <p>Ticking    - tick.AllowAsyncComponentTicks    - tick.AllowConcurrentTickQueue    - tick.AllowAsyncTickDispatch    - tick.AllowAsyncTickCleanup</p> </li> <li> <p>Toggle Occlusion Queries    - r.AllowOcclusionQueries    - r.DownsampledOcclusionQueries    - r.NumBufferedOcclusionQueries    - r.OcclusionQueryLocation (Does nothing in forward)</p> </li> <li> <p>Toggle HZB:    - r.HZBOcclusion=0    - EXPERIMENTAL!! r.DoInitViewsLightingAfterPrepass</p> </li> <li> <p>Toggle EarlyZPass settings:    - r.EarlyZPass=1    - r.EarlyZPassMovable=True    - r.EarlyZPassOnlyMaterialMasking    - r.MinScreenRadiusForDepthPrepass=0.3    - r.CustomDepth.Order</p> </li> <li> <p>Animation Update and Evaluation</p> </li> </ol> <p>a.ParallelAnimEvaluation    a.ParallelAnimUpdate    a.ForceParallelAnimUpdate</p> <ol> <li> <p>Compute Skinning    - r.SkinCache.Mode=1    - r.SkinCache.CompileShaders=1    - r.MorphTarget.Mode=1    - r.SkinCache.MaxGPUElementsPerFrame (can't find this)    - r.SkinCache.BufferSize (can't find this)    - r.SkinCache.NumTangentIntermediateBuffers    - r.SkinCache.SceneMemoryLimitInMB</p> </li> <li> <p>FX    - FX.AllowGPUSorting    - FX.AllowCulling    - FX.AllowAsyncTick    - FX.EarlyScheduleAsync    - FX.GPUCollisionDepthBounds    - FX.MaxParticleTilePreAllocation    - FX.ParticleCollisionIgnoreInvisibleTime    - FX.ParticleSlackGPU</p> </li> <li> <p>Render Target settings    - r.ClearSceneMethod=1    - r.SceneColorFormat=3    - r.GBufferFormat=1</p> </li> <li> <p>Lighting &amp; GI    - r.Cache.LightingCacheMovableObjectAllocationSize    - r.Cache.LightingCacheDimension    - r.Cache.UpdatePrimsTaskEnabled    - r.MinScreenRadiusForLights    - r.MinScreenRadiusForDepthPrepass</p> </li> <li> <p>Misc    - r.Forward.LightGridPixelSize    - r.Forward.LightGridSizeZ    - r.Forward.MaxCulledLightsPerCell    - r.Forward.LightLinkedListCulling    - r.DeferUniformBufferUpdatesUntilVisible    - r.UseParallelGetDynamicMeshElementsTasks    - r.Tonemapper.Quality</p> </li> </ol>"},{"location":"ue4guide/performance-optimization/tolva-tool/tolva-perf-analyzer-mode/#quality-trade-offs","title":"Quality Trade-Offs","text":"<ul> <li>Toggle TranslucentLightingVolume settings</li> <li>r.TranslucentLightingVolume</li> <li>r.TranslucentVolumeMinFOV</li> <li>r.TranslucentVolumeFOVSnapFactor</li> <li>r.TranslucencyVolumeBlur</li> <li>r.TranslucencyLightingVolumeDim</li> <li>r.TranslucencyLightingVolumeInnerDistance</li> <li> <p>r.TranslucencyLightingVolumeOuterDistance   (Inner &amp; Outer distance are the ones to change for getting around the popping)</p> </li> <li> <p>Toggle Custom Depth</p> </li> <li> <p>r.CustomDepth=0</p> </li> <li> <p>Toggle Separate Translucency</p> </li> <li>r.SeparateTranslucency=False</li> <li>r.SeparateTranslucencyAutoDownsample=1</li> <li>r.SeparateTranslucencyScreenPercentage=100</li> <li>r.SeparateTranslucencyDurationDownsampleThreshold=1</li> <li> <p>r.SeparateTranslucencyDurationUpsampleThreshold=0.25</p> </li> <li> <p>RenderTargets &amp; PostProcessing</p> </li> <li>r.DBuffer</li> <li>r.Atmosphere</li> <li>r.CapsuleShadows</li> <li>r.ContactShadows</li> <li> <p>r.HighQualityLightMaps</p> </li> <li> <p>AA</p> </li> <li>r.DefaultFeature.AntiAliasing=3</li> <li>r.MSAA.CompositingSampleCount=4</li> <li>r.MSAACount=4 (0=&gt; TXAA, 1=&gt;No MSAA, 2,4,8=&gt; MSAA Count)</li> <li>r.WideCustomResolve</li> <li> <p>r.DoTiledReflections</p> </li> <li> <p>DBuffer</p> </li> <li> <p>r.DBuffer=False</p> </li> <li> <p>GI</p> </li> <li>r.Cache.UpdateEveryFrame</li> <li> <p>r.Cache.SampleTransitionSpeed</p> </li> <li> <p>Misc Graphics Quality:</p> </li> <li>r.FastBlurThreshold=0</li> <li>r.BloomQuality=1</li> <li>r.MaxAnisotropy=8</li> <li> <p>r.LightFunctionQuality</p> </li> <li> <p>Skinning:</p> </li> <li>r.GPUSkin.Limit2BoneInfluences</li> <li> <p>r.SkinCache.RecomputeTangents</p> </li> <li> <p>FX:</p> </li> <li>FX.GPUCollisionDepthBounds=250</li> <li>FX.MaxCPUParticlesPerEmitter=1000</li> <li>FX.MaxGPUParticlesSpawnedPerFrame=524288</li> <li>FX.GPUSpawnWarningThreshold=10000</li> <li>r.GPUParticle.FixDeltaSeconds</li> <li>r.GPUParticle.FixTolerance</li> <li>r.GPUParticle.MaxNumIterations</li> <li> <p>r.ParticleLightQuality</p> </li> <li> <p>Reflection Captures</p> </li> <li>r.ReflectionEnvironment</li> <li>r.ReflectionCaptureResolution=128</li> <li>r.ReflectionEnvironmentBeginMixingRoughness=0.1</li> <li>r.ReflectionEnvironmentEndMixingRoughness=0.3</li> <li>r.ReflectionEnvironmentLightmapMixBasedOnRoughness</li> <li>r.ReflectionEnvironmentLightmapMixing</li> <li> <p>r.ReflectionEnvironmentLightmapMixLargestWeight=10000</p> </li> <li> <p>Big Kludges:</p> </li> <li>r.pd=1</li> </ul>"},{"location":"ue4guide/performance-optimization/tolva-tool/tolva-perf-analyzer-mode/#detailed-root-cause-analysis","title":"Detailed Root Cause Analysis","text":""},{"location":"ue4guide/performance-optimization/tolva-tool/tolva-perf-analyzer-mode/#overview","title":"Overview","text":"<p>Common stat options: [-ms=5.0][-root=empty] [leaf=empty][-depth=maxint] [-nodisplay]</p> Bash<pre><code>stat groupname[+] - toggles displaying stats group, + enables hierarchical display\nstat namedmarker #markername# - adds a custom marker to the stats stream\nstat hier -group=groupname [-sortby=name][-maxhistoryframes=60] [-reset][-maxdepth=4]\nstat group list|listall|enable name|disable name|none|all|default - manages enabling/disabling recording of the stats groups. Doing stat [groupname] automatically enables that group\nstat none - visually turn off all stats (recording is still active)\n</code></pre> <ol> <li> <p>Find perf offending causers:</p> Bash<pre><code>stat slow [-ms=1.0][-depth=4] - toggles displaying the game and render thread stats\nstat dumpevents [-ms=0.2][-all] - dumps events history for slow events, -all adds other threads besides game and render\n</code></pre> </li> <li> <p>After narrowing down, dump specific stat group frame</p> Bash<pre><code>stat dumpframe [-ms=5.0][-root=empty] [leaf=empty][-depth=maxint] - dumps a frame of stats\nstat dumpframe -ms=.001 -root=initviews\nstat dumpframe -ms=.001 -root=shadow\n</code></pre> <p>Get more consistent stats:</p> Bash<pre><code>stat dumpave|dumpmax|dumpsum [-start | -stop | -num=30][-ms=5.0] [-root=empty][leaf=empty] [-depth=maxint] - aggregate stats over multiple frames\n</code></pre> </li> <li> <p>Hitches</p> Bash<pre><code>stat dumphitches [-start | -stop | no explicit option toggles ] - toggles dumping hitches\nt.HitchThreshold to set threshold\n</code></pre> </li> <li> <p>Record to disk</p> Bash<pre><code>stat startfile - starts dumping a capture\nstat stopfile - stops dumping a capture (regular, raw, memory) Low\nstat startfileraw - starts dumping a raw capture\n</code></pre> </li> </ol>"},{"location":"ue4guide/performance-optimization/tolva-tool/tolva-perf-analyzer-mode/#general_1","title":"General","text":"<ol> <li>Game Thread:</li> </ol> <ul> <li>stat Game</li> <li>tick.LogTicks</li> <li>dumpticks</li> <li>tick.showPrerequistes</li> </ul> <ol> <li> <p>Threading Stalls    - stat Threading    - stat CPUStalls</p> </li> <li> <p>Engine UObject System/Constructing UObjects/PostInit/Allocation/etc:</p> </li> </ol> <ul> <li>stat Object</li> <li>stat ObjectVerbose</li> <li>stat GC</li> </ul> <ol> <li> <p>Game Thread Scene Update:    - stat Component    - stat UObjects    - stat SceneUpdate (only the GT timers)    - stat Character    - stat Tickables (things like movieplayer, timermanager, etc)    - Tick.LogTicks = 1 or dumpticks</p> </li> <li> <p>Triangle Count/Frame/Render/Game/GPU timings:</p> </li> </ol> <ul> <li>stat Engine</li> <li>stat RHI</li> <li>stat SceneRendering<ul> <li>RenderViewFamily = Render Thread</li> <li>InitViews = Culling, dependent on how many objects (not just visible) in the scene</li> </ul> </li> </ul> <ol> <li> <p>Inspect CPU:    - stat dumpcpu    - stat ServerCPU    - stat CPUStalls</p> </li> <li> <p>Perf By Tick Functions/Tasks/\"Job System\":    - stat TaskGraphTasks    - stat Tickables    - stat TickGroups</p> </li> <li> <p>Animation:    - stat Anim    - stat MorphTarget    - stat MovieSceneEval    - stat GPUSkinCache    - stat Particles    - ANIMSEQSTATS</p> </li> <li> <p>Physics:</p> </li> </ol> <ul> <li>stat Physics</li> <li>stat PhysXTasks</li> <li>stat Collision</li> <li>stat CollisionVerbose</li> <li>stat CollisionTags</li> <li>stat Character</li> <li>stat ImmediatePhysics</li> </ul> <ol> <li> <p>FX    - stat Particles    - stat ParticleMem    - stat GPUParticles    - stat Emitters    - stat BeamParticles    - stat MeshParticles    - stat TrailParticles    - DUMPPARTICLECOUNTS    - DUMPPARTICLEMEM    - PARTICLEMESHUSAGE    - LISTPARTICLESYSTEMS</p> </li> <li> <p>Misc    - stat Quick    - r.DisplayInternals</p> </li> </ol>"},{"location":"ue4guide/performance-optimization/tolva-tool/tolva-perf-analyzer-mode/#render-thread","title":"Render Thread","text":"<ol> <li>DrawThread/Scene Update Stalls:</li> </ol> <ul> <li>stat SceneRendering</li> <li>stat SceneUpdate</li> </ul> <ol> <li> <p>D3D Driver overhead:    - stat d3d11rhi</p> </li> <li> <p>Render Thread Command Marshalling from Game Thread</p> </li> </ol> <ul> <li>stat RenderThreadCommands</li> <li>stat RHICmdList</li> <li>stat CommandListMarkers</li> <li>stat ParallelCommandListMarkers</li> <li>stat LightRendering</li> </ul> <ol> <li> <p>Dump Material/Shader inf    - DumpMaterialStats: Dump material information    - DumpShaderStats: Dump shader information    - DumpShaderPipelineStats: Dump shader pipeline information</p> </li> <li> <p>Visibility Culling &amp; Primitive Component count:</p> </li> </ol> <ul> <li>stat initviews<ul> <li>Displays information on how long visibility culling took and how effective it was. Visible section count is the single most important stat with respect to rendering thread performance, and that is dominated by Visible Static Mesh Elements under STAT INITVIEWS, but Visible Dynamic Primitives also factors in.</li> </ul> </li> <li>show camerafrustums</li> <li>show bounds</li> </ul>"},{"location":"ue4guide/performance-optimization/tolva-tool/tolva-perf-analyzer-mode/#gpu","title":"GPU","text":"<ol> <li> <p>GPU    - stat GPU    - stat RHI (GPU Memory Pressure)</p> </li> <li> <p>Texture Bandwidth    - showMipLevels    - VisRT    - r.VisualizeTexturePool    - ListTextures    - ListStreamingTextures</p> </li> <li> <p>GI    - r.Cache.DrawInterpolationPoints    - r.Cache.DrawDirectionalShadowing    - r.Cache.DrawLightingSamples</p> </li> <li> <p>Post-Processing    - r.ListSceneColorMaterials</p> </li> <li> <p>VR    - stat OculusHMD    - stat Oculus</p> </li> <li> <p>Misc    - r.GPUBusyWait    - SynthBenchmark</p> </li> </ol>"},{"location":"ue4guide/performance-optimization/tolva-tool/tolva-perf-analyzer-mode/#advanced","title":"Advanced","text":"<ul> <li> <p>Hitches</p> </li> <li> <p>stat dumphitches</p> </li> <li> <p>CauseHitches</p> </li> <li> <p>Memory</p> </li> <li>TODO: Add a Button to explain how to Launch MTuner</li> <li>TODO: Add a Button to explain how to Launch igmemtrace</li> </ul> Bash<pre><code>memreport [-full]\nstat dumpnonframe [groupname]\nstat toggledebug\nstat TextureGroup\nstat TexturePool\nstat LLMPlatform\nstat LLM\nstat LLMMalloc\nstat LLMRHI\nstat LLMAssets\nstat Memory\nstat MemoryPlatform\nstat MemoryAllocator\nstat MemoryStaticMesh\nstat SceneMemory\nmemreport -fullprof\n</code></pre> <ul> <li>Misc</li> </ul> Bash<pre><code>stat dumpnonframe [groupname]\nstat Levels\nstat LoadTime\nstat LoadTimeVerbose\nstat AsyncLoad\nstat AsyncLoadGameThread\nstat Streaming / stat streaming sortby=name\nstat StreamingDetails\nPauseTextureStreaming\nDumpLightmapSizeOnDisk\nr.DumpRenderTargetPoolMemory\nrhi.DumpMemory\nr.RenderTargetPool.Events\nr.RenderTargetPoolMin\n</code></pre>"},{"location":"ue4guide/performance-optimization/tolva-tool/tolva-perf-tool-helpers/","title":"Tolva perf tool helpers","text":"<p>Perf Tool</p> <ul> <li> <p>Editor Toolbar Button to launch current map for perf testing.</p> </li> <li> <p>Command line is:</p> C++<pre><code>{full_path_to_ue4editor.exe}\n{fullpathto_BBR.uproject {current_map}?Listen -game -Multiprocess -messaging\n-SessionName=\"PerfTesting Mode\" -MultiprocessSaveConfig -MultiprocessOSS WinX=5 WinY=495 SAVEWINPOS=1 -NoVerifyGC -NoAILogging\n</code></pre> </li> <li> <p>Make sure to on launch:</p> </li> <li> <p>For the existing instance:</p> <ul> <li> <p>Warn if EditorPerformance.UseLessCPUWhenInBackground == False</p> </li> <li> <p>Set Editor Real Time Viewport = False</p> </li> <li> <p>Reference (but probably already exposed in python)</p> <p>EditorViewportClient.SetRealtime( false, false )</p> <p>const FLevelEditorViewportClient&amp; ViewClient = Viewport.Pin()-&gt;GetLevelViewportClient</p> <p>ViewClient.IsRealtime()</p> </li> </ul> </li> <li> <p>Try to minimize the editor window.</p> </li> </ul> C++<pre><code>TSharedPtr&lt;SWindow&gt; RootWindow = FGlobalTabmanager::Get()-&gt;GetRootWindow();\n\nif (RootWindow.IsValid() &amp;&amp; bShouldMinimizeRootWindow)\n{\n  RootWindow-&gt;Minimize();\n}\n</code></pre> <ul> <li> <p>For the launched instance(Likely need a command line arg to set a \"profiling mode\" or parse the -SessionName on-map-load and verify this state):</p> </li> <li> <p>Make sure vsync, frame smoothing, and t.maxfps is off</p> </li> <li> <p>Make sure r.ForceDebugViewModes=1</p> </li> <li> <p>Make sure t.IdleWhenNotForeground=1</p> </li> <li> <p>Normal Mode options:</p> </li> <li> <p>-ResX=2160 -ResY=1200 -nohmd -windowed -ExecCmds=\"r.screenpercentage 140,r.pd=1\"</p> </li> <li> <p>VR Emulation variant options:</p> </li> <li> <p>-ResX=2160 -ResY=1200 -nohmd -windowed -emulatestereo -ExecCmds=\"r.screenpercentage 140,r.pd=1\"</p> </li> <li> <p>VR Mode:</p> </li> <li> <p>vr</p> </li> <li> <p>Optional useful Params:</p> </li> <li> <p>Deterministic (shortcut for -fixedtimestep/-fixedseed)</p> </li> <li> <p>fixedtimestep</p> </li> <li> <p>FixedSeed</p> </li> <li> <p>usefixedtimestep</p> </li> <li> <p>debug (To Launch In DebugGame)</p> </li> <li> <p>log or -log LOG=logfile.txt</p> </li> <li> <p>FORCELOGFLUSH</p> </li> <li> <p>nologging</p> </li> <li> <p>NoTextureStreaming</p> </li> <li> <p>nosound</p> </li> </ul> <p>D3D Debugging</p> <ul> <li> <p>D3DDEBUG</p> </li> <li> <p>d3dbreakonwarning</p> </li> <li> <p>ONETHREAD</p> </li> <li> <p>VSPerf</p> </li> <li> <p>VTune</p> </li> </ul> <p>For Paths, look at FPaths struct (e.g. FPaths::GetProjectFilePath())</p> <ul> <li> <p>Command to build + cook + launch game</p> </li> <li> <p>Click the command =&gt; SWindow Popout with checkboxes+comboboxes to {build|cook} {engine|standalone} {development|debuggame} BBR</p> </li> <li> <p>Persist to config (kiteandlightning.py has example of ConfigParser)</p> </li> <li> <p>Create new ABBDebugController from ADebugCameraController. This can be our base class for debugging</p> </li> <li> <p>Add capture debug frustum console command to this class. Easiest way is make a</p> <p>UFUNCTION(exec) void CaptureDebugFrustum();</p> <p>There's a UDrawFrustumComponent* DrawFrustum that is already in ADebugCameraController. You just need to update its values</p> <p>Also look at Ethan Carter Extension to freeze rendering. Note: this might be not applicable anymore and also single eye frustum culling has been implemented in the engine already</p> <p>I had added drawing a debug frustum to the FREEZERENDERING command to aid in debugging culling using a joint frustum for both eyes. I had improved the DrawDebugFrustum() code to better handle the inverse-Z projection matrices that UE4 uses, and also to allow a plane set to be the data source.</p> <p>Reference From https://medium.com/@TheIneQuation/the-vanishing-of-milliseconds-dfe7572d9856</p> </li> </ul> <p>Command To Launch Oculus Perf tool:</p> <ul> <li> <p>Should toggle the oculus perf hud (this is exposed through console command): Should have these modes</p> </li> <li> <p>The 4 different modes for Oculus PerfHud</p> </li> <li> <p>The minimal perf hud mode that shows L,C,F depending on what missed frame rate (https://developer.oculus.com/documentation/pcsdk/latest/concepts/dg-performance-warning)</p> </li> <li> <p>Also force disable timewarp when launching</p> </li> <li> <p>See if you can bypass proximity sensor check. The Oculus Lost Frame Capture tool has a setting which probably means it writes to a registry key. You can snoop it using ProcMon:</p> </li> </ul> <p></p> <p>https://developer.oculus.com/documentation/pcsdk/latest/concepts/dg-performance-lostframes</p> <ul> <li> <p>Pause Game Thread: (pause)</p> </li> <li> <p>Pause Game Thread Clock update (e.g. slomo = 0)</p> </li> <li> <p>Game Thread should keep ticking but game engine should not increase the game clock so we can deterministically analyze current frame tick</p> </li> </ul> <p>Low-Pri</p> <ul> <li>Low-pri: Add Ethan Carter's implementation of STAT RELEVANTLIGHTS:</li> </ul> <p>https://github.com/inequation/UnrealEngine/commit/c986362a92c56b498982b200b0f36a09723202a4</p> <ul> <li> <p>Command to capture ETW tracefile using ovrlog or ovrlog_win10.</p> </li> <li> <p>Oculus Guide on ETW/GPUView: https://developer.oculus.com/documentation/pcsdk/latest/concepts/dg-performance-tutorial</p> </li> <li> <p>This chapter from this book is another detailed good resource (I have the ebook, ask me when you get to it):</p> </li> <li> <p>Chapter 2. Understanding, Measuring, and Analyzing VR Graphics Performance (by James Hughes, Reza Nourai, and Ed Hutchins) in the book GPU Zen: Advanced Rendering Techniques (Wolfgang Engel, ed)</p> </li> <li> <p>Grab Individual stat numbers and construct our own groups:</p> </li> </ul> <p>For reference, Look at</p> <ul> <li> <p>DumpFrame(int64 Frame)</p> </li> <li> <p>DumpHistoryFrame(Stats, Latest, DumpCull, MaxDepth, *NameFilter);</p> </li> <li> <p>DumpCPUSummary()</p> </li> <li> <p>DrawStatsHUD() is where the stats drawing happens</p> </li> <li> <p>[Accessing Single Stat Values]</p> </li> <li> <p>Command to programmatically capture a frame:</p> </li> <li> <p>Use dxcap: https://msdn.microsoft.com/en-us/library/hh780905.aspx</p> <p>dxcap -c UnrealEngine\\Engine\\Binaries\\Win64\\UE4Editor-Win64-Debug.exe BBR\\BBR.uproject 0-Lobby -log -debug -d3ddebug -game</p> <p>dxcap -frame 8s -c UnrealEngine\\Engine\\Binaries\\Win64\\UE4Editor-Win64-Debug.exe BBR\\BBR.uproject 0-Lobby -log -game</p> </li> <li> <p>Programmatic NSight capture would be great too:</p> </li> <li> <p>Launch Project with NSight HUD:</p> </li> <li>\"C:\\Program Files (x86)\\NVIDIA Corporation\\Nsight Visual Studio Edition 5.3\\Monitor\\Common\\Nvda.Launcher.exe\" \"%1\"</li> <li>Ex:</li> <li>\"C:\\Program Files (x86)\\NVIDIA Corporation\\Nsight Visual Studio Edition 5.3\\Monitor\\Common\\Nvda.Launcher.exe\" \"C:\\UE4Editor.exe\" BBR.uproject -log</li> </ul> <p>Launch NSight Monitor</p> <ol> <li> <p>Make sure to launch nsmonitor with admin priv</p> </li> <li> <p>Adjust WDDM TDR for Nsight</p> </li> <li> <p>Enable Driver Instrumentation</p> </li> <li> <p>Make sure to warn if these settings arent set:</p> </li> </ol> <ul> <li> <p>t.maxfps=0</p> </li> <li> <p>Set BBIsGPUProfiling = true</p> </li> </ul> <ol> <li> <p>Remember to pass -d3ddebug</p> </li> <li> <p>Exhaustive D3D11 shader collection</p> </li> <li> <p>Make sure to set shader include paths</p> </li> <li> <p>Make sure to set application is a launcher</p> </li> <li> <p>Set Force Assembly debugging if you cant find source = true</p> </li> <li> <p>Set Preferred remote shader debugging mode = Replay-based debugging</p> </li> </ol> <ul> <li> <p>Tick One Frame Forward at Fixed Interval</p> </li> <li> <p>Command to Toggle Determinism (e.g. Fixed Random Seed, Set Fixed Timestep, etc). Look at what these commandline options are and see if it's possible to set them at runtime</p> </li> <li> <p>Deterministic (shortcut for -fixedtimestep/-fixedseed)</p> </li> <li> <p>fixedtimestep</p> </li> <li> <p>FixedSeed</p> </li> <li> <p>usefixedtimestep</p> </li> <li> <p>Custom Stats Visualizer Widget: Should display window with visualizer for render budget</p> </li> <li> <p>Make a better variant of \"Budget BebylonPerf\"</p> </li> <li> <p>Diagram for Stats System: [Stats System Diagram]</p> </li> <li> <p>Expose a way to Python to extract specific stats</p> </li> <li> <p>Slate widget for graphs/charts: https://www.unrealengine.com/marketplace/datatracker-plugin or https://www.unrealengine.com/marketplace/kantan-charts</p> </li> <li> <p>Launcher Mode for Shader Debugging:</p> </li> </ul>"},{"location":"ue4guide/performance-optimization/tolva-tool/tolva-perf-tool-helpers/#commands-for-toggling-debug--perf-markers","title":"Commands for toggling debug &amp; perf markers:","text":"<p>ToggleDrawEvents: Emits helpful draw event markers for use with GPU Capture/PIX</p> INI<pre><code>r.ShowMaterialDrawEvents: Shows material around each drawcall in profilegpu\nr.EmitMeshDrawEvents\nr.RHISetGPUCaptureOptions\nr.ProfileGPUSort 2, ProfileGPU\nr.ProfileGPU.Pattern\nr.ProfileGPU.ShowLeafEvents\nr.ProfileGPU.ShowTransitions\nr.ProfileGPU.PrintAssetSummary\nr.ProfileGPU.AssetSummaryCallOuts\nr.ProfileGPU.Sort\nr.RHICmdUseThread=0\nr.RHICmdBypass=1\nr.RHICmdUseParallelAlgorithms=1\nToggleRHIThread\nr.ParallelTranslucency\n</code></pre>"},{"location":"ue4guide/performance-optimization/tolva-tool/tolva-perf-tool-helpers/#commands-for-debug-logging","title":"Commands for debug logging","text":"INI<pre><code>r.D3DDumpAMDCodeXLFile\n\nr.D3DDumpD3DAsm\n</code></pre>"},{"location":"ue4guide/performance-optimization/tolva-tool/tolva-perf-tool-helpers/#general","title":"General","text":"INI<pre><code>; Uncomment to get detailed logs on shader compiles and the opportunity to retry on errors\nr.ShaderDevelopmentMode=1\nr.CompileShadersForDevelopment=1\nr.MaterialEditor.UseDevShaders=1\n\n[DevOptions.Shaders]\n; See FShaderCompilingManager for documentation on what these do\nbAllowCompilingThroughWorkers=True\nbAllowAsynchronousShaderCompiling=True\n; Make sure we don't starve loading threads\nNumUnusedShaderCompilingThreads=3\n; Make sure the game has enough cores available to maintain reasonable performance\nNumUnusedShaderCompilingThreadsDuringGame=4\n; Batching multiple jobs to reduce file overhead, but not so many that latency of blocking compiles is hurt\nMaxShaderJobBatchSize=10\nbPromptToRetryFailedShaderCompiles=True\nbLogJobCompletionTimes=False\n; Only using 10ms of game thread time per frame to process async shader maps\nProcessGameThreadTargetTime=.01\n;For XboxOne PIX support\nShaderPDBRoot=D:\\DirectoryOfChoice\n</code></pre>"},{"location":"ue4guide/performance-optimization/tolva-tool/tolva-perf-tool-helpers/#sanity-checking-commands","title":"Sanity Checking Commands","text":"INI<pre><code>r.ShowShaderCompilerWarnings=1\nr.D3DCheckShadersForDouble=1\n</code></pre>"},{"location":"ue4guide/performance-optimization/tolva-tool/tolva-perf-tool-helpers/#debug-logging","title":"Debug Logging","text":"INI<pre><code>; Uncomment to dump shaders in the Saved folder\n; Warning: leaving this on for a while will fill your hard drive with many small files and folders\nr.DumpShaderDebugInfo=1\n; When this is enabled, dumped shader paths will get collapsed (in the cases where paths are longer than the OS's max)\nr.DumpShaderDebugShortNames=1\n; When this is enabled, when dumping shaders an additional file to use with ShaderCompilerWorker -direct mode will be generated\nr.DumpShaderDebugWorkerCommandLine=1\n</code></pre>"},{"location":"ue4guide/performance-optimization/tolva-tool/tolva-perf-tool-helpers/#add-these-when-running-with-a-graphical-debugger-like-nsight-but-not-when-profiling","title":"Add these when running with a graphical debugger like NSight (but not when profiling)","text":"INI<pre><code>r.Shaders.Optimize=0\nr.Shaders.KeepDebugInfo=1\nr.ShowShaderCompilerWarnings=1\nr.XGEShaderCompile=0\nr.D3D.RemoveUnusedInterpolators=0\nr.GraphicsAdapter=0\nr.D3D12GraphicsAdapter=0\nToggleDrawEvents: Emits helpful draw event markers for use with GPU Capture/PIX\nr.ShowMaterialDrawEvents: Shows material around each drawcall in profilegpu\nr.EmitMeshDrawEvents=1\nr.RHISetGPUCaptureOptions=1\nr.RHICmdUseThread=0\nr.RHICmdBypass=1\nbb.IsGPUProfiling=1\n  - Prevents render heartbeat thread from reporting a deadlock if we're in a debugger and paused\nbb.perf.SetShaderCompileMode=0\n  - This is equivalent to at runtime doing:\n    [DevOptions.Shaders]\n    ; See FShaderCompilingManager for documentation on what these do\n    bAllowCompilingThroughWorkers=False\n    bAllowAsynchronousShaderCompiling=False\n</code></pre>"},{"location":"ue4guide/python-basics/embeddable-python-distro/","title":"Embeddable python distro","text":"<p>Bundling/Creating custom python distribution (Embeddable zip or not). Also known as \"freezing\" a python distro:</p> <p>https://docs.python-guide.org/shipping/freezing/</p>"},{"location":"ue4guide/python-basics/embeddable-python-distro/#python-embedded-distribution-for-windows","title":"Python embedded distribution for Windows","text":"<p>Jul 15, 2018</p> <p>Python is available as an embedded distribution for Windows. The distribution is a minimal, isolated build for redistribution as part of another application.</p> <p>These are my notes to install third-party packages for this version of Python using pip. This worked for both the 32-bit and 64-bit versions of Python 3.7.</p> <ol> <li> <p>Download and extract either the 32-bit or 64-bit version of the embedded distribution (the \u2018embeddable zip file\u2019) from the Python website</p> </li> <li> <p>In the path configuration file (in the Python 3.7 distribution: \u2018python37._pth\u2019), uncomment the last line to import site</p> </li> <li> <p>Download get-pip.py and install pip: &gt; python get-pip.py</p> </li> <li> <p>You can now install (and, by [2], import) third-party packages with: &gt; python -m pip install ... where ... is the list of package names</p> </li> </ol> <p>Reference From http://www.christhoung.com/2018/07/15/embedded-python-windows/</p> <p>This is how you can do this, extract Python embeddable zip file. It has the file pythonxx._pth. This file contains list of directory/zip files which embedded python uses to look for modules i.e. to setup sys.path . For example I have extracted 3.6 embedded version into E:\\dev folder.</p> <p>*PS C:\\Users\\user2&gt; get-content E:\\dev\\python-3.6.5-embed-amd64\\python36._pth  python36.zip </p> Python<pre><code># Uncomment to run site.main() automatically\n\n#import site\n\n*sys.path will reflect the same thing*\n\n*PS C:\\Users\\user2&gt; python \nPython 3.6.5 (v3.6.5:f59c0932b4, Mar 28 2018, 17:00:18) [MSC v.1900 64 bit (AMD64)] on win32  \n\nimport sys \nsys.path \n ['E:\\\\dev\\\\python-3.6.5-embed-amd64\\\\python36.zip', 'E:\\\\dev\\\\python-3.6.5-embed-amd64']  \n</code></pre> <p>Now all I need to do is create a new directory or zip file in E:\\dev\\python-3.6.5-embed-amd64, which contains all my modules and add that directory in python36._pth file. Once all the testing is done, I can zip the folder E:\\dev\\python-3.6.5-embed-amd64 which can be used to deploy Python with all the required modules ready to import.</p> <p>Reference From https://stackoverflow.com/questions/51231247/how-to-create-or-extend-a-python-3-x-embeddable-zip-for-windows</p> <p>There is a way to extend Python embedded installation. I managed to create Flask-ready package, that I can just unzip on target machine and run code. The trick is to install EXACT same python version (normal full blown python) as your target embedded small python. Not only version but x86, x64 has to match as well.</p> <p>Then install modules from pip on normal python, go to NormalPython\\Lib\\site-packages and copy all new files that appear after installing to EmbeddedPython\\Lib finally add Lib to pythonXX._pth inside Embedded python folder.</p> <p>It's extremely important to fully test your application in case you miss some package. Also this would not work for packages that also add .exe to Scripts folder. You could still probably copy the exe's to Script folder and add it to path which could do the trick.</p> <p>Reference From https://stackoverflow.com/questions/49737721/adding-packages-to-python-embedded-installation-for-windows</p>"},{"location":"ue4guide/python-basics/python-basics/","title":"Python basics","text":""},{"location":"ue4guide/python-basics/python-basics/#debugging","title":"Debugging:","text":"Python<pre><code>import pprint\n\npprint.pprint(randomObj.__dict__) =&gt; Prints all the attributes &amp; their values in an object\ndir(randomObj)                    =&gt; enumerates attributes &amp; methods in an object\ninspect(module)                   =&gt; Allows you to inspect a module\n</code></pre>"},{"location":"ue4guide/python-basics/python-basics/#import-statements","title":"Import statements:","text":"<p>Absolute vs. Relative Import</p> <ul> <li>An absolute import uses the full path (starting from the project's root folder) to the desired module to import.</li> <li>A relative import uses the relative path (starting from the path of the current module) to the desired desired module to import. There are two types of relative imports:</li> <li>explicit relative import follows the format <code>from ./module/package import X</code>, where <code>module/package</code> is prefixed by dots <code>.</code> that indicate how many directories upwards to traverse. A single dot . corresponds to the current directory; two dots .. indicate one folder up; etc.</li> <li>implicit: deprecated. Don't use</li> <li>Use absolute imports rooted at the test/ directory (i.e. middle column in the table above). This guarantees that running start.py directly will always work. In order to run a2.py directly, we can modify sys.path in a2.py to include test/packA/, before sa2 is imported. Python<pre><code>import os, sys\nsys.path.append(os.path.dirname(os.path.dirname(os.path.realpath(__file__))))\n\n# now this works, even when a2.py is run directly\nfrom packA.subA import sa2\n</code></pre></li> </ul> <p>Reference From https://chrisyeh96.github.io/2017/08/08/definitive-guide-python-imports.html</p>"},{"location":"ue4guide/python-basics/python-basics/#logging","title":"Logging:","text":"Python<pre><code>print(\"\")\n\nimport os\n\nos.environ['HOME'] will retrieve the environment variable. os.environ is a dictionary\n\nos.environ.get('KEY') will return None if the key doesn't exist instead of raising KeyError\n</code></pre>"},{"location":"ue4guide/python-basics/python-basics/#directory-traversal","title":"Directory Traversal:","text":"<p>http://www.diveintopython.net/file_handling/os_module.html</p> <p>https://docs.python.org/2/library/filesys.html</p> <p>You can use glob:</p> Python<pre><code>import glob \nimport os \nos.chdir(\"/mydir\")for file in glob.glob(\"*.txt\"): \nprint file\n\nor simply os.listdir:\n\nimport os \nfor file in os.listdir(\"/mydir\"): \nif file.endswith(\".txt\"): \nprint file\n\nor if you want to traverse directory:\n\nimport os \nfor root, dirs, files in os.walk(\"/mydir\"): \nfor file in files: \nif file.endswith(\".txt\"):\n\nprint os.path.join(root, file)\n\n\nList immediate child subdirectories:\n\nnext(os.walk('.')) [1]\n</code></pre> <p>Reference From https://stackoverflow.com/questions/973473/getting-a-list-of-all-subdirectories-in-the-current-directory</p>"},{"location":"ue4guide/python-basics/python-basics/#convert-path","title":"Convert Path:","text":""},{"location":"ue4guide/python-basics/python-basics/#renaming-script-in-directory-and-append-number-based-on-name-sort-order","title":"Renaming Script in directory and append number based on name sort order:","text":"Python<pre><code>import os, glob\n\nfiles = glob.glob('/Users/ikrima/src/MythlyRepos/CineX/Photogrammetry/CineX/TAJA/Distortion/renames/*.tif')\n\nfiles.sort()\n\nfor i in xrange(0, len(files)):\n\nfilename,ext = os.path.splitext(os.path.basename(files[i]))\n\nos.rename(files[i], os.path.join(os.path.dirname(files[i]), filename + \".%07d\" % i + ext))\n</code></pre>"},{"location":"ue4guide/python-basics/python-basics/#executing-shell-commands","title":"Executing shell commands","text":"Python<pre><code>os.system(\"some_command with args\")\n</code></pre> <p>Reference From http://stackoverflow.com/questions/89228/calling-an-external-command-in-python</p> Python<pre><code>import subprocess\n\nproc = subprocess.Popen([\"cat\", \"/tmp/baz\"], stdout=subprocess.PIPE) \n(out, err) = proc.communicate() \nprint \"program output:\", out\n</code></pre>"},{"location":"ue4guide/python-basics/python-basics/#directoryfilesystem-traversal","title":"Directory/Filesystem Traversal:","text":"Python<pre><code>os.chdir()/os.getcwd()\n</code></pre> <p>https://docs.python.org/2/library/os.html#os-file-dir</p>"},{"location":"ue4guide/python-basics/python-basics/#object-as-dictionary","title":"Object as dictionary:","text":"Python<pre><code>obj = Foo()\n\ndict(obj)\n</code></pre>"},{"location":"ue4guide/python-basics/python-basics/#unzip-list-of-tuples","title":"Unzip List of Tuples:","text":"Python<pre><code>zipper_list = [(1, 'a'), (2, 'b'), (3, 'c')]\n\nlist_a, list_b = zip(*zipper_list)\n</code></pre> Strings: Unicode string u'bla' Unescaped r'bla\\d' String interpolation with formatting f'{bla:10}'"},{"location":"ue4guide/python-basics/python-basics/#string-formatting","title":"String Formatting:","text":"<p>f'This is inline string interpolation {bla:10}'</p> <p>Examples:</p> Python<pre><code>f'{a:02}' =&gt; '01'S\n</code></pre> <p>https://www.programiz.com/python-programming/methods/string/format#numbers</p> <p>The general form of a standard format specifier is:</p> Python<pre><code>[[fill]align] [sign] [#] [0] [minimumwidth] [.precision] [type]\n</code></pre> <p>Reference From https://www.python.org/dev/peps/pep-3101/#standard-format-specifiers</p> BNF<pre><code>[\\[fill\\]align][sign] [#][0] [width][,] [.precision][type] where, the options are \nfill ::= any character \nalign ::= \"&lt;\" | \"&gt;\" | \"=\" | \"^\" \nsign ::= \"+\" | \"-\" | \" \" \nwidth ::= integer \nprecision ::= integer \ntype ::= \"b\" | \"c\" | \"d\" | \"e\" | \"E\" | \"f\" | \"F\" | \"g\" | \"G\" | \"n\" | \"o\" | \"s\" | \"x\" | \"X\" | \"%\"\n</code></pre> <p>Reference From https://www.programiz.com/python-programming/methods/built-in/format</p>"},{"location":"ue4guide/python-basics/references/","title":"References","text":"<p>http://book.pythontips.com/en/latest/index.html</p> <p>http://python-3-patterns-idioms-test.readthedocs.io/en/latest/PythonForProgrammers.html</p> <p>https://github.com/arogozhnikov/python3_with_pleasure</p> <p>http://docs.python-guide.org/en/latest/writing/gotchas</p> <p>http://pythonextensionpatterns.readthedocs.io/en/latest/refcount.html</p>"},{"location":"ue4guide/python-basics/useful-snippets/","title":"Useful snippets","text":"<p>Look at this file:</p> <p>Bebylon\\BBR\\Content\\Development\\Scripts\\ikrima\\Snippets.py</p>"},{"location":"ue4guide/python-basics/oculus-stuff/controlling-rift-overscan-in-unreal-rendering/","title":"Controlling rift overscan in unreal rendering","text":"C++<pre><code>bOverrideScreenPercentage=false\n\n; Value is out of range [30..300]\n\nScreenPercentage=100.0\n</code></pre> <p>Higher values create a larger rendering buffer prior to distortion.</p>"},{"location":"ue4guide/python-basics/oculus-stuff/how-to-get-hmd-camera-in-worldspace--camera-issues/","title":"How to get hmd camera in worldspace  camera issues","text":"<p>Lots of Camera Issues in VR in 4.8:</p> <p>https://forums.oculus.com/viewtopic.php?f=60&amp;t=24683</p> <p></p> <p>https://answers.unrealengine.com/questions/243325/how-to-get-real-camera-position-in-vr-mode.html</p> <p>Oculus Rift Coordinate System:</p> <ul> <li> <p>Device Position is in the reference frame of the rift defined by the recalibration. So wherever you are looking IRL when you reset the HMD, that will be +X, right of that will be +Y, above that will be +Z.</p> </li> <li> <p>Device Rotation will be relative to the recalibration although only Yaw gets reset during recalibration</p> </li> </ul>"},{"location":"ue4guide/python-basics/oculus-stuff/rift-gotchas/","title":"Rift gotchas","text":"<ul> <li> <p>Turn off these features for VR:</p> </li> <li> <p>Temporal AA (Use FXAA)</p> </li> <li> <p>Motion Blur</p> </li> <li> <p>Lens Flare</p> </li> <li> <p>Depth Of Field</p> </li> <li> <p>Bloom Dirt Mask</p> </li> <li> <p>Vignette Intensity</p> </li> <li> <p>Turn off smoothframerate</p> </li> <li> <p>Stereo rendering does not work in Editor viewports or PIE mode; must use Standalone Game mode</p> </li> <li> <p>Rift only supported on Windows</p> </li> <li> <p>Useful links for Oculus + UE4:</p> </li> <li> <p>Oculus Wiki Page: https://wiki.unrealengine.com/Oculus_Rift</p> </li> <li> <p>Separate Player movement orientation from HMD orientation https://wiki.unrealengine.com/Oculus_Rift_Separate_View</p> </li> <li> <p>Blueprints related to HMD https://wiki.unrealengine.com/Oculus_Rift_Blueprint</p> </li> <li> <p>Useful Console Commands</p> </li> <li> <p>stereo show: Print list of settings to log</p> </li> <li> <p>stereo on/off: Turn on/off stereo for any game. Rift must be plugged in</p> </li> <li> <p>stereo reset: Resets IPD and clears stereo overrides</p> </li> <li> <p>stereo e=: Sets IPD <li> <p>hmd enable/disable: Enable/Disable HMD</p> </li> <li> <p>hmd sp 100: Sets HMD Screen Percentage</p> </li> <li> <p>hmd vsync on/off/reset: Self-explanatory</p> </li> <li> <p>ovrversion: Prints LibOVR version</p> </li> <li> <p>Useful Oculus Config settings &amp; console commands are all defined in OculusRiftHMD.cpp:</p> </li> C++<pre><code>bool FOculusRiftHMD::Exec( UWorld* InWorld, const TCHAR* Cmd, FOutputDevice&amp; Ar )\n  void FOculusRiftHMD::LoadFromIni()\n</code></pre> <ul> <li>Oculus Config settings are in the DefaultEngine.ini file ([root]/Config/DefaultEngine.ini)</li> </ul> C++<pre><code> [Oculus.Settings]\n ; In meters, not Unreal Units (cm)\n ; Recommended for true first person viewpoint\n ; since you are simulating the head.\n ;HeadModel_v2=(X=0.0,Y=0,Z=0.0)\n ; Default values\n HeadModel_v2=(X=0.12,Y=0,Z=0.17)\n\n bChromaAbCorrectionEnabled=true\n bMagEnabled=true\n bDevSettingsEnabled=false\n bMotionPredictionEnabled=true\n bTiltCorrectionEnabled=true\n AccelGain=0.0\n MotionPrediction=0.04\n\n bOverrideIPD=false\n IPD=0.064\n\n bOverrideStereo=false\n ProjectionCenterOffset=0.0\n LensCenterOffset=0.0\n FOV=90.0\n\n bOverrideVSync=false\n bVSync=true\n\n bOverrideScreenPercentage=false\n ; Value is out of range [30..300]\n ScreenPercentage=100.0\n\n bAllowFinishCurrentFrame=false\n PositionScaleFactor=1.0\n ; Defaults to true if DLL built with OVR_VISION_ENABLED defined.\n ; Positional tracking for DK2 onwards perhaps?\n bHmdPosTracking=false\n bLowPersistenceMode=false\n\n ; Defaults to true.\n ; If enabled, viewpoint rotation is updated during the render thread.\n ; Depending on how you control a players view rotation, you may need to disable this.\n bUpdateOnRT=true\n\n- World Scale can be changed in Window-&gt;World Settings. Default is 100 uu =&gt; 1m (i.e. 1 uu = 1cm)\n</code></pre> <p></p> <ul> <li>Player Settings: Can be changed in the Defaults or Components of your characters BluePrint</li> </ul> <p></p> <p></p> <ul> <li> <p>Height &amp; Width are based off Capsule Half Height &amp; Capsule Radius</p> </li> <li> <p>Virtual Head Model:</p> </li> </ul> <p>By default, a virtual head model will be used to offset the players viewpoint.</p> <p>For a traditional first person viewpoint that rotates on a central axis, this is fine.</p> <p>For a true first person viewpoint that is already positioned at the location of the players eyes, this extra offset is unnecessary.</p> <p>Similarly so for most third person viewpoints.</p> <p>The dimensions of this virtual head model are determined by the HeadModel_v2 config setting.</p> <ol> <li> <p>First of all, be sure to use the rift as recommand (by Oculus VR) as an extended monitor (not in clone mode, as it breaks things like vsync).</p> </li> <li> <p>Disable the \"Aero\" Windows desktop composition engine. Right-click on your desktop, click \"Personalize\" and then select one of the \"Basic\" or \"Classic\" themes instead of an \"Aero\" theme. I did not bother to measure impact about this; does anyone did?</p> </li> <li> <p>Then, launch the game in standalone mode, without opening the Editor. Right click in you project \".uproject\" file and hit \"Launch game\". This helps a lot!</p> </li> <li> <p>By then, you would run the game in default graphic config, that is \"Epic mode\"! This is a big problem here! You should tweak scalability parameters from Epic to High, at least. Read [this official post to learn about its effect on Editor mode] then read [my explanation on how to make this dynamic into your standalone game using blueprints]</p> </li> </ol> <p>Reference From https://forums.unrealengine.com/showthread.php?3822-UE-4-and-Oculus-Rift-Framerate-Optimization</p> <p>Regarding cloning multiple monitors, I personally had the best performance with cloning enabled, and my game running in fullscreen mode, instead of running with my desktop extended and the game running in a \"fullscreen\" window.</p> <p>But to make vsync work (so that the Rift doesn't inherit the vsync timing of your primary monitor), at least with an Nvidia card, you can set the Rift as your clone source in the Nvidia Control Panel (#3 is my Rift in the screenshot below). This way the Rift's refresh timing will be used for vsync and you won't see any tearing on your headset, although if you primary monitor timing is even slightly different (probably the case) you will still see tearing on the primary monitor. Of course this shouldn't be a problem since only other people in the room will see your primary monitor while your Rift is on your head.</p> <p></p> <p>Reference From https://forums.unrealengine.com/showthread.php?3822-UE-4-and-Oculus-Rift-Framerate-Optimization</p>"},{"location":"ue4guide/python-basics/oculus-stuff/rift-gotchas/#guide-to-getting-good-fps-and-quality-in-ue4-demos-using-distortionscale-and-screenpercentage","title":"Guide to getting good FPS and quality in UE4 demos using DistortionScale and ScreenPercentage","text":"<p>tl;dr: The DistortionScale parameter trades off FOV and image quality. The ScreenPercentage parameter trades off FPS and image quality. Here's how to set them both.</p> <p>UPDATE: Now available in video form, see:/r/oculus/comments/24lkxz/getting_good_fps_and_quality_in_ue4_demos_on/</p> <p>I did some digging into the Oculus plugin in the UE4 source, and came up with the following strategy which will enable you to get a rock-solid 60 FPS in UE4 demos, while also getting the highest visual fidelity your GPU can handle. Be careful to follow the steps and not skip any.</p> <p>1) If you've messed with your GameUserSettings.ini file, change the following settings back:</p> C++<pre><code>ResolutionSizeX=1280\nResolutionSizeY=800\nbUseDesktopResolutionForFullscreen=False\nFullscreenMode=0\n</code></pre> <p>The following steps will work at higher resolutions, but results will not be as good.</p> <p>2) Start up the demo. If you're not already in stereo mode, do ~ to enter the console and then \"stereo on\".</p> <p>3) Put on your Rift and type the following to pop up an FPS monitor in your view:</p> <p>stat fps</p> <p>Find the most complex scene in the demo exhibiting the poorest frame rate for testing. If your frame rate is good throughout, increase your ScreenPercentage with \"hmd sp 200\" or \"hmd sp 300\" and try again.</p> <p>4) Enter the console with ~ and type the following commands:</p> C++<pre><code>oculusdev on\nhmdwarp 1=1\n</code></pre> <p>These commands have no apparent effect, but unless you do both of them, the command in the next step will have no effect (the second command is a workaround for a bug).</p> <p>5) Set your DistortionScale to 0.5 using \"hmdwarp s=0.5\". This should cause your view in each eye to shrink to a small rectangle. Increase it gradually by 0.1 (e.g. \"hmdwarp s=0.6\") until you can no longer see black around the image. For me this happens around 1.3. (If you wish, you can fine tune it by increments of 0.01 at this point). The UE4 default is 1.715, which is really high.</p> <p>This parameter setting does not affect your frame rate at all, but does improve image quality dramatically. Once you've found a DistortionScale parameter you like, you can reuse it in every demo - it only depends on your vision and how close you put your eyes to the lenses.</p> <p>You will need to repeat steps 4 and 5 each time you run the demo. DistortionScale cannot currently be set in Engine.ini, and I don't know if it can be set programmatically. It might be possible to bind a key.</p> <p>6) ScreenPercentage varies between 30 and 300, and determines the resolution of the offscreen buffer. Start it at 30 with \"hmd sp 30\". Wait for 10-20 seconds for your \"stat fps\" reading to climb to a maximum value. Your frame rate should be maxed out, but the image will look terribly blurry.</p> <p>Increase it in steps of 10 while watching your frame rate (e.g. \"hmd sp 40\") - once your frame rate drops below your refresh rate, take it back down by 10 and you are done. If you later encounter frame drops, you can bring it down a little more.</p> <p>If you're not happy with your image quality at this point, you may wish to slightly decrease DistortionScale as in step 5, which will reduce FOV but give you more image quality in return.</p> <p>Very high ScreenPercentage values (e.g. in the 150-300 range) result in SSAA behind the scenes, and are roughly equivalent to running a Unity Rift demo at a higher screen resolution. This is why I said not to use a higher resolution in step (1).</p> <p>If you close the demo normally, it will save your modified ScreenPercentage to your Engine.ini file automatically, and you will not have to repeat this step.</p> <p>7) Hide your FPS again with \"stat fps\".</p> <p>That's it! I've tried this on both the Starship Bridge Demo (for which I got ScreenPercentage up to 250 on my GTX 780 Ti) and UE4EffectsCave (I got up to 130). Let me know what kind of results you get!</p> <p>Reference From http://www.reddit.com/r/oculus/comments/24g92u/guide_to_getting_good_fps_and_quality_in_ue4/</p>"},{"location":"ue4guide/python-basics/oculus-stuff/tips-tricks-1/","title":"Tips tricks 1","text":"<p>Registry Key developer settings:</p> <ul> <li>Obscurely worded, but this seems to disable the Health and safety warning:</li> </ul> C++<pre><code>  HKLM\\Software\\WOW6432Node\\Oculus DWORD: ShowStartupPanelBackup = 1\n\n HKEY_LOCAL_MACHINE\\SOFTWARE\\Oculus VR, LLC\\LibOVR\\PurgatoryHudEnabled\", REG_DWORD or REG_SZ values of 0 or 1.\n</code></pre> <ul> <li>Keep the screen on (may cause burn in):</li> </ul> C++<pre><code>  HKLM\\Software\\WOW6432Node\\Oculus: AllowScreenBurnIn = 1\n</code></pre> <ul> <li>Debug console:</li> </ul> C++<pre><code>  HKLM\\Software\\WOW6432Node\\Oculus: ShowServiceConsole = 1\n</code></pre> <ul> <li>Disable Oculus Home from auto-launching:</li> </ul> <p>Rename the .exe (C:\\Program Files (x86)\\Oculus\\Support\\oculus-home\\PC_OculusHome.exe)</p> <ul> <li>Disable updates</li> </ul> C++<pre><code>  [HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Oculus VR, LLC\\Oculus\\Config]\n\n  \"CoreChannel\"=\"Rift18\" (change it to LIVE to continue updates)\n</code></pre>"},{"location":"ue4guide/python-basics/oculus-stuff/tips-tricks-1/#distributed-shader-compilation","title":"Distributed Shader Compilation","text":"<p>r.XGEShaderCompile=1</p> <p>Enable HMD head tracking without being in VR mode:</p> <p>Set Editor Settings-&gt;Player-&gt;ViewportGetsHMDControl to true &amp; console command \"hmdpos enforce on\" to enable head tracking in Unreal's Viewport or PIE mode without enabling stereo. Very useful for debugging multiplayer or testing hmd functionality like avatars.</p> <p>Don't minimize the editor window while in VR Mode</p> <ul> <li>You can maintain the Editor window during VR Preview mode by commenting out this line in PlayLevel.cpp:</li> </ul> C++<pre><code>//TODO: ikrimae: Pipe disabling this based on a config variable. Not sure if this will crash the editor &amp; also it's a perf hit \n//RootWindow-&gt;Minimize();\n</code></pre> <p>Rename Oculus Home exe to get rid of it (C:\\Program Files (x86)\\Oculus\\Support\\oculus-home\\PC_OculusHome.exe)</p> <p>Get rid of purgatory UI (L,C,F):</p> <ul> <li>HKEY_LOCAL_MACHINE\\SOFTWARE\\Oculus VR, LLC\\LibOVR\\PurgatoryHudEnabled\", REG_DWORD or REG_SZ values of 0 or 1.</li> </ul> <p>How to detect if VR Headset is Vive or Oculus</p> C++<pre><code>if (GEngine-&gt;HMDDevice.IsValid() &amp;&amp; GEngine-&gt;HMDDevice-&gt;IsHMDEnabled()) \n        {  \n                if (GEngine-&gt;HMDDevice-&gt;GetHMDDeviceType() == EHMDDeviceType::DT_SteamVR)  \n                {  \n                        // BLAH!\n</code></pre> <p>Reference From https://forums.unrealengine.com/showthread.php?87727-How-to-Detect-if-using-Rift-or-Vive</p>"},{"location":"ue4guide/python-basics/oculus-stuff/tips-tricks-1/#useful-oculus-console-commands","title":"Useful Oculus console commands:","text":"Stereo/HMD Configuration stereo on | off | toggle Stereo mode on/off stereo hmd Turns stereo on and re-direct rendering to the Rift. hmd enable | disable Completely disables or re-enables HMD hmd pd 0.8 Sets pixel density in the center (default is 1.0). hmd sp 125 Overrides default screenpercentage for stereo mode. Deprecated, use 'hmd pd xxx' instead. hmd sp reset Resets to original r.ScreenPercentage value. Deprecated, use 'hmd pd 1' instead. hmd mirror [on|off|toggle] Enables/disables/toggles mirroring in a window (for \"Application Only\" mode only). hmd mirror 800x600 Sets mirror window dimension (for Direct mode only). hmd mirror mode 0|1|2 Sets mirror window mode: 0 - standard stereo distorted view, 1 - stereo undistorted view, 2 - mono viewa (a single eye) hmd qahead [on|off] Turns QueueAhead on / off or toggles it. Use 'hmd stats' to check its current state. stereo e=0.064 Eye distance (m). Use 'stereo reset' to restore original value. stereo w2m=100 Overrides default worldunits-to-meters scale. Use 'stereo reset' to restore original value. stereo ncp=10 fcp=10000 Overrides near clipping and/or far clipping planes for stereo rendering (in cm). Use 'stereo reset' to restore original value. stereo show Shows current ipd and head model offset stereo reset Resets stereo settings hmdpos on | off Enables/disables positional tracking. hmdpos reset Resets forward direction and 'zero' position hmdpos reset -37 Resets forward direction and apply yaw rotation (in degrees) and 'zero' position hmdpos show Shows status of positional tracking. hmdpos enforce Toggles head tracking even if not in stereo (for testing purposes). Stereo/HMD Internals hmdmag on | off Turns magnetometer on/off hmdmag show Shows state of magnetometer Misc hmd stats Shows HMD-related stats. hmd grid Toggles lens-centered grid. hmd setint PerfHudMode [0..4] Turns on [1..x] or off [0] builtin Performance HUD, modes 1-4. hmd setint DebugHudStereoMode [0..3] Turns on [1..x] or off [0] builtin debug stereo HUD, modes 1-3. hmddbg showcamera [off | toggle] Draws a tracking camera frustum in the game's world. hmddbg cubes [on | off | toggle] Draws a 'sea of cubes' over the existing scene. hmd updateongt on | off Turns on/off update-on-gamethread mode (for debugging). On by default. hmd updateonrt on | off Turns on/off update-on-renderthread mode for lower latency. On by default. hmdversion Prints Oculus SDK version used and Oculus Plugin info uncapfps Uncaps FPS (allows FPS &gt; 62); to restore cap - \"set Engine bSmoothFrameRate 1\"; t.maxfps could also be used for the same purpose."},{"location":"ue4guide/source-control/perforce-source-version-control-setup/","title":"Perforce Source Control Setup","text":""},{"location":"ue4guide/source-control/perforce-source-version-control-setup/#connect-to-epic-perforce-depotdownloading-epic-engine-source-code","title":"Connect To Epic Perforce Depot/Downloading Epic Engine Source Code","text":"<p>https://udn.unrealengine.com/docs/ue4/int/gettingstarted/downloadingunrealengine/index.html https://udn.unrealengine.com/docs/ue4/int/gettingstarted/downloadingunrealengine/perforce/index.html https://udn.unrealengine.com/docs/ue4/int/gettingstarted/downloadingunrealengine/perforce/setup/index.html https://udn.unrealengine.com/docs/ue4/int/gettingstarted/downloadingunrealengine/VPNSetup/index.html https://udn.unrealengine.com/docs/ue4/int/gettingstarted/downloadingunrealengine/perforce/Syncing/index.html https://udn.unrealengine.com/docs/ue4/int/gettingstarted/downloadingunrealengine/perforce/Integration/index.html</p>"},{"location":"ue4guide/source-control/perforce-source-version-control-setup/#assembla-performance-optimizations","title":"Assembla performance optimizations","text":"<p>https://articles.assembla.com/using-perforce/speed-up-your-perforce-repo-with-p4v</p> Bash<pre><code>p4 property -a -n P4IGNORE -v .p4ignore\np4 property -a -n P4V.Performance.ServerRefresh -v 60\np4 property -a -n filesys.bufsize -v 2M\np4 property -a -n net.tcpsize -v 2M\n</code></pre>"},{"location":"ue4guide/source-control/perforce-source-version-control-setup/#setting-up-perforce-source-control","title":"Setting Up Perforce Source Control","text":""},{"location":"ue4guide/source-control/perforce-source-version-control-setup/#make-sure-p4-service-is-running","title":"Make Sure P4 Service is running","text":"<ul> <li>Run as root:</li> </ul> Bash<pre><code>/volume1/KnL/Perforce/start.sh\n</code></pre>"},{"location":"ue4guide/source-control/perforce-source-version-control-setup/#set-up-ignore","title":"Set up ignore","text":"Bash<pre><code>p4 set P4IGNORE=.gitignore\n</code></pre>"},{"location":"ue4guide/source-control/perforce-source-version-control-setup/#setting-up-new-user","title":"Setting up new user","text":"<ul> <li> <p>Create access rights on our server</p> </li> <li> <p>Create account in P4Admin</p> </li> </ul>"},{"location":"ue4guide/source-control/perforce-source-version-control-setup/#disable-user-account-creation-for-anyone-but-you","title":"Disable user account creation for anyone but you","text":"<ul> <li> <p>Open terminal in perforce workspace directory from super user account</p> </li> <li> <p><code>p4 configure set dm.user.noautocreate=2</code></p> </li> </ul>"},{"location":"ue4guide/source-control/perforce-source-version-control-setup/#checking-out-a-project","title":"Checking out a project","text":"<ol> <li>Open p4v and enter credentials to connect</li> <li>Go to Connection &gt; New Workspace</li> <li>Give the workspace a reasonable name, lowercase, no spaces (for working on command line later). Workspaces are stored per user so two users should be able to use the same workspace name without a conflict.</li> <li>Put it in a folder near the root of the drive (I have mine in C:\\Perforce[ClientName][WorkspaceName]</li> <li>Right click on the folder in the depot that represents the project and choose \"Include Tree\". Right click on other projects and choose \"Exclude Tree\" (it doesn't work to just whitelist with \"include tree\", which seems silly -- is it configurable?).</li> <li>Check the box to automatically get latest revisions, otherwise you'll have to do it manually after the workspace is created.</li> </ol>"},{"location":"ue4guide/source-control/perforce-source-version-control-setup/#deleting-a-workspace","title":"Deleting a workspace","text":"<p>If you screw up you can delete a workspace. Go to Connection -&gt; Choose Workspace\u2026 which will show you a list of your workspaces. Then open the command prompt and type <code>p4 client -d [workspace-name]</code></p>"},{"location":"ue4guide/source-control/perforce-source-version-control-setup/#useful-commands","title":"Useful commands","text":"<ul> <li>(local workspace to depot) Fast Reconcile of local files that have been edited, added, deleted and with special characters in their name</li> </ul> <p><code>p4 reconcile -meadf UnrealEngine\\\\Engine\\\\Binaries...</code></p> <ul> <li>Show me files that were ignored:</li> </ul> <p><code>p4 reconcile -nI UnrealEngine\\\\Engine\\\\Binaries...</code></p> <ul> <li>Show me files that were ignored but need to be added</li> </ul> <p><code>p4 reconcile -naI UnrealEngine\\\\Engine\\\\Binaries...</code></p> <ul> <li>Why something was ignored:</li> </ul> <p><code>p4 ignores -v -i UnrealEngine\\\\Engine\\\\Binaries\\\\ThirdParty\\\\svn\\\\Mac\\\\lib\\\\apr.exp</code></p> <ul> <li> <p>See which files are out of sync from worktree <code>p4 status -I -mead UnrealEngine\\\\Engine\\\\...</code></p> </li> <li> <p>(depot to workspace) Force resync only deleted files (deletes files that are only available locally and not in depot):</p> </li> </ul> <p><code>p4 clean -I -ead UnrealEngine\\\\Engine\\\\Source\\\\Runtime...</code></p> <ul> <li> <p>Note: Using -m might skip files if you copied over stuff recently</p> </li> <li> <p>-a Added files: Find files in the workspace that have no corresponding files in the depot and delete them.</p> </li> <li> <p>-d Deleted files: Find those files in the depot that do not exist in your workspace and add them to the workspace.</p> </li> <li> <p>-e Edited files: Find files in the workspace that have been modified and restore them to the last file version that has synced from the depot.</p> </li> <li> <p>-m Use fast check (file timestamps) instead of slower CRC check</p> </li> <li> <p>(p4 clean =&gt; p4 reconcile -w)</p> </li> </ul> <p>Reference From https://www.perforce.com/perforce/doc.current/manuals/cmdref/Content/CmdRef/p4_clean.html?Highlight=clean</p> <ul> <li> <p>Revert another users files</p> </li> <li> <p>Force delete their shelved changelist <code>p4 shelve -df -c 8857</code> <code>p4 change -df 8857</code></p> </li> <li>Find their workspace by username <code>p4 opened -u janedoe</code></li> <li>Revert all files in janedoe-workspace's workspace <code>p4 revert -C janedoe-workspace //...</code></li> <li>Revert one file in janedoe-workspace's workspace <code>p4 revert -C janedoe-workspace //depot/www/dev/Jam.html</code></li> <li>Revert all files in janedoe-workspace workspace <code>p4 revert -c 1125 -C janedoe-workspace //...</code></li> </ul>"},{"location":"ue4guide/source-control/perforce-source-version-control-setup/#set-editor","title":"Set editor","text":"Bash<pre><code>p4 set P4Editor=\"C:/Program Files/Sublime Text 3/subl.exe --wait\"\n</code></pre>"},{"location":"ue4guide/source-control/perforce-source-version-control-setup/#tell-p4-that-local-files-are-already-synced","title":"Tell P4 That Local Files Are Already Synced","text":"<ol> <li> <p>Note the last changelist synced</p> </li> <li> <p>Copy/move the folder to the new location</p> </li> <li> <p>Update your workspace (either the root, or the depot mapping) to point at the new location</p> </li> <li> <p>Run p4 flush //depot/path/to/folder/...@&lt;last_changelist&gt;</p> </li> </ol> <p>The flush command tells the server that you have the files at the path specified, at the changelist specified. It's a synonym for p4 sync -k.</p> <p>Reference From https://stackoverflow.com/questions/7030296/how-do-i-move-a-perforce-workspace-folder</p>"},{"location":"ue4guide/source-control/perforce-source-version-control-setup/#create-fast-branch-stream","title":"Create fast branch stream","text":"<p>From the command line, starting from a workspace of //stream/parent, here's what you'd do to make a new task stream:</p> Bash<pre><code>p4 stream -t task -P //stream/parent //stream/mynewtask01\np4 populate -r -S //stream/mynewtask01\np4 client -s -S //stream/mynewtask01\np4 sync\n</code></pre> <p>Assuming you're starting with a synced workspace. If you're creating a brand new workspace for the new stream, then part of creating the new workspace is going to be syncing the files; I'd expect that to take about as long as the submit did since it's the same amount of data being transferred.</p> <p>Make sure when creating a new stream that you're not creating a new workspace. In the visual client there's an option to \"create a workspace\"; make sure to uncheck that box or it'll make a new workspace and then sync it, which is the part that'll take an hour</p> <p>From the command line, starting from a workspace of //stream/parent, here's what you'd do to make a new task stream:</p> <p>p4 stream -t task -P //stream/parent //stream/mynewtask01 p4 populate -r -S //stream/mynewtask01 p4 client -s -S //stream/mynewtask01 p4 sync</p> <p>The \"stream\" and \"client\" commands don't actually operate on any files, so they'll be really quick no matter what. The \"populate\" will branch all 10k files, but it does it on the back end without actually moving any content around, so it'll also be really quick (if you got up into the millions or billions it might take an appreciable amount of time depending on the server hardware, but 10k is nothing). The \"sync\" will be very quick if you were already synced to //stream/parent, because all the files are already there; again, it's just moving pointers around on the server side rather than transferring the file content.</p> <p>Reference From https://stackoverflow.com/questions/32697907/how-to-efficiently-work-with-a-task-stream</p>"},{"location":"ue4guide/source-control/perforce-source-version-control-setup/#merge-from-parent-stream","title":"Merge from parent stream","text":"<p>While we\u2019re working on features in //Ace/DEV, other changes are being submitted to //Ace/MAIN. Here\u2019s how we merge those changes into the //Ace/DEV branch:</p> Bash<pre><code>% p4 merge -S //Ace/DEV -r\n% p4 resolve\n% p4 submit -d \u201dMerged latest changes\u201d\n</code></pre> <p>Reference From https://www.perforce.com/blog/streams-tiny-tutorial</p>"},{"location":"ue4guide/source-control/perforce-source-version-control-setup/#push-stream-changes-back-to-mainline","title":"Push stream changes back to mainline","text":"<p>\u201cPromote\u201d is simply another way of saying \u201ccopy up after merging everything down\u201d. So let\u2019s make sure we\u2019ve merged everything down first:</p> Bash<pre><code>% p4 merge -S //Ace/DEV -r\nAll revisions already integrated.\n</code></pre> <p>Switch to main workspace:</p> Bash<pre><code>% p4 workspace -s -S //Ace/MAIN\n% p4 sync\n</code></pre> <p>We run p4 sync after switching the workspace, because both streams have files in them at this point. (You'll be happy to know that p4 sync will be smart enough to swap out only the files that aren't the same in both streams.)</p> <p>Finally, we copy content from the //Ace/DEV stream to its parent:</p> Bash<pre><code>% p4 -I copy -S //Ace/DEV -v\n% p4 submit -d \u201dHere\u2019s our new feature\u201d\n\n% p4 sync\n</code></pre> <p>Et voil\u00e0 -- our work in the //Ace/DEV stream has just been promoted to //Ace/MAIN.</p> <p>Reference From https://www.perforce.com/blog/streams-tiny-tutorial</p> <p>Set global property settings:</p> Bash<pre><code>p4 property -a -n ***name*** -v ***value***\n</code></pre> <p>Reference From https://community.perforce.com/s/article/1273</p>"},{"location":"ue4guide/source-control/perforce-source-version-control-setup/#setup-the-typemap","title":"Setup the typemap","text":"Bash<pre><code>p4 typemap\n</code></pre> JavaScript<pre><code># Perforce File Type Mapping Specifications.\n#\n# TypeMap: a list of filetype mappings; one per line.\n# Each line has two elements:\n#\n# Filetype: The filetype to use on 'p4 add'.\n#\n# Path: File pattern which will use this filetype.\n#\n# See 'p4 help typemap' for more information.\n\nTypeMap:\nbinary+w //depot/....exe\nbinary+w //depot/....dll\nbinary+w //depot/....lib\nbinary+w //depot/....app\nbinary+w //depot/....dylib\nbinary+w //depot/....stub\nbinary+w //depot/....ipa\nbinary //depot/....bmp\ntext //depot/....ini\ntext //depot/....config\ntext //depot/....cpp\ntext //depot/....h\ntext //depot/....c\ntext //depot/....cs\ntext //depot/....m\ntext //depot/....mm\ntext //depot/....py\nbinary+l //depot/....uasset\nbinary+l //depot/....umap\nbinary+l //depot/....upk\nbinary+l //depot/....udk\n</code></pre> <p>Reference From https://docs.unrealengine.com/latest/INT/Engine/Basics/SourceControl/Perforce/index.html</p>"},{"location":"ue4guide/source-control/perforce-source-version-control-setup/#set-the-typemap-on-existing-files","title":"Set the typemap on existing files","text":"<ul> <li>The P4 command</li> </ul> Bash<pre><code>p4 retype -t binary+w .\\....dll\n\n# alternate\np4 edit .\\....dll\np4 reopen -t binary+w .\\....dll\n</code></pre> <p>Reference From https://community.perforce.com/s/article/3114</p> <ul> <li>Or use the internal python utility scripts</li> </ul> Bash<pre><code>Utility/reconcile.py p4retypemap\n</code></pre>"},{"location":"ue4guide/source-control/perforce-source-version-control-setup/#diff","title":"Diff","text":"<p>You can diff Blueprints using built-in diffing tool</p> <ul> <li>https://www.unrealengine.com/blog/diffing-blueprints</li> </ul>"},{"location":"ue4guide/source-control/unreal-engine-git/","title":"Unreal Engine Git","text":""},{"location":"ue4guide/source-control/unreal-engine-git/#setting-up-engine-github-repo","title":"Setting Up Engine Github Repo","text":"<ul> <li>Add our own private github repo:</li> <li>Make sure to add an 'upstream' remote too:</li> </ul> Bash<pre><code>git remote add upstream https://github.com/EpicGames/UnrealEngine\ngit fetch upstream\ngit checkout release\n</code></pre> <ul> <li>Optimize git behavior Bash<pre><code>git config --global gc.auto 1024\n</code></pre></li> </ul>"},{"location":"ue4guide/source-control/unreal-engine-git/#updating-engine-version","title":"Updating Engine Version","text":"<p>Note: Examples are assuming 4.21.2-release tag is on the release branch and is the base, Bebylon is forked from that, and we're trying to update to 4.22.2-release (tag) on the upstream/release branch</p> <ol> <li>Sync from github into a clean directory so BBR subdirectory/game cruft or intermediate files aren't getting in the way</li> <li>Create a patch from the bebylon branch ranging from it's parent in the release branch to current Bash<pre><code>git checkout -b tmpsquash 4.21.2-release\ngit merge --squash Bebylon\ngit commit -a -m \"Squashed 4.21.2 to Bebylon commits\"\ngit format-patch 4.21.2-release\n\ngit checkout release\ngit pull upstream release:release\ngit branch -D tmpsquash\n</code></pre></li> <li>Create a new branch at the sync off point off of the new engine release branch (e.g. branch: release, tag: 4.22.2-release). Call it bebylon-{new engine version}-merge{oldversion} (eg bebylon-4.22.2-merged4.21.2) Bash<pre><code>git checkout -f -b bebylon-4.22.2-merged4.21.2 4.22.2-release\n</code></pre></li> <li>Apply patch to new said branch &amp; manually solve the conflicts. Push this up to github Bash<pre><code>git am --3way --signoff 0001-Squashed-4.21.2-to-Bebylon-commits.patch\n</code></pre></li> <li>Sync down into proper directory and actually solve the conflicts to get UE4 building &amp; compiling</li> <li>Merge bebylon into the new branch with merge override from the new branch. We want to merge Bebylon with bebylon-4.22.2-merged4.21.2 but not actually do any merging but instead take bebylon-4.22.2-merged4.21.2 as authoritative. Note: git merge -X theirs private won't work bc it will still apply a merge strategy when there is no conflict*    Use these commands to do that:</li> </ol> Bash<pre><code>git merge -s ours Bebylon\ngit checkout Bebylon\ngit merge bebylon-4.22.2-merged4.21.2\n</code></pre> <p>Reference From https://stackoverflow.com/questions/4624357/how-do-i-overwrite-rather-than-merge-a-branch-on-another-branch-in-git</p> <ol> <li>Create tag at merge point bebylon-4.22.2-merged4.21.2</li> <li>Now you can push Bebylon up to github    - Optional Rebase our private branch on top of the new UE4 repository. Make sure everyone has their stuff checked in before you rebase + force push the history rewrite. Otherwise the rest of the team will want to burn you alive after de-syncing their git tree http://stackoverflow.com/questions/14893399/rebase-feature-branch-onto-another-feature-branch</li> <li>Rerun Setup.bat to get the latest binary dependencies and reconcile</li> <li>Reconcile for perforce: Bash<pre><code>Utility/reconcile.py eng_upgrade_reconcile --uebinaries --uetemplatecontent --uecontent --uesrc --ueplugins --uedocs\n</code></pre></li> <li>Rationalize the worktree and remove outdated files<ul> <li>Preview the files that will be nuked <code>p4 status -I -mead UnrealEngine\\\\Engine\\\\...</code></li> <li>DANGEROUS &amp; DESTRUCTIVE Force the worktree to match (remove old files that are in the tree but need to be removed) <code>p4 clean -I -mead UnrealEngine\\\\Engine\\\\...</code></li> </ul> </li> <li>Run FullBuildClean on Jenkins to verify that the new build works as expected<ul> <li>This will sync the perforce tree</li> <li>Nuke all files locally that are not in the perforce tree</li> <li>Fully rebuild everything (engine, editor, cook, etc); this will take ~4-6 hours</li> </ul> </li> </ol>"},{"location":"ue4guide/source-control/unreal-engine-git/#building-the-source","title":"Building The Source","text":"<ol> <li>Download the source and unzip it to a folder, or [create a fork] and clone the repository. If you clone, don't forget to switch to the correct branch for this release! (The 'master' branch has unstable code, so you will want to make sure to choose a release branch.)</li> <li>You should now have an UnrealEngine folder on your computer. All of the source and dependencies will go into this folder. The folder name might have a branch suffix (such as UnrealEngine-4.1), but that's totally fine.</li> <li>Download the required dependencies files for the latest release: [Required_1of2.zip], [Required_2of2.zip].</li> <li>Unzip the dependencies into the UnrealEngine folder alongside the source. Be careful to make sure the folders are merged together correctly. On Mac, we recommend Option + dragging the unzipped files into the UnrealEngine folder, then selecting Keep Newer if prompted.</li> <li>Okay, platform stuff comes next. Depending on whether you are on Windows or Mac, follow one of the sections below:</li> </ol>"},{"location":"ue4guide/source-control/unreal-engine-git/#windows","title":"Windows","text":"<ol> <li>Be sure to have Visual Studio 2013 installed. You can use any desktop version of Visual Studio 2013, including the free version: Visual Studio 2013 Express for Windows Desktop</li> <li>Make sure you have June 2010 DirectX runtime installed. You don't need the SDK, just the runtime.</li> <li>You'll need project files in order to compile. In the UnrealEngine folder, double-click on**GenerateProjectFiles.bat**. It should take less than a minute to complete. On Windows 8, a warning from SmartScreen may appear. Click \"More info\", then \"Run anyway\" to continue.</li> <li>Load the project into Visual Studio by double-clicking on the UE4.sln file.</li> <li>It's time to compile the editor! In Visual Studio, make sure your solution configuration is set to**Development Editor**, and your solution platform is set to Win64. Right click on the UE4 target and select**Build**. It will take between 15 and 40 minutes to finish compiling, depending on your system specs.</li> <li>After compiling finishes, you can load the editor from Visual Studio by setting your startup project to UE4**and pressing **F5 to debug.</li> <li>One last thing. You'll want to setup your Windows shell so that you can interact with .uproject files. Find the file named UnrealVersionSelector-Win64-Shippping.exe in the *UnrealEngine/Engine/Binaries/Win64/*folder and run it. Now, you'll be able to double-click .uproject files to load the project, or right click them to quickly update Visual Studio files.</li> </ol> <p>Reference From https://github.com/EpicGames/UnrealEngine</p>"},{"location":"ue4guide/source-control/unreal-engine-git/#visual-studio-customization","title":"Visual Studio Customization","text":"<ul> <li>Generate VS2013 project files by running GenerateProjectFiles.bat</li> <li>Command line parameters for Generate Project Files</li> <li>Customize Toolbar to showcase UE4 Build Profiles/Targets: http://youtu.be/usjlNHPn-jo?t=6m46s</li> <li>Install the UnrealVS extension for UnrealVS Toolbar: <code>UnrealEngine/Engine/Extras/UnrealVS/VS2013</code></li> <li>Install Visual Studio Unreal Extensions: <code>/Engine/Extras/VisualStudioDebugging/InstallVisualizers.bat</code></li> <li>Run the UnrealVersion Selector: <code>UnrealEngine/Engine/Binaries/Win64/UnrealVersionSelector-Win64-Shipping.exe</code></li> <li>Configure Visual Studio for Unreal Project: https://docs.unrealengine.com/latest/INT/Programming/Development/VisualStudioSetup/index.html</li> </ul>"},{"location":"ue4guide/source-control/unreal-engine-git/#build-configuration","title":"Build Configuration","text":"<p>Unreal Engine 4 and the UnrealBuildTool use different build configurations to determine how the engine is compiled. Which configuration you use will be determined by the purposes of the build you want to create.</p> <p>Each build configuration contains two keywords. The first of these indicates the state of the engine and your game project. For instance, if you compile using a Debug configuration, you will be able to debug your game's code. The second keyword indicates the target you are building for. If you would like to open a project in Rocket, you need to build with the Editor target keyword, but if you are building an executable version of your game, you would need to build using the empty target keyword.</p> Build Configuration: State Description Debug This configuration contains symbols for debugging. If you compile your project using the Debug configuration and want to open the project with the Rocket Editor, you must use the \"-debug\" flag in order to see your code changes reflected in your project. Development This configuration is equivalent to Release. In order to see your project's code changes reflected when you open the project later in the Rocket Editor, you must compile in the Development configuration. Shipping This is the configuration for optimal performance and shipping your game. This configuration strips out console commands, stats, and profiling tools. Build Configuration: Target Description [empty] This configuration builds a stand-alone executable version of your project, but requires cooked content specific to the platform. Editor To be able to open a project in Unreal Editor and see all code changes reflected, the project must be built in an Editor configuration. Uncooked Projects built using configurations that have an Uncooked type should be opened in Unreal Editor with the \"-game\" flag. This runs your game with uncooked content, in a new window, and is equivalent to Play in &gt; New Window at Default Player Start in the editor."},{"location":"ue4guide/source-control/unreal-engine-git/#generating-project-files","title":"Generating Project Files","text":"<p>Not all configurations will appear by default. Edit the GenerateProjectFiles.bat file in the main UE4 directory to generate the project files for additional configurations as needed.</p> <p>Unreal Engine 4 and the UnrealBuildTool use different build configurations to determine how the engine is compiled. Which configuration you use will be determined by the purposes of the build you want to create.</p> <p>The available configurations:</p> Build Configuration Description Debug This configuration builds both engine and game code in debug configuration. DebugGame This configuration builds the engine as optimized, but leaves the game code debuggable. This configuration is ideal for debugging only game modules. Development This configuration is equivalent to Release. Both engine and game code will be built in this configuration. Shipping This is the configuration for optimal performance and shipping your game. This configuration strips out console commands, stats, and profiling tools. Test This configuration is the Shipping configuration, but with some console commands, stats, and profiling tools enabled. <p>Reference From: https://docs.unrealengine.com/latest/INT/Programming/Development/BuildingUnrealEngine/index.html</p>"},{"location":"ue4guide/stereo-capture-plugin/referencesdocumentation/","title":"Referencesdocumentation","text":"<p>http://mathproofs.blogspot.com/2005/07/mapping-cube-to-sphere.html</p> <p>http://mathproofs.blogspot.com/2005/07/mapping-square-to-circle.html</p> <p>http://paulbourke.net/geometry/transformationprojection</p> <p>https://github.com/rlk/envtools/blob/master/envremap.c</p> <p>http://csc.lsu.edu/~kooima/articles/genperspective/index.html</p> <p>http://mathproofs.blogspot.com/2005/07/mapping-cube-to-sphere.html</p> <p>http://paulbourke.net/geometry/transformationprojection</p> <p>http://en.wikipedia.org/wiki/Spherical_coordinate_system</p> <p>http://math.stackexchange.com/questions/131735/surface-element-in-spherical-coordinates</p> <p>http://en.wikipedia.org/wiki/Surface_integral</p> <p>https://en.wikipedia.org/wiki/Field_of_view_in_video_games#Field_of_view_calculations</p> <p>http://www.ittc.ku.edu/~jstiles/220/handouts/The%20Differential%20Surface%20Vector%20for%20Coordinate%20Systems.pdf</p> <p>http://www.math.unl.edu/~scohn1/EngRevf08/surfaceint.pdf</p> <p>https://kahrbjy.files.wordpress.com/2012/08/ee207notes3.pdf</p> <p>https://www.physicsforums.com/threads/surface-area-of-a-sphere-in-spherical-coordinates-concentric-rings.676927</p> <p>http://mathworld.wolfram.com/SolidAngle.html</p> <p>http://en.wikipedia.org/wiki/Solid_angle</p> <p>Sampling-Efficient Mapping of Spherical Images http://mentallandscape.com/Papers_01spheremap.pdf</p> <p>http://blog.xyzw.us/2015/01/the-trouble-with-wide-fov-rendering.html</p> <p>https://twitter.com/casseveritt/status/549785345777074176</p> <p>http://tutorial.math.lamar.edu/Classes/CalcII/ParaTangent.aspx</p> <p>http://www.ltcconline.net/greenl/courses/107/PolarParam/tanlin.htm</p> <p>http://www.nvidia.com/object/cube_map_ogl_tutorial.html</p> <p>http://antongerdelan.net/opengl/cubemaps.html</p> <p>http://www.learnopengl.com/#!Advanced-OpenGL/Cubemaps</p> <p>http://www.euclideanspace.com/maths/geometry/elements/plane/lineOnPlane</p> <p>http://www.cs.princeton.edu/courses/archive/fall2000/cs426/lectures/raycast/sld017.htm</p> <p>https://www.opengl.org/discussion_boards/showthread.php/168009-How-to-get-the-horizontal-fov</p> <p>https://en.wikipedia.org/wiki/Field_of_view_in_video_games#Field_of_view_calculations</p> <p>https://wiki.unrealengine.com/Dynamic_Textures</p> <p>https://forums.unrealengine.com/showthread.php?50349-Setting-Up-a-Dynamic-Texture</p> <p>https://forums.unrealengine.com/showthread.php?30345-Tutorial-Creating-and-Using-Delegates-C-and-Accessing-them-in-Blueprints</p> <p>http://www.gamerendering.com/2008/10/05/bilinear-interpolation</p> <p>http://en.wikipedia.org/wiki/Spherical_coordinate_system</p> <p>https://www.google.com/search?hl=en&amp;biw=2560&amp;bih=1355&amp;q=sample+cube+map+without+cubemap&amp;oq=sample+cube+map+without+cubemap&amp;gs_l=serp.3...4001.9392.0.9640.35.34.0.1.1.0.140.3010.26j8.34.0.msedr...0...1c.1.61.serp..12.23.1924.IdL3CCbmj9A</p> <p>http://wiki.unity3d.com/index.php?title=3d_Math_functions</p>"},{"location":"ue4guide/stereo-capture-plugin/stereo-capture-plugin/","title":"Stereo capture plugin","text":"<p>Things to note:</p> <ul> <li> <p>Launch the game with this command: Insurgent.exe -fps=60 -usefixedtimestep -notexturestreaming -log</p> </li> <li> <p>Make sure DefaultEngine.ini config has these settings:</p> </li> </ul> <p>[SystemSettingsEditor]</p> <p>TEXTUREGROUP_RenderTarget=(MinLODSize=1,MaxLODSize=4096,LODBias=0)</p> <p>[SystemSettings]</p> <p>TEXTUREGROUP_RenderTarget=(MinLODSize=1,MaxLODSize=4096,LODBias=0)</p> <p>r.SceneRenderTargetResizeMethod=2</p> <p>//NOTE: ikrimae: Ensure that the main gameview is &gt; CaptureWidth x CaptureHeight. Bug in UE4 that won't re-alloc scene render targets to the correct size //               when the scenecapture component &gt; current window render target. https://answers.unrealengine.com/questions/80531/scene-capture-2d-max-resolution.html</p> <ul> <li>Launch with console command: SP.PanoramicMovie 0 [EndFrame]</li> </ul> <p></p>"},{"location":"ue4guide/ue4-technical-crash-course/old-intro-to-unreal-engine-4/","title":"Old intro to unreal engine 4","text":"<p>So if you've been living underneath a rock, Epic decided to open source their entire toolset and engine while offering it for the low price of $20 a user/month + 5% gross fee. Our reaction? That's UNREAL :)</p> <p>I'm spending the next week doing a self-directed crash course. Here are all my notes as we switch over from Unity to Unreal.</p>"},{"location":"ue4guide/ue4-technical-crash-course/old-intro-to-unreal-engine-4/#general-resource-links","title":"General Resource Links:","text":"<p>https://docs.unrealengine.com/latest/INT</p> <p>https://wiki.unrealengine.com/Main_Page</p> <p>https://answers.unrealengine.com</p> <p>https://forums.unrealengine.com</p> <p>All video tutorials: https://www.youtube.com/playlist?list=PLZlv_N0_O1gaCL2XjKluO7N2Pmmw9pvhE</p> <p>https://www.unrealengine.com/blog?category=Tutorials&amp;offset=5&amp;max=5</p> <p>https://wiki.unrealengine.com/Category:Tutorials</p> <p>https://wiki.unrealengine.com/Category:Code</p>"},{"location":"ue4guide/ue4-technical-crash-course/old-intro-to-unreal-engine-4/#oculus-rift","title":"Oculus Rift:","text":"<p>https://wiki.unrealengine.com/Oculus_Rift</p> <p>https://wiki.unrealengine.com/Oculus_Rift_Blueprint</p> <p>https://wiki.unrealengine.com/Oculus_Rift_Separate_View</p> <p>Compiling the source code of the engine. This 10 minute video will walk you through everything:</p> <p>https://www.youtube.com/watch?v=usjlNHPn-jo&amp;feature=youtu.be</p> <p>https://forums.unrealengine.com/showthread.php?1870-Unreal-Engine-4-Community-Tutorial-Youtube-Catalog</p> <p>Projects = Self-contained Game.</p> <p>Levels = Scenes</p> <p>Actors = Any object that is placable in a scene (it's a base class that has an xform on it)</p>"},{"location":"ue4guide/ue4-technical-crash-course/old-intro-to-unreal-engine-4/#editor","title":"Editor:","text":"<p>LMB: fly cam</p> <p>RMB: Rotate</p> <p>LMB+RMB: Pan</p> <p>Ctrl+Alt+Left Drag: Selection Marquee in viewports</p> <p>Ctrl+number: bookmark view</p> <p>Ctrl+alt: tooltip</p> <p>RMB+ WASD: WASD style controls</p> <ul> <li>C,V: Increase/Decrease Zoom</li> </ul> <p>Alt+Mouse: Maya control scheme</p> <p>ALT+MMB + Drag (on Pivot): Move Pivot around</p> <p>F: Focus on object</p> <p>`: Switch between local &amp; world coordinates</p> <p>Ctrl+P: Open an asset picker from anywhere</p> <p>Ctrl+E: Edit a selected asset</p> <p>Ctrl+B: Select asset in content browser</p> <p>ALT+Number: Different viewmodes</p> <ol> <li> <p>Lightmap Density: Green is ideal</p> </li> <li> <p>Wireframe</p> </li> <li> <p>Unlit</p> </li> <li> <p>Lit</p> </li> <li> <p>Detail Lighting - Scene rendered with neutral material using normal maps of original material. Used to show interaction between normal maps + lighting</p> </li> <li> <p>Lighting Only (same as Detail but w/o normal maps)</p> </li> <li> <p>Light Complexity - Number of non-static lights affecting an object. Note: Only up to 4 lights will cast dynamic shadows</p> </li> <li> <p>Shader Complexity - Pink &amp; White are extremely expensive</p> </li> </ol> <ul> <li> <p>Menu Only - Stationary Light Overlap</p> </li> <li> <p>Menu Only - Reflections</p> </li> <li> <p>Menu Only - Base Color</p> </li> <li> <p>Menu Only - Diffuse (Base + AO)</p> </li> <li> <p>Menu Only - Lighting Model</p> </li> <li> <p>Menu Only - Material AO</p> </li> <li> <p>Menu Only - Metallic</p> </li> <li> <p>Menu Only - Opacity</p> </li> <li> <p>Menu Only - Roughness</p> </li> <li> <p>Menu Only - Scene Color</p> </li> <li> <p>Menu Only - Scene Depth</p> </li> <li> <p>Menu Only - Specular Color (combination of Base Color + Metallicness)</p> </li> <li> <p>Menu Only - Specular (remember, this mainly relates to IOR for materials)</p> </li> <li> <p>Menu Only - Subsurface Color</p> </li> <li> <p>Menu Only - World Normal</p> </li> <li> <p>Menu Only - Ambient Occlusion</p> </li> </ul> <p>F11: Immersive Mode</p> <p>Ctrl+R: Toggle Real Time Playback</p> <p>G: Game mode, render only what you can see in game</p> <p>V (while using transform tools): Enables vertex snapping</p> <p>ALT+V+MMB: Enables vertex snapping on pivot adjustment</p> <p>End: Drops selected actor to nearest object below it</p> <p>Ctrl+End: Aligns selected object to grid</p> <p>MMB while in WASD mode: Affect Camera multiplier speed</p> <p>Drag, then Shift: Move the camera in the direction of the object you're dragging</p> <p>Lock Actor To Viewport: Can use camera to position and orient objects through camera controls</p> <p>Viewport has default Eye-adaptation.</p> <p>Material Editor:</p> <p>Hold L + Drag: In Material editor, moves the light around</p> <p>Drag Select Nodes + C: Create Comment box</p>"},{"location":"ue4guide/ue4-technical-crash-course/old-intro-to-unreal-engine-4/#source-control","title":"Source Control:","text":"<p>Assets are stored in .uasset files which should contain a single asset. Each asset reference uses directory styled path to uniquely identify any asset in the game</p> <p>FBX Workflow:</p> <p>https://docs.unrealengine.com/latest/INT/Engine/Content/FBX/BestPractices/index.html</p> <p>Can layer different materials together</p>"},{"location":"ue4guide/ue4-technical-crash-course/old-intro-to-unreal-engine-4/#shading-model","title":"Shading Model:","text":"<p>(source: http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf)</p> <ul> <li> <p>Diffuse is energy conserving lambert</p> </li> <li> <p>Micro-facet Cook-Torrence for specular</p> </li> <li> <p>GGX for Normal Distribution Function \\(a=\\mathrm{Roughnesss}^{2}\\)</p> </li> <li> <p>Specular - IOR used to determine incident specular (combined with Fresnel). Leave at default of 0.5. Not used for metallic surfaces</p> </li> <li> <p>If you really want to tweak or mute the Specular, it's generally because of small-scale microshadowing from cracks. Use a cavity map (AO with short trace distance). Modify shader as following:</p> <p>BaseColor = Cavity*OldBaseColor, Specular = Cavity*oldSpecular.</p> </li> </ul> Material BaseColor Intensity Charcoal 0.02 Fresh Asphalt 0.02 Worn Asphalt 0.08 Bare Soil 0.13 Green Grass 0.21 Desert Sand 0.36 Fresh Concrete 0.51 Ocean Ice 0.56 Fresh Snow 0.81 <p>Measured BaseColors for metals:</p> Material BaseColor (R, G, B) Iron (0.560, 0.570, 0.580) Silver (0.972, 0.960, 0.915) Aluminum (0.913, 0.921, 0.925) Gold (1.000, 0.766, 0.336) Copper (0.955, 0.637, 0.538) Chromium (0.550, 0.556, 0.554) Nickel (0.660, 0.609, 0.526) Titanium (0.542, 0.497, 0.449) Cobalt (0.662, 0.655, 0.634) Platinum (0.672, 0.637, 0.585) <p>Measured Specular Values:</p> Material Specular Glass 0.5 Plastic 0.5 Quartz 0.570 Ice 0.224 Water 0.255 Milk 0.277 Skin 0.35 <ul> <li>Supports material instancing</li> </ul> <p>Reference From https://docs.unrealengine.com/latest/INT/Engine/Rendering/Materials/PhysicallyBased/index.html</p>"},{"location":"ue4guide/ue4-technical-crash-course/old-intro-to-unreal-engine-4/#blue-print","title":"Blue Print:","text":"<ul> <li> <p>Construction Scripts: Run during level design</p> </li> <li> <p>Event Graph: Run during game execution</p> </li> <li> <p>The UI is very context sensitive. What you are selecting will affect context menus when you right click to create/connect nodes</p> </li> <li> <p>BluePrints can communicate with each other through Events (these are more like class member functions) &amp; Event Dispatchers (true events)</p> </li> </ul> <p>Calling the Event Dispatcher will have no effect if there are no events bound to it. Consider that each Event Dispatcher has a list of events associated with it. The way to add an event to this list is by using a Bind Event node, and the way to remove an event from this list is by using an Unbind Event node. It is also possible to unbind all of the events currently bound to an Event Dispatcher with an Unbind All Events node.</p> <p>Each event can be bound only once, even if the Bind Event node is executed multiple times. Also, events in the Class Blueprint and the Level Blueprint are both added to the same event list, so an Unbind All Events node will unbind events in both the Class Blueprint and the Level Blueprint.</p> <ul> <li> <p>An Unbind All Events node executed in the Class Blueprint will unbind events in both the Class Blueprint and the Level Blueprint for all instances of the class.</p> </li> <li> <p>An Unbind All Events node executed in the Level Blueprint will unbind events in both the Class Blueprint and the Level Blueprint, but just for the **Target**supplied.</p> </li> <li> <p>Blueprints can implement interfaces (same concept as programming language interfaces). Interface functions are implemented using Events in BluePrint</p> </li> <li> <p>QUESTION: What's the difference between Events &amp; Functions?</p> </li> <li> <p>Game mode defines the rules of the game and the default classes for Pawns, Player Controllers, etc</p> </li> </ul> <p>In Level Blueprints</p> <p>A special type of Event Dispatcher event can be set up in the Level Blueprint, and it is the one case where an event is automatically bound to the Event Dispatcher. These events are created with the same steps as the default events such as OnClicked or OnOverlap events. The [Level Blueprint documentation]provides a walkthrough for this process.</p> <p>These particular events are unique, and are automatically bound at the start of gameplay. As a result, an Unbind All node executed at any point will unbind these events as well. It is possible to rebind them, however, by wiring their delegate pins to Bind Event nodes that are executed at other points in gameplay.</p> <p>Reference From https://docs.unrealengine.com/latest/INT/Engine/Blueprints/UserGuide/EventDispatcher/CreatingEvents/index.html</p> <p>Reference From https://docs.unrealengine.com/latest/INT/Engine/Blueprints/UserGuide/EventDispatcher/BindingAndUnbinding/index.html</p>"},{"location":"ue4guide/ue4-technical-crash-course/old-intro-to-unreal-engine-4/#cascade","title":"Cascade","text":"<p>Emitters, Particle Systems, and Emitter Actors</p> <p>As you work with Cascade to create your own particle effects, it is important to keep in mind how each one of the objects relate to one another. In this document, we have already discussed the concept of modules, but they only make up one component of a complete particle effect. All told, the components of a particle system are modules, emitters, particle systems, and emitter actors. A solid way to remember how they relate is like so:</p> <ul> <li> <p>Modules define particle behavior and are placed within...</p> </li> <li> <p>Emitters, which are used to emit a specific type of particle for an effect, and any number of which can be placed within a...</p> </li> <li> <p>Particle System, which is an asset available in the Content Browser, and which can then in turn be referenced by an...</p> </li> <li> <p>Emitter Actor, which is a placeable object that exists within your level, controlling where and how the particles are used in your scene.</p> </li> </ul> <p>Reference From https://docs.unrealengine.com/latest/INT/Engine/Rendering/ParticleSystems/Overview/index.html</p> <p>Particle Calculation</p> <p>It is important to be aware of calculation order when working with particle systems. Each column in the Cascade emitter list area represents another emitter, and each block in the column represents another module. Calculation order runs like so:</p> <ul> <li> <p>Emitters are calculated from left to right in the emitter list.</p> </li> <li> <p>Modules are calculated from top to bottom in the stack.</p> </li> </ul> <p>Reference From https://docs.unrealengine.com/latest/INT/Engine/Rendering/ParticleSystems/Overview/index.html</p>"},{"location":"ue4guide/ue4-technical-crash-course/old-intro-to-unreal-engine-4/#lighting","title":"Lighting","text":"<ul> <li> <p>Static Lights: Only affects static geometry that never moves and only contributes to lightmap bakes</p> </li> <li> <p>Stationary Lights: Affects dynamic objects as well as contributes to the precomputed lightmap bakes.</p> </li> <li> <p>Movable: Completely dynamic lights and only affects dynamic objects</p> </li> </ul>"},{"location":"ue4guide/ue4-technical-crash-course/ue4-technical-crash-course/","title":"Overview Of Engine","text":"<ul> <li>https://docs.unrealengine.com/latest/INT/Programming/Introduction/index.html</li> <li>GDC Europe 2014: Unreal Engine 4 for Programmers - Lessons Learned &amp; Things to Come:</li> </ul>"},{"location":"ue4guide/ue4-technical-crash-course/ue4-technical-crash-course/#deep-dive-technical-course","title":"Deep Dive Technical Course","text":"<ul> <li>http://nikoladimitroff.github.io/Game-Engine-Architecture</li> <li>https://www.blaenkdenum.com/notes/unreal-engine</li> <li>https://jip.dev/notes/unreal-engine/</li> <li>https://github.com/jbtronics/UE4-Cheatsheet</li> </ul>"},{"location":"ue4guide/ue4-technical-crash-course/ue4-technical-crash-course/#modules","title":"Modules","text":"<p>Types:</p> <ul> <li>Developer: Used by Editor &amp; Programs, but not games</li> <li>Editor: Used by UnrealEditor Only</li> <li>Runtime: Used by Editor, Games, &amp; Programs</li> <li>ThirdParty: External third party libs/code</li> <li>Plugins: Extensions for Editor and/or Games. Should not have dependencies on other plugins</li> <li>Programs: Standalone apps &amp; tools</li> </ul> <p>Important Modules:</p> <ul> <li>Core: fundamental types &amp; functions</li> <li>CoreUObject: Implements Uobject reflection system</li> <li>Engine: Game &amp; engine framework classes</li> <li>OnlineSubsystem: Online &amp; social networking features</li> <li>Slate: Widget library &amp; high level UI functionality</li> </ul> <p>Modules for Advanced Functionality:</p> <ul> <li>DesktopPlatform: Modules for OS function calls (e.g. filesystem, etc)</li> <li>DetailCustomization: Editor Detail panel customizations</li> <li>Launch: Main loop classes &amp; functions</li> <li>Messaging: Message passing subsystem</li> <li>Sockets: Network socket implementation</li> <li>Settings: Editor &amp; Project settings API</li> <li>SlateCore: Low level UI functionality</li> <li>TargetPlatform: Platform abstraction layer</li> <li>UMG: WYSIWYG UI system (Unreal Motion Graphics)</li> <li>UnrealEd: Unreal Editor main frame &amp; features</li> <li>Analytics: Analytics functionality</li> <li>AssetRegistry: Asset database functionality for UnrealEd</li> <li>JsonUtilities &amp; XmlParser: Parsing json/xml files</li> </ul>"},{"location":"ue4guide/ue4-technical-crash-course/ue4-technical-crash-course/#rendering","title":"Rendering","text":"<ul> <li>How Unreal Renders A Frame: https://interplayoflight.wordpress.com/2017/10/25/how-unreal-renders-a-frame</li> <li>UE4 Rendering Overview: https://medium.com/@lordned/unreal-engine-4-rendering-overview-part-1-c47f2da65346</li> <li>http://gregory-igehy.hatenadiary.com/entry/2018/02/24/023251</li> <li>http://gregory-igehy.hatenadiary.com/entry/2017/12/28/002645</li> </ul>"},{"location":"ue4guide/ue4-technical-crash-course/ue4-technical-crash-course/#python","title":"Python","text":""},{"location":"ue4guide/ue4-technical-crash-course/ue4-technical-crash-course/#fast-ramp-up-to-ue4python","title":"Fast ramp up to UE4Python","text":"<p>These documents are great starting points which are located in the UE4 Python Repo</p> <ul> <li>README.MD</li> <li>UOBJECT_API.md</li> <li>SnippetsForStaticAndSkeletalMeshes.md</li> <li>Examples\\*.md</li> </ul>"},{"location":"ue4guide/ue4-technical-crash-course/ue4-technical-crash-course/#how-to-find-stuff","title":"How to find stuff","text":"<ul> <li>Look at the *Snippets.py files</li> <li>Use Find all in BuildAutomation vscode project</li> <li>Use Visual assist symbol search \"py_ ...\"</li> </ul>"},{"location":"ue4guide/ue4-technical-crash-course/ue4-technical-crash-course/#useful-python-starting-points","title":"Useful Python Starting Points","text":"<ul> <li>https://www.toptal.com/python/top-10-mistakes-that-python-programmers-make</li> <li>http://book.pythontips.com/en/latest/index.html</li> <li>http://ozkatz.github.io/improving-your-python-productivity.html</li> <li>https://treyhunner.com/2019/05/python-builtins-worth-learning</li> </ul>"},{"location":"ue4guide/wip/architectural-overview/","title":"Architectural overview","text":"<p>https://docs.unrealengine.com/latest/INT/Programming/Gameplay/Framework/index.html</p> <p>https://docs.unrealengine.com/latest/INT/Programming/Gameplay/Framework/QuickReference/index.html</p> <p>Engine conceptually divided into 3 Different categories:</p> <ol> <li> <p>Gametype, which creates</p> </li> <li> <p>Player, which creates</p> </li> <li> <p>Interface</p> </li> </ol> <p>Using hypothetical example of a game where rabbit races snail,</p> <ul> <li> <p>GameMode defines game rules and spawns players (e.g. animal that crosses finish line first wins)</p> </li> <li> <p>PlayerController sets up player (human or AI)</p> </li> <li> <p>Controllers sets rules for Pawn behavior</p> </li> <li> <p>Possesses Pawn, physical representation of player</p> <ul> <li> <p>Characters are a special subclass of Pawns with built-in functionality for running &amp; jumping</p> </li> <li> <p>Can extend Pawn class for special behavior (e.g. Snail Pawn)</p> </li> </ul> </li> <li> <p>PlayerCameraManager defines the camera view for the player controller</p> </li> </ul>"},{"location":"ue4guide/wip/architectural-overview/#camera","title":"Camera","text":"<p>Camera Component defines all camera properties. CameraActor is just an actor so you can drop camera into scene</p> <ul> <li>Can visualize Camera Frustum</li> </ul> <p>PlayerCameraManager controls changing cameras.</p> <ul> <li> <p>Queries ViewTarget for determining camera viewport</p> </li> <li> <p>Generally don't need to subclass it</p> </li> <li> <p>If it is necessary to subclass the PlayerCameraManager, and you are doing so with Blueprints instead of C++, the BlueprintUpdateCamera function exists to allow custom camera implementations. When using this function, return true to use the returned values, or return false to ignore them.</p> </li> </ul> <p>Reference From: https://docs.unrealengine.com/latest/INT/Programming/Gameplay/Framework/Camera/index.html</p>"},{"location":"ue4guide/wip/architectural-overview/#viewtarget","title":"ViewTarget","text":"<p>The ViewTarget struct, defined in PlayerCameraManager, is responsible for providing the PlayerCameraManager with an ideal Point of View (POV). ViewTarget contains information on the target Actor, the Controller of the target Actor (for non-locally controlled Pawns), and the PlayerState, which is used to follow the same player through Pawn transitions and other changes while spectating. The camera information passed to PlayerCameraManager through the POV property is in the form of a FMinimalViewInfo struct. This struct contains the basic camera information from a CameraComponent, including the location, rotation, projection mode (Perspective or Orthographic), FOV, orthographic width, aspect ratio, and post process effects. Providing the PlayerCameraManager with access to these values allows the PlayerCameraManager to blend between two camera modes during its camera management.</p> <p>Reference From: https://docs.unrealengine.com/latest/INT/Programming/Gameplay/Framework/Camera/index.html</p>"},{"location":"ue4guide/wip/architectural-overview/#camera-responsibility-chain","title":"Camera Responsibility Chain","text":"<p>Game-specific camera behavior can be provided at any point along the camera \"responsibility chain\", which flows from top to bottom through the following classes before passing to ALocalPlayer and ending with rendering, scene view, and other related systems:</p>"},{"location":"ue4guide/wip/architectural-overview/#cameracomponent","title":"CameraComponent","text":"<p>A CameraComponent will provide information about the camera's properties if the ViewTarget is a CameraActor or an Actor that contains a CameraComponent and has bFindCameraComponentWhenViewTarget set to true. A related property that can be set for any Pawn isbTakeCameraControlWhenPossessed, where the Pawn will automatically become the ViewTarget upon possession by the PlayerController.</p>"},{"location":"ue4guide/wip/architectural-overview/#actor-or-playercontroller","title":"Actor or PlayerController","text":"<p>Both PlayerControllers and Actors contain a CalcCamera function. An Actor's CalcCamera function returns the camera view of the first CameraComponent in the Actor, if bFindCameraComponentWhenViewTarget is true and a CameraComponent is present.</p> <p>Otherwise, it gets the Actor's location and rotation. In PlayerController, the CalcCamera function behaves similarly to this second case, returning the location of the possessed Pawn if it exists, and the control rotation of the PlayerController.</p>"},{"location":"ue4guide/wip/architectural-overview/#playercameramanager","title":"PlayerCameraManager","text":"<p>The UpdateViewTarget function in PlayerCameraManager queries the ViewTarget and returns that ViewTarget's Point Of View. This function is also what calls BlueprintUpdateCamera if you have subclassed APlayerCameraManager and are not looking through a CameraComponent.</p> <p>https://docs.unrealengine.com/latest/INT/Programming/Gameplay/Framework/Camera/index.html</p>"},{"location":"ue4guide/wip/architectural-overview/#engine-game-flow","title":"Engine Game Flow","text":"<p>https://docs.unrealengine.com/latest/INT/Gameplay/Framework/GameFlow/index.html</p>"},{"location":"ue4guide/wip/architectural-overview/#fast-architectural-summary","title":"Fast Architectural Summary","text":"<p>A game is made up of a GameMode and GameState. Human players joining the game are associated with PlayerControllers. These PlayerControllers allow players to possess pawns in the game so they can have physical representations in the level. PlayerControllers also give players input controls, a heads-up display, or HUD, and a PlayerCameraManager for handling camera views.</p> <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/UnrealArchitecture/index.html</p> <p>UObject: Base class for all UE4 objects</p> <ul> <li> <p>Actor: Base spawnable class</p> </li> <li> <p>Pawns:</p> </li> <li>Can be possessed by Controller.</li> <li> <p>Pawn not assumed to be humanoid</p> </li> <li> <p>weee</p> </li> <li> <p>ooo</p> <ul> <li>kkk</li> </ul> </li> <li> <p>Character:</p> </li> <li>Humanoid specialized Pawn</li> <li>CapsuleComponent for collision detection</li> <li> <p>CharacterMovement for movement * Replicates movement smoothly across network</p> </li> <li> <p>Controller: Actors that possesses/control pawns</p> </li> <li> <p>PlayerController: Interface between Pawn &amp; human</p> </li> <li> <p>AI: Computer driven controller</p> </li> <li> <p>HUD: Class responsible for HUD</p> </li> <li> <p>CameraActor: Wraps Camera Component so you can drop it into the scene</p> </li> <li> <p>GameMode: Defines rules of the game</p> </li> <li> <p>GameState: State of the game (# of players connected, chess piece locations in game, etc)</p> </li> <li> <p>PlayerState: State of each player (name of player, whether they're carrying flag, etc)</p> </li> </ul>"},{"location":"ue4guide/wip/assets-naming-convention/","title":"Assets naming convention","text":"<p>UPDATED VERSION HERE: https://github.com/Allar/ue4-style-guide</p> <p>Reference From http://www.tomlooman.com/ue4-naming-convention</p>"},{"location":"ue4guide/wip/assets-naming-convention/#unreal-engine-4-naming-convention","title":"Unreal Engine 4: Naming Convention","text":"<p>The goal of this document is to share our internal naming conventions with the community to give everyone something to start out with. Using and getting comfortable with  a strict naming convention is essential before your projects grows beyond a few dozen files.</p> <p>*Disclaimer: This document is a constant work in progress, more asset types are added over time as we start using them with our game projects. If you have suggestions or comments you can leave them at the bottom of this page. Feedback is appreciated to improve this page.*</p> <p>Last Revision: July 15, 2014</p> <p>Contents hide</p> <ul> <li> <p>1 General Naming</p> </li> <li> <p>2 Prefixes</p> </li> <li> <p>3 Suffixes</p> </li> <li> <p>3.1 Textures</p> </li> <li> <p>3.2 Animation</p> </li> <li> <p>4 Texture Masks</p> </li> <li> <p>5 Content Directories</p> </li> <li> <p>6 Coding Standards</p> </li> </ul>"},{"location":"ue4guide/wip/assets-naming-convention/#general-naming","title":"General Naming","text":"<ul> <li> <p>All names in English.</p> </li> <li> <p>All asset dependencies should be in the same folder. (except for shared assets)</p> </li> <li> <p>Asset type determines prefix.</p> </li> <li> <p>Blueprint is** BP_**assetname_01</p> </li> <li> <p>Certain types (eg. textures) use a suffix to specify sub-types. </p> </li> <li> <p>T_Grass_01**_N **for normal maps</p> </li> <li> <p>Use underscores to split type from identifier and numeric values.</p> </li> <li> <p>SM**_DoorHandle_**01</p> </li> <li> <p>Use numeric values with 2 digits.</p> </li> <li> <p>*SM_Pipe_01*</p> </li> </ul> <p>Prefixes</p> Asset Type Prefix Example Comment Blueprint BP_ BP_WallLight_01 Blueprint Interface BPI_ BPI_InventoryItem_01 Material M_ M_Grass_01 Material Instance MI_ MI_Grass_01 Material Function MF_ MF_CheapContrast Not numbered Material Parameter Collection MPC_ MPC_EnvironmentSettings_01 Static Mesh SM_ SM_Wall_01 Skeletal Mesh SK_ SK_Character_01 Texture T_ T_Grass_01_D Has suffix for texture types. See suffixes table. Particle System PS_ PS_Fire_01 Physics Material PM_ PM_Dirt Not numbered Sound S_ S_HitImpact_01 Sound Cue SC_ SC_HitImpact_01 Enumeration E EWeaponType Not numbered. Similar to convention in code (enum EWeaponType) Render Target RT_ RT_CameraCapturePoint_01"},{"location":"ue4guide/wip/assets-naming-convention/#suffixes","title":"Suffixes","text":"<p>Textures</p> <p>Texture types all use the T_ prefix.</p> Texture type Suffix Color Map _C Normal Map _N Emissive Map _E Mask Map _M Roughness Map _R Metallic Map _MT Specular _S Displacement _DP Ambient Occlusion _AO Height Map _H Flow Map _F Light Map (custom) _L <p>Animation</p> <p>These types have no prefix.</p> Asset type Suffix Animation Blueprint _AnimBlueprint Physics Asset _Physics Skeleton _Skeleton Blendspace use descriptive name: _AimOffsets AnimMontage use descriptive name: _Death _Equip etc. <p>Texture Masks</p> <p>RGB Mask for environment:</p> <ul> <li> <p>R = Metallic</p> </li> <li> <p>G = Roughness</p> </li> <li> <p>B = Ambient Occlusion</p> </li> </ul> <p>Content Directories</p> Content Directories Content\\ Animations all imported animation files. Content\\ Base base assets (eg. master materials) material functions and other \"foundations\" assets. Content\\ Characters character meshes / blueprints and skeletons. Content\\ Dev development assets / mockup meshes / special textures and icons. Not part of final build Content\\ Effects particle effects and dependencies. Content\\ Environment environment assets (meshes \u2013materials \u2013 textures) Content\\ Gameplay gameplay specific assets (eg. flag mesh &amp; dependencies for Capture The Flag) Content\\ PostProcess post process chains and its dependencies Content\\ Sound sounds and sound cues Content\\ UI menu and HUD assets Content\\ Weapons weapons and projectiles <p>Coding Standards</p> <p>Epic has set up a [Coding Standards] page at the Unreal documentation pages.</p> <p>Parts of this document were taken and/or modified from the [naming convention page] over at Unreal\u2019s wiki.</p> <p>Old Asset Naming Convention</p> <p>Contents</p> <p>hide</p> <ul> <li> <p>1 Overview</p> </li> <li> <p>2 Basics</p> </li> <li> <p>3 Assets folders</p> </li> <li> <p>4 Folders by categories</p> </li> <li> <p>5 Assets names</p> </li> <li> <p>6 Texture Masks</p> </li> </ul>"},{"location":"ue4guide/wip/assets-naming-convention/#overview","title":"Overview","text":"<p>This article contains ideas for assets naming convention and content folders structure.</p>"},{"location":"ue4guide/wip/assets-naming-convention/#basics","title":"Basics","text":"<ol> <li> <p>All names in English.</p> </li> <li> <p>All asset dependencies should be in it\u2019s folder (instead of some shared assets).</p> </li> </ol>"},{"location":"ue4guide/wip/assets-naming-convention/#assets-folders","title":"Assets folders","text":"(maps) Content\\Maps parent maps folder ............ Maps\\Episode(_Number) game episodes, where (_Number) is 01, 02, 03, etc ............ Maps\\TestMaps test maps, maps prototypes and other levels not for production (assets) Content\\Base basic materials, material functions and other \u201cfoundation\u201d assets Content\\Characters folder for characters ............ Characters\\NPC NPCs ............ Characters\\Player player character(s) Content\\Dev development assets, like objects icons, special meshes and textures, etc Content\\Effects various shared effects Content\\Environment environment assets ............ Environment\\Background backgrounds ............ Environment\\Buildings buildings (simple or procedural) ............ Environment\\Foliage foliage ............ Environment\\Props various props ............ Environment\\Sky skies ............ Environment\\Landscape terrains assets ............ Environment\\Water water meshes and materials Content\\Gameplay assets for various gameplay purposes Content\\PostProcess post process chains and it\u2019s assets Content\\Sound sounds and sound cues Content\\UI UI assets Content\\Vehicles vehicles with effects Content\\Weapons weapons with effects Folders by categories Blueprints blueprints Meshes static and skeletal meshes, physical assets Materials materials and instances Textures textures Animations animations Particles particle systems LensFlares flares Sounds sounds + cues Morphs morphs FaceFX FaceFX assets"},{"location":"ue4guide/wip/assets-naming-convention/#assets-names","title":"Assets names","text":"<p>Form:</p> <p>(Prefix_)AssetName(_Number)(_Suffix)</p> <p>Example:</p> <p>T_Rock_01_D</p> <p>Prefixes: (optional because of filters in content browser)</p> (by usage) CH_ Characters UI_ User Interface VH_ Vehicles WP_ Weapons (by type) BP_ Blueprint SK_ Skeletal Mesh SM_ Static Mesh AD_ Apex Destructible Asset AC_ Apex Cloth Asset MT_ Morph Target ST_ Speed Tree PS_ Particle System LF_ Lens Flare VF_ Vector Field S_ Sound SC_ Sound Cue M_ Material MI_ Material Instance MITV_ Material Instance Time Varying MF_ Material Function MPC_ Material Parameter Collection T_ Texture TC_ Texture Cube RT_ Render Target PM_ Physical Material <p>Suffixes:</p> (textures) _BC Base Color _MT Metallic _S Specular _R Roughness _N Normal _DP Displacement _AO Ambient Occlusion _H Height Map _FM Flow Map _L Light Map (fake) _M Mask (meshes) _Physics physics assets (generated name) _FaceFX FaceFx assets (animations) _BlendSpace blend space (generated name) _AnimBlueprint animation blueprint (generated name) <p>Texture Masks</p> <p>RGB Mask for characters:</p> <ul> <li>R = Metallic</li> <li>G = Roughness</li> <li>B = Subsurface Opacity</li> </ul> <p>RGB Mask for character's Hair:</p> <ul> <li>R = Hair Alpha</li> <li>G = Specular/Roughness map</li> <li>B = Anisotropic direction map</li> </ul> <p>RGB Mask for environment:</p> <ul> <li>R = Metallic</li> <li>G = Roughness</li> <li>B = Ambient Occlusion</li> </ul> <p>Reference From https://wiki.unrealengine.com/Assets_Naming_Convention</p>"},{"location":"ue4guide/wip/htc-vive/","title":"Htc vive","text":"<p>UE4 Setup: https://forums.unrealengine.com/showthread.php?73239-Unreal-Setup-for-HTC-Vive</p> <p>Motion Controller Setup: https://docs.unrealengine.com/latest/INT/Platforms/VR/MotionController/index.html</p> <p>SteamVR Controller: https://forums.unrealengine.com/showthread.php?74817-Steam-VR-Controllers</p> <p>Controller Trigger Inputs in UE4: http://steamcommunity.com/app/358720/discussions/0/521643320352268286</p>"},{"location":"ue4guide/wip/htc-vive/#debug-key-commands","title":"Debug Key Commands","text":"<p>I mentioned the existence of Aaron's SteamVR debug keys to a few folks and no one knew what I was talking about but were very interested in getting the info, so I'm pasting Aaron's notes below for posterity.</p> <p>Note: The compositor window needs to have focus first before these shortcuts will work.</p> <p>Shift+M: Brings up a mirror window of what the user is actually seeing. This will include hardbounds, all overlays, controllers, white grid, and anything else extra that the compositor draws on top of the scene.</p> <p>**B: **Toggle hardbounds always visible</p> <p>Shift+S: Take a screenshot (or rather dump all the textures that the compositor knows about to your runtime/screenshots folder).</p> <p>Z: Reset your seated zero pose.</p> <p>Shift+period: Toggle single step mode. This will lock you on the current frame, and subsequent presses of period will advance a frame at a time. This is super useful for flushing out any extra frames of latency you might have in your system. Look one direction, then step and ensure that the view has been updated to face that new direction. If it takes two or more steps before the view gets there, then you've got some latency in your pipeline to sort out. This is particularly fun when you discover one eye updating before the other!</p> <p>Other useful notes: Left click will regain fullscreen exclusive status in the event Windows kicks it out (usually due to another window overlapping onto its part of the desktop).</p> <p>Reference From http://steamcommunity.com/app/358720/discussions/0/520518053451174524</p>"},{"location":"ue4guide/wip/misc-useful-stuff/","title":"Misc useful stuff","text":"<p>Debug Drawing Utilities:</p> <p>DrawDebugHelpers.h contains a lot of helper draw functions</p> <p>Set a function call on the next tick:</p> C++<pre><code>GetWorldTimerManager().SetTimerForNextTick(this, &amp;AUTGameMode::StartMatch);\n</code></pre>"},{"location":"ue4guide/wip/programming-guide-notes/","title":"Programming guide notes","text":"<ul> <li> <p>AActor is base class Spawnable class</p> </li> <li> <p>Component model: To Instantiate camera, can add CameraComponent to Actor object</p> </li> </ul>"},{"location":"ue4guide/wip/programming-guide-notes/#coding-standard","title":"Coding Standard:","text":"<p>Reference From https://docs.unrealengine.com/latest/INT/Programming/Development/CodingStandard/index.html</p> <ul> <li> <p>Classes should have public interface methods declared first</p> </li> <li> <p>Capitalize first letter of each word in variables</p> </li> <li> <p>Types are prefixed with an additional capital letter (e.g. AActor):</p> </li> <li> <p>T: Templates</p> </li> <li> <p>U: Classes inheriting from Uobject</p> </li> <li> <p>A: Classes inheriting from Aactor</p> </li> <li> <p>S: Classes inheriting from Swidget</p> </li> <li> <p>I: Abstract interfaces</p> </li> <li> <p>F: Most other classes</p> </li> <li> <p>E: Enums</p> </li> <li> <p>Types/variables are nouns</p> </li> <li> <p>Variables should be declared one at a time</p> </li> <li> <p>Booleans should be prefixed with b</p> </li> <li> <p>Methods are verbs that describe method's effect or describe return value of method that has no effect. Strong verb followed by object (e.g. IsTeaFresh())</p> </li> <li> <p>Prefix function parameters with Out if they are going to be modified. Const religion!</p> </li> </ul> <p>Portable Aliases for Basic C++ Types</p> <ul> <li> <p>bool for boolean values (NEVER assume the size of bool). BOOL will not compile.</p> </li> <li> <p>TCHAR for a character (NEVER assume the size of TCHAR)</p> </li> <li> <p>uint8 for unsigned bytes (1 byte)</p> </li> <li> <p>int8 for signed bytes (1 byte)</p> </li> <li> <p>uint16 for unsigned \"shorts\" (2 bytes)</p> </li> <li> <p>int16 for signed \"shorts\" (2 bytes)</p> </li> <li> <p>uint32 for unsigned ints (4 bytes)</p> </li> <li> <p>int32 for signed ints (4 bytes)</p> </li> <li> <p>uint64 for unsigned \"quad words\" (8 bytes)</p> </li> <li> <p>int64 for signed \"quad words\" (8 bytes)</p> </li> <li> <p>float for single precision floating point (4 bytes)</p> </li> <li> <p>double for double precision floating point (8 bytes)</p> </li> <li> <p>PTRINT for an integer that may hold a pointer (NEVER assume the size of PTRINT)</p> </li> </ul> <p>Don't use the C++ int type in portable code, since it's dependent on the compiler how large it is.</p>"},{"location":"ue4guide/wip/programming-guide-notes/#general","title":"General","text":"<ul> <li>Comment third party code with special comments</li> </ul> C++<pre><code>// @third party code - BEGIN PhysX\n#include &lt;PhysX.h&gt;\n// @third party code - END PhysX\n</code></pre> <ul> <li> <p>Braces should be on a new line</p> </li> <li> <p>Minimize file-coupling by using forward declarations instead of include headers when possible</p> </li> <li> <p>Use #pragma once</p> </li> <li> <p>Fine-grained header inclusion: Include every header you need directl. Don't rely on a header that is included indirectly by another header you include</p> </li> <li> <p>Place definitions needed by other modules in the Public directory of a module. Everything else should be in the Private directory. (Old UE modules use Src/Inc for this distinction).</p> </li> <li> <p>Never allow float to implicit convert to int32 b/c it's slow. Always use the appTrunc() function to convert to int32. This will ensure cross-compiler compatibility as well as generate faster code.</p> </li> <li> <p>Interface classes (prefixed with \"I\") should always be abstract and must not have member variables. Interfaces are allowed to contain methods that are not pure-virtual, and even methods that are non-virtual or static, as long as they are implemented inline.</p> </li> <li> <p>Use const wherever possible. Particularly on reference parameters and class methods. const is documentation as much as it is a compiler directive.</p> </li> <li> <p>Pointers &amp; references declared with one space. Ex: FShaderType* Type</p> </li> <li> <p>Use virtual &amp; OVERRIDE when defining derived functions.</p> </li> <li> <p>Leave a blank line at the end of the file. All .cpp and .h files for gcc</p> </li> </ul> <p>Namespaces</p> <p>You can use namespaces to organize your classes, functions and variables where appropriate, as long as you follow the rules below.</p> <ul> <li> <p>Don't use \"using\" declarations in the global scope, even in .cpp files</p> </li> <li> <p>You can use \"using\" inside of another namespace or inside functions</p> </li> <li> <p>Note that if you put \"using\" within a namespace, it will carry over to other occurrences of that namespace in the same translation unit. As long as you're consistent it will be fine, though.</p> </li> <li> <p>You can only use \"using\" in header files safely if you follow the above rules.</p> </li> <li> <p>Enums must be wrapped in their own namespace b/c C++ Enum values have the same scope. Ex:</p> </li> </ul> C++<pre><code> /** Defining a enumeration within a namespace to achieve C#-style enum scoping */\n namespace EColorChannel\n {\n /** Declare EColorChannel::Type as the actual type for this enum */\n enum Type\n {\n Red,\n Green,\n Blue\n };\n }\n\n /** Given a color channel, returns the name of that channel. */\n FString GetNameForColorChannel(const EColorChannel::Type ColorChannel)\n {\n switch(ColorChannel)\n {\n case EColorChannel::Red: return TEXT(\"Red\");\n case EColorChannel::Green: return TEXT(\"Green\");\n case EColorChannel::Blue: return TEXT(\"Blue\");\n default: return TEXT(\"Unknown\");\n }\n }\n</code></pre> <ul> <li>Note that for locally-declared enums, you won't be able to use a namespace for scoping. In these cases, we opt to declare a local struct with no member variables, only a local enum type and use that struct for scoping.</li> </ul> C++<pre><code>  /** Defining a locally-scoped enumeration using structs*/\n  class FObjectMover\n  {\n  public:\n\n  /** Direction to move */\n  struct EMoveDirection\n  {\n  enum Type\n  {\n  Forward,\n  Reverse,\n  };\n  };\n\n/** Construct an FObjectMover with the specified movement direction */\nFObjectMover( const EMoveDirection::Type Direction );\n</code></pre> <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/Development/CodingStandard/index.html</p>"},{"location":"ue4guide/wip/programming-guide-notes/#object-handling","title":"Object Handling","text":"<p>UCLASS() macro tags classes into the Uobject handling system:</p> <ul> <li> <p>Gives class a reference to UClass object</p> </li> <li> <p>UClass Object is UE4 C++ implementation of attribute decorators/rtti</p> </li> <li> <p>UClass Object contains reference to CDO, class default object.</p> </li> <li> <p>UClass macros also used to decorate functions &amp; properties</p> </li> </ul>"},{"location":"ue4guide/wip/programming-guide-notes/#object-creation","title":"Object Creation","text":"<p>There are several functions that can be used to create new UObject instances as well as the standard new operator; each of which have their own use case:</p> Method Description NewObject() Creates a new instance with an automatically generated name. Best practice to use for simple cases. NewNamedObject() Creates a new instance using a specified name along with a few other optional parameters. Asserts if the name conflicts within the new instance's Outer. ConstructObject() Creates a new instance providing all available creation options. Use only when flexibility is required. new Use to construct objects in certain low level circumstances, such as when the constructor requires arguments. <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/UnrealArchitecture/Objects/index.html</p> <ul> <li> <p>Tick is the Update() per frame update function.</p> </li> <li> <p>Must derive from FTickableGameObject to make a class tickable</p> </li> </ul> <p>UClass System notes:</p> <ul> <li> <p>UClass is the C++ class that contains the RTTI info</p> </li> <li> <p>UE4 implements a Garbage collection system</p> </li> <li> <p>Auto-initialization for properties</p> </li> <li> <p>Auto-serialization. Will auto-update values in the level if they've not been manually overridden in the CDO</p> </li> <li> <p>Automatic editor integration</p> </li> <li> <p>Simple RTTI (can do typecasting IsA() or Cast() <li> <p>Supports network replication (can tag UFUNCTIONS for RPC &amp; UPROPERTIES for replication)</p> </li>"},{"location":"ue4guide/wip/programming-guide-notes/#misc","title":"Misc","text":"<ul> <li>Frameroot smoothing = Sets MaxTick() to be running average of last 300 frames, clamped to MinSmoothFramerate &amp; MaxSmoothFramerate</li> </ul>"},{"location":"ue4guide/wip/programming-guide-notes/#actors","title":"Actors","text":"<ul> <li> <p>Not garbage collected (b/c World object holds references to all actors)</p> </li> <li> <p>Can be explicitly destroyed by calling Destroy()</p> </li> <li> <p>Creating new actors done with SpawnActor()</p> </li> <li> <p>Handles replication of properties &amp; functions</p> </li> <li> <p>Functionality exposed through component pattern. Actors contain no xform or basic data</p> </li> <li> <p>Tick function is TickActor()</p> </li> <li> <p>Spawned with UWorld::SpawnActor()</p> </li> <li> <p>More spawning helper functions @ https://docs.unrealengine.com/latest/INT/Programming/UnrealArchitecture/Actors/Spawning/index.html</p> </li> </ul>"},{"location":"ue4guide/wip/programming-guide-notes/#components","title":"Components","text":"<ul> <li> <p>UActorComponent: Base class for components</p> </li> <li> <p>USceneComponent: Base component that contains xform</p> </li> <li> <p>UPrimitiveComponent: Component made up of other things (mesh, particles, etc)</p> </li> <li> <p>CapsuleComponents generate geometry for collision detection</p> </li> <li> <p>StaticMeshComponents for static geo</p> </li> <li> <p>SkeletalMeshComponents for collision detection</p> </li> <li> <p>Components must be registered UActorComponent::RegisterComponent()</p> </li> <li> <p>Components tick through TickComponent() (Ex: SkeletalMesh calls TickComponent() to update animation &amp; skeletal controllers)</p> </li> <li> <p>RenderState manages rendering for a component</p> </li> <li> <p>PhysicsState manages physics for a component</p> </li> </ul> <p>Register Events</p> <p>When a component is registered, the events below are fired off.</p> Function Description UActorComponent::OnRegister() Event to allow for additional initialization when registering a component, if necessary. UActorComponent::CreateRenderState() Initializes the render state for the component. UActorComponent::CreatePhysicsState() Initializes the physics state for the component."},{"location":"ue4guide/wip/programming-guide-notes/#unregistering-components","title":"UnRegistering Components","text":"<p>ActorComponents can be unregistered as well to avoid them being updated, simulated, or rendered. Unregistering a component is performed by callingUActorComponent::UnregisterComponent().</p> <p>void UActorComponent::UnregisterComponent()</p> <p>UnRegister Events</p> <p>The events below are fired off when a component is unregistered.</p> Function Description UActorComponent::OnUnRegister() Event to allow for additional actions when unregistering a component, if necessary. UActorComponent::DestroyRenderState() Uninitializes the render state for the component. UActorComponent::DestroyPhysicsState() Uninitializes the physics state for the component. <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/UnrealArchitecture/Actors/Components/index.html</p> <p>Component Transforms</p> <ul> <li> <p>FTransform struct contains a Translation vector, a Rotation quaternion, and a Scale3D vector.</p> </li> <li> <p>They also have an additional RelativeLocation vector,RelativeRotation rotator, and RelativeScale3D vector</p> </li> <li> <p>Can be relative to world or parent</p> </li> <li> <p>Generally used for getting &amp; setting transform for a component</p> </li> <li> <p>Default relative to AttachParent. Control relative by setting bAbsoluteLocation, bAbsoluteRotation, and bAbsoluteScale properties</p> </li> <li> <p>Can also set the absolute world position (internally converted to relative xform) by these functions</p> </li> </ul> Function Description SceneComponent::SetWorldLocation() Set the relative translation of this component to put it at the supplied location in world space. SceneComponent::SetWorldRotation() Set the relative rotation of this component to put it at the supplied orientation in world space. <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/UnrealArchitecture/Actors/Components/index.html</p> <p>Delegates</p> <p>Delegates allow you to call member functions on C++ objects in a generic, yet type-safe way. Using delegates, you can dynamically bind to a member function of an arbitrary object, then call functions on the object, even if the caller does not know the object's type.</p> <p>It is perfectly safe to copy delegate objects. Delegates can be passed around by value but this is generally not recommended since they do have to allocate memory on the heap. You should always pass delegates by reference when possible.</p> <p>Both single-cast and multi-cast delegates are supported, as well as \"dynamic\" delegates which can be safely serialized to disk.</p> <ul> <li> <p>Single-cast</p> </li> <li> <p>Multi-cast</p> </li> <li> <p>Events</p> </li> <li> <p>Dynamic (UObject, serializable)</p> </li> </ul> <p>See the Delegates page for reference and usage information.</p> <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/UnrealArchitecture/Reference/Functions/index.htm</p>"},{"location":"ue4guide/wip/unreal-developer-day-gameplay-framework-notes/","title":"Unreal developer day gameplay framework notes","text":"<p>https://www.youtube.com/watch?v=4ZW1BhGMYz0&amp;feature=youtu.be</p> <p>Actors</p> <ul> <li> <p>Entity in a level</p> </li> <li> <p>Bag that holds components</p> </li> <li> <p>Only things that are replicated</p> </li> </ul>"},{"location":"ue4guide/wip/unreal-engine-4-game-framework-diagram-for-relation-of-all-major-base-object-types/","title":"Unreal engine 4 game framework diagram for relation of all major base object types","text":"<p>Unreal Engine 4 Game Framework diagram for relation of all major base object types</p> <p>[Unreal Engine 4 Input Event diagram, scroll down to section Input Processing Procedura ]</p> <p>[RPCs official document, Must Read]</p> <p>[Everything you should know about replication]</p> <p>Reference From https://forums.unrealengine.com/showthread.php?43714-Multicast-not-showing-on-Server</p> <p>Useful Debug Commands:</p> <ul> <li> <p>Look at class ENGINE_API UCheatManager : public Uobject in CheatManager.h</p> </li> <li> <p>'ToggleDebugCamera'</p> </li> <li> <p>showdebug bones</p> </li> </ul> <p>Physics Replication:</p> <p>Handling replication for an actor that is simulating physics on the client side is done in OnRep_ReplicatedMovement() in /Engine/Source/Runtime/Engine/Private/ActorReplication.cpp. If you follow the chain you'll see the actual adjustments are done in ApplyRigidBodyState() in PrimitiveComponentPhysics.cpp. If you want to see how the server replicates the Actor's properties take a look at ServerReplicateActors() in NetworkDriver.cpp and its call to ReplicateActor() in DataChannel.cpp.</p> <p>Reference From https://forums.unrealengine.com/showthread.php?18789-Physics-replication-walkthrough</p> <p>Look into these classes for gameplay:</p> <ul> <li>UGameplayTask</li> </ul> <p>https://docs.unrealengine.com/latest/INT/API/Runtime/GameplayTasks/UGameplayTask/index.html&gt;</p> <ul> <li>UAbilityTask</li> </ul> <p>https://docs.unrealengine.com/latest/INT/API/Runtime/GameplayAbilities/Abilities/Tasks/UAbilityTask/index.html</p> <ul> <li> <p>UGameplayEffect https://docs.unrealengine.com/latest/INT/API/Runtime/GameplayAbilities/UGameplayEffect/index.html</p> </li> <li> <p>UAbilitySystemComponent</p> </li> </ul> <p>https://docs.unrealengine.com/latest/INT/API/Runtime/GameplayAbilities/UAbilitySystemComponent/index.html</p> <ul> <li>GamePlayTasks Module</li> </ul> <p>https://docs.unrealengine.com/latest/INT/API/Runtime/GameplayTasks/index.html</p> <ul> <li>GameplayAbilities Module</li> </ul> <p>https://docs.unrealengine.com/latest/INT/API/Runtime/GameplayAbilities/index.html</p> <p>Doing detail customization/PostEditChangeProperty in [@UnrealEngine]? Use GET_MEMBER_NAME_CHECKED instead of a string for future-proofing</p>"},{"location":"ue4guide/wip/useful-command-line-arguments/","title":"Useful command line arguments","text":"<p>Execute console commands on startup through command line:</p> C++<pre><code>UE4Editor.exe GAMENAME -ExecCmds=\"r.BloomQuality 12,vis 21,Quit\"\n</code></pre> <p>Reference From https://docs.unrealengine.com/latest/INT/Programming/Development/Tools/ConsoleManager/#loadingconsolevariables</p> <p>Turn on logging</p> C++<pre><code>-LogCmds=\\\"foo verbose, bar off\\\"\n</code></pre> <p>Reference From https://wiki.unrealengine.com/Logs,_Printing_Messages_To_Yourself_During_Runtime</p> <p>Turn on stats</p> C++<pre><code>-StatCmds=\"startfile\"\n</code></pre> <p>Reference From https://udn.unrealengine.com/questions/445587/long-initial-load-times.html</p> <p>-NoVerifyGC</p> <p>-Vr</p> <p>-Game</p> <p>-log LOG=logfile.txt</p> <p>-FORCELOGFLUSH</p> <p>-Deterministic (shortcut for -fixedtimestep/-fixedseed)</p> <p>-fixedtimestep</p> <p>-FixedSeed</p> <p>-D3DDEBUG</p> <p>-d3dbreakonwarning</p> <p>-ONETHREAD</p> <p>-DEBUG</p> <p>-usefixedtimestep</p> <p>-fps</p> <p>-emulatestereo</p> <p>-nohmd</p> <p>-nosound</p> <p>-windowed</p> <p>-Multiprocess (multiprocess tells unreal in general we shouldn't do things like save ddc, clean shader working directory, and other various multiprocess unsafe things)</p> <p>-MultiprocessSaveConfig</p> <p>-MultiprocessOSS</p> <p>NOTE: Do not pass '-' prefix for these</p> <p>WinX=5 WinY=495</p> <p>SAVEWINPOS=1</p>"},{"location":"ue4guide/wip/useful-command-line-arguments/#override-config-ini-files-with-command-line-argument","title":"Override Config Ini files with command line argument:","text":"<p>Override INI (note, no '-' prefix):</p> <p>GameUserSettingsINI=\"UnrealEngine/Saved/Config/Windows/PIEGameUserSettings0.ini\"</p> Commandline Argument INI Override DEFEDITORINI= Default Editor EDITORINI= Editor DEFEDITORUSERSETTINGSINI= Default EditorUserSettings EDITORUSERSETTINGSINI= EditorUserSettings DEFCOMPATINI= Default Compat COMPATINI= Compat DEFLIGHTMASSINI= Default Lightmass LIGHTMASSINI= Lightmass DEFENGINEINI= Default Engine ENGINEINI= Engine DEFGAMEINI= Default Game GAMEINI= Game DEFINPUTINI= Default Input INPUTINI= Input DEFUIINI= Default UI UIINI= UI <p>Reference From https://docs.unrealengine.com/en-us/Programming/Basics/CommandLineArguments</p>"},{"location":"ue4guide/wip/useful-config-settings/","title":"Useful config settings","text":"C++<pre><code>DefaultEngine.ini\n\n; Enable BC6h/BC7 support &amp; reduce shader compilation times by removing SM4 support\n\n[/Script/WindowsTargetPlatform.WindowsTargetSettings]\n\n-TargetedRHIs=PCD3D_SM4\n</code></pre>"},{"location":"ue4guide/wip/vislog/","title":"Vislog","text":""},{"location":"ue4guide/wip/vislog/#purpose","title":"Purpose","text":"<p>Visual Log has been implemented as a helper in debugging gameplay issues by gathering information and presenting it in a visual manner. This approach proved to be very powerful while developing and shipping Bulletstorm. It\u2019s remarkable how simply seeing logged data in a spatial context speeds up debugging.</p>"},{"location":"ue4guide/wip/vislog/#misc","title":"Misc:","text":"C++<pre><code>FDebugRenderSceneProxy: Debug Render primitive that extends FPrimitiveSceneProxy:\n\n- Look at FVisualLoggerSceneProxy for simple extension\n\n- UDebugDrawService\n\nSerialize ue4 data to binary blob with memory compression:\n\nvoid UEnvQueryDebugHelpers::DebugDataToBlobArray(EQSDebug::FQueryData&amp; EQSLocalData, TArray&lt;uint8&gt;&amp; BlobArray, bool bUseCompression)\n\n{\n\nif (!bUseCompression)\n\n{\n\nFMemoryWriter ArWriter(BlobArray);\n\nArWriter &lt;&lt; EQSLocalData;\n\n}\n\nelse\n\n{\n\nTArray&lt;uint8&gt; UncompressedBuffer;\n\nFMemoryWriter ArWriter(UncompressedBuffer);\n\nArWriter &lt;&lt; EQSLocalData;\n\nconst int32 UncompressedSize = UncompressedBuffer.Num();\n\nconst int32 HeaderSize = sizeof(int32);\n\nBlobArray.Init(0, HeaderSize + FMath::TruncToInt(1.1f * UncompressedSize));\n\nint32 CompressedSize = BlobArray.Num() - HeaderSize;\n\nuint8* DestBuffer = BlobArray.GetData();\n\nFMemory::Memcpy(DestBuffer, &amp;UncompressedSize, HeaderSize);\n\nDestBuffer += HeaderSize;\n\nFCompression::CompressMemory((ECompressionFlags)(COMPRESS_ZLIB | COMPRESS_BiasMemory), (void*)DestBuffer, CompressedSize, (void*)UncompressedBuffer.GetData(), UncompressedSize);\n\nBlobArray.SetNum(CompressedSize + HeaderSize, false);\n\n}\n\n}\n\nvoid UEnvQueryDebugHelpers::BlobArrayToDebugData(const TArray&lt;uint8&gt;&amp; BlobArray, EQSDebug::FQueryData&amp; EQSLocalData, bool bUseCompression)\n\n{\n\nif (!bUseCompression)\n\n{\n\nFMemoryReader ArReader(BlobArray);\n\nArReader &lt;&lt; EQSLocalData;\n\n}\n\nelse\n\n{\n\nTArray&lt;uint8&gt; UncompressedBuffer;\n\nint32 UncompressedSize = 0;\n\nconst int32 HeaderSize = sizeof(int32);\n\nuint8* SrcBuffer = (uint8*)BlobArray.GetData();\n\nFMemory::Memcpy(&amp;UncompressedSize, SrcBuffer, HeaderSize);\n\nSrcBuffer += HeaderSize;\n\nconst int32 CompressedSize = BlobArray.Num() - HeaderSize;\n\nUncompressedBuffer.AddZeroed(UncompressedSize);\n\nFCompression::UncompressMemory((ECompressionFlags)(COMPRESS_ZLIB), (void*)UncompressedBuffer.GetData(), UncompressedSize, SrcBuffer, CompressedSize);\n\nFMemoryReader ArReader(UncompressedBuffer);\n\nArReader &lt;&lt; EQSLocalData;\n\n}\n\n}\n\nRegister Visual Logger Drawing Extension:\n\n#if WITH_EDITOR &amp;&amp; ENABLE_VISUAL_LOG\n\nFVisualLogger::Get().RegisterExtension(*EVisLogTags::TAG_EQS, &amp;VisualLoggerExtension);\n\n#endif\n\nclass FVisualLoggerExtension : public FVisualLogExtensionInterface\n\n{}\n</code></pre>"},{"location":"ue4guide/wip/vislog/#logging","title":"Logging","text":"<p>Visual Log gathers data in two ways:</p> <ul> <li> <p>Actors request logging of data</p> </li> <li> <p>VisualLog asking Actors\u2019 status at the time logging request is made</p> </li> </ul> <p>So, whenever an Actor wants to log something, Visual Log checks whether there was already anything logged for that actor within current frame. If there was, then data being logged is simply added to current log entry. If not then actor is first asked to supply a \u201csnapshot\u201d of its current state (by calling GrabDebugSnapshot)</p> <p>Couple of macros has been supplied to make using visual log easier, and similar to using regular log. These are:</p> <ul> <li> <p>UE_VLOG(Actor, CategoryName, Verbosity, Format, ...) \u2013 similar to UE_LOG, the only difference is the new first parameter that\u2019s the actor that we want to log data for</p> </li> <li> <p>UE_CVLOG \u2013 similar to UE_CLOG with addition mentioned above</p> </li> </ul> <p>There are other structures that can be logged with Visual Log, other than plain strings. You can log paths, segments, points, all of them with an optional label. For now there\u2019s only a macro for logging segments, others to come in future.</p> <p>UE_VLOG_SEGMENT(Actor, SegmentStart, SegmentEnd, Color, DescriptionFormat, ...)</p> <p>\u201cSpatial\u201d information logged with Visual Log will be presented along with any other data logged within that frame when viewing log.</p>"},{"location":"ue4guide/wip/vislog/#logging-actors-hierarchy","title":"Logging actor\u2019s hierarchy","text":"<p>It can happen we want logs of one actor to be associated with logs of another, like for example we\u2019d like to have Weapon\u2019s logs to be added to Pawn\u2019s log. It\u2019s possible and can be done by using these two macros:</p> <ul> <li> <p>REDIRECT_TO_VLOG(OtherActor) \u2013 makes logs of \u201cthis\u201d actor to be added to OtherActor\u2019s</p> </li> <li> <p>REDIRECT_ACTOR_TO_VLOG(SrcActor, OtherActor) \u2013 makes logs of SrcActor to be added to OtherActor\u2019s</p> </li> </ul>"},{"location":"ue4guide/wip/vislog/#viewing-log","title":"Viewing Log","text":"<p>A tool has been created to enable users (not only programmers) to view gathered information. It\u2019s a very basic implementation that will be developed further, but it\u2019s already usable and supplies basic functionality. The name is LogVisualizer and here is roughly what it does:</p> <p></p> <ul> <li> <p>Recording start/stop button</p> </li> <li> <p>Toggles game\u2019s pause</p> </li> <li> <p>Toggles Log Visualizer\u2019s debug camera. This camera allows user to move around in game viewport and click actors. If there\u2019s a log corresponding to clicked actor then it will be selected in Log Visualizer and its entries will start to be drawn.</p> </li> <li> <p>Toggles whether to draw a path composed of all logged locations of an actor</p> </li> <li> <p>Toggles whether to ignore logs that have only one entry</p> </li> <li> <p>List of all available logs with a textfield for filtering logs by name</p> </li> <li> <p>Currently viewed log is marked orange</p> </li> <li> <p>This is the \u201ccurrent time\u201d line.</p> </li> <li> <p>Currently views log entry</p> </li> <li> <p>Time scale of current view</p> </li> <li> <p>Zoom slider</p> </li> <li> <p>Debug snapshot of log owner and all actors that have been redirected to this log</p> </li> <li> <p>Log lines stored in current log entry</p> </li> <li> <p>Totally temporary status bar</p> </li> </ul> <p>To run Log Visualizer just type VisLog in console.</p>"},{"location":"ue4guide/wip/vislog/#limitations-and-future-plans","title":"Limitations and Future plans","text":"<p>There are a number of features that are missing to claim Visual Log a full featured tool (although it can already be a huge help!). Here\u2019s a brief list:</p> <ul> <li> <p>Currently one needs to manually start and stop log \u201crecording\u201d \u2013 ideally, in the future, Visual Log will be efficient enough so that it can be \u201con\u201d all the time. It\u2019s awesome when you can just walk over to an LD having an issue with the game and have already enough data ready to do decent debugging.</p> </li> <li> <p>Visual Log is meant to log only AActor instances (UObjects, like components, can be logged via owners) \u2013 if need be we can expand it to allow any kind of class.</p> </li> <li> <p>Due to the way Visual Log uses memory it\u2019s not really feasible for consoles \u2013 we\u2019d like LogVisualizer to be like UnrealConsole so that it can connect to a game session and start getting data from it.</p> </li> <li> <p>Saving and loading saved logs is not implemented yet and is one of the major missing features.</p> </li> <li> <p>Future feature: Drawing all actors\u2019 locations at \u201ccurrent time\u201d to give even move spatial context to current log entry\u2019s drawing</p> </li> <li> <p>Future feature: handling drawing multiple logs at the same time</p> </li> <li> <p>Future feature: it would be most convenient if log lines stored in log entries would be a hypertext so that clicking an actor name would switch over to its log or show its location at \u201ccurrent time\u201d. Once we get that in there\u2019s a whole new spectrum of features we could add.</p> </li> <li> <p>Future feature: filtering log entries with string so that we can instantly see which entries contain requested text. There\u2019s also a huge list of features I hadn\u2019t come up with yet, so if you have any idea just let me know!</p> </li> </ul> <p>Reference From https://answers.unrealengine.com/questions/3675/enable-visual-log-grabdebugsnapsho.html</p>"},{"location":"ue4guide/wip/unfinished/add-custom-clip-plane/","title":"Add custom clip plane","text":"<p>Add custom clip plane:</p> <p>https://github.com/inequation/UnrealEngine/commit/4841faec1ab6b9457118f246706012e0e7f3d16d</p> <p>Dynamic toggling of GBuffer:</p> <p>https://github.com/inequation/UnrealEngine/commit/ead931530360781bb7d4c768532af09dc60ebfe2</p>"},{"location":"ue4guide/wip/unfinished/beforetonemapping/","title":"Beforetonemapping","text":"<ul> <li> <p>SceneColor: Looks like correctly lit framebuffer</p> </li> <li> <p>HDR</p> </li> <li> <p>Without Separate Translucency</p> </li> <li> <p>SeparateTranslucency: Doesn\u2019t work</p> </li> <li> <p>PostProcessInput0: Scene + SeparateTranslucency</p> </li> <li> <p>PostProcessInput1: SeparateTranslucency</p> </li> <li> <p>PostProcessInput2: Scene without Translucency</p> </li> </ul> <p>AfterToneMapping:</p> <ul> <li>Same as above except SceneColor has incorrect data</li> </ul> Blendable LocationDescriptionBefore TonemappingPostProcessInput0 provides the scene color with all lighting in HDR. Use this to fix issues with temporal antialiasing and GBuffer lookups e.g. depth, normals.After TonemappingPreferred location for performance as the color is LDR and therefore requires less precision and bandwidth. This is after tone mapping and color grading.Before TranslucencyThis is even earlier in the pipeline than 'Before Tonemapping' before translucency was combined with the scene color. Note that SeparateTranslucency is composited later than normal translucency.Replacing the TonemapperPostProcessInput0 provides the HDR scene color, PostProcessInput1 has the SeparateTranslucency (Alpha is mask), PostprocessInput2 has the low resolution bloom input. <p>From https://docs.unrealengine.com/latest/INT/Engine/Rendering/PostProcessEffects/PostProcessMaterials/index.html</p> <p>All material instances properties are blended, no matter if the property checkbox is checked or not (in that case it blends the property from the parent). This is different from the post processing settings where an unchecked property is not having any effect. This means if you blend a material instance, all properties are getting blended.</p> <p>From https://docs.unrealengine.com/latest/INT/Engine/Rendering/PostProcessEffects/PostProcessMaterials/index.html</p> <p>Post process materials you can look up into screen aligned buffers, but you need to know the right UVs. The ScreenPosition material expression outputs the UV that you would expect (0,0 at the left top of the viewport and 1,1 at the bottom right). Using the texture coordinate material expression might give you different results. This is because the actual texture (more correctly it is a render target) is potentially larger than the viewport. It can be larger in editor because we share this texture for multiple viewports and the largest extent is use for all viewports. Even in game it can be larger in some cases (e.g. SceneCaptureActors might have a smaller viewport, Matinee black borders, Splitscreen, VR, ...). The texture coordinate material expression gives you the UV for this larger texture. If you only need a relative offset (e.g. pixel sized edge detection) you need to scale with the right size. The SceneTexture material expression has outputs for the size and the inverse of the size (efficient and useful for pixel offsets). If you want to get the viewport UV (e.g. to map texture to the viewport) you can use the ScreenPosition material expression or you make the needed computations manually (more control, can be slower). For this, you need the ViewSize material expression. To test all that, you can use the console variable r.ViewPortTest which allows you to test various viewport configurations.</p> <p>From https://docs.unrealengine.com/latest/INT/Engine/Rendering/PostProcessEffects/PostProcessMaterials/index.html</p>"},{"location":"ue4guide/wip/unfinished/called-to-send-a-transform-1-for-this-component-to-the-rendering-thread/","title":"Called to send a transform 1 for this component to the rendering thread","text":"<p>/** Called to send a transform 1 for this component to the rendering thread         *         * **Caution**, this is called concurrently on multiple threads (but never the same component concurrently)         */ virtual void SendRenderTransform_Concurrent();</p> <p>void UActorComponent::DoDeferredRenderUpdates_Concurrent()</p> <p>{</p> <p>checkf(!HasAnyFlags(RF_Unreachable), TEXT(\"%s\"), *GetFullName());</p> <p>checkf(! IsTemplate(), TEXT(\"%s\"), *[GetFullName]);</p> <p>checkf(! IsPendingKill (), TEXT(\"%s\"), *[GetFullName]);</p> <p>if(! IsRegistered ())</p> <p>{</p> <p>UE_LOG(LogActorComponent, [Log], TEXT(\"UpdateComponent: (%s) Not registered, Aborting.\"), *[GetPathName]);</p> <p>return;</p> <p>}</p> <p>if(bRenderStateDirty)</p> <p>{</p> <p>SCOPE_CYCLE_COUNTER(STAT_PostTickComponentRecreate);</p> <p>[RecreateRenderState_Concurrent];</p> <p>checkf(!bRenderStateDirty, TEXT(\"Failed to route CreateRenderState_Concurrent (%s)\"), *[GetFullName]);</p> <p>}</p> <p>else</p> <p>{</p> <p>SCOPE_CYCLE_COUNTER(STAT_PostTickComponentLW);</p> <p>if(bRenderTransformDirty)</p> <p>{</p> <p>// Update the component's transform if the actor has been moved since it was last updated.</p> <p>[SendRenderTransform_Concurrent];</p> <p>}</p> <p>if(bRenderDynamicDataDirty)</p> <p>{</p> <p>[SendRenderDynamicData_Concurrent];</p> <p>}</p> <p>}</p> <p>}</p> <p>From https://docs.unrealengine.com/latest/INT/API/Runtime/Engine/Components/UActorComponent/DoDeferredRenderUpdates_Concurre-/index.html</p> <p>void [UActorComponent::MarkRenderDynamicDataDirty]</p> <p>{</p> <p>// If registered and has a render state to make as dirty</p> <p>if([IsRegistered] &amp;&amp; [bRenderStateCreated](../../../API%5C%5CRuntime%5C%5CEngine%5C%5CComponents%5C%5CUActorComponent%5C%5CbRenderStateCreated))</p> <p>{</p> <p>// Flag as dirty</p> <p>bRenderDynamicDataDirty = true;</p> <p>[MarkForNeededEndOfFrameUpdate];</p> <p>}</p> <p>}</p> <p>From https://docs.unrealengine.com/latest/INT/API/Runtime/Engine/Components/UActorComponent/MarkRenderDynamicDataDirty/index.html</p>"},{"location":"ue4guide/wip/unfinished/checkout-file-from-source-control/","title":"Checkout file from source control","text":"<p>Checkout file from source control:</p> <p>VerboseMessage(TEXT(\"Pre ForceGetStatus1\"));</p> <p>ISourceControlProvider&amp; SourceControlProvider = ISourceControlModule::Get().GetProvider();</p> <p>FSourceControlStatePtr SourceControlState = SourceControlProvider.GetState( Package, EStateCacheUsage::ForceUpdate );</p> <p>if(SourceControlState.IsValid())</p> <p>{</p> <p>if( SourceControlState-&gt;IsCheckedOutOther() )</p> <p>{</p> <p>UE_LOG(LogContentCommandlet, Warning, TEXT(\"[REPORT] Overwriting package %s (already checked out by someone else), will not submit\"), *Filename);</p> <p>}</p> <p>else if( !SourceControlState-&gt;IsCurrent() )</p> <p>{</p> <p>UE_LOG(LogContentCommandlet, Warning, TEXT(\"[REPORT] Overwriting package %s (not at head), will not submit\"), *Filename);</p> <p>}</p> <p>else</p> <p>{</p> <p>VerboseMessage(TEXT(\"Pre CheckOut\"));</p> <p>SourceControlProvider.Execute(ISourceControlOperation::Create&lt;FCheckOut&gt;(), Package);</p> <p>VerboseMessage(TEXT(\"Post CheckOut\"));</p> <p>FilesToSubmit.AddUnique(*Filename);</p> <p>}</p> <p>}</p> <p>VerboseMessage(TEXT(\"Post ForceGetStatus2\"));</p>"},{"location":"ue4guide/wip/unfinished/class-ssequencersplitteroverlay--public-soverlay/","title":"Class ssequencersplitteroverlay  public soverlay","text":"<p>class SSequencerSplitterOverlay : public SOverlay</p> <p>{</p> <p>public:</p> <p>\u200b typedef SSplitter::FArguments FArguments;</p> <p>void Construct( const FArguments&amp; InArgs )</p> <p>{</p> <p>SetVisibility(EVisibility::SelfHitTestInvisible);</p> <p>Splitter = SNew(SSplitter) = InArgs;</p>"},{"location":"ue4guide/wip/unfinished/coherent-ui-notes/","title":"Coherent ui notes","text":"<p>Coherent UI Notes:</p> <p>Set focus to CoherentUI widget:</p> <ul> <li>FSlateApplication::Get().SetKeyboardFocus(Widget)</li> </ul> <p>Set focus back to game: FSlateApplication::Get().SetFocusToGameViewport()</p> <p>Show mouse cursor: FSlateApplication::Get().ResetToDefaultInputSettings()</p> <p>CoherentUIGTHUD-&gt;ReadyForBindings.AddDynamic(this, &amp;ACoUIGTTestFPSHUD::BindUI);</p> <p>void ACoUIGTTestFPSHUD::BindUI(int32 frameid, const FString&amp; path, bool isMain) { CoherentUIGTHUD-&gt;GetView()-&gt;BindCall(\"CallFromJavaScript\", Coherent::UI::MakeHandler(&amp;CalledFromJSSampleDelegate, &amp;(FCalledFromJSSample::ExecuteIfBound))); CoherentUIGTHUD-&gt;GetView()-&gt;BindCall(\"CalledFromJSString\", Coherent::UI::MakeHandler(this, &amp;ACoUIGTTestFPSHUD::CalledFromJSStringHandler)); CoherentUIGTHUD-&gt;GetView()-&gt;RegisterForEvent( \"CalledFromJSUStruct\", Coherent::UIGT::MakeHandler(this, &amp;ACoUIGTTestFPSHUD::CalledFromJSUStructHandler)); }</p> <p>(Reference)</p> <p>engine.call</p> <ul> <li> <p>Call a function from JS to C++ (can return value)</p> </li> <li> <p>Bind with View::BindCall</p> </li> </ul> <p>engine.trigger</p> <ul> <li> <p>Bind with View::RegisterForEvent</p> </li> <li> <p>trigger event which can have multiple functions bound to it, both on JS side &amp; C++ side.</p> </li> </ul> <p>Ex:</p> <p>class Game</p> <p>{</p> <p>public:</p> <p>void Quit()</p> <p>{</p> <p>}</p> <p>} g_Game;</p> <p>class GameViewListener : public Coherent::UI::ViewListener</p> <p>{</p> <p>public:</p> <p>virtual void OnReadyForBindings()</p> <p>{</p> <p>m_View-&gt;RegisterForEvent(\"OnQuitClicked\",</p> <p>Coherent::UI::MakeHandler(&amp;g_Game, &amp;Game::Quit));</p> <p>}</p> <p>};</p> <p>engine.on('OnQuitClicked', function () {</p> <p>ShowMessage('Bye');</p> <p>});</p> <p>// using jQuery to simplify the sample</p> <p>$('#QuitButton').click(function () {</p> <p>// this will execute both Game::Quit in C++</p> <p>// and ShowMessage('Bye') in JavaScript</p> <p>engine.trigger('OnQuitClicked');</p> <p>});</p> <p>From http://coherent-labs.com/Documentation/cpp-gt/dc/dc7/_binding_cxx.html#CPP2JavaScript</p>"},{"location":"ue4guide/wip/unfinished/collision-detection/","title":"Collision detection","text":"<p>Collision Detection</p> <p>UBodySetup</p> <ul> <li> <p>Contains all the physics data on a single asset (e.g. static mesh)</p> </li> <li> <p>Done so that all BodyInstance references can share the physics data/config and not dupe tris everywhere</p> </li> <li> <p>Contains FKAggregateGeom that has simplified collision representation of asset</p> </li> <li> <p>Typically assets implement GetBodySetup function that's used in physics state creation</p> </li> </ul> <p>Collision:</p> <ul> <li> <p>Blocking will naturally occur between two objects set to block</p> </li> <li> <p>Hit events wont trigger unless Simulation Generates Hit Events is set</p> </li> <li> <p>Simulation Generates Hit events doesn't need to be set on both</p> </li> <li> <p>Overlap + Generate Overlap events must both be set for overlap events</p> </li> <li> <p>Interaction between two objects is min of the flags of both actors. Ex:</p> </li> <li> <p>Block + block = block</p> </li> <li> <p>[Block + sim generates hit events] + block = Hit Event on 1<sup>st</sup> actor + block</p> </li> <li> <p>[overlap+ disabled generate overlapevents] + block = nothing</p> </li> <li> <p>[overlap + generate overlap events] + block = overlap event on 1<sup>st</sup> actor</p> </li> <li> <p>After first blocking collision, collision system stops looking for collisions</p> </li> </ul> <p></p> <ul> <li>Not recommended for object to have generate hit events and overlap events</li> </ul> <p>UE Physics has an async scene + sync scene based on PhysX</p> <ul> <li> <p>Async means physics computation results can be reported at later frames</p> </li> <li> <p>Sync means it runs before all UE4 sim code</p> </li> <li> <p>No interdependency calculation between the two</p> </li> </ul> <p>Thread &amp; Sample showing how to update collision at runtime:</p> <ul> <li> <p>https://wiki.unrealengine.com/Procedural_Mesh_Generation</p> </li> <li> <p>https://forums.unrealengine.com/showthread.php?2078-How-to-create-collision-information-for-procedural-geometry</p> </li> </ul> <p>Turn On Drawing For Traces/Geometry Sweeps</p> <ul> <li> <p>World-&gt;DebugDrawTraceTag</p> </li> <li> <p>DrawGeomSweeps</p> </li> <li> <p>DrawGeomOverlaps</p> </li> </ul> <p>There's a Collision Analyzer Tool for debugging Developer Tools-&gt;Collision Analyzer</p>"},{"location":"ue4guide/wip/unfinished/constant-rotatorrotation/","title":"Constant rotatorrotation","text":"<p>Constant RotatorRotation</p> <p>Rotate to different end position based on initial rotation</p> <p>Lerp back out in a different way</p> <p>\u200b -Different curve</p> <p>\u200b -Different cw rotation direction</p> <p>Debug Level</p> <p>Add Custom World Settings</p> <p>//TODO: ikrimae: Check to make sure that we have the necessary components in our level</p> <p>// -GameMode is ABBGameModeBase</p> <p>// -LevelScripts are ABBLevelScript</p> <p>// -ArenaLevels have all their objects set to static mobility</p> <p>// -StadiumLevels have all their objects set to movable mobility</p> <p>// -We have placed instances for all of our manager classes in the level (e.g. ABBStateMachineManager)</p> <p>//Make sure mapcheck checks against all visible levels</p> <p>===========================================</p> <p>void UBlueprint::GetAllGraphs(TArray&lt;UEdGraph*&gt;&gt; Graphs) const</p> <p>/** Set of pages that combine into a single uber-graph */</p> <p>\u200b UPROPERTY()</p> <p>\u200b TArray&lt;class UEdGraph*&gt; UbergraphPages;</p> <p>\u200b /** Set of functions implemented for this class graphically */</p> <p>\u200b UPROPERTY()</p> <p>\u200b TArray&lt;class UEdGraph*&gt; FunctionGraphs;</p> <p>\u200b /** Graphs of signatures for delegates */</p> <p>\u200b UPROPERTY()</p> <p>\u200b TArray&lt;class UEdGraph*&gt; DelegateSignatureGraphs;</p> <p>\u200b /** Set of macros implemented for this class */</p> <p>\u200b UPROPERTY()</p> <p>\u200b TArray&lt;class UEdGraph*&gt; MacroGraphs;</p> <p>for (UEdGraph* CurrentGraph : Blueprint-&gt;FunctionGraphs)</p> <p>\u200b {</p> <p>\u200b if( CurrentGraph-&gt;GetFName() == Schema-&gt;FN_UserConstructionScript )</p> <p>\u200b {</p> <p>\u200b return CurrentGraph;</p> <p>\u200b }</p> <p>\u200b }</p> <p>=========</p> <p>Find references function/find function</p> <p>GetFindReferenceSearchString</p> <p>FindInBlueprints.h:</p> <p>SFindInBlueprints::MakeSearchQuery() - to comprehensively search blueprint nodes (e.g. parameters, comments, etc)</p> <p>TSharedPtr&lt; FImaginaryBlueprint&gt; ImaginaryBlueprint(new FImaginaryBlueprint(Blueprint-&gt;GetName(), Blueprint-&gt;GetPathName(), ParentClass, Interfaces, FFindInBlueprintSearchManager::Get().QuerySingleBlueprint(Blueprint)));</p> <p>\u200b TSharedPtr&lt; FFiBSearchInstance &gt; SearchInstance(new FFiBSearchInstance);</p> <p>\u200b FSearchResult SearchResult = RootSearchResult = SearchInstance-&gt;StartSearchQuery(SearchValue, ImaginaryBlueprint);</p> <p>========</p> <p>//Show what objects points to this, using the assetregistry</p> <p>ObjectTools::ShowReferencers()</p> <p>\u200b RetrieveReferencers( TArray&lt;FReferencerInformation&gt;* OutInternalReferencers, TArray&lt;FReferencerInformation&gt;* OutExternalReferencers);</p> <p>//Show objects this points to</p> <p>ObjectTools::ShowReferencedObjs(GetBlueprintObj());</p> <p>\u200b //To differentiate between what the default class points to vs. the instance</p> <p>\u200b ObjectTools::ShowReferencedObjs(GetBlueprintObj()-&gt;GeneratedClass);</p> <p>/** Gather all bps that Blueprint depends on */</p> <p>static void GatherDependencies(const UBlueprint* Blueprint, TSet&lt;TWeakObjectPtr&lt;UBlueprint&gt;&gt;&amp; OutDependencies, TSet&lt;TWeakObjectPtr&lt;UStruct&gt;&gt;&amp; OutUDSDependencies);</p> <p>/** Returns a list of loaded Blueprints that are dependent on the given Blueprint. */</p> <p>static void GetDependentBlueprints(UBlueprint* Blueprint, TArray&lt;UBlueprint*&gt;&amp; DependentBlueprints, bool bRemoveSelf = true);</p> <p>=========</p> <p>Search Asset Registry</p> <p>FAssetRegistryModule* AssetRegistryModule = &amp;FModuleManager::LoadModuleChecked&lt;FAssetRegistryModule&gt;(TEXT(\"AssetRegistry\"));</p> <p>TArray&lt;FAssetData&gt; AssetData;</p> <p>FARFilter Filter;</p> <p>Filter.ClassNames.Add( UBlueprint::StaticClass()-&gt;GetFName() ); //get blueprints</p> <p>Filter.PackagePaths.Add(\"/Game/Blueprints/RoomModel\"); //from location</p> <p>AssetRegistryModule-&gt;Get().GetAssets(Filter, AssetData);</p> <p>//AssetRegistryModule-&gt;Get().GetAssetsByClass(Class-&gt;GetFName(), AssetData);</p> <p>for (TArray&lt;FAssetData&gt;::TConstIterator PkgIter = AssetData.CreateConstIterator(); PkgIter; ++PkgIter)</p> <p>{</p> <p>FAssetData Asset = *PkgIter;</p> <p>UBlueprint* BlueAsset = Cast&lt;UBlueprint&gt;(Asset.GetAsset());</p> <p>if (BlueAsset-&gt;ParentClass == ARoomConnection::StaticClass()){</p> <p>GEngine-&gt;AddOnScreenDebugMessage(-1, 10.f, FColor::Red, Asset.AssetName.GetPlainNameString());</p> <p>}</p> <p>}</p> <p>================================</p> <p>Check if Actor is a BP</p> <p>UBlueprint::GetBlueprintFromClass(const UClass* InClass);</p> <p>BlueprintClass-&gt;HasAnyClassFlags(CLASS_CompiledFromBlueprint)</p> <p>UObject-&gt;IsA(UBlueprintGeneratedClass::StaticClass())</p> <p>UClass-&gt;IsChildOf(UBlueprintGeneratedClass::StaticClass())</p> <p>Find all nodes of type</p> <p>TArray&lt;UK2Node_CustomEvent*&gt; BpCustomEvents;</p> <p>FBlueprintEditorUtils::GetAllNodesOfClass&lt;UK2Node_CustomEvent&gt;(FuncBlueprint, BpCustomEvents);</p> <p>static bool GetBlueprintHierarchyFromClass(const UClass* InClass, TArray&lt;UBlueprint*&gt;&amp; OutBlueprintParents);</p> <p>===============</p> <p>For finding shit that exists in bad folders:</p> <p>TFindObjectReferencers</p> <p>ShowReferencedObjs</p> <p>UObject::OutputReferencers()/RetrieveReferencers()</p>"},{"location":"ue4guide/wip/unfinished/create-component-thats-not-tied-to-actor/","title":"Create component thats not tied to actor","text":"<ul> <li>Gist is you can directly call RegisterComponentWithWorld()</li> </ul>"},{"location":"ue4guide/wip/unfinished/create-custom-collision-on-static-mesh/","title":"Create custom collision on static mesh","text":"<p>Create Custom Collision on Static Mesh:</p> <p>It should be possible to create custom collision within the engine. In fact, we do exactly this for UProceduralMeshComponent. You should probably start by taking a look at that component, and just deriving from it to do your custom creation. It already handles a lot of the boilerplate for you.</p> <p>From https://udn.unrealengine.com/questions/418058/create-custom-collision-for-staticmesh.html</p>"},{"location":"ue4guide/wip/unfinished/curhmdposition/","title":"Curhmdposition","text":"<p>CurHmdPosition</p> <p>W2M=</p> <p>Set updateRT = false</p> <p>CalculateStereoViewOffset -&gt; Calculates stereo camera position based on ipd offset + hmd position</p> <p>ApplyHmdRotation/UpdatePlayerCameraRotation</p> <p>\u200b Used by Engine to update the camera. If bFollowHMDOrientation == true, then UpdatePlayerCameraRotation handles applying the HMD pose. Otherwise, PlayerCameraManager does it with ApplyHmdRotation</p> <p>GetCurrentOrientationAndPosition-&gt;Blueprint function Call to Get Current HMD Orientation + Position</p> <p>\u200b GetCurrentPose -&gt; Gets Current HMD Orientation + Position. Used by RT &amp; GT</p> <p>\u200b PoseToOrientationAndPosition -&gt; Converts from HMD Pose to Orientation + Position</p>"},{"location":"ue4guide/wip/unfinished/dear-angelica/","title":"Dear angelica","text":"<p>Oculus HMD Emulation</p> <p></p>"},{"location":"ue4guide/wip/unfinished/debug-canvas-rendering-and-drawing/","title":"Debug canvas rendering and drawing","text":"<p>Debug Canvas Rendering and drawing:</p> <p>UCanvasRenderTarget2</p> <p>OnCanvasRenderTargetUpdate</p> <p>UCanvas.DrawDebugGraph</p> <p>.K2_DrawText</p> <p>.K2_DrawTriangle</p> <p>.K2_DrawMaterialTriangle</p> <p>.K2_DrawBox</p> <p>void AActor::DisplayDebug(UCanvas* Canvas, const FDebugDisplayInfo&amp; DebugDisplay, float&amp; YL, float&amp; YPos)</p> <p>{</p> <p>\u200b FDisplayDebugManager&amp; DisplayDebugManager = Canvas-&gt;DisplayDebugManager;</p> <p>\u200b DisplayDebugManager.SetDrawColor(FColor(255, 0, 0));</p> <p>\u200b DrawString</p> <p>GEngine:bool IsStereoscopic3D(FViewport* InViewport = nullptr);</p> <p>// Render CPU thread and GPU frame times.</p> <p>\u200b const bool bStereoRendering = GEngine-&gt;IsStereoscopic3D(InViewport);</p> <p>\u200b UFont* Font = (!FPlatformProperties::SupportsWindowedMode() &amp;&amp; GEngine-&gt;GetMediumFont()) ? GEngine-&gt;GetMediumFont() : GEngine-&gt;GetSmallFont();</p> <p>\u200b // Note InX should already be within the safe zone</p> <p>\u200b int32 X3 = InX * (bStereoRendering ? 0.5f : 1.0f);</p> <p>==================================</p> <p>Perf Tab:</p> <p>Look at stat https://docs.unrealengine.com/latest/INT/Engine/Performance/StatCommands</p> <p>Debug Tab:</p> <p>Dev Settings</p> <p>Useful Commands</p> <p>Rendering</p> <p>-</p> <p>Gameplay</p> <p>-Show bounds</p> <p>-Other useful show flags (ShowFlagsValues.inl)</p> <p>Game Controls</p> <p>-Look at UBBCheat Manager &amp; UCheatManager to expose all those functions</p> <p>-Transition to next zone</p> <p>Editor Tab:</p> <p>\u200b -bShowFrameRateAndMemory</p> <p>\u200b -ULevelEditorPlaySettings.EnableSound</p> <p>======================</p> <p>UCanvasRenderTarget2</p> <p>OnCanvasRenderTargetUpdate</p> <p>UCanvas.DrawDebugGraph</p> <p>.K2_DrawText</p> <p>.K2_DrawTriangle</p> <p>.K2_DrawMaterialTriangle</p> <p>.K2_DrawBox</p> <p>void AActor::DisplayDebug(UCanvas* Canvas, const FDebugDisplayInfo&amp; DebugDisplay, float&amp; YL, float&amp; YPos)</p> <p>{</p> <p>\u200b FDisplayDebugManager&amp; DisplayDebugManager = Canvas-&gt;DisplayDebugManager;</p> <p>\u200b DisplayDebugManager.SetDrawColor(FColor(255, 0, 0));</p> <p>\u200b DrawString</p> <p>GEngine:bool IsStereoscopic3D(FViewport* InViewport = nullptr);</p> <p>// Render CPU thread and GPU frame times.</p> <p>\u200b const bool bStereoRendering = GEngine-&gt;IsStereoscopic3D(InViewport);</p> <p>\u200b UFont* Font = (!FPlatformProperties::SupportsWindowedMode() &amp;&amp; GEngine-&gt;GetMediumFont()) ? GEngine-&gt;GetMediumFont() : GEngine-&gt;GetSmallFont();</p> <p>\u200b // Note InX should already be within the safe zone</p> <p>\u200b int32 X3 = InX * (bStereoRendering ? 0.5f : 1.0f);</p> <p>==================================</p> <p>ENUM</p> <p>ENUM_RANGE_BY_FIRST_AND_LAST()</p> <p>ENUM_RANGE_BY_COUNT()</p> <p>ENUM_RANGE_BY_VALUES()</p> <p>//IMPORTANT! Different than exposing enums to bitflags for the engine</p> <p>ENUM_CLASS_FLAGS(EPropertyLocalizationGathererTextFlags);</p> <p>for (ECountedThing Val : TEnumRange&lt;ECountedThing&gt;())</p> <p>* {</p> <p>* ...</p> <p>* }</p> <p>UENUM(BlueprintType, meta=(Bitflags))</p> <p>enum class EBBShowDebugClasses : uint8 {</p> <p>Avatar,</p> <p>Legend,</p> <p>LegendView,</p> <p>StateMachine,</p> <p>};</p> <p>UENUM(BlueprintType, meta=(Bitflags))</p> <p>UPROPERTY(EditAnywhere, config, Category=Debug, meta=(Bitmask, BitmaskEnum=\"EBBShowDebugClasses\"))</p> <p>int32 P1ShowDebugClasses;</p> <p>if (P1ShowDebugClasses &amp; (1 &lt;&lt; (int32)EBBShowDebugClasses::Avatar))</p> <p>===================</p> <p>TActorRange</p> <p>for( ALight* Light : TActorRange&lt;ALight&gt;(GetWorld()) )</p> <p>=============</p> <p>bHiddenEdLevel = true;</p> <p>bHiddenEdLayer = true;</p> <p>bHiddenEd = true;</p> <p>bEditable = false;</p> <p>====================</p> <p>FDebugRenderSceneProxy</p> <p>FORCEINLINE void FlushPersistentDebugLines(const UWo</p> <p>FORCEINLINE void DrawDebugLine(const UWorld* InWorld</p> <p>FORCEINLINE void DrawDebugPoint(const UWorld* InWorl</p> <p>FORCEINLINE void DrawDebugDirectionalArrow(const UWo</p> <p>FORCEINLINE void DrawDebugBox(const UWorld* InWorld,</p> <p>FORCEINLINE void DrawDebugBox(const UWorld* InWorld,</p> <p>FORCEINLINE void DrawDebugCoordinateSystem(const UWo</p> <p>FORCEINLINE void DrawDebugCrosshairs(const UWorld* I</p> <p>FORCEINLINE void DrawDebugCircle(const UWorld* InWor</p> <p>FORCEINLINE void DrawDebugCircle(const UWorld* InWor</p> <p>FORCEINLINE void DrawDebug2DDonut(const UWorld* InWo</p> <p>FORCEINLINE void DrawDebugSphere(const UWorld* InWor</p> <p>FORCEINLINE void DrawDebugCylinder(const UWorld* InW</p> <p>FORCEINLINE void DrawDebugCone(const UWorld* InWorld</p> <p>FORCEINLINE void DrawDebugAltCone(const UWorld* InWo</p> <p>FORCEINLINE void DrawDebugString(const UWorld* InWor</p> <p>FORCEINLINE void DrawDebugFrustum(const UWorld* InWo</p> <p>FORCEINLINE void DrawDebugCapsule(const UWorld* InWo</p> <p>FORCEINLINE void DrawDebugCamera(const UWorld* InWor</p> <p>FORCEINLINE void FlushDebugStrings(const UWorld* InW</p> <p>FORCEINLINE void DrawDebugSolidBox(const UWorld* InW</p> <p>FORCEINLINE void DrawDebugSolidBox(const UWorld* InW</p> <p>FORCEINLINE void DrawDebugSolidBox(const UWorld* InW</p> <p>FORCEINLINE void DrawDebugMesh(const UWorld* InWorld</p> <p>FORCEINLINE void DrawDebugSolidPlane(const UWorld* I</p> <p>FORCEINLINE void DrawDebugSolidPlane(const UWorld* I</p> <p>FORCEINLINE void DrawDebugFloatHistory(UWorld const</p> <p>FORCEINLINE void DrawDebugFloatHistory(UWorld const</p> <p>FORCEINLINE void DrawDebugCanvas2DLine(UCanvas* Canv</p> <p>FORCEINLINE void DrawDebugCanvas2DLine(UCanvas* Canv</p> <p>FORCEINLINE void DrawDebugCanvas2DCircle(UCanvas* Ca</p> <p>FORCEINLINE void DrawDebugCanvasLine(UCanvas* Canvas</p> <p>FORCEINLINE void DrawDebugCanvasCircle(UCanvas* Canv</p> <p>FORCEINLINE void DrawDebugCanvasWireSphere(UCanvas*</p> <p>FORCEINLINE void DrawDebugCanvasWireCone(UCanvas* Ca</p> <p>---------------------------------------------------------</p> <p>#if WITH_EDITORONLY_DATA</p> <p>\u200b if (bVisualizeComponent &amp;&amp; SpriteComponent == nullptr &amp;&amp; GetOwner() &amp;&amp; !GetWorld()-&gt;IsGameWorld() )</p> <p>\u200b {</p> <p>\u200b // Create a new billboard component to serve as a visualization of the actor until there is another primitive component</p> <p>\u200b SpriteComponent = NewObject&lt;UBillboardComponent&gt;(GetOwner(), NAME_None, RF_Transactional | RF_Transient | RF_TextExportTransient);</p> <p>\u200b BillboardComponent-&gt;SetFlags(RF_Transactional);</p> <p>\u200b BillboardComponent-&gt;CreationMethod = EComponentCreationMethod::SimpleConstructionScript;</p> <p>SpriteComponent-&gt;Sprite = LoadObject&lt;UTexture2D&gt;(nullptr, TEXT(\"/Engine/EditorResources/EmptyActor.EmptyActor\"));</p> <p>SpriteComponent-&gt;RelativeScale3D = FVector(0.5f, 0.5f, 0.5f);</p> <p>SpriteComponent-&gt;Mobility = EComponentMobility::Movable;</p> <p>SpriteComponent-&gt;AlwaysLoadOnClient = false;</p> <p>SpriteComponent-&gt;bIsEditorOnly = true;</p> <p>SpriteComponent-&gt;SpriteInfo.Category = TEXT(\"Misc\");</p> <p>SpriteComponent-&gt;SpriteInfo.DisplayName = NSLOCTEXT( \"SpriteCategory\", \"Misc\", \"Misc\" );</p> <p>SpriteComponent-&gt;CreationMethod = CreationMethod;</p> <p>SpriteComponent-&gt;bIsScreenSizeScaled = true;</p> <p>SpriteComponent-&gt;bUseInEditorScaling = true;</p> <p>SpriteComponent-&gt;SetupAttachment(this);</p> <p>SpriteComponent-&gt;RegisterComponent();</p> <p>\u200b }</p> <p>#endif</p> <p>Anim Sequence:</p> <p>void UAnimSequence::GetBonePose(FTransformArrayA2&amp; OutAtoms, const FBoneContainer&amp; RequiredBones, const FAnimExtractContext&amp; ExtractionContext) const</p> <p>FTransform UAnimSequence::ExtractRootMotion(float StartTime, float DeltaTime, bool bAllowLooping) const</p> <p>ExtractRootMotionFromRange</p> <p>ExtractRootTrackTransform(</p> <p>GetBoneTransform(RootTransform, 0, Pos, bUseRawDataOnly);</p> <p>const FReferenceSkeleton&amp; RefSkeleton = MySkeleton-&gt;GetReferenceSkeleton();</p> <p>\u200b if( RefSkeleton.GetNum() &gt; 0 )</p> <p>\u200b {</p> <p>\u200b return RefSkeleton.GetRefBonePose()[0];</p> <p>\u200b }</p> <p>FAnimationRuntime::AdvanceTime(false, DesiredDeltaMove, CurrentPosition, SequenceLength);</p>"},{"location":"ue4guide/wip/unfinished/delegate-helper-funcs/","title":"Delegate helper funcs","text":"<p>Delegate Helper funcs</p> <p>DECLARE_DELEGAETE(OnModifiedDelegate)</p> <p>OnModifiedDelegate myDelegate;</p> <p>myDelegate.BindLambda</p> <p>myDelegate.BindRaw</p> <p>myDelegate.BindSP</p> <p>myDelegate.BindUObject</p> <p>myDelegate = OnModifiedDelegate::CreateLambda([]() {\u2026})</p> <p>myDelegate = OnModifiedDelegate::CreateRaw</p> <p>myDelegate = OnModifiedDelegate::CreateSP</p> <p>myDelegate = OnModifiedDelegate::CreateUObject</p> <p>SLATE ATTRIBUTES:</p> <p>Something defined as a</p> <p>\u200b SLATE_ATTRIBUTE( FMargin, ContentPadding )</p> <p>Can be bound with:</p> <p>\u200b .ContentPadding_Lambda([](){\u2026})</p> <p>Also any of these:</p> <p>AttrName_Lambda</p> <p>AttrName_Raw</p> <p>AttrName_Static</p> <p>AttrName_UObject</p> <p>AttrName(TSharedRef&lt;obj&gt;)</p> <p>Same with SLATE_EVENTS:</p> <p>\u200b SLATE_EVENT( FOnClicked, OnValueCommitted )</p> <p>Can be bound with:</p> <p>\u200b .OnClicked_Lambda(execFuncWithBool)</p> <p>Can also be set with a delegate:</p> <p>\u200b .OnClicked( FOnClicked::CreateLambda(..))</p>"},{"location":"ue4guide/wip/unfinished/dlc-architecture/","title":"Dlc architecture","text":"<p>Unreal Pak:</p> <ul> <li> <p>Tool to bundle assets into a pak file: https://answers.unrealengine.com/questions/105923/downloadable-content-1.html</p> </li> <li> <p>Streaming Pak file from network:</p> </li> <li> <p>https://answers.unrealengine.com/questions/109485/stream-an-asset-from-the-internet.html</p> </li> <li> <p>https://github.com/moritz-wundke/AsyncPackageStreamer</p> </li> </ul>"},{"location":"ue4guide/wip/unfinished/dlcs-patching/","title":"Dlcs patching","text":"<p>https://udn.unrealengine.com/questions/303722/achieve-patchable-episodic-content-on-ps4.html</p> <p>https://udn.unrealengine.com/questions/296265/dlc-flow-for-mutiple-platforms.html</p>"},{"location":"ue4guide/wip/unfinished/editor-only-actors-stripping-actors-from-cooking/","title":"Editor only actors stripping actors from cooking","text":"<p>Editor Only Actors &amp; Stripping actors from Cooking:</p> <p>https://udn.unrealengine.com/questions/258782/editor-only-actors-1.html</p> <p>https://udn.unrealengine.com/questions/303495/editor-only-object-referenced-by-editor-only-objec.html</p> <p>https://udn.unrealengine.com/questions/354858/editor-using-cooked-data.html</p> <p>https://udn.unrealengine.com/questions/173080/actor-visualisation-in-editor-only.html</p> <p>https://udn.unrealengine.com/questions/7035/editor-only-objects.html</p>"},{"location":"ue4guide/wip/unfinished/editor-settings-for-primitive-components/","title":"Editor settings for primitive components","text":"<p>bUseEditorCompositing = true;</p> <p>bIsEditorOnly = true;</p> <p>this-&gt;bTickInEditor</p> <p>this-&gt;bSelectable</p> <p>this-&gt;GetHiddenEditorViews()</p> <p>this-&gt;IsSelectedInEditor()</p> <p>this-&gt;IsVisibleInEditor()</p> <p>// Supplies the editor with a view specific to this component (think a view</p> <p>// from a camera components POV, etc.). Used for PIP preview windows.</p> <p>// @return True if the component overrides this, and fills out the view info output.</p> <p>virtual bool GetEditorPreviewInfo(float DeltaTime, FMinimalViewInfo&amp; ViewOut) override { return false; }</p> <p>///** Override delegate used for checking the selection state of a component */</p> <p>DECLARE_DELEGATE_RetVal_OneParam(bool, FSelectionOverride, const UPrimitiveComponent*);</p> <p>FSelectionOverride SelectionOverrideDelegate;</p>"},{"location":"ue4guide/wip/unfinished/editor-startup/","title":"Editor startup","text":""},{"location":"ue4guide/wip/unfinished/editor-startup/#editor-startup-process","title":"Editor startup process","text":"C++<pre><code>// Flow of the Editor startup process (Excerpt)\nWinMain\n  GuardedMain\n    FEngineLoop::PreInit\n      FEngineLoop::LoadCoreModules                      // CoreModule\u306e\u30ed\u30fc\u30c9\n      FEngineLoop::LoadPreInitModules                   // PreInitModule\u306e\u30ed\u30fc\u30c9\n      FEngineLoop::AppInit\n      UDeviceProfileManager::InitializeCVarsForActiveDeviceProfile          // DeviceProfile Cvar\u306e\u30ed\u30fc\u30c9\n      InitEngineTextLocalization                                            // Engine\u30ed\u30fc\u30ab\u30e9\u30a4\u30ba\u51e6\u7406\n        ApplyDefaultCultureSettings\n          FInternationalization::SetCurrentLanguageAndLocale                // Language/Locale\u8a2d\u5b9a\n        FTextLocalizationManager::LoadLocalizationResourcesForCulture       // \u30ed\u30fc\u30ab\u30e9\u30a4\u30ba\u30ea\u30bd\u30fc\u30b9\u30ed\u30fc\u30c9\n          FTextLocalizationManager::LoadLocalizationResourcesForPrioritizedCultures\n            FTextLocalizationManager::UpdateFromLocalizations\n      FWindowsPlatformSplash::Show                      // Splash\u8868\u793a\n      FInternationalization::LoadAllCultureData\n        FICUInternationalization::LoadAllCultureData\n      FShaderCompilingManager::FShaderCompilingManager  // (1) ShaderCompileWorker\u8d77\u52d5\n      CompileGlobalShaderMap                            // (2) GlobalShaderMap\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\n      CreateMoviePlayer                                 // \u8d77\u52d5\u7528MoviePlayer\u751f\u6210\n      InitGameTextLocalization                          //     Game\u30ed\u30fc\u30ab\u30e9\u30a4\u30ba\u51e6\u7406\n      FModuleManager::LoadModule                        // (3) AssetRegistry\u306e\u30ed\u30fc\u30c9\n      ProcessNewlyLoadedUObjects                        // (4) UObject/Enum/Struct/Property\u306e\u521d\u671f\u5316\u3068\u767b\u9332\n      LoadStartupCoreModules                            // (5) StartupCoreModule\u306e\u30ed\u30fc\u30c9\n      FProjectManager::LoadModulesForProject            // (6) LoadingScreenModule\u306e\u30ed\u30fc\u30c9\n      FPluginManager::LoadModulesForEnabledPlugins\n      FPlatformMisc::PlatformHandleSplashScreen         //     SplashScreen\u8868\u793a\n      FEngineLoop::LoadStartupModules                   // (7) StartupModule\u306e\u30ed\u30fc\u30c9\n      FUObjectArray::CloseDisregardForGC                //     DisregardForGC\u306eClose\n        FHighResScreenshotConfig::Init                  // (8) HighResScreenshotMaterial\u306e\u521d\u671f\u5316\n    EditorInit\n      FEngineLoop::Init                                 // (9) EngineLoop\u306e\u521d\u671f\u5316\n        UUnrealEdEngine::Init\n          UEditorEngine::Init\n            UEditorEngine::InitEditor\n              UEngine::Init\n                UEngine::InitializeHMDDevice            // Device\u521d\u671f\u5316\n                UEngine::InitializeEyeTrackingDevice\n                UEditorEngine::InitializeObjectReferences\n                UEngine::InitializeAudioDeviceManager\n            UGameUserSettings::LoadSettings\n            UGameUserSettings::ApplySettings\n          LoadPackage                                   // EditorResource\u30ed\u30fc\u30c9\n      FUnrealEdMisc::OnInit                             // (10) \u305d\u306e\u4ed6\u306e\u521d\u671f\u5316\n        FEditorFileUtils::LoadDefaultMapAtStartup\n          FEditorFileUtils::LoadMap                     // DefaultMap\u30ed\u30fc\u30c9 (\u8a73\u7d30\u306f3.\u7ae0\u53c2\u7167)\n      UEngine::Start\n        FWindowsPlatformSplash::Hide                    // Splash\u975e\u8868\u793a\n</code></pre> <p>From https://qiita.com/donbutsu17/items/be66551c48360d7b0864</p> #ProgressWork100-09<p>Load TargetPlatformModule Load </p><p>Target Platform Module</p>210-39<p>Load </p><p>shader (.usf) included in compiled Enigne content of GlobalShaderMap</p>340-44<p>Load AssetRegistry Load </p><p>all compiled properties (UStruct etc)</p>Four45-49Load resident object for DisregardForGCFive50-59<p>Generation of LoadEngine </p><p>definition object of StartupCoreModule</p>660-69Loading Loading Screen Module770-74<p>Generation of </p><p>object of load project definition of StartupModule</p>875-79Initialization of HighResScreenshotMaterial980-89<p>Loading EngineLoop initialization </p><p>configuration file, etc.</p>Ten90-100Load other initialization boot map <p>From https://qiita.com/donbutsu17/items/be66551c48360d7b0864</p>"},{"location":"ue4guide/wip/unfinished/editor-startup/#levelopen-processing","title":"LevelOpen processing","text":"C++<pre><code>// Process flow when selecting Level asset from ContentBrowser by double-clicking (excerpt)\n// ContentBrowser\u304b\u3089Level\u30a2\u30bb\u30c3\u30c8\u3092\u30c0\u30d6\u30eb\u30af\u30ea\u30c3\u30af\u3067\u9078\u629e\u3057\u305f\u969b\u306e\u51e6\u7406\u306e\u6d41\u308c(\u629c\u7c8b)\nSContentBrowser::OnAssetsActivated\n  FAssetTypeActions_Base::AssetsActivated\n    FAssetEditorManager::OpenEditorForAsset\n      FEditorFileUtils::LoadMap                             // \u30de\u30c3\u30d7\u306e\u30ed\u30fc\u30c9\u958b\u59cb\n        UUnrealEdEngine::Exec\n          UEditorEngine::Exec\n            UEditorEngine::HandleMapCommand\n              UEditorEngine::Map_Load\n                UEditorEngine::EditorDestroyWorld           // \u5148\u306b\u73fe\u5728\u306eWorld\u3092\u7834\u68c4\n                  UWorld::ClearWorldComponents\n                    ULevel::ClearLevelComponents\n                      AActor::UnregisterAllComponents       // \u73fe\u5728\u306eWorld\u306e\u5168\u3066\u306eComponent\u3092\u767b\u9332\u89e3\u9664\n                  UWorld::DestroyWorld\n                    UWorld::CleanupWorld\n                      UWorld::ClearWorldComponents\n                        ULevel::ClearLevelComponents\n                          AActor::UnregisterAllComponents   // \u9077\u79fb\u5148\u306eWorld\u306eComponent\u306e\u30ea\u30bb\u30c3\u30c8\n                    UEngine::WorldDestroyed\n                UWorld::UpdateWorldComponents               // \u65b0\u3057\u3044World\u306eComponent\u66f4\u65b0\n                  ULevel::UpdateLevelComponents\n                    ULevel::IncrementalUpdateComponents\n                      AActor::PreRegisterAllComponents\n                      AActor::RerunConstructionScripts\n                        AActor::IncrementalRegisterComponents\n                          AActor::RegisterAllActorTickFunctions\n                          UActorComponent::RegisterComponentWithWorld\n                    UWorld::UpdateCullDistanceVolumes\n                UWorld::FlushLevelStreaming                 // \u73fe\u5728\u306eWorld\u60c5\u5831\u306e\u66f4\u65b0\n                  UWorld::UpdateLevelStreaming\n                    ULevelStreaming::UpdateStreamingState\n                      UWorld::AddToWorld                    // \u65b0\u3057\u3044World\u306eSubLevel\u3092\u8ffd\u52a0\n                        ULevel::IncrementalUpdateComponents\n                          SortActorsHierarchy\n                          AActor::PreRegisterAllComponents\n                          AActor::RerunConstructionScripts\n                            AActor::IncrementalRegisterComponents\n                              AActor::RegisterAllActorTickFunctions\n                              UActorComponent::RegisterComponentWithWorld\n                UEngine::WorldAdded\n                CollectGarbage                              // \u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\n        UUnrealEdEngine::Exec\n          UEditorEngine::Exec\n            UEditorEngine::HandleMapCommand\n              UEditorEngine::Map_Check\nContentBrowserUtils::OpenEditorForAsset\n</code></pre> <p>From https://qiita.com/donbutsu17/items/be66551c48360d7b0864</p>"},{"location":"ue4guide/wip/unfinished/editor-startup/#pie-processing","title":"PIE Processing","text":"C++<pre><code>// PIE\u8d77\u52d5\u3057\u305f\u969b\u306e\u51e6\u7406\u306e\u6d41\u308c(\u629c\u7c8b)\nUEditorEngine::PlayInEditor\n  UEditorEngine::CreatePIEGameInstance\n    UGameInstance::InitializeForPlayInEditor\n      UEditorEngine::CreatePIEWorldByDuplication\n        UEditorEngine::PostCreatePIEWorld\n          UWorld::InitWorld\n    UGameInstance::StartPlayInEditorGameInstance\n      UWorld::FlushLevelStreaming                           // AlwaysLoaded\u306eSubLevel\u3092\u8d77\u52d5\n        UWorld::UpdateLevelStreaming\n          ULevelStreaming::UpdateStreamingState\n            UWorld::AddToWorld                              // SubLevel\u8ffd\u52a0\n              ULevel::IncrementalUpdateComponents\n                AActor::PreRegisterAllComponents\n                  AActor::RerunConstructionScripts\n                    AActor::IncrementalRegisterComponents\n                      AActor::RegisterAllActorTickFunctions\n                        UActorComponent::RegisterComponentWithWorld\n      UWorld::InitializeActorsForPlay\n        ULevel::RouteActorInitialize\n          AActor::PreInitializeComponents                   // World\u4e0a\u306e\u5168Component\u767b\u9332\n          AActor::InitializeComponents\n            UActorComponent::Activate\n            UActorComponent::InitializeComponent\n          AActor::PostInitializeComponents\n          AActor::UpdateOverlaps\n      ULocalPlayer::SpawnPlayActor\n        UWorld::SpawnPlayActor                              // Player\u751f\u6210\n          AGameModeBase::Login\n            AGameModeBase::SpawnPlayerController\n              AGameModeBase::SpawnPlayerController\n                AGameModeBase::SpawnPlayerControllerCommon\n                  UGameplayStatics::FinishSpawningActor\n                    AActor::FinishSpawning\n                      AActor::ExecuteConstruction\n                        AActor::ProcessUserConstructionScript\n                          AActor::UserConstructionScript    // BP Construction Script\n      UWorld::BeginPlay\n        AGameStateBase::HandleBeginPlay\n          AWorldSettings::NotifyBeginPlay                   // World\u306b\u5b58\u5728\u3059\u308b\u5168Actor\u306e\u8d77\u52d5\n            AActor::DispatchBeginPlay\n              AActor::BeginPlay                             // Tick\u8d77\u52d5\u3068Component\u8d77\u52d5\n                AActor::RegisterAllActorTickFunctions\n                UActorComponent::RegisterAllComponentTickFunctions\n                UActorComponent::BeginPlay\n                AActor::ReceiveBeginPlay\n</code></pre> <p>From https://qiita.com/donbutsu17/items/be66551c48360d7b0864</p>"},{"location":"ue4guide/wip/unfinished/encryption/","title":"Encryption","text":"<p>UE does support optional network encryption now (as of 4.18), but unfortunately we don't have much documentation on how to use it yet. There's some info on it in this thread: https://udn.unrealengine.com/questions/382538/udp-encryption-on-xbox-one.html</p> <p>Basically, you need to:</p> <ol> <li> <p>Configure the EncryptionComponent of the PacketHandler system to be the AESHandlerComponent.</p> </li> <li> <p>Add an \"?EncryptionToken=\" option to the URL clients use to connect to the game server.</p> </li> <li> <p>Override ReceivedNetworkEncryptionToken and ReceivedNetworkEncryptionAck in a UGameInstance subclass.</p> </li> <li> <p>Once this negotiation completes, all future traffic will be encrypted.</p> </li> </ol> <p>The token that's passed as the URL option should not be the actual encryption key, since this string will not be encrypted. What you can do is use the token to look up the actual key, possibly from your own web service, and use this key in the parameters to the delegates for ReceivedNetworkEncryptionToken and ReceivedNetworkEncryptionAck.</p> <p>From https://udn.unrealengine.com/questions/443027/visibility-of-the-data-during-multiplayer-networki.html</p>"},{"location":"ue4guide/wip/unfinished/epicnick-854-pm-with-respect-to-blueprints-the-only-strong-refs-are-the-variables-you-create-and-references-to-components/","title":"Epicnick 854 pm with respect to blueprints the only strong refs are the variables you create and references to components","text":""},{"location":"ue4guide/wip/unfinished/epicnick-854-pm-with-respect-to-blueprints-the-only-strong-refs-are-the-variables-you-create-and-references-to-components/#epicnick-854-pm","title":"epicnick [[*8:54 PM]*]","text":"<p>with respect to blueprints, the only strong refs are the variables you create, and references to components</p> <p>[[*8:54]*]</p> <p>the intermediates in the event graph use weak object pointers, so an intermediate result won't necessarily keep an object alive</p> <p>[[*8:54]*]</p> <p>at a class level, classes can override AddReferencedObjects to hold on to references to things not reflected through the normal UProperty hierarchy</p> <p>2</p> <p>[[*8:55]*]</p> <p>that's the biggest point of divergence for some of the native classes</p>"},{"location":"ue4guide/wip/unfinished/epicnick-854-pm-with-respect-to-blueprints-the-only-strong-refs-are-the-variables-you-create-and-references-to-components/#ikrima859-pm","title":"[ikrima][[*8:59 pm]*]","text":"<p>[@epicnick][]: Gotcha; and to double check, all UPROPERTY markups turn naked pointer references to UObjects to strong references?</p>"},{"location":"ue4guide/wip/unfinished/epicnick-854-pm-with-respect-to-blueprints-the-only-strong-refs-are-the-variables-you-create-and-references-to-components/#epicnickepicnick-859-pm2","title":"[epicnick][@epicnick] [[*8:59 PM]*][2]","text":"<p>All EXCEPT TWeakObjPtr UPROPERTIES</p> <p>[[*8:59]*]</p> <p>but yup, that is correct</p> <p>From https://ue4vr.slack.com/messages/techtalk/search/garbage</p>"},{"location":"ue4guide/wip/unfinished/fpathsgetpathfilename/","title":"Fpathsgetpathfilename","text":"<p>UFactory::CurrentFilename</p> <p>FlushRenderingCommands();</p> <p>FPlatformTime::Seconds();</p> <p>FPlatformTime::Cycles();</p> <p>SObjectTools::SanitizeObjectName</p> <p>MarkPackageDirty();</p> <p>QUICK_SCOPE_CYCLE_COUNTER</p> <p>FRHICommandList</p> <p>From https://docs.unrealengine.com/latest/INT/API/Runtime/RHI/FRHICommandList/index.html</p> <p>FRenderCommandFence</p> <p>GetNumPendingFences</p> <p>From https://docs.unrealengine.com/latest/INT/Programming/Rendering/ThreadedRendering/index.html</p> <p>PrimaryActorTick.bCanEverTick = true;</p> <p>PrimaryActorTick.bStartWithTickEnabled = false;</p> <p>From https://www.unrealengine.com/blog/how-to-improve-game-thread-cpu-performance</p> <p>class FLayoutUV</p> <ul> <li>Handles generating lightmap Uvs</li> </ul> <p>FMeshUtilities::CacheOptimizeVertexAndIndexBuffer</p> <ul> <li>Optimizes the VertexBuffer/IndexBuffer by re-ordering Indices for post-transform cache and then re-orders the indices to be coherent along with the vertex array so its optimized for the pre-transform cache</li> </ul> <p>void FRenderCommandFence::BeginFence()</p> <p>FString MeshName = ObjectTools::SanitizeObjectName(InName.ToString());</p> <p>Error reporting in asset importer/factory:</p> <p>[FFeedbackContext*]        Warn-&gt;BeginSlowTask( NSLOCTEXT(\"FbxFactory\", \"BeginImportingFbxMeshTask\", \"Importing FBX mesh\"), true );</p> <p>Warn-&gt;Log(ELogVerbosity::Error, FbxImporter-&gt;GetErrorMessage() );</p> <p>Create a uasset file:</p> <p>NewPackageName = FPackageName::GetLongPackagePath(Parent-&gt;GetOutermost()-&gt;GetName()) + TEXT(\"/\") + MeshName;                 NewPackageName = PackageTools::SanitizePackageName(NewPackageName);                 Package = CreatePackage(NULL, *NewPackageName);</p> <p>StaticMesh = new(Package,FName(*MeshName),Flags|RF_Public) UStaticMesh(FPostConstructInitializeProperties());</p> <p>Creating Mesh Material:</p> <p>void UnFbx::FFbxImporter::CreateUnrealMaterial(FbxSurfaceMaterial&amp; FbxMaterial, TArray&lt;UMaterialInterface*&gt;&gt; OutMaterials, TArray&lt;FString&gt;&gt; UVSets)</p> <p>Mesh Data:</p> <p>UStaticMesh - UE4 Uobject that's placed in the world</p> <ul> <li> <p>Contains SourceModels[LOD Index] which holds FStaticMeshSourceModel objects at different LODS</p> </li> <li> <p>FStaticMeshSourceModel - They are struct that contain the mesh data</p> <ul> <li> <p>FStaticMeshSourceModel::RawMeshBulkData - Editor only class] that manages raw mesh data</p> </li> <li> <p>Handles Serialization, Loading, Saving of a FRawMesh</p> </li> <li> <p>FRawMeshBulkData::Load(rawMeshObject) takes data from FRawMeshBulkData editor class and deserializes it into a rawMesh</p> </li> <li> <p>FRawMeshBulkData:Save(rawMeshObject) serializes rawMesh into its FRawMeshBulkData data structure</p> </li> <li> <p>FrawMesh</p> </li> <li> <p>Holds actual mesh data (vert colors, positions, tangents, per face material index)</p> </li> <li> <p>Face - A single polygon in the mesh. Currently all code assumes this is a triangle but conceptually any polygon would do.</p> </li> <li> <p>Corner - Each face has N corners. As all faces are currently triangles, N=3.</p> </li> <li> <p>Wedge - Properties stored for each corner of each face. Index with FaceIndex * NumCorners + CornerIndex.</p> </li> <li> <p>Vertex - Properties shared by overlapping wedges of adjacent polygons. Typically these properties relate to position. Index with VertexIndices[WedgeIndex].</p> </li> </ul> </li> <li> <p>FStaticMeshRenderData contains all of the actual render data to render a mesh</p> </li> <li> <p>FStaticMeshRenderData::LODResources is an array of the different FStaticMeshLODResources that perform the actual rendering</p> <ul> <li>FStaticMeshLODResources</li> </ul> </li> </ul> <p>struct FStaticMeshSourceModel</p> <p>class FRawMeshBulkData</p> <p>void FRawMeshBulkData::Serialize(FArchive&amp; Ar, UObject* Owner)</p> <p>void FRawMeshBulkData::SaveRawMesh(FRawMesh&amp; InMesh)</p> <p>void FRawMeshBulkData::LoadRawMesh(FRawMesh&amp; OutMesh)</p> <p>SetupActorComponentTickFunction(&amp;PostPhysicsComponentTick) PostPhysicsComponentTick.AddPrerequisite(this,PrimaryComponentTick); Can actually set tick functions that with prereqs into the job queue</p>"},{"location":"ue4guide/wip/unfinished/fpathsgetpathfilename/#ue4-macros","title":"UE4 Macros:","text":"<p>ensure()</p> <p>check()</p> <p>UE_LOG()</p> <p>Warn-&gt;BeginSlowTask()</p>"},{"location":"ue4guide/wip/unfinished/fpathsgetpathfilename/#misc","title":"Misc:","text":"<p>ConstructObject&lt;&gt;() vs. FactoryCreateNew():</p> <ul> <li> <p>ConstructObject = UE4 way of using new</p> </li> <li> <p>FactoryCreateNew() actually creates the object properly. If something has a Factory, you should probably use that to create new (e.g. UMaterialFactoryNew::FactoryCreateNew() to create a new Material</p> </li> <li> <p>Underneath the covers, it uses ConstructObject and then initializes it properly</p> </li> </ul> <p>A component is a type of subobject, as you say. Here is how the names are generally used in the UE4 codebase:</p> <p>A subobject is any UObject that has an Outer that is not a UPackage. UPackages are the top level of the hierarchy, and refer to a .uasset file on disk, or the transient package. For instance, AActors are subobjects in a ULevel, which is a subobject in a UWorld, which is a subobject in a UPackage. So they can be nested arbitrarily. Most assets like Meshes, textures, etc are not sub objects as they are nested directly inside a UPackage.</p> <p>A component is anything that is a subclass of UActorComponent, and is a subobject of UActor. We don't have any components that are not ActorComponents.</p> <p>From https://forums.unrealengine.com/showthread.php?275-Subobjects-vs-Components</p>"},{"location":"ue4guide/wip/unfinished/fpathsgetpathfilename/#archive-serialization","title":"Archive Serialization:","text":"<ul> <li> <p>Bidrectional &lt;&lt; operator is overloaded. Has bi-directional meaning. Depending on the FArchive,&lt;&lt; may either write stuff into the FArchive (e.g. FMemoryWriter) or may read stuff from it (e.g. FBufferReader)</p> </li> <li> <p>This way serialization in/out of an archive can use the same code path</p> </li> </ul>"},{"location":"ue4guide/wip/unfinished/fpathsgetpathfilename/#mesh-building-class","title":"Mesh Building Class:","text":"<ul> <li> <p>MeshUtilities.cpp contains all of the actual code to build mesh, compute normals, get rid of degenerates, create LOD groups, etc</p> </li> <li> <p>Called by UStaticMesh::Build() -&gt; FStaticMeshRenderData()::Cache()-&gt;FMeshUtilities::BuildStaticMesh()</p> </li> </ul> <p>TArray&lt;FMatrix&gt;&gt; ReferenceToLocalMatrices = DynamicData-&gt;ReferenceToLocal;                         const int32 NumReferenceToLocal = ReferenceToLocalMatrices.Num();                         for( int32 BoneIdx=0; BoneIdx &lt; NumBones; BoneIdx++ )                         {                                 FPlatformMisc::Prefetch( ChunkMatrices.GetTypedData() + BoneIdx + PreFetchStride );                                  FPlatformMisc::Prefetch( ChunkMatrices.GetTypedData() + BoneIdx + PreFetchStride, CACHE_LINE_SIZE );                                  FPlatformMisc::Prefetch( ReferenceToLocalMatrices.GetTypedData() + BoneIdx + PreFetchStride );                                 FPlatformMisc::Prefetch( ReferenceToLocalMatrices.GetTypedData() + BoneIdx + PreFetchStride, CACHE_LINE_SIZE );</p> <p>FBoneSkinning&amp; BoneMat = ChunkMatrices[BoneIdx];                                 const FBoneIndexType RefToLocalIdx = Chunk.BoneMap[BoneIdx];                                 const FMatrix&amp; RefToLocal = ReferenceToLocalMatrices[RefToLocalIdx];                                 RefToLocal.To3x4MatrixTranspose( (float*)BoneMat.M );                         }</p> <p>AStaticMeshActor &gt; UStaticMeshComponent &gt; UStaticMesh &amp; FStaticMeshSceneProxy</p> <p>File Management:</p> <p>https://wiki.unrealengine.com/File_Management,_Create_Folders,_Delete_Files,_and_More</p> <p>Logging:</p> <p>https://wiki.unrealengine.com/Logs,_Printing_Messages_To_Yourself_During_Runtime</p> <p>Look at UParticleSystemComponent to model Abc Cache</p> <p>Even when using parent-relative transform values, it is still possible to set translation and rotation using absolute world values via the methods shown below:</p> FunctionDescriptionSceneComponent::SetWorldLocation()Set the relative translation of this Component to put it at the supplied location in world space.SceneComponent::SetWorldRotation()Set the relative rotation of this Component to put it at the supplied orientation in world space. <p>From https://docs.unrealengine.com/latest/INT/Programming/UnrealArchitecture/Actors/Components/index.html</p> <p>GetDynamicMeshElements</p> <ul> <li> <p>Replacing DrawDynamicElements</p> </li> <li> <p>FPrimitiveSceneProxy::PreRenderView / DrawDynamicElements refactored into GetDynamicMeshElements.</p> </li> <li> <p>Both paths still exist in code during this transition. The GetDynamicMeshElements path is currently disabled, enable with 'r.UseGetDynamicMeshElements 1'.</p> </li> <li> <p>GetDynamicMeshElements is called once in InitViews, and the resulting meshes are used in various passes.</p> </li> <li> <p>GetDynamicMeshElements is const and must not modify the proxy, update work should be pushed to the proxy from the game thread.</p> </li> <li> <p>GetDynamicMeshElements can be called on views that are not in the view family, which allows a proper view for shadow depth passes.</p> </li> </ul> <p>Asynchronous</p> <p>The primary method of communication between the two threads is through the ENQUEUE_UNIQUE_RENDER_COMMAND_XXXPARAMETER macro. This macro creates a local class with a virtual Execute function that contains the code you enter into the macro. The game thread inserts the command into the rendering command queue, and the rendering thread calls the Execute function when it gets around to it.</p> <p>FRenderCommandFence provides a convenient way to track the progress of the rendering thread on the game thread. The game thread calls FRenderCommandFence::BeginFence to begin the fence. The game thread can then call FRenderCommandFence::Wait to block until the rendering thread has processed the fence, or it can just poll the progress of the rendering thread by checking GetNumPendingFences. When GetNumPendingFences returns 0, the rendering thread has processed the fence.</p> <p>From https://docs.unrealengine.com/latest/INT/Programming/Rendering/ThreadedRendering/index.html</p> <p>ENQUEUE_UNIQUE_RENDER_COMMAND_ONEPARAMETER(TypeName,ParamType1,ParamName1,ParamValue1,Code)</p> <ul> <li>Each parameter needs 3 things: type, param name to reference inside the \"anonymous function\", parameter value to initialize</li> </ul> <p>Normalized Data Types expect you to store the actual value (e.g. 0 - 255, or 0 - 32768)</p> <p>FName</p> <p>When you name a new asset in the Content Browser, change a parameter in a Dynamic Material Instance, or access a bone in a Skeletal Mesh, you are using FNames. FNames provide a very lightweight system for using strings, where a given string is stored only once in a data table, even if it is reused. FNames are case-insensitive. They are immutable, and cannot be manipulated. The storage system and static nature of FNames means that it is fast to look up and access FNames with keys. Another feature of the FName subsystem is the use of a hash table to provide fast string to FName conversions.</p> <ul> <li>[FName Reference Guide]</li> </ul> <p>FText</p> <p>FText represents a \"display string\". Any text you want to display to the user should be handled with FText. The FText class has built-in support for localization, and can handle text content that is localized and stored in a lookup table, as well as text that is localized at runtime, such as numbers, dates, times, and formatted text. Even text that does not need to be localized can be handled with FText. This includes user-entered content such as a player's name, and any text displayed with Slate. FText does not offer any mutation functions, because making changes to display strings is a very unsafe operation.</p> <ul> <li>[FText Reference Guide]</li> </ul> <p>FString</p> <p>Unlike FName and FText, FString is the only string class that allows for manipulation. There are many methods available for string manipulation, including case changing, excerpting substrings, and reversing. FStrings can be searched, modified, and compared against other strings. However, these manipulations can make FStrings more expensive than the immutable string classes.</p> <p>From https://docs.unrealengine.com/latest/INT/Programming/UnrealArchitecture/StringHandling/index.html</p> <p>There is a lot of rendering code in UE4 so it is hard to get a quick high level view of what is going on. A good place to start reading through the code is FDeferredShadingSceneRenderer::Render, which is where a new frame is rendered on the rendering thread. It is also useful to do a 'profilegpu' command and look through the draw events. You can then do a Find in Files in Visual Studio on the draw event name to find the corresponding C++ implementation.</p> <p>From https://docs.unrealengine.com/latest/INT/Programming/Rendering/index.html</p> <p>Material classes</p> ClassDescriptionFMaterialAn interface to a material used for rendering. Provides access to material properties (e.g. blend mode). Contains a shader map used by the renderer to retrieve individual shaders.FMaterialResourceUMaterial's implementation of the FMaterial interface.FMaterialRenderProxyA material's representation on the rendering thread. Provides access to an FMaterial interface and the current value of each scalar, vector, and texture parameter.UMaterialInterface[abstract] Game thread interface for material functionality. Used to retrieve the FMaterialRenderProxy used for rendering and the UMaterial that is used as the source.UMaterialA material asset. Authored as a node graph. Computes material attributes used for shading, sets blend mode, etc.UMaterialInstance[abstract] An instance of a UMaterial. Uses the node graph in the UMaterial but provides different parameters (scalars, vectors, textures, static switches). Each instance has a parent UMaterialInterface. Therefore a material instance's parent may be a UMaterial or another UMaterialInstance. This creates a chain that will eventually lead to a UMaterial.UMaterialInstanceConstantA UMaterialInstance that may only be modified in the editor. May provide scalar, vector, texture, and static switch parameters.UMaterialInstanceDynamicA UMaterialInstance that may be modified at runtime. May provide scalar, vector, and texture parameters. It cannot provide static switch parameters and it cannot be the parent of another UMaterialInstance. <p>From https://docs.unrealengine.com/latest/INT/Programming/Rendering/index.html</p> <p>Primitive components are the basic unit of visibility and relevance determination. For example, occlusion and frustum culling happen on a per-primitive basis. Therefore it is important when designing a system to think about how big to make components. Each component has a bounds that is used for various operations like culling, shadow casting, and light influence determination.</p> <p>From https://docs.unrealengine.com/latest/INT/Programming/Rendering/index.html</p> <p>Parallel Task evaluation:</p> <p>// start parallel work                 FGraphEventRef EvaluationTickEvent = TGraphTask&lt;FParallelAnimationEvaluationTask&gt;::CreateTask().ConstructAndDispatchWhenReady(this);</p> <p>// set up a task to run on the game thread to accept the results                 FGraphEventArray Prerequistes;                 Prerequistes.Add(EvaluationTickEvent);                 FGraphEventRef TickCompletionEvent = TGraphTask&lt;FParallelAnimationCompletionTask&gt;::CreateTask(&amp;Prerequistes).ConstructAndDispatchWhenReady(this);</p> <p>TickFunction-&gt;GetCompletionHandle()-&gt;DontCompleteUntil(TickCompletionEvent);</p>"},{"location":"ue4guide/wip/unfinished/gameplay/","title":"Gameplay","text":"<p>3 different controller rotations:</p> <ul> <li> <p>Player Controller Rotation: The aim rotation (e.g. where you are targeting)</p> </li> <li> <p>Camera rotation: Where the camera's pointing, can be different from PC b/c of 3<sup>rd</sup> person</p> </li> <li> <p>Pawn Rotation: Can be different from PC or Camera. Pawn may not visually change rotation (e.g. missile turret aiming system where missile turret doesn't change rotation)</p> </li> </ul> <p>Camera responsibility chain from top to bottom:</p> <p>PlayerCameraManager is class responsible for managing camera for a particular player</p> <ul> <li> <p>Generally won't need to update it</p> </li> <li> <p>Responsible for computing final camera properties used by renderer &amp; other systems</p> </li> <li> <p>Can compute it directly or blend between different ones (e.g. linear blend from one cameractor to another)</p> </li> <li> <p>Primary external responsibility is Get*() functions (e.g. GetCameraViewPoint)</p> </li> <li> <p>Can apply effects such as camera animations, shakes, post-process effects, dirt on lens</p> </li> <li> <p>Maintains ViewTarget which encapsulates minimal camera info (e.g. primary actor associated with camera, player controller, perspective, fov, etc)</p> </li> </ul> <p>ViewTarget is encapsulates data responsible for the camera viewpoint</p> <ul> <li> <p>Tracks primary actor associated with camera, player state, player controller</p> </li> <li> <p>Also tracks camera properties such as fov, clip planes, etc</p> </li> </ul> <p>Actor/PlayerController</p> <ul> <li> <p>CalcCamera function returns first CameraComponent if it exists &amp;&amp; bFindCameraComponentWhenViewTarget == true</p> </li> <li> <p>If not, returns the actor's view rotation &amp; position</p> </li> <li> <p>Pawns: bTakeCameraControlWhenPossessed allows them to auto overtake ViewTarget when possessed</p> </li> </ul> <p>You can control when an actor ticks:</p> <ul> <li>Each actor has a ETickingGroup that can define when it will tick</li> </ul> <p>UENUM(BlueprintType)   enum ETickingGroup   {           /** Any item that needs to be executed before physics simulation starts. */           TG_PrePhysics UMETA(DisplayName=\"Pre Physics\"),</p> <p>/** Special tick group that starts physics simulation. */                                                                   TG_StartPhysics UMETA(Hidden, DisplayName=\"Start Physics\"),</p> <p>/** Any item that can be run in parallel with our physics simulation work. */           TG_DuringPhysics UMETA(DisplayName=\"During Physics\"),</p> <p>/** Special tick group that ends physics simulation. */         TG_EndPhysics UMETA(Hidden, DisplayName=\"End Physics\"),</p> <p>/** Any item that needs physics to be complete before being executed. */           TG_PreCloth UMETA(Hidden, DisplayName=\"Pre Cloth\"),</p> <p>/** Any item that needs to be updated after rigid body simulation is done, but before cloth is simulation is done. */           TG_StartCloth UMETA(Hidden, DisplayName = \"Start Cloth\"),</p> <p>/** Any item that needs rigid body and cloth simulation to be complete before being executed. */           TG_PostPhysics UMETA(DisplayName=\"Post Physics\"),</p> <p>/** Any item that needs the update work to be done before being ticked. */           TG_PostUpdateWork UMETA(DisplayName=\"Post Update Work\"),</p> <p>/** Special tick group that ends cloth simulation. */           TG_EndCloth UMETA(Hidden, DisplayName=\"End Cloth\"),</p> <p>/** Special tick group that is not actually a tick group. After every tick group this is repeatedly re-run until there are no more newly spawned items to run. */           TG_NewlySpawned UMETA(Hidden, DisplayName=\"Newly Spawned\"),</p> <p>TG_MAX,   };</p> <ul> <li>You can also specify dependencies based on other components by calling AddTickPrerequisiteComponent() or AddTickPrerequisiteActor()</li> </ul>"},{"location":"ue4guide/wip/unfinished/geditor-requestplaysession/","title":"Geditor requestplaysession","text":"<p>GEditor-&gt;RequestPlaySession(false, VREditorLevelViewportWeakPtr.Pin(), true /*bSimulateInEditor*/, StartLoc, StartRot, -1);</p> <p>#if WITH_EDITOR</p> <p>\u200b extern UNREALED_API UEditorEngine* GEditor;</p> <p>\u200b return GIsEditor &amp;&amp; (GEditor-&gt;bIsSimulateInEditorQueued || GEditor-&gt;bIsSimulatingInEditor);</p> <p>#endif</p> <p>/** Sent when a PIE session has fully started and after BeginPlay() has been called */</p> <p>static FOnPIEEvent PostPIEStarted;</p>"},{"location":"ue4guide/wip/unfinished/how-to-view-specific-data-in-idetailcustomization/","title":"How to \"View Specific\" Data In IDetailCustomization?","text":"<p>From https://udn.unrealengine.com/questions/417836/how-to-view-specific-data-in-idetailcustomization.html</p> <p>If I'm understanding correctly, you want to select an item from the list on the left and have the widget on the right refresh to display it's properties? In that case, when you create your custom widget, you can use the .expose argument to save off a pointer. You'll then be able to access your custom widget and update it as needed without having to refresh the full details panel. You can take a look at SlateBrushCustomization for an example of how that's done.</p> <p>+SOverlay::Slot()</p> <p>.Padding( FMargin( ImagePadding ) )</p> <p>.Expose( OverlaySlot )</p> <p>[</p> <p>SNew( SImage )</p> <p>.Image( InArgs._SlateBrush )</p> <p>]</p> <p>From https://udn.unrealengine.com/questions/417836/how-to-view-specific-data-in-idetailcustomization.html</p>"},{"location":"ue4guide/wip/unfinished/how-vr-camera-transform-gets-applied/","title":"How vr camera transform gets applied","text":"<p>void UCameraComponent::GetCameraView(float DeltaTime, FMinimalViewInfo&amp; DesiredView)</p> <p>[5:52]</p> <p>in there</p> <p>[5:53]</p> <p>force the scale to 1, or the inverse of your actor's scale</p> <p>[5:53]</p> <p>usually that case is handle through world to meters scale</p> <p>[5:53]</p> <p>are you modifying that at all?</p> <p>[5:53]</p> <p>because that would be the other path</p> <p>[5:54]</p> <p>modifying w2m with the scale of the actor</p> <p>[5:54]</p> <p>which is easier</p> <p>[5:54]</p> <p>that would scale the IPD</p> <p>[5:54]</p> <p>and the camera's motion</p> <p>[5:54]</p> <p>so if you're scaling up your actor 2x, scale the world to meters scale 2x as well</p> <p>so is GetCameraView() where the actual viewmatrix gets calculated?</p>"},{"location":"ue4guide/wip/unfinished/how-vr-camera-transform-gets-applied/#epicnick-607-pm","title":"epicnick [6:07 PM]","text":"<p>don't have the code open at the moment, but it grabs the view matrices twice</p> <p>[6:07]</p> <p>the head pose is used to update the cameracomponent in the function i pasted above, that gets the gross movement</p> <p>[6:07]</p> <p>and then CalculateStereoViewOffset gets the offsets per eye</p> <p>[6:08]</p> <p>and the view matrices are updated again in PreRenderViewFamily_RenderThread</p> <p>[6:08]</p> <p>and updated per eye in PreRenderView_RenderThread</p>"},{"location":"ue4guide/wip/unfinished/jumping-character-movement-functionality-double-jump-extended-jump/","title":"Jumping character movement functionality double jump extended jump","text":"<p>Jumping Character Movement Functionality Double Jump Extended Jump:</p> <ul> <li>https://www.youtube.com/watch?v=SlAqhhZcfMc&amp;list=PLZlv_N0_O1gaG5BW72It4chjhypxIO9ZB&amp;index=59</li> </ul> <p>Setting up Steam Multiplayer:</p> <ul> <li>https://www.youtube.com/watch?v=ABWgSq5A9ak&amp;utm_content=buffer9fd76&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer</li> </ul>"},{"location":"ue4guide/wip/unfinished/keep-simulation-or-play-in-editor-changes/","title":"Keep simulation or play in editor changes","text":"<p>Keep Simulation or Play In Editor changes:</p> <ul> <li> <p>Hit k keyboard shortcut or right click on actor in viewport/world outliner and select keep simulation changes from context menu</p> </li> <li> <p>Uses UObject CopyProperties()</p> </li> </ul> <p>PerformSetCommand(): Sets values on object or all objects of a class and also updates CDO (through DefaultObject-&gt;SaveConfig()</p> <p>\u200b GlobalSetProperty(): Sets property based on text</p> <p>On Saving Property Changes During Gameplay/Keep Simulation Changes</p>"},{"location":"ue4guide/wip/unfinished/keep-simulation-or-play-in-editor-changes/#onkeepsimulationchanges","title":"OnKeepSimulationChanges()","text":"<p>// Find our counterpart actor</p> <p>AActor* EditorWorldActor = EditorUtilities::GetEditorWorldCounterpartActor( SimWorldActor );</p> <p>// We only want to copy CPF_Edit properties back, or properties that are set through editor manipulation</p> <p>// NOTE: This needs to match what we're doing in the BuildSelectedActorInfo() function</p> <p>const auto CopyOptions = ( EditorUtilities::ECopyOptions::Type )(</p> <p>\u200b EditorUtilities::ECopyOptions::CallPostEditChangeProperty |</p> <p>\u200b EditorUtilities::ECopyOptions::CallPostEditMove |</p> <p>\u200b EditorUtilities::ECopyOptions::OnlyCopyEditOrInterpProperties |</p> <p>\u200b EditorUtilities::ECopyOptions::FilterBlueprintReadOnly);</p> <p>const int32 CopiedPropertyCount = EditorUtilities::CopyActorProperties( SimWorldActor, EditorWorldActor, CopyOptions );</p> <p>if( CopiedPropertyCount &gt; 0 )</p> <p>{</p> <p>\u200b ++UpdatedActorCount;</p> <p>\u200b TotalCopiedPropertyCount += CopiedPropertyCount;</p> <p>\u200b if( FirstUpdatedActorLabel.IsEmpty() )</p> <p>\u200b {</p> <p>\u200b FirstUpdatedActorLabel = EditorWorldActor-&gt;GetActorLabel();</p> <p>\u200b }</p> <p>}</p> <p>SSCSEditor::OnApplyChangesToBlueprint()</p> <p>{</p> <p>\u200b const FScopedTransaction Transaction(LOCTEXT(\"PushToBlueprintDefaults_Transaction\", \"Apply Changes to Blueprint\"));</p> <p>\u200b // The component selection state should be maintained</p> <p>\u200b GEditor-&gt;GetSelectedComponents()-&gt;Modify();</p> <p>\u200b Actor-&gt;Modify();</p> <p>\u200b // Mark components that are either native or from the SCS as modified so they will be restored</p> <p>\u200b const TArray&lt;UActorComponent*&gt; Components = Actor-&gt;GetComponents();</p> <p>\u200b for (UActorComponent* ActorComponent : Components)</p> <p>{</p> <p>\u200b if (ActorComponent-&gt;CreationMethod == EComponentCreationMethod::SimpleConstructionScript || ActorComponent-&gt;CreationMethod == EComponentCreationMethod::Native)</p> <p>\u200b {</p> <p>\u200b ActorComponent-&gt;Modify();</p> <p>\u200b }</p> <p>}</p> <p>\u200b // Perform the actual copy</p> <p>\u200b {</p> <p>\u200b AActor* BlueprintCDO = Actor-&gt;GetClass()-&gt;GetDefaultObject&lt;AActor&gt;();</p> <p>\u200b if (BlueprintCDO != NULL)</p> <p>\u200b {</p> <p>\u200b const auto CopyOptions = (EditorUtilities::ECopyOptions::Type)(EditorUtilities::ECopyOptions::OnlyCopyEditOrInterpProperties | EditorUtilities::ECopyOptions::PropagateChangesToArchetypeInstances);</p> <p>\u200b NumChangedProperties = EditorUtilities::CopyActorProperties(Actor, BlueprintCDO, CopyOptions);</p> <p>\u200b if (Actor-&gt;GetInstanceComponents().Num() &gt; 0)</p> <p>\u200b {</p> <p>\u200b FKismetEditorUtilities::AddComponentsToBlueprint(Blueprint, Actor-&gt;GetInstanceComponents());</p> <p>\u200b NumChangedProperties += Actor-&gt;GetInstanceComponents().Num();</p> <p>\u200b Actor-&gt;ClearInstanceComponents(true);</p> <p>\u200b }</p> <p>\u200b if (NumChangedProperties &gt; 0)</p> <p>\u200b {</p> <p>\u200b Actor = nullptr; // It is unsafe to use Actor after this point as it may have been reinstanced, so set it to null to make this obvious</p> <p>\u200b }</p> <p>\u200b }</p> <p>\u200b }</p> <p>}</p>"},{"location":"ue4guide/wip/unfinished/make-sure-stationarydynamic-lights-do-not-overlap/","title":"Make sure stationarydynamic lights do not overlap","text":"<p>Make sure Stationary/Dynamic Lights do not overlap</p> <p>One dynamic shadow</p> <p>Dynamic objects =&gt; Single Sample Shadow from Stationary Light</p> <p>Reflection Probes</p> <p>Set Reflection Capture resolution limits</p> <p>Use HLOD &amp; LOD</p>"},{"location":"ue4guide/wip/unfinished/move-component-across-actors/","title":"Move component across actors","text":"<p>Moving Components between Actors should be fully supported using the Rename function and specifying the new Actor as the outer. Renaming to change ownership doesn't impact attachment, so if you're also modifying the attachment hierarchy you'll want to also call AttachToComponent/DetachFromComponent.</p> <p>If they are sub-components (i.e. declared in the component constructor and outered to the component), then only the parent needs to be renamed because the sub-component is implicitly related to the actor that it's containing component is owned by.</p> <p>I don't think that the order of renames should matter. The rename on the ActorComponent is really only changing the Outer of the object and then managing the ownership arrays within the old and new owning actor.</p> <p>Similarly the order of doing the rename vs. attachment shouldn't matter because the attachment will update transforms while the rename changes ownership, but neither should impact the other. (Though this all assumes no unique overrides of virtuals that do unusual actions).</p> <p>From https://udn.unrealengine.com/questions/423433/moving-components-between-actors.html</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/","title":"Networking bandwidth mtu","text":""},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#tldr","title":"TLDR:","text":"<p>gafferongames [10:59 PM]</p> <p>Update: Don't go above 1200</p> <p>1500 is *ethernet* MTU</p> <p>IPv6 minimum MTU is 1280.</p> <p>If you want to be conservative, 1200.</p> <p>This lines up with most games I've worked on. They don't go above this.</p> <p>*practically* both windows and mac set MTU 1500...</p> <p>but be conservative. 1200.</p> <p>noob question</p> <p>[4:45]</p> <p>if our mtu is 512 bytes (minus headers) for sending packets over the internet (edited)</p> <p>[4:48]</p> <p>and I want to send a snapshot that's 1024 bytes</p> <p>[4:48]</p> <p>I presume I have to manually break that apart and re-assemble?</p> <p>[4:48]</p> <p>and then worry about dropped packets?</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-502-pm","title":"gafferongames [5:02 PM]","text":"<p>512 is too conservative</p> <p>[5:02]</p> <p>You can send up to 1400 byte packets.</p> <p>[5:02]</p> <p>I have code for fragmentation and reassemble you can use, and an article about it.</p> <p>[5:02]</p> <p>There is easy to use example source code that comes with it. I'll upload it here for you</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-502-pm","title":"ikrima [5:02 PM]","text":"<p>Yeah, I saw that but wanted to keep it super simple</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-502-pm_1","title":"gafferongames [5:02 PM]","text":"<p>Oh this is the super simple version </p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-502-pm_1","title":"ikrima [5:02 PM]","text":"<p>really? I can use 1400 over IP4?</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-502-pm_2","title":"gafferongames [5:02 PM]","text":"<p>yes</p> <p>[5:02]</p> <p>well, 1k</p> <p>[5:03]</p> <p>1100</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-503-pm","title":"ikrima [5:03 PM]","text":"<p>haha, remember, I only play a network guy on tv</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-503-pm","title":"gafferongames [5:03 PM]","text":"<p>but for all practical purposes these guys</p> <p>[5:03]</p> <p>these days, MTU is 1500</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-503-pm_1","title":"ikrima [5:03 PM]","text":"<p>nice</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-503-pm_1","title":"gafferongames [5:03 PM]","text":"<p>subtract headers from that... be conservative. 1400</p> <p>[5:03]</p> <p>1500 is the IPv6 minimum fragmentation</p> <p>[5:03]</p> <p>so both windows an mac have that as a limit.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-503-pm_2","title":"ikrima [5:03 PM]","text":"<p>awesome</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-503-pm_2","title":"gafferongames [5:03 PM]","text":"<p>from memory, ps4 and other platfroms may have smaller max</p> <p>[5:03]</p> <p>eg. more like 1k, because they are more conservative, and wrap the packets on PSN with their own headers and shit.</p> <p>[5:03]</p> <p>but thats' not relevant if you have dedicated servers.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-503-pm_3","title":"ikrima [5:03 PM]","text":"<p>right</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-503-pm_3","title":"gafferongames [5:03 PM]","text":"<p>only if p2p.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-504-pm","title":"ikrima [5:04 PM]","text":"<p>really?</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-504-pm","title":"gafferongames [5:04 PM]","text":"<p>yep.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-504-pm_1","title":"ikrima [5:04 PM]","text":"<p>i thought MTU was on recieve as well?</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-504-pm_1","title":"gafferongames [5:04 PM]","text":"<p>nonono</p> <p>[5:04]</p> <p>i mean...</p> <p>[5:04]</p> <p>you only need to use np signalling layer (eg. special \"PS4 packets\") if you are p2p</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-504-pm_2","title":"ikrima [5:04 PM]","text":"<p>ah</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-504-pm_2","title":"gafferongames [5:04 PM]","text":"<p>otherwise you just open up a udp socket and do whatever you want.</p> <p>[5:04]</p> <p>ps. I'm working on a new project</p> <p>[5:04]</p> <p>it's called \"netcode.io\"</p> <p>[5:05]</p> <p>I'm aiming to make a minimal networking layer that does the security/auth of yojimbo</p> <p>[5:05]</p> <p>but minus all the hardcore c++-ism</p> <p>[5:05]</p> <p>my play is to standardize it</p> <p>[5:05]</p> <p>and get it *in browsers*</p> <p>[5:05]</p> <p>for games like agar.io</p> <p>[5:05]</p> <p>I think it can be really big. It's a replacement for WebRTC</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-505-pm","title":"ikrima [5:05 PM]","text":"<p>nice, i saw the thread on twitter/ the channel</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-505-pm","title":"gafferongames [5:05 PM]","text":"<p>with just the cool connect token stuff yojimbo does</p> <p>[5:05]</p> <p>but stripped out so it's pure C</p> <p>[5:05]</p> <p>and highly portable to other languages</p> <p>[5:05]</p> <p>it sends 1400 byte packets </p> <p>[5:06]</p> <p>so there is your answer </p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-506-pm","title":"ikrima [5:06 PM]","text":"<p>so, i feel like i'm missing something here</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-506-pm","title":"gafferongames [5:06 PM]","text":"<p>(it will not do MTU, MTU would need to be done on top of it...)</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-506-pm_1","title":"ikrima [5:06 PM]","text":"<p>b/c this networking protocol i'm landing on seems dead simple</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-506-pm_1","title":"gafferongames [5:06 PM]","text":"<p>you are probably missing something</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-506-pm_2","title":"ikrima [5:06 PM]","text":"<p>and now I'm like ok, why is everyone not doing this</p> <p>[5:06]</p> <p>if I can send 1k every frame, I can snapshot the entire gamestate</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-506-pm_2","title":"gafferongames [5:06 PM]","text":"<p>sure</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-507-pm","title":"ikrima [5:07 PM]","text":"<p>and send up to \u2153 of a second back of frame data</p> <p>[5:07]</p> <p>and really not care about floating point determinism</p> <p>[5:07]</p> <p>b/c I can send quantized quaternions &amp; position</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-507-pm","title":"gafferongames [5:07 PM]","text":"<p>I don't really understand what you mean by this:</p> <p>[5:07]</p> <p>\"and send up to \u2153 of a second back of frame data\"</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-507-pm_1","title":"ikrima [5:07 PM]","text":"<p>....</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-507-pm_1","title":"gafferongames [5:07 PM]","text":"<p>do you mean, combat packet loss with redundancy?</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-507-pm_2","title":"ikrima [5:07 PM]","text":"<p>and then profit</p> <p>[5:07]</p> <p>ah, sorry, i mean game frame data</p> <p>[5:07]</p> <p>like 10 frames of game state at 30 fps</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-508-pm","title":"gafferongames [5:08 PM]","text":"<p>what you are missing</p> <p>[5:08]</p> <p>is that most connections can't reliably receive much more than 256kbit/sec</p> <p>[5:08]</p> <p>and maybe 512kbit/sec at most.</p> <p>[5:08]</p> <p>because it's not just you on that line.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-508-pm","title":"ikrima [5:08 PM]","text":"<p>wait wtf</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-508-pm_1","title":"gafferongames [5:08 PM]","text":"<p>also, if you are hosting dedicated servers</p> <p>[5:08]</p> <p>you are forgetting that you pay for bandwidth in and out of data center.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-509-pm","title":"ikrima [5:09 PM]","text":"<p>right, cost definitely</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-509-pm","title":"gafferongames [5:09 PM]","text":"<p>this is what you are missing.</p> <p>[5:09]</p> <p>secondly, you haven't addressed how latency hiding will be implemented.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-509-pm_1","title":"ikrima [5:09 PM]","text":"<p>but people can't recieve more than 256k still???</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-509-pm_1","title":"gafferongames [5:09 PM]","text":"<p>and security concerns.</p> <p>[5:09]</p> <p>yes, i'll give you some ballparks...</p> <p>[5:09]</p> <p>titanfall 2 worked very hard to send 256kbit/sec or less.</p> <p>[5:09]</p> <p>in fact in common case I send just 100kbit/sec.</p> <p>[5:09]</p> <p>this is large snapshots, but those snapshots are at 20HZ</p> <p>[5:09]</p> <p>titanfall 1 was less optimized.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-509-pm_2","title":"ikrima [5:09 PM]","text":"<p>god dammit</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-509-pm_2","title":"gafferongames [5:09 PM]","text":"<p>it sent up to 256kbit/sec and sometimes spiked to 512</p> <p>[5:10]</p> <p>i optimized all this, and its send rate was 10HZ</p> <p>[5:10]</p> <p>this is the work that I did at titanfall that took me 2 years</p> <p>[5:10]</p> <p>that's all i did for 2 years.</p> <p>[5:10]</p> <p>more recent games, large ones...</p> <p>[5:10]</p> <p>i think has started pushing the boundary at 512kbit</p> <p>[5:10]</p> <p>like battlefront 4</p> <p>[5:10]</p> <p>i would not go above that, or a sizable % will have a bad experience.</p> <p>[5:10]</p> <p>as a rule, don't ever take more than 50% of available bandwidth.</p> <p>[5:10]</p> <p>and since peoples till have 1mbit...</p> <p>[5:10]</p> <p>ideally, don't take more than 25% </p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-511-pm","title":"ikrima [5:11 PM]","text":"<p>gotcha</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-511-pm","title":"gafferongames [5:11 PM]","text":"<p>you need SAFETY</p> <p>[5:11]</p> <p>less bandwidth you use, more likely packets will be delivered timely.</p> <p>[5:11]</p> <p>timely is what you want.</p> <p>[5:11]</p> <p>not throughput.</p> <p>[5:11]</p> <p>ps. titanfall 2 plays a lot better than tf1 for this reason, and with 20HZ send rate.</p> <p>[5:11]</p> <p>so this is why netowrking is hard.</p> <p>[5:11]</p> <p>bandwidth is still limited.</p> <p>[5:11]</p> <p>latency still exists.</p> <p>[5:11]</p> <p>security still a problem.</p> <p>[5:11]</p> <p>give it 2 years, i think games will start sending 1mbit down.</p> <p>[5:12]</p> <p>ps. its even more dire for upload bandwidth</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-512-pm","title":"ikrima [5:12 PM]","text":"<p>right</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-512-pm","title":"gafferongames [5:12 PM]","text":"<p>would not go over 64kbit for that.</p> <p>[5:12]</p> <p>128 at most.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-512-pm_1","title":"ikrima [5:12 PM]","text":"<p>so if i do 1k/s at 30hz</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-512-pm_1","title":"gafferongames [5:12 PM]","text":"<p>yeahh... do the math</p> <p>[5:12]</p> <p>also</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-512-pm_2","title":"ikrima [5:12 PM]","text":"<p>that's still under 256kbits</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-512-pm_2","title":"gafferongames [5:12 PM]","text":"<p>consider packet headers are there</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-512-pm_3","title":"ikrima [5:12 PM]","text":"<p>but now I have to force everything else in there</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-512-pm_3","title":"gafferongames [5:12 PM]","text":"<p>so 32 byte * 30 HZ</p> <p>[5:12]</p> <p>conservative.</p> <p>[5:12]</p> <p>higher for ipv6.</p> <p>[5:13]</p> <p>hey, i got god of war ascension under 64kbit/sec common case, made it play better. </p> <p>[5:13]</p> <p>at 60HZ packet send rate.</p> <p>[5:13]</p> <p>those packets were tiny. nothing.</p> <p>[5:13]</p> <p>these days, you guys have it easy </p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-513-pm","title":"ikrima [5:13 PM]","text":"<p>haha</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-513-pm","title":"gafferongames [5:13 PM]","text":"<p>ps. the trick for reducing bandwidth is delta compression</p> <p>[5:14]</p> <p>I can teach you that when I get back into LA</p> <p>[5:14]</p> <p>give me half a day on a whiteboar with you, i can show you exactly how its done</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-514-pm","title":"ikrima [5:14 PM]","text":"<p>Yeah, I saw the delta encoder stuff; looks very interesting and good for V2</p> <p>[5:14]</p> <p>:P</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-514-pm","title":"gafferongames [5:14 PM]","text":"<p>bottom line: snapshot stuff @ 30HZ</p> <p>[5:14]</p> <p>don't worry about size.</p> <p>[5:14]</p> <p>MTU split those guys as per-my article</p> <p>[5:14]</p> <p>delta encode later.</p> <p>yup</p> <p>[5:14]</p> <p>ok, great</p> <p>[5:14]</p> <p>this really helps wrangle the floating point determinism with GGPO</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-515-pm","title":"gafferongames [5:15 PM]","text":"<p>well, you don't need determinism</p> <p>[5:15]</p> <p>if you are sending the whole state.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-515-pm","title":"ikrima [5:15 PM]","text":"<p>exactly</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-515-pm_1","title":"gafferongames [5:15 PM]","text":"<p>ps. you are just reinventing fps network model here</p> <p>[5:15]</p> <p>except you are doing it, valve/quake style with snapshots</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-515-pm_1","title":"ikrima [5:15 PM]","text":"<p>yup</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-515-pm_2","title":"gafferongames [5:15 PM]","text":"<p>instead of the unreal way, where they don't delta encode, and they send partial world updates per-packet</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-516-pm","title":"ikrima [5:16 PM]","text":"<p>which GGPO is pretty much a derivative of</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-516-pm","title":"gafferongames [5:16 PM]","text":"<p>mmmm kindof.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-516-pm_1","title":"ikrima [5:16 PM]","text":"<p>except with some interesting insights for how it applies to fighting games</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-516-pm_1","title":"gafferongames [5:16 PM]","text":"<p>there is definitely similarities in the rollback for GGPO and the fps rewind and replay.</p> <p>[5:16]</p> <p>but everything else is different.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-516-pm_2","title":"ikrima [5:16 PM]","text":"<p>oh, must be missing something then</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-516-pm_2","title":"gafferongames [5:16 PM]","text":"<p>probably.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-516-pm_3","title":"ikrima [5:16 PM]","text":"<p>I thought that was the key quake model. I haven't gone back over that in a while</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-516-pm_3","title":"gafferongames [5:16 PM]","text":"<p>nope.</p> <p>[5:17]</p> <p>GGPO rollback is a different style to fps.</p> <p>[5:17]</p> <p>same concept...</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-517-pm","title":"ikrima [5:17 PM]","text":"<p>but the key for me for GGPO was rewind+replay+snapshot</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-517-pm","title":"gafferongames [5:17 PM]","text":"<p>different implementation, since no state ever sent.</p> <p>[5:17]</p> <p>no.</p> <p>[5:17]</p> <p>GGPO doesn't ever send snapshots.</p> <p>[5:17]</p> <p>that's where you are confusing it.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-517-pm_1","title":"ikrima [5:17 PM]","text":"<p>except GGPO uses floating point determinism to imply state snapshots</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-517-pm_1","title":"gafferongames [5:17 PM]","text":"<p>GGPO = perfect determinism, no snapshots.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-517-pm_2","title":"ikrima [5:17 PM]","text":"<p>b/c it sends controller snapshot state</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-517-pm_2","title":"gafferongames [5:17 PM]","text":"<p>kindof.</p> <p>[5:17]</p> <p>remember when I told you about two sims?</p> <p>[5:17]</p> <p>GGPO copies world state, (fork)</p> <p>[5:17]</p> <p>and sims that with local inputs up to present time</p> <p>[5:18]</p> <p>throws it away next time inputs come in from server,</p> <p>[5:18]</p> <p>forks again, resims to present time with local inputs.</p> <p>[5:18]</p> <p>FPS games don't do the forking step.</p> <p>[5:18]</p> <p>you have to fork with GGPO because you have no concept of state coming from server.</p> <p>[5:18]</p> <p>all you have is inputs coming from server, so otherwise you can't \"snap back\" to the old server state.</p> <p>[5:18]</p> <p>it's a subtle point, but the two are very different in implentation.</p> <p>[5:19]</p> <p>for example, FPS games don't have a concept of, OK now take the whole game state and copy it from A-&gt;B, now similate copy B forward.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-519-pm","title":"ikrima [5:19 PM]","text":"<p>right right, the prediction correction is different</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-519-pm","title":"gafferongames [5:19 PM]","text":"<p>it's a crazy per-object thing, since only the client controlled objects are rolled back and resimulated.</p> <p>[5:19]</p> <p>same concept, different impl.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-519-pm_1","title":"ikrima [5:19 PM]","text":"<p>right</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-519-pm_1","title":"gafferongames [5:19 PM]","text":"<p>fps is, rollback local client controlled objects *only*</p> <p>[5:19]</p> <p>rest of world is in past</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-519-pm_2","title":"ikrima [5:19 PM]","text":"<p>for ggpo, we fork and blit the gamestate into backupbuffers</p> <p>[5:19]</p> <p>ah</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-519-pm_2","title":"gafferongames [5:19 PM]","text":"<p>ggpo is roll back whole world...</p> <p>[5:20]</p> <p>to a saved definitive state, representing most recent inputs from server.</p> <p>[5:20]</p> <p>predict that ahad with local inputs.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-520-pm","title":"ikrima [5:20 PM]","text":"<p>right right, forgot about that with the FPS model</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-520-pm","title":"gafferongames [5:20 PM]","text":"<p>throw that away</p> <p>[5:20]</p> <p>resimulated next input comes in from server.</p> <p>[5:20]</p> <p>rinse repeat.</p> <p>[5:20]</p> <p>OK i think you have it.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-520-pm_1","title":"ikrima [5:20 PM]","text":"<p>and for us, we're basically snapshotting the entire world over the network</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-520-pm_1","title":"gafferongames [5:20 PM]","text":"<p>yes.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-520-pm_2","title":"ikrima [5:20 PM]","text":"<p>b/c we can</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-520-pm_2","title":"gafferongames [5:20 PM]","text":"<p>and this is excatly what FPS games do</p> <p>[5:20]</p> <p>as well...</p> <p>[5:20]</p> <p>the good ones.</p> <p>[5:20]</p> <p>(not unreal)</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-520-pm_3","title":"ikrima [5:20 PM]","text":"<p>haha</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-521-pm","title":"gafferongames [5:21 PM]","text":"<p>unreal is dumb. they think, sending partial state update is important</p> <p>[5:21]</p> <p>so subset of world only per-packet.</p> <p>[5:21]</p> <p>much smarter to include all world state in packet for all objects.</p> <p>[5:21]</p> <p>simpler.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-521-pm","title":"ikrima [5:21 PM]","text":"<p>yeah it's horrible</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-521-pm_1","title":"gafferongames [5:21 PM]","text":"<p>unreal is utter garbage networking</p> <p>[5:21]</p> <p>i've told sweeney this himself but he doesn't understand.</p> <p>[5:21]</p> <p>thinks its not possible to do any other way. he's wrong.</p> <p>[5:21]</p> <p>the secret sauce is the delta compression</p> <p>[5:21]</p> <p>that's where unreal breaks down, and quake/unreal wins.</p> <p>[5:22]</p> <p>also, extrapolation bad</p> <p>[5:22]</p> <p>interpolation good.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-522-pm","title":"ikrima [5:22 PM]","text":"<p>right</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-522-pm","title":"gafferongames [5:22 PM]","text":"<p>unreal extrapolates remote view of objects</p> <p>[5:22]</p> <p>cod/titanfall interpolates.</p> <p>[5:22]</p> <p>consider, you probably need to, because packets don't arrive nicely spaced out</p> <p>[5:22]</p> <p>buffer packets on client for 50-100ms before displaying.</p> <p>[5:22]</p> <p>just be aware of this. you may not be right now.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-522-pm_1","title":"ikrima [5:22 PM]","text":"<p>?</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-522-pm_1","title":"gafferongames [5:22 PM]","text":"<p>this is another gotcha.</p> <p>[5:23]</p> <p>well, if i sent a packet 30HZ</p> <p>[5:23]</p> <p>do you think it is received 30HZ on the other side?</p> <p>[5:23]</p> <p>of course not.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-523-pm","title":"ikrima [5:23 PM]","text":"<p>i thought GGPO extrapolated</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-523-pm","title":"gafferongames [5:23 PM]","text":"<p>1-2-0-1-1-2-0</p> <p>[5:23]</p> <p>GGPO is different.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-523-pm_1","title":"ikrima [5:23 PM]","text":"<p>that was the whole insight</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-523-pm_1","title":"gafferongames [5:23 PM]","text":"<p>i'm talking FPS now.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-523-pm_2","title":"ikrima [5:23 PM]","text":"<p>oh right</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-523-pm_2","title":"gafferongames [5:23 PM]","text":"<p>forget GGPO it's not for you.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-523-pm_3","title":"ikrima [5:23 PM]","text":"<p>yeah, but for us we won't need to</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-523-pm_3","title":"gafferongames [5:23 PM]","text":"<p>it's a dead end.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-523-pm_4","title":"ikrima [5:23 PM]","text":"<p>lol wut</p> <p>[5:24]</p> <p>That's the whole scheme I was describing?</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-524-pm","title":"gafferongames [5:24 PM]","text":"<p>nonon </p> <p>[5:24]</p> <p>GGPO is deterministic lockstep</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-524-pm","title":"ikrima [5:24 PM]","text":"<p>GGPO except sending whole world snapshots</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-524-pm_1","title":"gafferongames [5:24 PM]","text":"<p>you are not deterministic lockstep</p> <p>[5:24]</p> <p>you are not GGPo</p> <p>[5:24]</p> <p>you don't have the same characteristics.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-524-pm_1","title":"ikrima [5:24 PM]","text":"<p>ok, GGPO prime then</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-524-pm_2","title":"gafferongames [5:24 PM]","text":"<p>what you are describing to me is more like fps network model.</p> <p>[5:24]</p> <p>here is the key benefit of GGPO</p> <p>[5:24]</p> <p>because it never sends state</p> <p>[5:25]</p> <p>it can be made secure even on PC sku, p2p with no server.</p> <p>[5:25]</p> <p>problem of it: low palyer counts, lag switches really effective.</p> <p>[5:25]</p> <p>what you are describing doesn't have these characteristic.</p> <p>[5:25]</p> <p>you send state, so no longer secure p2p.</p> <p>[5:25]</p> <p>you don't wait for inputs, so no longer lag switch problematic.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-525-pm","title":"ikrima [5:25 PM]","text":"<p>oh, i was planning on waiting for inputs</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-525-pm","title":"gafferongames [5:25 PM]","text":"<p>oh. but why?</p> <p>[5:26]</p> <p>you don't need them </p> <p>[5:26]</p> <p>you are sending state</p> <p>[5:26]</p> <p>ok so your main choice now is...</p> <p>[5:26]</p> <p>do you buffer and interpolate between snapshots, adding latency.</p> <p>[5:26]</p> <p>or do you snap state hard, and extrapolate with last input.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-526-pm","title":"ikrima [5:26 PM]","text":"<p>snap hard with extrapolate last input</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-526-pm","title":"gafferongames [5:26 PM]","text":"<p>either way, you are going to need some buffering, because packets don't come in every frame</p> <p>[5:26]</p> <p>so you'll miss inputs that way.</p> <p>[5:26]</p> <p>inputs are at 90HZ</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-527-pm","title":"ikrima [5:27 PM]","text":"<p>we process input only at 30hz</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-527-pm","title":"gafferongames [5:27 PM]","text":"<p>(unless your game sims at 30 and renders 90HZ)</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-527-pm_1","title":"ikrima [5:27 PM]","text":"<p>sim at 30, render at 30, 60, 90, or 120</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-527-pm_1","title":"gafferongames [5:27 PM]","text":"<p>ok good. then you'll miss inputs on packet loss unless you send them redundant.</p> <p>[5:27]</p> <p>you'll need at least, a few frames of buffer safety for inputs, otherwise you'll miss</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-527-pm_2","title":"ikrima [5:27 PM]","text":"<p>gotcha</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-527-pm_2","title":"gafferongames [5:27 PM]","text":"<p>but yeah, if you block hard on inputs, you'll have GGPO like characteristics.</p> <p>[5:28]</p> <p>but without any security if p2p.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-528-pm","title":"ikrima [5:28 PM]","text":"<p>dedis for that</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-528-pm","title":"gafferongames [5:28 PM]","text":"<p>ok, so now you are client side predicting.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-528-pm_1","title":"ikrima [5:28 PM]","text":"<p>[5:28]</p> <p>right</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-528-pm_1","title":"gafferongames [5:28 PM]","text":"<p>you better not be cpu bound.</p> <p>[5:28]</p> <p>because you will roll back whole world</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-528-pm_2","title":"ikrima [5:28 PM]","text":"<p>that's my only worry</p> <p>[5:28]</p> <p>which we're generally not b/c of VR</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-528-pm_2","title":"gafferongames [5:28 PM]","text":"<p>not just the local player, is that your plan?</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-528-pm_3","title":"ikrima [5:28 PM]","text":"<p>right</p> <p>[5:28]</p> <p>the whole world</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-529-pm","title":"gafferongames [5:29 PM]","text":"<p>ok give it a go</p> <p>[5:29]</p> <p>but consider this...</p> <p>[5:29]</p> <p>what the client sees</p> <p>[5:29]</p> <p>is a ghost</p> <p>[5:29]</p> <p>with dedis.</p> <p>[5:29]</p> <p>and with GGPO</p> <p>[5:29]</p> <p>so some input delay will be required, otherwise you'll get too much rubberbanding and rollback</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-529-pm","title":"ikrima [5:29 PM]","text":"<p>right</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-529-pm_1","title":"gafferongames [5:29 PM]","text":"<p>just like SF</p> <p>[5:29]</p> <p>sounds reasonable.</p> <p>[5:29]</p> <p>give it a go.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-530-pm","title":"ikrima [5:30 PM]","text":"<p>sweet</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-530-pm","title":"gafferongames [5:30 PM]","text":"<p>my prediction: as player counts increase, you'll be waiting for most recent input for players more often</p> <p>[5:30]</p> <p>also, you are delayed as per-most lagged player</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-530-pm_1","title":"ikrima [5:30 PM]","text":"<p>right</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-530-pm_1","title":"gafferongames [5:30 PM]","text":"<p>so it does inherit the bad aspects of GGPO</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-530-pm_2","title":"ikrima [5:30 PM]","text":"<p>which i really hate</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-530-pm_2","title":"gafferongames [5:30 PM]","text":"<p>and potentially, the low player count restriction</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-530-pm_3","title":"ikrima [5:30 PM]","text":"<p>but it's a compromise i have to make</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-530-pm_3","title":"gafferongames [5:30 PM]","text":"<p>yes.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-530-pm_4","title":"ikrima [5:30 PM]","text":"<p>and then player counts are just going to be 2</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-530-pm_4","title":"gafferongames [5:30 PM]","text":"<p>fallback: try this, if you don't like it</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-530-pm_5","title":"ikrima [5:30 PM]","text":"<p>well 3 if you count server</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-530-pm_5","title":"gafferongames [5:30 PM]","text":"<p>go fps model. with some input delay</p> <p>[5:31]</p> <p>rollback only the local player, but hold rest of the world some amount of time in the past</p> <p>[5:31]</p> <p>and show a kill replay that resolves how/why you died, from POV of attacker.</p> <p>[5:31]</p> <p>this is how COD does it.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-531-pm","title":"ikrima [5:31 PM]","text":"<p>interesting</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-531-pm","title":"gafferongames [5:31 PM]","text":"<p>that's just fps network model, rebranded for your concept.</p> <p>[5:31]</p> <p>in this model, you wouldn't wait for inputs.</p> <p>[5:31]</p> <p>so could scale to higher player counts.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-531-pm_1","title":"ikrima [5:31 PM]","text":"<p>but i can't imagine melee not sucking</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-531-pm_1","title":"gafferongames [5:31 PM]","text":"<p>but you'd have more delay viewing other player actions.</p> <p>[5:32]</p> <p>agreed, but it is what it is.</p> <p>[5:32]</p> <p>no need to tilt at windmills.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-532-pm","title":"ikrima [5:32 PM]","text":"<p>heh, right</p> <p>[5:32]</p> <p>I'll attempt the GGPO-esque scheme</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-532-pm","title":"gafferongames [5:32 PM]","text":"<p>sure sounds good. give it a go.</p> <p>[5:32]</p> <p>you'll learn something, at minimum.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-532-pm_1","title":"ikrima [5:32 PM]","text":"<p>if that starts sucking, i'll add massive knockback to each attack and go with FPS</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-532-pm_1","title":"gafferongames [5:32 PM]","text":"<p>yeah</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-532-pm_2","title":"ikrima [5:32 PM]","text":"<p>so that you can't melee combo easily</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-532-pm_2","title":"gafferongames [5:32 PM]","text":"<p>fps will only start to break down with parry/block/chains</p> <p>[5:32]</p> <p>its the combos that will break down.</p> <p>[5:33]</p> <p>you'll notice all fps melee is basically, melee = you dead.</p> <p>[5:33]</p> <p>this is why.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-533-pm","title":"ikrima [5:33 PM]","text":"<p>right</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-533-pm","title":"gafferongames [5:33 PM]","text":"<p>of course, nobody would ever add input delay to fps to combat the rollback</p> <p>[5:33]</p> <p>so you have that up your sleeve.</p> <p>[5:33]</p> <p>ps. input delay must be on both movement and attacking, ... all actions.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-533-pm_1","title":"ikrima [5:33 PM]","text":"<p>yeah definitely</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-534-pm","title":"gafferongames [5:34 PM]","text":"<p>and you should definitely consider,</p> <p>[5:34]</p> <p>limiting speed.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-534-pm","title":"ikrima [5:34 PM]","text":"<p>our game is definitely slow</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-534-pm_1","title":"gafferongames [5:34 PM]","text":"<p>consider, in typical round trip, how far can player move?</p> <p>[5:34]</p> <p>this is why fps breaks down... fast movement</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-534-pm_1","title":"ikrima [5:34 PM]","text":"<p>on purpose</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-534-pm_2","title":"gafferongames [5:34 PM]","text":"<p>melee attack a fast moving guy...</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-534-pm_2","title":"ikrima [5:34 PM]","text":"<p>every attack has 100 ms windup</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-534-pm_3","title":"gafferongames [5:34 PM]","text":"<p>= no way is your attack hitting.</p> <p>[5:34]</p> <p>well, input delay doesn't mean windup</p> <p>[5:34]</p> <p>it means, actual delay on inputs.</p> <p>[5:34]</p> <p>before your sim sees them.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-534-pm_3","title":"ikrima [5:34 PM]","text":"<p>no i know</p> <p>[5:34]</p> <p>but the windup reduces speed</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-534-pm_4","title":"gafferongames [5:34 PM]","text":"<p>but windup = good.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-534-pm_4","title":"ikrima [5:34 PM]","text":"<p>and how fast you can move</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-535-pm","title":"gafferongames [5:35 PM]","text":"<p>anything that commits somebody on an attack = good.</p> <p>[5:35]</p> <p>ok. you have this in hand. go for it.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-535-pm","title":"ikrima [5:35 PM]","text":"<p>awesome; thanks for this</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-535-pm_1","title":"gafferongames [5:35 PM]","text":"<p>[5:35]</p> <p>no worries mate</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-535-pm_1","title":"ikrima [5:35 PM]","text":"<p>I now only feel slightly insane for attempting (edited)</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-535-pm_2","title":"gafferongames [5:35 PM]","text":"<p>nah you're doing the right approach</p> <p>[5:35]</p> <p>have a plan, have a backup.</p> <p>[5:35]</p> <p>i'm still worried about your dedi cost.</p> <p>[5:35]</p> <p>ps. the stuff i'm doing for netcode.io will help you run dedis.</p> <p>[5:35]</p> <p>securely.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-535-pm_2","title":"ikrima [5:35 PM]","text":"<p>excellent</p> <p>[5:35]</p> <p>so am I</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-536-pm","title":"gafferongames [5:36 PM]","text":"<p>and it is policy free, so can be grabbed and integrated easily.</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-536-pm","title":"ikrima [5:36 PM]","text":"<p>but, it's only a problem if we have large player counts. THen we can throw engineering talent at the issue</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-536-pm_1","title":"gafferongames [5:36 PM]","text":"<p>sure.</p> <p>[5:36]</p> <p>ok have to run. you got this. go get em</p>"},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#ikrima-536-pm_1","title":"ikrima [5:36 PM]","text":""},{"location":"ue4guide/wip/unfinished/networking-bandwidth-mtu/#gafferongames-1059-pm","title":"gafferongames [10:59 PM]","text":"<p>Update: Don't go above 1200</p> <p>[10:59]</p> <p>1500 is *ethernet* MTU</p> <p>[10:59]</p> <p>IPv6 minimum MTU is 1280.</p> <p>[10:59]</p> <p>If you want to be conservative, 1200.</p> <p>[11:00]</p> <p>This lines up with most games I've worked on. They don't go above this.</p> <p>[11:00]</p> <p>*practically* both windows and mac set MTU 1500...</p> <p>[11:00]</p> <p>but be conservative. 1200.</p>"},{"location":"ue4guide/wip/unfinished/parallelanimevaluation-parallelanimupdate/","title":"What's the diff between a.ParallelAnimEvaluation &amp; a.ParallelAnimUpdate?","text":"<p>From https://twitter.com/ikrimae/with_replies&gt;*</p> <p>Anim graphs are evaluated in three phases: tick, update, evaluate [1/N]</p> <p>From https://twitter.com/ikrimae/status/816803788933591040&gt;*</p> <p>tick is always game thread due to potentially touching other objs. [2/N]</p> <p>update actually ticks the nodes and determines final weights / active players for sync groups/etc... [3/N]</p> <p>From https://twitter.com/ikrimae/status/816803788933591040</p>"},{"location":"ue4guide/wip/unfinished/pausing-renderclock/","title":"Pausing renderclock","text":"<p>Pausing RenderClock:</p> <p>GPauseRenderingRealtimeClock controlled in UGameEngine.Tick.</p> <ul> <li> <p>Can be paused using SetGamePaused</p> </li> <li> <p>Uses fixeddelta time correctly</p> </li> <li> <p>But always ticks even when Gworld-&gt;IsPaused() == true</p> </li> <li> <p>Ticking occurs based on GPauseRenderingRealtimeClock</p> </li> <li> <p>Only way it's ever turned off in Engine is through console cmd: PAUSERENDERCLOCK</p> </li> <li> <p>HandlePauseRenderClockCommand( Cmd, Ar );</p> </li> <li> <p>Sets GPauseRenderingRealtimeClock = !GPauseRenderingRealtimeClock;</p> </li> </ul> <p>Render Thread pausing</p> <ul> <li> <p>Can be paused with helper class FSuspendRenderingThread (called from Game Thread)</p> </li> <li> <p>Flushes Render Commands</p> </li> <li> <p>Can call StopRenderingThread()/StartRenderingThread()</p> <ul> <li> <p>These functions atomically alter GIsRenderingThreadSuspended</p> </li> <li> <p>Also can alter GRunRenderingThreadHeartbeat which happens on start/stopping the thread. If FSuspendRenderingThread is called to suspend by recreating the render thread, it will destroy the render thread &amp; recreate it so it will set GRunRenderingThreadHeartbeat = false through StopRenderingThread</p> </li> <li> <p>GIsRenderingThreadSuspended is used by FRenderingThreadTickHeartbeat (a separate GameThread to manage heartbeat ticks)</p> </li> <li> <p>Heartbeat tick @ GRenderingThreadMaxIdleTickFrequency from GameThread</p> </li> <li> <p>It ticks FTickableObjectRenderThread objects by enqueing TickingRenderingTickables() on the rendering thread (when GIsRenderingThreadSuspended == false)</p> </li> <li> <p>This thread runs on it's own heartbeat which is disjoint from the GT or the other RT resources</p> </li> <li> <p>It's Tick DeltaSeconds is in system real time, not game time or fixed time</p> </li> </ul> </li> </ul>"},{"location":"ue4guide/wip/unfinished/precomputed-visibility/","title":"Precomputed visibility","text":"<p>PreComputed Visibility</p> <p>If you are building a large environment you're not going to want to use precomputed visibility. It doesn't scale up well in either processing time or memory to large numbers of objects and view cells. It's mostly for smaller levels and platforms that don't have occlusion queries (mobile).</p> <p>Sadly there are no UE4 docs on these systems, but the UE3 docs are mostly relevant:</p> <p>[http://udn.epicgames.com/Three/Preco...isibility.html]</p> <p>Dynamic occlusion culling is on automatically, it tests the bounding box of each object against the depth buffer from last frame to determine visibility. The default method right now is called HZB (Hierarchical Z Buffer) but there's also the standard occlusion query method if HZB is disabled. You can test efficiency with 'stat sceneocclusion'.</p> <p>From https://forums.unrealengine.com/showthread.php?18323-Visual-occlusion-and-viz-boxes</p>"},{"location":"ue4guide/wip/unfinished/propertyhandle-markhiddenbycustomization/","title":"Propertyhandle markhiddenbycustomization","text":"<p>PropertyHandle-&gt;MarkHiddenByCustomization()</p> <p>From https://forums.unrealengine.com/development-discussion/c-gameplay-programming/106787-detailcustomization-only-show-specific-properties-isinglepropertyview</p>"},{"location":"ue4guide/wip/unfinished/reflection-actors/","title":"Reflection Actors","text":"<ul> <li> <p>Buildtime scene cubemap captures projected onto spheres/boxes</p> </li> <li> <p>Can nest them and at run time, shader will interpolate between them to fake parallax correct reflections</p> </li> <li> <p>Obviously has light leak b/c it doesn't take into account local occlusion</p> </li> <li> <p>Does not provide dynamic or sharp refletions</p> </li> <li> <p>Updated dynamically in the editor but locked in game mode</p> </li> <li> <p>Different glossy levels point to different parts of the mipmap chain</p> </li> <li> <p>Roughness material parameter is used to blend between indirect diffuse lightmap data and the reflection cubemap (i.e. fully rough = using purely lightmap indirect data)</p> </li> <li> <p>Lightmap data should not include direct lighting for this to work (otherwise you get double lighting) i.e. turn off static lights when baking lightmap data and only use stationary lights</p> </li> <li> <p>https://docs.unrealengine.com/latest/INT/Engine/Rendering/LightingAndShadows/ReflectionEnvironment/index.html</p> </li> </ul> <p>Reflection Environment: provides indirect specular</p> <ul> <li> <p>indirect meaning specular from other objects in the scene. Direct meaning from the lights</p> </li> <li> <p>Direct specular through analytical lights &amp; skylight</p> </li> <li> <p>Needs lightmass to build indirect diffuse lighting (so it can sample it to calculate indirect specular)</p> </li> </ul> <p>HiddenPrimitives on FSceneView</p> <p>https://forums.unrealengine.com/showthread.php?2964-Hiding-certain-objects-from-being-drawn-on-a-camera-or-SceneCapture2D-object&amp;p=66113#post66113</p>"},{"location":"ue4guide/wip/unfinished/savingloading-layout-to-config/","title":"Savingloading layout to config","text":"<p>Saving/loading layout to config</p> <p>void FMainFrameModule::CreateDefaultMainFrame( const bool bStartImmersive, const bool bStartPIE )::</p> <p>TSharedRef&lt;FTabManager::FLayout&gt; LoadedLayout = FLayoutSaveRestore::LoadFromConfig(GEditorLayoutIni,</p> <p>// We persist the positioning of the level editor and the content browser.</p> <p>// The asset editors currently do not get saved.</p> <p>FTabManager::NewLayout( \"UnrealEd_Layout_v1.4\" )</p> <p>-&gt;AddArea</p> <p>(</p> <p>// level editor window</p> <p>FTabManager::NewPrimaryArea()</p> <p>-&gt;Split</p> <p>(</p> <p>FTabManager::NewStack()</p> <p>-&gt;SetSizeCoefficient(2.0f)</p> <p>-&gt;AddTab(\"LevelEditor\", ETabState::OpenedTab)</p> <p>-&gt;AddTab(\"DockedToolkit\", ETabState::ClosedTab)</p> <p>)</p> <p>)</p> <p>-&gt;AddArea</p> <p>(</p> <p>// content browser window</p> <p>FTabManager::NewArea(WindowSize)</p> <p>-&gt;Split</p> <p>(</p> <p>FTabManager::NewStack()</p> <p>-&gt;SetSizeCoefficient(1.0f)</p> <p>-&gt;AddTab(\"ContentBrowser1Tab\", ETabState::ClosedTab)</p> <p>)</p> <p>)</p> <p>-&gt;AddArea</p> <p>(</p> <p>// toolkits window</p> <p>FTabManager::NewArea(WindowSize)</p> <p>-&gt;SetOrientation(Orient_Vertical)</p> <p>-&gt;Split</p> <p>(</p> <p>FTabManager::NewStack()</p> <p>-&gt;SetSizeCoefficient(1.0f)</p> <p>-&gt;AddTab(\"StandaloneToolkit\", ETabState::ClosedTab)</p> <p>)</p> <p>-&gt;Split</p> <p>(</p> <p>FTabManager::NewStack()</p> <p>-&gt;SetSizeCoefficient(0.35f)</p> <p>-&gt;AddTab(\"MergeTool\", ETabState::ClosedTab)</p> <p>)</p> <p>)</p> <p>-&gt;AddArea</p> <p>(</p> <p>// settings window</p> <p>FTabManager::NewArea(WindowSize)</p> <p>-&gt;Split</p> <p>(</p> <p>FTabManager::NewStack()</p> <p>-&gt;SetSizeCoefficient(1.0f)</p> <p>-&gt;AddTab(\"EditorSettings\", ETabState::ClosedTab)</p> <p>-&gt;AddTab(\"ProjectSettings\", ETabState::ClosedTab)</p> <p>-&gt;AddTab(\"PluginsEditor\", ETabState::ClosedTab)</p> <p>)</p> <p>)</p> <p>);</p> <p>MainFrameContent = FGlobalTabmanager::Get()-&gt;RestoreFrom( LoadedLayout, RootWindow, bEmbedTitleAreaContent );</p> <p>bLevelEditorIsMainTab = true;</p> <p>}</p>"},{"location":"ue4guide/wip/unfinished/scenecapturecomponent2d/","title":"Scenecapturecomponent2d","text":"<ul> <li> <p>On every tick, adds itself to an array of CaptureComponents to update (SceneCapturesToUpdate)</p> </li> <li> <p>Uworld::Tick() calls a static method USceneCaptureComponent2D::UpdateDeferredCaptures() at every tick</p> </li> <li> <p>UpdateDeferredCaptures()</p> </li> </ul> <p>WARN: CreateSceneRenderer sets SeparateTransluceny = 0</p>"},{"location":"ue4guide/wip/unfinished/stat-slow-12-10/","title":"Stat slow 12 10","text":"<p>stat Slow 0.012 10</p> <p>stat UnitGraph</p> <p>-NoVerifyGC</p> <p>``</p>"},{"location":"ue4guide/wip/unfinished/staticanalyzer-windowsstaticanalyzer/","title":"Staticanalyzer windowsstaticanalyzer","text":"<p>public WindowsStaticAnalyzer StaticAnalyzer = WindowsStaticAnalyzer.None;</p> <p>StencilingGeometry::DrawSphere</p> <p>-nothreadtimeout</p> <p>r.RHIThread.Enable</p> <p>r.BasePassWriteDepthEvenWithFullPrepass</p> <p>Search for GetMaterialDomain() and MD_Surface &amp; MD_Volume</p> <p>GetShadingModel()</p> <p>bool bOcclusionBeforeBasePass = bIsOcclusionTesting &amp;&amp; (((CVarOcclusionQueryLocation.GetValueOnRenderThread() == 1) &amp;&amp; bNeedsPrePass) || (!GBBIsSkipPrepassInFwd &amp;&amp; IsForwardShadingEnabled(FeatureLevel)));</p>"},{"location":"ue4guide/wip/unfinished/ucommandletscommandlets-are-ways-to-do-editor-functionality-through-command-line/","title":"Ucommandletscommandlets are ways to do editor functionality through command line","text":"<p>UCommandlets/Commandlets are ways to do editor functionality through command line</p> <ul> <li> <p>Can invoke UE4-Editor-Cmd.exe with commandlet parameters</p> </li> <li> <p>This is how automation works</p> </li> <li> <p>Lots of useful commandlets, especially for merging/diffing:</p> </li> <li> <p>UDiffAssetsCommandlet</p> </li> <li> <p>UDiffPackagesCommandlet</p> </li> <li> <p>UDumpBluePrintsInfoCommandlet</p> </li> </ul>"},{"location":"ue4guide/wip/unfinished/udataassets-are-customizableblueprintable-and-can-serialize-data-to-contentbrowser/","title":"Udataassets are customizableblueprintable and can serialize data to contentbrowser","text":"<p>UDataAssets are customizable/blueprintable and can serialize data to contentbrowser</p> <p>UDataTable also allows for the same thing and everything in it automatically gets serialized to text</p>"},{"location":"ue4guide/wip/unfinished/ue4-tangent-space-normal-calculation/","title":"Ue4 tangent space normal calculation","text":""},{"location":"ue4guide/wip/unfinished/ue4-tangent-space-normal-calculation/#ue4-tangent-space-normal-calculation","title":"UE4 Tangent Space Normal Calculation","text":"<ol> <li>Step one: Retrieve the normals from VS Shader Interpolants</li> </ol> <p>\u200b BasePixelShader::GetMaterialPixelParameters</p> <p>\u200b KABCRigid::GetMaterialPixelParameters</p> <p>\u200b -&gt; MaterialTemplate::AssembleTangentToWorld</p> <ol> <li>Step 2: Calculate the world space normals (optionally using the normal map)</li> </ol> <p>BasePixelShader::CalcMaterialParameters</p> <p>\u200b MaterialTemplate::CalcMaterialParameters</p> <ul> <li> <p>Parameters.TangentNormal = MaterialTemplate::GetMaterialNormal - this gets the tangent normal from the UE4 editor material shader (one defined in UE4 in the material editor, not code). If there's no input to the Normal pin in the material, it just returns (0, 0, 1).</p> </li> <li> <p>normalize(Parameters.TangentNormal)</p> </li> <li> <p>Parameters.WorldNormal =</p> </li> </ul> <p>normalize(TransformTangentVectorToWorld(Parameters.TangentToWorld, Parameters.TangentNormal));</p> <p>UE4 calculates normals similar to xNormal. Pixel Shader uses interpolated &amp; not-normalized versions of the normals. Normalization is done at the very end (after the normal map lookup from the texture).</p> <p>For details,</p> <p>Look at MaterialTemplate.usf:</p> <p>Parameters.TangentNormal = GetMaterialNormal(Parameters); Parameters.TangentNormal = normalize(Parameters.TangentNormal); Parameters.WorldNormal = normalize(TransformTangentVectorToWorld(Parameters.TangentToWorld, Parameters.TangentNormal));</p>"},{"location":"ue4guide/wip/unfinished/ue4-tangent-space-normal-calculation/#pixel-shader-transformation","title":"Pixel Shader Transformation","text":"<p>In regards to the interpolated tangent space the baker in both Blender and the xnormal plugin will keep the vertex normal and the vertex tangent normalized in the vertex shader. However, in the pixel shader the \"unnormalized\" and interpolated vertex normal and tangent are used to decode the tangent space normal. The bitangent is constructed here to avoid the use of an additional interpolater and again is NOT normalized.</p> <p>// vNt is the tangent space normal vB = sign * cross(vN, vT); vNout = normalize( vNt.x * vT + vNt.y * vB + vNt.z * vN );</p> <p>The key to get flawless results is that the baker is designed to do the EXACT inverse of this very transformation allowing the pixel shader to remain fast and simple.</p> <p>From http://wiki.blender.org/index.php/Dev:Shading/Tangent_Space_Normal_Maps</p>"},{"location":"ue4guide/wip/unfinished/ue4-volumetric-rendering-notes/","title":"Ue4 volumetric rendering notes","text":"<p>https://forums.unrealengine.com/showthread.php?119267-Your-thoughts-on-and-comments-to-Volume-Rendering-in-Unreal-Engine-4</p> <p>https://github.com/sp0lsh/UE4ShaderPluginDemo/commits/volumetric</p>"},{"location":"ue4guide/wip/unfinished/ue4-volumetric-rendering-notes/#clipping","title":"Clipping","text":"<p>http://tips.hecomi.com/entry/2016/09/10/191006</p> <p>https://translate.googleusercontent.com/translate_c?act=url&amp;depth=1&amp;hl=en&amp;ie=UTF8&amp;prev=_t&amp;rurl=translate.google.com&amp;sl=auto&amp;tl=en&amp;u=http://i-saint.hatenablog.com/entry/2015/07/28/233225&amp;usg=ALkJrhhUxF0EczgKQw47gdKslsVvkyiWGg</p> <p>https://www.unrealengine.com/marketplace/voxel-plugin</p>"},{"location":"ue4guide/wip/unfinished/ulevelleveldirtiedevent-broadcast/","title":"Ulevelleveldirtiedevent broadcast","text":"<p>==============================</p> <p>UnrealEdSrv.cpp/EditorServer.cpp/UEditorEngine/UUnrealEdEngine is good place to see commands and what things need to be broadcast</p> <ul> <li> <p>Also useful for most editor actions (like building map, rebuilding volumes, cooking, replaceactors, etc etc )</p> </li> <li> <p>edact prefixed things are editor actions (e.g. edactCopySelected, edactPasteSelected, etc)</p> </li> </ul> <p>ConvertLightActors/ReplaceActors/ConvertActors</p> <p>SetPreviewMeshMode/UpdatePreviewMesh/CyclePreviewMesh</p> <p>CopySelectedActorsToClipboard/PasteSelectedActorsFromClipboard</p> <p>SyncBrowserToObjects/SyncToContentBrowser/SyncActorLevelsToContentBrowser</p> <p>FindSelectedActorsInLevelScript</p> <p>FEditorFileUtils::SaveCurrentLevel/GetDirtyWorldPackages/GetDirtyContentPackages/SaveDirtyPackages/SaveMap</p> <p>EditorLevelUtils::MakeLevelCurrent( LevelToMakeCurrent );</p> <p>UEditorLevelUtils::MoveSelectedActorsToLevel()</p> <p>MoveActorInFrontOfCamera</p> <p>MoveViewportCamerasToActor</p> <p>MoveViewportCamerasToComponent</p> <p>SnapObjectTo</p> <p>MoveViewportCamerasToBox</p> <p>GetPIEViewport/GetActiveViewport</p> <p>SpawnPlayFromHereStart</p> <p>ParseMapSectionIni/LoadMapListFromIni</p> <p>PackageUsingExternalObjects</p> <p>FindReferencesToActorFromLevelScript/ModifyActorReferencedGraphNodes</p> <p>FindActorsThatReferenceActor/GetActorReferenceMap/ReplaceAllActorRefrences</p> <p>FBlueprintEditorUtils: Lots of useful blueprint nodes</p> <p>GetGraphFunctionMetaData/GetEntryNode/GetEntryAndResultNodes/CheckIfGraphHasLatentFunctions</p> <p>OpenReparentBlueprintMenu</p> <p>===========================</p> <p>FSelfRegisteringExec for POD structs to register for console commands</p> <p>FStringOutputDevice Archive;</p> <p>const FExportObjectInnerContext Context;</p> <p>UExporter::ExportToOutputDevice(&amp;Context, Object, NULL, Archive, TEXT(\"copy\"), 0, PPF_Copy | PPF_DebugDump, false);</p> <p>Archive.Log(TEXT(\"\\r\\n\\r\\n\"));</p> <p>FString ExportedText;</p> <p>ExportedText = Archive;</p> <p>========================================</p> <p>AHUD::HandleBugScreenShot() override for bug screenshots and use bugscreenshotwithhudinfo to screenshot</p> <p>==================</p> <p>GetCurrentViewportPlacementTransform</p> <p>Add Slate Window To Game:</p> <p>\u200b FSlateApplication::Get().AddWindow</p> <p>\u200b (</p> <p>\u200b SNew(SWindow)</p> <p>\u200b .ClientSize(FVector2D(400,600))</p> <p>\u200b .Title( FText::FromString( Object-&gt;GetName() ) )</p> <p>\u200b [</p> <p>\u200b SNew(SBorder)</p> <p>\u200b .BorderImage(FEditorStyle::GetBrush(\"ToolPanel.GroupBorder\"))</p> <p>[</p> <p>\u200b SNew(SVerticalBox)</p> <p>\u200b +SVerticalBox::Slot()</p> <p>\u200b .FillHeight(1)</p> <p>\u200b [</p> <p>\u200b DetailsView.ToSharedRef()</p> <p>\u200b ]</p> <p>\u200b ]</p> <p>\u200b ]</p> <p>\u200b );</p> <p>Create Detail View of all properties in an object:</p> <p>FPropertyEditorModule&amp; PropertyModule = FModuleManager::LoadModuleChecked&lt;FPropertyEditorModule&gt;(\"PropertyEditor\");</p> <p>\u200b TSharedPtr&lt;IDetailsView&gt; DetailsView = PropertyModule.CreateDetailView(Args);</p> <p>\u200b DetailsView-&gt;SetIsPropertyVisibleDelegate(FIsPropertyVisible::CreateStatic(&amp;Local::IsPropertyVisible, bShouldShowNonEditable));</p> <p>\u200b DetailsView-&gt;SetObject(Object);</p> <p>\u200b</p> <p>\u200b // create Slate property window</p> <p>\u200b FSlateApplication::Get().AddWindow</p> <p>\u200b (</p> <p>\u200b SNew(SWindow)</p> <p>\u200b .ClientSize(FVector2D(400,600))</p> <p>\u200b .Title( FText::FromString( Object-&gt;GetName() ) )</p> <p>\u200b [</p> <p>\u200b SNew(SBorder)</p> <p>\u200b .BorderImage(FEditorStyle::GetBrush(\"ToolPanel.GroupBorder\"))</p> <p>\u200b [</p> <p>\u200b SNew(SVerticalBox)</p> <p>\u200b +SVerticalBox::Slot()</p> <p>\u200b .FillHeight(1)</p> <p>\u200b [</p> <p>\u200b DetailsView.ToSharedRef()</p> <p>\u200b ]</p> <p>\u200b ]</p> <p>\u200b ]</p> <p>\u200b \\;</p> <p>================</p> <p>// HOW TO GET AN IN-DEPTH PERFORMANCE ANALYSIS OF SLATE</p> <p>//</p> <p>// Step 1)</p> <p>// Set WITH_VERY_VERBOSE_SLATE_STATS to 1.</p> <p>//</p> <p>// Step 2)</p> <p>// When running the game (outside of the editor), run these commandline options</p> <p>// in order and you'll get a large dump of where all the time is going in Slate.</p> <p>//</p> <p>// stat group enable slateverbose</p> <p>// stat group enable slateveryverbose</p> <p>// stat dumpave -root=stat_slate -num=120 -ms=0</p>"},{"location":"ue4guide/wip/unfinished/unreal-developer-day-gameplay-framework-notes/","title":"Unreal developer day gameplay framework notes","text":"<p>https://www.youtube.com/watch?v=4ZW1BhGMYz0&amp;feature=youtu.be</p> <p>Actors</p> <ul> <li> <p>Entity in a level</p> </li> <li> <p>Bag that holds components</p> </li> <li> <p>Only things that are replicated</p> </li> </ul>"},{"location":"ue4guide/wip/unfinished/unreal-engine-4-game-framework-diagram-for-relation-of-all-major-base-object-types/","title":"Unreal engine 4 game framework diagram for relation of all major base object types","text":"<p>Unreal Engine 4 Game Framework diagram for relation of all major base object types</p> <p>[Unreal Engine 4 Input Event diagram, scroll down to section Input Processing Procedura ]</p> <p>[RPCs official document, Must Read]</p> <p>[Everything you should know about replication]</p> <p>From &lt;https://forums.unrealengine.com/showthread.php?43714-Multicast-not-showing-on-Server&gt;</p> <p>Useful Debug Commands:</p> <ul> <li> <p>Look at class ENGINE_API UCheatManager : public Uobject in CheatManager.h</p> </li> <li> <p>'ToggleDebugCamera'</p> </li> <li> <p>showdebug bones</p> </li> </ul> <p>Physics Replication:</p> <p>Handling replication for an actor that is simulating physics on the client side is done in OnRep_ReplicatedMovement() in /Engine/Source/Runtime/Engine/Private/ActorReplication.cpp. If you follow the chain you'll see the actual adjustments are done in ApplyRigidBodyState() in PrimitiveComponentPhysics.cpp. If you want to see how the server replicates the Actor's properties take a look at ServerReplicateActors() in NetworkDriver.cpp and its call to ReplicateActor() in DataChannel.cpp.</p> <p>From &lt;https://forums.unrealengine.com/showthread.php?18789-Physics-replication-walkthrough&gt;</p> <p>Look into these classes for gameplay:</p> <ul> <li>UGameplayTask</li> </ul> <p>https://docs.unrealengine.com/latest/INT/API/Runtime/GameplayTasks/UGameplayTask/index.html&gt;</p> <ul> <li>UAbilityTask</li> </ul> <p>https://docs.unrealengine.com/latest/INT/API/Runtime/GameplayAbilities/Abilities/Tasks/UAbilityTask/index.html</p> <ul> <li> <p>UGameplayEffect https://docs.unrealengine.com/latest/INT/API/Runtime/GameplayAbilities/UGameplayEffect/index.html</p> </li> <li> <p>UAbilitySystemComponent</p> </li> </ul> <p>https://docs.unrealengine.com/latest/INT/API/Runtime/GameplayAbilities/UAbilitySystemComponent/index.html</p> <ul> <li>GamePlayTasks Module</li> </ul> <p>https://docs.unrealengine.com/latest/INT/API/Runtime/GameplayTasks/index.html</p> <ul> <li>GameplayAbilities Module</li> </ul> <p>https://docs.unrealengine.com/latest/INT/API/Runtime/GameplayAbilities/index.html</p> <p>Doing detail customization/PostEditChangeProperty in [@UnrealEngine]? Use GET_MEMBER_NAME_CHECKED instead of a string for future-proofing</p>"},{"location":"ue4guide/wip/unfinished/uparamref/","title":"Uparamref","text":"<p>UPARAM(ref)</p> <p>UPARAM(hidden)</p> <p>UPARAM(DisplayName=\"X (Roll)\")</p> <p>const bool bMulticastDelegateProp = Property-&gt;IsA(UMulticastDelegateProperty::StaticClass());</p> <p>const bool bDelegateProp = (Property-&gt;IsA(UDelegateProperty::StaticClass()) || bMulticastDelegateProp);</p> <p>const bool bShouldShowAsVar = (!Property-&gt;HasAnyPropertyFlags(CPF_Parm) &amp;&amp; Property-&gt;HasAllPropertyFlags(CPF_BlueprintVisible)) &amp;&amp; !bDelegateProp;</p> <p>CPF_DisableEditOnInstance</p> <p>DetailBuilder.HideProperty( DetailBuilder.GetProperty( GET_MEMBER_NAME_CHECKED(USceneComponent, bAbsoluteLocation) ) );</p> <p>SKeySelector</p>"},{"location":"ue4guide/wip/unfinished/useful-functions/","title":"Useful functions","text":""},{"location":"ue4guide/wip/unfinished/useful-functions/#useful-functions","title":"Useful functions","text":"<p>ULocalPlayer::GetPixelPoint()</p> <p>ULocalPlayer::GetProjectionData(FViewport* Viewport, EStereoscopicPass StereoPass, FSceneViewProjectionData&amp; ProjectionData) const;</p> <p>GetWorldTimerManager().SetTimerForNextTick(this, &amp;AUTGameMode::StartMatch);</p> <p>UShooterGameViewportClient::ShowDialog()</p> <p>Dodging:</p> <p>bool UUTCharacterMovement::PerformDodge(FVector &amp;DodgeDir, FVector &amp;DodgeCross)</p> <p>bool AUTCharacter::Dodge(FVector DodgeDir, FVector DodgeCross)</p> <p>Fapp::UseVRFocus</p> <p>Set Maximum Delta Time between frames; helpful for debugging by t.OverrideFPS or UGameEngine::MaxDeltaTime</p> <ul> <li>MaxDeltaTime is unusable in network games (look at UpdateTimeAndHandleMaxTickRate)</li> </ul> <p>FixupDeltaSeconds(DeltaSeconds, RealDeltaSeconds);</p> <p>APawn::MoveIgnoreActorAdd()</p> <p>* Handles game-specific networking management (cheat detection, bandwidth management, etc.).</p> <p>AGameNetworkManager</p> <p>For both Actors &amp; Components</p> <p>virtual void CheckForErrors();</p> <p>virtual void CheckForDeprecated();</p> <p>SGenericDialogWidget::OpenDialog()</p> <p>AActor::DisplayDebug(</p> <p>Unreal Tournament Good References:</p> <ul> <li> <p>UUTAnnouncer class for announcer</p> </li> <li> <p>UUTProfileSettings</p> </li> </ul> <p>DisplayInternals()</p> <p>ProfilingDebugging</p> <p>ABTesting.H</p> <p>ExternalProfiler</p> <p>Histogram.h</p> <p>MallocProfiler</p> <p>for( TArray&lt;ULevel*&gt;::TConstIterator it = GetWorld()-&gt;GetLevels().CreateConstIterator(); it; ++it ) {         ULevel* CurLevel = *it;         if( CurLevel &amp;&amp; CurLevel-&gt;bIsVisible )         {                 ALevelScriptActor* LSA = CurLevel-&gt;GetLevelScriptActor();</p>"},{"location":"ue4guide/wip/unfinished/useful-functions/#changing-component-ownership","title":"Changing Component Ownership:","text":"<ol> <li> <p>void RegisterTImelineWithActor(UTimelineComponent* Timeline, AActor* Actor)</p> </li> <li> <p>{</p> </li> <li> <p>// Might want to save this if it's not the TransientPackage / World.</p> </li> <li> <p>UObject* OriginalOwner = Timeline-&gt;GetOuter();</p> </li> <li> <p>FString OriginalName = Timeline-&gt;GetName();</p> </li> <li> <p>// We can leave the name alone.</p> </li> <li> <p>Timeline-&gt;Rename( *OriginalName, Actor );</p> </li> <li> <p>Actor-&gt;AddInstancedComponent(Timeline);</p> </li> <li> <p>Timeline-&gt;RegisterAllTickFunctions(true);</p> </li> <li> <p>// At this point, you can perform any other setup / re-initialization needed on the</p> </li> <li> <p>// timeline. Also, GetOwner in the Timeline should now return the passed in</p> </li> <li> <p>// Actor.</p> </li> <li> <p>}</p> </li> <li> <p>void UnregisterTimelineComponent(UTimelineComponent* Timeline)</p> </li> <li> <p>{</p> </li> <li> <p>AActor* Actor = Timeline-&gt;GetOwner();</p> </li> <li> <p>// This will unregister tick functions.</p> </li> <li> <p>Timeline-&gt;Rename(*OriginalName, OriginalOuter);</p> </li> <li> <p>}</p> </li> </ol> <p>From https://answers.unrealengine.com/questions/539437/temporarily-adding-ticking-actorcomponents-to-acto.html</p>"},{"location":"ue4guide/wip/unfinished/usf-changes/","title":"Usf changes","text":""},{"location":"ue4guide/wip/unfinished/usf-changes/#usf-changes","title":"USF Changes","text":"<p>If you are just making usf changes to your VF and not C++ changes, you can setup a simple test level, run it in the editor, then recompile just a single material applied to a single mesh (or whatever your vertex factory is). When you recompile a material in the material editor, it re-reads all the usf files from disk so you can quickly iterate that way.</p> <p>When you are making a new vertex factory be sure not to just return true from the ShouldCache. That will make it compile the shaders everywhere on every material. Add a usage flag to the material, then artists have to opt-in to using it. Actually the editor will automatically set the flag when possible. Then only those flagged materials will compile your VF, which can cut down the shader combinations needed massively. Have a look at any other vertex factory for a working example (except local VF).</p> <p>From https://forums.unrealengine.com/showthread.php?6719-Debugging-USF-(Unreal-Shader-Files)</p> <p>https://github.com/appleseedhq/appleseed/blob/master/src/appleseed/foundation/mesh/alembicmeshfilereader.cpp#L141</p> <p>http://docs.alembic.io/python/examples.html</p> <p>In this example, given a node in an Alembic Archive, we\u2019ll figure out what the final xform is. We proceed from the leaf to the root. We\u2019re going to change visitObject() slightly. Instead of checking the object\u2019s name, we\u2019re going to call a new function, getBounds(). This example is adapted from</p> <p>http://code.google.com/p/alembic/wiki/CookingWithAlembic#Accumulating_a_Transform</p> <p>gBounds = imath.Box3d() gBounds.makeEmpty() kWrapExisting = alembic.Abc.WrapExistingFlag.kWrapExisting</p> <p>def accumXform(xf, obj): if IXform.matches(obj.getHeader()): x = IXform(obj, kWrapExisting) xs = x.getSchema().getValue() xf *= xs.getMatrix()</p> <p>def getFinalMatrix(obj): xf = imath.M44d() xf.makeIdentity() parent = obj.getParent() while parent: accumXform(xf, parent) parent = parent.getParent() return xf</p> <p>def getBounds(obj): bnds = imath.Box3d() bnds.makeEmpty() md = obj.getMetaData() if IPolyMesh.matches(md) or ISubD.matches(md): mesh = IPolyMesh(obj, kWrapExisting) ms = mesh.getSchema() positions = ms.getValue().getPositions() numPoints = len(positions) for i in range(numPoints): bnds.extendBy(imath.V3d(positions[i])) bnds.extendBy(transform(bnds, xf)) gBounds.extendBy(bnds)</p> <p>def visitObject(obj): md = obj.getMetaData() if IPolyMesh.matches(md) or ISubD.matches(md): getBounds(obj) for childObject in obj.children: visitObject(childObject)</p> <p>From http://docs.alembic.io/python/examples.html#accumulating-a-transform</p>"},{"location":"ue4guide/wip/unfinished/ustaticmeshcomponent/","title":"Ustaticmeshcomponent","text":""},{"location":"ue4guide/wip/unfinished/ustaticmeshcomponent/#ustaticmeshcomponent","title":"UStaticMeshComponent","text":"<p>Have a look at UStaticMeshComponent::GetComponentInstanceData and UStaticMeshComponent::ApplyComponentInstanceData. This is where lightmap data for components created in a construction script are supposed to backup and then restore their static lighting. Most likely something is happening causing the lightmaps to not be restored properly. Otherwise, look for a later call to InvalidateLightingCache and see why that is happening.</p> <p>From https://udn.unrealengine.com/questions/163437/lightasifstatic-with-mf-dynamic-resulting-in-too-m.html</p> <p>Finally, is there a way to disable these static lights insertions without side effects? (without having to rebuild all the lighting without issues)</p> <p>You can disregard all unbuilt interactions by modifying FLightPrimitiveInteraction::Create, however that's not addressing the root cause.</p> <p>From https://udn.unrealengine.com/questions/245332/ue4-static-light-building-issues.html</p> <p>bool FLightSceneInfo::ShouldRenderLight(const FViewInfo&amp; View) const</p> <p>/** Encapsulates all View-Independent reasons to have this light render. */</p> <p>bool ShouldRenderLightViewIndependent() const</p> <p>{</p> <p>return !Proxy-&gt;GetColor().IsAlmostBlack()</p> <p>// Only render lights with dynamic lighting or unbuilt static lights</p> <p>&amp;&amp; (!Proxy-&gt;HasStaticLighting() || !IsPrecomputedLightingValid());</p> <p>}</p> <p>bool IsPrecomputedLightingValid() const;</p> <p>void CreateLightPrimitiveInteraction(const FLightSceneInfoCompact&amp; LightSceneInfoCompact, const FPrimitiveSceneInfoCompact&amp; PrimitiveSceneInfoCompact);</p> <p>Lightmapping:</p> <p>void ApplyLightMapping(FStaticLightingTextureMapping_InstancedStaticMesh* InMapping, ULevel* LightingScenario);</p> <p>FStaticMeshStaticLightingTextureMapping</p> <p>void FStaticMeshStaticLightingTextureMapping::Apply(FQuantizedLightmapData* QuantizedData, const TMap&lt;ULightComponent*,FShadowMapData2D*&gt;&amp; ShadowMapData, ULevel* LightingScenario)</p> <p>UInstancedStaticMeshComponent() as reference for applying custom render/lightmap data based on another primitive</p> <p>class FLandscapeStaticLightingMesh : public FStaticLightingMesh</p> <p>/**</p> <p>*An interface to cached lighting for a specific mesh.</p> <p>*/</p> <p>class FLightCacheInterface</p> <p>Analyze Material Outputs (e.g. users vertexcolor, number of texturecoordcount, etc):</p> <p>void UMaterialInterface::AnalyzeMaterialProperty(EMaterialProperty InProperty, int32&amp; OutNumTextureCoordinates, bool&amp; bOutRequiresVertexData)</p> <p>Add Render Overlay Extensions:</p> <p>ISceneViewExtension</p> <ul> <li>This is what's used to late latch motioncontroller/hmd transforms</li> </ul> <p>Custom Lightmap for components and/or referencing the indirect lighting cache in a material:</p> <ul> <li> <p>bUseLandscapeLightmap in Landscape GrassType</p> </li> <li> <p>InitLandscapeLightmap()</p> </li> <li> <p>SetInstance()</p> </li> <li> <p>Code on updating lightmap coords/transforms</p> </li> <li> <p>Also look at StaticInstanceMesh() on how to rotate/transform lightmaps</p> </li> <li> <p>FLandscapeGrassLightMap()</p> </li> <li> <p>// Make sure root is a StaticMeshComponent:</p> </li> <li> <p>USCS_Node* RootNode = SCS-&gt;GetAllNodes()[0];</p> </li> <li> <p>check(RootNode &amp;&amp; \"SCS Root node was null!\");</p> </li> <li> <p>UStaticMeshComponent* SMC = Cast&lt;UStaticMeshComponent&gt;(RootNode-&gt;ComponentTemplate);</p> </li> <li> <p>check(SMC &amp;&amp; \"Root was not a static mesh component!\");</p> </li> <li> <p>USCS_Node* MyComponentNode = SCS-&gt;CreateNode(UMyComponent::StaticClass());</p> </li> <li> <p>MyComponentNode-&gt;ComponentTemplate-&gt;CreationMethod = EComponentCreationMethod::Native;;</p> </li> <li> <p>RootNode-&gt;AddChildNode(MyComponentNode, false);</p> </li> <li> <p>FBlueprintEditorUtils::MarkBlueprintAsStructurallyModified(Blueprint);</p> </li> </ul> <p>From https://udn.unrealengine.com/questions/413898/attaching-component-to-a-blueprint-asset-in-c.html</p>"}]}